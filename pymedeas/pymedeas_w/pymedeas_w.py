"""
Python model "_p2_output_world.py"
Translated using PySD version 0.10.0
"""
from __future__ import division
import numpy as np
import xarray as xr

from pysd.py_backend.functions import cache, active_initial
from pysd.py_backend.functions import sum, if_then_else, lookup, Delay, Integ, Initial, logical_or, logical_and, zidz, xidz, step
from pysd.py_backend.utils import align_by_dims
from pymedeas_w.__init__ import subscript_dict, namespace

__pysd_version__ = "0.10.0"


__data = {
    'scope': None,
    'time': lambda: 0
}


def _init_outer_references(data):
    for key in data:
        __data[key] = data[key]


def time():
    return __data['time']()


_subscript_dict = subscript_dict
_namespace = namespace


@cache('run')
def equality_threshold():
    """" This parameter is used to prevent model instabilities caused by comparison operators (e.g. <, >, ==) in
    conditional statements
    """
    return 1e-4


def historic_energy_industry_own_use(x):
    """
    Real Name: b'historic energy industry own use'
    Original Eqn: b'([(1995,2015)-(22.156472,34.984601229999996)],(1995,22.156472),(1996,22.60307155),(1997,23.773625550000002),(1998,24.59372446),(1999,24.10043912),\\\\ (2000,24.72790491),(2001,25.16174025),(2002,26.09361307),(2003,27.61312513),(2004,27.674875989999997),\\\\ (2005,28.95976941),(2006,30.03572794),(2007,31.33264877),(2008,32.31393308),(2009,31.96168298),\\\\ (2010,33.752442200000004),(2011,34.54742764),(2012,34.46151735),(2013,34.984601229999996),(2014,34.885496659999994),\\\\ (2015,34.92262822))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014, 2015
    ], [
        22.156472, 22.60307155, 23.773625550000002, 24.59372446, 24.10043912, 24.72790491,
        25.16174025, 26.09361307, 27.61312513, 27.674875989999997, 28.95976941, 30.03572794,
        31.33264877, 32.31393308, 31.96168298, 33.752442200000004, 34.54742764, 34.46151735,
        34.984601229999996, 34.885496659999994, 34.92262822
    ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subagriculture_hunting_forestry_and_fishing(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subagriculture hunting forestry and fishing'
    Original Eqn: b'([(1995,2009)-(0.6269526899631803,0.7241971461530861)],(1995,0.7241971461530861),(1996,0.708925072756311),(1997,0.6998144878200208),(1998,0.6785107560564287),(1999,0.6552600882169791),\\\\ (2000,0.6315664469531413),(2001,0.6474383043815678),(2002,0.6462555924915394),(2003,0.6362194771534165),(2004,0.6269526899631803),\\\\ (2005,0.6287197169177513),(2006,0.649448507837442),(2007,0.6773391674440454),(2008,0.6565191729265971),(2009,0.6750516890263))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.7241971461530861, 0.708925072756311, 0.6998144878200208, 0.6785107560564287,
            0.6552600882169791, 0.6315664469531413, 0.6474383043815678, 0.6462555924915394,
            0.6362194771534165, 0.6269526899631803, 0.6287197169177513, 0.649448507837442,
            0.6773391674440454, 0.6565191729265971, 0.6750516890263
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_submining_and_quarrying(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity submining and quarrying'
    Original Eqn: b'([(1995,2009)-(1.204262170936298,1.575438640288508)],(1995,1.5634910007468006),(1996,1.5112702035759604),(1997,1.5517158938879816),(1998,1.575438640288508),(1999,1.4696896640657946),\\\\ (2000,1.3928937451492078),(2001,1.5000345353002407),(2002,1.5238317127411405),(2003,1.4923776372944797),(2004,1.4713179539606795),\\\\ (2005,1.4377547101284724),(2006,1.335297206200341),(2007,1.3719554839627304),(2008,1.204262170936298),(2009,1.3283417503967039))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.5634910007468006, 1.5112702035759604, 1.5517158938879816, 1.575438640288508,
            1.4696896640657946, 1.3928937451492078, 1.5000345353002407, 1.5238317127411405,
            1.4923776372944797, 1.4713179539606795, 1.4377547101284724, 1.335297206200341,
            1.3719554839627304, 1.204262170936298, 1.3283417503967039
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subfood_beverages_and_tobacco(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subfood beverages and tobacco'
    Original Eqn: b'([(1995,2009)-(0.3872589683473662,0.43200313279180014)],(1995,0.3872589683473662),(1996,0.38991463229558976),(1997,0.39101143513263503),(1998,0.39505465054488725),(1999,0.3933419255112612),\\\\ (2000,0.3999444285581746),(2001,0.4126345462420507),(2002,0.43200313279180014),(2003,0.4299559197047555),(2004,0.4285299876839093),\\\\ (2005,0.42113855610917716),(2006,0.41406466418672366),(2007,0.4119767790339999),(2008,0.41251967360302194),(2009,0.41162621691153284))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.3872589683473662, 0.38991463229558976, 0.39101143513263503, 0.39505465054488725,
            0.3933419255112612, 0.3999444285581746, 0.4126345462420507, 0.43200313279180014,
            0.4299559197047555, 0.4285299876839093, 0.42113855610917716, 0.41406466418672366,
            0.4119767790339999, 0.41251967360302194, 0.41162621691153284
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subtextiles_and_textile_products(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subtextiles and textile products'
    Original Eqn: b'([(1995,2009)-(0.7000523728228109,0.8129769521621621)],(1995,0.8098595818123617),(1996,0.7809054314995713),(1997,0.8129769521621621),(1998,0.8081881969977484),(1999,0.784174020547582),\\\\ (2000,0.7971238777782144),(2001,0.7883099437214302),(2002,0.7795792702076949),(2003,0.7823568161223905),(2004,0.8096815563070188),\\\\ (2005,0.7777888964711069),(2006,0.7702650014841644),(2007,0.7564683224583868),(2008,0.7000523728228109),(2009,0.7024078973512976))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.8098595818123617, 0.7809054314995713, 0.8129769521621621, 0.8081881969977484,
            0.784174020547582, 0.7971238777782144, 0.7883099437214302, 0.7795792702076949,
            0.7823568161223905, 0.8096815563070188, 0.7777888964711069, 0.7702650014841644,
            0.7564683224583868, 0.7000523728228109, 0.7024078973512976
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subleather_leather_and_footwear(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subleather leather and footwear'
    Original Eqn: b'([(1995,2009)-(0.25757048727115656,0.3515074970928847)],(1995,0.35139111305783044),(1996,0.33316073109134436),(1997,0.33808935659610473),(1998,0.3301911458791342),(1999,0.32742257172175443),\\\\ (2000,0.3383774266000901),(2001,0.3320929088833885),(2002,0.33770250309350436),(2003,0.3328079754567813),(2004,0.3515074970928847),\\\\ (2005,0.32595095501665117),(2006,0.3104903316024953),(2007,0.29027356586922193),(2008,0.259192861625059),(2009,0.25757048727115656))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.35139111305783044, 0.33316073109134436, 0.33808935659610473, 0.3301911458791342,
            0.32742257172175443, 0.3383774266000901, 0.3320929088833885, 0.33770250309350436,
            0.3328079754567813, 0.3515074970928847, 0.32595095501665117, 0.3104903316024953,
            0.29027356586922193, 0.259192861625059, 0.25757048727115656
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subwood_and_products_of_wood_and_cork(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subwood and products of wood and cork'
    Original Eqn: b'([(1995,2009)-(0.6526672333479513,0.8803194465366069)],(1995,0.8729045156287489),(1996,0.8803194465366069),(1997,0.8585216005427833),(1998,0.8732729973240205),(1999,0.8661234191346798),\\\\ (2000,0.8644024652870175),(2001,0.8579514779557791),(2002,0.8304499897127946),(2003,0.816855955036405),(2004,0.8115243628395454),\\\\ (2005,0.6828909225936747),(2006,0.6526672333479513),(2007,0.6585095983831069),(2008,0.6816773281639819),(2009,0.6777837932313371))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.8729045156287489, 0.8803194465366069, 0.8585216005427833, 0.8732729973240205,
            0.8661234191346798, 0.8644024652870175, 0.8579514779557791, 0.8304499897127946,
            0.816855955036405, 0.8115243628395454, 0.6828909225936747, 0.6526672333479513,
            0.6585095983831069, 0.6816773281639819, 0.6777837932313371
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subpulp_paper_printing_and_publishing(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subpulp paper printing and publishing'
    Original Eqn: b'([(1995,2009)-(1.0676209273986548,1.2263768378705506)],(1995,1.2263768378705506),(1996,1.2144155296983012),(1997,1.197934329105796),(1998,1.184390669935025),(1999,1.1712966433885488),\\\\ (2000,1.169997471480713),(2001,1.1966292361936643),(2002,1.1999943104244262),(2003,1.2203385654272842),(2004,1.2225810264380397),\\\\ (2005,1.1766825924595492),(2006,1.1650724058722093),(2007,1.1133423207226474),(2008,1.0869767100370342),(2009,1.0676209273986548))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.2263768378705506, 1.2144155296983012, 1.197934329105796, 1.184390669935025,
            1.1712966433885488, 1.169997471480713, 1.1966292361936643, 1.1999943104244262,
            1.2203385654272842, 1.2225810264380397, 1.1766825924595492, 1.1650724058722093,
            1.1133423207226474, 1.0869767100370342, 1.0676209273986548
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subcoke_refined_petroleum_and_nuclear_fuel(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subcoke refined petroleum and nuclear fuel'
    Original Eqn: b'([(1995,2009)-(0.6064451932608534,0.9412770882258273)],(1995,0.9165557410684781),(1996,0.9358000116019126),(1997,0.9243841164204407),(1998,0.8953306635622691),(1999,0.8664440465758191),\\\\ (2000,0.9135066449439855),(2001,0.9412770882258273),(2002,0.9360752874602274),(2003,0.8827707875290411),(2004,0.8565953567127532),\\\\ (2005,0.7948033487166073),(2006,0.7413171643399493),(2007,0.7637328942332169),(2008,0.6064451932608534),(2009,0.7069123870027182))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.9165557410684781, 0.9358000116019126, 0.9243841164204407, 0.8953306635622691,
            0.8664440465758191, 0.9135066449439855, 0.9412770882258273, 0.9360752874602274,
            0.8827707875290411, 0.8565953567127532, 0.7948033487166073, 0.7413171643399493,
            0.7637328942332169, 0.6064451932608534, 0.7069123870027182
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subchemicals_and_chemical_products(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subchemicals and chemical products'
    Original Eqn: b'([(1995,2009)-(1.514599748285027,1.8308315315621162)],(1995,1.803552955165638),(1996,1.8308315315621162),(1997,1.7496041241839269),(1998,1.6452475708012788),(1999,1.6101830348922872),\\\\ (2000,1.666450341608775),(2001,1.6611052910033846),(2002,1.6204107698126002),(2003,1.644341474418466),(2004,1.6483042729285202),\\\\ (2005,1.6666473381010591),(2006,1.6106763308171923),(2007,1.558536120192618),(2008,1.5213063144943828),(2009,1.514599748285027))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.803552955165638, 1.8308315315621162, 1.7496041241839269, 1.6452475708012788,
            1.6101830348922872, 1.666450341608775, 1.6611052910033846, 1.6204107698126002,
            1.644341474418466, 1.6483042729285202, 1.6666473381010591, 1.6106763308171923,
            1.558536120192618, 1.5213063144943828, 1.514599748285027
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subrubber_and_plastics(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subrubber and plastics'
    Original Eqn: b'([(1995,2009)-(1.6424496581101529,1.8795825516807279)],(1995,1.7516755152937544),(1996,1.824574493937183),(1997,1.7920601389627309),(1998,1.8067289091982912),(1999,1.8795825516807279),\\\\ (2000,1.8435548709997704),(2001,1.7842275613004739),(2002,1.845080435538212),(2003,1.6730108764548752),(2004,1.6424496581101529),\\\\ (2005,1.7862606136200592),(2006,1.706408159426469),(2007,1.6649464780881742),(2008,1.6942052186029162),(2009,1.7361101430096244))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.7516755152937544, 1.824574493937183, 1.7920601389627309, 1.8067289091982912,
            1.8795825516807279, 1.8435548709997704, 1.7842275613004739, 1.845080435538212,
            1.6730108764548752, 1.6424496581101529, 1.7862606136200592, 1.706408159426469,
            1.6649464780881742, 1.6942052186029162, 1.7361101430096244
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subother_non_metalic_mineral(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subother non metalic mineral'
    Original Eqn: b'([(1995,2009)-(1.5615298108178137,1.9519753682288368)],(1995,1.6010029593093376),(1996,1.5932256091723684),(1997,1.5699087462270658),(1998,1.5672520333522502),(1999,1.5615298108178137),\\\\ (2000,1.576358038509453),(2001,1.6431319189067426),(2002,1.6958319558465424),(2003,1.7255318447745254),(2004,1.7461744142710622),\\\\ (2005,1.7654612366537779),(2006,1.791817576209471),(2007,1.770131164494374),(2008,1.784319158537765),(2009,1.9519753682288368))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.6010029593093376, 1.5932256091723684, 1.5699087462270658, 1.5672520333522502,
            1.5615298108178137, 1.576358038509453, 1.6431319189067426, 1.6958319558465424,
            1.7255318447745254, 1.7461744142710622, 1.7654612366537779, 1.791817576209471,
            1.770131164494374, 1.784319158537765, 1.9519753682288368
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subbasic_metals_and_fabricated_metal(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subbasic metals and fabricated metal'
    Original Eqn: b'([(1995,2009)-(1.9122783844372382,2.230707958542277)],(1995,1.9776155903879076),(1996,1.9392195301196662),(1997,1.9215450030205303),(1998,1.9122783844372382),(1999,1.929118205864779),\\\\ (2000,1.9815693703488377),(2001,2.009944479295412),(2002,2.075131535173117),(2003,2.1513151629091998),(2004,2.218317981076714),\\\\ (2005,2.199945744072929),(2006,2.18378513331959),(2007,2.2290229109356408),(2008,2.230707958542277),(2009,2.19480244602311))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.9776155903879076, 1.9392195301196662, 1.9215450030205303, 1.9122783844372382,
            1.929118205864779, 1.9815693703488377, 2.009944479295412, 2.075131535173117,
            2.1513151629091998, 2.218317981076714, 2.199945744072929, 2.18378513331959,
            2.2290229109356408, 2.230707958542277, 2.19480244602311
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_submachinery_nec(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity submachinery nec'
    Original Eqn: b'([(1995,2009)-(0.28813036805786,0.38497878559139365)],(1995,0.38497878559139365),(1996,0.3561548057898775),(1997,0.3415291275971809),(1998,0.3427851610972068),(1999,0.3437487022843571),\\\\ (2000,0.3419753064945743),(2001,0.351691064073765),(2002,0.3675386907038594),(2003,0.3554827336970448),(2004,0.3381230832880707),\\\\ (2005,0.3132625954950186),(2006,0.2968054254027654),(2007,0.28813036805786),(2008,0.2886452636675849),(2009,0.32409542919292395))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.38497878559139365, 0.3561548057898775, 0.3415291275971809, 0.3427851610972068,
            0.3437487022843571, 0.3419753064945743, 0.351691064073765, 0.3675386907038594,
            0.3554827336970448, 0.3381230832880707, 0.3132625954950186, 0.2968054254027654,
            0.28813036805786, 0.2886452636675849, 0.32409542919292395
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subelectrical_and_optical_equipment(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subelectrical and optical equipment'
    Original Eqn: b'([(1995,2009)-(0.2080015981423694,0.3881121835801443)],(1995,0.3881121835801443),(1996,0.37575844467622455),(1997,0.35774634718219034),(1998,0.34943354468767224),(1999,0.34381343331070224),\\\\ (2000,0.3112718982059209),(2001,0.30223301921643114),(2002,0.2984296037773112),(2003,0.2794400085359985),(2004,0.2601078257061289),\\\\ (2005,0.24895235432425467),(2006,0.23047562719826115),(2007,0.2196316918765295),(2008,0.2080015981423694),(2009,0.21658242383320356))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.3881121835801443, 0.37575844467622455, 0.35774634718219034, 0.34943354468767224,
            0.34381343331070224, 0.3112718982059209, 0.30223301921643114, 0.2984296037773112,
            0.2794400085359985, 0.2601078257061289, 0.24895235432425467, 0.23047562719826115,
            0.2196316918765295, 0.2080015981423694, 0.21658242383320356
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subtransport_equipment(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subtransport equipment'
    Original Eqn: b'([(1995,2009)-(0.23683425921684204,0.3056591045379025)],(1995,0.29157175769801413),(1996,0.2932733502579648),(1997,0.2865009021457406),(1998,0.28318178927285437),(1999,0.2708520350396004),\\\\ (2000,0.3056591045379025),(2001,0.30542284485819216),(2002,0.2939825969509754),(2003,0.2861779021729641),(2004,0.2932579238288578),\\\\ (2005,0.2660253656864477),(2006,0.2523719403305147),(2007,0.23683425921684204),(2008,0.2378185951613391),(2009,0.26199150808256366))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.29157175769801413, 0.2932733502579648, 0.2865009021457406, 0.28318178927285437,
            0.2708520350396004, 0.3056591045379025, 0.30542284485819216, 0.2939825969509754,
            0.2861779021729641, 0.2932579238288578, 0.2660253656864477, 0.2523719403305147,
            0.23683425921684204, 0.2378185951613391, 0.26199150808256366
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_submanufacturing_nec_recycling(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity submanufacturing nec recycling'
    Original Eqn: b'([(1995,2009)-(0.7153254959608057,0.9096502751261356)],(1995,0.8569169761465573),(1996,0.8694348704950727),(1997,0.8818025593648565),(1998,0.9096502751261356),(1999,0.8725065440725464),\\\\ (2000,0.8044003060524386),(2001,0.7687321308791215),(2002,0.8306392887445839),(2003,0.7500852931749243),(2004,0.7215141505939332),\\\\ (2005,0.7922587022642156),(2006,0.7822512856775996),(2007,0.7153254959608057),(2008,0.814964939710505),(2009,0.8170739106271032))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.8569169761465573, 0.8694348704950727, 0.8818025593648565, 0.9096502751261356,
            0.8725065440725464, 0.8044003060524386, 0.7687321308791215, 0.8306392887445839,
            0.7500852931749243, 0.7215141505939332, 0.7922587022642156, 0.7822512856775996,
            0.7153254959608057, 0.814964939710505, 0.8170739106271032
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subelectricity_gas_and_water_supply(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subelectricity gas and water supply'
    Original Eqn: b'([(1995,2009)-(2.333247621523986,2.8574728837212615)],(1995,2.6240585151440134),(1996,2.5827547952978684),(1997,2.6980829723166853),(1998,2.6792657225987164),(1999,2.6552380668911906),\\\\ (2000,2.6264867297696766),(2001,2.333247621523986),(2002,2.5314112882795596),(2003,2.679668653346034),(2004,2.6745633298685774),\\\\ (2005,2.6329365375141487),(2006,2.7085624351709545),(2007,2.6564387303091666),(2008,2.581028066820715),(2009,2.8574728837212615))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            2.6240585151440134, 2.5827547952978684, 2.6980829723166853, 2.6792657225987164,
            2.6552380668911906, 2.6264867297696766, 2.333247621523986, 2.5314112882795596,
            2.679668653346034, 2.6745633298685774, 2.6329365375141487, 2.7085624351709545,
            2.6564387303091666, 2.581028066820715, 2.8574728837212615
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subconstruction(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subconstruction'
    Original Eqn: b'([(1995,2009)-(0.07564017908634847,0.1244365089556424)],(1995,0.10596936611626993),(1996,0.11752002197397564),(1997,0.10637076833546745),(1998,0.11940080040308412),(1999,0.1244365089556424),\\\\ (2000,0.11581265842963812),(2001,0.09767988013188698),(2002,0.10694419521117998),(2003,0.07564017908634847),(2004,0.07964715523270356),\\\\ (2005,0.07981840107155418),(2006,0.08144162509328723),(2007,0.08640696882604974),(2008,0.0957116405787128),(2009,0.10473826892065874))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.10596936611626993, 0.11752002197397564, 0.10637076833546745, 0.11940080040308412,
            0.1244365089556424, 0.11581265842963812, 0.09767988013188698, 0.10694419521117998,
            0.07564017908634847, 0.07964715523270356, 0.07981840107155418, 0.08144162509328723,
            0.08640696882604974, 0.0957116405787128, 0.10473826892065874
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'
    Original Eqn: b'([(1995,2009)-(0.27164651402310047,0.3180725318361754)],(1995,0.29023907436985996),(1996,0.29546092453914086),(1997,0.29982259435817693),(1998,0.2985275103903131),(1999,0.29392740007325285),\\\\ (2000,0.27164651402310047),(2001,0.29919715620305803),(2002,0.2914474478372432),(2003,0.30414212771064614),(2004,0.29680981845439275),\\\\ (2005,0.27965689364716184),(2006,0.2851604486781958),(2007,0.2876977938199097),(2008,0.3028584015902629),(2009,0.3180725318361754))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.29023907436985996, 0.29546092453914086, 0.29982259435817693, 0.2985275103903131,
            0.29392740007325285, 0.27164651402310047, 0.29919715620305803, 0.2914474478372432,
            0.30414212771064614, 0.29680981845439275, 0.27965689364716184, 0.2851604486781958,
            0.2876977938199097, 0.3028584015902629, 0.3180725318361754
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subwholesale trade and commissions trade except of motor vehicles and motorcycles'
    Original Eqn: b'([(1995,2009)-(0.1902452549651085,0.22317011916600307)],(1995,0.19819158488103156),(1996,0.1988984695251443),(1997,0.1902452549651085),(1998,0.19114253279138624),(1999,0.20230726292600698),\\\\ (2000,0.20364517363751936),(2001,0.20459780243338735),(2002,0.21415082222077816),(2003,0.2131461017021144),(2004,0.2073036112635289),\\\\ (2005,0.20399321708074358),(2006,0.20639263406148797),(2007,0.20941044634889908),(2008,0.22317011916600307),(2009,0.19985183045602822))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.19819158488103156, 0.1988984695251443, 0.1902452549651085, 0.19114253279138624,
            0.20230726292600698, 0.20364517363751936, 0.20459780243338735, 0.21415082222077816,
            0.2131461017021144, 0.2073036112635289, 0.20399321708074358, 0.20639263406148797,
            0.20941044634889908, 0.22317011916600307, 0.19985183045602822
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subretail trade except of motor vehicles and motorcycles repair of household goods'
    Original Eqn: b'([(1995,2009)-(0.46117943887494817,0.5091177800892925)],(1995,0.49852024433364905),(1996,0.49076619915037845),(1997,0.4876463096311946),(1998,0.48853974638903147),(1999,0.5091177800892925),\\\\ (2000,0.4873674900783807),(2001,0.48477778575155234),(2002,0.49413782382381477),(2003,0.5021773483646942),(2004,0.5071092493982671),\\\\ (2005,0.47008904095609366),(2006,0.46117943887494817),(2007,0.48198387270778725),(2008,0.5049321158097608),(2009,0.47628496738666654))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.49852024433364905, 0.49076619915037845, 0.4876463096311946, 0.48853974638903147,
            0.5091177800892925, 0.4873674900783807, 0.48477778575155234, 0.49413782382381477,
            0.5021773483646942, 0.5071092493982671, 0.47008904095609366, 0.46117943887494817,
            0.48198387270778725, 0.5049321158097608, 0.47628496738666654
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subhotels_and_restaurants(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subhotels and restaurants'
    Original Eqn: b'([(1995,2009)-(0.6228922759356975,0.8162340685124673)],(1995,0.6316259743579479),(1996,0.6228922759356975),(1997,0.6409051875756983),(1998,0.6349520690961216),(1999,0.6313261976802199),\\\\ (2000,0.651029329488104),(2001,0.6736644901263359),(2002,0.7027213918199248),(2003,0.7192748013416302),(2004,0.6926817749424463),\\\\ (2005,0.6975865146363074),(2006,0.7203197000945538),(2007,0.7392532435237646),(2008,0.7956355255567737),(2009,0.8162340685124673))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.6316259743579479, 0.6228922759356975, 0.6409051875756983, 0.6349520690961216,
            0.6313261976802199, 0.651029329488104, 0.6736644901263359, 0.7027213918199248,
            0.7192748013416302, 0.6926817749424463, 0.6975865146363074, 0.7203197000945538,
            0.7392532435237646, 0.7956355255567737, 0.8162340685124673
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subinland_transport(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subinland transport'
    Original Eqn: b'([(1995,2009)-(0.40666224043170296,0.45286590216598044)],(1995,0.4483452062377024),(1996,0.45286590216598044),(1997,0.4451464125518518),(1998,0.4250024788940665),(1999,0.41169122950481013),\\\\ (2000,0.4262861053691009),(2001,0.4192292284879077),(2002,0.4322862683192847),(2003,0.44932075861220566),(2004,0.44433341086508094),\\\\ (2005,0.42814418035587165),(2006,0.4182680008927667),(2007,0.417896236209432),(2008,0.40666224043170296),(2009,0.426985238182552))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.4483452062377024, 0.45286590216598044, 0.4451464125518518, 0.4250024788940665,
            0.41169122950481013, 0.4262861053691009, 0.4192292284879077, 0.4322862683192847,
            0.44932075861220566, 0.44433341086508094, 0.42814418035587165, 0.4182680008927667,
            0.417896236209432, 0.40666224043170296, 0.426985238182552
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subwater_transport(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subwater transport'
    Original Eqn: b'([(1995,2009)-(0.0,1.796435777226835e-05)],(1995,0.0),(1996,0.0),(1997,0.0),(1998,0.0),(1999,0.0),\\\\ (2000,0.0),(2001,0.0),(2002,0.0),(2003,0.0),(2004,0.0),\\\\ (2005,0.0),(2006,0.0),(2007,0.0),(2008,0.0),(2009,1.796435777226835e-05))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.796435777226835e-05
    ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subair_transport(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subair transport'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subother supporting and auxiliary transport activities activities of travel agencies'
    Original Eqn: b'([(1995,2009)-(0.31166535903931797,0.385387817272461)],(1995,0.3351250982416472),(1996,0.3172017860190052),(1997,0.31166535903931797),(1998,0.3122641457070816),(1999,0.31651534903017065),\\\\ (2000,0.31346968682389725),(2001,0.3367378703234646),(2002,0.3585816344470207),(2003,0.362608758443261),(2004,0.3258887564484779),\\\\ (2005,0.32369825391559337),(2006,0.3429122781162016),(2007,0.3442326706594128),(2008,0.36049764467512),(2009,0.385387817272461))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.3351250982416472, 0.3172017860190052, 0.31166535903931797, 0.3122641457070816,
            0.31651534903017065, 0.31346968682389725, 0.3367378703234646, 0.3585816344470207,
            0.362608758443261, 0.3258887564484779, 0.32369825391559337, 0.3429122781162016,
            0.3442326706594128, 0.36049764467512, 0.385387817272461
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subpost_and_telecommunications(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subpost and telecommunications'
    Original Eqn: b'([(1995,2009)-(0.21358389938913094,0.27141218788839566)],(1995,0.2142453248427915),(1996,0.21499985706883995),(1997,0.22267555471748215),(1998,0.21380570808085655),(1999,0.21358389938913094),\\\\ (2000,0.22572066945040173),(2001,0.23543921322671155),(2002,0.25414285942284653),(2003,0.27141218788839566),(2004,0.26605874009786207),\\\\ (2005,0.2603283205745559),(2006,0.26302026795246414),(2007,0.25757215250376087),(2008,0.2678675035433738),(2009,0.260025663572746))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.2142453248427915, 0.21499985706883995, 0.22267555471748215, 0.21380570808085655,
            0.21358389938913094, 0.22572066945040173, 0.23543921322671155, 0.25414285942284653,
            0.27141218788839566, 0.26605874009786207, 0.2603283205745559, 0.26302026795246414,
            0.25757215250376087, 0.2678675035433738, 0.260025663572746
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subfinancial_intermediation(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subfinancial intermediation'
    Original Eqn: b'([(1995,2009)-(0.10825026748583594,0.13839558030319435)],(1995,0.1357129444444695),(1996,0.1335025986264839),(1997,0.13347355787905524),(1998,0.13530342504336876),(1999,0.1332398516261878),\\\\ (2000,0.13077685809779627),(2001,0.11743851754411798),(2002,0.1160974931940181),(2003,0.12211180403401836),(2004,0.12151574900706145),\\\\ (2005,0.1160599929351302),(2006,0.10825026748583594),(2007,0.1273302306890166),(2008,0.13839558030319435),(2009,0.1314090560744755))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.1357129444444695, 0.1335025986264839, 0.13347355787905524, 0.13530342504336876,
            0.1332398516261878, 0.13077685809779627, 0.11743851754411798, 0.1160974931940181,
            0.12211180403401836, 0.12151574900706145, 0.1160599929351302, 0.10825026748583594,
            0.1273302306890166, 0.13839558030319435, 0.1314090560744755
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subreal_estate_activities(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subreal estate activities'
    Original Eqn: b'([(1995,2009)-(0.23581865395159607,0.4612870638020768)],(1995,0.31331706620363864),(1996,0.3265824867186806),(1997,0.3271085731423654),(1998,0.3272119796580536),(1999,0.3049079343857554),\\\\ (2000,0.3466851022546009),(2001,0.34590615723305),(2002,0.3448615879622379),(2003,0.34449325697322003),(2004,0.4120247607578594),\\\\ (2005,0.4612870638020768),(2006,0.4424942059188907),(2007,0.3033982102598411),(2008,0.23581865395159607),(2009,0.27833046224886804))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.31331706620363864, 0.3265824867186806, 0.3271085731423654, 0.3272119796580536,
            0.3049079343857554, 0.3466851022546009, 0.34590615723305, 0.3448615879622379,
            0.34449325697322003, 0.4120247607578594, 0.4612870638020768, 0.4424942059188907,
            0.3033982102598411, 0.23581865395159607, 0.27833046224886804
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subrenting_od_meq_and_other_business_activities(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subrenting od meq and other business activities'
    Original Eqn: b'([(1995,2009)-(0.1690768138532979,0.19857039813316948)],(1995,0.18155751478579876),(1996,0.18895369439380297),(1997,0.1917845876674018),(1998,0.19816334008250425),(1999,0.19857039813316948),\\\\ (2000,0.1913312708049842),(2001,0.18326721091232706),(2002,0.17244465134086473),(2003,0.17894389359752372),(2004,0.17355814915740955),\\\\ (2005,0.17303117423193054),(2006,0.1690768138532979),(2007,0.18005979606460235),(2008,0.18671243674251325),(2009,0.19378581229435143))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.18155751478579876, 0.18895369439380297, 0.1917845876674018, 0.19816334008250425,
            0.19857039813316948, 0.1913312708049842, 0.18326721091232706, 0.17244465134086473,
            0.17894389359752372, 0.17355814915740955, 0.17303117423193054, 0.1690768138532979,
            0.18005979606460235, 0.18671243674251325, 0.19378581229435143
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subpublic_admin_and_defence_compulsory_social_security(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subpublic admin and defence compulsory social security'
    Original Eqn: b'([(1995,2009)-(0.40839951722917894,0.5449616826567257)],(1995,0.40839951722917894),(1996,0.41521087071191465),(1997,0.428197889891699),(1998,0.4285825726564223),(1999,0.4201005975115219),\\\\ (2000,0.41268027268550234),(2001,0.41211831677424504),(2002,0.4760328358825686),(2003,0.4927290785345975),(2004,0.4784253547244492),\\\\ (2005,0.45089277838492575),(2006,0.46473727616096494),(2007,0.5449616826567257),(2008,0.5187732225130455),(2009,0.5261113823348827))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.40839951722917894, 0.41521087071191465, 0.428197889891699, 0.4285825726564223,
            0.4201005975115219, 0.41268027268550234, 0.41211831677424504, 0.4760328358825686,
            0.4927290785345975, 0.4784253547244492, 0.45089277838492575, 0.46473727616096494,
            0.5449616826567257, 0.5187732225130455, 0.5261113823348827
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subeducation(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subeducation'
    Original Eqn: b'([(1995,2009)-(0.47589911961923304,0.7413783491439477)],(1995,0.47589911961923304),(1996,0.48810317329631847),(1997,0.5010530845658214),(1998,0.5051103590478777),(1999,0.4922273153673258),\\\\ (2000,0.5185140868132246),(2001,0.5384892892118762),(2002,0.5537962899548067),(2003,0.5845769195084838),(2004,0.58478878910022),\\\\ (2005,0.5987198528777099),(2006,0.6291527202343252),(2007,0.6913116423440042),(2008,0.7187108804786225),(2009,0.7413783491439477))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.47589911961923304, 0.48810317329631847, 0.5010530845658214, 0.5051103590478777,
            0.4922273153673258, 0.5185140868132246, 0.5384892892118762, 0.5537962899548067,
            0.5845769195084838, 0.58478878910022, 0.5987198528777099, 0.6291527202343252,
            0.6913116423440042, 0.7187108804786225, 0.7413783491439477
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subhealth_and_social_work(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subhealth and social work'
    Original Eqn: b'([(1995,2009)-(0.3319971823881577,0.3927018157309736)],(1995,0.3360550520069014),(1996,0.3319971823881577),(1997,0.3409749985532885),(1998,0.3457400169586935),(1999,0.3412237146366023),\\\\ (2000,0.3511642658000085),(2001,0.36708612847876365),(2002,0.36523506999109473),(2003,0.35815461591948927),(2004,0.3366687390387799),\\\\ (2005,0.33902602916666025),(2006,0.34971618344751637),(2007,0.35870597911304736),(2008,0.37563059560620543),(2009,0.3927018157309736))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.3360550520069014, 0.3319971823881577, 0.3409749985532885, 0.3457400169586935,
            0.3412237146366023, 0.3511642658000085, 0.36708612847876365, 0.36523506999109473,
            0.35815461591948927, 0.3366687390387799, 0.33902602916666025, 0.34971618344751637,
            0.35870597911304736, 0.37563059560620543, 0.3927018157309736
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subother_community_social_and_persona_services(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subother community social and persona services'
    Original Eqn: b'([(1995,2009)-(0.3708698504162547,0.4522371698072469)],(1995,0.3878879751275172),(1996,0.3708698504162547),(1997,0.38061467555067985),(1998,0.39955675996821305),(1999,0.37762190742153284),\\\\ (2000,0.39091172102920724),(2001,0.41155004608034385),(2002,0.40927380105050193),(2003,0.4264253858524306),(2004,0.40805678697158126),\\\\ (2005,0.4090799499066392),(2006,0.41687604647378884),(2007,0.4272759179642891),(2008,0.4509644858352208),(2009,0.4522371698072469))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.3878879751275172, 0.3708698504162547, 0.38061467555067985, 0.39955675996821305,
            0.37762190742153284, 0.39091172102920724, 0.41155004608034385, 0.40927380105050193,
            0.4264253858524306, 0.40805678697158126, 0.4090799499066392, 0.41687604647378884,
            0.4272759179642891, 0.4509644858352208, 0.4522371698072469
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subprivate_households_with_employed_persons(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subelectricity subprivate households with employed persons'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subagriculture_hunting_forestry_and_fishing(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subagriculture hunting forestry and fishing'
    Original Eqn: b'([(1995,2009)-(0.0510942878679188,0.1779432025330486)],(1995,0.1779432025330486),(1996,0.13870566072139295),(1997,0.12082321976272868),(1998,0.10766561537513031),(1999,0.09597024560745618),\\\\ (2000,0.09182242973574563),(2001,0.08539721418532935),(2002,0.0787292046287861),(2003,0.07030452612026813),(2004,0.06269616690801379),\\\\ (2005,0.06307201187077975),(2006,0.06065281467706288),(2007,0.058431192052661673),(2008,0.05410842896927197),(2009,0.0510942878679188))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.1779432025330486, 0.13870566072139295, 0.12082321976272868, 0.10766561537513031,
            0.09597024560745618, 0.09182242973574563, 0.08539721418532935, 0.0787292046287861,
            0.07030452612026813, 0.06269616690801379, 0.06307201187077975, 0.06065281467706288,
            0.058431192052661673, 0.05410842896927197, 0.0510942878679188
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_submining_and_quarrying(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat submining and quarrying'
    Original Eqn: b'([(1995,2009)-(0.20262862281637783,0.39615757379217825)],(1995,0.39615757379217825),(1996,0.32878335690737376),(1997,0.3362121913754084),(1998,0.34030321699873817),(1999,0.3253708905799867),\\\\ (2000,0.30352427099269813),(2001,0.3190183924402979),(2002,0.31766176005583435),(2003,0.29892007500937756),(2004,0.2821306927832654),\\\\ (2005,0.31331686569242123),(2006,0.3033988711082321),(2007,0.24857012656222557),(2008,0.20262862281637783),(2009,0.2166198242522173))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.39615757379217825, 0.32878335690737376, 0.3362121913754084, 0.34030321699873817,
            0.3253708905799867, 0.30352427099269813, 0.3190183924402979, 0.31766176005583435,
            0.29892007500937756, 0.2821306927832654, 0.31331686569242123, 0.3033988711082321,
            0.24857012656222557, 0.20262862281637783, 0.2166198242522173
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subfood_beverages_and_tobacco(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subfood beverages and tobacco'
    Original Eqn: b'([(1995,2009)-(0.1142084176253826,0.1649647280255494)],(1995,0.1649647280255494),(1996,0.13923080611190244),(1997,0.1263507918573515),(1998,0.1277449510541924),(1999,0.12716106154203174),\\\\ (2000,0.11618948111680057),(2001,0.1142084176253826),(2002,0.1168006772309306),(2003,0.12312181692947147),(2004,0.12095713287918461),\\\\ (2005,0.11552633351364591),(2006,0.12292787322827238),(2007,0.11748827453727254),(2008,0.11982507444312444),(2009,0.12010630655390092))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.1649647280255494, 0.13923080611190244, 0.1263507918573515, 0.1277449510541924,
            0.12716106154203174, 0.11618948111680057, 0.1142084176253826, 0.1168006772309306,
            0.12312181692947147, 0.12095713287918461, 0.11552633351364591, 0.12292787322827238,
            0.11748827453727254, 0.11982507444312444, 0.12010630655390092
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subtextiles_and_textile_products(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subtextiles and textile products'
    Original Eqn: b'([(1995,2009)-(0.14221222136468667,0.22086369963658975)],(1995,0.22086369963658975),(1996,0.17406359415856623),(1997,0.16224183065657455),(1998,0.16693572325962322),(1999,0.14221222136468667),\\\\ (2000,0.16381674657242878),(2001,0.16831927283258077),(2002,0.16035462473979567),(2003,0.1699009243369815),(2004,0.19637915352632893),\\\\ (2005,0.20538678486804926),(2006,0.2042770960192051),(2007,0.20725324806843504),(2008,0.19506434139198559),(2009,0.18757549668212872))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.22086369963658975, 0.17406359415856623, 0.16224183065657455, 0.16693572325962322,
            0.14221222136468667, 0.16381674657242878, 0.16831927283258077, 0.16035462473979567,
            0.1699009243369815, 0.19637915352632893, 0.20538678486804926, 0.2042770960192051,
            0.20725324806843504, 0.19506434139198559, 0.18757549668212872
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subleather_leather_and_footwear(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subleather leather and footwear'
    Original Eqn: b'([(1995,2009)-(0.07111850342724534,0.11953127415721884)],(1995,0.11953127415721884),(1996,0.09474854527802631),(1997,0.08764839600586773),(1998,0.09160695304828317),(1999,0.07675379152382777),\\\\ (2000,0.08074204323896955),(2001,0.0765580679520774),(2002,0.07607364176815419),(2003,0.08070889556854588),(2004,0.08007746298837058),\\\\ (2005,0.08548371486588444),(2006,0.08390383293604126),(2007,0.0784175115061452),(2008,0.07111850342724534),(2009,0.07220969773204038))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.11953127415721884, 0.09474854527802631, 0.08764839600586773, 0.09160695304828317,
            0.07675379152382777, 0.08074204323896955, 0.0765580679520774, 0.07607364176815419,
            0.08070889556854588, 0.08007746298837058, 0.08548371486588444, 0.08390383293604126,
            0.0784175115061452, 0.07111850342724534, 0.07220969773204038
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subwood_and_products_of_wood_and_cork(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subwood and products of wood and cork'
    Original Eqn: b'([(1995,2009)-(0.16268003128165623,0.8793952550681494)],(1995,0.8793952550681494),(1996,0.6058544020694085),(1997,0.5334020352587955),(1998,0.5153793131116994),(1999,0.5871102874575236),\\\\ (2000,0.6203211143932192),(2001,0.6313759985796766),(2002,0.6439431104796545),(2003,0.6336153779824492),(2004,0.6116323831845747),\\\\ (2005,0.16268003128165623),(2006,0.1751541793275517),(2007,0.17069373931579726),(2008,0.17493073288251104),(2009,0.17875505194786806))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.8793952550681494, 0.6058544020694085, 0.5334020352587955, 0.5153793131116994,
            0.5871102874575236, 0.6203211143932192, 0.6313759985796766, 0.6439431104796545,
            0.6336153779824492, 0.6116323831845747, 0.16268003128165623, 0.1751541793275517,
            0.17069373931579726, 0.17493073288251104, 0.17875505194786806
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subpulp_paper_printing_and_publishing(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subpulp paper printing and publishing'
    Original Eqn: b'([(1995,2009)-(0.09959438674903104,0.30306283049683014)],(1995,0.10098146124858108),(1996,0.11673687052005599),(1997,0.1065235889017262),(1998,0.10299216552866995),(1999,0.1043649214113851),\\\\ (2000,0.09959438674903104),(2001,0.10092439867341914),(2002,0.1148304535785617),(2003,0.16569911801129128),(2004,0.18942512330308361),\\\\ (2005,0.2771436820991434),(2006,0.30306283049683014),(2007,0.27831023548626566),(2008,0.26327814535913896),(2009,0.27018420717455527))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.10098146124858108, 0.11673687052005599, 0.1065235889017262, 0.10299216552866995,
            0.1043649214113851, 0.09959438674903104, 0.10092439867341914, 0.1148304535785617,
            0.16569911801129128, 0.18942512330308361, 0.2771436820991434, 0.30306283049683014,
            0.27831023548626566, 0.26327814535913896, 0.27018420717455527
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subcoke_refined_petroleum_and_nuclear_fuel(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subcoke refined petroleum and nuclear fuel'
    Original Eqn: b'([(1995,2009)-(0.6332790793123346,0.8306255389091878)],(1995,0.8306255389091878),(1996,0.6867102923723846),(1997,0.6398357709177271),(1998,0.6697612735545528),(1999,0.670925349487634),\\\\ (2000,0.69573506267167),(2001,0.6784280946749888),(2002,0.6479712802547783),(2003,0.6406490162492339),(2004,0.6332790793123346),\\\\ (2005,0.7910253303240071),(2006,0.8147667435369287),(2007,0.8170829812904382),(2008,0.6381195823715806),(2009,0.7219641210498305))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.8306255389091878, 0.6867102923723846, 0.6398357709177271, 0.6697612735545528,
            0.670925349487634, 0.69573506267167, 0.6784280946749888, 0.6479712802547783,
            0.6406490162492339, 0.6332790793123346, 0.7910253303240071, 0.8147667435369287,
            0.8170829812904382, 0.6381195823715806, 0.7219641210498305
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subchemicals_and_chemical_products(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subchemicals and chemical products'
    Original Eqn: b'([(1995,2009)-(0.6203922862106979,0.8584367275321372)],(1995,0.8584367275321372),(1996,0.7397852128919687),(1997,0.66724787357296),(1998,0.6203922862106979),(1999,0.6560905475232538),\\\\ (2000,0.6819427269570311),(2001,0.6776761148129726),(2002,0.686752258681959),(2003,0.7212402945801206),(2004,0.7175417810760435),\\\\ (2005,0.7353749926714853),(2006,0.7432752979283427),(2007,0.708328418290724),(2008,0.6675915872266838),(2009,0.6697430685859749))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.8584367275321372, 0.7397852128919687, 0.66724787357296, 0.6203922862106979,
            0.6560905475232538, 0.6819427269570311, 0.6776761148129726, 0.686752258681959,
            0.7212402945801206, 0.7175417810760435, 0.7353749926714853, 0.7432752979283427,
            0.708328418290724, 0.6675915872266838, 0.6697430685859749
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subrubber_and_plastics(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subrubber and plastics'
    Original Eqn: b'([(1995,2009)-(0.24392179773689737,0.45484858353019414)],(1995,0.45484858353019414),(1996,0.4169535131947727),(1997,0.34233489349153934),(1998,0.2979234015680134),(1999,0.30308181830473974),\\\\ (2000,0.3345339758495406),(2001,0.35123840932746825),(2002,0.35016180267711977),(2003,0.3665131168273066),(2004,0.3592264431339666),\\\\ (2005,0.35219533350061194),(2006,0.29932860571513153),(2007,0.27516433128575574),(2008,0.2608095184633447),(2009,0.24392179773689737))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.45484858353019414, 0.4169535131947727, 0.34233489349153934, 0.2979234015680134,
            0.30308181830473974, 0.3345339758495406, 0.35123840932746825, 0.35016180267711977,
            0.3665131168273066, 0.3592264431339666, 0.35219533350061194, 0.29932860571513153,
            0.27516433128575574, 0.2608095184633447, 0.24392179773689737
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subother_non_metalic_mineral(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subother non metalic mineral'
    Original Eqn: b'([(1995,2009)-(0.1015156829539818,0.2177311622717772)],(1995,0.11474364843841015),(1996,0.1015156829539818),(1997,0.2177311622717772),(1998,0.19260112324974013),(1999,0.18604035907517102),\\\\ (2000,0.1777772888849531),(2001,0.1742377266923505),(2002,0.16987213626105857),(2003,0.17492400397096394),(2004,0.16052398993714187),\\\\ (2005,0.14392398218341645),(2006,0.1410041738280214),(2007,0.12626025452818337),(2008,0.12437860569413856),(2009,0.1287548346990869))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.11474364843841015, 0.1015156829539818, 0.2177311622717772, 0.19260112324974013,
            0.18604035907517102, 0.1777772888849531, 0.1742377266923505, 0.16987213626105857,
            0.17492400397096394, 0.16052398993714187, 0.14392398218341645, 0.1410041738280214,
            0.12626025452818337, 0.12437860569413856, 0.1287548346990869
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subbasic_metals_and_fabricated_metal(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subbasic metals and fabricated metal'
    Original Eqn: b'([(1995,2009)-(0.2110469999353281,0.44447170498746297)],(1995,0.44447170498746297),(1996,0.3740641211103763),(1997,0.3443018955107859),(1998,0.3497366773559753),(1999,0.34266848220142215),\\\\ (2000,0.33541431019446977),(2001,0.34253539572158626),(2002,0.3375977700887783),(2003,0.3578912584020226),(2004,0.3332142470071909),\\\\ (2005,0.2401490143563816),(2006,0.2341118588902698),(2007,0.22060202401252918),(2008,0.2110469999353281),(2009,0.22324946339634189))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.44447170498746297, 0.3740641211103763, 0.3443018955107859, 0.3497366773559753,
            0.34266848220142215, 0.33541431019446977, 0.34253539572158626, 0.3375977700887783,
            0.3578912584020226, 0.3332142470071909, 0.2401490143563816, 0.2341118588902698,
            0.22060202401252918, 0.2110469999353281, 0.22324946339634189
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_submachinery_nec(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat submachinery nec'
    Original Eqn: b'([(1995,2009)-(0.03927945818919396,0.2663694279283176)],(1995,0.2663694279283176),(1996,0.22834274038650992),(1997,0.19136133527590732),(1998,0.1567241483829092),(1999,0.13627395112125568),\\\\ (2000,0.12207404682352825),(2001,0.13086844378406912),(2002,0.12703448169356632),(2003,0.13194301068066228),(2004,0.11608788997022071),\\\\ (2005,0.0448765141282129),(2006,0.04099402725968257),(2007,0.03927945818919396),(2008,0.04207330253739464),(2009,0.04949099593229013))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.2663694279283176, 0.22834274038650992, 0.19136133527590732, 0.1567241483829092,
            0.13627395112125568, 0.12207404682352825, 0.13086844378406912, 0.12703448169356632,
            0.13194301068066228, 0.11608788997022071, 0.0448765141282129, 0.04099402725968257,
            0.03927945818919396, 0.04207330253739464, 0.04949099593229013
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subelectrical_and_optical_equipment(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subelectrical and optical equipment'
    Original Eqn: b'([(1995,2009)-(0.01861581660746257,0.10697241151915922)],(1995,0.10697241151915922),(1996,0.08110770964139015),(1997,0.06775288279050015),(1998,0.05798327242155274),(1999,0.04813151588123405),\\\\ (2000,0.04356663913750887),(2001,0.04610646694846743),(2002,0.049813041729922375),(2003,0.05209170202061897),(2004,0.0462007411792655),\\\\ (2005,0.030935037153437074),(2006,0.026442576907990945),(2007,0.021417439255133085),(2008,0.01861581660746257),(2009,0.01916486673716104))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.10697241151915922, 0.08110770964139015, 0.06775288279050015, 0.05798327242155274,
            0.04813151588123405, 0.04356663913750887, 0.04610646694846743, 0.049813041729922375,
            0.05209170202061897, 0.0462007411792655, 0.030935037153437074, 0.026442576907990945,
            0.021417439255133085, 0.01861581660746257, 0.01916486673716104
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subtransport_equipment(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subtransport equipment'
    Original Eqn: b'([(1995,2009)-(0.016752929925473788,0.05254221452168104)],(1995,0.03230247009715763),(1996,0.03365905354505978),(1997,0.027996316297390002),(1998,0.02328166049397064),(1999,0.016752929925473788),\\\\ (2000,0.020291977858137314),(2001,0.0213013464890133),(2002,0.0228524453077512),(2003,0.033935283609928715),(2004,0.031736018731842015),\\\\ (2005,0.05254221452168104),(2006,0.04936251156866958),(2007,0.04186236037475353),(2008,0.04464775304925383),(2009,0.04994551000737595))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.03230247009715763, 0.03365905354505978, 0.027996316297390002, 0.02328166049397064,
            0.016752929925473788, 0.020291977858137314, 0.0213013464890133, 0.0228524453077512,
            0.033935283609928715, 0.031736018731842015, 0.05254221452168104, 0.04936251156866958,
            0.04186236037475353, 0.04464775304925383, 0.04994551000737595
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_submanufacturing_nec_recycling(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat submanufacturing nec recycling'
    Original Eqn: b'([(1995,2009)-(0.19238247594215038,0.36604614345951936)],(1995,0.2524742276675683),(1996,0.2770783096876561),(1997,0.2892463743676505),(1998,0.2726238912320256),(1999,0.20248756829133865),\\\\ (2000,0.23533342968400625),(2001,0.23530529422681773),(2002,0.247149639979618),(2003,0.19238247594215038),(2004,0.198232738346037),\\\\ (2005,0.36604614345951936),(2006,0.29344140426572635),(2007,0.2457290709739713),(2008,0.20145663662856353),(2009,0.195326355095624))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.2524742276675683, 0.2770783096876561, 0.2892463743676505, 0.2726238912320256,
            0.20248756829133865, 0.23533342968400625, 0.23530529422681773, 0.247149639979618,
            0.19238247594215038, 0.198232738346037, 0.36604614345951936, 0.29344140426572635,
            0.2457290709739713, 0.20145663662856353, 0.195326355095624
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subelectricity_gas_and_water_supply(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subelectricity gas and water supply'
    Original Eqn: b'([(1995,2009)-(0.1618948285114104,0.3033529090412146)],(1995,0.17656446185316851),(1996,0.19723181996517808),(1997,0.18347204565651665),(1998,0.19266562232704065),(1999,0.1947154183161916),\\\\ (2000,0.1618948285114104),(2001,0.1630513827742791),(2002,0.21828024089209305),(2003,0.22847274873040754),(2004,0.22888674862368502),\\\\ (2005,0.25089241522740796),(2006,0.3033529090412146),(2007,0.257287023612773),(2008,0.21861331518289215),(2009,0.23420824672911003))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.17656446185316851, 0.19723181996517808, 0.18347204565651665, 0.19266562232704065,
            0.1947154183161916, 0.1618948285114104, 0.1630513827742791, 0.21828024089209305,
            0.22847274873040754, 0.22888674862368502, 0.25089241522740796, 0.3033529090412146,
            0.257287023612773, 0.21861331518289215, 0.23420824672911003
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subconstruction(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subconstruction'
    Original Eqn: b'([(1995,2009)-(0.009948286060340346,0.08379636901874359)],(1995,0.08379636901874359),(1996,0.05912016941951932),(1997,0.026342470308196652),(1998,0.021830112391916626),(1999,0.0177824602263644),\\\\ (2000,0.016762388622089782),(2001,0.017243465798204186),(2002,0.01683030360991656),(2003,0.017512769640440632),(2004,0.01567768728733379),\\\\ (2005,0.012056202327930386),(2006,0.011630321576189033),(2007,0.01092204974650565),(2008,0.009948286060340346),(2009,0.009952056661525526))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.08379636901874359, 0.05912016941951932, 0.026342470308196652, 0.021830112391916626,
            0.0177824602263644, 0.016762388622089782, 0.017243465798204186, 0.01683030360991656,
            0.017512769640440632, 0.01567768728733379, 0.012056202327930386, 0.011630321576189033,
            0.01092204974650565, 0.009948286060340346, 0.009952056661525526
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'
    Original Eqn: b'([(1995,2009)-(0.024298545909817323,0.03929017979841124)],(1995,0.03437430257370856),(1996,0.03248580789445889),(1997,0.0270797425335092),(1998,0.02779519490656119),(1999,0.03217994573339533),\\\\ (2000,0.026495515235646395),(2001,0.026497911781729094),(2002,0.024298545909817323),(2003,0.03498663904464091),(2004,0.035730772189885705),\\\\ (2005,0.03929017979841124),(2006,0.03797602390213039),(2007,0.033945298554452795),(2008,0.03266934670788762),(2009,0.03173735550499495))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.03437430257370856, 0.03248580789445889, 0.0270797425335092, 0.02779519490656119,
            0.03217994573339533, 0.026495515235646395, 0.026497911781729094, 0.024298545909817323,
            0.03498663904464091, 0.035730772189885705, 0.03929017979841124, 0.03797602390213039,
            0.033945298554452795, 0.03266934670788762, 0.03173735550499495
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subwholesale trade and commissions trade except of motor vehicles and motorcycles'
    Original Eqn: b'([(1995,2009)-(0.03291479330176479,0.058810711388934206)],(1995,0.042371359971517655),(1996,0.05596603289438831),(1997,0.04526361343825246),(1998,0.04894881026177591),(1999,0.058810711388934206),\\\\ (2000,0.04360433804948141),(2001,0.036269972299407226),(2002,0.03565722771814744),(2003,0.03291479330176479),(2004,0.037072826274117766),\\\\ (2005,0.04706699112577181),(2006,0.044500239569127034),(2007,0.04317299982273536),(2008,0.04155025444429505),(2009,0.039743093028138735))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.042371359971517655, 0.05596603289438831, 0.04526361343825246, 0.04894881026177591,
            0.058810711388934206, 0.04360433804948141, 0.036269972299407226, 0.03565722771814744,
            0.03291479330176479, 0.037072826274117766, 0.04706699112577181, 0.044500239569127034,
            0.04317299982273536, 0.04155025444429505, 0.039743093028138735
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subretail trade except of motor vehicles and motorcycles repair of household goods'
    Original Eqn: b'([(1995,2009)-(0.031854062061745764,0.04647061847730034)],(1995,0.038548253304305724),(1996,0.04543492604717159),(1997,0.03797619948818973),(1998,0.038324294809383125),(1999,0.04647061847730034),\\\\ (2000,0.03601597769139513),(2001,0.03304018345041006),(2002,0.031854062061745764),(2003,0.03309240552870057),(2004,0.035111994469669665),\\\\ (2005,0.040624476649071505),(2006,0.04005480654467303),(2007,0.036903519610464),(2008,0.0361959235250515),(2009,0.03583695395061817))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.038548253304305724, 0.04543492604717159, 0.03797619948818973, 0.038324294809383125,
            0.04647061847730034, 0.03601597769139513, 0.03304018345041006, 0.031854062061745764,
            0.03309240552870057, 0.035111994469669665, 0.040624476649071505, 0.04005480654467303,
            0.036903519610464, 0.0361959235250515, 0.03583695395061817
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subhotels_and_restaurants(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subhotels and restaurants'
    Original Eqn: b'([(1995,2009)-(0.04087420088691245,0.06721093729720135)],(1995,0.05421856516261138),(1996,0.06721093729720135),(1997,0.05909171500281141),(1998,0.06368378192849475),(1999,0.05173149970655956),\\\\ (2000,0.041638870297647956),(2001,0.04098533755316226),(2002,0.04087420088691245),(2003,0.04173290319937963),(2004,0.04143908662406254),\\\\ (2005,0.05174077473653161),(2006,0.05231967402658624),(2007,0.05148103706063099),(2008,0.05301062747112252),(2009,0.0511994977092531))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.05421856516261138, 0.06721093729720135, 0.05909171500281141, 0.06368378192849475,
            0.05173149970655956, 0.041638870297647956, 0.04098533755316226, 0.04087420088691245,
            0.04173290319937963, 0.04143908662406254, 0.05174077473653161, 0.05231967402658624,
            0.05148103706063099, 0.05301062747112252, 0.0511994977092531
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subinland_transport(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subinland transport'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subwater_transport(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subwater transport'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subair_transport(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subair transport'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subother supporting and auxiliary transport activities activities of travel agencies'
    Original Eqn: b'([(1995,2009)-(0.05079584375909763,0.24766113572697843)],(1995,0.24766113572697843),(1996,0.1433899454448171),(1997,0.12316507729787073),(1998,0.13796832107982962),(1999,0.12429463594134163),\\\\ (2000,0.08049699793469801),(2001,0.07487965639843151),(2002,0.08137504711026855),(2003,0.08083071239759364),(2004,0.05079584375909763),\\\\ (2005,0.07694141579440167),(2006,0.08051152446751678),(2007,0.07359313523684147),(2008,0.08391793791851684),(2009,0.08941672292834295))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.24766113572697843, 0.1433899454448171, 0.12316507729787073, 0.13796832107982962,
            0.12429463594134163, 0.08049699793469801, 0.07487965639843151, 0.08137504711026855,
            0.08083071239759364, 0.05079584375909763, 0.07694141579440167, 0.08051152446751678,
            0.07359313523684147, 0.08391793791851684, 0.08941672292834295
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subpost_and_telecommunications(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subpost and telecommunications'
    Original Eqn: b'([(1995,2009)-(0.024237634423599087,0.053799886422011715)],(1995,0.03630472699066584),(1996,0.053799886422011715),(1997,0.04635085848000384),(1998,0.04920255698920714),(1999,0.04471989075620264),\\\\ (2000,0.028167882760934248),(2001,0.026121487945967616),(2002,0.02833649680492858),(2003,0.02612764861482731),(2004,0.024237634423599087),\\\\ (2005,0.028316188776702115),(2006,0.028717708371679678),(2007,0.02677222898860627),(2008,0.02554407567267204),(2009,0.02464708011310464))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.03630472699066584, 0.053799886422011715, 0.04635085848000384, 0.04920255698920714,
            0.04471989075620264, 0.028167882760934248, 0.026121487945967616, 0.02833649680492858,
            0.02612764861482731, 0.024237634423599087, 0.028316188776702115, 0.028717708371679678,
            0.02677222898860627, 0.02554407567267204, 0.02464708011310464
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subfinancial_intermediation(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subfinancial intermediation'
    Original Eqn: b'([(1995,2009)-(0.011402731070671244,0.030423145843399658)],(1995,0.030423145843399658),(1996,0.01665834393959276),(1997,0.013724581645353938),(1998,0.013857964113641258),(1999,0.016876689956649222),\\\\ (2000,0.014085984707775272),(2001,0.01454129496610741),(2002,0.015620240851815416),(2003,0.01145640746873261),(2004,0.011402731070671244),\\\\ (2005,0.01498877870550671),(2006,0.013780569855714568),(2007,0.013772255699667259),(2008,0.014489989788855498),(2009,0.013042316407139366))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.030423145843399658, 0.01665834393959276, 0.013724581645353938, 0.013857964113641258,
            0.016876689956649222, 0.014085984707775272, 0.01454129496610741, 0.015620240851815416,
            0.01145640746873261, 0.011402731070671244, 0.01498877870550671, 0.013780569855714568,
            0.013772255699667259, 0.014489989788855498, 0.013042316407139366
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subreal_estate_activities(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subreal estate activities'
    Original Eqn: b'([(1995,2009)-(0.032487350660944145,0.06748503295992885)],(1995,0.06748503295992885),(1996,0.052712807858196084),(1997,0.04472599605940692),(1998,0.046509173529932196),(1999,0.0504066297130954),\\\\ (2000,0.03849224135054137),(2001,0.0360052279616092),(2002,0.03715113372307803),(2003,0.032936513579305195),(2004,0.032487350660944145),\\\\ (2005,0.043093058601061336),(2006,0.04439623389273437),(2007,0.04488968655828661),(2008,0.04391661441880346),(2009,0.04894407742230376))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.06748503295992885, 0.052712807858196084, 0.04472599605940692, 0.046509173529932196,
            0.0504066297130954, 0.03849224135054137, 0.0360052279616092, 0.03715113372307803,
            0.032936513579305195, 0.032487350660944145, 0.043093058601061336, 0.04439623389273437,
            0.04488968655828661, 0.04391661441880346, 0.04894407742230376
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subrenting_od_meq_and_other_business_activities(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subrenting od meq and other business activities'
    Original Eqn: b'([(1995,2009)-(0.015609073846054325,0.02293190808390416)],(1995,0.02293190808390416),(1996,0.02262243635032486),(1997,0.02096783126347895),(1998,0.021200116426919404),(1999,0.022831201389171465),\\\\ (2000,0.017908038621137316),(2001,0.016612837616866733),(2002,0.015609073846054325),(2003,0.017273430847816965),(2004,0.016751498672525022),\\\\ (2005,0.021446576044583145),(2006,0.019672326657890368),(2007,0.019251023600707035),(2008,0.017985852686757987),(2009,0.018232748381631827))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.02293190808390416, 0.02262243635032486, 0.02096783126347895, 0.021200116426919404,
            0.022831201389171465, 0.017908038621137316, 0.016612837616866733, 0.015609073846054325,
            0.017273430847816965, 0.016751498672525022, 0.021446576044583145, 0.019672326657890368,
            0.019251023600707035, 0.017985852686757987, 0.018232748381631827
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subpublic_admin_and_defence_compulsory_social_security(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subpublic admin and defence compulsory social security'
    Original Eqn: b'([(1995,2009)-(0.04009143398935635,0.07822085710082032)],(1995,0.05140637380793385),(1996,0.07822085710082032),(1997,0.07133029723763389),(1998,0.06891092689533442),(1999,0.06304826454808282),\\\\ (2000,0.05149168732541779),(2001,0.0418730835245787),(2002,0.04009143398935635),(2003,0.04430766757577621),(2004,0.04199334476524284),\\\\ (2005,0.05229449894692725),(2006,0.051383289960517796),(2007,0.049446733721309644),(2008,0.045065768676422174),(2009,0.042066680726921296))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.05140637380793385, 0.07822085710082032, 0.07133029723763389, 0.06891092689533442,
            0.06304826454808282, 0.05149168732541779, 0.0418730835245787, 0.04009143398935635,
            0.04430766757577621, 0.04199334476524284, 0.05229449894692725, 0.051383289960517796,
            0.049446733721309644, 0.045065768676422174, 0.042066680726921296
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subeducation(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subeducation'
    Original Eqn: b'([(1995,2009)-(0.0637069998901736,0.086218901772325)],(1995,0.07013227324556913),(1996,0.08104441544299763),(1997,0.08272705449847896),(1998,0.07810516179875657),(1999,0.06825900240482347),\\\\ (2000,0.06472244536514574),(2001,0.0637069998901736),(2002,0.06583975893681501),(2003,0.07683234666824508),(2004,0.07429560990252872),\\\\ (2005,0.086218901772325),(2006,0.08224517387718157),(2007,0.07588073999609178),(2008,0.07548265200675518),(2009,0.06914624772308771))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.07013227324556913, 0.08104441544299763, 0.08272705449847896, 0.07810516179875657,
            0.06825900240482347, 0.06472244536514574, 0.0637069998901736, 0.06583975893681501,
            0.07683234666824508, 0.07429560990252872, 0.086218901772325, 0.08224517387718157,
            0.07588073999609178, 0.07548265200675518, 0.06914624772308771
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subhealth_and_social_work(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subhealth and social work'
    Original Eqn: b'([(1995,2009)-(0.033341191049112706,0.05141091949811415)],(1995,0.04920998564494497),(1996,0.05141091949811415),(1997,0.04964417414865848),(1998,0.047972326347685064),(1999,0.04261668454896623),\\\\ (2000,0.038718065794993886),(2001,0.036951395118389394),(2002,0.033341191049112706),(2003,0.04012472109111849),(2004,0.03942842881355761),\\\\ (2005,0.048905735335520575),(2006,0.04624978583898568),(2007,0.04175277696184828),(2008,0.04141778786473526),(2009,0.0392434145450208))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.04920998564494497, 0.05141091949811415, 0.04964417414865848, 0.047972326347685064,
            0.04261668454896623, 0.038718065794993886, 0.036951395118389394, 0.033341191049112706,
            0.04012472109111849, 0.03942842881355761, 0.048905735335520575, 0.04624978583898568,
            0.04175277696184828, 0.04141778786473526, 0.0392434145450208
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subother_community_social_and_persona_services(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subother community social and persona services'
    Original Eqn: b'([(1995,2009)-(0.060414224408576064,0.11996458634785939)],(1995,0.11996458634785939),(1996,0.08592983866536506),(1997,0.07838672881777277),(1998,0.08568639893345602),(1999,0.07897091899630367),\\\\ (2000,0.0683711232726671),(2001,0.0631457274135446),(2002,0.060414224408576064),(2003,0.08316301095814016),(2004,0.07813626750086931),\\\\ (2005,0.09398520749492556),(2006,0.08550533473728855),(2007,0.0850786293713881),(2008,0.08126627081667989),(2009,0.07499198502816463))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.11996458634785939, 0.08592983866536506, 0.07838672881777277, 0.08568639893345602,
            0.07897091899630367, 0.0683711232726671, 0.0631457274135446, 0.060414224408576064,
            0.08316301095814016, 0.07813626750086931, 0.09398520749492556, 0.08550533473728855,
            0.0850786293713881, 0.08126627081667989, 0.07499198502816463
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subheat_subprivate_households_with_employed_persons(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subheat subprivate households with employed persons'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subagriculture_hunting_forestry_and_fishing(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subagriculture hunting forestry and fishing'
    Original Eqn: b'([(1995,2009)-(2.6291186340338735,3.330675684050808)],(1995,3.329337118908045),(1996,3.330675684050808),(1997,3.3056876138324642),(1998,3.1199531685254867),(1999,3.0241068932783115),\\\\ (2000,2.913297719495583),(2001,2.9134123728860097),(2002,2.8418511504522566),(2003,2.864071301035634),(2004,2.9121439587818303),\\\\ (2005,2.8766896473028623),(2006,2.8180790690079416),(2007,2.7650218349970377),(2008,2.716188095273943),(2009,2.6291186340338735))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            3.329337118908045, 3.330675684050808, 3.3056876138324642, 3.1199531685254867,
            3.0241068932783115, 2.913297719495583, 2.9134123728860097, 2.8418511504522566,
            2.864071301035634, 2.9121439587818303, 2.8766896473028623, 2.8180790690079416,
            2.7650218349970377, 2.716188095273943, 2.6291186340338735
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_submining_and_quarrying(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids submining and quarrying'
    Original Eqn: b'([(1995,2009)-(1.1056716925600512,1.430442507336978)],(1995,1.341362582961613),(1996,1.3031888788382189),(1997,1.430442507336978),(1998,1.3586221542833017),(1999,1.2683375830030548),\\\\ (2000,1.1904792850612582),(2001,1.3060180798221765),(2002,1.3125273787385903),(2003,1.2362762669247982),(2004,1.2020515629065311),\\\\ (2005,1.243794594549829),(2006,1.1279633790764654),(2007,1.1888499764514466),(2008,1.1056716925600512),(2009,1.1957022090658815))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.341362582961613, 1.3031888788382189, 1.430442507336978, 1.3586221542833017,
            1.2683375830030548, 1.1904792850612582, 1.3060180798221765, 1.3125273787385903,
            1.2362762669247982, 1.2020515629065311, 1.243794594549829, 1.1279633790764654,
            1.1888499764514466, 1.1056716925600512, 1.1957022090658815
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subfood_beverages_and_tobacco(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subfood beverages and tobacco'
    Original Eqn: b'([(1995,2009)-(0.4211821670459373,0.603598529324621)],(1995,0.5141106312905513),(1996,0.603598529324621),(1997,0.5875630312879945),(1998,0.5580747247388643),(1999,0.5415400295426829),\\\\ (2000,0.5264542344804909),(2001,0.5176174853298501),(2002,0.5357280165325976),(2003,0.5053332256371244),(2004,0.5050467405535006),\\\\ (2005,0.4624651436890585),(2006,0.43955110647063045),(2007,0.4211821670459373),(2008,0.43365936067900906),(2009,0.43695490528792386))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.5141106312905513, 0.603598529324621, 0.5875630312879945, 0.5580747247388643,
            0.5415400295426829, 0.5264542344804909, 0.5176174853298501, 0.5357280165325976,
            0.5053332256371244, 0.5050467405535006, 0.4624651436890585, 0.43955110647063045,
            0.4211821670459373, 0.43365936067900906, 0.43695490528792386
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subtextiles_and_textile_products(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subtextiles and textile products'
    Original Eqn: b'([(1995,2009)-(0.39044188652557815,0.8806921388281855)],(1995,0.8806921388281855),(1996,0.8756214954360507),(1997,0.8493598989798039),(1998,0.849401584399211),(1999,0.8177730902051842),\\\\ (2000,0.7683661837902472),(2001,0.7385580752297171),(2002,0.7266538185593405),(2003,0.685886679576849),(2004,0.6750174885763368),\\\\ (2005,0.5772313619964377),(2006,0.4942478870481967),(2007,0.4380942904533427),(2008,0.3984498823683011),(2009,0.39044188652557815))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.8806921388281855, 0.8756214954360507, 0.8493598989798039, 0.849401584399211,
            0.8177730902051842, 0.7683661837902472, 0.7385580752297171, 0.7266538185593405,
            0.685886679576849, 0.6750174885763368, 0.5772313619964377, 0.4942478870481967,
            0.4380942904533427, 0.3984498823683011, 0.39044188652557815
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subleather_leather_and_footwear(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subleather leather and footwear'
    Original Eqn: b'([(1995,2009)-(0.32373966589948894,0.543912206399191)],(1995,0.543912206399191),(1996,0.5340187940829365),(1997,0.5116496072212218),(1998,0.5283172564053502),(1999,0.52680124791453),\\\\ (2000,0.5160920116238285),(2001,0.4839876013888461),(2002,0.4903718807301217),(2003,0.47278823455177815),(2004,0.48650732038204203),\\\\ (2005,0.4456619609063785),(2006,0.38300531633542345),(2007,0.34493136665614327),(2008,0.33242252290944396),(2009,0.32373966589948894))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.543912206399191, 0.5340187940829365, 0.5116496072212218, 0.5283172564053502,
            0.52680124791453, 0.5160920116238285, 0.4839876013888461, 0.4903718807301217,
            0.47278823455177815, 0.48650732038204203, 0.4456619609063785, 0.38300531633542345,
            0.34493136665614327, 0.33242252290944396, 0.32373966589948894
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subwood_and_products_of_wood_and_cork(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subwood and products of wood and cork'
    Original Eqn: b'([(1995,2009)-(0.5205881484627026,0.8991039249103806)],(1995,0.8531844182955877),(1996,0.8718623558860619),(1997,0.8991039249103806),(1998,0.8887123996273485),(1999,0.8400586168150834),\\\\ (2000,0.7360387172883827),(2001,0.7629195554611713),(2002,0.7178919576542717),(2003,0.674971768143922),(2004,0.6969505117942627),\\\\ (2005,0.628846884172979),(2006,0.5627407956041065),(2007,0.5205881484627026),(2008,0.5945847854329732),(2009,0.5734254205861374))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.8531844182955877, 0.8718623558860619, 0.8991039249103806, 0.8887123996273485,
            0.8400586168150834, 0.7360387172883827, 0.7629195554611713, 0.7178919576542717,
            0.674971768143922, 0.6969505117942627, 0.628846884172979, 0.5627407956041065,
            0.5205881484627026, 0.5945847854329732, 0.5734254205861374
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subpulp_paper_printing_and_publishing(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subpulp paper printing and publishing'
    Original Eqn: b'([(1995,2009)-(0.4127060249099261,0.7829920825601699)],(1995,0.7725248579617263),(1996,0.7829920825601699),(1997,0.71588470498281),(1998,0.6658319712890726),(1999,0.6109643718413529),\\\\ (2000,0.6275512605419433),(2001,0.6274433630557608),(2002,0.6317304071588181),(2003,0.6232452688814072),(2004,0.6055655728152876),\\\\ (2005,0.5941347693276107),(2006,0.5273776248355037),(2007,0.4675760180751636),(2008,0.44067615705964414),(2009,0.4127060249099261))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.7725248579617263, 0.7829920825601699, 0.71588470498281, 0.6658319712890726,
            0.6109643718413529, 0.6275512605419433, 0.6274433630557608, 0.6317304071588181,
            0.6232452688814072, 0.6055655728152876, 0.5941347693276107, 0.5273776248355037,
            0.4675760180751636, 0.44067615705964414, 0.4127060249099261
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subcoke_refined_petroleum_and_nuclear_fuel(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subcoke refined petroleum and nuclear fuel'
    Original Eqn: b'([(1995,2009)-(6.446731934830551,11.7231108444282)],(1995,11.7231108444282),(1996,11.564060149591148),(1997,11.340352092537033),(1998,11.563164910084271),(1999,10.864766657178281),\\\\ (2000,10.78734421352214),(2001,10.422426170714616),(2002,10.13479762834825),(2003,10.646299993259092),(2004,9.876892067841245),\\\\ (2005,9.28312948240861),(2006,8.218957060695121),(2007,8.251613356505768),(2008,6.446731934830551),(2009,7.192514001861613))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            11.7231108444282, 11.564060149591148, 11.340352092537033, 11.563164910084271,
            10.864766657178281, 10.78734421352214, 10.422426170714616, 10.13479762834825,
            10.646299993259092, 9.876892067841245, 9.28312948240861, 8.218957060695121,
            8.251613356505768, 6.446731934830551, 7.192514001861613
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subchemicals_and_chemical_products(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subchemicals and chemical products'
    Original Eqn: b'([(1995,2009)-(1.147877898612611,1.6909110512942793)],(1995,1.6141045942860075),(1996,1.6909110512942793),(1997,1.572229862535497),(1998,1.5122922448899447),(1999,1.444844708751819),\\\\ (2000,1.6245028626437592),(2001,1.6194445026822364),(2002,1.5954316796075378),(2003,1.5077553991312074),(2004,1.4466087946389843),\\\\ (2005,1.4173573214290192),(2006,1.3253081564925795),(2007,1.1517646687971657),(2008,1.1532075599936515),(2009,1.147877898612611))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.6141045942860075, 1.6909110512942793, 1.572229862535497, 1.5122922448899447,
            1.444844708751819, 1.6245028626437592, 1.6194445026822364, 1.5954316796075378,
            1.5077553991312074, 1.4466087946389843, 1.4173573214290192, 1.3253081564925795,
            1.1517646687971657, 1.1532075599936515, 1.147877898612611
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subrubber_and_plastics(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subrubber and plastics'
    Original Eqn: b'([(1995,2009)-(1.4965650486610333,2.1060098875889803)],(1995,2.07496675931583),(1996,2.0471013607839823),(1997,2.1060098875889803),(1998,2.0250070773864786),(1999,1.9256772798330721),\\\\ (2000,1.7744313808070888),(2001,1.8326844748437345),(2002,1.8302390102895039),(2003,1.7403618599700157),(2004,1.7490444809705308),\\\\ (2005,1.6296472792826477),(2006,1.5410729153480742),(2007,1.523797656583321),(2008,1.4965650486610333),(2009,1.5970725518602833))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            2.07496675931583, 2.0471013607839823, 2.1060098875889803, 2.0250070773864786,
            1.9256772798330721, 1.7744313808070888, 1.8326844748437345, 1.8302390102895039,
            1.7403618599700157, 1.7490444809705308, 1.6296472792826477, 1.5410729153480742,
            1.523797656583321, 1.4965650486610333, 1.5970725518602833
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subother_non_metalic_mineral(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subother non metalic mineral'
    Original Eqn: b'([(1995,2009)-(1.7825558242556516,2.2289873773480102)],(1995,2.1960551224028317),(1996,2.209369279652865),(1997,2.201003613289866),(1998,2.2289873773480102),(1999,2.182166433525797),\\\\ (2000,2.125796639185664),(2001,2.135941163866843),(2002,2.1895788315277644),(2003,2.0588368623674085),(2004,2.149389932401747),\\\\ (2005,2.044124977828056),(2006,1.9443217660087966),(2007,1.7825558242556516),(2008,1.796657802289093),(2009,1.784985510455616))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            2.1960551224028317, 2.209369279652865, 2.201003613289866, 2.2289873773480102,
            2.182166433525797, 2.125796639185664, 2.135941163866843, 2.1895788315277644,
            2.0588368623674085, 2.149389932401747, 2.044124977828056, 1.9443217660087966,
            1.7825558242556516, 1.796657802289093, 1.784985510455616
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subbasic_metals_and_fabricated_metal(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subbasic metals and fabricated metal'
    Original Eqn: b'([(1995,2009)-(0.3892597105315791,0.7375635494333631)],(1995,0.7241195062411848),(1996,0.7375635494333631),(1997,0.7032144025710197),(1998,0.6719289119030403),(1999,0.6670717802584506),\\\\ (2000,0.6116986317199548),(2001,0.5740454082643064),(2002,0.5817006667890227),(2003,0.5871598157245603),(2004,0.5681759516759873),\\\\ (2005,0.5279323510489545),(2006,0.48096034933659615),(2007,0.4313959142384465),(2008,0.42793579021142536),(2009,0.3892597105315791))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.7241195062411848, 0.7375635494333631, 0.7032144025710197, 0.6719289119030403,
            0.6670717802584506, 0.6116986317199548, 0.5740454082643064, 0.5817006667890227,
            0.5871598157245603, 0.5681759516759873, 0.5279323510489545, 0.48096034933659615,
            0.4313959142384465, 0.42793579021142536, 0.3892597105315791
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_submachinery_nec(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids submachinery nec'
    Original Eqn: b'([(1995,2009)-(0.18467487948687933,0.43122964165918515)],(1995,0.42382675349627796),(1996,0.43122964165918515),(1997,0.4024212807620231),(1998,0.3864226855321285),(1999,0.3651561958518691),\\\\ (2000,0.32735529906108074),(2001,0.3280616894183554),(2002,0.33543565446199),(2003,0.3015467633221359),(2004,0.26741820406262334),\\\\ (2005,0.24156298078554952),(2006,0.21311040005375667),(2007,0.1874255971936674),(2008,0.18467487948687933),(2009,0.19970663635058034))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.42382675349627796, 0.43122964165918515, 0.4024212807620231, 0.3864226855321285,
            0.3651561958518691, 0.32735529906108074, 0.3280616894183554, 0.33543565446199,
            0.3015467633221359, 0.26741820406262334, 0.24156298078554952, 0.21311040005375667,
            0.1874255971936674, 0.18467487948687933, 0.19970663635058034
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subelectrical_and_optical_equipment(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subelectrical and optical equipment'
    Original Eqn: b'([(1995,2009)-(0.15031456794290005,0.4780198382356848)],(1995,0.4780198382356848),(1996,0.4656733928129168),(1997,0.42951861678564707),(1998,0.40692686532943895),(1999,0.3501942085262995),\\\\ (2000,0.2948534837509099),(2001,0.3024074848311568),(2002,0.2965072485549675),(2003,0.2596846206533788),(2004,0.24143762875863975),\\\\ (2005,0.2025018460671438),(2006,0.17409890423093224),(2007,0.15556729617604012),(2008,0.15031456794290005),(2009,0.16111787204701797))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.4780198382356848, 0.4656733928129168, 0.42951861678564707, 0.40692686532943895,
            0.3501942085262995, 0.2948534837509099, 0.3024074848311568, 0.2965072485549675,
            0.2596846206533788, 0.24143762875863975, 0.2025018460671438, 0.17409890423093224,
            0.15556729617604012, 0.15031456794290005, 0.16111787204701797
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subtransport_equipment(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subtransport equipment'
    Original Eqn: b'([(1995,2009)-(0.13915089157188737,0.28893704651021057)],(1995,0.28330009685739516),(1996,0.28893704651021057),(1997,0.2773930693280514),(1998,0.28170554050566016),(1999,0.2640356328569094),\\\\ (2000,0.26617313675337534),(2001,0.26283685026058545),(2002,0.2564223272621323),(2003,0.230220430382433),(2004,0.20440510127256015),\\\\ (2005,0.18441103774116221),(2006,0.164381507678766),(2007,0.13916350423569543),(2008,0.13915089157188737),(2009,0.14861014064157796))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.28330009685739516, 0.28893704651021057, 0.2773930693280514, 0.28170554050566016,
            0.2640356328569094, 0.26617313675337534, 0.26283685026058545, 0.2564223272621323,
            0.230220430382433, 0.20440510127256015, 0.18441103774116221, 0.164381507678766,
            0.13916350423569543, 0.13915089157188737, 0.14861014064157796
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_submanufacturing_nec_recycling(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids submanufacturing nec recycling'
    Original Eqn: b'([(1995,2009)-(1.536870590861347,2.1822559556740875)],(1995,2.1439231260394123),(1996,2.1822559556740875),(1997,2.1474962473193537),(1998,2.07879094938377),(1999,1.972911085545422),\\\\ (2000,1.8619188110702514),(2001,1.9425922821998154),(2002,1.9697176408084243),(2003,2.0376165598787592),(2004,1.9143895352629738),\\\\ (2005,1.9587050999351112),(2006,1.828934743240394),(2007,1.7881466556469001),(2008,1.7799236844600743),(2009,1.536870590861347))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            2.1439231260394123, 2.1822559556740875, 2.1474962473193537, 2.07879094938377,
            1.972911085545422, 1.8619188110702514, 1.9425922821998154, 1.9697176408084243,
            2.0376165598787592, 1.9143895352629738, 1.9587050999351112, 1.828934743240394,
            1.7881466556469001, 1.7799236844600743, 1.536870590861347
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subelectricity_gas_and_water_supply(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subelectricity gas and water supply'
    Original Eqn: b'([(1995,2009)-(0.4799829085953009,0.8909714193880099)],(1995,0.6479000510051925),(1996,0.7888352005533726),(1997,0.4910380502554513),(1998,0.762775895251622),(1999,0.8909714193880099),\\\\ (2000,0.7699091727081196),(2001,0.6930243309961277),(2002,0.7477250122028472),(2003,0.5764056024097187),(2004,0.6500826340495188),\\\\ (2005,0.596504106990596),(2006,0.6436601191645978),(2007,0.6877840796316987),(2008,0.5217922438419683),(2009,0.4799829085953009))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.6479000510051925, 0.7888352005533726, 0.4910380502554513, 0.762775895251622,
            0.8909714193880099, 0.7699091727081196, 0.6930243309961277, 0.7477250122028472,
            0.5764056024097187, 0.6500826340495188, 0.596504106990596, 0.6436601191645978,
            0.6877840796316987, 0.5217922438419683, 0.4799829085953009
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subconstruction(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subconstruction'
    Original Eqn: b'([(1995,2009)-(0.6529588055898928,0.7418413135750408)],(1995,0.7068140570746776),(1996,0.7227705762434552),(1997,0.723014885894517),(1998,0.7203116642657159),(1999,0.7079479952465305),\\\\ (2000,0.6676336719201289),(2001,0.6906288420159953),(2002,0.707442981637406),(2003,0.6912606246613766),(2004,0.7418413135750408),\\\\ (2005,0.7067213863020272),(2006,0.6910126127831341),(2007,0.6757742886564271),(2008,0.6529588055898928),(2009,0.6673692259969749))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.7068140570746776, 0.7227705762434552, 0.723014885894517, 0.7203116642657159,
            0.7079479952465305, 0.6676336719201289, 0.6906288420159953, 0.707442981637406,
            0.6912606246613766, 0.7418413135750408, 0.7067213863020272, 0.6910126127831341,
            0.6757742886564271, 0.6529588055898928, 0.6673692259969749
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'
    Original Eqn: b'([(1995,2009)-(0.4521656701888638,0.7067331641687331)],(1995,0.6516105473732899),(1996,0.7067331641687331),(1997,0.7052237313922668),(1998,0.7032266073227602),(1999,0.6584109402587034),\\\\ (2000,0.5688049730923108),(2001,0.5965215562557896),(2002,0.5980643302533083),(2003,0.6041771342169036),(2004,0.5388948338236673),\\\\ (2005,0.4964532411883088),(2006,0.4691391675535737),(2007,0.4521656701888638),(2008,0.4559478455247383),(2009,0.4802210060653841))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.6516105473732899, 0.7067331641687331, 0.7052237313922668, 0.7032266073227602,
            0.6584109402587034, 0.5688049730923108, 0.5965215562557896, 0.5980643302533083,
            0.6041771342169036, 0.5388948338236673, 0.4964532411883088, 0.4691391675535737,
            0.4521656701888638, 0.4559478455247383, 0.4802210060653841
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subwholesale trade and commissions trade except of motor vehicles and motorcycles'
    Original Eqn: b'([(1995,2009)-(0.41068203325280145,0.8252303745364935)],(1995,0.7995096107996469),(1996,0.8252303745364935),(1997,0.7798495117539251),(1998,0.7444435424859365),(1999,0.72262496148166),\\\\ (2000,0.6588557039169136),(2001,0.6603278340733744),(2002,0.6678129315618117),(2003,0.6274976663337006),(2004,0.5761831477921462),\\\\ (2005,0.5227289399539211),(2006,0.4870441351630275),(2007,0.4405275466176488),(2008,0.4212832080799799),(2009,0.41068203325280145))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.7995096107996469, 0.8252303745364935, 0.7798495117539251, 0.7444435424859365,
            0.72262496148166, 0.6588557039169136, 0.6603278340733744, 0.6678129315618117,
            0.6274976663337006, 0.5761831477921462, 0.5227289399539211, 0.4870441351630275,
            0.4405275466176488, 0.4212832080799799, 0.41068203325280145
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subretail trade except of motor vehicles and motorcycles repair of household goods'
    Original Eqn: b'([(1995,2009)-(0.9200090487527909,1.4643807252621894)],(1995,1.446224555441523),(1996,1.4643807252621894),(1997,1.4226249680023841),(1998,1.401696186693699),(1999,1.3626051781347446),\\\\ (2000,1.2573436676006837),(2001,1.26578256600391),(2002,1.2930398860925554),(2003,1.2494822721142014),(2004,1.152885617016206),\\\\ (2005,1.018537732900704),(2006,0.9540939035898561),(2007,0.9361325265437349),(2008,0.9200090487527909),(2009,0.9301466718050068))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.446224555441523, 1.4643807252621894, 1.4226249680023841, 1.401696186693699,
            1.3626051781347446, 1.2573436676006837, 1.26578256600391, 1.2930398860925554,
            1.2494822721142014, 1.152885617016206, 1.018537732900704, 0.9540939035898561,
            0.9361325265437349, 0.9200090487527909, 0.9301466718050068
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subhotels_and_restaurants(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subhotels and restaurants'
    Original Eqn: b'([(1995,2009)-(0.9201921195598188,1.4196391790703387)],(1995,1.4196391790703387),(1996,1.3406818361044612),(1997,1.2874351683880576),(1998,1.2413950506121258),(1999,1.2026812023761946),\\\\ (2000,1.1181780600825535),(2001,1.1472675222149598),(2002,1.1918494467876615),(2003,1.172418278082716),(2004,1.1060507580712087),\\\\ (2005,1.0084245382646344),(2006,0.9600751466958125),(2007,0.9295922641309979),(2008,0.9201921195598188),(2009,0.9410191119656305))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.4196391790703387, 1.3406818361044612, 1.2874351683880576, 1.2413950506121258,
            1.2026812023761946, 1.1181780600825535, 1.1472675222149598, 1.1918494467876615,
            1.172418278082716, 1.1060507580712087, 1.0084245382646344, 0.9600751466958125,
            0.9295922641309979, 0.9201921195598188, 0.9410191119656305
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subinland_transport(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subinland transport'
    Original Eqn: b'([(1995,2009)-(5.571938823049814,6.039976824724781)],(1995,5.784594651904558),(1996,5.841882003967407),(1997,5.839617640577593),(1998,5.7234514917421215),(1999,5.657425050322958),\\\\ (2000,5.805799163252883),(2001,5.663783687522083),(2002,5.750384611283826),(2003,5.571938823049814),(2004,5.823024459391582),\\\\ (2005,5.905534741704541),(2006,5.866070650980922),(2007,5.986263477165527),(2008,5.783156576760606),(2009,6.039976824724781))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            5.784594651904558, 5.841882003967407, 5.839617640577593, 5.7234514917421215,
            5.657425050322958, 5.805799163252883, 5.663783687522083, 5.750384611283826,
            5.571938823049814, 5.823024459391582, 5.905534741704541, 5.866070650980922,
            5.986263477165527, 5.783156576760606, 6.039976824724781
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subwater_transport(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subwater transport'
    Original Eqn: b'([(1995,2009)-(23.604923335035554,37.934160872041296)],(1995,37.934160872041296),(1996,36.99229763627306),(1997,35.857425977728354),(1998,32.96034180361318),(1999,31.445947900920526),\\\\ (2000,29.763612221163157),(2001,26.048593193983724),(2002,25.861329225695492),(2003,25.45709435265915),(2004,25.418232855341213),\\\\ (2005,25.38070613356822),(2006,25.818633973914036),(2007,25.508559284206285),(2008,23.604923335035554),(2009,23.628451979670505))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            37.934160872041296, 36.99229763627306, 35.857425977728354, 32.96034180361318,
            31.445947900920526, 29.763612221163157, 26.048593193983724, 25.861329225695492,
            25.45709435265915, 25.418232855341213, 25.38070613356822, 25.818633973914036,
            25.508559284206285, 23.604923335035554, 23.628451979670505
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subair_transport(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subair transport'
    Original Eqn: b'([(1995,2009)-(24.98087409172215,27.715378037620063)],(1995,26.715731790170462),(1996,26.56880019698801),(1997,26.328612139720242),(1998,26.223829302523733),(1999,26.197997404918336),\\\\ (2000,26.067380154584512),(2001,26.7898761094474),(2002,27.715378037620063),(2003,26.232774917101356),(2004,26.350842653034938),\\\\ (2005,27.148378588319208),(2006,25.86595493563425),(2007,25.117966478688643),(2008,24.98087409172215),(2009,25.085688402244163))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            26.715731790170462, 26.56880019698801, 26.328612139720242, 26.223829302523733,
            26.197997404918336, 26.067380154584512, 26.7898761094474, 27.715378037620063,
            26.232774917101356, 26.350842653034938, 27.148378588319208, 25.86595493563425,
            25.117966478688643, 24.98087409172215, 25.085688402244163
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subother supporting and auxiliary transport activities activities of travel agencies'
    Original Eqn: b'([(1995,2009)-(2.055422526573931,2.516730364247273)],(1995,2.1229444350330606),(1996,2.1858031309710717),(1997,2.1320401162060647),(1998,2.055422526573931),(1999,2.374243138577253),\\\\ (2000,2.370472430671425),(2001,2.283326869757632),(2002,2.380527825919046),(2003,2.310300684442889),(2004,2.3597546052719696),\\\\ (2005,2.478585956426773),(2006,2.4043233217469235),(2007,2.516730364247273),(2008,2.433282842599178),(2009,2.4998329347889965))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            2.1229444350330606, 2.1858031309710717, 2.1320401162060647, 2.055422526573931,
            2.374243138577253, 2.370472430671425, 2.283326869757632, 2.380527825919046,
            2.310300684442889, 2.3597546052719696, 2.478585956426773, 2.4043233217469235,
            2.516730364247273, 2.433282842599178, 2.4998329347889965
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subpost_and_telecommunications(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subpost and telecommunications'
    Original Eqn: b'([(1995,2009)-(0.42985268631370466,0.768866469814047)],(1995,0.768866469814047),(1996,0.7045417318922991),(1997,0.7194975287130991),(1998,0.686119642007903),(1999,0.7092963917543954),\\\\ (2000,0.654541940164107),(2001,0.6347548762949851),(2002,0.5634405956580067),(2003,0.5496258714368878),(2004,0.5691231126948875),\\\\ (2005,0.5039055491247418),(2006,0.4743621645845341),(2007,0.4544160511189765),(2008,0.4363370772707986),(2009,0.42985268631370466))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.768866469814047, 0.7045417318922991, 0.7194975287130991, 0.686119642007903,
            0.7092963917543954, 0.654541940164107, 0.6347548762949851, 0.5634405956580067,
            0.5496258714368878, 0.5691231126948875, 0.5039055491247418, 0.4743621645845341,
            0.4544160511189765, 0.4363370772707986, 0.42985268631370466
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subfinancial_intermediation(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subfinancial intermediation'
    Original Eqn: b'([(1995,2009)-(0.18964237442788068,0.39105057361588785)],(1995,0.3902641535503575),(1996,0.39105057361588785),(1997,0.36928625271596555),(1998,0.3590196832786975),(1999,0.3311330705068184),\\\\ (2000,0.2928685985146136),(2001,0.2917779755835705),(2002,0.29868082636364557),(2003,0.2902083684045119),(2004,0.26600477549860785),\\\\ (2005,0.23489360829412367),(2006,0.21865593642713602),(2007,0.2028196283561895),(2008,0.19794825830942292),(2009,0.18964237442788068))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.3902641535503575, 0.39105057361588785, 0.36928625271596555, 0.3590196832786975,
            0.3311330705068184, 0.2928685985146136, 0.2917779755835705, 0.29868082636364557,
            0.2902083684045119, 0.26600477549860785, 0.23489360829412367, 0.21865593642713602,
            0.2028196283561895, 0.19794825830942292, 0.18964237442788068
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subreal_estate_activities(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subreal estate activities'
    Original Eqn: b'([(1995,2009)-(0.09797353805266568,0.14439320564947894)],(1995,0.1409964245790585),(1996,0.14439320564947894),(1997,0.14063164520472649),(1998,0.13509166535454392),(1999,0.1288958348609235),\\\\ (2000,0.11690815269898912),(2001,0.11608242310919194),(2002,0.11967779600337494),(2003,0.12119155409114757),(2004,0.11743942535448604),\\\\ (2005,0.12178078876475229),(2006,0.12048154605461525),(2007,0.11657170991065724),(2008,0.09798634547528803),(2009,0.09797353805266568))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.1409964245790585, 0.14439320564947894, 0.14063164520472649, 0.13509166535454392,
            0.1288958348609235, 0.11690815269898912, 0.11608242310919194, 0.11967779600337494,
            0.12119155409114757, 0.11743942535448604, 0.12178078876475229, 0.12048154605461525,
            0.11657170991065724, 0.09798634547528803, 0.09797353805266568
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subrenting_od_meq_and_other_business_activities(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subrenting od meq and other business activities'
    Original Eqn: b'([(1995,2009)-(0.5129037303887946,0.8331509374789908)],(1995,0.8331509374789908),(1996,0.829491361635125),(1997,0.8049435201879306),(1998,0.7970443962992084),(1999,0.7720927405758682),\\\\ (2000,0.7200246935712061),(2001,0.709344111552235),(2002,0.7133550252479071),(2003,0.6943767987662407),(2004,0.6622543272614511),\\\\ (2005,0.595351967333654),(2006,0.5644181014297519),(2007,0.5320028562634156),(2008,0.5176487865353288),(2009,0.5129037303887946))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.8331509374789908, 0.829491361635125, 0.8049435201879306, 0.7970443962992084,
            0.7720927405758682, 0.7200246935712061, 0.709344111552235, 0.7133550252479071,
            0.6943767987662407, 0.6622543272614511, 0.595351967333654, 0.5644181014297519,
            0.5320028562634156, 0.5176487865353288, 0.5129037303887946
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subpublic_admin_and_defence_compulsory_social_security(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subpublic admin and defence compulsory social security'
    Original Eqn: b'([(1995,2009)-(0.8214546226563212,1.2591481738533437)],(1995,1.188054173776091),(1996,1.2133749217514826),(1997,1.2293234237135575),(1998,1.2591481738533437),(1999,1.23382876392151),\\\\ (2000,1.1449859659635278),(2001,1.177309625404061),(2002,1.0967878132962667),(2003,1.0769636298652006),(2004,1.0096199030034558),\\\\ (2005,0.9373540473198093),(2006,0.8892619382789926),(2007,0.8470477962264747),(2008,0.8214546226563212),(2009,0.8399946748583467))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.188054173776091, 1.2133749217514826, 1.2293234237135575, 1.2591481738533437,
            1.23382876392151, 1.1449859659635278, 1.177309625404061, 1.0967878132962667,
            1.0769636298652006, 1.0096199030034558, 0.9373540473198093, 0.8892619382789926,
            0.8470477962264747, 0.8214546226563212, 0.8399946748583467
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subeducation(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subeducation'
    Original Eqn: b'([(1995,2009)-(0.8251310688591592,0.9017617765416281)],(1995,0.8557400891731884),(1996,0.8946873392113956),(1997,0.8930235708093455),(1998,0.863600839879686),(1999,0.8440303344467589),\\\\ (2000,0.8331950040741682),(2001,0.8489841047121085),(2002,0.8783471403593619),(2003,0.9017617765416281),(2004,0.8783858725603914),\\\\ (2005,0.8578588702110131),(2006,0.84812637305127),(2007,0.8251310688591592),(2008,0.8420228859112069),(2009,0.8500830847935721))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.8557400891731884, 0.8946873392113956, 0.8930235708093455, 0.863600839879686,
            0.8440303344467589, 0.8331950040741682, 0.8489841047121085, 0.8783471403593619,
            0.9017617765416281, 0.8783858725603914, 0.8578588702110131, 0.84812637305127,
            0.8251310688591592, 0.8420228859112069, 0.8500830847935721
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subhealth_and_social_work(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subhealth and social work'
    Original Eqn: b'([(1995,2009)-(0.7451840021094017,1.0899935382020292)],(1995,1.0899935382020292),(1996,1.0794120603730522),(1997,1.0621939904932913),(1998,1.08098506648033),(1999,1.0309042029489681),\\\\ (2000,0.9656209501278881),(2001,0.9759940916694444),(2002,1.0121111492679689),(2003,0.990627177098384),(2004,0.9236746612908852),\\\\ (2005,0.8266047105195358),(2006,0.7931182690161734),(2007,0.753621853534988),(2008,0.7451840021094017),(2009,0.7538561418115993))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.0899935382020292, 1.0794120603730522, 1.0621939904932913, 1.08098506648033,
            1.0309042029489681, 0.9656209501278881, 0.9759940916694444, 1.0121111492679689,
            0.990627177098384, 0.9236746612908852, 0.8266047105195358, 0.7931182690161734,
            0.753621853534988, 0.7451840021094017, 0.7538561418115993
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subother_community_social_and_persona_services(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subother community social and persona services'
    Original Eqn: b'([(1995,2009)-(0.9201585543705517,1.1936830991238718)],(1995,1.1493987832688457),(1996,1.1737860075312971),(1997,1.1936830991238718),(1998,1.166987638888675),(1999,1.1358084209938066),\\\\ (2000,1.0397880554918142),(2001,1.0555258409763975),(2002,1.0882492817835265),(2003,1.0919568464681755),(2004,1.0506014179378114),\\\\ (2005,0.9811287055745656),(2006,0.947410230772165),(2007,0.9201585543705517),(2008,0.9257677200705718),(2009,0.9278880445636408))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.1493987832688457, 1.1737860075312971, 1.1936830991238718, 1.166987638888675,
            1.1358084209938066, 1.0397880554918142, 1.0555258409763975, 1.0882492817835265,
            1.0919568464681755, 1.0506014179378114, 0.9811287055745656, 0.947410230772165,
            0.9201585543705517, 0.9257677200705718, 0.9278880445636408
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subliquids_subprivate_households_with_employed_persons(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subliquids subprivate households with employed persons'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subagriculture_hunting_forestry_and_fishing(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subagriculture hunting forestry and fishing'
    Original Eqn: b'([(1995,2009)-(0.2150356857860538,0.3259500278002751)],(1995,0.2150356857860538),(1996,0.23808543700535903),(1997,0.2249828547013219),(1998,0.21602014550226922),(1999,0.25889017338562903),\\\\ (2000,0.3259500278002751),(2001,0.30655078994607454),(2002,0.29941530067408895),(2003,0.2930062742460066),(2004,0.2847165229116941),\\\\ (2005,0.28312899573704253),(2006,0.2654783961694343),(2007,0.27608551847790697),(2008,0.26682611690254887),(2009,0.2602340811751907))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.2150356857860538, 0.23808543700535903, 0.2249828547013219, 0.21602014550226922,
            0.25889017338562903, 0.3259500278002751, 0.30655078994607454, 0.29941530067408895,
            0.2930062742460066, 0.2847165229116941, 0.28312899573704253, 0.2654783961694343,
            0.27608551847790697, 0.26682611690254887, 0.2602340811751907
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_submining_and_quarrying(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases submining and quarrying'
    Original Eqn: b'([(1995,2009)-(4.2016196787038345,6.1914402689816)],(1995,4.69078137659984),(1996,4.674680491324511),(1997,5.587114925579444),(1998,6.1914402689816),(1999,5.643124554829877),\\\\ (2000,4.7890750283167876),(2001,5.175069902516305),(2002,5.305256393623547),(2003,5.391187388350845),(2004,5.160359018472073),\\\\ (2005,4.822047105186946),(2006,4.677087534518218),(2007,4.783909980508121),(2008,4.2016196787038345),(2009,4.66277570791695))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            4.69078137659984, 4.674680491324511, 5.587114925579444, 6.1914402689816,
            5.643124554829877, 4.7890750283167876, 5.175069902516305, 5.305256393623547,
            5.391187388350845, 5.160359018472073, 4.822047105186946, 4.677087534518218,
            4.783909980508121, 4.2016196787038345, 4.66277570791695
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subfood_beverages_and_tobacco(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subfood beverages and tobacco'
    Original Eqn: b'([(1995,2009)-(0.22989966178122906,0.36246315037251453)],(1995,0.2630712135501656),(1996,0.27482351735400984),(1997,0.27176046941280213),(1998,0.2497142239689453),(1999,0.22989966178122906),\\\\ (2000,0.3600879841515737),(2001,0.3413860103813444),(2002,0.3547360068253931),(2003,0.36246315037251453),(2004,0.3521274036529059),\\\\ (2005,0.32192202882420695),(2006,0.3346373730931401),(2007,0.33396681864562816),(2008,0.34726851971209743),(2009,0.3339346560772236))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.2630712135501656, 0.27482351735400984, 0.27176046941280213, 0.2497142239689453,
            0.22989966178122906, 0.3600879841515737, 0.3413860103813444, 0.3547360068253931,
            0.36246315037251453, 0.3521274036529059, 0.32192202882420695, 0.3346373730931401,
            0.33396681864562816, 0.34726851971209743, 0.3339346560772236
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subtextiles_and_textile_products(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subtextiles and textile products'
    Original Eqn: b'([(1995,2009)-(0.2078195342464195,0.37449650739686546)],(1995,0.22170152798157228),(1996,0.2237974799341098),(1997,0.22194372593124323),(1998,0.2088333392472178),(1999,0.2078195342464195),\\\\ (2000,0.37449650739686546),(2001,0.3586887970392119),(2002,0.35716516554601063),(2003,0.3522560996360123),(2004,0.3372593373609412),\\\\ (2005,0.2703351189299814),(2006,0.2807123319032572),(2007,0.23938080094397174),(2008,0.22992445335417921),(2009,0.23320030953411783))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.22170152798157228, 0.2237974799341098, 0.22194372593124323, 0.2088333392472178,
            0.2078195342464195, 0.37449650739686546, 0.3586887970392119, 0.35716516554601063,
            0.3522560996360123, 0.3372593373609412, 0.2703351189299814, 0.2807123319032572,
            0.23938080094397174, 0.22992445335417921, 0.23320030953411783
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subleather_leather_and_footwear(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subleather leather and footwear'
    Original Eqn: b'([(1995,2009)-(0.07136564883324445,0.1352147717183019)],(1995,0.09354931025043114),(1996,0.08569200202644255),(1997,0.07304451191760464),(1998,0.07136564883324445),(1999,0.07142556681890348),\\\\ (2000,0.13274807570637964),(2001,0.12685016213423064),(2002,0.1330872415275701),(2003,0.1352147717183019),(2004,0.13128698330208274),\\\\ (2005,0.11008525329131127),(2006,0.11462176247199041),(2007,0.08361741992091336),(2008,0.08401051515893582),(2009,0.08239602053061558))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.09354931025043114, 0.08569200202644255, 0.07304451191760464, 0.07136564883324445,
            0.07142556681890348, 0.13274807570637964, 0.12685016213423064, 0.1330872415275701,
            0.1352147717183019, 0.13128698330208274, 0.11008525329131127, 0.11462176247199041,
            0.08361741992091336, 0.08401051515893582, 0.08239602053061558
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subwood_and_products_of_wood_and_cork(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subwood and products of wood and cork'
    Original Eqn: b'([(1995,2009)-(0.15540987441108312,0.29532803353441145)],(1995,0.16492387728107027),(1996,0.16491848452458757),(1997,0.17214935197061923),(1998,0.15540987441108312),(1999,0.1865545041278503),\\\\ (2000,0.29532803353441145),(2001,0.2736965354434537),(2002,0.27654305363553544),(2003,0.25044299075958315),(2004,0.2658742371032976),\\\\ (2005,0.24614252504824943),(2006,0.2469193165307909),(2007,0.2211512839987132),(2008,0.24082680160621636),(2009,0.24657379451326117))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.16492387728107027, 0.16491848452458757, 0.17214935197061923, 0.15540987441108312,
            0.1865545041278503, 0.29532803353441145, 0.2736965354434537, 0.27654305363553544,
            0.25044299075958315, 0.2658742371032976, 0.24614252504824943, 0.2469193165307909,
            0.2211512839987132, 0.24082680160621636, 0.24657379451326117
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subpulp_paper_printing_and_publishing(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subpulp paper printing and publishing'
    Original Eqn: b'([(1995,2009)-(0.4086323731686502,0.613317658719408)],(1995,0.4924434997862261),(1996,0.5035167282353104),(1997,0.4653216859317899),(1998,0.416591668347514),(1999,0.4086323731686502),\\\\ (2000,0.613317658719408),(2001,0.5591768596748578),(2002,0.5785423929231583),(2003,0.5518005251519551),(2004,0.5041909188261511),\\\\ (2005,0.46497936329519063),(2006,0.48430099601694454),(2007,0.465593045195173),(2008,0.4675388580899925),(2009,0.4605113243815074))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.4924434997862261, 0.5035167282353104, 0.4653216859317899, 0.416591668347514,
            0.4086323731686502, 0.613317658719408, 0.5591768596748578, 0.5785423929231583,
            0.5518005251519551, 0.5041909188261511, 0.46497936329519063, 0.48430099601694454,
            0.465593045195173, 0.4675388580899925, 0.4605113243815074
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subcoke_refined_petroleum_and_nuclear_fuel(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subcoke refined petroleum and nuclear fuel'
    Original Eqn: b'([(1995,2009)-(1.801941232901524,3.0860044083105795)],(1995,3.001313091203896),(1996,3.0136097520997716),(1997,3.0187830548072707),(1998,3.0860044083105795),(1999,2.7827190716347494),\\\\ (2000,2.8832010213385604),(2001,2.5713728213822455),(2002,2.55786837768559),(2003,2.58934072303863),(2004,2.3350796608400692),\\\\ (2005,2.3657057558749415),(2006,2.127615858724935),(2007,2.2773583161358864),(2008,1.801941232901524),(2009,2.0365279736233033))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            3.001313091203896, 3.0136097520997716, 3.0187830548072707, 3.0860044083105795,
            2.7827190716347494, 2.8832010213385604, 2.5713728213822455, 2.55786837768559,
            2.58934072303863, 2.3350796608400692, 2.3657057558749415, 2.127615858724935,
            2.2773583161358864, 1.801941232901524, 2.0365279736233033
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subchemicals_and_chemical_products(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subchemicals and chemical products'
    Original Eqn: b'([(1995,2009)-(0.9930600957911819,1.7935253915292202)],(1995,1.4720283824991145),(1996,1.5052003901403945),(1997,1.227394683360337),(1998,1.0698578280829782),(1999,0.9930600957911819),\\\\ (2000,1.7935253915292202),(2001,1.6220540746157186),(2002,1.6494410859171633),(2003,1.5954078706124257),(2004,1.4787828774506468),\\\\ (2005,1.4343100769756831),(2006,1.3652166052244967),(2007,1.372267493452264),(2008,1.443397904881445),(2009,1.4393643503734865))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.4720283824991145, 1.5052003901403945, 1.227394683360337, 1.0698578280829782,
            0.9930600957911819, 1.7935253915292202, 1.6220540746157186, 1.6494410859171633,
            1.5954078706124257, 1.4787828774506468, 1.4343100769756831, 1.3652166052244967,
            1.372267493452264, 1.443397904881445, 1.4393643503734865
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subrubber_and_plastics(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subrubber and plastics'
    Original Eqn: b'([(1995,2009)-(0.7447988463130435,1.1443065304809965)],(1995,1.0293817265575258),(1996,0.9634590176256144),(1997,0.8084872172503001),(1998,0.7447988463130435),(1999,0.7574406019185975),\\\\ (2000,1.1443065304809965),(2001,1.1112397447609332),(2002,1.1054866360049462),(2003,1.0595606692803112),(2004,0.8905151550364396),\\\\ (2005,0.916813834866961),(2006,0.9561836159085504),(2007,1.026366866964444),(2008,1.020582712688694),(2009,0.988506771535562))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.0293817265575258, 0.9634590176256144, 0.8084872172503001, 0.7447988463130435,
            0.7574406019185975, 1.1443065304809965, 1.1112397447609332, 1.1054866360049462,
            1.0595606692803112, 0.8905151550364396, 0.916813834866961, 0.9561836159085504,
            1.026366866964444, 1.020582712688694, 0.988506771535562
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subother_non_metalic_mineral(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subother non metalic mineral'
    Original Eqn: b'([(1995,2009)-(1.0459696896128106,1.7494487873793174)],(1995,1.3434388215425517),(1996,1.3321895549088403),(1997,1.2478116049949717),(1998,1.1401006559973619),(1999,1.0459696896128106),\\\\ (2000,1.6702388734857427),(2001,1.6313622184199437),(2002,1.616916337047098),(2003,1.6330751267939065),(2004,1.6658242098361133),\\\\ (2005,1.7203220587904575),(2006,1.7494487873793174),(2007,1.5969640730489476),(2008,1.7302326094995535),(2009,1.6461143264900595))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.3434388215425517, 1.3321895549088403, 1.2478116049949717, 1.1401006559973619,
            1.0459696896128106, 1.6702388734857427, 1.6313622184199437, 1.616916337047098,
            1.6330751267939065, 1.6658242098361133, 1.7203220587904575, 1.7494487873793174,
            1.5969640730489476, 1.7302326094995535, 1.6461143264900595
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subbasic_metals_and_fabricated_metal(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subbasic metals and fabricated metal'
    Original Eqn: b'([(1995,2009)-(1.0881253181024007,1.3748165507613535)],(1995,1.3108065204731356),(1996,1.2970726797702823),(1997,1.223246411855429),(1998,1.1573621173483866),(1999,1.0881253181024007),\\\\ (2000,1.3578255707345974),(2001,1.2821081524399458),(2002,1.3184894219974421),(2003,1.2981874351653735),(2004,1.3748165507613535),\\\\ (2005,1.344758899655073),(2006,1.2838653063511276),(2007,1.2020320290082778),(2008,1.2277708817077104),(2009,1.1200065077483736))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.3108065204731356, 1.2970726797702823, 1.223246411855429, 1.1573621173483866,
            1.0881253181024007, 1.3578255707345974, 1.2821081524399458, 1.3184894219974421,
            1.2981874351653735, 1.3748165507613535, 1.344758899655073, 1.2838653063511276,
            1.2020320290082778, 1.2277708817077104, 1.1200065077483736
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_submachinery_nec(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases submachinery nec'
    Original Eqn: b'([(1995,2009)-(0.10233769702234845,0.17573359055047366)],(1995,0.12021541503389496),(1996,0.125859005200925),(1997,0.11693052615703729),(1998,0.10233769702234845),(1999,0.10751502036095155),\\\\ (2000,0.16047071251418615),(2001,0.16435763359568387),(2002,0.17573359055047366),(2003,0.13896859663809286),(2004,0.12862940828249575),\\\\ (2005,0.13033325871434107),(2006,0.12927142408537162),(2007,0.12075807835585903),(2008,0.11131003163056657),(2009,0.1228715703315172))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.12021541503389496, 0.125859005200925, 0.11693052615703729, 0.10233769702234845,
            0.10751502036095155, 0.16047071251418615, 0.16435763359568387, 0.17573359055047366,
            0.13896859663809286, 0.12862940828249575, 0.13033325871434107, 0.12927142408537162,
            0.12075807835585903, 0.11131003163056657, 0.1228715703315172
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subelectrical_and_optical_equipment(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subelectrical and optical equipment'
    Original Eqn: b'([(1995,2009)-(0.06749995759716539,0.11143834233419135)],(1995,0.11143834233419135),(1996,0.10446346973068762),(1997,0.08630328151060919),(1998,0.07603249406013288),(1999,0.07347651364949342),\\\\ (2000,0.10598282339115185),(2001,0.10454045158487307),(2002,0.10568435481581273),(2003,0.09458777586901591),(2004,0.08087214110403276),\\\\ (2005,0.0779417468457911),(2006,0.0773382557605845),(2007,0.07139255213764506),(2008,0.06749995759716539),(2009,0.0696880791985734))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.11143834233419135, 0.10446346973068762, 0.08630328151060919, 0.07603249406013288,
            0.07347651364949342, 0.10598282339115185, 0.10454045158487307, 0.10568435481581273,
            0.09458777586901591, 0.08087214110403276, 0.0779417468457911, 0.0773382557605845,
            0.07139255213764506, 0.06749995759716539, 0.0696880791985734
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subtransport_equipment(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subtransport equipment'
    Original Eqn: b'([(1995,2009)-(0.07992416080483881,0.1317976929305965)],(1995,0.09171080390030475),(1996,0.09674881322946037),(1997,0.09240595736273877),(1998,0.08242188677387538),(1999,0.07992416080483881),\\\\ (2000,0.1317976929305965),(2001,0.12381969027745805),(2002,0.12022025094727935),(2003,0.11739312755701244),(2004,0.11216561087233788),\\\\ (2005,0.10393196609250903),(2006,0.11603835704046012),(2007,0.0995192919370611),(2008,0.10302801213369138),(2009,0.11017171508322544))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.09171080390030475, 0.09674881322946037, 0.09240595736273877, 0.08242188677387538,
            0.07992416080483881, 0.1317976929305965, 0.12381969027745805, 0.12022025094727935,
            0.11739312755701244, 0.11216561087233788, 0.10393196609250903, 0.11603835704046012,
            0.0995192919370611, 0.10302801213369138, 0.11017171508322544
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_submanufacturing_nec_recycling(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases submanufacturing nec recycling'
    Original Eqn: b'([(1995,2009)-(0.4655241319213859,0.7780231182652662)],(1995,0.6361904215163183),(1996,0.5768012848405862),(1997,0.49606560248822923),(1998,0.4791899670272098),(1999,0.4655241319213859),\\\\ (2000,0.7072263003043257),(2001,0.6779642867657234),(2002,0.7087227274542818),(2003,0.7253802448834674),(2004,0.6980047177438519),\\\\ (2005,0.6557236985272097),(2006,0.7780231182652662),(2007,0.6918367741023013),(2008,0.7164942889097418),(2009,0.6922034067991938))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.6361904215163183, 0.5768012848405862, 0.49606560248822923, 0.4791899670272098,
            0.4655241319213859, 0.7072263003043257, 0.6779642867657234, 0.7087227274542818,
            0.7253802448834674, 0.6980047177438519, 0.6557236985272097, 0.7780231182652662,
            0.6918367741023013, 0.7164942889097418, 0.6922034067991938
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subelectricity_gas_and_water_supply(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subelectricity gas and water supply'
    Original Eqn: b'([(1995,2009)-(2.719112027570859,3.960153185544289)],(1995,3.922396867876367),(1996,3.8908805002198408),(1997,3.960153185544289),(1998,3.83014763381815),(1999,3.9460710609040603),\\\\ (2000,3.774894877799922),(2001,3.626795439041342),(2002,3.6828147873277035),(2003,3.6692242539163367),(2004,3.316258634594196),\\\\ (2005,3.1406659378887456),(2006,3.125622734727022),(2007,3.0467002692300236),(2008,2.719112027570859),(2009,2.731191712620855))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            3.922396867876367, 3.8908805002198408, 3.960153185544289, 3.83014763381815,
            3.9460710609040603, 3.774894877799922, 3.626795439041342, 3.6828147873277035,
            3.6692242539163367, 3.316258634594196, 3.1406659378887456, 3.125622734727022,
            3.0467002692300236, 2.719112027570859, 2.731191712620855
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subconstruction(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subconstruction'
    Original Eqn: b'([(1995,2009)-(0.05300736053494253,0.0717340226442291)],(1995,0.0576678281130595),(1996,0.05759797955978964),(1997,0.054849216142609805),(1998,0.0552265188459029),(1999,0.05300736053494253),\\\\ (2000,0.05613113180406631),(2001,0.05618862193148195),(2002,0.06099338784248549),(2003,0.05319371454310903),(2004,0.05768052438354068),\\\\ (2005,0.0628364091240574),(2006,0.0717340226442291),(2007,0.06750868575973777),(2008,0.06593784904217394),(2009,0.06379826136672472))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.0576678281130595, 0.05759797955978964, 0.054849216142609805, 0.0552265188459029,
            0.05300736053494253, 0.05613113180406631, 0.05618862193148195, 0.06099338784248549,
            0.05319371454310903, 0.05768052438354068, 0.0628364091240574, 0.0717340226442291,
            0.06750868575973777, 0.06593784904217394, 0.06379826136672472
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'
    Original Eqn: b'([(1995,2009)-(0.10245712863372658,0.14156085039019767)],(1995,0.12338711663998722),(1996,0.14156085039019767),(1997,0.13373724297590503),(1998,0.13413682440414731),(1999,0.12139209363720632),\\\\ (2000,0.10245712863372658),(2001,0.11672220331164067),(2002,0.10247692561851296),(2003,0.1206959374120446),(2004,0.11796345098172378),\\\\ (2005,0.10455470303966023),(2006,0.11496503227562352),(2007,0.10979747716211825),(2008,0.1152407626679457),(2009,0.11355533230389225))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.12338711663998722, 0.14156085039019767, 0.13373724297590503, 0.13413682440414731,
            0.12139209363720632, 0.10245712863372658, 0.11672220331164067, 0.10247692561851296,
            0.1206959374120446, 0.11796345098172378, 0.10455470303966023, 0.11496503227562352,
            0.10979747716211825, 0.1152407626679457, 0.11355533230389225
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subwholesale trade and commissions trade except of motor vehicles and motorcycles'
    Original Eqn: b'([(1995,2009)-(0.05856954203692449,0.08311735701445912)],(1995,0.08311735701445912),(1996,0.08264550858150513),(1997,0.07434285189320597),(1998,0.06999926533913718),(1999,0.07061226806353163),\\\\ (2000,0.0716951075551002),(2001,0.07334576145974414),(2002,0.05856954203692449),(2003,0.06790223122416063),(2004,0.06816169525522552),\\\\ (2005,0.07017975751497046),(2006,0.07055662220598093),(2007,0.06856935642669208),(2008,0.06884983984819669),(2009,0.059109336003401826))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.08311735701445912, 0.08264550858150513, 0.07434285189320597, 0.06999926533913718,
            0.07061226806353163, 0.0716951075551002, 0.07334576145974414, 0.05856954203692449,
            0.06790223122416063, 0.06816169525522552, 0.07017975751497046, 0.07055662220598093,
            0.06856935642669208, 0.06884983984819669, 0.059109336003401826
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subretail trade except of motor vehicles and motorcycles repair of household goods'
    Original Eqn: b'([(1995,2009)-(0.16835349960126303,0.2018756033970964)],(1995,0.18343784780840566),(1996,0.17571147382553004),(1997,0.18011471116892394),(1998,0.17822724063783765),(1999,0.18225544144230094),\\\\ (2000,0.18442893092936644),(2001,0.19182988574399967),(2002,0.16835349960126303),(2003,0.1890527790350421),(2004,0.2018756033970964),\\\\ (2005,0.177562069213027),(2006,0.18024065768526512),(2007,0.1817884994152512),(2008,0.18541308729004072),(2009,0.17702047126196366))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.18343784780840566, 0.17571147382553004, 0.18011471116892394, 0.17822724063783765,
            0.18225544144230094, 0.18442893092936644, 0.19182988574399967, 0.16835349960126303,
            0.1890527790350421, 0.2018756033970964, 0.177562069213027, 0.18024065768526512,
            0.1817884994152512, 0.18541308729004072, 0.17702047126196366
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subhotels_and_restaurants(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subhotels and restaurants'
    Original Eqn: b'([(1995,2009)-(0.1975478906533931,0.4056754915204717)],(1995,0.2296887595143569),(1996,0.24545601899441238),(1997,0.23698316507221934),(1998,0.22727014618673852),(1999,0.21806857343434236),\\\\ (2000,0.21680620576486417),(2001,0.23817525049187382),(2002,0.1975478906533931),(2003,0.23029168731264182),(2004,0.27893354750435984),\\\\ (2005,0.28591236839346135),(2006,0.31385282829780764),(2007,0.3331125790232874),(2008,0.36885491612934235),(2009,0.4056754915204717))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.2296887595143569, 0.24545601899441238, 0.23698316507221934, 0.22727014618673852,
            0.21806857343434236, 0.21680620576486417, 0.23817525049187382, 0.1975478906533931,
            0.23029168731264182, 0.27893354750435984, 0.28591236839346135, 0.31385282829780764,
            0.3331125790232874, 0.36885491612934235, 0.4056754915204717
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subinland_transport(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subinland transport'
    Original Eqn: b'([(1995,2009)-(1.5335878589335115,1.7917046309320366)],(1995,1.768689072259116),(1996,1.7917046309320366),(1997,1.6435054662707695),(1998,1.7138042008227812),(1999,1.6384909990256893),\\\\ (2000,1.5335878589335115),(2001,1.5632852095573495),(2002,1.6604083471917965),(2003,1.7233067613550759),(2004,1.706074719516254),\\\\ (2005,1.7138893365378558),(2006,1.662875867498881),(2007,1.6927180417809842),(2008,1.7030920439173627),(2009,1.5852983930085915))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.768689072259116, 1.7917046309320366, 1.6435054662707695, 1.7138042008227812,
            1.6384909990256893, 1.5335878589335115, 1.5632852095573495, 1.6604083471917965,
            1.7233067613550759, 1.706074719516254, 1.7138893365378558, 1.662875867498881,
            1.6927180417809842, 1.7030920439173627, 1.5852983930085915
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subwater_transport(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subwater transport'
    Original Eqn: b'([(1995,2009)-(2.2543503767533515e-06,6.2620557715434685e-06)],(1995,4.574847164421825e-06),(1996,3.5083317099837725e-06),(1997,2.2543503767533515e-06),(1998,3.17598044517727e-06),(1999,3.0609406155923296e-06),\\\\ (2000,4.179549733011051e-06),(2001,4.791593519426679e-06),(2002,5.593053392243618e-06),(2003,6.2620557715434685e-06),(2004,5.3582774971173225e-06),\\\\ (2005,5.569080572749993e-06),(2006,4.6301136778513e-06),(2007,2.8986228116751754e-06),(2008,2.3681513939620776e-06),(2009,2.6750270062826567e-06))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            4.574847164421825e-06, 3.5083317099837725e-06, 2.2543503767533515e-06,
            3.17598044517727e-06, 3.0609406155923296e-06, 4.179549733011051e-06,
            4.791593519426679e-06, 5.593053392243618e-06, 6.2620557715434685e-06,
            5.3582774971173225e-06, 5.569080572749993e-06, 4.6301136778513e-06,
            2.8986228116751754e-06, 2.3681513939620776e-06, 2.6750270062826567e-06
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subair_transport(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subair transport'
    Original Eqn: b'([(1995,2009)-(1.2420497571094495e-05,2.572173276240859e-05)],(1995,1.98484033210949e-05),(1996,1.7923726095086716e-05),(1997,1.605546819730422e-05),(1998,1.4401849284183056e-05),(1999,1.2420497571094495e-05),\\\\ (2000,1.7167074083988788e-05),(2001,2.034013678030099e-05),(2002,2.1669727520137526e-05),(2003,2.1755735666445098e-05),(2004,2.460157375607659e-05),\\\\ (2005,2.572173276240859e-05),(2006,2.4062924673815406e-05),(2007,1.828053757134078e-05),(2008,1.700543257260789e-05),(2009,1.8955822151764034e-05))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.98484033210949e-05, 1.7923726095086716e-05, 1.605546819730422e-05,
            1.4401849284183056e-05, 1.2420497571094495e-05, 1.7167074083988788e-05,
            2.034013678030099e-05, 2.1669727520137526e-05, 2.1755735666445098e-05,
            2.460157375607659e-05, 2.572173276240859e-05, 2.4062924673815406e-05,
            1.828053757134078e-05, 1.700543257260789e-05, 1.8955822151764034e-05
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subother supporting and auxiliary transport activities activities of travel agencies'
    Original Eqn: b'([(1995,2009)-(0.0958235680501819,0.15920033013924226)],(1995,0.15920033013924226),(1996,0.1462653412657254),(1997,0.13750798057984082),(1998,0.12679160517105934),(1999,0.11254947017031008),\\\\ (2000,0.0992373868312057),(2001,0.10003573898651195),(2002,0.09807307747323457),(2003,0.098822003010246),(2004,0.0958235680501819),\\\\ (2005,0.1026264908600997),(2006,0.11059539187753116),(2007,0.10686343674581243),(2008,0.10442853400674075),(2009,0.10464609635555286))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.15920033013924226, 0.1462653412657254, 0.13750798057984082, 0.12679160517105934,
            0.11254947017031008, 0.0992373868312057, 0.10003573898651195, 0.09807307747323457,
            0.098822003010246, 0.0958235680501819, 0.1026264908600997, 0.11059539187753116,
            0.10686343674581243, 0.10442853400674075, 0.10464609635555286
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subpost_and_telecommunications(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subpost and telecommunications'
    Original Eqn: b'([(1995,2009)-(0.16233097499278262,0.557114158189985)],(1995,0.557114158189985),(1996,0.5472730387659961),(1997,0.5197418530500941),(1998,0.48040480838419714),(1999,0.463796507686431),\\\\ (2000,0.19502066451585254),(2001,0.2289077295900135),(2002,0.17540867590327613),(2003,0.1928580587552419),(2004,0.19487285803924426),\\\\ (2005,0.18958196691492568),(2006,0.17019557521741102),(2007,0.16233097499278262),(2008,0.175412440542782),(2009,0.19572299833922094))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.557114158189985, 0.5472730387659961, 0.5197418530500941, 0.48040480838419714,
            0.463796507686431, 0.19502066451585254, 0.2289077295900135, 0.17540867590327613,
            0.1928580587552419, 0.19487285803924426, 0.18958196691492568, 0.17019557521741102,
            0.16233097499278262, 0.175412440542782, 0.19572299833922094
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subfinancial_intermediation(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subfinancial intermediation'
    Original Eqn: b'([(1995,2009)-(0.03749500409530591,0.046744865231611685)],(1995,0.04635997696533132),(1996,0.046744865231611685),(1997,0.0447351069202782),(1998,0.04268199059411815),(1999,0.04019711180265761),\\\\ (2000,0.04058553299336325),(2001,0.04038838748973608),(2002,0.03749500409530591),(2003,0.041477197913039505),(2004,0.04384957478665145),\\\\ (2005,0.04314727817008194),(2006,0.03987437403323019),(2007,0.04170324486339083),(2008,0.04301901300787914),(2009,0.04127577120538779))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.04635997696533132, 0.046744865231611685, 0.0447351069202782, 0.04268199059411815,
            0.04019711180265761, 0.04058553299336325, 0.04038838748973608, 0.03749500409530591,
            0.041477197913039505, 0.04384957478665145, 0.04314727817008194, 0.03987437403323019,
            0.04170324486339083, 0.04301901300787914, 0.04127577120538779
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subreal_estate_activities(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subreal estate activities'
    Original Eqn: b'([(1995,2009)-(0.07296546325240949,0.08985636789862816)],(1995,0.08985636789862816),(1996,0.08216238775043112),(1997,0.07728302303128676),(1998,0.07620240719739438),(1999,0.08203065255604013),\\\\ (2000,0.08084037631457545),(2001,0.07381013913588647),(2002,0.07785242082615067),(2003,0.07619088399937314),(2004,0.07697874791338906),\\\\ (2005,0.07792588444866497),(2006,0.07842749110707001),(2007,0.08563504721208058),(2008,0.07975016800990146),(2009,0.07296546325240949))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.08985636789862816, 0.08216238775043112, 0.07728302303128676, 0.07620240719739438,
            0.08203065255604013, 0.08084037631457545, 0.07381013913588647, 0.07785242082615067,
            0.07619088399937314, 0.07697874791338906, 0.07792588444866497, 0.07842749110707001,
            0.08563504721208058, 0.07975016800990146, 0.07296546325240949
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subrenting_od_meq_and_other_business_activities(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subrenting od meq and other business activities'
    Original Eqn: b'([(1995,2009)-(0.07833873328067115,0.11115803062770635)],(1995,0.09772309728227796),(1996,0.11115803062770635),(1997,0.10580241841803352),(1998,0.10681667576834784),(1999,0.10522864842044777),\\\\ (2000,0.09467934401641757),(2001,0.10213827710360436),(2002,0.07833873328067115),(2003,0.09223915867588768),(2004,0.09732601885051016),\\\\ (2005,0.09079701149562185),(2006,0.08828570175789931),(2007,0.09002758585564463),(2008,0.09515527299978106),(2009,0.10356363499920908))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.09772309728227796, 0.11115803062770635, 0.10580241841803352, 0.10681667576834784,
            0.10522864842044777, 0.09467934401641757, 0.10213827710360436, 0.07833873328067115,
            0.09223915867588768, 0.09732601885051016, 0.09079701149562185, 0.08828570175789931,
            0.09002758585564463, 0.09515527299978106, 0.10356363499920908
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subpublic_admin_and_defence_compulsory_social_security(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subpublic admin and defence compulsory social security'
    Original Eqn: b'([(1995,2009)-(0.7860677446553317,1.6069214033563568)],(1995,1.5373951654266507),(1996,1.5773355485211076),(1997,1.6069214033563568),(1998,1.5581521796463662),(1999,1.5924836438541974),\\\\ (2000,0.8946457984749805),(2001,0.7860677446553317),(2002,0.995986989631449),(2003,0.9270969437849531),(2004,0.920655350885897),\\\\ (2005,0.8808926606088301),(2006,0.8257451964081314),(2007,0.8606127743772815),(2008,0.8316784911656734),(2009,0.7942589878807084))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.5373951654266507, 1.5773355485211076, 1.6069214033563568, 1.5581521796463662,
            1.5924836438541974, 0.8946457984749805, 0.7860677446553317, 0.995986989631449,
            0.9270969437849531, 0.920655350885897, 0.8808926606088301, 0.8257451964081314,
            0.8606127743772815, 0.8316784911656734, 0.7942589878807084
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subeducation(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subeducation'
    Original Eqn: b'([(1995,2009)-(0.19922448291807177,0.23531238535474305)],(1995,0.19922448291807177),(1996,0.23531238535474305),(1997,0.2231415545653652),(1998,0.22317933842060514),(1999,0.21438305202709548),\\\\ (2000,0.20330385315308613),(2001,0.20638467532306168),(2002,0.20166091895972965),(2003,0.21881425132286253),(2004,0.23146364374082085),\\\\ (2005,0.22149602406457594),(2006,0.21929110510209326),(2007,0.21676984237117738),(2008,0.2211725111125796),(2009,0.21082169303149165))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.19922448291807177, 0.23531238535474305, 0.2231415545653652, 0.22317933842060514,
            0.21438305202709548, 0.20330385315308613, 0.20638467532306168, 0.20166091895972965,
            0.21881425132286253, 0.23146364374082085, 0.22149602406457594, 0.21929110510209326,
            0.21676984237117738, 0.2211725111125796, 0.21082169303149165
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subhealth_and_social_work(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subhealth and social work'
    Original Eqn: b'([(1995,2009)-(0.11775767279203651,0.1732020915342724)],(1995,0.16141074562287921),(1996,0.1732020915342724),(1997,0.1657377513264254),(1998,0.15836996028351982),(1999,0.14672777699115497),\\\\ (2000,0.1409050090986358),(2001,0.1482148290757661),(2002,0.11775767279203651),(2003,0.13644975758106215),(2004,0.14151464690529184),\\\\ (2005,0.1413414886206319),(2006,0.1476061657474311),(2007,0.14650608522130928),(2008,0.15076300318769348),(2009,0.1530470898697172))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.16141074562287921, 0.1732020915342724, 0.1657377513264254, 0.15836996028351982,
            0.14672777699115497, 0.1409050090986358, 0.1482148290757661, 0.11775767279203651,
            0.13644975758106215, 0.14151464690529184, 0.1413414886206319, 0.1476061657474311,
            0.14650608522130928, 0.15076300318769348, 0.1530470898697172
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subother_community_social_and_persona_services(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subother community social and persona services'
    Original Eqn: b'([(1995,2009)-(0.1554216693170553,0.24354639533712438)],(1995,0.24354639533712438),(1996,0.22410397697909837),(1997,0.2181196495176965),(1998,0.21745540669238772),(1999,0.20644271381163165),\\\\ (2000,0.20161633674608678),(2001,0.19625973853525425),(2002,0.1554216693170553),(2003,0.1772699128910812),(2004,0.1885584053327525),\\\\ (2005,0.19696970570613992),(2006,0.19897657587795384),(2007,0.20464005931279272),(2008,0.20326798159486942),(2009,0.1974065126411919))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.24354639533712438, 0.22410397697909837, 0.2181196495176965, 0.21745540669238772,
            0.20644271381163165, 0.20161633674608678, 0.19625973853525425, 0.1554216693170553,
            0.1772699128910812, 0.1885584053327525, 0.19696970570613992, 0.19897657587795384,
            0.20464005931279272, 0.20326798159486942, 0.1974065126411919
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subgases_subprivate_households_with_employed_persons(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subgases subprivate households with employed persons'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subagriculture_hunting_forestry_and_fishing(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subagriculture hunting forestry and fishing'
    Original Eqn: b'([(1995,2009)-(0.254453630249139,0.47086767577643307)],(1995,0.47086767577643307),(1996,0.4689734098478973),(1997,0.46425486815666095),(1998,0.44534418746398285),(1999,0.3761325320228421),\\\\ (2000,0.3551956503752216),(2001,0.3365821032904595),(2002,0.34446052697705376),(2003,0.3369613067779433),(2004,0.3777420374226403),\\\\ (2005,0.37787484702445184),(2006,0.3437689486231854),(2007,0.33878148476263686),(2008,0.2577659589029426),(2009,0.254453630249139))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.47086767577643307, 0.4689734098478973, 0.46425486815666095, 0.44534418746398285,
            0.3761325320228421, 0.3551956503752216, 0.3365821032904595, 0.34446052697705376,
            0.3369613067779433, 0.3777420374226403, 0.37787484702445184, 0.3437689486231854,
            0.33878148476263686, 0.2577659589029426, 0.254453630249139
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_submining_and_quarrying(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids submining and quarrying'
    Original Eqn: b'([(1995,2009)-(0.6526677911564813,1.1870484516524065)],(1995,0.9506886637716337),(1996,1.086630598111202),(1997,1.01667597588606),(1998,1.0660191521961055),(1999,0.7868691739470693),\\\\ (2000,0.6526677911564813),(2001,0.7204889529796701),(2002,0.7089010456405578),(2003,0.7794095503774782),(2004,0.9704793933712182),\\\\ (2005,0.9823892491919919),(2006,0.9278313661875002),(2007,1.0833070867907952),(2008,1.1106331881813756),(2009,1.1870484516524065))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.9506886637716337, 1.086630598111202, 1.01667597588606, 1.0660191521961055,
            0.7868691739470693, 0.6526677911564813, 0.7204889529796701, 0.7089010456405578,
            0.7794095503774782, 0.9704793933712182, 0.9823892491919919, 0.9278313661875002,
            1.0833070867907952, 1.1106331881813756, 1.1870484516524065
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subfood_beverages_and_tobacco(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subfood beverages and tobacco'
    Original Eqn: b'([(1995,2009)-(0.8843014622198658,1.047944772544057)],(1995,1.047944772544057),(1996,1.0360568758730864),(1997,1.014018726524927),(1998,1.037066032050261),(1999,0.9815967965758055),\\\\ (2000,0.8843014622198658),(2001,0.8913773668345029),(2002,0.9258706928918075),(2003,0.9257269945592518),(2004,0.9338086140710012),\\\\ (2005,0.9319479467345817),(2006,0.9313754300283074),(2007,0.9057922750003461),(2008,0.9381713242043601),(2009,0.9704476184444321))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.047944772544057, 1.0360568758730864, 1.014018726524927, 1.037066032050261,
            0.9815967965758055, 0.8843014622198658, 0.8913773668345029, 0.9258706928918075,
            0.9257269945592518, 0.9338086140710012, 0.9319479467345817, 0.9313754300283074,
            0.9057922750003461, 0.9381713242043601, 0.9704476184444321
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subtextiles_and_textile_products(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subtextiles and textile products'
    Original Eqn: b'([(1995,2009)-(0.49724291289232403,0.9919552339550126)],(1995,0.9919552339550126),(1996,0.847724044256255),(1997,0.8186147769677025),(1998,0.81062296508303),(1999,0.679675887864844),\\\\ (2000,0.5982756067962458),(2001,0.576790088518787),(2002,0.5340863948470222),(2003,0.5622607319189838),(2004,0.5959511163236807),\\\\ (2005,0.5801706727339709),(2006,0.5566949002161229),(2007,0.624951990189146),(2008,0.5381622642204315),(2009,0.49724291289232403))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.9919552339550126, 0.847724044256255, 0.8186147769677025, 0.81062296508303,
            0.679675887864844, 0.5982756067962458, 0.576790088518787, 0.5340863948470222,
            0.5622607319189838, 0.5959511163236807, 0.5801706727339709, 0.5566949002161229,
            0.624951990189146, 0.5381622642204315, 0.49724291289232403
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subleather_leather_and_footwear(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subleather leather and footwear'
    Original Eqn: b'([(1995,2009)-(0.20248687709043212,0.36017316114149805)],(1995,0.36017316114149805),(1996,0.30773968477634617),(1997,0.2849058765356348),(1998,0.28389198839865315),(1999,0.2758287894515175),\\\\ (2000,0.2705123915880374),(2001,0.28642317546372925),(2002,0.2592775000171222),(2003,0.25206032689756724),(2004,0.2709501807246148),\\\\ (2005,0.2663224865185713),(2006,0.2287097852786095),(2007,0.2384944850405983),(2008,0.21190362815894584),(2009,0.20248687709043212))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.36017316114149805, 0.30773968477634617, 0.2849058765356348, 0.28389198839865315,
            0.2758287894515175, 0.2705123915880374, 0.28642317546372925, 0.2592775000171222,
            0.25206032689756724, 0.2709501807246148, 0.2663224865185713, 0.2287097852786095,
            0.2384944850405983, 0.21190362815894584, 0.20248687709043212
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subwood_and_products_of_wood_and_cork(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subwood and products of wood and cork'
    Original Eqn: b'([(1995,2009)-(1.340937777405623,1.795836426642832)],(1995,1.543584669525891),(1996,1.5713183395016395),(1997,1.646331221104433),(1998,1.795836426642832),(1999,1.7003984320277263),\\\\ (2000,1.6450077961022413),(2001,1.5214839862171476),(2002,1.460250568308033),(2003,1.5076450931321594),(2004,1.490623203594703),\\\\ (2005,1.4882085700158616),(2006,1.507689366543973),(2007,1.4345046259573466),(2008,1.340937777405623),(2009,1.4033225078918963))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.543584669525891, 1.5713183395016395, 1.646331221104433, 1.795836426642832,
            1.7003984320277263, 1.6450077961022413, 1.5214839862171476, 1.460250568308033,
            1.5076450931321594, 1.490623203594703, 1.4882085700158616, 1.507689366543973,
            1.4345046259573466, 1.340937777405623, 1.4033225078918963
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subpulp_paper_printing_and_publishing(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subpulp paper printing and publishing'
    Original Eqn: b'([(1995,2009)-(1.281397330192007,1.79209690458253)],(1995,1.4159664231910054),(1996,1.304235051194609),(1997,1.281397330192007),(1998,1.2932604822767144),(1999,1.7279845074651576),\\\\ (2000,1.79209690458253),(2001,1.6591041409759142),(2002,1.6661724225835628),(2003,1.6987801938092408),(2004,1.7486162038976443),\\\\ (2005,1.7029419945596787),(2006,1.7735393640433785),(2007,1.6853550268307096),(2008,1.672671289783725),(2009,1.6711461492308324))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.4159664231910054, 1.304235051194609, 1.281397330192007, 1.2932604822767144,
            1.7279845074651576, 1.79209690458253, 1.6591041409759142, 1.6661724225835628,
            1.6987801938092408, 1.7486162038976443, 1.7029419945596787, 1.7735393640433785,
            1.6853550268307096, 1.672671289783725, 1.6711461492308324
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subcoke_refined_petroleum_and_nuclear_fuel(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subcoke refined petroleum and nuclear fuel'
    Original Eqn: b'([(1995,2009)-(0.43173984930216935,0.644313184666882)],(1995,0.5635188463251101),(1996,0.5851743616352155),(1997,0.644313184666882),(1998,0.5956834437835982),(1999,0.49924952325982),\\\\ (2000,0.43173984930216935),(2001,0.43175921769540554),(2002,0.4496436343012353),(2003,0.5259551145590667),(2004,0.5010401981173834),\\\\ (2005,0.5140242524355785),(2006,0.4598391323689899),(2007,0.5220070922514527),(2008,0.4924544615127271),(2009,0.5813028667048447))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.5635188463251101, 0.5851743616352155, 0.644313184666882, 0.5956834437835982,
            0.49924952325982, 0.43173984930216935, 0.43175921769540554, 0.4496436343012353,
            0.5259551145590667, 0.5010401981173834, 0.5140242524355785, 0.4598391323689899,
            0.5220070922514527, 0.4924544615127271, 0.5813028667048447
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subchemicals_and_chemical_products(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subchemicals and chemical products'
    Original Eqn: b'([(1995,2009)-(0.8767153852524797,1.71695887393953)],(1995,1.6903382545784063),(1996,1.71695887393953),(1997,1.469956704294383),(1998,1.4895419256445153),(1999,1.2626857708375467),\\\\ (2000,1.1688347660484393),(2001,1.0871156670944135),(2002,0.9774906791790546),(2003,0.9984063908017585),(2004,0.8767153852524797),\\\\ (2005,0.8983008834549645),(2006,0.9166930108086413),(2007,0.893563172950253),(2008,1.0391958069307874),(2009,1.0175599074126027))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.6903382545784063, 1.71695887393953, 1.469956704294383, 1.4895419256445153,
            1.2626857708375467, 1.1688347660484393, 1.0871156670944135, 0.9774906791790546,
            0.9984063908017585, 0.8767153852524797, 0.8983008834549645, 0.9166930108086413,
            0.893563172950253, 1.0391958069307874, 1.0175599074126027
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subrubber_and_plastics(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subrubber and plastics'
    Original Eqn: b'([(1995,2009)-(1.9161742444311836,2.737440360502975)],(1995,2.737440360502975),(1996,2.653168017704157),(1997,2.3746478495781074),(1998,2.301560235678491),(1999,2.1343633621673237),\\\\ (2000,2.2543433691103147),(2001,2.362199596156166),(2002,2.2395715789595965),(2003,2.2315149801129435),(2004,2.5658474287552555),\\\\ (2005,2.3535271983433366),(2006,2.1753693103690255),(2007,1.9161742444311836),(2008,2.0402872988069793),(2009,2.339955454982643))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            2.737440360502975, 2.653168017704157, 2.3746478495781074, 2.301560235678491,
            2.1343633621673237, 2.2543433691103147, 2.362199596156166, 2.2395715789595965,
            2.2315149801129435, 2.5658474287552555, 2.3535271983433366, 2.1753693103690255,
            1.9161742444311836, 2.0402872988069793, 2.339955454982643
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subother_non_metalic_mineral(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subother non metalic mineral'
    Original Eqn: b'([(1995,2009)-(5.853044728617025,8.312149498212824)],(1995,7.997229698191975),(1996,7.898914325545515),(1997,7.359390241247763),(1998,7.592310249488967),(1999,6.762910078485197),\\\\ (2000,6.149652094708481),(2001,5.861348640263628),(2002,5.853044728617025),(2003,6.3261226753336075),(2004,7.468790661464871),\\\\ (2005,7.079585118618744),(2006,6.69047655316014),(2007,6.401360089133524),(2008,7.701962886349043),(2009,8.312149498212824))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            7.997229698191975, 7.898914325545515, 7.359390241247763, 7.592310249488967,
            6.762910078485197, 6.149652094708481, 5.861348640263628, 5.853044728617025,
            6.3261226753336075, 7.468790661464871, 7.079585118618744, 6.69047655316014,
            6.401360089133524, 7.701962886349043, 8.312149498212824
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subbasic_metals_and_fabricated_metal(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subbasic metals and fabricated metal'
    Original Eqn: b'([(1995,2009)-(2.4665722660034266,2.8148348986360774)],(1995,2.8148348986360774),(1996,2.7453111311363547),(1997,2.62872708237162),(1998,2.659907145169566),(1999,2.5387101246366677),\\\\ (2000,2.4665722660034266),(2001,2.469370038397535),(2002,2.500267643907507),(2003,2.576380342176518),(2004,2.6695802148310936),\\\\ (2005,2.7472797340606054),(2006,2.5883819547704148),(2007,2.5827382350380548),(2008,2.5709281525712395),(2009,2.740962862203819))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            2.8148348986360774, 2.7453111311363547, 2.62872708237162, 2.659907145169566,
            2.5387101246366677, 2.4665722660034266, 2.469370038397535, 2.500267643907507,
            2.576380342176518, 2.6695802148310936, 2.7472797340606054, 2.5883819547704148,
            2.5827382350380548, 2.5709281525712395, 2.740962862203819
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_submachinery_nec(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids submachinery nec'
    Original Eqn: b'([(1995,2009)-(0.11652380828759189,0.34965201090783354)],(1995,0.34965201090783354),(1996,0.3485096842068839),(1997,0.279054906117444),(1998,0.2722305779495829),(1999,0.21136922436306088),\\\\ (2000,0.15806235724746237),(2001,0.1484902355772645),(2002,0.14741882829007508),(2003,0.1384083188884344),(2004,0.13466797467401953),\\\\ (2005,0.13256471647883097),(2006,0.12398225671433248),(2007,0.11652380828759189),(2008,0.13134038990693306),(2009,0.16728426817745956))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.34965201090783354, 0.3485096842068839, 0.279054906117444, 0.2722305779495829,
            0.21136922436306088, 0.15806235724746237, 0.1484902355772645, 0.14741882829007508,
            0.1384083188884344, 0.13466797467401953, 0.13256471647883097, 0.12398225671433248,
            0.11652380828759189, 0.13134038990693306, 0.16728426817745956
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subelectrical_and_optical_equipment(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subelectrical and optical equipment'
    Original Eqn: b'([(1995,2009)-(0.02342428699557163,0.08366552295776288)],(1995,0.08366552295776288),(1996,0.07699981553840246),(1997,0.06369621210588272),(1998,0.058340254239730174),(1999,0.042325918786184684),\\\\ (2000,0.0320595402306469),(2001,0.02807478003124616),(2002,0.027376385420920114),(2003,0.02927390039219211),(2004,0.024577044028479374),\\\\ (2005,0.025339117161324965),(2006,0.025543833065601596),(2007,0.02342428699557163),(2008,0.023911288618159554),(2009,0.026689358813394036))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.08366552295776288, 0.07699981553840246, 0.06369621210588272, 0.058340254239730174,
            0.042325918786184684, 0.0320595402306469, 0.02807478003124616, 0.027376385420920114,
            0.02927390039219211, 0.024577044028479374, 0.025339117161324965, 0.025543833065601596,
            0.02342428699557163, 0.023911288618159554, 0.026689358813394036
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subtransport_equipment(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subtransport equipment'
    Original Eqn: b'([(1995,2009)-(0.048682890764563565,0.11490861193939238)],(1995,0.11490861193939238),(1996,0.1081115484591803),(1997,0.09782318939953644),(1998,0.09946326835018271),(1999,0.08621479823797218),\\\\ (2000,0.06788637710209482),(2001,0.058334866072842516),(2002,0.05555683566291642),(2003,0.048682890764563565),(2004,0.059841856401587394),\\\\ (2005,0.06601679929344707),(2006,0.06934989494004637),(2007,0.06723161358908392),(2008,0.07580187120558012),(2009,0.09639910951746274))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.11490861193939238, 0.1081115484591803, 0.09782318939953644, 0.09946326835018271,
            0.08621479823797218, 0.06788637710209482, 0.058334866072842516, 0.05555683566291642,
            0.048682890764563565, 0.059841856401587394, 0.06601679929344707, 0.06934989494004637,
            0.06723161358908392, 0.07580187120558012, 0.09639910951746274
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_submanufacturing_nec_recycling(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids submanufacturing nec recycling'
    Original Eqn: b'([(1995,2009)-(1.0499525592289427,2.1260014275788457)],(1995,2.1260014275788457),(1996,2.057377428407371),(1997,2.125381313616282),(1998,1.9796899098853875),(1999,1.8710438855509501),\\\\ (2000,1.4687557873678239),(2001,1.4589131498308834),(2002,1.4739066155637164),(2003,1.700472171062823),(2004,1.130894749465082),\\\\ (2005,1.2406698372753777),(2006,1.1490739423944445),(2007,1.2665482132346975),(2008,1.2983931028176303),(2009,1.0499525592289427))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            2.1260014275788457, 2.057377428407371, 2.125381313616282, 1.9796899098853875,
            1.8710438855509501, 1.4687557873678239, 1.4589131498308834, 1.4739066155637164,
            1.700472171062823, 1.130894749465082, 1.2406698372753777, 1.1490739423944445,
            1.2665482132346975, 1.2983931028176303, 1.0499525592289427
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subelectricity_gas_and_water_supply(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subelectricity gas and water supply'
    Original Eqn: b'([(1995,2009)-(0.5778798448053956,2.473662882947921)],(1995,1.3084750756044377),(1996,0.8104891430027502),(1997,1.4617037707221665),(1998,1.4740996259925323),(1999,1.4532688376916307),\\\\ (2000,0.7903411399721437),(2001,0.6739217324429169),(2002,0.6471981342381012),(2003,0.5778798448053956),(2004,1.1868744116093666),\\\\ (2005,1.2377147803870046),(2006,1.493035799268893),(2007,1.4076289630531469),(2008,1.9610455757353344),(2009,2.473662882947921))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.3084750756044377, 0.8104891430027502, 1.4617037707221665, 1.4740996259925323,
            1.4532688376916307, 0.7903411399721437, 0.6739217324429169, 0.6471981342381012,
            0.5778798448053956, 1.1868744116093666, 1.2377147803870046, 1.493035799268893,
            1.4076289630531469, 1.9610455757353344, 2.473662882947921
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subconstruction(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subconstruction'
    Original Eqn: b'([(1995,2009)-(0.07631604424840002,0.09678117644493296)],(1995,0.0806173098110524),(1996,0.08594746821812554),(1997,0.08227770261546485),(1998,0.08790092227513241),(1999,0.082592651911312),\\\\ (2000,0.07803037174132649),(2001,0.07631604424840002),(2002,0.07855546769792085),(2003,0.08064242615211846),(2004,0.09077341072803267),\\\\ (2005,0.0935716874675732),(2006,0.09678117644493296),(2007,0.09358490192627616),(2008,0.09520594589281828),(2009,0.09338286988860646))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.0806173098110524, 0.08594746821812554, 0.08227770261546485, 0.08790092227513241,
            0.082592651911312, 0.07803037174132649, 0.07631604424840002, 0.07855546769792085,
            0.08064242615211846, 0.09077341072803267, 0.0935716874675732, 0.09678117644493296,
            0.09358490192627616, 0.09520594589281828, 0.09338286988860646
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'
    Original Eqn: b'([(1995,2009)-(0.005757907828806607,0.025721291024246726)],(1995,0.025721291024246726),(1996,0.016083306734592066),(1997,0.014490815894267404),(1998,0.011709581795349921),(1999,0.011843814344314),\\\\ (2000,0.006437423982575871),(2001,0.006038090062378964),(2002,0.006924385237484932),(2003,0.005840258138144695),(2004,0.005757907828806607),\\\\ (2005,0.006912255105327055),(2006,0.006751246171271431),(2007,0.006345110988541257),(2008,0.016012871441109883),(2009,0.014688616766985556))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.025721291024246726, 0.016083306734592066, 0.014490815894267404, 0.011709581795349921,
            0.011843814344314, 0.006437423982575871, 0.006038090062378964, 0.006924385237484932,
            0.005840258138144695, 0.005757907828806607, 0.006912255105327055, 0.006751246171271431,
            0.006345110988541257, 0.016012871441109883, 0.014688616766985556
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subwholesale trade and commissions trade except of motor vehicles and motorcycles'
    Original Eqn: b'([(1995,2009)-(0.015361347240106649,0.03537462347797025)],(1995,0.03537462347797025),(1996,0.027669882015807064),(1997,0.019705301927951002),(1998,0.017788346538106767),(1999,0.017375946586304866),\\\\ (2000,0.01627434845823217),(2001,0.01727836710245665),(2002,0.017746088363663474),(2003,0.01741101783195977),(2004,0.01560001702399118),\\\\ (2005,0.01671682497154882),(2006,0.015361347240106649),(2007,0.015576581908921505),(2008,0.023605606963863403),(2009,0.02326698711777169))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.03537462347797025, 0.027669882015807064, 0.019705301927951002, 0.017788346538106767,
            0.017375946586304866, 0.01627434845823217, 0.01727836710245665, 0.017746088363663474,
            0.01741101783195977, 0.01560001702399118, 0.01671682497154882, 0.015361347240106649,
            0.015576581908921505, 0.023605606963863403, 0.02326698711777169
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subretail trade except of motor vehicles and motorcycles repair of household goods'
    Original Eqn: b'([(1995,2009)-(0.014353440929141027,0.037316453987752074)],(1995,0.037316453987752074),(1996,0.03091046696966835),(1997,0.024031385122695918),(1998,0.019608921509661207),(1999,0.02168496086862959),\\\\ (2000,0.015667218303222808),(2001,0.014353440929141027),(2002,0.01681562607212218),(2003,0.01606014700682523),(2004,0.017763624047269853),\\\\ (2005,0.017737844896048568),(2006,0.01563874466158938),(2007,0.015034232682292148),(2008,0.02157103204247284),(2009,0.019494781005226815))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.037316453987752074, 0.03091046696966835, 0.024031385122695918, 0.019608921509661207,
            0.02168496086862959, 0.015667218303222808, 0.014353440929141027, 0.01681562607212218,
            0.01606014700682523, 0.017763624047269853, 0.017737844896048568, 0.01563874466158938,
            0.015034232682292148, 0.02157103204247284, 0.019494781005226815
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subhotels_and_restaurants(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subhotels and restaurants'
    Original Eqn: b'([(1995,2009)-(0.27497346761202845,0.47460825688986324)],(1995,0.4722702682067137),(1996,0.47460825688986324),(1997,0.47383107688548043),(1998,0.3703955333570004),(1999,0.37102085338660346),\\\\ (2000,0.35307411559939295),(2001,0.33593866092970665),(2002,0.3338866063826925),(2003,0.3216559203857432),(2004,0.3142122903875573),\\\\ (2005,0.2967407036504295),(2006,0.2814820577560224),(2007,0.27497346761202845),(2008,0.30930676588570116),(2009,0.4039358176250789))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.4722702682067137, 0.47460825688986324, 0.47383107688548043, 0.3703955333570004,
            0.37102085338660346, 0.35307411559939295, 0.33593866092970665, 0.3338866063826925,
            0.3216559203857432, 0.3142122903875573, 0.2967407036504295, 0.2814820577560224,
            0.27497346761202845, 0.30930676588570116, 0.4039358176250789
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subinland_transport(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subinland transport'
    Original Eqn: b'([(1995,2009)-(0.06770309824135796,0.19524776114800166)],(1995,0.19289283581954494),(1996,0.16574545130667276),(1997,0.19524776114800166),(1998,0.18703942896412112),(1999,0.16542357718750053),\\\\ (2000,0.14393693859557874),(2001,0.1314425924974032),(2002,0.13094386215497808),(2003,0.1269476862589329),(2004,0.10145820290830995),\\\\ (2005,0.09604043673468537),(2006,0.08083495467828675),(2007,0.07216014172557603),(2008,0.06770309824135796),(2009,0.06913765881252633))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.19289283581954494, 0.16574545130667276, 0.19524776114800166, 0.18703942896412112,
            0.16542357718750053, 0.14393693859557874, 0.1314425924974032, 0.13094386215497808,
            0.1269476862589329, 0.10145820290830995, 0.09604043673468537, 0.08083495467828675,
            0.07216014172557603, 0.06770309824135796, 0.06913765881252633
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subwater_transport(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subwater transport'
    Original Eqn: b'([(1995,2009)-(0.008017104407259123,0.020257549859789746)],(1995,0.020257549859789746),(1996,0.019448944791747077),(1997,0.019280458523735264),(1998,0.01762807010271867),(1999,0.016233261604574407),\\\\ (2000,0.015221325496242827),(2001,0.017148001015014576),(2002,0.009232557504386006),(2003,0.008250926485561576),(2004,0.008534341220736591),\\\\ (2005,0.011991602081475282),(2006,0.010329416483131851),(2007,0.010122791173485413),(2008,0.008017104407259123),(2009,0.009792350532875372))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.020257549859789746, 0.019448944791747077, 0.019280458523735264, 0.01762807010271867,
            0.016233261604574407, 0.015221325496242827, 0.017148001015014576, 0.009232557504386006,
            0.008250926485561576, 0.008534341220736591, 0.011991602081475282, 0.010329416483131851,
            0.010122791173485413, 0.008017104407259123, 0.009792350532875372
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subair_transport(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subair transport'
    Original Eqn: b'([(1995,2009)-(0.0,1.4927273666771165e-06)],(1995,0.0),(1996,3.7320077908385635e-09),(1997,2.2663659904102352e-08),(1998,1.8129530502928767e-09),(1999,8.158887940594626e-10),\\\\ (2000,1.247536137308539e-08),(2001,1.8922947444433446e-08),(2002,5.832519874703696e-08),(2003,4.1394275468854056e-08),(2004,0.0),\\\\ (2005,9.204725637811062e-08),(2006,0.0),(2007,0.0),(2008,0.0),(2009,1.4927273666771165e-06))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.0, 3.7320077908385635e-09, 2.2663659904102352e-08, 1.8129530502928767e-09,
            8.158887940594626e-10, 1.247536137308539e-08, 1.8922947444433446e-08,
            5.832519874703696e-08, 4.1394275468854056e-08, 0.0, 9.204725637811062e-08, 0.0, 0.0,
            0.0, 1.4927273666771165e-06
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subother supporting and auxiliary transport activities activities of travel agencies'
    Original Eqn: b'([(1995,2009)-(0.011835549572757174,0.0493350265929109)],(1995,0.0493350265929109),(1996,0.029880114079265312),(1997,0.021769099877484484),(1998,0.020264698559728334),(1999,0.017857791999022384),\\\\ (2000,0.014372833892743186),(2001,0.011835549572757174),(2002,0.01408806635254586),(2003,0.01675283806156665),(2004,0.01713560079288289),\\\\ (2005,0.023635420648333905),(2006,0.025905630959936757),(2007,0.028382091125843972),(2008,0.035127368310808114),(2009,0.03583322404994238))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.0493350265929109, 0.029880114079265312, 0.021769099877484484, 0.020264698559728334,
            0.017857791999022384, 0.014372833892743186, 0.011835549572757174, 0.01408806635254586,
            0.01675283806156665, 0.01713560079288289, 0.023635420648333905, 0.025905630959936757,
            0.028382091125843972, 0.035127368310808114, 0.03583322404994238
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subpost_and_telecommunications(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subpost and telecommunications'
    Original Eqn: b'([(1995,2009)-(0.004051243085745235,0.008802154580489769)],(1995,0.008802154580489769),(1996,0.006849775384173932),(1997,0.006373370813379648),(1998,0.006583077487266303),(1999,0.008034321437860639),\\\\ (2000,0.0073363880967828735),(2001,0.007681985254192262),(2002,0.008404733845272091),(2003,0.007886118279475168),(2004,0.007305669706869622),\\\\ (2005,0.006415787721319419),(2006,0.005497382571308583),(2007,0.004051243085745235),(2008,0.005356114156355983),(2009,0.00632167139261299))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.008802154580489769, 0.006849775384173932, 0.006373370813379648, 0.006583077487266303,
            0.008034321437860639, 0.0073363880967828735, 0.007681985254192262,
            0.008404733845272091, 0.007886118279475168, 0.007305669706869622, 0.006415787721319419,
            0.005497382571308583, 0.004051243085745235, 0.005356114156355983, 0.00632167139261299
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subfinancial_intermediation(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subfinancial intermediation'
    Original Eqn: b'([(1995,2009)-(0.002744336513450184,0.014962966037717462)],(1995,0.014962966037717462),(1996,0.006999623262715352),(1997,0.0036871410062793044),(1998,0.0033891821903891508),(1999,0.0034949956176403957),\\\\ (2000,0.0034969511236112604),(2001,0.0034045480124904604),(2002,0.004572338604714762),(2003,0.003151566761297772),(2004,0.002744336513450184),\\\\ (2005,0.003656388017117741),(2006,0.003261585586787987),(2007,0.002924517223465735),(2008,0.004112842705433558),(2009,0.0035234857215375435))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.014962966037717462, 0.006999623262715352, 0.0036871410062793044, 0.0033891821903891508,
        0.0034949956176403957, 0.0034969511236112604, 0.0034045480124904604, 0.004572338604714762,
        0.003151566761297772, 0.002744336513450184, 0.003656388017117741, 0.003261585586787987,
        0.002924517223465735, 0.004112842705433558, 0.0035234857215375435
    ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subreal_estate_activities(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subreal estate activities'
    Original Eqn: b'([(1995,2009)-(0.012207164859604358,0.05228868249614063)],(1995,0.05228868249614063),(1996,0.03642181330610362),(1997,0.022236844264576505),(1998,0.020547510389879235),(1999,0.02261782112835534),\\\\ (2000,0.021273067203708175),(2001,0.019078580107547097),(2002,0.0203027669092925),(2003,0.01799919562097267),(2004,0.017683685455269195),\\\\ (2005,0.018537828954760974),(2006,0.01700557316702225),(2007,0.012207164859604358),(2008,0.014836353679504581),(2009,0.014944020301411355))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.05228868249614063, 0.03642181330610362, 0.022236844264576505, 0.020547510389879235,
            0.02261782112835534, 0.021273067203708175, 0.019078580107547097, 0.0203027669092925,
            0.01799919562097267, 0.017683685455269195, 0.018537828954760974, 0.01700557316702225,
            0.012207164859604358, 0.014836353679504581, 0.014944020301411355
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subrenting_od_meq_and_other_business_activities(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subrenting od meq and other business activities'
    Original Eqn: b'([(1995,2009)-(0.015934870158277582,0.029845876171776614)],(1995,0.029830788986078677),(1996,0.029845876171776614),(1997,0.02113408923374507),(1998,0.019246162349765873),(1999,0.01892142091938055),\\\\ (2000,0.017096721854260245),(2001,0.01609687839592735),(2002,0.015985049597349442),(2003,0.017093125327429747),(2004,0.01745848677226531),\\\\ (2005,0.016628019140136795),(2006,0.015934870158277582),(2007,0.015999333840099075),(2008,0.024502755541621134),(2009,0.029755588523413663))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.029830788986078677, 0.029845876171776614, 0.02113408923374507, 0.019246162349765873,
            0.01892142091938055, 0.017096721854260245, 0.01609687839592735, 0.015985049597349442,
            0.017093125327429747, 0.01745848677226531, 0.016628019140136795, 0.015934870158277582,
            0.015999333840099075, 0.024502755541621134, 0.029755588523413663
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subpublic_admin_and_defence_compulsory_social_security(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subpublic admin and defence compulsory social security'
    Original Eqn: b'([(1995,2009)-(0.0518955977723396,0.09242157665491013)],(1995,0.07497030892925732),(1996,0.07517673240762333),(1997,0.05697302605983134),(1998,0.0518955977723396),(1999,0.05837898098001085),\\\\ (2000,0.059572159062379205),(2001,0.05560159332740479),(2002,0.06700976660980495),(2003,0.07550049342595831),(2004,0.08251023861209508),\\\\ (2005,0.08367537095400508),(2006,0.07903576498544398),(2007,0.07918587821401651),(2008,0.09242157665491013),(2009,0.08212842751731904))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.07497030892925732, 0.07517673240762333, 0.05697302605983134, 0.0518955977723396,
            0.05837898098001085, 0.059572159062379205, 0.05560159332740479, 0.06700976660980495,
            0.07550049342595831, 0.08251023861209508, 0.08367537095400508, 0.07903576498544398,
            0.07918587821401651, 0.09242157665491013, 0.08212842751731904
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subeducation(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subeducation'
    Original Eqn: b'([(1995,2009)-(0.06538195677412448,0.19636605203264995)],(1995,0.1919927279978261),(1996,0.19636605203264995),(1997,0.13655203248504122),(1998,0.13531732732379906),(1999,0.12183360291423968),\\\\ (2000,0.11352346481802379),(2001,0.10736468368656304),(2002,0.09991975953695116),(2003,0.0969676728724115),(2004,0.08726517762316098),\\\\ (2005,0.07728313027204972),(2006,0.07702355401757097),(2007,0.06538195677412448),(2008,0.11079695373357354),(2009,0.1145460059306778))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.1919927279978261, 0.19636605203264995, 0.13655203248504122, 0.13531732732379906,
            0.12183360291423968, 0.11352346481802379, 0.10736468368656304, 0.09991975953695116,
            0.0969676728724115, 0.08726517762316098, 0.07728313027204972, 0.07702355401757097,
            0.06538195677412448, 0.11079695373357354, 0.1145460059306778
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subhealth_and_social_work(x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subhealth and social work'
    Original Eqn: b'([(1995,2009)-(0.02454673774799809,0.0789741172107411)],(1995,0.05863354785334826),(1996,0.04942708233077913),(1997,0.040557906871152904),(1998,0.03822182114509443),(1999,0.034823706400789224),\\\\ (2000,0.030804019895711035),(2001,0.02692162160782073),(2002,0.02454673774799809),(2003,0.02701696026679188),(2004,0.0301557121060672),\\\\ (2005,0.033701894426510906),(2006,0.040421025987261654),(2007,0.047543910250616266),(2008,0.07589495099367287),(2009,0.0789741172107411))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.05863354785334826, 0.04942708233077913, 0.040557906871152904, 0.03822182114509443,
            0.034823706400789224, 0.030804019895711035, 0.02692162160782073, 0.02454673774799809,
            0.02701696026679188, 0.0301557121060672, 0.033701894426510906, 0.040421025987261654,
            0.047543910250616266, 0.07589495099367287, 0.0789741172107411
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subother_community_social_and_persona_services(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subother community social and persona services'
    Original Eqn: b'([(1995,2009)-(0.026153967022636167,0.08137642990063773)],(1995,0.06819527064185982),(1996,0.04535426311241609),(1997,0.0293864371017948),(1998,0.026153967022636167),(1999,0.04590856884905141),\\\\ (2000,0.04269116062911706),(2001,0.033670880404642486),(2002,0.04238727073336363),(2003,0.0704906307634303),(2004,0.06313010917804748),\\\\ (2005,0.05951784163038456),(2006,0.055528082109709026),(2007,0.052090285210014645),(2008,0.08120230568637982),(2009,0.08137642990063773))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.06819527064185982, 0.04535426311241609, 0.0293864371017948, 0.026153967022636167,
            0.04590856884905141, 0.04269116062911706, 0.033670880404642486, 0.04238727073336363,
            0.0704906307634303, 0.06313010917804748, 0.05951784163038456, 0.055528082109709026,
            0.052090285210014645, 0.08120230568637982, 0.08137642990063773
        ])


def historic_final_energy_intensity_by_sector_and_fuel_subsolids_subprivate_households_with_employed_persons(
        x):
    """
    Real Name: b'historic final energy intensity by sector and fuel subsolids subprivate households with employed persons'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_final_energy_intensity_h_subelectricity(x):
    """
    Real Name: b'historic final energy intensity h subelectricity'
    Original Eqn: b'([(1995,2009)-(0.6319452492878225,0.6755273041086106)],(1995,0.6319452492878225),(1996,0.6474447373221129),(1997,0.6391440903441314),(1998,0.6425429079164128),(1999,0.6367531217492081),\\\\ (2000,0.6381846304893362),(2001,0.6397246612461346),(2002,0.6454008888282491),(2003,0.6483867554557563),(2004,0.6454292743121216),\\\\ (2005,0.6541601234210128),(2006,0.6498359966439917),(2007,0.6468084213534645),(2008,0.6527043158711583),(2009,0.6755273041086106))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.6319452492878225, 0.6474447373221129, 0.6391440903441314, 0.6425429079164128,
            0.6367531217492081, 0.6381846304893362, 0.6397246612461346, 0.6454008888282491,
            0.6483867554557563, 0.6454292743121216, 0.6541601234210128, 0.6498359966439917,
            0.6468084213534645, 0.6527043158711583, 0.6755273041086106
        ])


def historic_final_energy_intensity_h_subheat(x):
    """
    Real Name: b'historic final energy intensity h subheat'
    Original Eqn: b'([(1995,2009)-(0.16062564751664934,0.2855157381546875)],(1995,0.2855157381546875),(1996,0.25404242100647506),(1997,0.24406615678652396),(1998,0.23610742913107505),(1999,0.22273851188620555),\\\\ (2000,0.2209255171420526),(2001,0.2280921535653369),(2002,0.21266637246609502),(2003,0.20891825736332598),(2004,0.20146970103522027),\\\\ (2005,0.17173640930783207),(2006,0.17010396189688415),(2007,0.16529326408979034),(2008,0.16134248582086183),(2009,0.16062564751664934))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.2855157381546875, 0.25404242100647506, 0.24406615678652396, 0.23610742913107505,
            0.22273851188620555, 0.2209255171420526, 0.2280921535653369, 0.21266637246609502,
            0.20891825736332598, 0.20146970103522027, 0.17173640930783207, 0.17010396189688415,
            0.16529326408979034, 0.16134248582086183, 0.16062564751664934
        ])


def historic_final_energy_intensity_h_subliquids(x):
    """
    Real Name: b'historic final energy intensity h subliquids'
    Original Eqn: b'([(1995,2009)-(1.5215015338090632,1.645749849370925)],(1995,1.568424004123364),(1996,1.5730823826140428),(1997,1.5751815947459),(1998,1.5215015338090632),(1999,1.5231645132539757),\\\\ (2000,1.5686384037861798),(2001,1.5744559913368583),(2002,1.5255667193507039),(2003,1.5531450950363177),(2004,1.600019681580165),\\\\ (2005,1.645749849370925),(2006,1.6358124056952272),(2007,1.6167993069329223),(2008,1.5976487464510023),(2009,1.5959097248509646))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.568424004123364, 1.5730823826140428, 1.5751815947459, 1.5215015338090632,
            1.5231645132539757, 1.5686384037861798, 1.5744559913368583, 1.5255667193507039,
            1.5531450950363177, 1.600019681580165, 1.645749849370925, 1.6358124056952272,
            1.6167993069329223, 1.5976487464510023, 1.5959097248509646
        ])


def historic_final_energy_intensity_h_subsolids(x):
    """
    Real Name: b'historic final energy intensity h subsolids'
    Original Eqn: b'([(1995,2009)-(1.4416220292300719,1.95104724970324)],(1995,1.95104724970324),(1996,1.91801080181749),(1997,1.8449354246520582),(1998,1.7516917434535115),(1999,1.6942081331809153),\\\\ (2000,1.6505256393456411),(2001,1.6289997302953656),(2002,1.5913544671283866),(2003,1.5780902111352826),(2004,1.540341358331322),\\\\ (2005,1.5113938358165822),(2006,1.4752141383258566),(2007,1.4422144923500455),(2008,1.4416220292300719),(2009,1.4683310666706337))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1.95104724970324, 1.91801080181749, 1.8449354246520582, 1.7516917434535115,
            1.6942081331809153, 1.6505256393456411, 1.6289997302953656, 1.5913544671283866,
            1.5780902111352826, 1.540341358331322, 1.5113938358165822, 1.4752141383258566,
            1.4422144923500455, 1.4416220292300719, 1.4683310666706337
        ])


def historic_final_energy_intensity_h_subgases(x):
    """
    Real Name: b'historic final energy intensity h subgases'
    Original Eqn: b'([(1995,2009)-(0.6896973704625412,0.8648994945858922)],(1995,0.8069129864373691),(1996,0.8648994945858922),(1997,0.8062956712422991),(1998,0.7601404056051215),(1999,0.7625889623573991),\\\\ (2000,0.7699018890737395),(2001,0.7585472995515781),(2002,0.7588815049134393),(2003,0.778744234679196),(2004,0.7536943195133183),\\\\ (2005,0.7279680365530793),(2006,0.697784790932038),(2007,0.6896973704625412),(2008,0.6939916695225792),(2009,0.6975686054927074))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.8069129864373691, 0.8648994945858922, 0.8062956712422991, 0.7601404056051215,
            0.7625889623573991, 0.7699018890737395, 0.7585472995515781, 0.7588815049134393,
            0.778744234679196, 0.7536943195133183, 0.7279680365530793, 0.697784790932038,
            0.6896973704625412, 0.6939916695225792, 0.6975686054927074
        ])


def historic_share_gas_div_xcoal_plus_gasx_for_heat_plants(x):
    """
    Real Name: b'historic share gas div xcoal plus gasx for heat plants'
    Original Eqn: b'([(1995,2014)-(0.382003505923756,0.6486922923750881)],(1995,0.6400078403045726),(1996,0.625494609565936),(1997,0.633011936961359),(1998,0.6486922923750881),(1999,0.6469276462210707),\\\\ (2000,0.6138097737209008),(2001,0.606109214138782),(2002,0.5986175242634422),(2003,0.595281391596198),(2004,0.586586261482702),\\\\ (2005,0.5447112921280477),(2006,0.52717673519315),(2007,0.5032201982790275),(2008,0.49668145545839515),(2009,0.48668197474167624),\\\\ (2010,0.4775030096269512),(2011,0.47070644665043565),(2012,0.44995202983813604),(2013,0.3903674184032734),(2014,0.382003505923756))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.6400078403045726, 0.625494609565936, 0.633011936961359, 0.6486922923750881,
        0.6469276462210707, 0.6138097737209008, 0.606109214138782, 0.5986175242634422,
        0.595281391596198, 0.586586261482702, 0.5447112921280477, 0.52717673519315,
        0.5032201982790275, 0.49668145545839515, 0.48668197474167624, 0.4775030096269512,
        0.47070644665043565, 0.44995202983813604, 0.3903674184032734, 0.382003505923756
    ])


def hadcrut4_temperature(x):
    """
    Real Name: b'hadcrut4 temperature'
    Original Eqn: b'([(1850,2016)-(-0.23300000000000004,1.083)],(1850,-0.064),(1851,0.089),(1852,0.086),(1853,0.04099999999999998),(1854,0.059),\\\\ (1855,0.03699999999999998),(1856,-0.04299999999999998),(1857,-0.15000000000000002),(1858,-0.15600000000000003),(1859,0.02300000000000002),\\\\ (1860,-0.03899999999999998),(1861,-0.10299999999999998),(1862,-0.21600000000000003),(1863,0.02899999999999997),(1864,-0.184),\\\\ (1865,0.035999999999999976),(1866,0.061),(1867,-0.01200000000000001),(1868,0.07599999999999998),(1869,0.04299999999999998),\\\\ (1870,0.03199999999999997),(1871,-0.02400000000000002),(1872,0.07999999999999999),(1873,0.006000000000000005),(1874,-0.065),\\\\ (1875,-0.08700000000000002),(1876,-0.07200000000000001),(1877,0.23399999999999999),(1878,0.346),(1879,0.07799999999999999),\\\\ (1880,0.08099999999999999),(1881,0.10300000000000001),(1882,0.096),(1883,0.01200000000000001),(1884,-0.10099999999999998),\\\\ (1885,-0.08000000000000002),(1886,-0.057999999999999996),(1887,-0.11199999999999999),(1888,-0.0020000000000000018),(1889,0.137),\\\\ (1890,-0.10699999999999998),(1891,-0.025000000000000022),(1892,-0.14600000000000002),(1893,-0.16299999999999998),(1894,-0.09500000000000003),\\\\ (1895,-0.08000000000000002),(1896,0.126),(1897,0.10200000000000001),(1898,-0.10299999999999998),(1899,0.02100000000000002),\\\\ (1900,0.11199999999999999),(1901,0.04899999999999999),(1902,-0.09400000000000003),(1903,-0.172),(1904,-0.20900000000000002),\\\\ (1905,-0.067),(1906,0.026000000000000023),(1907,-0.15600000000000003),(1908,-0.201),(1909,-0.21300000000000002),\\\\ (1910,-0.181),(1911,-0.23300000000000004),(1912,-0.127),(1913,-0.11499999999999999),(1914,0.065),\\\\ (1915,0.163),(1916,-0.07200000000000001),(1917,-0.15300000000000002),(1918,-0.02100000000000002),(1919,0.03799999999999998),\\\\ (1920,0.069),(1921,0.123),(1922,0.009000000000000008),(1923,0.03799999999999998),(1924,0.018000000000000016),\\\\ (1925,0.096),(1926,0.20500000000000002),(1927,0.10200000000000001),(1928,0.10400000000000001),(1929,-0.03799999999999998),\\\\ (1930,0.176),(1931,0.22699999999999998),(1932,0.176),(1933,0.04299999999999998),(1934,0.183),\\\\ (1935,0.138),(1936,0.16999999999999998),(1937,0.288),(1938,0.307),(1939,0.263),\\\\ (1940,0.328),(1941,0.33),(1942,0.286),(1943,0.31),(1944,0.45899999999999996),\\\\ (1945,0.337),(1946,0.238),(1947,0.272),(1948,0.273),(1949,0.238),\\\\ (1950,0.138),(1951,0.259),(1952,0.34099999999999997),(1953,0.40700000000000003),(1954,0.181),\\\\ (1955,0.12),(1956,0.043999999999999984),(1957,0.306),(1958,0.356),(1959,0.327),\\\\ (1960,0.261),(1961,0.35),(1962,0.326),(1963,0.359),(1964,0.087),\\\\ (1965,0.16999999999999998),(1966,0.241),(1967,0.236),(1968,0.198),(1969,0.34099999999999997),\\\\ (1970,0.283),(1971,0.123),(1972,0.243),(1973,0.372),(1974,0.097),\\\\ (1975,0.163),(1976,0.07),(1977,0.356),(1978,0.247),(1979,0.368),\\\\ (1980,0.403),(1981,0.45),(1982,0.321),(1983,0.503),(1984,0.297),\\\\ (1985,0.28),(1986,0.356),(1987,0.501),(1988,0.509),(1989,0.428),\\\\ (1990,0.606),(1991,0.5640000000000001),(1992,0.413),(1993,0.45499999999999996),(1994,0.516),\\\\ (1995,0.631),(1996,0.49),(1997,0.6990000000000001),(1998,0.8460000000000001),(1999,0.616),\\\\ (2000,0.603),(2001,0.749),(2002,0.8069999999999999),(2003,0.8180000000000001),(2004,0.758),\\\\ (2005,0.8540000000000001),(2006,0.815),(2007,0.802),(2008,0.704),(2009,0.8160000000000001),\\\\ (2010,0.8660000000000001),(2011,0.731),(2012,0.7789999999999999),(2013,0.8220000000000001),(2014,0.885),\\\\ (2015,1.07),(2016,1.083))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
        1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
        1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
        1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909,
        1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
        1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939,
        1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
        1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
        1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016
    ], [
        -0.064, 0.089, 0.086, 0.04099999999999998, 0.059, 0.03699999999999998,
        -0.04299999999999998, -0.15000000000000002, -0.15600000000000003, 0.02300000000000002,
        -0.03899999999999998, -0.10299999999999998, -0.21600000000000003, 0.02899999999999997,
        -0.184, 0.035999999999999976, 0.061, -0.01200000000000001, 0.07599999999999998,
        0.04299999999999998, 0.03199999999999997, -0.02400000000000002, 0.07999999999999999,
        0.006000000000000005, -0.065, -0.08700000000000002, -0.07200000000000001,
        0.23399999999999999, 0.346, 0.07799999999999999, 0.08099999999999999, 0.10300000000000001,
        0.096, 0.01200000000000001, -0.10099999999999998, -0.08000000000000002,
        -0.057999999999999996, -0.11199999999999999, -0.0020000000000000018, 0.137,
        -0.10699999999999998, -0.025000000000000022, -0.14600000000000002, -0.16299999999999998,
        -0.09500000000000003, -0.08000000000000002, 0.126, 0.10200000000000001,
        -0.10299999999999998, 0.02100000000000002, 0.11199999999999999, 0.04899999999999999,
        -0.09400000000000003, -0.172, -0.20900000000000002, -0.067, 0.026000000000000023,
        -0.15600000000000003, -0.201, -0.21300000000000002, -0.181, -0.23300000000000004, -0.127,
        -0.11499999999999999, 0.065, 0.163, -0.07200000000000001, -0.15300000000000002,
        -0.02100000000000002, 0.03799999999999998, 0.069, 0.123, 0.009000000000000008,
        0.03799999999999998, 0.018000000000000016, 0.096, 0.20500000000000002, 0.10200000000000001,
        0.10400000000000001, -0.03799999999999998, 0.176, 0.22699999999999998, 0.176,
        0.04299999999999998, 0.183, 0.138, 0.16999999999999998, 0.288, 0.307, 0.263, 0.328, 0.33,
        0.286, 0.31, 0.45899999999999996, 0.337, 0.238, 0.272, 0.273, 0.238, 0.138, 0.259,
        0.34099999999999997, 0.40700000000000003, 0.181, 0.12, 0.043999999999999984, 0.306, 0.356,
        0.327, 0.261, 0.35, 0.326, 0.359, 0.087, 0.16999999999999998, 0.241, 0.236, 0.198,
        0.34099999999999997, 0.283, 0.123, 0.243, 0.372, 0.097, 0.163, 0.07, 0.356, 0.247, 0.368,
        0.403, 0.45, 0.321, 0.503, 0.297, 0.28, 0.356, 0.501, 0.509, 0.428, 0.606,
        0.5640000000000001, 0.413, 0.45499999999999996, 0.516, 0.631, 0.49, 0.6990000000000001,
        0.8460000000000001, 0.616, 0.603, 0.749, 0.8069999999999999, 0.8180000000000001, 0.758,
        0.8540000000000001, 0.815, 0.802, 0.704, 0.8160000000000001, 0.8660000000000001, 0.731,
        0.7789999999999999, 0.8220000000000001, 0.885, 1.07, 1.083
    ])


def co2_mauna_loa(x):
    """
    Real Name: b'co2 mauna loa'
    Original Eqn: b'([(1959,2016)-(315.97,404.21)],(1959,315.97),(1960,316.91),(1961,317.64),(1962,318.45),(1963,318.99),\\\\ (1964,319.62),(1965,320.04),(1966,321.38),(1967,322.16),(1968,323.04),\\\\ (1969,324.62),(1970,325.68),(1971,326.32),(1972,327.45),(1973,329.68),\\\\ (1974,330.18),(1975,331.11),(1976,332.04),(1977,333.83),(1978,335.4),\\\\ (1979,336.84),(1980,338.75),(1981,340.11),(1982,341.45),(1983,343.05),\\\\ (1984,344.65),(1985,346.12),(1986,347.42),(1987,349.19),(1988,351.57),\\\\ (1989,353.12),(1990,354.39),(1991,355.61),(1992,356.45),(1993,357.1),\\\\ (1994,358.83),(1995,360.82),(1996,362.61),(1997,363.73),(1998,366.7),\\\\ (1999,368.38),(2000,369.55),(2001,371.14),(2002,373.28),(2003,375.8),\\\\ (2004,377.52),(2005,379.8),(2006,381.9),(2007,383.79),(2008,385.6),\\\\ (2009,387.43),(2010,389.9),(2011,391.65),(2012,393.85),(2013,396.52),\\\\ (2014,398.65),(2015,400.83),(2016,404.21))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
        1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
        1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
        2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        315.97, 316.91, 317.64, 318.45, 318.99, 319.62, 320.04, 321.38, 322.16, 323.04, 324.62,
        325.68, 326.32, 327.45, 329.68, 330.18, 331.11, 332.04, 333.83, 335.4, 336.84, 338.75,
        340.11, 341.45, 343.05, 344.65, 346.12, 347.42, 349.19, 351.57, 353.12, 354.39, 355.61,
        356.45, 357.1, 358.83, 360.82, 362.61, 363.73, 366.7, 368.38, 369.55, 371.14, 373.28,
        375.8, 377.52, 379.8, 381.9, 383.79, 385.6, 387.43, 389.9, 391.65, 393.85, 396.52, 398.65,
        400.83, 404.21
    ])


def giss_nasa_temperature(x):
    """
    Real Name: b'giss nasa temperature'
    Original Eqn: b'([(1880,2016)-(-0.275,1.225)],(1880,0.024999999999999994),(1881,0.115),(1882,0.10500000000000001),(1883,0.024999999999999994),(1884,-0.07499999999999998),\\\\ (1885,-0.095),(1886,-0.10500000000000001),(1887,-0.13499999999999998),(1888,0.035),(1889,0.10500000000000001),\\\\ (1890,-0.155),(1891,-0.024999999999999994),(1892,-0.05500000000000002),(1893,-0.10500000000000001),(1894,-0.10500000000000001),\\\\ (1895,-0.014999999999999986),(1896,0.095),(1897,0.095),(1898,-0.06499999999999997),(1899,0.024999999999999994),\\\\ (1900,0.125),(1901,0.065),(1902,-0.07499999999999998),(1903,-0.165),(1904,-0.275),\\\\ (1905,-0.07499999999999998),(1906,-0.014999999999999986),(1907,-0.18499999999999997),(1908,-0.225),(1909,-0.265),\\\\ (1910,-0.215),(1911,-0.205),(1912,-0.145),(1913,-0.13499999999999998),(1914,0.05499999999999999),\\\\ (1915,0.095),(1916,-0.11500000000000002),(1917,-0.225),(1918,-0.06499999999999997),(1919,-0.05500000000000002),\\\\ (1920,-0.04500000000000001),(1921,0.035),(1922,-0.05500000000000002),(1923,-0.024999999999999994),(1924,-0.035),\\\\ (1925,0.0050000000000000044),(1926,0.125),(1927,0.015000000000000013),(1928,0.024999999999999994),(1929,-0.13499999999999998),\\\\ (1930,0.07500000000000001),(1931,0.115),(1932,0.05499999999999999),(1933,-0.07499999999999998),(1934,0.08499999999999999),\\\\ (1935,0.015000000000000013),(1936,0.065),(1937,0.185),(1938,0.185),(1939,0.195),\\\\ (1940,0.335),(1941,0.405),(1942,0.275),(1943,0.29500000000000004),(1944,0.42500000000000004),\\\\ (1945,0.305),(1946,0.155),(1947,0.185),(1948,0.115),(1949,0.115),\\\\ (1950,0.04500000000000001),(1951,0.165),(1952,0.23500000000000001),(1953,0.29500000000000004),(1954,0.08499999999999999),\\\\ (1955,0.08499999999999999),(1956,0.024999999999999994),(1957,0.275),(1958,0.29500000000000004),(1959,0.255),\\\\ (1960,0.20500000000000002),(1961,0.275),(1962,0.265),(1963,0.29500000000000004),(1964,0.024999999999999994),\\\\ (1965,0.115),(1966,0.175),(1967,0.20500000000000002),(1968,0.14500000000000002),(1969,0.29500000000000004),\\\\ (1970,0.255),(1971,0.135),(1972,0.23500000000000001),(1973,0.385),(1974,0.14500000000000002),\\\\ (1975,0.20500000000000002),(1976,0.115),(1977,0.395),(1978,0.28500000000000003),(1979,0.385),\\\\ (1980,0.495),(1981,0.555),(1982,0.355),(1983,0.535),(1984,0.385),\\\\ (1985,0.345),(1986,0.405),(1987,0.555),(1988,0.635),(1989,0.515),\\\\ (1990,0.665),(1991,0.635),(1992,0.445),(1993,0.46499999999999997),(1994,0.535),\\\\ (1995,0.665),(1996,0.555),(1997,0.695),(1998,0.845),(1999,0.625),\\\\ (2000,0.625),(2001,0.755),(2002,0.845),(2003,0.835),(2004,0.755),\\\\ (2005,0.895),(2006,0.845),(2007,0.865),(2008,0.745),(2009,0.865),\\\\ (2010,0.9249999999999999),(2011,0.8049999999999999),(2012,0.845),(2013,0.865),(2014,0.955),\\\\ (2015,1.095),(2016,1.225))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
        1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909,
        1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
        1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939,
        1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
        1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
        1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016
    ], [
        0.024999999999999994, 0.115, 0.10500000000000001, 0.024999999999999994,
        -0.07499999999999998, -0.095, -0.10500000000000001, -0.13499999999999998, 0.035,
        0.10500000000000001, -0.155, -0.024999999999999994, -0.05500000000000002,
        -0.10500000000000001, -0.10500000000000001, -0.014999999999999986, 0.095, 0.095,
        -0.06499999999999997, 0.024999999999999994, 0.125, 0.065, -0.07499999999999998, -0.165,
        -0.275, -0.07499999999999998, -0.014999999999999986, -0.18499999999999997, -0.225, -0.265,
        -0.215, -0.205, -0.145, -0.13499999999999998, 0.05499999999999999, 0.095,
        -0.11500000000000002, -0.225, -0.06499999999999997, -0.05500000000000002,
        -0.04500000000000001, 0.035, -0.05500000000000002, -0.024999999999999994, -0.035,
        0.0050000000000000044, 0.125, 0.015000000000000013, 0.024999999999999994,
        -0.13499999999999998, 0.07500000000000001, 0.115, 0.05499999999999999,
        -0.07499999999999998, 0.08499999999999999, 0.015000000000000013, 0.065, 0.185, 0.185,
        0.195, 0.335, 0.405, 0.275, 0.29500000000000004, 0.42500000000000004, 0.305, 0.155, 0.185,
        0.115, 0.115, 0.04500000000000001, 0.165, 0.23500000000000001, 0.29500000000000004,
        0.08499999999999999, 0.08499999999999999, 0.024999999999999994, 0.275, 0.29500000000000004,
        0.255, 0.20500000000000002, 0.275, 0.265, 0.29500000000000004, 0.024999999999999994, 0.115,
        0.175, 0.20500000000000002, 0.14500000000000002, 0.29500000000000004, 0.255, 0.135,
        0.23500000000000001, 0.385, 0.14500000000000002, 0.20500000000000002, 0.115, 0.395,
        0.28500000000000003, 0.385, 0.495, 0.555, 0.355, 0.535, 0.385, 0.345, 0.405, 0.555, 0.635,
        0.515, 0.665, 0.635, 0.445, 0.46499999999999997, 0.535, 0.665, 0.555, 0.695, 0.845, 0.625,
        0.625, 0.755, 0.845, 0.835, 0.755, 0.895, 0.845, 0.865, 0.745, 0.865, 0.9249999999999999,
        0.8049999999999999, 0.845, 0.865, 0.955, 1.095, 1.225
    ])


def other_forcings_history(x):
    """
    Real Name: b'other forcings history'
    Original Eqn: b'([(1990,2010)-(-3.41805,-0.49598)],(1990,-0.49598),(1991,-1.98053),(1992,-3.41805),(1993,-1.58304),(1994,-0.92833),\\\\ (1995,-0.7171),(2000,-0.981),(2005,-0.966),(2010,-0.896))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 1991, 1992, 1993, 1994, 1995, 2000, 2005, 2010],
        [-0.49598, -1.98053, -3.41805, -1.58304, -0.92833, -0.7171, -0.981, -0.966, -0.896])


def mp_rf_total(x):
    """
    Real Name: b'mp rf total'
    Original Eqn: b'([(1990,2100)-(0.10374,0.32634300000000005)],(1990,0.287364),(1991,0.2981974),(1992,0.30549670000000007),(1993,0.3116818),(1994,0.31517199999999995),\\\\ (1995,0.3179608),(1996,0.32052250000000004),(1997,0.3220829),(1998,0.32290989999999997),(1999,0.3241693),\\\\ (2000,0.32495349999999995),(2001,0.3257068999999999),(2002,0.32634300000000005),(2003,0.3262145999999999),(2004,0.32629450000000004),\\\\ (2005,0.32596909999999996),(2006,0.32495520000000006),(2007,0.3240775999999999),(2008,0.3231530999999999),(2009,0.32227409999999995),\\\\ (2010,0.32141790000000003),(2015,0.316705),(2020,0.3112558),(2025,0.30478420000000006),(2030,0.297133),\\\\ (2035,0.2870987),(2040,0.26998350000000004),(2045,0.24620709999999996),(2050,0.221897),(2055,0.20014),\\\\ (2060,0.1816),(2065,0.16609),(2070,0.153),(2075,0.14193),(2080,0.13232),\\\\ (2085,0.124),(2090,0.11653),(2095,0.10983),(2100,0.10374))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
        2005, 2006, 2007, 2008, 2009, 2010, 2015, 2020, 2025, 2030, 2035, 2040, 2045, 2050, 2055,
        2060, 2065, 2070, 2075, 2080, 2085, 2090, 2095, 2100
    ], [
        0.287364, 0.2981974, 0.30549670000000007, 0.3116818, 0.31517199999999995, 0.3179608,
        0.32052250000000004, 0.3220829, 0.32290989999999997, 0.3241693, 0.32495349999999995,
        0.3257068999999999, 0.32634300000000005, 0.3262145999999999, 0.32629450000000004,
        0.32596909999999996, 0.32495520000000006, 0.3240775999999999, 0.3231530999999999,
        0.32227409999999995, 0.32141790000000003, 0.316705, 0.3112558, 0.30478420000000006,
        0.297133, 0.2870987, 0.26998350000000004, 0.24620709999999996, 0.221897, 0.20014, 0.1816,
        0.16609, 0.153, 0.14193, 0.13232, 0.124, 0.11653, 0.10983, 0.10374
    ])


def other_forcings_rcp_scenario_subrcp26(x):
    """
    Real Name: b'other forcings rcp scenario subrcp26'
    Original Eqn: b'([(2010,2100)-(-0.71688,-0.32284)],(2010,-0.71688),(2020,-0.57694),(2030,-0.48852),(2040,-0.42674),(2050,-0.41276),\\\\ (2060,-0.43195),(2070,-0.41792),(2080,-0.38228),(2090,-0.35317),(2100,-0.32284))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
        -0.71688, -0.57694, -0.48852, -0.42674, -0.41276, -0.43195, -0.41792, -0.38228, -0.35317,
        -0.32284
    ])


def other_forcings_rcp_scenario_subrcp45(x):
    """
    Real Name: b'other forcings rcp scenario subrcp45'
    Original Eqn: b'([(2010,2100)-(-0.71329,-0.22386)],(2010,-0.71329),(2020,-0.60463),(2030,-0.51849),(2040,-0.43097),(2050,-0.34356),\\\\ (2060,-0.29633),(2070,-0.25669),(2080,-0.22573),(2090,-0.22653),(2100,-0.22386))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
        -0.71329, -0.60463, -0.51849, -0.43097, -0.34356, -0.29633, -0.25669, -0.22573, -0.22653,
        -0.22386
    ])


def other_forcings_rcp_scenario_subrcp60(x):
    """
    Real Name: b'other forcings rcp scenario subrcp60'
    Original Eqn: b'([(2010,2100)-(-0.75125,-0.32024)],(2010,-0.75125),(2020,-0.67085),(2030,-0.5727),(2040,-0.57466),(2050,-0.52115),\\\\ (2060,-0.50936),(2070,-0.3863),(2080,-0.32024),(2090,-0.32243),(2100,-0.32754))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
        -0.75125, -0.67085, -0.5727, -0.57466, -0.52115, -0.50936, -0.3863, -0.32024, -0.32243,
        -0.32754
    ])


def other_forcings_rcp_scenario_subrcp85(x):
    """
    Real Name: b'other forcings rcp scenario subrcp85'
    Original Eqn: b'([(2010,2100)-(-0.69615,-0.08835)],(2010,-0.69615),(2020,-0.6482),(2030,-0.57292),(2040,-0.45195),(2050,-0.34149),\\\\ (2060,-0.27418),(2070,-0.22593),(2080,-0.18895),(2090,-0.12128),(2100,-0.08835))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
        -0.69615, -0.6482, -0.57292, -0.45195, -0.34149, -0.27418, -0.22593, -0.18895, -0.12128,
        -0.08835
    ])


def global_sf6_emissions_rcp_subrcp26(x):
    """
    Real Name: b'global sf6 emissions rcp subrcp26'
    Original Eqn: b'([(1990,2100)-(44.2,6623.1)],(1990,5520.77),(2000,5538.0),(2005,6341.0),(2010,6623.1),(2020,2244.2000000000003),\\\\ (2030,1952.3),(2040,1567.6000000000001),(2050,632.1999999999999),(2060,498.5),(2070,418.3),\\\\ (2080,315.8),(2090,185.20000000000002),(2100,44.2))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            5520.77, 5538.0, 6341.0, 6623.1, 2244.2000000000003, 1952.3, 1567.6000000000001,
            632.1999999999999, 498.5, 418.3, 315.8, 185.20000000000002, 44.2
        ])


def global_sf6_emissions_rcp_subrcp45(x):
    """
    Real Name: b'global sf6 emissions rcp subrcp45'
    Original Eqn: b'([(1990,2100)-(2502.7,6434.3)],(1990,5520.77),(2000,5538.0),(2005,6341.0),(2010,5655.400000000001),(2020,2502.7),\\\\ (2030,2910.8999999999996),(2040,3337.1),(2050,3781.6),(2060,4293.0),(2070,4894.8),\\\\ (2080,5586.9),(2090,6010.6),(2100,6434.3))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            5520.77, 5538.0, 6341.0, 5655.400000000001, 2502.7, 2910.8999999999996, 3337.1, 3781.6,
            4293.0, 4894.8, 5586.9, 6010.6, 6434.3
        ])


def global_sf6_emissions_rcp_subrcp60(x):
    """
    Real Name: b'global sf6 emissions rcp subrcp60'
    Original Eqn: b'([(1990,2100)-(5520.77,10082.800000000001)],(1990,5520.77),(2000,5538.0),(2005,6341.0),(2010,7770.3),(2020,9425.4),\\\\ (2030,9602.5),(2040,9687.300000000001),(2050,9779.5),(2060,9928.0),(2070,10082.800000000001),\\\\ (2080,9996.1),(2090,9874.9),(2100,9497.1))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            5520.77, 5538.0, 6341.0, 7770.3, 9425.4, 9602.5, 9687.300000000001, 9779.5, 9928.0,
            10082.800000000001, 9996.1, 9874.9, 9497.1
        ])


def global_sf6_emissions_rcp_subrcp85(x):
    """
    Real Name: b'global sf6 emissions rcp subrcp85'
    Original Eqn: b'([(1990,2100)-(5520.77,16922.3)],(1990,5520.77),(2000,5538.0),(2005,6341.0),(2010,7044.3),(2020,8081.200000000001),\\\\ (2030,9988.300000000001),(2040,11260.300000000001),(2050,11965.3),(2060,14059.699999999999),(2070,13492.0),\\\\ (2080,14875.8),(2090,16052.7),(2100,16922.3))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            5520.77, 5538.0, 6341.0, 7044.3, 8081.200000000001, 9988.300000000001,
            11260.300000000001, 11965.3, 14059.699999999999, 13492.0, 14875.8, 16052.7, 16922.3
        ])


def global_ch4_anthro_emissions_rcp_subrcp26(x):
    """
    Real Name: b'global ch4 anthro emissions rcp subrcp26'
    Original Eqn: b'([(1990,2100)-(130.4424,242.67688)],(1990,226.47982000000002),(2000,229.35242),(2005,231.19312000000002),(2010,242.67688),(2020,208.7452),\\\\ (2030,197.1581),(2040,187.833),(2050,158.7792),(2060,152.24050000000003),(2070,146.4999),\\\\ (2080,140.8769),(2090,135.1028),(2100,130.4424))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            226.47982000000002, 229.35242, 231.19312000000002, 242.67688, 208.7452, 197.1581,
            187.833, 158.7792, 152.24050000000003, 146.4999, 140.8769, 135.1028, 130.4424
        ])


def global_ch4_anthro_emissions_rcp_subrcp45(x):
    """
    Real Name: b'global ch4 anthro emissions rcp subrcp45'
    Original Eqn: b'([(1990,2100)-(207.987,257.0696)],(1990,226.47982000000002),(2000,229.24151999999998),(2005,232.26422999999997),(2010,238.28171999999998),(2020,250.3293),\\\\ (2030,255.85819999999995),(2040,257.0696),(2050,253.9631),(2060,245.01260000000002),(2070,233.6735),\\\\ (2080,219.95030000000003),(2090,213.96869999999998),(2100,207.987))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            226.47982000000002, 229.24151999999998, 232.26422999999997, 238.28171999999998,
            250.3293, 255.85819999999995, 257.0696, 253.9631, 245.01260000000002, 233.6735,
            219.95030000000003, 213.96869999999998, 207.987
        ])


def global_ch4_anthro_emissions_rcp_subrcp60(x):
    """
    Real Name: b'global ch4 anthro emissions rcp subrcp60'
    Original Eqn: b'([(1990,2100)-(210.30579999999998,276.2532)],(1990,226.47982000000002),(2000,229.27952),(2005,240.16632),(2010,247.16665),(2020,237.8823),\\\\ (2030,247.3007),(2040,255.6114),(2050,261.3207),(2060,268.9658),(2070,276.2532),\\\\ (2080,269.48830000000004),(2090,228.5847),(2100,210.30579999999998))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            226.47982000000002, 229.27952, 240.16632, 247.16665, 237.8823, 247.3007, 255.6114,
            261.3207, 268.9658, 276.2532, 269.48830000000004, 228.5847, 210.30579999999998
        ])


def global_ch4_anthro_emissions_rcp_subrcp85(x):
    """
    Real Name: b'global ch4 anthro emissions rcp subrcp85'
    Original Eqn: b'([(1990,2100)-(226.47982000000002,559.518)],(1990,226.47982000000002),(2000,229.27931999999998),(2005,250.01143),(2010,269.93085),(2020,312.293),\\\\ (2030,355.548),(2040,408.2289999999999),(2050,464.02099999999996),(2060,503.03),(2070,527.515),\\\\ (2080,547.7719999999999),(2090,559.518),(2100,558.015))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            226.47982000000002, 229.27931999999998, 250.01143, 269.93085, 312.293, 355.548,
            408.2289999999999, 464.02099999999996, 503.03, 527.515, 547.7719999999999, 559.518,
            558.015
        ])


def global_hfc_emissions_rcp_26_subhfc134a(x):
    """
    Real Name: b'global hfc emissions rcp 26 subhfc134a'
    Original Eqn: b'([(1990,2100)-(1010,265700)],(1990,1010),(2000,75039),(2005,120933),(2010,157043),(2020,173879),\\\\ (2030,194186),(2040,212829),(2050,198351),(2060,226357),(2070,255846),\\\\ (2080,265700),(2090,256848),(2100,235392))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            1010, 75039, 120933, 157043, 173879, 194186, 212829, 198351, 226357, 255846, 265700,
            256848, 235392
        ])


def global_hfc_emissions_rcp_26_subhfc23(x):
    """
    Real Name: b'global hfc emissions rcp 26 subhfc23'
    Original Eqn: b'([(1990,2100)-(0,10812)],(1990,6622),(2000,10395),(2005,10812),(2010,9522),(2020,1152),\\\\ (2030,691),(2040,413),(2050,246),(2060,138),(2070,73),\\\\ (2080,37),(2090,0),(2100,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [6622, 10395, 10812, 9522, 1152, 691, 413, 246, 138, 73, 37, 0, 0])


def global_hfc_emissions_rcp_26_subhfc32(x):
    """
    Real Name: b'global hfc emissions rcp 26 subhfc32'
    Original Eqn: b'([(1990,2100)-(0,96271)],(1990,0),(2000,4000),(2005,10994),(2010,17942),(2020,60642),\\\\ (2030,72035),(2040,80712),(2050,74607),(2060,84086),(2070,93880),\\\\ (2080,96271),(2090,91204),(2100,81227))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [0, 4000, 10994, 17942, 60642, 72035, 80712, 74607, 84086, 93880, 96271, 91204, 81227])


def global_hfc_emissions_rcp_26_subhfc125(x):
    """
    Real Name: b'global hfc emissions rcp 26 subhfc125'
    Original Eqn: b'([(1990,2100)-(186,166569)],(1990,186),(2000,8538),(2005,13759),(2010,26279),(2020,89349),\\\\ (2030,108899),(2040,124961),(2050,119137),(2060,138797),(2070,159182),\\\\ (2080,166569),(2090,161556),(2100,148214))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            186, 8538, 13759, 26279, 89349, 108899, 124961, 119137, 138797, 159182, 166569, 161556,
            148214
        ])


def global_hfc_emissions_rcp_26_subhfc143a(x):
    """
    Real Name: b'global hfc emissions rcp 26 subhfc143a'
    Original Eqn: b'([(1990,2100)-(889,95810)],(1990,889),(2000,6234),(2005,12448),(2010,21616),(2020,64374),\\\\ (2030,75555),(2040,83724),(2050,77089),(2060,86593),(2070,95507),\\\\ (2080,95810),(2090,88763),(2100,77457))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [889, 6234, 12448, 21616, 64374, 75555, 83724, 77089, 86593, 95507, 95810, 88763, 77457])


def global_hfc_emissions_rcp_26_subhfc152a(x):
    """
    Real Name: b'global hfc emissions rcp 26 subhfc152a'
    Original Eqn: b'([(1990,2100)-(0,34530)],(1990,12),(2000,15200),(2005,23010),(2010,34530),(2020,0),\\\\ (2030,0),(2040,0),(2050,0),(2060,0),(2070,0),\\\\ (2080,0),(2090,0),(2100,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [12, 15200, 23010, 34530, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def global_hfc_emissions_rcp_26_subhfc227ea(x):
    """
    Real Name: b'global hfc emissions rcp 26 subhfc227ea'
    Original Eqn: b'([(1990,2100)-(0,8979)],(1990,0),(2000,1951),(2005,4890),(2010,8979),(2020,1608),\\\\ (2030,795),(2040,886),(2050,296),(2060,142),(2070,132),\\\\ (2080,120),(2090,107),(2100,91))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [0, 1951, 4890, 8979, 1608, 795, 886, 296, 142, 132, 120, 107, 91])


def global_hfc_emissions_rcp_26_subhfc245ca(x):
    """
    Real Name: b'global hfc emissions rcp 26 subhfc245ca'
    Original Eqn: b'([(1990,2100)-(0,51053)],(1990,0),(2000,17926),(2005,26888),(2010,51053),(2020,32321),\\\\ (2030,3174),(2040,0),(2050,0),(2060,0),(2070,0),\\\\ (2080,0),(2090,0),(2100,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [0, 17926, 26888, 51053, 32321, 3174, 0, 0, 0, 0, 0, 0, 0])


def global_hfc_emissions_rcp_26_subhfc4310mee(x):
    """
    Real Name: b'global hfc emissions rcp 26 subhfc4310mee'
    Original Eqn: b'([(1990,2100)-(0.0,305.2)],(1990,1.037),(2000,105.5),(2005,206.6),(2010,305.2),(2020,0.0),\\\\ (2030,0.0),(2040,0.0),(2050,0.0),(2060,0.0),(2070,0.0),\\\\ (2080,0.0),(2090,0.0),(2100,0.0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [1.037, 105.5, 206.6, 305.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])


def global_hfc_emissions_rcp_45_subhfc134a(x):
    """
    Real Name: b'global hfc emissions rcp 45 subhfc134a'
    Original Eqn: b'([(1990,2100)-(1010,409075)],(1990,1010),(2000,75039),(2005,120933),(2010,142731),(2020,189436),\\\\ (2030,208276),(2040,229429),(2050,252971),(2060,243443),(2070,258052),\\\\ (2080,300616),(2090,353004),(2100,409075))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            1010, 75039, 120933, 142731, 189436, 208276, 229429, 252971, 243443, 258052, 300616,
            353004, 409075
        ])


def global_hfc_emissions_rcp_45_subhfc23(x):
    """
    Real Name: b'global hfc emissions rcp 45 subhfc23'
    Original Eqn: b'([(1990,2100)-(0,10812)],(1990,6622),(2000,10395),(2005,10812),(2010,9522),(2020,1152),\\\\ (2030,691),(2040,413),(2050,246),(2060,138),(2070,73),\\\\ (2080,37),(2090,0),(2100,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [6622, 10395, 10812, 9522, 1152, 691, 413, 246, 138, 73, 37, 0, 0])


def global_hfc_emissions_rcp_45_subhfc32(x):
    """
    Real Name: b'global hfc emissions rcp 45 subhfc32'
    Original Eqn: b'([(1990,2100)-(0,96271)],(1990,0),(2000,4000),(2005,10994),(2010,17942),(2020,60642),\\\\ (2030,72035),(2040,80712),(2050,74607),(2060,84086),(2070,93880),\\\\ (2080,96271),(2090,91204),(2100,81227))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [0, 4000, 10994, 17942, 60642, 72035, 80712, 74607, 84086, 93880, 96271, 91204, 81227])


def global_hfc_emissions_rcp_45_subhfc125(x):
    """
    Real Name: b'global hfc emissions rcp 45 subhfc125'
    Original Eqn: b'([(1990,2100)-(186,31762)],(1990,186),(2000,8538),(2005,13759),(2010,17127),(2020,31282),\\\\ (2030,31762),(2040,31380),(2050,30710),(2060,26222),(2070,23990),\\\\ (2080,23536),(2090,23520),(2100,23006))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [186, 8538, 13759, 17127, 31282, 31762, 31380, 30710, 26222, 23990, 23536, 23520, 23006])


def global_hfc_emissions_rcp_45_subhfc143a(x):
    """
    Real Name: b'global hfc emissions rcp 45 subhfc143a'
    Original Eqn: b'([(1990,2100)-(889,46270)],(1990,889),(2000,6234),(2005,12448),(2010,14163),(2020,17666),\\\\ (2030,20459),(2040,23292),(2050,26118),(2060,25539),(2070,28046),\\\\ (2080,33790),(2090,39928),(2100,46270))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [889, 6234, 12448, 14163, 17666, 20459, 23292, 26118, 25539, 28046, 33790, 39928, 46270])


def global_hfc_emissions_rcp_45_subhfc152a(x):
    """
    Real Name: b'global hfc emissions rcp 45 subhfc152a'
    Original Eqn: b'([(1990,2100)-(0,34530)],(1990,12),(2000,15200),(2005,23010),(2010,34530),(2020,0),\\\\ (2030,0),(2040,0),(2050,0),(2060,0),(2070,0),\\\\ (2080,0),(2090,0),(2100,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [12, 15200, 23010, 34530, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def global_hfc_emissions_rcp_45_subhfc227ea(x):
    """
    Real Name: b'global hfc emissions rcp 45 subhfc227ea'
    Original Eqn: b'([(1990,2100)-(0,6212)],(1990,0),(2000,1951),(2005,4890),(2010,6212),(2020,600),\\\\ (2030,258),(2040,257),(2050,89),(2060,31),(2070,22),\\\\ (2080,18),(2090,16),(2100,14))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [0, 1951, 4890, 6212, 600, 258, 257, 89, 31, 22, 18, 16, 14])


def global_hfc_emissions_rcp_45_subhfc245ca(x):
    """
    Real Name: b'global hfc emissions rcp 45 subhfc245ca'
    Original Eqn: b'([(1990,2100)-(0,96916)],(1990,0),(2000,17926),(2005,26888),(2010,48596),(2020,92011),\\\\ (2030,95765),(2040,96916),(2050,95465),(2060,86276),(2070,80878),\\\\ (2080,79272),(2090,81080),(2100,82888))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [0, 17926, 26888, 48596, 92011, 95765, 96916, 95465, 86276, 80878, 79272, 81080, 82888])


def global_hfc_emissions_rcp_45_subhfc4310mee(x):
    """
    Real Name: b'global hfc emissions rcp 45 subhfc4310mee'
    Original Eqn: b'([(1990,2100)-(0.0,305.2)],(1990,1.037),(2000,105.5),(2005,206.6),(2010,305.2),(2020,0.0),\\\\ (2030,0.0),(2040,0.0),(2050,0.0),(2060,0.0),(2070,0.0),\\\\ (2080,0.0),(2090,0.0),(2100,0.0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [1.037, 105.5, 206.6, 305.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])


def global_hfc_emissions_rcp_60_subhfc134a(x):
    """
    Real Name: b'global hfc emissions rcp 60 subhfc134a'
    Original Eqn: b'([(1990,2100)-(1010,177072)],(1990,1010),(2000,75039),(2005,120933),(2010,146301),(2020,153891),\\\\ (2030,159119),(2040,163629),(2050,167105),(2060,171969),(2070,175922),\\\\ (2080,177072),(2090,174566),(2100,170500))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            1010, 75039, 120933, 146301, 153891, 159119, 163629, 167105, 171969, 175922, 177072,
            174566, 170500
        ])


def global_hfc_emissions_rcp_60_subhfc23(x):
    """
    Real Name: b'global hfc emissions rcp 60 subhfc23'
    Original Eqn: b'([(1990,2100)-(0,10812)],(1990,6622),(2000,10395),(2005,10812),(2010,9522),(2020,1152),\\\\ (2030,691),(2040,413),(2050,246),(2060,138),(2070,73),\\\\ (2080,37),(2090,0),(2100,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [6622, 10395, 10812, 9522, 1152, 691, 413, 246, 138, 73, 37, 0, 0])


def global_hfc_emissions_rcp_60_subhfc32(x):
    """
    Real Name: b'global hfc emissions rcp 60 subhfc32'
    Original Eqn: b'([(1990,2100)-(0,96271)],(1990,0),(2000,4000),(2005,10994),(2010,17942),(2020,60642),\\\\ (2030,72035),(2040,80712),(2050,74607),(2060,84086),(2070,93880),\\\\ (2080,96271),(2090,91204),(2100,81227))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [0, 4000, 10994, 17942, 60642, 72035, 80712, 74607, 84086, 93880, 96271, 91204, 81227])


def global_hfc_emissions_rcp_60_subhfc125(x):
    """
    Real Name: b'global hfc emissions rcp 60 subhfc125'
    Original Eqn: b'([(1990,2100)-(186,13759)],(1990,186),(2000,8538),(2005,13759),(2010,8121),(2020,8889),\\\\ (2030,9418),(2040,10006),(2050,10385),(2060,10938),(2070,11420),\\\\ (2080,11739),(2090,11779),(2100,11699))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [186, 8538, 13759, 8121, 8889, 9418, 10006, 10385, 10938, 11420, 11739, 11779, 11699])


def global_hfc_emissions_rcp_60_subhfc143a(x):
    """
    Real Name: b'global hfc emissions rcp 60 subhfc143a'
    Original Eqn: b'([(1990,2100)-(889,12448)],(1990,889),(2000,6234),(2005,12448),(2010,4514),(2020,5554),\\\\ (2030,6059),(2040,6639),(2050,7119),(2060,7758),(2070,8342),\\\\ (2080,8768),(2090,8999),(2100,9099))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [889, 6234, 12448, 4514, 5554, 6059, 6639, 7119, 7758, 8342, 8768, 8999, 9099])


def global_hfc_emissions_rcp_60_subhfc152a(x):
    """
    Real Name: b'global hfc emissions rcp 60 subhfc152a'
    Original Eqn: b'([(1990,2100)-(0,34530)],(1990,12),(2000,15200),(2005,23010),(2010,34530),(2020,0),\\\\ (2030,0),(2040,0),(2050,0),(2060,0),(2070,0),\\\\ (2080,0),(2090,0),(2100,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [12, 15200, 23010, 34530, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def global_hfc_emissions_rcp_60_subhfc227ea(x):
    """
    Real Name: b'global hfc emissions rcp 60 subhfc227ea'
    Original Eqn: b'([(1990,2100)-(0,8820)],(1990,0),(2000,1951),(2005,4890),(2010,8820),(2020,1516),\\\\ (2030,701),(2040,707),(2050,207),(2060,85),(2070,66),\\\\ (2080,51),(2090,38),(2100,27))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [0, 1951, 4890, 8820, 1516, 701, 707, 207, 85, 66, 51, 38, 27])


def global_hfc_emissions_rcp_60_subhfc245ca(x):
    """
    Real Name: b'global hfc emissions rcp 60 subhfc245ca'
    Original Eqn: b'([(1990,2100)-(0,70671)],(1990,0),(2000,17926),(2005,26888),(2010,63231),(2020,65706),\\\\ (2030,67329),(2040,68510),(2050,68946),(2060,70024),(2070,70671),\\\\ (2080,70024),(2090,67758),(2100,65062))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [0, 17926, 26888, 63231, 65706, 67329, 68510, 68946, 70024, 70671, 70024, 67758, 65062])


def global_hfc_emissions_rcp_60_subhfc4310mee(x):
    """
    Real Name: b'global hfc emissions rcp 60 subhfc4310mee'
    Original Eqn: b'([(1990,2100)-(0.0,305.2)],(1990,1.037),(2000,105.5),(2005,206.6),(2010,305.2),(2020,0.0),\\\\ (2030,0.0),(2040,0.0),(2050,0.0),(2060,0.0),(2070,0.0),\\\\ (2080,0.0),(2090,0.0),(2100,0.0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [1.037, 105.5, 206.6, 305.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])


def global_pfc_emissions_rcp_subrcp26(x):
    """
    Real Name: b'global pfc emissions rcp subrcp26'
    Original Eqn: b'([(1990,2100)-(109.21000000000001,12000.1)],(1990,11997.68),(2000,12000.1),(2005,11605.9),(2010,1491.67),(2020,1221.6799999999998),\\\\ (2030,669.49),(2040,505.22),(2050,263.85),(2060,217.60000000000002),(2070,213.77),\\\\ (2080,144.4),(2090,119.57),(2100,109.21000000000001))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            11997.68, 12000.1, 11605.9, 1491.67, 1221.6799999999998, 669.49, 505.22, 263.85,
            217.60000000000002, 213.77, 144.4, 119.57, 109.21000000000001
        ])


def global_pfc_emissions_rcp_subrcp45(x):
    """
    Real Name: b'global pfc emissions rcp subrcp45'
    Original Eqn: b'([(1990,2100)-(8441.5,12000.1)],(1990,11997.68),(2000,12000.1),(2005,11605.9),(2010,10608.599999999999),(2020,8441.5),\\\\ (2030,8445.6),(2040,8663.4),(2050,9135.7),(2060,8904.3),(2070,9003.9),\\\\ (2080,9465.199999999999),(2090,10581.6),(2100,11396.4))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            11997.68, 12000.1, 11605.9, 10608.599999999999, 8441.5, 8445.6, 8663.4, 9135.7, 8904.3,
            9003.9, 9465.199999999999, 10581.6, 11396.4
        ])


def global_pfc_emissions_rcp_subrcp60(x):
    """
    Real Name: b'global pfc emissions rcp subrcp60'
    Original Eqn: b'([(1990,2100)-(11605.9,23833.300000000003)],(1990,11997.68),(2000,12000.1),(2005,11605.9),(2010,22209.7),(2020,22873.5),\\\\ (2030,23524.4),(2040,23833.300000000003),(2050,23712.800000000003),(2060,23725.3),(2070,23459.5),\\\\ (2080,22934.6),(2090,21940.4),(2100,20799.0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            11997.68, 12000.1, 11605.9, 22209.7, 22873.5, 23524.4, 23833.300000000003,
            23712.800000000003, 23725.3, 23459.5, 22934.6, 21940.4, 20799.0
        ])


def global_pfc_emissions_rcp_subrcp85(x):
    """
    Real Name: b'global pfc emissions rcp subrcp85'
    Original Eqn: b'([(1990,2100)-(10634.4,12490.8)],(1990,11997.68),(2000,12000.1),(2005,11605.9),(2010,10634.4),(2020,11774.6),\\\\ (2030,12414.8),(2040,12139.6),(2050,12490.8),(2060,11773.5),(2070,11840.9),\\\\ (2080,11592.800000000001),(2090,11093.199999999999),(2100,10765.4))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            11997.68, 12000.1, 11605.9, 10634.4, 11774.6, 12414.8, 12139.6, 12490.8, 11773.5,
            11840.9, 11592.800000000001, 11093.199999999999, 10765.4
        ])


def global_n2o_anthro_emissions_rcp_subrcp26(x):
    """
    Real Name: b'global n2o anthro emissions rcp subrcp26'
    Original Eqn: b'([(1990,2100)-(5.282301818181819,7.8380018181818185)],(1990,7.585454545454545),(2000,7.4569090909090905),(2005,7.684090909090909),(2010,7.8380018181818185),(2020,7.3633),\\\\ (2030,7.305002727272727),(2040,7.1772018181818185),(2050,6.246602727272728),(2060,5.718102727272727),(2070,5.741100909090909),\\\\ (2080,5.613401818181818),(2090,5.460699999999999),(2100,5.282301818181819))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            7.585454545454545, 7.4569090909090905, 7.684090909090909, 7.8380018181818185, 7.3633,
            7.305002727272727, 7.1772018181818185, 6.246602727272728, 5.718102727272727,
            5.741100909090909, 5.613401818181818, 5.460699999999999, 5.282301818181819
        ])


def global_n2o_anthro_emissions_rcp_subrcp45(x):
    """
    Real Name: b'global n2o anthro emissions rcp subrcp45'
    Original Eqn: b'([(1990,2100)-(7.4569090909090905,8.688699090909092)],(1990,7.585454545454545),(2000,7.4569090909090905),(2005,7.684090909090909),(2010,7.868197272727272),(2020,8.235302727272728),\\\\ (2030,8.57179909090909),(2040,8.688699090909092),(2050,8.5883),(2060,8.5064),(2070,8.35929818181818),\\\\ (2080,8.146797272727273),(2090,8.129297272727271),(2100,8.111701818181817))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            7.585454545454545, 7.4569090909090905, 7.684090909090909, 7.868197272727272,
            8.235302727272728, 8.57179909090909, 8.688699090909092, 8.5883, 8.5064,
            8.35929818181818, 8.146797272727273, 8.129297272727271, 8.111701818181817
        ])


def global_n2o_anthro_emissions_rcp_subrcp60(x):
    """
    Real Name: b'global n2o anthro emissions rcp subrcp60'
    Original Eqn: b'([(1990,2100)-(7.4569090909090905,12.362502727272727)],(1990,7.585454545454545),(2000,7.4569090909090905),(2005,7.684090909090909),(2010,8.18539909090909),(2020,7.929600000000001),\\\\ (2030,8.8179),(2040,9.72830090909091),(2050,10.537099999999999),(2060,11.361101818181817),(2070,12.031199090909091),\\\\ (2080,12.362502727272727),(2090,12.359702727272728),(2100,12.270000909090909))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            7.585454545454545, 7.4569090909090905, 7.684090909090909, 8.18539909090909,
            7.929600000000001, 8.8179, 9.72830090909091, 10.537099999999999, 11.361101818181817,
            12.031199090909091, 12.362502727272727, 12.359702727272728, 12.270000909090909
        ])


def global_n2o_anthro_emissions_rcp_subrcp85(x):
    """
    Real Name: b'global n2o anthro emissions rcp subrcp85'
    Original Eqn: b'([(1990,2100)-(7.4569090909090905,15.77560090909091)],(1990,7.585454545454545),(2000,7.4569090909090905),(2005,7.684090909090909),(2010,8.152702727272727),(2020,9.555299090909092),\\\\ (2030,10.778899090909091),(2040,12.028099999999998),(2050,12.795898181818181),(2060,13.421602727272727),(2070,13.94020090909091),\\\\ (2080,14.5586),(2090,15.292702727272726),(2100,15.77560090909091))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            7.585454545454545, 7.4569090909090905, 7.684090909090909, 8.152702727272727,
            9.555299090909092, 10.778899090909091, 12.028099999999998, 12.795898181818181,
            13.421602727272727, 13.94020090909091, 14.5586, 15.292702727272726, 15.77560090909091
        ])


def global_hfc_emissions_rcp_85_subhfc134a(x):
    """
    Real Name: b'global hfc emissions rcp 85 subhfc134a'
    Original Eqn: b'([(1990,2100)-(1010,703459)],(1990,1010),(2000,75039),(2005,120933),(2010,152513),(2020,265080),\\\\ (2030,333876),(2040,406963),(2050,464903),(2060,508058),(2070,554713),\\\\ (2080,605051),(2090,653132),(2100,703459))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            1010, 75039, 120933, 152513, 265080, 333876, 406963, 464903, 508058, 554713, 605051,
            653132, 703459
        ])


def global_hfc_emissions_rcp_85_subhfc23(x):
    """
    Real Name: b'global hfc emissions rcp 85 subhfc23'
    Original Eqn: b'([(1990,2100)-(0,10812)],(1990,6622),(2000,10395),(2005,10812),(2010,9522),(2020,1152),\\\\ (2030,691),(2040,413),(2050,246),(2060,138),(2070,73),\\\\ (2080,37),(2090,0),(2100,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [6622, 10395, 10812, 9522, 1152, 691, 413, 246, 138, 73, 37, 0, 0])


def global_hfc_emissions_rcp_85_subhfc32(x):
    """
    Real Name: b'global hfc emissions rcp 85 subhfc32'
    Original Eqn: b'([(1990,2100)-(0,96271)],(1990,0),(2000,4000),(2005,10994),(2010,17942),(2020,60642),\\\\ (2030,72035),(2040,80712),(2050,74607),(2060,84086),(2070,93880),\\\\ (2080,96271),(2090,91204),(2100,81227))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [0, 4000, 10994, 17942, 60642, 72035, 80712, 74607, 84086, 93880, 96271, 91204, 81227])


def global_hfc_emissions_rcp_85_subhfc125(x):
    """
    Real Name: b'global hfc emissions rcp 85 subhfc125'
    Original Eqn: b'([(1990,2100)-(186,148304)],(1990,186),(2000,8538),(2005,13759),(2010,34598),(2020,66696),\\\\ (2030,78956),(2040,100250),(2050,116135),(2060,128080),(2070,140714),\\\\ (2080,144726),(2090,147547),(2100,148304))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            186, 8538, 13759, 34598, 66696, 78956, 100250, 116135, 128080, 140714, 144726, 147547,
            148304
        ])


def global_hfc_emissions_rcp_85_subhfc143a(x):
    """
    Real Name: b'global hfc emissions rcp 85 subhfc143a'
    Original Eqn: b'([(1990,2100)-(889,54619)],(1990,889),(2000,6234),(2005,12448),(2010,26537),(2020,35067),\\\\ (2030,38184),(2040,45837),(2050,50207),(2060,52424),(2070,54619),\\\\ (2080,52707),(2090,50177),(2100,46842))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [889, 6234, 12448, 26537, 35067, 38184, 45837, 50207, 52424, 54619, 52707, 50177, 46842])


def global_hfc_emissions_rcp_85_subhfc152a(x):
    """
    Real Name: b'global hfc emissions rcp 85 subhfc152a'
    Original Eqn: b'([(1990,2100)-(0,34530)],(1990,12),(2000,15200),(2005,23010),(2010,34530),(2020,0),\\\\ (2030,0),(2040,0),(2050,0),(2060,0),(2070,0),\\\\ (2080,0),(2090,0),(2100,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [12, 15200, 23010, 34530, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def global_hfc_emissions_rcp_85_subhfc227ea(x):
    """
    Real Name: b'global hfc emissions rcp 85 subhfc227ea'
    Original Eqn: b'([(1990,2100)-(0,11541)],(1990,0),(2000,1951),(2005,4890),(2010,11541),(2020,1159),\\\\ (2030,606),(2040,764),(2050,320),(2060,148),(2070,129),\\\\ (2080,113),(2090,102),(2100,91))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [0, 1951, 4890, 11541, 1159, 606, 764, 320, 148, 129, 113, 102, 91])


def global_hfc_emissions_rcp_85_subhfc245ca(x):
    """
    Real Name: b'global hfc emissions rcp 85 subhfc245ca'
    Original Eqn: b'([(1990,2100)-(0,193765)],(1990,0),(2000,17926),(2005,26888),(2010,85605),(2020,148223),\\\\ (2030,193765),(2040,181171),(2050,161710),(2060,149109),(2070,136491),\\\\ (2080,128236),(2090,120245),(2100,131805))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            0, 17926, 26888, 85605, 148223, 193765, 181171, 161710, 149109, 136491, 128236, 120245,
            131805
        ])


def global_hfc_emissions_rcp_85_subhfc4310mee(x):
    """
    Real Name: b'global hfc emissions rcp 85 subhfc4310mee'
    Original Eqn: b'([(1990,2100)-(0.0,305.2)],(1990,1.037),(2000,105.5),(2005,206.6),(2010,305.2),(2020,0.0),\\\\ (2030,0.0),(2040,0.0),(2050,0.0),(2060,0.0),(2070,0.0),\\\\ (2080,0.0),(2090,0.0),(2100,0.0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1990, 2000, 2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
        [1.037, 105.5, 206.6, 305.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])


def co2x_land_use_change_emissions_exogenous(x):
    """
    Real Name: b'co2x land use change emissions exogenous'
    Original Eqn: b'([(1990,2100)-(3.3,3.3)],(1990,3.3),(1991,3.3),(1992,3.3),(1993,3.3),(1994,3.3),\\\\ (1995,3.3),(1996,3.3),(1997,3.3),(1998,3.3),(1999,3.3),\\\\ (2000,3.3),(2001,3.3),(2002,3.3),(2003,3.3),(2004,3.3),\\\\ (2005,3.3),(2006,3.3),(2007,3.3),(2008,3.3),(2009,3.3),\\\\ (2010,3.3),(2011,3.3),(2012,3.3),(2013,3.3),(2014,3.3),\\\\ (2015,3.3),(2016,3.3),(2017,3.3),(2018,3.3),(2019,3.3),\\\\ (2020,3.3),(2021,3.3),(2022,3.3),(2023,3.3),(2024,3.3),\\\\ (2025,3.3),(2026,3.3),(2027,3.3),(2028,3.3),(2029,3.3),\\\\ (2030,3.3),(2031,3.3),(2032,3.3),(2033,3.3),(2034,3.3),\\\\ (2035,3.3),(2036,3.3),(2037,3.3),(2038,3.3),(2039,3.3),\\\\ (2040,3.3),(2041,3.3),(2042,3.3),(2043,3.3),(2044,3.3),\\\\ (2045,3.3),(2046,3.3),(2047,3.3),(2048,3.3),(2049,3.3),\\\\ (2050,3.3),(2051,3.3),(2052,3.3),(2053,3.3),(2054,3.3),\\\\ (2055,3.3),(2056,3.3),(2057,3.3),(2058,3.3),(2059,3.3),\\\\ (2060,3.3),(2061,3.3),(2062,3.3),(2063,3.3),(2064,3.3),\\\\ (2065,3.3),(2066,3.3),(2067,3.3),(2068,3.3),(2069,3.3),\\\\ (2070,3.3),(2071,3.3),(2072,3.3),(2073,3.3),(2074,3.3),\\\\ (2075,3.3),(2076,3.3),(2077,3.3),(2078,3.3),(2079,3.3),\\\\ (2080,3.3),(2081,3.3),(2082,3.3),(2083,3.3),(2084,3.3),\\\\ (2085,3.3),(2086,3.3),(2087,3.3),(2088,3.3),(2089,3.3),\\\\ (2090,3.3),(2091,3.3),(2092,3.3),(2093,3.3),(2094,3.3),\\\\ (2095,3.3),(2096,3.3),(2097,3.3),(2098,3.3),(2099,3.3),\\\\ (2100,3.3))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
        2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
        2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
        2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
        2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
        2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
        2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
        2095, 2096, 2097, 2098, 2099, 2100
    ], [
        3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3,
        3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3,
        3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3,
        3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3,
        3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3,
        3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3,
        3.3, 3.3, 3.3
    ])


def historic_water_use_by_type_sectors_subagriculture_hunting_forestry_and_fishing_subblue_water(
        x):
    """
    Real Name: b'historic water use by type sectors subagriculture hunting forestry and fishing subblue water'
    Original Eqn: b'([(1995,2009)-(875813247.2645526,1089805524.1143212)],(1995,875813247.2645526),(1996,904894037.0876915),(1997,924992750.6496964),(1998,915744665.9767051),(1999,944131164.2051525),\\\\ (2000,930727079.578415),(2001,931938668.0864745),(2002,932344746.4425533),(2003,947493154.282249),(2004,996930676.2433419),\\\\ (2005,1021318186.6275508),(2006,1046320348.2075572),(2007,1087846995.467034),(2008,1083882800.3577504),(2009,1089805524.1143212))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            875813247.2645526, 904894037.0876915, 924992750.6496964, 915744665.9767051,
            944131164.2051525, 930727079.578415, 931938668.0864745, 932344746.4425533,
            947493154.282249, 996930676.2433419, 1021318186.6275508, 1046320348.2075572,
            1087846995.467034, 1083882800.3577504, 1089805524.1143212
        ])


def historic_water_use_by_type_sectors_subagriculture_hunting_forestry_and_fishing_subgreen_water(
        x):
    """
    Real Name: b'historic water use by type sectors subagriculture hunting forestry and fishing subgreen water'
    Original Eqn: b'([(1995,2009)-(5977864528.807236,8227010892.160533)],(1995,5977864528.807236),(1996,6326270468.179815),(1997,6354728879.821534),(1998,6327130943.334498),(1999,6425843571.417871),\\\\ (2000,6435228369.735994),(2001,6691165889.684004),(2002,6589938054.514836),(2003,6947913764.896528),(2004,7281996193.570124),\\\\ (2005,7460347849.916722),(2006,7555367969.278706),(2007,7762014616.151556),(2008,8227010892.160533),(2009,8086731839.894531))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            5977864528.807236, 6326270468.179815, 6354728879.821534, 6327130943.334498,
            6425843571.417871, 6435228369.735994, 6691165889.684004, 6589938054.514836,
            6947913764.896528, 7281996193.570124, 7460347849.916722, 7555367969.278706,
            7762014616.151556, 8227010892.160533, 8086731839.894531
        ])


def historic_water_use_by_type_sectors_subagriculture_hunting_forestry_and_fishing_subgray_water(
        x):
    """
    Real Name: b'historic water use by type sectors subagriculture hunting forestry and fishing subgray water'
    Original Eqn: b'([(1995,2009)-(651138685.02772,909023540.0702205)],(1995,651138685.02772),(1996,691880700.1998262),(1997,699269186.6198692),(1998,708256791.9608455),(1999,717409269.4949044),\\\\ (2000,720460108.3121521),(2001,722912474.1009471),(2002,715695871.758256),(2003,742812021.0725459),(2004,801433146.1337559),\\\\ (2005,811655677.0531788),(2006,816310961.6172218),(2007,869449582.2730234),(2008,909023540.0702205),(2009,901373091.6981382))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            651138685.02772, 691880700.1998262, 699269186.6198692, 708256791.9608455,
            717409269.4949044, 720460108.3121521, 722912474.1009471, 715695871.758256,
            742812021.0725459, 801433146.1337559, 811655677.0531788, 816310961.6172218,
            869449582.2730234, 909023540.0702205, 901373091.6981382
        ])


def historic_water_use_by_type_sectors_submining_and_quarrying_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors submining and quarrying subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_submining_and_quarrying_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors submining and quarrying subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_submining_and_quarrying_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors submining and quarrying subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subfood_beverages_and_tobacco_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subfood beverages and tobacco subblue water'
    Original Eqn: b'([(1995,2009)-(6043346.010340913,8536196.648654146)],(1995,6043346.010340913),(1996,6107439.559879856),(1997,6231315.252456846),(1998,6339487.778081499),(1999,6488077.177998222),\\\\ (2000,6674527.489274913),(2001,6781761.790437164),(2002,6776312.793257868),(2003,7035610.110967136),(2004,7218477.619853792),\\\\ (2005,7606922.768967351),(2006,8030604.742224609),(2007,8450094.227811394),(2008,8536196.648654146),(2009,8480932.359374203))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            6043346.010340913, 6107439.559879856, 6231315.252456846, 6339487.778081499,
            6488077.177998222, 6674527.489274913, 6781761.790437164, 6776312.793257868,
            7035610.110967136, 7218477.619853792, 7606922.768967351, 8030604.742224609,
            8450094.227811394, 8536196.648654146, 8480932.359374203
        ])


def historic_water_use_by_type_sectors_subfood_beverages_and_tobacco_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subfood beverages and tobacco subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subfood_beverages_and_tobacco_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subfood beverages and tobacco subgray water'
    Original Eqn: b'([(1995,2009)-(51655857.26464701,83634337.0023973)],(1995,51655857.26464701),(1996,52862894.43220483),(1997,53336700.83082201),(1998,54331507.947123885),(1999,56042281.21474628),\\\\ (2000,58336484.49223001),(2001,59904004.36978328),(2002,60705637.62379336),(2003,63747311.465051435),(2004,66466864.99645599),\\\\ (2005,70909464.18281865),(2006,76668931.17553678),(2007,81981026.17319132),(2008,83634337.0023973),(2009,83154340.2282583))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            51655857.26464701, 52862894.43220483, 53336700.83082201, 54331507.947123885,
            56042281.21474628, 58336484.49223001, 59904004.36978328, 60705637.62379336,
            63747311.465051435, 66466864.99645599, 70909464.18281865, 76668931.17553678,
            81981026.17319132, 83634337.0023973, 83154340.2282583
        ])


def historic_water_use_by_type_sectors_subtextiles_and_textile_products_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subtextiles and textile products subblue water'
    Original Eqn: b'([(1995,2009)-(2854776.157266739,3210798.2505277228)],(1995,2856810.350862667),(1996,2854776.157266739),(1997,2901687.0169803756),(1998,2880559.77255534),(1999,2957620.829265346),\\\\ (2000,3073680.5060626315),(2001,3013728.994760872),(2002,2946964.85093716),(2003,2928631.5051592784),(2004,2916380.1663147463),\\\\ (2005,2980441.0619652485),(2006,3119208.5928101963),(2007,3184617.64981006),(2008,3210798.2505277228),(2009,2999361.432855909))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            2856810.350862667, 2854776.157266739, 2901687.0169803756, 2880559.77255534,
            2957620.829265346, 3073680.5060626315, 3013728.994760872, 2946964.85093716,
            2928631.5051592784, 2916380.1663147463, 2980441.0619652485, 3119208.5928101963,
            3184617.64981006, 3210798.2505277228, 2999361.432855909
        ])


def historic_water_use_by_type_sectors_subtextiles_and_textile_products_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subtextiles and textile products subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subtextiles_and_textile_products_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subtextiles and textile products subgray water'
    Original Eqn: b'([(1995,2009)-(25563592.7501675,37100882.90252638)],(1995,25563592.7501675),(1996,25711087.323870335),(1997,25971948.364553403),(1998,26021484.500666298),(1999,27190028.760726564),\\\\ (2000,29238393.955100752),(2001,29542595.943647943),(2002,29370724.629816152),(2003,29829798.94473654),(2004,30298651.17885314),\\\\ (2005,31383177.898448173),(2006,34160667.329453066),(2007,35965725.93976969),(2008,37100882.90252638),(2009,35400467.43615428))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            25563592.7501675, 25711087.323870335, 25971948.364553403, 26021484.500666298,
            27190028.760726564, 29238393.955100752, 29542595.943647943, 29370724.629816152,
            29829798.94473654, 30298651.17885314, 31383177.898448173, 34160667.329453066,
            35965725.93976969, 37100882.90252638, 35400467.43615428
        ])


def historic_water_use_by_type_sectors_subleather_leather_and_footwear_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subleather leather and footwear subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subleather_leather_and_footwear_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subleather leather and footwear subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subleather_leather_and_footwear_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subleather leather and footwear subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subwood_and_products_of_wood_and_cork_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subwood and products of wood and cork subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subwood_and_products_of_wood_and_cork_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subwood and products of wood and cork subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subwood_and_products_of_wood_and_cork_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subwood and products of wood and cork subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subpulp_paper_printing_and_publishing_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subpulp paper printing and publishing subblue water'
    Original Eqn: b'([(1995,2009)-(5511624.242226528,9148944.748788334)],(1995,5511624.242226528),(1996,5610128.6319932565),(1997,5894966.26947698),(1998,6000030.516985005),(1999,6222288.677616086),\\\\ (2000,6436607.354004963),(2001,6460144.200315665),(2002,6524269.319553448),(2003,6767396.801711854),(2004,7286483.748585307),\\\\ (2005,7787246.9237831365),(2006,8120940.267707023),(2007,8869715.657402454),(2008,9148944.748788334),(2009,8944824.384443942))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            5511624.242226528, 5610128.6319932565, 5894966.26947698, 6000030.516985005,
            6222288.677616086, 6436607.354004963, 6460144.200315665, 6524269.319553448,
            6767396.801711854, 7286483.748585307, 7787246.9237831365, 8120940.267707023,
            8869715.657402454, 9148944.748788334, 8944824.384443942
        ])


def historic_water_use_by_type_sectors_subpulp_paper_printing_and_publishing_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subpulp paper printing and publishing subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subpulp_paper_printing_and_publishing_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subpulp paper printing and publishing subgray water'
    Original Eqn: b'([(1995,2009)-(48897115.23912518,97617633.19816479)],(1995,48897115.23912518),(1996,50260682.37775563),(1997,52816750.33501838),(1998,54155133.34918979),(1999,55703573.025912896),\\\\ (2000,57688494.002147324),(2001,59068727.81800082),(2002,60206387.40918563),(2003,64309826.15065473),(2004,71263540.40019777),\\\\ (2005,78230874.08060494),(2006,83112055.0121726),(2007,93210711.4945201),(2008,97617633.19816479),(2009,97163113.10806447))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            48897115.23912518, 50260682.37775563, 52816750.33501838, 54155133.34918979,
            55703573.025912896, 57688494.002147324, 59068727.81800082, 60206387.40918563,
            64309826.15065473, 71263540.40019777, 78230874.08060494, 83112055.0121726,
            93210711.4945201, 97617633.19816479, 97163113.10806447
        ])


def historic_water_use_by_type_sectors_subcoke_refined_petroleum_and_nuclear_fuel_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subcoke refined petroleum and nuclear fuel subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subcoke_refined_petroleum_and_nuclear_fuel_subgreen_water(
        x):
    """
    Real Name: b'historic water use by type sectors subcoke refined petroleum and nuclear fuel subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subcoke_refined_petroleum_and_nuclear_fuel_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subcoke refined petroleum and nuclear fuel subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subchemicals_and_chemical_products_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subchemicals and chemical products subblue water'
    Original Eqn: b'([(1995,2009)-(7734732.538293498,15460495.429674448)],(1995,7734732.538293498),(1996,8110356.463576764),(1997,8617195.393249623),(1998,8801239.349758193),(1999,9279683.973082485),\\\\ (2000,9609181.829644354),(2001,9829776.68557161),(2002,10258003.28702495),(2003,10981765.021278488),(2004,11593938.030353935),\\\\ (2005,12137059.46891245),(2006,13409295.443929115),(2007,15145125.92085762),(2008,15327167.438895136),(2009,15460495.429674448))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            7734732.538293498, 8110356.463576764, 8617195.393249623, 8801239.349758193,
            9279683.973082485, 9609181.829644354, 9829776.68557161, 10258003.28702495,
            10981765.021278488, 11593938.030353935, 12137059.46891245, 13409295.443929115,
            15145125.92085762, 15327167.438895136, 15460495.429674448
        ])


def historic_water_use_by_type_sectors_subchemicals_and_chemical_products_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subchemicals and chemical products subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subchemicals_and_chemical_products_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subchemicals and chemical products subgray water'
    Original Eqn: b'([(1995,2009)-(71068432.36246447,166237032.513937)],(1995,71068432.36246447),(1996,75395851.84929058),(1997,80334154.65319662),(1998,82242025.84663436),(1999,87528854.33887208),\\\\ (2000,90074912.93474054),(2001,92784808.07015377),(2002,97084569.01069757),(2003,106104833.58081052),(2004,113534645.4027672),\\\\ (2005,120748635.46432692),(2006,135833134.2780234),(2007,155394042.57533154),(2008,159381258.95667988),(2009,166237032.513937))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            71068432.36246447, 75395851.84929058, 80334154.65319662, 82242025.84663436,
            87528854.33887208, 90074912.93474054, 92784808.07015377, 97084569.01069757,
            106104833.58081052, 113534645.4027672, 120748635.46432692, 135833134.2780234,
            155394042.57533154, 159381258.95667988, 166237032.513937
        ])


def historic_water_use_by_type_sectors_subrubber_and_plastics_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subrubber and plastics subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subrubber_and_plastics_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subrubber and plastics subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subrubber_and_plastics_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subrubber and plastics subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subother_non_metalic_mineral_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subother non metalic mineral subblue water'
    Original Eqn: b'([(1995,2009)-(1590162.5759721335,2590473.7161120963)],(1995,1654566.634922395),(1996,1590162.5759721335),(1997,1640599.8033098953),(1998,1660898.6521802363),(1999,1743683.4098575562),\\\\ (2000,1838831.196324295),(2001,1838622.3294739733),(2002,1861957.6590920282),(2003,1947023.5698884313),(2004,2083364.0880357167),\\\\ (2005,2217032.3652505176),(2006,2405708.799250856),(2007,2590473.7161120963),(2008,2569340.0914561283),(2009,2249144.2706229854))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1654566.634922395, 1590162.5759721335, 1640599.8033098953, 1660898.6521802363,
            1743683.4098575562, 1838831.196324295, 1838622.3294739733, 1861957.6590920282,
            1947023.5698884313, 2083364.0880357167, 2217032.3652505176, 2405708.799250856,
            2590473.7161120963, 2569340.0914561283, 2249144.2706229854
        ])


def historic_water_use_by_type_sectors_subother_non_metalic_mineral_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subother non metalic mineral subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subother_non_metalic_mineral_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subother non metalic mineral subgray water'
    Original Eqn: b'([(1995,2009)-(15345608.327496383,27998207.41698554)],(1995,17130547.550654273),(1996,15345608.327496383),(1997,15651683.18433788),(1998,15790368.092607673),(1999,16672621.245390099),\\\\ (2000,17785698.253186226),(2001,17969133.34450238),(2002,18224313.985377964),(2003,19290777.950024813),(2004,20928856.582539964),\\\\ (2005,22586528.338676754),(2006,24950712.573254433),(2007,27761861.569189362),(2008,27998207.41698554),(2009,24748256.38490064))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            17130547.550654273, 15345608.327496383, 15651683.18433788, 15790368.092607673,
            16672621.245390099, 17785698.253186226, 17969133.34450238, 18224313.985377964,
            19290777.950024813, 20928856.582539964, 22586528.338676754, 24950712.573254433,
            27761861.569189362, 27998207.41698554, 24748256.38490064
        ])


def historic_water_use_by_type_sectors_subbasic_metals_and_fabricated_metal_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subbasic metals and fabricated metal subblue water'
    Original Eqn: b'([(1995,2009)-(7855774.10285661,16902295.385492112)],(1995,7855774.10285661),(1996,8350044.151949255),(1997,8906036.686630167),(1998,9087008.246610556),(1999,9229458.25560122),\\\\ (2000,9602324.748112699),(2001,9653785.120265555),(2002,9840745.03145729),(2003,10632836.936686257),(2004,11443296.575238016),\\\\ (2005,12285425.072026506),(2006,14112373.721374692),(2007,15594910.642490087),(2008,16024172.185162164),(2009,16902295.385492112))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            7855774.10285661, 8350044.151949255, 8906036.686630167, 9087008.246610556,
            9229458.25560122, 9602324.748112699, 9653785.120265555, 9840745.03145729,
            10632836.936686257, 11443296.575238016, 12285425.072026506, 14112373.721374692,
            15594910.642490087, 16024172.185162164, 16902295.385492112
        ])


def historic_water_use_by_type_sectors_subbasic_metals_and_fabricated_metal_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subbasic metals and fabricated metal subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subbasic_metals_and_fabricated_metal_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subbasic metals and fabricated metal subgray water'
    Original Eqn: b'([(1995,2009)-(78961833.92970943,199831153.0006033)],(1995,78961833.92970943),(1996,85226477.45238905),(1997,91545664.33299291),(1998,92503264.48035632),(1999,94198400.7286549),\\\\ (2000,98610019.14240205),(2001,101395939.04939361),(2002,104347100.2117023),(2003,115246353.53713316),(2004,124513779.27993722),\\\\ (2005,134812696.04307225),(2006,158261330.94802743),(2007,176740416.86429477),(2008,182974315.60517973),(2009,199831153.0006033))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            78961833.92970943, 85226477.45238905, 91545664.33299291, 92503264.48035632,
            94198400.7286549, 98610019.14240205, 101395939.04939361, 104347100.2117023,
            115246353.53713316, 124513779.27993722, 134812696.04307225, 158261330.94802743,
            176740416.86429477, 182974315.60517973, 199831153.0006033
        ])


def historic_water_use_by_type_sectors_submachinery_nec_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors submachinery nec subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_submachinery_nec_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors submachinery nec subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_submachinery_nec_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors submachinery nec subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subelectrical_and_optical_equipment_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subelectrical and optical equipment subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subelectrical_and_optical_equipment_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subelectrical and optical equipment subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subelectrical_and_optical_equipment_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subelectrical and optical equipment subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subtransport_equipment_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subtransport equipment subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subtransport_equipment_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subtransport equipment subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subtransport_equipment_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subtransport equipment subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_submanufacturing_nec_recycling_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors submanufacturing nec recycling subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_submanufacturing_nec_recycling_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors submanufacturing nec recycling subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_submanufacturing_nec_recycling_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors submanufacturing nec recycling subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subelectricity_gas_and_water_supply_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subelectricity gas and water supply subblue water'
    Original Eqn: b'([(1995,2009)-(607162225.3108122,796153484.495191)],(1995,607162225.3108122),(1996,615597597.9583583),(1997,623203677.641867),(1998,625679543.8123907),(1999,627354545.2912184),\\\\ (2000,641460276.1566416),(2001,626668036.3627105),(2002,643153598.0795102),(2003,646502573.9967462),(2004,688040368.768368),\\\\ (2005,717875854.2415878),(2006,743508087.9977753),(2007,753149076.7904673),(2008,783692162.3416656),(2009,796153484.495191))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            607162225.3108122, 615597597.9583583, 623203677.641867, 625679543.8123907,
            627354545.2912184, 641460276.1566416, 626668036.3627105, 643153598.0795102,
            646502573.9967462, 688040368.768368, 717875854.2415878, 743508087.9977753,
            753149076.7904673, 783692162.3416656, 796153484.495191
        ])


def historic_water_use_by_type_sectors_subelectricity_gas_and_water_supply_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subelectricity gas and water supply subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subelectricity_gas_and_water_supply_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subelectricity gas and water supply subgray water'
    Original Eqn: b'([(1995,2009)-(710.306571369756,1308.7833790691557)],(1995,710.306571369756),(1996,754.2628326728772),(1997,742.0653879267878),(1998,749.1084056240832),(1999,892.0169591297997),\\\\ (2000,1023.429239248635),(2001,1112.8693605831934),(2002,953.3207382598795),(2003,987.97183427495),(2004,1005.9798005761447),\\\\ (2005,1106.5754122679002),(2006,1127.603871083194),(2007,1203.2707308215072),(2008,1308.7833790691557),(2009,1188.776385567763))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            710.306571369756, 754.2628326728772, 742.0653879267878, 749.1084056240832,
            892.0169591297997, 1023.429239248635, 1112.8693605831934, 953.3207382598795,
            987.97183427495, 1005.9798005761447, 1106.5754122679002, 1127.603871083194,
            1203.2707308215072, 1308.7833790691557, 1188.776385567763
        ])


def historic_water_use_by_type_sectors_subconstruction_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subconstruction subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subconstruction_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subconstruction subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subconstruction_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subconstruction subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel_subblue_water(
        x):
    """
    Real Name: b'historic water use by type sectors subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel_subgreen_water(
        x):
    """
    Real Name: b'historic water use by type sectors subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel_subgray_water(
        x):
    """
    Real Name: b'historic water use by type sectors subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles_subblue_water(
        x):
    """
    Real Name: b'historic water use by type sectors subwholesale trade and commissions trade except of motor vehicles and motorcycles subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles_subgreen_water(
        x):
    """
    Real Name: b'historic water use by type sectors subwholesale trade and commissions trade except of motor vehicles and motorcycles subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles_subgray_water(
        x):
    """
    Real Name: b'historic water use by type sectors subwholesale trade and commissions trade except of motor vehicles and motorcycles subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods_subblue_water(
        x):
    """
    Real Name: b'historic water use by type sectors subretail trade except of motor vehicles and motorcycles repair of household goods subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods_subgreen_water(
        x):
    """
    Real Name: b'historic water use by type sectors subretail trade except of motor vehicles and motorcycles repair of household goods subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods_subgray_water(
        x):
    """
    Real Name: b'historic water use by type sectors subretail trade except of motor vehicles and motorcycles repair of household goods subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subhotels_and_restaurants_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subhotels and restaurants subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subhotels_and_restaurants_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subhotels and restaurants subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subhotels_and_restaurants_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subhotels and restaurants subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subinland_transport_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subinland transport subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subinland_transport_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subinland transport subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subinland_transport_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subinland transport subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subwater_transport_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subwater transport subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subwater_transport_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subwater transport subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subwater_transport_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subwater transport subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subair_transport_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subair transport subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subair_transport_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subair transport subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subair_transport_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subair transport subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies_subblue_water(
        x):
    """
    Real Name: b'historic water use by type sectors subother supporting and auxiliary transport activities activities of travel agencies subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies_subgreen_water(
        x):
    """
    Real Name: b'historic water use by type sectors subother supporting and auxiliary transport activities activities of travel agencies subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies_subgray_water(
        x):
    """
    Real Name: b'historic water use by type sectors subother supporting and auxiliary transport activities activities of travel agencies subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subpost_and_telecommunications_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subpost and telecommunications subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subpost_and_telecommunications_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subpost and telecommunications subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subpost_and_telecommunications_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subpost and telecommunications subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subfinancial_intermediation_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subfinancial intermediation subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subfinancial_intermediation_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subfinancial intermediation subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subfinancial_intermediation_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subfinancial intermediation subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subreal_estate_activities_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subreal estate activities subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subreal_estate_activities_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subreal estate activities subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subreal_estate_activities_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subreal estate activities subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subrenting_od_meq_and_other_business_activities_subblue_water(
        x):
    """
    Real Name: b'historic water use by type sectors subrenting od meq and other business activities subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subrenting_od_meq_and_other_business_activities_subgreen_water(
        x):
    """
    Real Name: b'historic water use by type sectors subrenting od meq and other business activities subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subrenting_od_meq_and_other_business_activities_subgray_water(
        x):
    """
    Real Name: b'historic water use by type sectors subrenting od meq and other business activities subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subpublic_admin_and_defence_compulsory_social_security_subblue_water(
        x):
    """
    Real Name: b'historic water use by type sectors subpublic admin and defence compulsory social security subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subpublic_admin_and_defence_compulsory_social_security_subgreen_water(
        x):
    """
    Real Name: b'historic water use by type sectors subpublic admin and defence compulsory social security subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subpublic_admin_and_defence_compulsory_social_security_subgray_water(
        x):
    """
    Real Name: b'historic water use by type sectors subpublic admin and defence compulsory social security subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subeducation_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subeducation subblue water'
    Original Eqn: b'([(1995,2009)-(76.6143535870801,103.40059652299276)],(1995,76.6143535870801),(1996,79.34623374471475),(1997,82.74315426919267),(1998,86.60018236958769),(1999,88.81640750628509),\\\\ (2000,91.5554932218082),(2001,94.33025511832513),(2002,94.70105391409032),(2003,94.3337661223288),(2004,95.21263900327992),\\\\ (2005,97.5347049156145),(2006,99.25377697935946),(2007,101.70574369564017),(2008,103.40059652299276),(2009,102.36765147374021))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            76.6143535870801, 79.34623374471475, 82.74315426919267, 86.60018236958769,
            88.81640750628509, 91.5554932218082, 94.33025511832513, 94.70105391409032,
            94.3337661223288, 95.21263900327992, 97.5347049156145, 99.25377697935946,
            101.70574369564017, 103.40059652299276, 102.36765147374021
        ])


def historic_water_use_by_type_sectors_subeducation_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subeducation subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subeducation_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subeducation subgray water'
    Original Eqn: b'([(1995,2009)-(496.9685861399711,685.5124161992544)],(1995,496.9685861399711),(1996,515.9863152658087),(1997,542.7051409128488),(1998,567.8331594647725),(1999,580.9641029914214),\\\\ (2000,599.3933841293607),(2001,618.3976816357925),(2002,614.250476965647),(2003,610.3358923461076),(2004,618.1373130639456),\\\\ (2005,635.5348895403408),(2006,650.8709307587583),(2007,669.8483452440975),(2008,685.5124161992544),(2009,682.9142555743476))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            496.9685861399711, 515.9863152658087, 542.7051409128488, 567.8331594647725,
            580.9641029914214, 599.3933841293607, 618.3976816357925, 614.250476965647,
            610.3358923461076, 618.1373130639456, 635.5348895403408, 650.8709307587583,
            669.8483452440975, 685.5124161992544, 682.9142555743476
        ])


def historic_water_use_by_type_sectors_subhealth_and_social_work_subblue_water(x):
    """
    Real Name: b'historic water use by type sectors subhealth and social work subblue water'
    Original Eqn: b'([(1995,2009)-(76.30793913643964,120.75875434878486)],(1995,76.30793913643964),(1996,79.33184648263418),(1997,82.11238440547405),(1998,84.46557983761329),(1999,85.424442590247),\\\\ (2000,87.71292129723375),(2001,90.96604819244752),(2002,93.66510642204236),(2003,96.9050496971886),(2004,100.92182736591627),\\\\ (2005,105.6690725067325),(2006,109.8840478410611),(2007,114.28047474812212),(2008,118.80052338649232),(2009,120.75875434878486))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            76.30793913643964, 79.33184648263418, 82.11238440547405, 84.46557983761329,
            85.424442590247, 87.71292129723375, 90.96604819244752, 93.66510642204236,
            96.9050496971886, 100.92182736591627, 105.6690725067325, 109.8840478410611,
            114.28047474812212, 118.80052338649232, 120.75875434878486
        ])


def historic_water_use_by_type_sectors_subhealth_and_social_work_subgreen_water(x):
    """
    Real Name: b'historic water use by type sectors subhealth and social work subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subhealth_and_social_work_subgray_water(x):
    """
    Real Name: b'historic water use by type sectors subhealth and social work subgray water'
    Original Eqn: b'([(1995,2009)-(498.00510336560285,800.4534980971242)],(1995,498.00510336560285),(1996,523.0619302940098),(1997,545.9183135386813),(1998,561.0344368859685),(1999,561.7726508912538),\\\\ (2000,574.7043789472302),(2001,592.1948291578987),(2002,600.1201990965885),(2003,619.6680710031076),(2004,651.2485894719183),\\\\ (2005,685.2735760904864),(2006,719.7429175278176),(2007,754.7382987308483),(2008,788.5680762455889),(2009,800.4534980971242))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            498.00510336560285, 523.0619302940098, 545.9183135386813, 561.0344368859685,
            561.7726508912538, 574.7043789472302, 592.1948291578987, 600.1201990965885,
            619.6680710031076, 651.2485894719183, 685.2735760904864, 719.7429175278176,
            754.7382987308483, 788.5680762455889, 800.4534980971242
        ])


def historic_water_use_by_type_sectors_subother_community_social_and_persona_services_subblue_water(
        x):
    """
    Real Name: b'historic water use by type sectors subother community social and persona services subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subother_community_social_and_persona_services_subgreen_water(
        x):
    """
    Real Name: b'historic water use by type sectors subother community social and persona services subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subother_community_social_and_persona_services_subgray_water(
        x):
    """
    Real Name: b'historic water use by type sectors subother community social and persona services subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subprivate_households_with_employed_persons_subblue_water(
        x):
    """
    Real Name: b'historic water use by type sectors subprivate households with employed persons subblue water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subprivate_households_with_employed_persons_subgreen_water(
        x):
    """
    Real Name: b'historic water use by type sectors subprivate households with employed persons subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_sectors_subprivate_households_with_employed_persons_subgray_water(
        x):
    """
    Real Name: b'historic water use by type sectors subprivate households with employed persons subgray water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_for_households_subblue_water(x):
    """
    Real Name: b'historic water use by type for households subblue water'
    Original Eqn: b'([(1995,2009)-(39538356.485179946,45822308.62191979)],(1995,39538356.485179946),(1996,40003162.75187955),(1997,40466184.14733441),(1998,40924633.120817594),(1999,41376268.09075577),\\\\ (2000,41823191.05993492),(2001,42260849.06568138),(2002,42686651.51102832),(2003,43121548.65589165),(2004,43560417.95149626),\\\\ (2005,44006108.64518016),(2006,44454875.508882836),(2007,44909551.291070096),(2008,45369429.80659038),(2009,45822308.62191979))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            39538356.485179946, 40003162.75187955, 40466184.14733441, 40924633.120817594,
            41376268.09075577, 41823191.05993492, 42260849.06568138, 42686651.51102832,
            43121548.65589165, 43560417.95149626, 44006108.64518016, 44454875.508882836,
            44909551.291070096, 45369429.80659038, 45822308.62191979
        ])


def historic_water_use_by_type_for_households_subgreen_water(x):
    """
    Real Name: b'historic water use by type for households subgreen water'
    Original Eqn: b'([(1995,2009)-(0,0)],(1995,0),(1996,0),(1997,0),(1998,0),(1999,0),\\\\ (2000,0),(2001,0),(2002,0),(2003,0),(2004,0),\\\\ (2005,0),(2006,0),(2007,0),(2008,0),(2009,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_water_use_by_type_for_households_subgray_water(x):
    """
    Real Name: b'historic water use by type for households subgray water'
    Original Eqn: b'([(1995,2009)-(264130629.8114975,309178818.896767)],(1995,264130629.8114975),(1996,267488985.0987483),(1997,270826457.46761274),(1998,274129799.01614493),(1999,277383979.13562506),\\\\ (2000,280593543.68102324),(2001,283734749.1645494),(2002,286787722.45889896),(2003,289890646.75197935),(2004,293020768.3420327),\\\\ (2005,296195891.04128563),(2006,299401950.43797207),(2007,302651145.94000876),(2008,305928199.5909348),(2009,309178818.896767))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            264130629.8114975, 267488985.0987483, 270826457.46761274, 274129799.01614493,
            277383979.13562506, 280593543.68102324, 283734749.1645494, 286787722.45889896,
            289890646.75197935, 293020768.3420327, 296195891.04128563, 299401950.43797207,
            302651145.94000876, 305928199.5909348, 309178818.896767
        ])


def gdppc_annual_growth_ssp2(x):
    """
    Real Name: b'gdppc annual growth ssp2'
    Original Eqn: b'([(2015,2100)-(0.021284366520702536,0.03857969744680689)],(2015,0.03857969744680689),(2016,0.03857969744680689),(2017,0.03857969744680689),(2018,0.03857969744680689),(2019,0.03857969744680689),\\\\ (2020,0.03857969744680689),(2021,0.035236454832179964),(2022,0.035236454832179964),(2023,0.035236454832179964),(2024,0.035236454832179964),\\\\ (2025,0.035236454832179964),(2026,0.035236454832179964),(2027,0.035236454832179964),(2028,0.035236454832179964),(2029,0.035236454832179964),\\\\ (2030,0.035236454832179964),(2031,0.026075635629570826),(2032,0.026075635629570826),(2033,0.026075635629570826),(2034,0.026075635629570826),\\\\ (2035,0.026075635629570826),(2036,0.026075635629570826),(2037,0.026075635629570826),(2038,0.026075635629570826),(2039,0.026075635629570826),\\\\ (2040,0.026075635629570826),(2041,0.022743789939873027),(2042,0.022743789939873027),(2043,0.022743789939873027),(2044,0.022743789939873027),\\\\ (2045,0.022743789939873027),(2046,0.022743789939873027),(2047,0.022743789939873027),(2048,0.022743789939873027),(2049,0.022743789939873027),\\\\ (2050,0.022743789939873027),(2051,0.021843416743548616),(2052,0.021843416743548616),(2053,0.021843416743548616),(2054,0.021843416743548616),\\\\ (2055,0.021843416743548616),(2056,0.021843416743548616),(2057,0.021843416743548616),(2058,0.021843416743548616),(2059,0.021843416743548616),\\\\ (2060,0.021843416743548616),(2061,0.022653169341066315),(2062,0.022653169341066315),(2063,0.022653169341066315),(2064,0.022653169341066315),\\\\ (2065,0.022653169341066315),(2066,0.022653169341066315),(2067,0.022653169341066315),(2068,0.022653169341066315),(2069,0.022653169341066315),\\\\ (2070,0.022653169341066315),(2071,0.022024412912428737),(2072,0.022024412912428737),(2073,0.022024412912428737),(2074,0.022024412912428737),\\\\ (2075,0.022024412912428737),(2076,0.022024412912428737),(2077,0.022024412912428737),(2078,0.022024412912428737),(2079,0.022024412912428737),\\\\ (2080,0.022024412912428737),(2081,0.021875392173132502),(2082,0.021875392173132502),(2083,0.021875392173132502),(2084,0.021875392173132502),\\\\ (2085,0.021875392173132502),(2086,0.021875392173132502),(2087,0.021875392173132502),(2088,0.021875392173132502),(2089,0.021875392173132502),\\\\ (2090,0.021875392173132502),(2091,0.021284366520702536),(2092,0.021284366520702536),(2093,0.021284366520702536),(2094,0.021284366520702536),\\\\ (2095,0.021284366520702536),(2096,0.021284366520702536),(2097,0.021284366520702536),(2098,0.021284366520702536),(2099,0.021284366520702536),\\\\ (2100,0.021284366520702536))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        0.03857969744680689, 0.03857969744680689, 0.03857969744680689, 0.03857969744680689,
        0.03857969744680689, 0.03857969744680689, 0.035236454832179964, 0.035236454832179964,
        0.035236454832179964, 0.035236454832179964, 0.035236454832179964, 0.035236454832179964,
        0.035236454832179964, 0.035236454832179964, 0.035236454832179964, 0.035236454832179964,
        0.026075635629570826, 0.026075635629570826, 0.026075635629570826, 0.026075635629570826,
        0.026075635629570826, 0.026075635629570826, 0.026075635629570826, 0.026075635629570826,
        0.026075635629570826, 0.026075635629570826, 0.022743789939873027, 0.022743789939873027,
        0.022743789939873027, 0.022743789939873027, 0.022743789939873027, 0.022743789939873027,
        0.022743789939873027, 0.022743789939873027, 0.022743789939873027, 0.022743789939873027,
        0.021843416743548616, 0.021843416743548616, 0.021843416743548616, 0.021843416743548616,
        0.021843416743548616, 0.021843416743548616, 0.021843416743548616, 0.021843416743548616,
        0.021843416743548616, 0.021843416743548616, 0.022653169341066315, 0.022653169341066315,
        0.022653169341066315, 0.022653169341066315, 0.022653169341066315, 0.022653169341066315,
        0.022653169341066315, 0.022653169341066315, 0.022653169341066315, 0.022653169341066315,
        0.022024412912428737, 0.022024412912428737, 0.022024412912428737, 0.022024412912428737,
        0.022024412912428737, 0.022024412912428737, 0.022024412912428737, 0.022024412912428737,
        0.022024412912428737, 0.022024412912428737, 0.021875392173132502, 0.021875392173132502,
        0.021875392173132502, 0.021875392173132502, 0.021875392173132502, 0.021875392173132502,
        0.021875392173132502, 0.021875392173132502, 0.021875392173132502, 0.021875392173132502,
        0.021284366520702536, 0.021284366520702536, 0.021284366520702536, 0.021284366520702536,
        0.021284366520702536, 0.021284366520702536, 0.021284366520702536, 0.021284366520702536,
        0.021284366520702536, 0.021284366520702536
    ])


def pop_ssp2(x):
    """
    Real Name: b'pop ssp2'
    Original Eqn: b'([(2010,2110)-(6867.39,9456.88)],(2010,6867.39),(2020,7611.25),(2030,8261.99),(2040,8787.12),(2050,9169.11),\\\\ (2060,9384.7),(2070,9456.88),(2080,9407.26),(2090,9253.95),(2100,9032.42),\\\\ (2110,9032.42))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100, 2110],
                            [
                                6867.39, 7611.25, 8261.99, 8787.12, 9169.11, 9384.7, 9456.88,
                                9407.26, 9253.95, 9032.42, 9032.42
                            ])


def pop_ssp4(x):
    """
    Real Name: b'pop ssp4'
    Original Eqn: b'([(2010,2110)-(6895.882,9472.529)],(2010,6895.882),(2020,7626.353),(2030,8258.565),(2040,8765.68),(2050,9146.527),\\\\ (2060,9377.45),(2070,9472.529),(2080,9471.44),(2090,9401.586),(2100,9292.446),\\\\ (2110,9292.446))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100, 2110],
                            [
                                6895.882, 7626.353, 8258.565, 8765.68, 9146.527, 9377.45, 9472.529,
                                9471.44, 9401.586, 9292.446, 9292.446
                            ])


def pop_ssp1(x):
    """
    Real Name: b'pop ssp1'
    Original Eqn: b'([(2010,2110)-(6921.798,8530.5)],(2010,6921.798),(2020,7576.105),(2030,8061.938),(2040,8388.763),(2050,8530.5),\\\\ (2060,8492.176),(2070,8298.95),(2080,7967.387),(2090,7510.454),(2100,6957.989),\\\\ (2110,6957.989))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100, 2110],
                            [
                                6921.798, 7576.105, 8061.938, 8388.763, 8530.5, 8492.176, 8298.95,
                                7967.387, 7510.454, 6957.989, 6957.989
                            ])


def pop_ssp5(x):
    """
    Real Name: b'pop ssp5'
    Original Eqn: b'([(2010,2110)-(6894,8589)],(2010,6894),(2020,7552),(2030,8054),(2040,8403),(2050,8579),\\\\ (2060,8589),(2070,8457),(2080,8200),(2090,7831),(2100,7375),\\\\ (2110,7375))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100, 2110],
                            [6894, 7552, 8054, 8403, 8579, 8589, 8457, 8200, 7831, 7375, 7375])


def pop_ssp3(x):
    """
    Real Name: b'pop ssp3'
    Original Eqn: b'([(2010,2110)-(6879.59,12620.136)],(2010,6879.59),(2020,7697.854),(2030,8514.307),(2040,9257.22),(2050,9957.131),\\\\ (2060,10574.362),(2070,11117.376),(2080,11633.415),(2090,12134.327),(2100,12620.136),\\\\ (2110,12620.136))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100, 2110],
                            [
                                6879.59, 7697.854, 8514.307, 9257.22, 9957.131, 10574.362,
                                11117.376, 11633.415, 12134.327, 12620.136, 12620.136
                            ])


def p_timeseries_gdppc_growth_rate(x):
    """
    Real Name: b'p timeseries gdppc growth rate'
    Original Eqn: b'([(2015,2100)-(0.014,0.014)],(2015,0.014),(2016,0.014),(2017,0.014),(2018,0.014),(2019,0.014),\\\\ (2020,0.014),(2021,0.014),(2022,0.014),(2023,0.014),(2024,0.014),\\\\ (2025,0.014),(2026,0.014),(2027,0.014),(2028,0.014),(2029,0.014),\\\\ (2030,0.014),(2031,0.014),(2032,0.014),(2033,0.014),(2034,0.014),\\\\ (2035,0.014),(2036,0.014),(2037,0.014),(2038,0.014),(2039,0.014),\\\\ (2040,0.014),(2041,0.014),(2042,0.014),(2043,0.014),(2044,0.014),\\\\ (2045,0.014),(2046,0.014),(2047,0.014),(2048,0.014),(2049,0.014),\\\\ (2050,0.014),(2051,0.014),(2052,0.014),(2053,0.014),(2054,0.014),\\\\ (2055,0.014),(2056,0.014),(2057,0.014),(2058,0.014),(2059,0.014),\\\\ (2060,0.014),(2061,0.014),(2062,0.014),(2063,0.014),(2064,0.014),\\\\ (2065,0.014),(2066,0.014),(2067,0.014),(2068,0.014),(2069,0.014),\\\\ (2070,0.014),(2071,0.014),(2072,0.014),(2073,0.014),(2074,0.014),\\\\ (2075,0.014),(2076,0.014),(2077,0.014),(2078,0.014),(2079,0.014),\\\\ (2080,0.014),(2081,0.014),(2082,0.014),(2083,0.014),(2084,0.014),\\\\ (2085,0.014),(2086,0.014),(2087,0.014),(2088,0.014),(2089,0.014),\\\\ (2090,0.014),(2091,0.014),(2092,0.014),(2093,0.014),(2094,0.014),\\\\ (2095,0.014),(2096,0.014),(2097,0.014),(2098,0.014),(2099,0.014),\\\\ (2100,0.014))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014,
        0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014,
        0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014,
        0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014,
        0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014,
        0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014,
        0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014
    ])


def historic_gdppc(x):
    """
    Real Name: b'historic gdppc'
    Original Eqn: b'([(1995,2016)-(5106.7947854704435,6881.608808351995)],(1995,5106.7947854704435),(1996,5174.896039944818),(1997,5262.160141079583),(1998,5328.423151357811),(1999,5486.243275343644),\\\\ (2000,5614.624756138972),(2001,5622.1612721180445),(2002,5617.043532323626),(2003,5717.34533140038),(2004,5872.719107872231),\\\\ (2005,6001.98989859595),(2006,6160.0297122424945),(2007,6314.980459059734),(2008,6352.441542803503),(2009,6110.378125282639),\\\\ (2010,6298.007948978156),(2011,6420.647080849909),(2012,6498.888786922519),(2013,6588.576150940048),(2014,6694.810605835951),\\\\ (2015,6797.225563489298),(2016,6881.608808351995))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        5106.7947854704435, 5174.896039944818, 5262.160141079583, 5328.423151357811,
        5486.243275343644, 5614.624756138972, 5622.1612721180445, 5617.043532323626,
        5717.34533140038, 5872.719107872231, 6001.98989859595, 6160.0297122424945,
        6314.980459059734, 6352.441542803503, 6110.378125282639, 6298.007948978156,
        6420.647080849909, 6498.888786922519, 6588.576150940048, 6694.810605835951,
        6797.225563489298, 6881.608808351995
    ])


def total_ghg_emissions_olt_medeas_d3x2(x):
    """
    Real Name: b'total ghg emissions olt medeas d3x2'
    Original Eqn: b'([(1990,2100)-(3.0,48.42974943441521)],(1990,35.759413148286896),(1991,35.9654102916019),(1992,35.24924015949415),(1993,35.39397812433697),(1994,35.518166161269896),\\\\ (1995,36.24446809126249),(1996,36.95717178883806),(1997,37.17157881794709),(1998,37.401771576560655),(1999,37.62916715402579),\\\\ (2000,38.88923353257618),(2001,39.1672436132021),(2002,39.70029697776367),(2003,40.962653787287586),(2004,42.43164699720583),\\\\ (2005,43.4585485141285),(2006,44.73882999735216),(2007,45.98817373194996),(2008,46.41034844291112),(2009,45.85923565238791),\\\\ (2010,47.554580971711395),(2011,48.42974943441521),(2012,47.42876601959408),(2013,47.09505948151982),(2014,46.76135294344556),\\\\ (2015,46.4276464053713),(2016,46.09393986729704),(2017,45.76023332922278),(2018,45.42652679114852),(2019,45.09282025307426),\\\\ (2020,44.759113715),(2021,44.05724267735),(2022,43.355371639699996),(2023,42.65350060205),(2024,41.9516295644),\\\\ (2025,41.24975852675),(2026,40.5478874891),(2027,39.84601645145),(2028,39.144145413800004),(2029,38.44227437615),\\\\ (2030,37.7404033385),(2031,36.99498139958053),(2032,36.24955946066106),(2033,35.50413752174159),(2034,34.75871558282212),\\\\ (2035,34.01329364390265),(2036,33.26787170498318),(2037,32.52244976606371),(2038,31.77702782714424),(2039,31.03160588822477),\\\\ (2040,30.2861839493053),(2041,29.55797931044127),(2042,28.82977467157724),(2043,28.101570032713212),(2044,27.37336539384918),\\\\ (2045,26.645160754985152),(2046,25.91695611612112),(2047,25.188751477257092),(2048,24.46054683839306),(2049,23.73234219952903),\\\\ (2050,23.004137560665),(2051,22.37502643707183),(2052,21.745915313478662),(2053,21.11680418988549),(2054,20.48769306629232),\\\\ (2055,19.85858194269915),(2056,19.22947081910598),(2057,18.600359695512807),(2058,17.971248571919638),(2059,17.34213744832647),\\\\ (2060,16.7130263247333),(2061,16.21015507735497),(2062,15.707283829976639),(2063,15.204412582598309),(2064,14.701541335219979),\\\\ (2065,14.198670087841649),(2066,13.695798840463318),(2067,13.19292759308499),(2068,12.69005634570666),(2069,12.18718509832833),\\\\ (2070,11.68431385095),(2071,11.265439517733332),(2072,10.846565184516665),(2073,10.4276908513),(2074,10.008816518083332),\\\\ (2075,9.589942184866665),(2076,9.171067851649997),(2077,8.75219351843333),(2078,8.333319185216663),(2079,7.914444851999997),\\\\ (2080,7.49557051878333),(2081,7.215631669871664),(2082,6.935692820959998),(2083,6.655753972048332),(2084,6.375815123136666),\\\\ (2085,6.095876274225001),(2086,5.815937425313334),(2087,5.535998576401668),(2088,5.256059727490002),(2089,4.976120878578336),\\\\ (2090,4.69618202966667),(2091,4.523135116700003),(2092,4.350088203733336),(2093,4.177041290766669),(2094,4.0039943778000024),\\\\ (2095,3.8309474648333355),(2096,3.657900551866668),(2097,3.484853638900001),(2098,3.311806725933334),(2099,3.0),\\\\ (2100,3.0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
        2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
        2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
        2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
        2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
        2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
        2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
        2095, 2096, 2097, 2098, 2099, 2100
    ], [
        35.759413148286896, 35.9654102916019, 35.24924015949415, 35.39397812433697,
        35.518166161269896, 36.24446809126249, 36.95717178883806, 37.17157881794709,
        37.401771576560655, 37.62916715402579, 38.88923353257618, 39.1672436132021,
        39.70029697776367, 40.962653787287586, 42.43164699720583, 43.4585485141285,
        44.73882999735216, 45.98817373194996, 46.41034844291112, 45.85923565238791,
        47.554580971711395, 48.42974943441521, 47.42876601959408, 47.09505948151982,
        46.76135294344556, 46.4276464053713, 46.09393986729704, 45.76023332922278,
        45.42652679114852, 45.09282025307426, 44.759113715, 44.05724267735, 43.355371639699996,
        42.65350060205, 41.9516295644, 41.24975852675, 40.5478874891, 39.84601645145,
        39.144145413800004, 38.44227437615, 37.7404033385, 36.99498139958053, 36.24955946066106,
        35.50413752174159, 34.75871558282212, 34.01329364390265, 33.26787170498318,
        32.52244976606371, 31.77702782714424, 31.03160588822477, 30.2861839493053,
        29.55797931044127, 28.82977467157724, 28.101570032713212, 27.37336539384918,
        26.645160754985152, 25.91695611612112, 25.188751477257092, 24.46054683839306,
        23.73234219952903, 23.004137560665, 22.37502643707183, 21.745915313478662,
        21.11680418988549, 20.48769306629232, 19.85858194269915, 19.22947081910598,
        18.600359695512807, 17.971248571919638, 17.34213744832647, 16.7130263247333,
        16.21015507735497, 15.707283829976639, 15.204412582598309, 14.701541335219979,
        14.198670087841649, 13.695798840463318, 13.19292759308499, 12.69005634570666,
        12.18718509832833, 11.68431385095, 11.265439517733332, 10.846565184516665, 10.4276908513,
        10.008816518083332, 9.589942184866665, 9.171067851649997, 8.75219351843333,
        8.333319185216663, 7.914444851999997, 7.49557051878333, 7.215631669871664,
        6.935692820959998, 6.655753972048332, 6.375815123136666, 6.095876274225001,
        5.815937425313334, 5.535998576401668, 5.256059727490002, 4.976120878578336,
        4.69618202966667, 4.523135116700003, 4.350088203733336, 4.177041290766669,
        4.0039943778000024, 3.8309474648333355, 3.657900551866668, 3.484853638900001,
        3.311806725933334, 3.0, 3.0
    ])


def total_ghg_emissions_bau_cat_medeas_d3x2(x):
    """
    Real Name: b'total ghg emissions bau cat medeas d3x2'
    Original Eqn: b'([(1990,2100)-(35.24924015949415,175.14228667160432)],(1990,35.759413148286896),(1991,35.9654102916019),(1992,35.24924015949415),(1993,35.39397812433697),(1994,35.518166161269896),\\\\ (1995,36.24446809126249),(1996,36.95717178883806),(1997,37.17157881794709),(1998,37.401771576560655),(1999,37.62916715402579),\\\\ (2000,38.88923353257618),(2001,39.1672436132021),(2002,39.70029697776367),(2003,40.962653787287586),(2004,42.43164699720583),\\\\ (2005,43.4585485141285),(2006,44.73882999735216),(2007,45.98817373194996),(2008,46.41034844291112),(2009,45.85923565238791),\\\\ (2010,47.554580971711395),(2011,48.42974943441521),(2012,52.46089897560433),(2013,54.21177696260433),(2014,55.96265494960433),\\\\ (2015,57.71353293660433),(2016,59.464410923604326),(2017,61.21528891060433),(2018,62.96616689760433),(2019,64.71704488460433),\\\\ (2020,66.46792287160433),(2021,68.00663966160434),(2022,69.54535645160432),(2023,71.08407324160433),(2024,72.62279003160432),\\\\ (2025,74.16150682160433),(2026,75.70022361160433),(2027,77.23894040160432),(2028,78.77765719160433),(2029,80.31637398160433),\\\\ (2030,81.85509077160432),(2031,83.05051741060433),(2032,84.24594404960432),(2033,85.44137068860432),(2034,86.63679732760431),\\\\ (2035,87.83222396660433),(2036,89.02765060560434),(2037,90.22307724460433),(2038,91.41850388360433),(2039,92.61393052260432),\\\\ (2040,93.80935716160432),(2041,95.46841207750431),(2042,97.12746699340433),(2043,98.78652190930431),(2044,100.44557682520431),\\\\ (2045,102.10463174110431),(2046,103.7636866570043),(2047,105.42274157290431),(2048,107.0817964888043),(2049,108.74085140470432),\\\\ (2050,110.3999063206043),(2051,111.83580096570431),(2052,113.27169561080431),(2053,114.70759025590432),(2054,116.14348490100431),\\\\ (2055,117.57937954610432),(2056,119.01527419120433),(2057,120.45116883630432),(2058,121.88706348140433),(2059,123.32295812650432),\\\\ (2060,124.75885277160434),(2061,126.37919332160433),(2062,127.99953387160433),(2063,129.61987442160432),(2064,131.24021497160436),\\\\ (2065,132.86055552160434),(2066,134.48089607160435),(2067,136.10123662160433),(2068,137.72157717160434),(2069,139.34191772160435),\\\\ (2070,140.96225827160433),(2071,141.74471066160433),(2072,142.52716305160436),(2073,143.30961544160434),(2074,144.09206783160434),\\\\ (2075,144.8745202216043),(2076,145.65697261160435),(2077,146.43942500160435),(2078,147.22187739160432),(2079,148.00432978160435),\\\\ (2080,148.78678217160433),(2081,150.03883602160434),(2082,151.29088987160432),(2083,152.54294372160433),(2084,153.7949975716043),\\\\ (2085,155.04705142160435),(2086,156.29910527160436),(2087,157.55115912160434),(2088,158.80321297160435),(2089,160.05526682160433),\\\\ (2090,161.30732067160434),(2091,162.69081727160432),(2092,164.07431387160435),(2093,165.45781047160435),(2094,166.84130707160432),\\\\ (2095,168.22480367160432),(2096,169.60830027160432),(2097,170.99179687160435),(2098,172.37529347160432),(2099,173.7587900716043),\\\\ (2100,175.14228667160432))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
        2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
        2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
        2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
        2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
        2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
        2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
        2095, 2096, 2097, 2098, 2099, 2100
    ], [
        35.759413148286896, 35.9654102916019, 35.24924015949415, 35.39397812433697,
        35.518166161269896, 36.24446809126249, 36.95717178883806, 37.17157881794709,
        37.401771576560655, 37.62916715402579, 38.88923353257618, 39.1672436132021,
        39.70029697776367, 40.962653787287586, 42.43164699720583, 43.4585485141285,
        44.73882999735216, 45.98817373194996, 46.41034844291112, 45.85923565238791,
        47.554580971711395, 48.42974943441521, 52.46089897560433, 54.21177696260433,
        55.96265494960433, 57.71353293660433, 59.464410923604326, 61.21528891060433,
        62.96616689760433, 64.71704488460433, 66.46792287160433, 68.00663966160434,
        69.54535645160432, 71.08407324160433, 72.62279003160432, 74.16150682160433,
        75.70022361160433, 77.23894040160432, 78.77765719160433, 80.31637398160433,
        81.85509077160432, 83.05051741060433, 84.24594404960432, 85.44137068860432,
        86.63679732760431, 87.83222396660433, 89.02765060560434, 90.22307724460433,
        91.41850388360433, 92.61393052260432, 93.80935716160432, 95.46841207750431,
        97.12746699340433, 98.78652190930431, 100.44557682520431, 102.10463174110431,
        103.7636866570043, 105.42274157290431, 107.0817964888043, 108.74085140470432,
        110.3999063206043, 111.83580096570431, 113.27169561080431, 114.70759025590432,
        116.14348490100431, 117.57937954610432, 119.01527419120433, 120.45116883630432,
        121.88706348140433, 123.32295812650432, 124.75885277160434, 126.37919332160433,
        127.99953387160433, 129.61987442160432, 131.24021497160436, 132.86055552160434,
        134.48089607160435, 136.10123662160433, 137.72157717160434, 139.34191772160435,
        140.96225827160433, 141.74471066160433, 142.52716305160436, 143.30961544160434,
        144.09206783160434, 144.8745202216043, 145.65697261160435, 146.43942500160435,
        147.22187739160432, 148.00432978160435, 148.78678217160433, 150.03883602160434,
        151.29088987160432, 152.54294372160433, 153.7949975716043, 155.04705142160435,
        156.29910527160436, 157.55115912160434, 158.80321297160435, 160.05526682160433,
        161.30732067160434, 162.69081727160432, 164.07431387160435, 165.45781047160435,
        166.84130707160432, 168.22480367160432, 169.60830027160432, 170.99179687160435,
        172.37529347160432, 173.7587900716043, 175.14228667160432
    ])


def total_ghg_emissions_mlt2030x_medeas_d3x2(x):
    """
    Real Name: b'total ghg emissions mlt2030x medeas d3x2'
    Original Eqn: b'([(1990,2100)-(0.02346098056461049,81.8550908)],(1990,35.759413148286896),(1991,35.9654102916019),(1992,35.24924015949415),(1993,35.39397812433697),(1994,35.518166161269896),\\\\ (1995,36.24446809126249),(1996,36.95717178883806),(1997,37.17157881794709),(1998,37.401771576560655),(1999,37.62916715402579),\\\\ (2000,38.88923353257618),(2001,39.1672436132021),(2002,39.70029697776367),(2003,40.962653787287586),(2004,42.43164699720583),\\\\ (2005,43.4585485141285),(2006,44.73882999735216),(2007,45.98817373194996),(2008,46.41034844291112),(2009,45.85923565238791),\\\\ (2010,47.554580971711395),(2011,48.42974943441521),(2012,52.460899),(2013,54.211777),(2014,55.9626549),\\\\ (2015,57.7135329),(2016,59.4644109),(2017,61.2152889),(2018,62.9661669),(2019,64.7170449),\\\\ (2020,66.4679229),(2021,68.0066397),(2022,69.5453565),(2023,71.0840732),(2024,72.62279),\\\\ (2025,74.1615068),(2026,75.7002236),(2027,77.2389404),(2028,78.7776572),(2029,80.316374),\\\\ (2030,81.8550908),(2031,72.851030812),(2032,64.83741742268),(2033,57.70530150618521),(2034,51.35771834050483),\\\\ (2035,45.7083693230493),(2036,40.680448697513874),(2037,36.205599340787344),(2038,32.22298341330074),(2039,28.678455237837657),\\\\ (2040,25.523825161675514),(2041,22.716204393891207),(2042,20.217421910563175),(2043,17.993505500401227),(2044,16.01421989535709),\\\\ (2045,14.252655706867811),(2046,12.684863579112353),(2047,11.289528585409993),(2048,10.047680441014894),(2049,8.942435592503255),\\\\ (2050,7.958767677327897),(2051,7.083303232821828),(2052,6.304139877211427),(2053,5.61068449071817),(2054,4.993509196739171),\\\\ (2055,4.444223185097862),(2056,3.9553586347370975),(2057,3.5202691849160166),(2058,3.1330395745752546),(2059,2.7884052213719768),\\\\ (2060,2.4816806470210593),(2061,2.2086957758487427),(2062,1.965739240505381),(2063,1.749507924049789),(2064,1.5570620524043122),\\\\ (2065,1.3857852266398378),(2066,1.2333488517094557),(2067,1.0976804780214156),(2068,0.9769356254390599),(2069,0.8694727066407633),\\\\ (2070,0.7738307089102793),(2071,0.6887093309301485),(2072,0.6129513045278322),(2073,0.5455266610297707),(2074,0.4855187283164959),\\\\ (2075,0.43211166820168134),(2076,0.3845793846994964),(2077,0.34227565238255175),(2078,0.30462533062047104),(2079,0.2711165442522192),\\\\ (2080,0.2412937243844751),(2081,0.21475141470218284),(2082,0.19112875908494273),(2083,0.17010459558559904),(2084,0.15139309007118315),\\\\ (2085,0.134739850163353),(2086,0.11991846664538416),(2087,0.10672743531439191),(2088,0.0949874174298088),(2089,0.08453880151252983),\\\\ (2090,0.07523953334615155),(2091,0.06696318467807488),(2092,0.05959723436348664),(2093,0.05304153858350311),(2094,0.04720696933931777),\\\\ (2095,0.04201420271199281),(2096,0.0373926404136736),(2097,0.033279449968169506),(2098,0.02961871047167086),(2099,0.026360652319787067),\\\\ (2100,0.02346098056461049))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
        2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
        2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
        2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
        2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
        2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
        2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
        2095, 2096, 2097, 2098, 2099, 2100
    ], [
        35.759413148286896, 35.9654102916019, 35.24924015949415, 35.39397812433697,
        35.518166161269896, 36.24446809126249, 36.95717178883806, 37.17157881794709,
        37.401771576560655, 37.62916715402579, 38.88923353257618, 39.1672436132021,
        39.70029697776367, 40.962653787287586, 42.43164699720583, 43.4585485141285,
        44.73882999735216, 45.98817373194996, 46.41034844291112, 45.85923565238791,
        47.554580971711395, 48.42974943441521, 52.460899, 54.211777, 55.9626549, 57.7135329,
        59.4644109, 61.2152889, 62.9661669, 64.7170449, 66.4679229, 68.0066397, 69.5453565,
        71.0840732, 72.62279, 74.1615068, 75.7002236, 77.2389404, 78.7776572, 80.316374,
        81.8550908, 72.851030812, 64.83741742268, 57.70530150618521, 51.35771834050483,
        45.7083693230493, 40.680448697513874, 36.205599340787344, 32.22298341330074,
        28.678455237837657, 25.523825161675514, 22.716204393891207, 20.217421910563175,
        17.993505500401227, 16.01421989535709, 14.252655706867811, 12.684863579112353,
        11.289528585409993, 10.047680441014894, 8.942435592503255, 7.958767677327897,
        7.083303232821828, 6.304139877211427, 5.61068449071817, 4.993509196739171,
        4.444223185097862, 3.9553586347370975, 3.5202691849160166, 3.1330395745752546,
        2.7884052213719768, 2.4816806470210593, 2.2086957758487427, 1.965739240505381,
        1.749507924049789, 1.5570620524043122, 1.3857852266398378, 1.2333488517094557,
        1.0976804780214156, 0.9769356254390599, 0.8694727066407633, 0.7738307089102793,
        0.6887093309301485, 0.6129513045278322, 0.5455266610297707, 0.4855187283164959,
        0.43211166820168134, 0.3845793846994964, 0.34227565238255175, 0.30462533062047104,
        0.2711165442522192, 0.2412937243844751, 0.21475141470218284, 0.19112875908494273,
        0.17010459558559904, 0.15139309007118315, 0.134739850163353, 0.11991846664538416,
        0.10672743531439191, 0.0949874174298088, 0.08453880151252983, 0.07523953334615155,
        0.06696318467807488, 0.05959723436348664, 0.05304153858350311, 0.04720696933931777,
        0.04201420271199281, 0.0373926404136736, 0.033279449968169506, 0.02961871047167086,
        0.026360652319787067, 0.02346098056461049
    ])


def total_ghg_emissions_mlt2020x_medeas_d3x2(x):
    """
    Real Name: b'total ghg emissions mlt2020x medeas d3x2'
    Original Eqn: b'([(1990,2100)-(1.8165338259362436,66.46792287160433)],(1990,35.759413148286896),(1991,35.9654102916019),(1992,35.24924015949415),(1993,35.39397812433697),(1994,35.518166161269896),\\\\ (1995,36.24446809126249),(1996,36.95717178883806),(1997,37.17157881794709),(1998,37.401771576560655),(1999,37.62916715402579),\\\\ (2000,38.88923353257618),(2001,39.1672436132021),(2002,39.70029697776367),(2003,40.962653787287586),(2004,42.43164699720583),\\\\ (2005,43.4585485141285),(2006,44.73882999735216),(2007,45.98817373194996),(2008,46.41034844291112),(2009,45.85923565238791),\\\\ (2010,47.554580971711395),(2011,48.42974943441521),(2012,52.46089897560433),(2013,54.21177696260433),(2014,55.96265494960433),\\\\ (2015,57.71353293660433),(2016,59.464410923604326),(2017,61.21528891060433),(2018,62.96616689760433),(2019,64.71704488460433),\\\\ (2020,66.46792287160433),(2021,63.54333426525374),(2022,60.747427557582576),(2023,58.07454074504894),(2024,55.51926095226679),\\\\ (2025,53.07641347036705),(2026,50.7410512776709),(2027,48.508445021453376),(2028,46.37407344050943),(2029,44.33361420912701),\\\\ (2030,42.382935183925426),(2031,40.51808603583271),(2032,38.73529025025607),(2033,37.030937479244805),(2034,35.401576230158035),\\\\ (2035,33.843906876031085),(2036,32.35477497348572),(2037,30.931164874652346),(2038,29.570193620167643),(2039,28.269105100880267),\\\\ (2040,27.025264476441535),(2041,25.836152839478107),(2042,24.69936211454107),(2043,23.612590181501265),(2044,22.573636213515208),\\\\ (2045,21.580396220120537),(2046,20.630858786435233),(2047,19.723100999832084),(2048,18.85528455583947),(2049,18.025652035382535),\\\\ (2050,17.232523345825705),(2051,16.474292318609372),(2052,15.74942345659056),(2053,15.056448824500574),(2054,14.39396507622255),\\\\ (2055,13.760630612868757),(2056,13.155162865902533),(2057,12.57633569980282),(2058,12.022976929011497),(2059,11.493965944134992),\\\\ (2060,10.988231442593053),(2061,10.504749259118958),(2062,10.042540291717724),(2063,9.600668518882145),(2064,9.17823910405133),\\\\ (2065,8.774396583473072),(2066,8.388323133800256),(2067,8.019236915913044),(2068,7.66639049161287),(2069,7.329069309981904),\\\\ (2070,7.0065902603427),(2071,6.698300288887622),(2072,6.403575076176566),(2073,6.121817772824797),(2074,5.852457790820506),\\\\ (2075,5.594949648024404),(2076,5.34877186351133),(2077,5.113425901516831),(2078,4.888435161850091),(2079,4.673344014728687),\\\\ (2080,4.4677168780806245),(2081,4.271137335445077),(2082,4.083207292685493),(2083,3.903546171807332),(2084,3.731790140247809),\\\\ (2085,3.5675913740769056),(2086,3.4106173536175217),(2087,3.2605501900583507),(2088,3.117085981695783),(2089,2.979934198501169),\\\\ (2090,2.8488170937671176),(2091,2.7234691416413646),(2092,2.6036364994091445),(2093,2.4890764934351424),(2094,2.379557127723996),\\\\ (2095,2.27485661410414),(2096,2.174762923083558),(2097,2.0790733544678814),(2098,1.9875941268712947),(2099,1.9001399852889578),\\\\ (2100,1.8165338259362436))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
        2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
        2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
        2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
        2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
        2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
        2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
        2095, 2096, 2097, 2098, 2099, 2100
    ], [
        35.759413148286896, 35.9654102916019, 35.24924015949415, 35.39397812433697,
        35.518166161269896, 36.24446809126249, 36.95717178883806, 37.17157881794709,
        37.401771576560655, 37.62916715402579, 38.88923353257618, 39.1672436132021,
        39.70029697776367, 40.962653787287586, 42.43164699720583, 43.4585485141285,
        44.73882999735216, 45.98817373194996, 46.41034844291112, 45.85923565238791,
        47.554580971711395, 48.42974943441521, 52.46089897560433, 54.21177696260433,
        55.96265494960433, 57.71353293660433, 59.464410923604326, 61.21528891060433,
        62.96616689760433, 64.71704488460433, 66.46792287160433, 63.54333426525374,
        60.747427557582576, 58.07454074504894, 55.51926095226679, 53.07641347036705,
        50.7410512776709, 48.508445021453376, 46.37407344050943, 44.33361420912701,
        42.382935183925426, 40.51808603583271, 38.73529025025607, 37.030937479244805,
        35.401576230158035, 33.843906876031085, 32.35477497348572, 30.931164874652346,
        29.570193620167643, 28.269105100880267, 27.025264476441535, 25.836152839478107,
        24.69936211454107, 23.612590181501265, 22.573636213515208, 21.580396220120537,
        20.630858786435233, 19.723100999832084, 18.85528455583947, 18.025652035382535,
        17.232523345825705, 16.474292318609372, 15.74942345659056, 15.056448824500574,
        14.39396507622255, 13.760630612868757, 13.155162865902533, 12.57633569980282,
        12.022976929011497, 11.493965944134992, 10.988231442593053, 10.504749259118958,
        10.042540291717724, 9.600668518882145, 9.17823910405133, 8.774396583473072,
        8.388323133800256, 8.019236915913044, 7.66639049161287, 7.329069309981904, 7.0065902603427,
        6.698300288887622, 6.403575076176566, 6.121817772824797, 5.852457790820506,
        5.594949648024404, 5.34877186351133, 5.113425901516831, 4.888435161850091,
        4.673344014728687, 4.4677168780806245, 4.271137335445077, 4.083207292685493,
        3.903546171807332, 3.731790140247809, 3.5675913740769056, 3.4106173536175217,
        3.2605501900583507, 3.117085981695783, 2.979934198501169, 2.8488170937671176,
        2.7234691416413646, 2.6036364994091445, 2.4890764934351424, 2.379557127723996,
        2.27485661410414, 2.174762923083558, 2.0790733544678814, 1.9875941268712947,
        1.9001399852889578, 1.8165338259362436
    ])


def table_hist_capacity_phs(x):
    """
    Real Name: b'table hist capacity phs'
    Original Eqn: b'([(1995,2015)-(0.0915700044762995,0.1379890354996751)],(1995,0.0916300043623243),(1996,0.0933800056375377),(1997,0.0915700044762995),(1998,0.095060004532393),(1999,0.0963800032561458),\\\\ (2000,0.0979700041995104),(2001,0.099380003724601),(2002,0.0988500056353863),(2003,0.0984100053188484),(2004,0.102080005003214),\\\\ (2005,0.103850004442362),(2006,0.10771000355781),(2007,0.112910003772387),(2008,0.117070004867921),(2009,0.12167000599687),\\\\ (2010,0.123550007094676),(2011,0.130110007937634),(2012,0.132230006731795),(2013,0.1332792609425959),(2014,0.13455522053152233),\\\\ (2015,0.1379890354996751))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014, 2015
    ], [
        0.0916300043623243, 0.0933800056375377, 0.0915700044762995, 0.095060004532393,
        0.0963800032561458, 0.0979700041995104, 0.099380003724601, 0.0988500056353863,
        0.0984100053188484, 0.102080005003214, 0.103850004442362, 0.10771000355781,
        0.112910003772387, 0.117070004867921, 0.12167000599687, 0.123550007094676,
        0.130110007937634, 0.132230006731795, 0.1332792609425959, 0.13455522053152233,
        0.1379890354996751
    ])


def table_max_extraction_aspo_oil_ej_0_1_0(x):
    """
    Real Name: b'table max extraction aspo oil ej 0 1 0'
    Original Eqn: b'([(0,13200)-(0.0,171.044)],(0,0.0),(600,29.9783),(1200,46.7403),(1800,59.4953),(2400,71.3603),\\\\ (3000,84.9357),(3600,96.0997),(4200,107.465),(4800,118.46),(5400,127.537),\\\\ (6000,137.018),(6600,145.888),(7200,152.005),(7800,156.288),(8400,162.47),\\\\ (9000,166.659),(9600,171.044),(10200,171.044),(10800,171.044),(11400,171.044),\\\\ (12000,171.044),(12600,171.044),(13200,171.044))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 600, 1200, 1800, 2400, 3000, 3600, 4200, 4800, 5400, 6000, 6600, 7200, 7800, 8400, 9000,
        9600, 10200, 10800, 11400, 12000, 12600, 13200
    ], [
        0.0, 29.9783, 46.7403, 59.4953, 71.3603, 84.9357, 96.0997, 107.465, 118.46, 127.537,
        137.018, 145.888, 152.005, 156.288, 162.47, 166.659, 171.044, 171.044, 171.044, 171.044,
        171.044, 171.044, 171.044
    ])


def table_max_extraction_aspo_oil_ej_0_1(x):
    """
    Real Name: b'table max extraction aspo oil ej 0 1'
    Original Eqn: b'([(0,13200)-(0.0,171.044)],(0,0.0),(600,29.9783),(1200,46.7403),(1800,59.4953),(2400,71.3603),\\\\ (3000,84.9357),(3600,96.0997),(4200,107.465),(4800,118.46),(5400,127.537),\\\\ (6000,137.018),(6600,145.888),(7200,152.005),(7800,156.288),(8400,162.47),\\\\ (9000,166.659),(9600,171.044),(10200,171.044),(10800,171.044),(11400,171.044),\\\\ (12000,171.044),(12600,171.044),(13200,171.044))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 600, 1200, 1800, 2400, 3000, 3600, 4200, 4800, 5400, 6000, 6600, 7200, 7800, 8400, 9000,
        9600, 10200, 10800, 11400, 12000, 12600, 13200
    ], [
        0.0, 29.9783, 46.7403, 59.4953, 71.3603, 84.9357, 96.0997, 107.465, 118.46, 127.537,
        137.018, 145.888, 152.005, 156.288, 162.47, 166.659, 171.044, 171.044, 171.044, 171.044,
        171.044, 171.044, 171.044
    ])


def table_max_extraction_aspo_oil_ej_0(x):
    """
    Real Name: b'table max extraction aspo oil ej 0'
    Original Eqn: b'([(0,13200)-(0.0,171.044)],(0,0.0),(600,29.9783),(1200,46.7403),(1800,59.4953),(2400,71.3603),\\\\ (3000,84.9357),(3600,96.0997),(4200,107.465),(4800,118.46),(5400,127.537),\\\\ (6000,137.018),(6600,145.888),(7200,152.005),(7800,156.288),(8400,162.47),\\\\ (9000,166.659),(9600,171.044),(10200,171.044),(10800,171.044),(11400,171.044),\\\\ (12000,171.044),(12600,171.044),(13200,171.044))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 600, 1200, 1800, 2400, 3000, 3600, 4200, 4800, 5400, 6000, 6600, 7200, 7800, 8400, 9000,
        9600, 10200, 10800, 11400, 12000, 12600, 13200
    ], [
        0.0, 29.9783, 46.7403, 59.4953, 71.3603, 84.9357, 96.0997, 107.465, 118.46, 127.537,
        137.018, 145.888, 152.005, 156.288, 162.47, 166.659, 171.044, 171.044, 171.044, 171.044,
        171.044, 171.044, 171.044
    ])


def table_max_extraction_aspo_oil_ej_0_0(x):
    """
    Real Name: b'table max extraction aspo oil ej 0 0'
    Original Eqn: b'([(0,13200)-(0.0,171.044)],(0,0.0),(600,29.9783),(1200,46.7403),(1800,59.4953),(2400,71.3603),\\\\ (3000,84.9357),(3600,96.0997),(4200,107.465),(4800,118.46),(5400,127.537),\\\\ (6000,137.018),(6600,145.888),(7200,152.005),(7800,156.288),(8400,162.47),\\\\ (9000,166.659),(9600,171.044),(10200,171.044),(10800,171.044),(11400,171.044),\\\\ (12000,171.044),(12600,171.044),(13200,171.044))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 600, 1200, 1800, 2400, 3000, 3600, 4200, 4800, 5400, 6000, 6600, 7200, 7800, 8400, 9000,
        9600, 10200, 10800, 11400, 12000, 12600, 13200
    ], [
        0.0, 29.9783, 46.7403, 59.4953, 71.3603, 84.9357, 96.0997, 107.465, 118.46, 127.537,
        137.018, 145.888, 152.005, 156.288, 162.47, 166.659, 171.044, 171.044, 171.044, 171.044,
        171.044, 171.044, 171.044
    ])


def historical_extraction_minerals_rest_subadhesive(x):
    """
    Real Name: b'historical extraction minerals rest subadhesive'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subaluminium(x):
    """
    Real Name: b'historical extraction minerals rest subaluminium'
    Original Eqn: b'([(1994,2016)-(19100000,55928650)],(1994,19100000),(1995,19393200),(1996,20694690),(1997,21392970),(1998,22089700),\\\\ (1999,23084960),(2000,23982470),(2001,24378590),(2002,25872770),(2003,27662610),\\\\ (2004,29751750),(2005,31838150),(2006,33607000),(2007,37851990),(2008,38789070),\\\\ (2009,36941740),(2010,40260150),(2011,43814260),(2012,45233790),(2013,46864630),\\\\ (2014,49355110),(2015,55928650),(2016,55520790))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        19100000, 19393200, 20694690, 21392970, 22089700, 23084960, 23982470, 24378590, 25872770,
        27662610, 29751750, 31838150, 33607000, 37851990, 38789070, 36941740, 40260150, 43814260,
        45233790, 46864630, 49355110, 55928650, 55520790
    ])


def historical_extraction_minerals_rest_subaluminium_mirrors(x):
    """
    Real Name: b'historical extraction minerals rest subaluminium mirrors'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subcadmium(x):
    """
    Real Name: b'historical extraction minerals rest subcadmium'
    Original Eqn: b'([(1994,2016)-(15800,22780)],(1994,18100),(1995,18500),(1996,18900),(1997,20000),(1998,19600),\\\\ (1999,19100),(2000,19700),(2001,18200),(2002,15800),(2003,16890),\\\\ (2004,18790),(2005,19390),(2006,19280),(2007,20370),(2008,19550),\\\\ (2009,18690),(2010,20930),(2011,22010),(2012,22780),(2013,21770),\\\\ (2014,22020),(2015,22680),(2016,22320))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        18100, 18500, 18900, 20000, 19600, 19100, 19700, 18200, 15800, 16890, 18790, 19390, 19280,
        20370, 19550, 18690, 20930, 22010, 22780, 21770, 22020, 22680, 22320
    ])


def historical_extraction_minerals_rest_subcarbon_fiber(x):
    """
    Real Name: b'historical extraction minerals rest subcarbon fiber'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subcement(x):
    """
    Real Name: b'historical extraction minerals rest subcement'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subchromium(x):
    """
    Real Name: b'historical extraction minerals rest subchromium'
    Original Eqn: b'([(1994,2016)-(9570000,30350300)],(1994,9570000),(1995,11999960),(1996,12189960),(1997,12499930),(1998,12699880),\\\\ (1999,13499820),(2000,14399830),(2001,12099800),(2002,13499670),(2003,15499420),\\\\ (2004,17499230),(2005,19298990),(2006,19598220),(2007,21496500),(2008,23794450),\\\\ (2009,19289490),(2010,23683310),(2011,23281570),(2012,25578710),(2013,28777200),\\\\ (2014,26364160),(2015,30350300),(2016,30335910))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        9570000, 11999960, 12189960, 12499930, 12699880, 13499820, 14399830, 12099800, 13499670,
        15499420, 17499230, 19298990, 19598220, 21496500, 23794450, 19289490, 23683310, 23281570,
        25578710, 28777200, 26364160, 30350300, 30335910
    ])


def historical_extraction_minerals_rest_subcopper(x):
    """
    Real Name: b'historical extraction minerals rest subcopper'
    Original Eqn: b'([(1994,2016)-(9430000,18700270)],(1994,9430000),(1995,9992170),(1996,10994390),(1997,11392880),(1998,12190320),\\\\ (1999,12586080),(2000,13182150),(2001,13677330),(2002,13573660),(2003,13569730),\\\\ (2004,14561920),(2005,14949450),(2006,15032000),(2007,15309050),(2008,15285180),\\\\ (2009,15750700),(2010,15707320),(2011,15891470),(2012,16672810),(2013,18037090),\\\\ (2014,18126070),(2015,18615350),(2016,18700270))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        9430000, 9992170, 10994390, 11392880, 12190320, 12586080, 13182150, 13677330, 13573660,
        13569730, 14561920, 14949450, 15032000, 15309050, 15285180, 15750700, 15707320, 15891470,
        16672810, 18037090, 18126070, 18615350, 18700270
    ])


def historical_extraction_minerals_rest_subdiesel(x):
    """
    Real Name: b'historical extraction minerals rest subdiesel'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subdy(x):
    """
    Real Name: b'historical extraction minerals rest subdy'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subelectric_div_electronic_components(x):
    """
    Real Name: b'historical extraction minerals rest subelectric div electronic components'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subevacuation_lines(x):
    """
    Real Name: b'historical extraction minerals rest subevacuation lines'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subfiberglass(x):
    """
    Real Name: b'historical extraction minerals rest subfiberglass'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subfoam_glass(x):
    """
    Real Name: b'historical extraction minerals rest subfoam glass'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subgalium(x):
    """
    Real Name: b'historical extraction minerals rest subgalium'
    Original Eqn: b'([(1994,2016)-(35,440)],(1994,35),(1995,35),(1996,63),(1997,54),(1998,60),\\\\ (1999,75),(2000,100),(2001,75),(2002,64),(2003,69),\\\\ (2004,60),(2005,69),(2006,80),(2007,80),(2008,111),\\\\ (2009,69),(2010,172),(2011,282),(2012,373),(2013,340),\\\\ (2014,415),(2015,440),(2016,345))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        35, 35, 63, 54, 60, 75, 100, 75, 64, 69, 60, 69, 80, 80, 111, 69, 172, 282, 373, 340, 415,
        440, 345
    ])


def historical_extraction_minerals_rest_subglass(x):
    """
    Real Name: b'historical extraction minerals rest subglass'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subglass_reinforcing_plastic(x):
    """
    Real Name: b'historical extraction minerals rest subglass reinforcing plastic'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subgravel(x):
    """
    Real Name: b'historical extraction minerals rest subgravel'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subindium(x):
    """
    Real Name: b'historical extraction minerals rest subindium'
    Original Eqn: b'([(1994,2016)-(145,629)],(1994,145),(1995,239),(1996,200),(1997,230),(1998,230),\\\\ (1999,215),(2000,335),(2001,345),(2002,335),(2003,370),\\\\ (2004,395),(2005,490),(2006,570),(2007,533),(2008,530),\\\\ (2009,466),(2010,479),(2011,522),(2012,622),(2013,629),\\\\ (2014,564),(2015,369),(2016,155))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        145, 239, 200, 230, 230, 215, 335, 345, 335, 370, 395, 490, 570, 533, 530, 466, 479, 522,
        622, 629, 564, 369, 155
    ])


def historical_extraction_minerals_rest_subiron(x):
    """
    Real Name: b'historical extraction minerals rest subiron'
    Original Eqn: b'([(1994,2016)-(993844440,3663619920)],(1994,1000000000),(1995,999928230),(1996,1019944840),(1997,1039927180),(1998,1019893920),\\\\ (1999,993844440),(2000,1059821110),(2001,1059791350),(2002,1079735210),(2003,1159623830),\\\\ (2004,1339511300),(2005,1539358150),(2006,1799023770),(2007,1998410780),(2008,2217726110),\\\\ (2009,2236160950),(2010,2584196110),(2011,2933714900),(2012,2922833710),(2013,3102160850),\\\\ (2014,3408008320),(2015,3663619920),(2016,3568372660))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        1000000000, 999928230, 1019944840, 1039927180, 1019893920, 993844440, 1059821110,
        1059791350, 1079735210, 1159623830, 1339511300, 1539358150, 1799023770, 1998410780,
        2217726110, 2236160950, 2584196110, 2933714900, 2922833710, 3102160850, 3408008320,
        3663619920, 3568372660
    ])


def historical_extraction_minerals_rest_subkno3_mined(x):
    """
    Real Name: b'historical extraction minerals rest subkno3 mined'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subasphalt(x):
    """
    Real Name: b'historical extraction minerals rest subasphalt'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_sublime(x):
    """
    Real Name: b'historical extraction minerals rest sublime'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_sublimestone(x):
    """
    Real Name: b'historical extraction minerals rest sublimestone'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_sublithium(x):
    """
    Real Name: b'historical extraction minerals rest sublithium'
    Original Eqn: b'([(1994,2016)-(6100,35000)],(1994,6100),(1995,6300),(1996,11000),(1997,14000),(1998,15000),\\\\ (1999,14000),(2000,14000),(2001,15100),(2002,14200),(2003,15100),\\\\ (2004,20200),(2005,20600),(2006,23500),(2007,25800),(2008,25400),\\\\ (2009,18800),(2010,28100),(2011,34100),(2012,35000),(2013,34000),\\\\ (2014,31700),(2015,31500),(2016,35000))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        6100, 6300, 11000, 14000, 15000, 14000, 14000, 15100, 14200, 15100, 20200, 20600, 23500,
        25800, 25400, 18800, 28100, 34100, 35000, 34000, 31700, 31500, 35000
    ])


def historical_extraction_minerals_rest_sublubricant(x):
    """
    Real Name: b'historical extraction minerals rest sublubricant'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_submagnesium(x):
    """
    Real Name: b'historical extraction minerals rest submagnesium'
    Original Eqn: b'([(1994,2016)-(2460000,27692050)],(1994,2460000),(1995,2640000),(1996,2639990),(1997,3029990),(1998,3089990),\\\\ (1999,3089980),(2000,3089980),(2001,3169980),(2002,3319970),(2003,3459940),\\\\ (2004,4269920),(2005,4209830),(2006,4059670),(2007,4389210),(2008,5428700),\\\\ (2009,5507890),(2010,5756730),(2011,5926210),(2012,6345590),(2013,6905580),\\\\ (2014,8413980),(2015,27692050),(2016,27689810))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        2460000, 2640000, 2639990, 3029990, 3089990, 3089980, 3089980, 3169980, 3319970, 3459940,
        4269920, 4209830, 4059670, 4389210, 5428700, 5507890, 5756730, 5926210, 6345590, 6905580,
        8413980, 27692050, 27689810
    ])


def historical_extraction_minerals_rest_submanganese(x):
    """
    Real Name: b'historical extraction minerals rest submanganese'
    Original Eqn: b'([(1994,2016)-(6989840,17767420)],(1994,7190000),(1995,7579970),(1996,7729960),(1997,7679940),(1998,7039890),\\\\ (1999,6989840),(2000,7279850),(2001,7599810),(2002,8099700),(2003,8199470),\\\\ (2004,9349300),(2005,10499090),(2006,11898380),(2007,12596810),(2008,13294950),\\\\ (2009,10790450),(2010,13884820),(2011,15983240),(2012,15780650),(2013,16879270),\\\\ (2014,17767420),(2015,17454820),(2016,15941730))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        7190000, 7579970, 7729960, 7679940, 7039890, 6989840, 7279850, 7599810, 8099700, 8199470,
        9349300, 10499090, 11898380, 12596810, 13294950, 10790450, 13884820, 15983240, 15780650,
        16879270, 17767420, 17454820, 15941730
    ])


def historical_extraction_minerals_rest_subheavy_equipment(x):
    """
    Real Name: b'historical extraction minerals rest subheavy equipment'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subconcrete(x):
    """
    Real Name: b'historical extraction minerals rest subconcrete'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_submolybdenum(x):
    """
    Real Name: b'historical extraction minerals rest submolybdenum'
    Original Eqn: b'([(1994,2016)-(104000,277740)],(1994,104000),(1995,126000),(1996,128000),(1997,139990),(1998,134990),\\\\ (1999,121980),(2000,128980),(2001,129980),(2002,122970),(2003,124950),\\\\ (2004,140930),(2005,184910),(2006,183840),(2007,204680),(2008,217500),\\\\ (2009,220040),(2010,240480),(2011,262320),(2012,257060),(2013,255930),\\\\ (2014,277740),(2015,230480),(2016,221170))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        104000, 126000, 128000, 139990, 134990, 121980, 128980, 129980, 122970, 124950, 140930,
        184910, 183840, 204680, 217500, 220040, 240480, 262320, 257060, 255930, 277740, 230480,
        221170
    ])


def historical_extraction_minerals_rest_subnano3_mined(x):
    """
    Real Name: b'historical extraction minerals rest subnano3 mined'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subnano3_synthetic(x):
    """
    Real Name: b'historical extraction minerals rest subnano3 synthetic'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subneodymium(x):
    """
    Real Name: b'historical extraction minerals rest subneodymium'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subnickel(x):
    """
    Real Name: b'historical extraction minerals rest subnickel'
    Original Eqn: b'([(1994,2016)-(906000,2614500)],(1994,906000),(1995,1039680),(1996,1079770),(1997,1119700),(1998,1139590),\\\\ (1999,1119400),(2000,1249270),(2001,1329150),(2002,1338990),(2003,1398710),\\\\ (2004,1398340),(2005,1487810),(2006,1576940),(2007,1655660),(2008,1564350),\\\\ (2009,1391710),(2010,1578370),(2011,1927720),(2012,2206300),(2013,2614500),\\\\ (2014,2427300),(2015,2249800),(2016,2208450))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        906000, 1039680, 1079770, 1119700, 1139590, 1119400, 1249270, 1329150, 1338990, 1398710,
        1398340, 1487810, 1576940, 1655660, 1564350, 1391710, 1578370, 1927720, 2206300, 2614500,
        2427300, 2249800, 2208450
    ])


def historical_extraction_minerals_rest_subover_grid_15_percentx(x):
    """
    Real Name: b'historical extraction minerals rest subover grid 15 percentx'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subover_grid_5_percentx(x):
    """
    Real Name: b'historical extraction minerals rest subover grid 5 percentx'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subpaint(x):
    """
    Real Name: b'historical extraction minerals rest subpaint'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_sublead(x):
    """
    Real Name: b'historical extraction minerals rest sublead'
    Original Eqn: b'([(1994,2016)-(2710000,5489190)],(1994,2800000),(1995,2710000),(1996,2920000),(1997,3010000),(1998,3100000),\\\\ (1999,3019990),(2000,3099990),(2001,3099990),(2002,2909990),(2003,2949980),\\\\ (2004,3149970),(2005,3269960),(2006,3469940),(2007,3769880),(2008,3839810),\\\\ (2009,3859630),(2010,4139410),(2011,4699350),(2012,5169250),(2013,5489190),\\\\ (2014,4868700),(2015,4948180),(2016,4817650))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        2800000, 2710000, 2920000, 3010000, 3100000, 3019990, 3099990, 3099990, 2909990, 2949980,
        3149970, 3269960, 3469940, 3769880, 3839810, 3859630, 4139410, 4699350, 5169250, 5489190,
        4868700, 4948180, 4817650
    ])


def historical_extraction_minerals_rest_subplastics(x):
    """
    Real Name: b'historical extraction minerals rest subplastics'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subpolypropylene(x):
    """
    Real Name: b'historical extraction minerals rest subpolypropylene'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subrock(x):
    """
    Real Name: b'historical extraction minerals rest subrock'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subrock_wool(x):
    """
    Real Name: b'historical extraction minerals rest subrock wool'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subsand(x):
    """
    Real Name: b'historical extraction minerals rest subsand'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subsilicon_sand(x):
    """
    Real Name: b'historical extraction minerals rest subsilicon sand'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subsilicon_wafer_modules(x):
    """
    Real Name: b'historical extraction minerals rest subsilicon wafer modules'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subsilver(x):
    """
    Real Name: b'historical extraction minerals rest subsilver'
    Original Eqn: b'([(1994,2016)-(13900,24190)],(1994,13900),(1995,14600),(1996,15200),(1997,16390),(1998,16390),\\\\ (1999,17680),(2000,17690),(2001,18680),(2002,19970),(2003,18750),\\\\ (2004,19630),(2005,19220),(2006,20060),(2007,20530),(2008,20870),\\\\ (2009,20970),(2010,21780),(2011,21860),(2012,23830),(2013,24190),\\\\ (2014,23910),(2015,21060),(2016,21790))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        13900, 14600, 15200, 16390, 16390, 17680, 17690, 18680, 19970, 18750, 19630, 19220, 20060,
        20530, 20870, 20970, 21780, 21860, 23830, 24190, 23910, 21060, 21790
    ])


def historical_extraction_minerals_rest_subsite_preparation(x):
    """
    Real Name: b'historical extraction minerals rest subsite preparation'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subtin(x):
    """
    Real Name: b'historical extraction minerals rest subtin'
    Original Eqn: b'([(1994,2016)-(184000,317350)],(1994,184000),(1995,188970),(1996,195960),(1997,210950),(1998,205900),\\\\ (1999,197850),(2000,237860),(2001,221830),(2002,248720),(2003,206510),\\\\ (2004,263350),(2005,289200),(2006,300610),(2007,317350),(2008,294830),\\\\ (2009,251880),(2010,252040),(2011,229800),(2012,223630),(2013,276260),\\\\ (2014,257510),(2015,249220),(2016,228660))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        184000, 188970, 195960, 210950, 205900, 197850, 237860, 221830, 248720, 206510, 263350,
        289200, 300610, 317350, 294830, 251880, 252040, 229800, 223630, 276260, 257510, 249220,
        228660
    ])


def historical_extraction_minerals_rest_subsoda_ash(x):
    """
    Real Name: b'historical extraction minerals rest subsoda ash'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_substeel(x):
    """
    Real Name: b'historical extraction minerals rest substeel'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subsynthetic_oil(x):
    """
    Real Name: b'historical extraction minerals rest subsynthetic oil'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subtellurium(x):
    """
    Real Name: b'historical extraction minerals rest subtellurium'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subtitanium(x):
    """
    Real Name: b'historical extraction minerals rest subtitanium'
    Original Eqn: b'([(1994,2016)-(3600000,7399740)],(1994,3600000),(1995,3814000),(1996,4015000),(1997,4055000),(1998,4260000),\\\\ (1999,4500000),(2000,4700000),(2001,5000000),(2002,4800000),(2003,5299990),\\\\ (2004,4999990),(2005,5199990),(2006,5799980),(2007,6289960),(2008,6389940),\\\\ (2009,5799880),(2010,6399810),(2011,6699790),(2012,7229760),(2013,7399740),\\\\ (2014,6039590),(2015,6939440),(2016,6599270))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        3600000, 3814000, 4015000, 4055000, 4260000, 4500000, 4700000, 5000000, 4800000, 5299990,
        4999990, 5199990, 5799980, 6289960, 6389940, 5799880, 6399810, 6699790, 7229760, 7399740,
        6039590, 6939440, 6599270
    ])


def historical_extraction_minerals_rest_subtitanium_dioxide(x):
    """
    Real Name: b'historical extraction minerals rest subtitanium dioxide'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subvanadium(x):
    """
    Real Name: b'historical extraction minerals rest subvanadium'
    Original Eqn: b'([(1994,2016)-(33700,82670)],(1994,33900),(1995,33700),(1996,35100),(1997,37100),(1998,41800),\\\\ (1999,42800),(2000,43000),(2001,58000),(2002,60000),(2003,41000),\\\\ (2004,40200),(2005,58200),(2006,55700),(2007,58500),(2008,55500),\\\\ (2009,53490),(2010,57590),(2011,62380),(2012,73980),(2013,78980),\\\\ (2014,82670),(2015,77760),(2016,75940))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        33900, 33700, 35100, 37100, 41800, 42800, 43000, 58000, 60000, 41000, 40200, 58200, 55700,
        58500, 55500, 53490, 57590, 62380, 73980, 78980, 82670, 77760, 75940
    ])


def historical_extraction_minerals_rest_subwires(x):
    """
    Real Name: b'historical extraction minerals rest subwires'
    Original Eqn: b'([(1994,2016)-(0,0)],(1994,0),(1995,0),(1996,0),(1997,0),(1998,0),\\\\ (1999,0),(2000,0),(2001,0),(2002,0),(2003,0),\\\\ (2004,0),(2005,0),(2006,0),(2007,0),(2008,0),\\\\ (2009,0),(2010,0),(2011,0),(2012,0),(2013,0),\\\\ (2014,0),(2015,0),(2016,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historical_extraction_minerals_rest_subzinc(x):
    """
    Real Name: b'historical extraction minerals rest subzinc'
    Original Eqn: b'([(1994,2016)-(6810000,13493710)],(1994,6810000),(1995,7119990),(1996,7439990),(1997,7459980),(1998,7549970),\\\\ (1999,8039950),(2000,8729950),(2001,8849940),(2002,8359900),(2003,9009830),\\\\ (2004,9599770),(2005,9799700),(2006,9999480),(2007,10898960),(2008,11598360),\\\\ (2009,11196900),(2010,11995070),(2011,12794550),(2012,13493710),(2013,13393260),\\\\ (2014,13289410),(2015,12785320),(2016,11881060))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
        2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        6810000, 7119990, 7439990, 7459980, 7549970, 8039950, 8729950, 8849940, 8359900, 9009830,
        9599770, 9799700, 9999480, 10898960, 11598360, 11196900, 11995070, 12794550, 13493710,
        13393260, 13289410, 12785320, 11881060
    ])


def start_production_biofuels(x):
    """
    Real Name: b'start production biofuels'
    Original Eqn: b'([(0,14)-(0.0,11752.602921107493)],(0,846.5825944871467),(1,1810.3039684919459),(2,2851.45794782365),(3,1759.0104688962037),(4,3204.9937558820748),\\\\ (5,6015.641852769073),(6,9035.178358448335),(7,11752.602921107493),(8,5450.94157715125),(9,7699.6114069983305),\\\\ (10,1558.1122306438265),(11,1115.666955235938),(12,4982.002823415249),(13,6947.042164021972),(14,0.0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [
        846.5825944871467, 1810.3039684919459, 2851.45794782365, 1759.0104688962037,
        3204.9937558820748, 6015.641852769073, 9035.178358448335, 11752.602921107493,
        5450.94157715125, 7699.6114069983305, 1558.1122306438265, 1115.666955235938,
        4982.002823415249, 6947.042164021972, 0.0
    ])


def historic_res_capacity_for_heat_nc_subsolar_heat(x):
    """
    Real Name: b'historic res capacity for heat nc subsolar heat'
    Original Eqn: b'([(1995,2014)-(0.03252055114522492,0.41)],(1995,0.03252055114522492),(1996,0.037030040661937866),(1997,0.04216484232697614),(1998,0.04801166557416679),(1999,0.05466924347374749),\\\\ (2000,0.06225),(2001,0.0685),(2002,0.0756),(2003,0.0849),(2004,0.09559999999999999),\\\\ (2005,0.10940000000000001),(2006,0.12459999999999999),(2007,0.1454),(2008,0.1707),(2009,0.2036),\\\\ (2010,0.24230000000000002),(2011,0.2863),(2012,0.33080000000000004),(2013,0.3757),(2014,0.41))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.03252055114522492, 0.037030040661937866, 0.04216484232697614, 0.04801166557416679,
        0.05466924347374749, 0.06225, 0.0685, 0.0756, 0.0849, 0.09559999999999999,
        0.10940000000000001, 0.12459999999999999, 0.1454, 0.1707, 0.2036, 0.24230000000000002,
        0.2863, 0.33080000000000004, 0.3757, 0.41
    ])


def historic_res_capacity_for_heat_nc_subgeot_heat(x):
    """
    Real Name: b'historic res capacity for heat nc subgeot heat'
    Original Eqn: b'([(1995,2014)-(0.0171805111069092,0.07032899999999999)],(1995,0.0171805111069092),(1996,0.01850341046214121),(1997,0.01992817306772608),(1998,0.021462642393940985),(1999,0.02311526585827444),\\\\ (2000,0.024895141329361572),(2001,0.026812067211722412),(2002,0.028876596387025034),(2003,0.031100094308825963),(2004,0.03349480157060556),\\\\ (2005,0.036073901291542185),(2006,0.03885159169099093),(2007,0.04184316425119723),(2008,0.04506508789853942),(2009,0.04853509966672695),\\\\ (2010,0.05227230234106492),(2011,0.05629726962132692),(2012,0.060632159382169086),(2013,0.0653008356545961),(2014,0.07032899999999999))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.0171805111069092, 0.01850341046214121, 0.01992817306772608, 0.021462642393940985,
        0.02311526585827444, 0.024895141329361572, 0.026812067211722412, 0.028876596387025034,
        0.031100094308825963, 0.03349480157060556, 0.036073901291542185, 0.03885159169099093,
        0.04184316425119723, 0.04506508789853942, 0.04853509966672695, 0.05227230234106492,
        0.05629726962132692, 0.060632159382169086, 0.0653008356545961, 0.07032899999999999
    ])


def historic_res_capacity_for_heat_nc_subsolid_bioe_heat(x):
    """
    Real Name: b'historic res capacity for heat nc subsolid bioe heat'
    Original Eqn: b'([(1995,2014)-(0.3731539881219632,0.7923719533228895)],(1995,0.3731539881219632),(1996,0.3882404414710075),(1997,0.40393683356356724),(1998,0.42026782395760703),(1999,0.43725906918628854),\\\\ (2000,0.4549372630652439),(2001,0.4733301786294544),(2002,0.4924667117656194),(2003,0.5123769266085623),(2004,0.533092102772994),\\\\ (2005,0.554644784494836),(2006,0.5770688317593051),(2007,0.6003994734960852),(2008,0.6246733629251563),(2009,0.6499286351402311),\\\\ (2010,0.6762049670202656),(2011,0.7035436395631648),(2012,0.7319876027396146),(2013,0.7615815429689244),(2014,0.7923719533228895))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.3731539881219632, 0.3882404414710075, 0.40393683356356724, 0.42026782395760703,
        0.43725906918628854, 0.4549372630652439, 0.4733301786294544, 0.4924667117656194,
        0.5123769266085623, 0.533092102772994, 0.554644784494836, 0.5770688317593051,
        0.6003994734960852, 0.6246733629251563, 0.6499286351402311, 0.6762049670202656,
        0.7035436395631648, 0.7319876027396146, 0.7615815429689244, 0.7923719533228895
    ])


def historic_share_of_transformation_losses_vs_extraction_subliquids(x):
    """
    Real Name: b'historic share of transformation losses vs extraction subliquids'
    Original Eqn: b'([(1995,2014)-(0.008188000564044163,0.020291121242449806)],(1995,0.01605706386987077),(1996,0.013375704567402669),(1997,0.01129379949353825),(1998,0.01014342848294583),(1999,0.011490351286760049),\\\\ (2000,0.009944630113635408),(2001,0.009105457515074949),(2002,0.010502419167205769),(2003,0.010548036524274081),(2004,0.009593662119669003),\\\\ (2005,0.010125399533825435),(2006,0.011405448684794902),(2007,0.008476172840581088),(2008,0.009926004318436333),(2009,0.01357902103740488),\\\\ (2010,0.008188000564044163),(2011,0.009297613425131876),(2012,0.020291121242449806),(2013,0.015035909876251948),(2014,0.01611299762406862))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.01605706386987077, 0.013375704567402669, 0.01129379949353825, 0.01014342848294583,
        0.011490351286760049, 0.009944630113635408, 0.009105457515074949, 0.010502419167205769,
        0.010548036524274081, 0.009593662119669003, 0.010125399533825435, 0.011405448684794902,
        0.008476172840581088, 0.009926004318436333, 0.01357902103740488, 0.008188000564044163,
        0.009297613425131876, 0.020291121242449806, 0.015035909876251948, 0.01611299762406862
    ])


def historic_share_of_transformation_losses_vs_extraction_subsolids(x):
    """
    Real Name: b'historic share of transformation losses vs extraction subsolids'
    Original Eqn: b'([(1995,2014)-(0.11836657177817682,0.1330103435651417)],(1995,0.12808887489468548),(1996,0.12419446569792036),(1997,0.1252050437569366),(1998,0.11935691213136902),(1999,0.12016837210710733),\\\\ (2000,0.12425103898164969),(2001,0.11836657177817682),(2002,0.11980088894829675),(2003,0.12262630759437118),(2004,0.12004068583025358),\\\\ (2005,0.12182831042908908),(2006,0.1260774488688789),(2007,0.12589138460016347),(2008,0.12208371603473156),(2009,0.12167722490071634),\\\\ (2010,0.1253090144654484),(2011,0.1249926742022905),(2012,0.12795495498588333),(2013,0.1330103435651417),(2014,0.13218471066181914))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.12808887489468548, 0.12419446569792036, 0.1252050437569366, 0.11935691213136902,
        0.12016837210710733, 0.12425103898164969, 0.11836657177817682, 0.11980088894829675,
        0.12262630759437118, 0.12004068583025358, 0.12182831042908908, 0.1260774488688789,
        0.12589138460016347, 0.12208371603473156, 0.12167722490071634, 0.1253090144654484,
        0.1249926742022905, 0.12795495498588333, 0.1330103435651417, 0.13218471066181914
    ])


def ratio_gain_gas_vs_lose_solids_in_tranf_processes(x):
    """
    Real Name: b'ratio gain gas vs lose solids in tranf processes'
    Original Eqn: b'([(1995,2014)-(-0.47767082024331714,-0.419986716594219)],(1995,-0.4655436785765454),(1996,-0.47767082024331714),(1997,-0.4613465490489168),(1998,-0.4638943144481499),(1999,-0.4594885439207112),\\\\ (2000,-0.4471825571722795),(2001,-0.4450852126345265),(2002,-0.4481817224089238),(2003,-0.43264382276329605),(2004,-0.43190874162897963),\\\\ (2005,-0.4483483475515704),(2006,-0.44555528830304947),(2007,-0.44797554896001957),(2008,-0.45012744230484714),(2009,-0.43332372797703317),\\\\ (2010,-0.44871221929050276),(2011,-0.4493572878390711),(2012,-0.42914870047197806),(2013,-0.4229488604826579),(2014,-0.419986716594219))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        -0.4655436785765454, -0.47767082024331714, -0.4613465490489168, -0.4638943144481499,
        -0.4594885439207112, -0.4471825571722795, -0.4450852126345265, -0.4481817224089238,
        -0.43264382276329605, -0.43190874162897963, -0.4483483475515704, -0.44555528830304947,
        -0.44797554896001957, -0.45012744230484714, -0.43332372797703317, -0.44871221929050276,
        -0.4493572878390711, -0.42914870047197806, -0.4229488604826579, -0.419986716594219
    ])


def historic_share_of_losses_vs_extraction_subliquids(x):
    """
    Real Name: b'historic share of losses vs extraction subliquids'
    Original Eqn: b'([(1995,2009)-(0.0012739789373926223,0.0018991216520622383)],(1995,0.0012739789373926223),(1996,0.0017486800026021427),(1997,0.0013106160395248033),(1998,0.0015007993499810536),(1999,0.0015448879729707073),\\\\ (2000,0.0017210004587693457),(2001,0.0016050651209882875),(2002,0.001608462807127648),(2003,0.0016644010289518145),(2004,0.0016083865954213087),\\\\ (2005,0.0017099881829806055),(2006,0.0018255697673978206),(2007,0.0015685355302594128),(2008,0.0018991216520622383),(2009,0.0017500263224406436))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.0012739789373926223, 0.0017486800026021427, 0.0013106160395248033, 0.0015007993499810536,
        0.0015448879729707073, 0.0017210004587693457, 0.0016050651209882875, 0.001608462807127648,
        0.0016644010289518145, 0.0016083865954213087, 0.0017099881829806055, 0.0018255697673978206,
        0.0015685355302594128, 0.0018991216520622383, 0.0017500263224406436
    ])


def historic_share_of_losses_vs_extraction_subsolids(x):
    """
    Real Name: b'historic share of losses vs extraction subsolids'
    Original Eqn: b'([(1995,2009)-(0.0006342725505040347,0.0038436874766076485)],(1995,0.0038436874766076485),(1996,0.003489742533787759),(1997,0.0027225260873578864),(1998,0.0026049521185396614),(1999,0.0026362712696692743),\\\\ (2000,0.001098585769199882),(2001,0.0006980968889870701),(2002,0.0006737200345284238),(2003,0.0008583882245816353),(2004,0.0009023672127944747),\\\\ (2005,0.0009568153334068469),(2006,0.0008955097842159121),(2007,0.0010495767208806045),(2008,0.0008108439599839434),(2009,0.0006342725505040347))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.0038436874766076485, 0.003489742533787759, 0.0027225260873578864, 0.0026049521185396614,
        0.0026362712696692743, 0.001098585769199882, 0.0006980968889870701, 0.0006737200345284238,
        0.0008583882245816353, 0.0009023672127944747, 0.0009568153334068469, 0.0008955097842159121,
        0.0010495767208806045, 0.0008108439599839434, 0.0006342725505040347
    ])


def historic_share_of_losses_vs_extraction_subgases(x):
    """
    Real Name: b'historic share of losses vs extraction subgases'
    Original Eqn: b'([(1995,2009)-(0.006639624981043146,0.010421118505311026)],(1995,0.009422896256783414),(1996,0.010421118505311026),(1997,0.008944163046561274),(1998,0.008947414438666463),(1999,0.008670592726980444),\\\\ (2000,0.008904855075100917),(2001,0.007845516574254089),(2002,0.007085866070235719),(2003,0.006639624981043146),(2004,0.007052502263863183),\\\\ (2005,0.00934137005114715),(2006,0.009487119248233027),(2007,0.007689650174055921),(2008,0.008058662926939446),(2009,0.007826223652392038))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.009422896256783414, 0.010421118505311026, 0.008944163046561274, 0.008947414438666463,
            0.008670592726980444, 0.008904855075100917, 0.007845516574254089, 0.007085866070235719,
            0.006639624981043146, 0.007052502263863183, 0.00934137005114715, 0.009487119248233027,
            0.007689650174055921, 0.008058662926939446, 0.007826223652392038
        ])


def historic_demand_by_sector_subagriculture_hunting_forestry_and_fishing(x):
    """
    Real Name: b'historic demand by sector subagriculture hunting forestry and fishing'
    Original Eqn: b'([(1995,2009)-(821277.3516440002,1025427.57278)],(1995,821277.3516440002),(1996,835480.3083830001),(1997,852339.710031),(1998,867561.326752),(1999,888737.4700559999),\\\\ (2000,889964.025429),(2001,898181.2951590001),(2002,913098.1065810001),(2003,929168.457933),(2004,940175.14705),\\\\ (2005,938211.6497899999),(2006,950724.4604299999),(2007,953269.03026),(2008,1000267.1132700001),(2009,1025427.57278))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            821277.3516440002, 835480.3083830001, 852339.710031, 867561.326752, 888737.4700559999,
            889964.025429, 898181.2951590001, 913098.1065810001, 929168.457933, 940175.14705,
            938211.6497899999, 950724.4604299999, 953269.03026, 1000267.1132700001, 1025427.57278
        ])


def historic_demand_by_sector_submining_and_quarrying(x):
    """
    Real Name: b'historic demand by sector submining and quarrying'
    Original Eqn: b'([(1995,2009)-(89949.42214700002,171002.8987663)],(1995,106956.558),(1996,101326.61625099998),(1997,111658.141394),(1998,89949.42214700002),(1999,97189.104822),\\\\ (2000,113437.34111929999),(2001,118329.25110650001),(2002,115389.89345049998),(2003,114746.10045029999),(2004,123733.9133598),\\\\ (2005,140981.9255457),(2006,164113.0972093),(2007,158758.56715390002),(2008,171002.8987663),(2009,125310.6947264))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            106956.558, 101326.61625099998, 111658.141394, 89949.42214700002, 97189.104822,
            113437.34111929999, 118329.25110650001, 115389.89345049998, 114746.10045029999,
            123733.9133598, 140981.9255457, 164113.0972093, 158758.56715390002, 171002.8987663,
            125310.6947264
        ])


def historic_demand_by_sector_subfood_beverages_and_tobacco(x):
    """
    Real Name: b'historic demand by sector subfood beverages and tobacco'
    Original Eqn: b'([(1995,2009)-(1761460.089629,2285147.92467)],(1995,1761460.089629),(1996,1768733.999874),(1997,1810212.34125),(1998,1861146.10074),(1999,1921397.32094),\\\\ (2000,1967617.76054),(2001,1982124.37565),(2002,1977751.3650200001),(2003,2016883.86587),(2004,2061797.69482),\\\\ (2005,2122361.6047400003),(2006,2188629.83772),(2007,2273095.40383),(2008,2285147.92467),(2009,2264271.11142))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1761460.089629, 1768733.999874, 1810212.34125, 1861146.10074, 1921397.32094,
            1967617.76054, 1982124.37565, 1977751.3650200001, 2016883.86587, 2061797.69482,
            2122361.6047400003, 2188629.83772, 2273095.40383, 2285147.92467, 2264271.11142
        ])


def historic_demand_by_sector_subtextiles_and_textile_products(x):
    """
    Real Name: b'historic demand by sector subtextiles and textile products'
    Original Eqn: b'([(1995,2009)-(496732.7349816,647357.3118739999)],(1995,500387.93122930004),(1996,496732.7349816),(1997,502418.7662404),(1998,505669.1392506),(1999,516506.8589314),\\\\ (2000,543756.6590378999),(2001,544729.2685248),(2002,549154.9920234001),(2003,546981.0669373),(2004,562149.7308112),\\\\ (2005,581835.5048554),(2006,616268.9163088),(2007,643652.2674367),(2008,647357.3118739999),(2009,614923.9903501001))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            500387.93122930004, 496732.7349816, 502418.7662404, 505669.1392506, 516506.8589314,
            543756.6590378999, 544729.2685248, 549154.9920234001, 546981.0669373, 562149.7308112,
            581835.5048554, 616268.9163088, 643652.2674367, 647357.3118739999, 614923.9903501001
        ])


def historic_demand_by_sector_subleather_leather_and_footwear(x):
    """
    Real Name: b'historic demand by sector subleather leather and footwear'
    Original Eqn: b'([(1995,2009)-(100658.93459827,124745.49981770002)],(1995,102249.58580294),(1996,102739.65463260999),(1997,102069.93810505999),(1998,101012.66603034),(1999,100658.93459827),\\\\ (2000,106023.70085458002),(2001,107789.0621533),(2002,105896.79562564),(2003,106633.31462076001),(2004,109273.86423253999),\\\\ (2005,110422.78371366),(2006,115698.4457478),(2007,121106.74319760001),(2008,124745.49981770002),(2009,116785.2113091))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            102249.58580294, 102739.65463260999, 102069.93810505999, 101012.66603034,
            100658.93459827, 106023.70085458002, 107789.0621533, 105896.79562564,
            106633.31462076001, 109273.86423253999, 110422.78371366, 115698.4457478,
            121106.74319760001, 124745.49981770002, 116785.2113091
        ])


def historic_demand_by_sector_subwood_and_products_of_wood_and_cork(x):
    """
    Real Name: b'historic demand by sector subwood and products of wood and cork'
    Original Eqn: b'([(1995,2009)-(39162.763552,62268.855379600005)],(1995,58713.0731415),(1996,56674.16311640001),(1997,62268.855379600005),(1998,58158.672443799995),(1999,57872.8769209),\\\\ (2000,58320.3595168),(2001,53786.765614899996),(2002,52005.7191848),(2003,50443.2999891),(2004,50103.892673500006),\\\\ (2005,51304.7731625),(2006,51145.0856719),(2007,49934.6358646),(2008,44747.9546273),(2009,39162.763552))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        58713.0731415, 56674.16311640001, 62268.855379600005, 58158.672443799995, 57872.8769209,
        58320.3595168, 53786.765614899996, 52005.7191848, 50443.2999891, 50103.892673500006,
        51304.7731625, 51145.0856719, 49934.6358646, 44747.9546273, 39162.763552
    ])


def historic_demand_by_sector_subpulp_paper_printing_and_publishing(x):
    """
    Real Name: b'historic demand by sector subpulp paper printing and publishing'
    Original Eqn: b'([(1995,2009)-(261905.83585600002,324466.0879200001)],(1995,261905.83585600002),(1996,265565.90128099994),(1997,279257.067462),(1998,279803.98620299995),(1999,291755.846006),\\\\ (2000,308452.43508),(2001,304893.28129199997),(2002,298083.50359),(2003,297931.183945),(2004,308944.077062),\\\\ (2005,313511.24393999996),(2006,320463.29508),(2007,324466.0879200001),(2008,321599.71193000005),(2009,295319.46288600005))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        261905.83585600002, 265565.90128099994, 279257.067462, 279803.98620299995, 291755.846006,
        308452.43508, 304893.28129199997, 298083.50359, 297931.183945, 308944.077062,
        313511.24393999996, 320463.29508, 324466.0879200001, 321599.71193000005, 295319.46288600005
    ])


def historic_demand_by_sector_subcoke_refined_petroleum_and_nuclear_fuel(x):
    """
    Real Name: b'historic demand by sector subcoke refined petroleum and nuclear fuel'
    Original Eqn: b'([(1995,2009)-(224714.8110007,312224.22007199994)],(1995,224714.8110007),(1996,236897.91061300001),(1997,243059.31450900002),(1998,236224.16534899996),(1999,247056.70687700002),\\\\ (2000,256171.347335),(2001,263672.271245),(2002,255718.812736),(2003,253104.36730500002),(2004,262416.302171),\\\\ (2005,274366.25466000004),(2006,288918.56216400006),(2007,284291.709385),(2008,311399.94481899997),(2009,312224.22007199994))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            224714.8110007, 236897.91061300001, 243059.31450900002, 236224.16534899996,
            247056.70687700002, 256171.347335, 263672.271245, 255718.812736, 253104.36730500002,
            262416.302171, 274366.25466000004, 288918.56216400006, 284291.709385,
            311399.94481899997, 312224.22007199994
        ])


def historic_demand_by_sector_subchemicals_and_chemical_products(x):
    """
    Real Name: b'historic demand by sector subchemicals and chemical products'
    Original Eqn: b'([(1995,2009)-(401281.55396000005,593443.6471099999)],(1995,401281.55396000005),(1996,413943.55226),(1997,442258.04358),(1998,446961.19391),(1999,475205.06678),\\\\ (2000,488320.40037),(2001,497658.60743000003),(2002,516406.78763999994),(2003,526275.95114),(2004,547978.1543599999),\\\\ (2005,543997.78205),(2006,561054.6723000001),(2007,593443.6471099999),(2008,584461.54249),(2009,585171.71828))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            401281.55396000005, 413943.55226, 442258.04358, 446961.19391, 475205.06678,
            488320.40037, 497658.60743000003, 516406.78763999994, 526275.95114, 547978.1543599999,
            543997.78205, 561054.6723000001, 593443.6471099999, 584461.54249, 585171.71828
        ])


def historic_demand_by_sector_subrubber_and_plastics(x):
    """
    Real Name: b'historic demand by sector subrubber and plastics'
    Original Eqn: b'([(1995,2009)-(113840.58768099999,148650.51235210002)],(1995,113840.58768099999),(1996,113945.8747367),(1997,121180.6431085),(1998,119625.4361529),(1999,124489.8262263),\\\\ (2000,128815.7121217),(2001,126288.11073310001),(2002,124339.4912779),(2003,125704.6160781),(2004,134120.678324),\\\\ (2005,136741.1405684),(2006,144708.426336),(2007,147552.14972770002),(2008,148650.51235210002),(2009,138539.8729385))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            113840.58768099999, 113945.8747367, 121180.6431085, 119625.4361529, 124489.8262263,
            128815.7121217, 126288.11073310001, 124339.4912779, 125704.6160781, 134120.678324,
            136741.1405684, 144708.426336, 147552.14972770002, 148650.51235210002, 138539.8729385
        ])


def historic_demand_by_sector_subother_non_metalic_mineral(x):
    """
    Real Name: b'historic demand by sector subother non metalic mineral'
    Original Eqn: b'([(1995,2009)-(55997.3959377,77541.35509950001)],(1995,64807.204056099996),(1996,64640.82182840001),(1997,70114.2305891),(1998,66353.5733206),(1999,70736.5639863),\\\\ (2000,77060.69853259998),(2001,77541.35509950001),(2002,69471.22983340001),(2003,66587.0727681),(2004,66825.3387091),\\\\ (2005,65313.7523083),(2006,66810.5609691),(2007,67500.15473740001),(2008,65682.5872663),(2009,55997.3959377))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            64807.204056099996, 64640.82182840001, 70114.2305891, 66353.5733206, 70736.5639863,
            77060.69853259998, 77541.35509950001, 69471.22983340001, 66587.0727681, 66825.3387091,
            65313.7523083, 66810.5609691, 67500.15473740001, 65682.5872663, 55997.3959377
        ])


def historic_demand_by_sector_subbasic_metals_and_fabricated_metal(x):
    """
    Real Name: b'historic demand by sector subbasic metals and fabricated metal'
    Original Eqn: b'([(1995,2009)-(243740.63525680001,304571.7293547)],(1995,259983.9362259),(1996,271267.73239910003),(1997,284850.0447308),(1998,267256.15758),(1999,270201.303311),\\\\ (2000,293898.83040549996),(2001,282533.8759788),(2002,267336.84316630004),(2003,274795.9357562),(2004,275358.1269384),\\\\ (2005,281170.5760759),(2006,304571.7293547),(2007,295717.7282419),(2008,290339.8805475),(2009,243740.63525680001))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            259983.9362259, 271267.73239910003, 284850.0447308, 267256.15758, 270201.303311,
            293898.83040549996, 282533.8759788, 267336.84316630004, 274795.9357562, 275358.1269384,
            281170.5760759, 304571.7293547, 295717.7282419, 290339.8805475, 243740.63525680001
        ])


def historic_demand_by_sector_submachinery_nec(x):
    """
    Real Name: b'historic demand by sector submachinery nec'
    Original Eqn: b'([(1995,2009)-(777405.4233899999,1257063.9259199998)],(1995,777405.4233899999),(1996,801501.20794),(1997,832540.52744),(1998,835703.45149),(1999,819924.72297),\\\\ (2000,902042.814358),(2001,879577.6255900001),(2002,849484.3911969999),(2003,920199.3619949999),(2004,987875.3180239999),\\\\ (2005,1066212.241217),(2006,1141738.3607909998),(2007,1221521.2313239998),(2008,1257063.9259199998),(2009,1056073.346949))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        777405.4233899999, 801501.20794, 832540.52744, 835703.45149, 819924.72297, 902042.814358,
        879577.6255900001, 849484.3911969999, 920199.3619949999, 987875.3180239999, 1066212.241217,
        1141738.3607909998, 1221521.2313239998, 1257063.9259199998, 1056073.346949
    ])


def historic_demand_by_sector_subelectrical_and_optical_equipment(x):
    """
    Real Name: b'historic demand by sector subelectrical and optical equipment'
    Original Eqn: b'([(1995,2009)-(895155.41074,2060699.9134699998)],(1995,895155.41074),(1996,976698.0374099999),(1997,1094417.91334),(1998,1124876.11626),(1999,1244519.2935199998),\\\\ (2000,1454204.57718),(2001,1406121.56144),(2002,1335929.5425900002),(2003,1438594.87697),(2004,1580086.59112),\\\\ (2005,1690569.5772499999),(2006,1851443.85137),(2007,1990232.9053299997),(2008,2060699.9134699998),(2009,1892591.02717))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        895155.41074, 976698.0374099999, 1094417.91334, 1124876.11626, 1244519.2935199998,
        1454204.57718, 1406121.56144, 1335929.5425900002, 1438594.87697, 1580086.59112,
        1690569.5772499999, 1851443.85137, 1990232.9053299997, 2060699.9134699998, 1892591.02717
    ])


def historic_demand_by_sector_subtransport_equipment(x):
    """
    Real Name: b'historic demand by sector subtransport equipment'
    Original Eqn: b'([(1995,2009)-(1109416.0565499999,1931330.63335)],(1995,1109416.0565499999),(1996,1135802.47235),(1997,1226890.2660299998),(1998,1276699.31241),(1999,1373687.11738),\\\\ (2000,1384100.43887),(2001,1397812.84453),(2002,1420318.7065599998),(2003,1501915.9688499998),(2004,1596650.4719800001),\\\\ (2005,1691087.47325),(2006,1786616.31244),(2007,1931330.63335),(2008,1876568.46472),(2009,1617711.04039))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        1109416.0565499999, 1135802.47235, 1226890.2660299998, 1276699.31241, 1373687.11738,
        1384100.43887, 1397812.84453, 1420318.7065599998, 1501915.9688499998, 1596650.4719800001,
        1691087.47325, 1786616.31244, 1931330.63335, 1876568.46472, 1617711.04039
    ])


def historic_demand_by_sector_submanufacturing_nec_recycling(x):
    """
    Real Name: b'historic demand by sector submanufacturing nec recycling'
    Original Eqn: b'([(1995,2009)-(323158.75545460003,441841.0405447)],(1995,323158.75545460003),(1996,335321.0626389),(1997,355650.8314714999),(1998,365768.3166445),(1999,378992.4530009999),\\\\ (2000,396661.51933479996),(2001,395347.88420100004),(2002,396660.0778211),(2003,390690.83852200006),(2004,396934.2083292),\\\\ (2005,413810.3586759001),(2006,433585.8377551),(2007,438903.5490424001),(2008,441841.0405447),(2009,408741.12856210006))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        323158.75545460003, 335321.0626389, 355650.8314714999, 365768.3166445, 378992.4530009999,
        396661.51933479996, 395347.88420100004, 396660.0778211, 390690.83852200006, 396934.2083292,
        413810.3586759001, 433585.8377551, 438903.5490424001, 441841.0405447, 408741.12856210006
    ])


def historic_demand_by_sector_subelectricity_gas_and_water_supply(x):
    """
    Real Name: b'historic demand by sector subelectricity gas and water supply'
    Original Eqn: b'([(1995,2009)-(440415.90923,635631.9996700002)],(1995,440415.90923),(1996,458865.99158999993),(1997,459269.43363),(1998,471152.12711999996),(1999,458875.22546000005),\\\\ (2000,478247.15768),(2001,488833.95616),(2002,498522.19292),(2003,519711.2229899999),(2004,534402.90054),\\\\ (2005,564518.89212),(2006,573584.0885200001),(2007,591804.6821),(2008,635631.9996700002),(2009,608763.13434))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            440415.90923, 458865.99158999993, 459269.43363, 471152.12711999996, 458875.22546000005,
            478247.15768, 488833.95616, 498522.19292, 519711.2229899999, 534402.90054,
            564518.89212, 573584.0885200001, 591804.6821, 635631.9996700002, 608763.13434
        ])


def historic_demand_by_sector_subconstruction(x):
    """
    Real Name: b'historic demand by sector subconstruction'
    Original Eqn: b'([(1995,2009)-(3373315.0363289,4452435.567324)],(1995,3373315.0363289),(1996,3434879.9374897),(1997,3485285.9841774),(1998,3529125.8090693),(1999,3614579.819173),\\\\ (2000,3641791.5051483),(2001,3654702.3182296003),(2002,3656187.6076439996),(2003,3760508.5251406003),(2004,3902283.11202),\\\\ (2005,4076951.045161),(2006,4285140.697028999),(2007,4449914.955079299),(2008,4452435.567324),(2009,4336102.287169401))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        3373315.0363289, 3434879.9374897, 3485285.9841774, 3529125.8090693, 3614579.819173,
        3641791.5051483, 3654702.3182296003, 3656187.6076439996, 3760508.5251406003, 3902283.11202,
        4076951.045161, 4285140.697028999, 4449914.955079299, 4452435.567324, 4336102.287169401
    ])


def historic_demand_by_sector_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
        x):
    """
    Real Name: b'historic demand by sector subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'
    Original Eqn: b'([(1995,2009)-(352813.949813,519155.96607500006)],(1995,352813.949813),(1996,364987.526195),(1997,374988.41228399996),(1998,390505.4327470001),(1999,415087.193983),\\\\ (2000,426132.658587),(2001,420831.65746899997),(2002,443827.2860779999),(2003,449920.669003),(2004,469539.119757),\\\\ (2005,487527.73227100004),(2006,506476.85412399995),(2007,519155.96607500006),(2008,517059.485185),(2009,470685.328304))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        352813.949813, 364987.526195, 374988.41228399996, 390505.4327470001, 415087.193983,
        426132.658587, 420831.65746899997, 443827.2860779999, 449920.669003, 469539.119757,
        487527.73227100004, 506476.85412399995, 519155.96607500006, 517059.485185, 470685.328304
    ])


def historic_demand_by_sector_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
        x):
    """
    Real Name: b'historic demand by sector subwholesale trade and commissions trade except of motor vehicles and motorcycles'
    Original Eqn: b'([(1995,2009)-(1263743.815819,2126597.04328)],(1995,1263743.815819),(1996,1306432.08967),(1997,1379786.87546),(1998,1434839.818197),(1999,1506643.2353400001),\\\\ (2000,1541085.6627800001),(2001,1571980.7765),(2002,1612734.9313400001),(2003,1679155.55503),(2004,1784506.21438),\\\\ (2005,1855189.96935),(2006,1904291.2269),(2007,2045268.72965),(2008,2126597.04328),(2009,2061884.04247))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1263743.815819, 1306432.08967, 1379786.87546, 1434839.818197, 1506643.2353400001,
            1541085.6627800001, 1571980.7765, 1612734.9313400001, 1679155.55503, 1784506.21438,
            1855189.96935, 1904291.2269, 2045268.72965, 2126597.04328, 2061884.04247
        ])


def historic_demand_by_sector_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
        x):
    """
    Real Name: b'historic demand by sector subretail trade except of motor vehicles and motorcycles repair of household goods'
    Original Eqn: b'([(1995,2009)-(1598464.786877,2260433.2593400003)],(1995,1598464.786877),(1996,1648586.60758),(1997,1685964.6484180002),(1998,1722990.11125),(1999,1789523.4932309997),\\\\ (2000,1850190.8611700002),(2001,1891414.40524),(2002,1923779.9265100001),(2003,1982685.37776),(2004,2043144.18267),\\\\ (2005,2131827.02697),(2006,2203047.24762),(2007,2225281.3843300003),(2008,2260433.2593400003),(2009,2157301.38706))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1598464.786877, 1648586.60758, 1685964.6484180002, 1722990.11125, 1789523.4932309997,
            1850190.8611700002, 1891414.40524, 1923779.9265100001, 1982685.37776, 2043144.18267,
            2131827.02697, 2203047.24762, 2225281.3843300003, 2260433.2593400003, 2157301.38706
        ])


def historic_demand_by_sector_subhotels_and_restaurants(x):
    """
    Real Name: b'historic demand by sector subhotels and restaurants'
    Original Eqn: b'([(1995,2009)-(1135913.8165600002,1544786.7201400003)],(1995,1135913.8165600002),(1996,1162855.3384500002),(1997,1172469.28884),(1998,1214919.2694700002),(1999,1258149.66992),\\\\ (2000,1302468.91283),(2001,1317318.16966),(2002,1330213.84362),(2003,1355117.6058699999),(2004,1391521.7102100002),\\\\ (2005,1442156.8142900004),(2006,1491022.5754500001),(2007,1533115.23302),(2008,1544786.7201400003),(2009,1489192.91292))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        1135913.8165600002, 1162855.3384500002, 1172469.28884, 1214919.2694700002, 1258149.66992,
        1302468.91283, 1317318.16966, 1330213.84362, 1355117.6058699999, 1391521.7102100002,
        1442156.8142900004, 1491022.5754500001, 1533115.23302, 1544786.7201400003, 1489192.91292
    ])


def historic_demand_by_sector_subinland_transport(x):
    """
    Real Name: b'historic demand by sector subinland transport'
    Original Eqn: b'([(1995,2009)-(579016.9834,795106.8757)],(1995,579016.9834),(1996,584911.4735),(1997,600650.3032),(1998,620252.4103999999),(1999,664271.8027000001),\\\\ (2000,656405.2264999999),(2001,655483.6779),(2002,668734.9833999999),(2003,686551.086),(2004,709341.2559999999),\\\\ (2005,726012.1481),(2006,745568.8351999999),(2007,766743.0387),(2008,795106.8757),(2009,775058.13165))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            579016.9834, 584911.4735, 600650.3032, 620252.4103999999, 664271.8027000001,
            656405.2264999999, 655483.6779, 668734.9833999999, 686551.086, 709341.2559999999,
            726012.1481, 745568.8351999999, 766743.0387, 795106.8757, 775058.13165
        ])


def historic_demand_by_sector_subwater_transport(x):
    """
    Real Name: b'historic demand by sector subwater transport'
    Original Eqn: b'([(1995,2009)-(49225.027030000005,112992.41015)],(1995,49225.027030000005),(1996,52377.94612),(1997,56106.39053),(1998,57596.62124),(1999,63663.95427000001),\\\\ (2000,69701.91572),(2001,75626.58343),(2002,74689.24618),(2003,81826.50412000001),(2004,89424.92079999999),\\\\ (2005,91514.71831),(2006,97218.65327),(2007,100111.31591),(2008,112992.41015),(2009,105631.90736))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            49225.027030000005, 52377.94612, 56106.39053, 57596.62124, 63663.95427000001,
            69701.91572, 75626.58343, 74689.24618, 81826.50412000001, 89424.92079999999,
            91514.71831, 97218.65327, 100111.31591, 112992.41015, 105631.90736
        ])


def historic_demand_by_sector_subair_transport(x):
    """
    Real Name: b'historic demand by sector subair transport'
    Original Eqn: b'([(1995,2009)-(143095.69405000002,207776.60457999996)],(1995,143095.69405000002),(1996,154668.3083),(1997,160504.03436000002),(1998,163488.79459),(1999,167379.92006),\\\\ (2000,178105.67977999998),(2001,167901.45130000002),(2002,166335.519676),(2003,171770.97738),(2004,186349.149928),\\\\ (2005,189198.01622999998),(2006,198871.62333),(2007,207776.60457999996),(2008,206423.82469),(2009,188968.02946))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            143095.69405000002, 154668.3083, 160504.03436000002, 163488.79459, 167379.92006,
            178105.67977999998, 167901.45130000002, 166335.519676, 171770.97738, 186349.149928,
            189198.01622999998, 198871.62333, 207776.60457999996, 206423.82469, 188968.02946
        ])


def historic_demand_by_sector_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
        x):
    """
    Real Name: b'historic demand by sector subother supporting and auxiliary transport activities activities of travel agencies'
    Original Eqn: b'([(1995,2009)-(165384.27064,240132.33006)],(1995,165486.95716999998),(1996,165384.27064),(1997,175843.47261000003),(1998,179745.55862000003),(1999,186129.49729),\\\\ (2000,180018.40734000003),(2001,185577.71883),(2002,180602.60449000003),(2003,184531.88577),(2004,194745.12383),\\\\ (2005,205545.08441),(2006,213653.95099999997),(2007,227410.73386),(2008,240132.33006),(2009,238220.93145))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            165486.95716999998, 165384.27064, 175843.47261000003, 179745.55862000003, 186129.49729,
            180018.40734000003, 185577.71883, 180602.60449000003, 184531.88577, 194745.12383,
            205545.08441, 213653.95099999997, 227410.73386, 240132.33006, 238220.93145
        ])


def historic_demand_by_sector_subpost_and_telecommunications(x):
    """
    Real Name: b'historic demand by sector subpost and telecommunications'
    Original Eqn: b'([(1995,2009)-(336812.13262999995,1005773.2609799999)],(1995,336812.13262999995),(1996,367656.51979),(1997,403243.33547),(1998,441682.99098),(1999,507596.44377),\\\\ (2000,579504.20999),(2001,646763.1806800001),(2002,689667.7482999999),(2003,739765.3866699999),(2004,799182.3432199999),\\\\ (2005,840815.0947499999),(2006,888244.47724),(2007,941335.00411),(2008,997668.7938999999),(2009,1005773.2609799999))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        336812.13262999995, 367656.51979, 403243.33547, 441682.99098, 507596.44377, 579504.20999,
        646763.1806800001, 689667.7482999999, 739765.3866699999, 799182.3432199999,
        840815.0947499999, 888244.47724, 941335.00411, 997668.7938999999, 1005773.2609799999
    ])


def historic_demand_by_sector_subfinancial_intermediation(x):
    """
    Real Name: b'historic demand by sector subfinancial intermediation'
    Original Eqn: b'([(1995,2009)-(1035860.0685400001,1987962.3170099999)],(1995,1035860.0685400001),(1996,1057752.5364589998),(1997,1137527.325717),(1998,1176056.461432),(1999,1248309.3130800002),\\\\ (2000,1371926.4410299999),(2001,1393974.3315),(2002,1399563.49432),(2003,1445953.6470100002),(2004,1569038.7126999998),\\\\ (2005,1664819.1774399998),(2006,1796878.4608),(2007,1952596.1780100001),(2008,1987962.3170099999),(2009,1971211.2656500002))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1035860.0685400001, 1057752.5364589998, 1137527.325717, 1176056.461432,
            1248309.3130800002, 1371926.4410299999, 1393974.3315, 1399563.49432,
            1445953.6470100002, 1569038.7126999998, 1664819.1774399998, 1796878.4608,
            1952596.1780100001, 1987962.3170099999, 1971211.2656500002
        ])


def historic_demand_by_sector_subreal_estate_activities(x):
    """
    Real Name: b'historic demand by sector subreal estate activities'
    Original Eqn: b'([(1995,2009)-(2560435.9584529996,3544579.12064)],(1995,2560435.9584529996),(1996,2654649.5703189997),(1997,2701297.424652),(1998,2787885.699962999),(1999,2885024.72414),\\\\ (2000,2953149.4055139995),(2001,3034015.1805149997),(2002,3088175.290212),(2003,3175968.3918589),(2004,3268139.760941),\\\\ (2005,3351133.155774),(2006,3420737.17127),(2007,3479278.0990759996),(2008,3513168.39938),(2009,3544579.12064))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        2560435.9584529996, 2654649.5703189997, 2701297.424652, 2787885.699962999, 2885024.72414,
        2953149.4055139995, 3034015.1805149997, 3088175.290212, 3175968.3918589, 3268139.760941,
        3351133.155774, 3420737.17127, 3479278.0990759996, 3513168.39938, 3544579.12064
    ])


def historic_demand_by_sector_subrenting_od_meq_and_other_business_activities(x):
    """
    Real Name: b'historic demand by sector subrenting od meq and other business activities'
    Original Eqn: b'([(1995,2009)-(715097.6881200001,1497408.79)],(1995,715097.6881200001),(1996,797501.2814),(1997,835585.9882),(1998,927374.2024399999),(1999,1009120.5656999999),\\\\ (2000,1088315.6816),(2001,1127993.1044),(2002,1140984.21059),(2003,1165672.8135),(2004,1214971.802),\\\\ (2005,1258994.5296),(2006,1331339.7985),(2007,1419165.8394),(2008,1497408.79),(2009,1435702.263))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            715097.6881200001, 797501.2814, 835585.9882, 927374.2024399999, 1009120.5656999999,
            1088315.6816, 1127993.1044, 1140984.21059, 1165672.8135, 1214971.802, 1258994.5296,
            1331339.7985, 1419165.8394, 1497408.79, 1435702.263
        ])


def historic_demand_by_sector_subpublic_admin_and_defence_compulsory_social_security(x):
    """
    Real Name: b'historic demand by sector subpublic admin and defence compulsory social security'
    Original Eqn: b'([(1995,2009)-(3163684.928,4451215.852999999)],(1995,3163684.928),(1996,3243750.0253999997),(1997,3285804.0601),(1998,3371778.8820999996),(1999,3522683.9758),\\\\ (2000,3622324.8474),(2001,3719665.8919999995),(2002,3839981.7000999996),(2003,3947516.9477999997),(2004,4051795.136),\\\\ (2005,4081013.6649999996),(2006,4137274.7199999993),(2007,4201002.810999999),(2008,4305412.6680000005),(2009,4451215.852999999))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            3163684.928, 3243750.0253999997, 3285804.0601, 3371778.8820999996, 3522683.9758,
            3622324.8474, 3719665.8919999995, 3839981.7000999996, 3947516.9477999997, 4051795.136,
            4081013.6649999996, 4137274.7199999993, 4201002.810999999, 4305412.6680000005,
            4451215.852999999
        ])


def historic_demand_by_sector_subeducation(x):
    """
    Real Name: b'historic demand by sector subeducation'
    Original Eqn: b'([(1995,2009)-(1176056.855178,1427681.240051)],(1995,1176056.855178),(1996,1187789.1011589998),(1997,1208351.7021030001),(1998,1249417.9983253998),(1999,1293705.199234),\\\\ (2000,1273106.580141),(2001,1290728.985381),(2002,1302962.424367),(2003,1328156.208041),(2004,1350439.9591238),\\\\ (2005,1354468.59733),(2006,1371169.29075),(2007,1397140.7155360002),(2008,1414788.936597),(2009,1427681.240051))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        1176056.855178, 1187789.1011589998, 1208351.7021030001, 1249417.9983253998, 1293705.199234,
        1273106.580141, 1290728.985381, 1302962.424367, 1328156.208041, 1350439.9591238,
        1354468.59733, 1371169.29075, 1397140.7155360002, 1414788.936597, 1427681.240051
    ])


def historic_demand_by_sector_subhealth_and_social_work(x):
    """
    Real Name: b'historic demand by sector subhealth and social work'
    Original Eqn: b'([(1995,2009)-(2116985.945408,3215178.3753789994)],(1995,2116985.945408),(1996,2176783.2387836003),(1997,2219207.0180761),(1998,2281499.2523729997),(1999,2380721.4962919997),\\\\ (2000,2433973.862812),(2001,2511162.247971),(2002,2600103.371875),(2003,2687871.9925499996),(2004,2778897.983662),\\\\ (2005,2904651.5214279997),(2006,2988410.438662),(2007,3089709.4131940003),(2008,3157580.3929769997),(2009,3215178.3753789994))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            2116985.945408, 2176783.2387836003, 2219207.0180761, 2281499.2523729997,
            2380721.4962919997, 2433973.862812, 2511162.247971, 2600103.371875, 2687871.9925499996,
            2778897.983662, 2904651.5214279997, 2988410.438662, 3089709.4131940003,
            3157580.3929769997, 3215178.3753789994
        ])


def historic_demand_by_sector_subother_community_social_and_persona_services(x):
    """
    Real Name: b'historic demand by sector subother community social and persona services'
    Original Eqn: b'([(1995,2009)-(1121312.875,1509352.3303999999)],(1995,1121312.875),(1996,1129908.562),(1997,1134725.674),(1998,1168176.164),(1999,1225040.244),\\\\ (2000,1283243.0548),(2001,1301613.3548),(2002,1340765.8257),(2003,1364030.6045),(2004,1401915.9587000003),\\\\ (2005,1411694.3254000002),(2006,1450671.2885999999),(2007,1486387.1959000002),(2008,1509352.3303999999),(2009,1504855.5695999998))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1121312.875, 1129908.562, 1134725.674, 1168176.164, 1225040.244, 1283243.0548,
            1301613.3548, 1340765.8257, 1364030.6045, 1401915.9587000003, 1411694.3254000002,
            1450671.2885999999, 1486387.1959000002, 1509352.3303999999, 1504855.5695999998
        ])


def historic_demand_by_sector_subprivate_households_with_employed_persons(x):
    """
    Real Name: b'historic demand by sector subprivate households with employed persons'
    Original Eqn: b'([(1995,2009)-(48106.64623337812,59780.91423515376)],(1995,48106.64623337812),(1996,48926.64200190818),(1997,49488.43596377072),(1998,51425.36695231778),(1999,50869.11033087904),\\\\ (2000,52155.816324571155),(2001,52146.134999738344),(2002,52317.25933618104),(2003,53559.402520043535),(2004,54794.767373428214),\\\\ (2005,55162.71588258705),(2006,56378.119990721425),(2007,58766.5993487199),(2008,59780.91423515376),(2009,59073.326054017445))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            48106.64623337812, 48926.64200190818, 49488.43596377072, 51425.36695231778,
            50869.11033087904, 52155.816324571155, 52146.134999738344, 52317.25933618104,
            53559.402520043535, 54794.767373428214, 55162.71588258705, 56378.119990721425,
            58766.5993487199, 59780.91423515376, 59073.326054017445
        ])


def historic_res_capacity_for_heat_com_subsolar_heat(x):
    """
    Real Name: b'historic res capacity for heat com subsolar heat'
    Original Eqn: b'([(1995,2014)-(2.0303326826418786e-06,0.0002493925311845108)],(1995,2.0303326826418786e-06),(1996,2.0303326826418786e-06),(1997,6.4293868283659495e-06),(1998,5.414220487045009e-06),(1999,7.782941950127201e-06),\\\\ (2000,8.121330730567515e-06),(2001,9.136497071888453e-06),(2002,1.2520384876291584e-05),(2003,1.7257827802455968e-05),(2004,1.7257827802455968e-05),\\\\ (2005,1.8611382924217222e-05),(2006,1.658105024157534e-05),(2007,2.0980104387299415e-05),(2008,2.3348825850381605e-05),(2009,4.7036040481203515e-05),\\\\ (2010,6.497064584454012e-05),(2011,9.339530340152642e-05),(2012,0.00014246167656537182),(2013,0.00018137638631600782),(2014,0.0002493925311845108))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        2.0303326826418786e-06, 2.0303326826418786e-06, 6.4293868283659495e-06,
        5.414220487045009e-06, 7.782941950127201e-06, 8.121330730567515e-06, 9.136497071888453e-06,
        1.2520384876291584e-05, 1.7257827802455968e-05, 1.7257827802455968e-05,
        1.8611382924217222e-05, 1.658105024157534e-05, 2.0980104387299415e-05,
        2.3348825850381605e-05, 4.7036040481203515e-05, 6.497064584454012e-05,
        9.339530340152642e-05, 0.00014246167656537182, 0.00018137638631600782,
        0.0002493925311845108
    ])


def historic_res_capacity_for_heat_com_subgeot_heat(x):
    """
    Real Name: b'historic res capacity for heat com subgeot heat'
    Original Eqn: b'([(1995,2014)-(0.0019333400358171797,0.0035817705819221166)],(1995,0.0019992724712776778),(1996,0.0019333400358171797),(1997,0.001957511273499612),(1998,0.0019656481257887483),(1999,0.0020795640578366507),\\\\ (2000,0.002191445776812269),(2001,0.0022711390654088053),(2002,0.00233635354331438),(2003,0.002309190815819764),(2004,0.002360764100181787),\\\\ (2005,0.002849214556714914),(2006,0.002853282982859482),(2007,0.002944702911519773),(2008,0.00304868709739123),(2009,0.0030231996041914363),\\\\ (2010,0.003124551279028173),(2011,0.003072140377518739),(2012,0.003306194540423882),(2013,0.003420230132064272),(2014,0.0035817705819221166))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.0019992724712776778, 0.0019333400358171797, 0.001957511273499612, 0.0019656481257887483,
        0.0020795640578366507, 0.002191445776812269, 0.0022711390654088053, 0.00233635354331438,
        0.002309190815819764, 0.002360764100181787, 0.002849214556714914, 0.002853282982859482,
        0.002944702911519773, 0.00304868709739123, 0.0030231996041914363, 0.003124551279028173,
        0.003072140377518739, 0.003306194540423882, 0.003420230132064272, 0.0035817705819221166
    ])


def historic_res_capacity_for_heat_com_subsolid_bioe_heat(x):
    """
    Real Name: b'historic res capacity for heat com subsolid bioe heat'
    Original Eqn: b'([(1995,2014)-(0.01167364283024201,0.03108885086200959)],(1995,0.01167364283024201),(1996,0.014963216653269409),(1997,0.014075786414101827),(1998,0.014111998996576254),(1999,0.013306506859960276),\\\\ (2000,0.01325437596189726),(2001,0.014136859473511416),(2002,0.014877727054012784),(2003,0.016775811784095436),(2004,0.017262303413099544),\\\\ (2005,0.01806468799009863),(2006,0.01981614664193105),(2007,0.020802194334247032),(2008,0.02147558347735297),(2009,0.022805745832552054),\\\\ (2010,0.02708885085880959),(2011,0.0262413115379895),(2012,0.029897640815394526),(2013,0.030840372931826027),(2014,0.03108885086200959))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.01167364283024201, 0.014963216653269409, 0.014075786414101827, 0.014111998996576254,
        0.013306506859960276, 0.01325437596189726, 0.014136859473511416, 0.014877727054012784,
        0.016775811784095436, 0.017262303413099544, 0.01806468799009863, 0.01981614664193105,
        0.020802194334247032, 0.02147558347735297, 0.022805745832552054, 0.02708885085880959,
        0.0262413115379895, 0.029897640815394526, 0.030840372931826027, 0.03108885086200959
    ])


def share_inventories_next_step_subagriculture_hunting_forestry_and_fishing(x):
    """
    Real Name: b'share inventories next step subagriculture hunting forestry and fishing'
    Original Eqn: b'([(1995,2008)-(0.009276799405214435,0.041942233336400334)],(1995,0.03461669019581704),(1996,0.041942233336400334),(1997,0.009276799405214435),(1998,0.016075123961072323),(1999,0.024217754183502624),\\\\ (2000,0.032446087618470246),(2001,0.013212424725283112),(2002,0.03376795965480616),(2003,0.03382604411506391),(2004,0.018401487557593552),\\\\ (2005,0.01982139598204595),(2006,0.018904899276004725),(2007,0.015809658030545876),(2008,0.010160482589476171))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.03461669019581704, 0.041942233336400334, 0.009276799405214435, 0.016075123961072323,
            0.024217754183502624, 0.032446087618470246, 0.013212424725283112, 0.03376795965480616,
            0.03382604411506391, 0.018401487557593552, 0.01982139598204595, 0.018904899276004725,
            0.015809658030545876, 0.010160482589476171
        ])


def share_inventories_next_step_submining_and_quarrying(x):
    """
    Real Name: b'share inventories next step submining and quarrying'
    Original Eqn: b'([(1995,2008)-(-0.03526634160335441,0.1452938030085441)],(1995,0.09426322868948797),(1996,0.1452938030085441),(1997,-0.010522918740413148),(1998,0.015323039580696841),(1999,0.062066986325035677),\\\\ (2000,0.04610341694033021),(2001,-0.03526634160335441),(2002,0.04212319356415536),(2003,0.022861810664424075),(2004,0.04151711701584518),\\\\ (2005,0.10319681541565758),(2006,0.021374515787298973),(2007,0.0025377049344237237),(2008,0.020923144714220698))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.09426322868948797, 0.1452938030085441, -0.010522918740413148, 0.015323039580696841,
            0.062066986325035677, 0.04610341694033021, -0.03526634160335441, 0.04212319356415536,
            0.022861810664424075, 0.04151711701584518, 0.10319681541565758, 0.021374515787298973,
            0.0025377049344237237, 0.020923144714220698
        ])


def share_inventories_next_step_subfood_beverages_and_tobacco(x):
    """
    Real Name: b'share inventories next step subfood beverages and tobacco'
    Original Eqn: b'([(1995,2008)-(0.0015067456009418114,0.015008429524128383)],(1995,0.011229125465680464),(1996,0.014950252179427848),(1997,0.0015067456009418114),(1998,0.008219784022741013),(1999,0.013112354704970405),\\\\ (2000,0.015008429524128383),(2001,0.00496232604036188),(2002,0.010115436166276024),(2003,0.014090630265515118),(2004,0.010472018505405785),\\\\ (2005,0.011288293056324823),(2006,0.010285984899975899),(2007,0.011670533759363205),(2008,0.003484397941663512))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.011229125465680464, 0.014950252179427848, 0.0015067456009418114,
            0.008219784022741013, 0.013112354704970405, 0.015008429524128383, 0.00496232604036188,
            0.010115436166276024, 0.014090630265515118, 0.010472018505405785, 0.011288293056324823,
            0.010285984899975899, 0.011670533759363205, 0.003484397941663512
        ])


def share_inventories_next_step_subtextiles_and_textile_products(x):
    """
    Real Name: b'share inventories next step subtextiles and textile products'
    Original Eqn: b'([(1995,2008)-(-0.01617110107273339,0.028992295980142094)],(1995,0.025922783205493752),(1996,0.025535222531598935),(1997,0.0008444416652216993),(1998,0.020417391981624455),(1999,0.028992295980142094),\\\\ (2000,0.025311362536731913),(2001,0.007727580121531834),(2002,0.002825711516221771),(2003,0.012079303124812086),(2004,0.005519571894805784),\\\\ (2005,0.013120023882477527),(2006,0.005518243280871071),(2007,0.007934972086945095),(2008,-0.01617110107273339))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.025922783205493752, 0.025535222531598935, 0.0008444416652216993,
            0.020417391981624455, 0.028992295980142094, 0.025311362536731913, 0.007727580121531834,
            0.002825711516221771, 0.012079303124812086, 0.005519571894805784, 0.013120023882477527,
            0.005518243280871071, 0.007934972086945095, -0.01617110107273339
        ])


def share_inventories_next_step_subleather_leather_and_footwear(x):
    """
    Real Name: b'share inventories next step subleather leather and footwear'
    Original Eqn: b'([(1995,2008)-(-0.02726512256395504,0.03308742478636399)],(1995,0.02741801605303332),(1996,0.03308742478636399),(1997,0.004191804519572037),(1998,0.014882491116945982),(1999,0.019108017204367233),\\\\ (2000,0.024126896069485666),(2001,-0.0019191225645622243),(2002,-0.0011903123376724623),(2003,0.000523595101187629),(2004,0.0014322759731371915),\\\\ (2005,0.0007313941121081056),(2006,-0.0067765566832306955),(2007,-0.00849822559971483),(2008,-0.02726512256395504))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.02741801605303332, 0.03308742478636399, 0.004191804519572037, 0.014882491116945982,
            0.019108017204367233, 0.024126896069485666, -0.0019191225645622243,
            -0.0011903123376724623, 0.000523595101187629, 0.0014322759731371915,
            0.0007313941121081056, -0.0067765566832306955, -0.00849822559971483,
            -0.02726512256395504
        ])


def share_inventories_next_step_subwood_and_products_of_wood_and_cork(x):
    """
    Real Name: b'share inventories next step subwood and products of wood and cork'
    Original Eqn: b'([(1995,2008)-(-0.1616632516649013,0.060516673656964955)],(1995,0.05099801463435518),(1996,0.060516673656964955),(1997,-0.0006817607991020593),(1998,0.03308155567618923),(1999,0.04742896859549011),\\\\ (2000,0.011396171400018095),(2001,0.0012185991078174092),(2002,-0.0032429105557199417),(2003,0.014559681116070878),(2004,0.010593103068180825),\\\\ (2005,-0.012816239554372989),(2006,-0.07238100443548619),(2007,-0.10795313752850011),(2008,-0.1616632516649013))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.05099801463435518, 0.060516673656964955, -0.0006817607991020593, 0.03308155567618923,
            0.04742896859549011, 0.011396171400018095, 0.0012185991078174092,
            -0.0032429105557199417, 0.014559681116070878, 0.010593103068180825,
            -0.012816239554372989, -0.07238100443548619, -0.10795313752850011, -0.1616632516649013
        ])


def share_inventories_next_step_subpulp_paper_printing_and_publishing(x):
    """
    Real Name: b'share inventories next step subpulp paper printing and publishing'
    Original Eqn: b'([(1995,2008)-(-0.08641675950037707,0.01797167429902852)],(1995,0.0017209535478593398),(1996,0.011116633244823542),(1997,-0.019023876579578658),(1998,-0.013690682653597472),(1999,0.01797167429902852),\\\\ (2000,0.009140803917325045),(2001,-0.03402770659174538),(2002,-0.03710591437128926),(2003,-0.03741405276295467),(2004,-0.03459212455574808),\\\\ (2005,-0.04266723275308837),(2006,-0.05746675136230981),(2007,-0.06279328074894397),(2008,-0.08641675950037707))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0017209535478593398, 0.011116633244823542, -0.019023876579578658,
            -0.013690682653597472, 0.01797167429902852, 0.009140803917325045, -0.03402770659174538,
            -0.03710591437128926, -0.03741405276295467, -0.03459212455574808, -0.04266723275308837,
            -0.05746675136230981, -0.06279328074894397, -0.08641675950037707
        ])


def share_inventories_next_step_subcoke_refined_petroleum_and_nuclear_fuel(x):
    """
    Real Name: b'share inventories next step subcoke refined petroleum and nuclear fuel'
    Original Eqn: b'([(1995,2008)-(-0.01979745228789293,0.029657526659950657)],(1995,0.022397163766748884),(1996,0.029657526659950657),(1997,-0.009844842065857869),(1998,-0.0012157576444566558),(1999,0.017875454252156166),\\\\ (2000,0.017945093269225307),(2001,-0.016425040672843304),(2002,0.0015011190602734984),(2003,0.012571300154402403),(2004,0.024019248679712973),\\\\ (2005,0.01245074623470567),(2006,-0.011533595218422517),(2007,0.008062090060610764),(2008,-0.01979745228789293))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.022397163766748884, 0.029657526659950657, -0.009844842065857869,
            -0.0012157576444566558, 0.017875454252156166, 0.017945093269225307,
            -0.016425040672843304, 0.0015011190602734984, 0.012571300154402403,
            0.024019248679712973, 0.01245074623470567, -0.011533595218422517, 0.008062090060610764,
            -0.01979745228789293
        ])


def share_inventories_next_step_subchemicals_and_chemical_products(x):
    """
    Real Name: b'share inventories next step subchemicals and chemical products'
    Original Eqn: b'([(1995,2008)-(0.002697712399088707,0.06341341306758376)],(1995,0.05005938101189353),(1996,0.06341341306758376),(1997,0.020305971801720977),(1998,0.045376681578992654),(1999,0.04901889821081202),\\\\ (2000,0.04136089819946551),(2001,0.009874150034516383),(2002,0.013029559844310389),(2003,0.031023231245148577),(2004,0.027035191107908304),\\\\ (2005,0.03542343907150098),(2006,0.03570302269336227),(2007,0.014621691554917347),(2008,0.002697712399088707))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.05005938101189353, 0.06341341306758376, 0.020305971801720977, 0.045376681578992654,
            0.04901889821081202, 0.04136089819946551, 0.009874150034516383, 0.013029559844310389,
            0.031023231245148577, 0.027035191107908304, 0.03542343907150098, 0.03570302269336227,
            0.014621691554917347, 0.002697712399088707
        ])


def share_inventories_next_step_subrubber_and_plastics(x):
    """
    Real Name: b'share inventories next step subrubber and plastics'
    Original Eqn: b'([(1995,2008)-(-0.05411230890422361,0.05613935712413145)],(1995,0.05155601037400166),(1996,0.05613935712413145),(1997,0.01993782490332162),(1998,0.014493329733790127),(1999,0.0326650525055877),\\\\ (2000,0.022302165133758694),(2001,0.007727464783111726),(2002,0.008855703431832364),(2003,0.02600911316279692),(2004,0.00811772737440893),\\\\ (2005,0.02960706717970953),(2006,0.0038264700381658127),(2007,0.005101709762047021),(2008,-0.05411230890422361))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.05155601037400166, 0.05613935712413145, 0.01993782490332162, 0.014493329733790127,
            0.0326650525055877, 0.022302165133758694, 0.007727464783111726, 0.008855703431832364,
            0.02600911316279692, 0.00811772737440893, 0.02960706717970953, 0.0038264700381658127,
            0.005101709762047021, -0.05411230890422361
        ])


def share_inventories_next_step_subother_non_metalic_mineral(x):
    """
    Real Name: b'share inventories next step subother non metalic mineral'
    Original Eqn: b'([(1995,2008)-(-0.06198036957638333,0.10746874545566801)],(1995,0.09206994019660208),(1996,0.10746874545566801),(1997,0.029834516830541346),(1998,0.0323522570370145),(1999,0.04737016753690253),\\\\ (2000,0.0459722775727321),(2001,-0.06198036957638333),(2002,-0.028632375936390057),(2003,-0.0045939428954693065),(2004,0.007506379019318679),\\\\ (2005,0.0529179511250499),(2006,0.040814956805921516),(2007,0.023955408358392986),(2008,-0.049341810520510544))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.09206994019660208, 0.10746874545566801, 0.029834516830541346, 0.0323522570370145,
            0.04737016753690253, 0.0459722775727321, -0.06198036957638333, -0.028632375936390057,
            -0.0045939428954693065, 0.007506379019318679, 0.0529179511250499, 0.040814956805921516,
            0.023955408358392986, -0.049341810520510544
        ])


def share_inventories_next_step_subbasic_metals_and_fabricated_metal(x):
    """
    Real Name: b'share inventories next step subbasic metals and fabricated metal'
    Original Eqn: b'([(1995,2008)-(-0.1578288206210243,0.039232899341370225)],(1995,0.0031870963507300964),(1996,0.009123680856206623),(1997,-0.05776728641089819),(1998,-0.063023093491151),(1999,0.028766376131321228),\\\\ (2000,-0.0012881757231380966),(2001,-0.05179315666335895),(2002,-0.02408351048492784),(2003,0.007466442421217998),(2004,-7.513578161285693e-05),\\\\ (2005,0.039232899341370225),(2006,-0.04691660213435318),(2007,-0.05954158611418101),(2008,-0.1578288206210243))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0031870963507300964, 0.009123680856206623, -0.05776728641089819, -0.063023093491151,
            0.028766376131321228, -0.0012881757231380966, -0.05179315666335895,
            -0.02408351048492784, 0.007466442421217998, -7.513578161285693e-05,
            0.039232899341370225, -0.04691660213435318, -0.05954158611418101, -0.1578288206210243
        ])


def share_inventories_next_step_submachinery_nec(x):
    """
    Real Name: b'share inventories next step submachinery nec'
    Original Eqn: b'([(1995,2008)-(-0.011732858194081435,0.018576378785219894)],(1995,0.010574262541391523),(1996,0.00696599493820793),(1997,-0.002172547925658203),(1998,0.0016757710330077133),(1999,0.018576378785219894),\\\\ (2000,0.013271560872378692),(2001,-0.011732858194081435),(2002,0.01588751699230089),(2003,0.009124612525020096),(2004,0.006060567821491422),\\\\ (2005,0.014060643446260344),(2006,0.006903952206265926),(2007,0.004552560360692592),(2008,-0.00599537770581172))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.010574262541391523, 0.00696599493820793, -0.002172547925658203,
            0.0016757710330077133, 0.018576378785219894, 0.013271560872378692,
            -0.011732858194081435, 0.01588751699230089, 0.009124612525020096, 0.006060567821491422,
            0.014060643446260344, 0.006903952206265926, 0.004552560360692592, -0.00599537770581172
        ])


def share_inventories_next_step_subelectrical_and_optical_equipment(x):
    """
    Real Name: b'share inventories next step subelectrical and optical equipment'
    Original Eqn: b'([(1995,2008)-(-0.009340748606651865,0.04296331477731733)],(1995,0.023168508723542067),(1996,0.028354704013657167),(1997,0.015847142402905943),(1998,0.02265004660576361),(1999,0.04296331477731733),\\\\ (2000,0.0016590409136539952),(2001,-0.00859960846267911),(2002,0.011252897017189633),(2003,0.03358385692165521),(2004,0.02280449294652064),\\\\ (2005,0.029076321142639805),(2006,0.01526034762999966),(2007,0.013992211001478148),(2008,-0.009340748606651865))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.023168508723542067, 0.028354704013657167, 0.015847142402905943, 0.02265004660576361,
            0.04296331477731733, 0.0016590409136539952, -0.00859960846267911, 0.011252897017189633,
            0.03358385692165521, 0.02280449294652064, 0.029076321142639805, 0.01526034762999966,
            0.013992211001478148, -0.009340748606651865
        ])


def share_inventories_next_step_subtransport_equipment(x):
    """
    Real Name: b'share inventories next step subtransport equipment'
    Original Eqn: b'([(1995,2008)-(-0.006722001475231583,0.02190095810026589)],(1995,0.008363827805679104),(1996,0.010886046103550569),(1997,0.0032035392047634697),(1998,0.021106266218248022),(1999,0.011928490546162383),\\\\ (2000,0.021600092686336735),(2001,0.011439507854791203),(2002,0.012926172570669917),(2003,0.010692503650363025),(2004,0.0198993047564401),\\\\ (2005,0.02190095810026589),(2006,0.015357859751103917),(2007,0.006712683942431885),(2008,-0.006722001475231583))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.008363827805679104, 0.010886046103550569, 0.0032035392047634697,
            0.021106266218248022, 0.011928490546162383, 0.021600092686336735, 0.011439507854791203,
            0.012926172570669917, 0.010692503650363025, 0.0198993047564401, 0.02190095810026589,
            0.015357859751103917, 0.006712683942431885, -0.006722001475231583
        ])


def share_inventories_next_step_submanufacturing_nec_recycling(x):
    """
    Real Name: b'share inventories next step submanufacturing nec recycling'
    Original Eqn: b'([(1995,2008)-(-0.006185433819430002,0.03481081306590101)],(1995,0.01857734778416911),(1996,0.022404736598060047),(1997,0.007320140860101643),(1998,0.017631024963925525),(1999,0.03481081306590101),\\\\ (2000,0.030668103927010547),(2001,0.014946590623808492),(2002,0.013840143578630438),(2003,0.021493995531179255),(2004,0.02802975748870618),\\\\ (2005,0.022896789367939235),(2006,0.007827848982984867),(2007,0.01601343571723777),(2008,-0.006185433819430002))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.01857734778416911, 0.022404736598060047, 0.007320140860101643, 0.017631024963925525,
            0.03481081306590101, 0.030668103927010547, 0.014946590623808492, 0.013840143578630438,
            0.021493995531179255, 0.02802975748870618, 0.022896789367939235, 0.007827848982984867,
            0.01601343571723777, -0.006185433819430002
        ])


def share_inventories_next_step_subelectricity_gas_and_water_supply(x):
    """
    Real Name: b'share inventories next step subelectricity gas and water supply'
    Original Eqn: b'([(1995,2008)-(-0.0021056969906526287,0.0013558288107230248)],(1995,0.00042413317519049144),(1996,0.0013558288107230248),(1997,0.0005431237710083078),(1998,0.0007282829655163663),(1999,0.0006328974362719102),\\\\ (2000,-0.0002694355176032213),(2001,-0.0010487328296012264),(2002,-0.00033330844580074255),(2003,-0.0016884595669077243),(2004,-0.0005938883617179873),\\\\ (2005,0.00023858153100637895),(2006,-0.0009011798421525196),(2007,-0.00120160160343804),(2008,-0.0021056969906526287))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.00042413317519049144, 0.0013558288107230248, 0.0005431237710083078,
            0.0007282829655163663, 0.0006328974362719102, -0.0002694355176032213,
            -0.0010487328296012264, -0.00033330844580074255, -0.0016884595669077243,
            -0.0005938883617179873, 0.00023858153100637895, -0.0009011798421525196,
            -0.00120160160343804, -0.0021056969906526287
        ])


def share_inventories_next_step_subconstruction(x):
    """
    Real Name: b'share inventories next step subconstruction'
    Original Eqn: b'([(1995,2008)-(-0.00020292513825069224,0.0011973075229034687)],(1995,-0.00014896785893889322),(1996,0.00032862049346872265),(1997,0.00012345146463194415),(1998,0.0004437915830468549),(1999,0.0002729355150054159),\\\\ (2000,0.00034811231920423496),(2001,2.6341616277743705e-05),(2002,-5.133599583922819e-05),(2003,-0.00020292513825069224),(2004,0.00020208833289227384),\\\\ (2005,0.0003465351793535172),(2006,0.0009605838860180702),(2007,0.0011973075229034687),(2008,0.0010350447943260576))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            -0.00014896785893889322, 0.00032862049346872265, 0.00012345146463194415,
            0.0004437915830468549, 0.0002729355150054159, 0.00034811231920423496,
            2.6341616277743705e-05, -5.133599583922819e-05, -0.00020292513825069224,
            0.00020208833289227384, 0.0003465351793535172, 0.0009605838860180702,
            0.0011973075229034687, 0.0010350447943260576
        ])


def share_inventories_next_step_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
        x):
    """
    Real Name: b'share inventories next step subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'
    Original Eqn: b'([(1995,2008)-(-0.004117596796533778,0.006521608339560344)],(1995,0.0023929746013658833),(1996,0.0031142324982446606),(1997,0.0015004391254643849),(1998,0.0028785617029874824),(1999,0.006521608339560344),\\\\ (2000,0.006391678364164279),(2001,-0.000475560711611828),(2002,0.001976871260373391),(2003,0.004240190894063026),(2004,0.0031622262651984615),\\\\ (2005,0.005417379052287837),(2006,0.004613781515618692),(2007,0.004953710498287375),(2008,-0.004117596796533778))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0023929746013658833, 0.0031142324982446606, 0.0015004391254643849,
            0.0028785617029874824, 0.006521608339560344, 0.006391678364164279,
            -0.000475560711611828, 0.001976871260373391, 0.004240190894063026,
            0.0031622262651984615, 0.005417379052287837, 0.004613781515618692,
            0.004953710498287375, -0.004117596796533778
        ])


def share_inventories_next_step_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
        x):
    """
    Real Name: b'share inventories next step subwholesale trade and commissions trade except of motor vehicles and motorcycles'
    Original Eqn: b'([(1995,2008)-(-0.0021458011259934246,0.0176144036678834)],(1995,0.015368793493944032),(1996,0.0176144036678834),(1997,0.0076430350349353925),(1998,0.010562158065515002),(1999,0.016008740199098148),\\\\ (2000,0.007243281960070458),(2001,0.0009669664677655769),(2002,0.0035568537305010403),(2003,0.0022383440684109767),(2004,0.003896461990106976),\\\\ (2005,0.005195678507696852),(2006,0.003923266504628535),(2007,0.008047525531025905),(2008,-0.0021458011259934246))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.015368793493944032, 0.0176144036678834, 0.0076430350349353925, 0.010562158065515002,
            0.016008740199098148, 0.007243281960070458, 0.0009669664677655769,
            0.0035568537305010403, 0.0022383440684109767, 0.003896461990106976,
            0.005195678507696852, 0.003923266504628535, 0.008047525531025905,
            -0.0021458011259934246
        ])


def share_inventories_next_step_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
        x):
    """
    Real Name: b'share inventories next step subretail trade except of motor vehicles and motorcycles repair of household goods'
    Original Eqn: b'([(1995,2008)-(-0.000741128990872675,0.010710865249582027)],(1995,0.004783819038525881),(1996,0.006436223327803524),(1997,0.0026383681892997285),(1998,0.005164286657848896),(1999,0.010710865249582027),\\\\ (2000,0.00984858735790179),(2001,0.0015008944423482583),(2002,0.003897921771497273),(2003,0.006130297658989541),(2004,0.004498001375669275),\\\\ (2005,0.006691703056267292),(2006,0.0054425175554355726),(2007,0.004830282847275033),(2008,-0.000741128990872675))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.004783819038525881, 0.006436223327803524, 0.0026383681892997285,
            0.005164286657848896, 0.010710865249582027, 0.00984858735790179, 0.0015008944423482583,
            0.003897921771497273, 0.006130297658989541, 0.004498001375669275, 0.006691703056267292,
            0.0054425175554355726, 0.004830282847275033, -0.000741128990872675
        ])


def share_inventories_next_step_subhotels_and_restaurants(x):
    """
    Real Name: b'share inventories next step subhotels and restaurants'
    Original Eqn: b'([(1995,2008)-(-0.0003572996584286368,0.002911897359610583)],(1995,-0.00020737488320897337),(1996,0.0001446685483487721),(1997,-0.0003572996584286368),(1998,0.0006549819387167176),(1999,0.0020955879814969908),\\\\ (2000,0.002911897359610583),(2001,0.0006233249367963001),(2002,0.0007016828988724827),(2003,0.0005359206216678118),(2004,0.0004919458570455678),\\\\ (2005,0.0006475599403373204),(2006,0.0002856755321237399),(2007,0.00023288616823906658),(2008,0.0004124112092339731))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            -0.00020737488320897337, 0.0001446685483487721, -0.0003572996584286368,
            0.0006549819387167176, 0.0020955879814969908, 0.002911897359610583,
            0.0006233249367963001, 0.0007016828988724827, 0.0005359206216678118,
            0.0004919458570455678, 0.0006475599403373204, 0.0002856755321237399,
            0.00023288616823906658, 0.0004124112092339731
        ])


def share_inventories_next_step_subinland_transport(x):
    """
    Real Name: b'share inventories next step subinland transport'
    Original Eqn: b'([(1995,2008)-(0.0002411375900309864,0.012536329641196792)],(1995,0.010176833024630351),(1996,0.012536329641196792),(1997,0.00430214531254968),(1998,0.005348367920419633),(1999,0.006554338122717555),\\\\ (2000,0.005378382435539208),(2001,0.0019515962711634627),(2002,0.0027197909056981668),(2003,0.004730984658814206),(2004,0.003957970135238292),\\\\ (2005,0.006311517029460731),(2006,0.003440626216147738),(2007,0.0028761249209255206),(2008,0.0002411375900309864))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.010176833024630351, 0.012536329641196792, 0.00430214531254968, 0.005348367920419633,
            0.006554338122717555, 0.005378382435539208, 0.0019515962711634627,
            0.0027197909056981668, 0.004730984658814206, 0.003957970135238292,
            0.006311517029460731, 0.003440626216147738, 0.0028761249209255206,
            0.0002411375900309864
        ])


def share_inventories_next_step_subwater_transport(x):
    """
    Real Name: b'share inventories next step subwater transport'
    Original Eqn: b'([(1995,2008)-(0.0014308799030149516,0.08684434873201745)],(1995,0.03445012707955338),(1996,0.033535203070921914),(1997,0.013131889748329966),(1998,0.027919145462781503),(1999,0.041024487927804686),\\\\ (2000,0.08466919183155805),(2001,0.00307740567425285),(2002,0.003488829237790001),(2003,0.0029639888705386475),(2004,0.003599625678616155),\\\\ (2005,0.05066574298576478),(2006,0.0014308799030149516),(2007,0.08611950649678217),(2008,0.08684434873201745))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.03445012707955338, 0.033535203070921914, 0.013131889748329966, 0.027919145462781503,
            0.041024487927804686, 0.08466919183155805, 0.00307740567425285, 0.003488829237790001,
            0.0029639888705386475, 0.003599625678616155, 0.05066574298576478,
            0.0014308799030149516, 0.08611950649678217, 0.08684434873201745
        ])


def share_inventories_next_step_subair_transport(x):
    """
    Real Name: b'share inventories next step subair transport'
    Original Eqn: b'([(1995,2008)-(-0.00044423394440304637,0.010872926861949048)],(1995,0.0021245645834738853),(1996,0.0025850705351703157),(1997,0.0008091388791002279),(1998,0.0023436047159025035),(1999,0.004759184665233702),\\\\ (2000,0.010872926861949048),(2001,-0.00044423394440304637),(2002,0.0012555125044372616),(2003,0.0004702718420441391),(2004,0.001191508687522141),\\\\ (2005,0.00350381933999573),(2006,0.0010309466286302909),(2007,0.002977872931688678),(2008,0.0005918793793829298))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0021245645834738853, 0.0025850705351703157, 0.0008091388791002279,
            0.0023436047159025035, 0.004759184665233702, 0.010872926861949048,
            -0.00044423394440304637, 0.0012555125044372616, 0.0004702718420441391,
            0.001191508687522141, 0.00350381933999573, 0.0010309466286302909, 0.002977872931688678,
            0.0005918793793829298
        ])


def share_inventories_next_step_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
        x):
    """
    Real Name: b'share inventories next step subother supporting and auxiliary transport activities activities of travel agencies'
    Original Eqn: b'([(1995,2008)-(0.0019734244893533683,0.030505284447352746)],(1995,0.015631051792266138),(1996,0.02986296802524229),(1997,0.012259844509753592),(1998,0.012338783661043004),(1999,0.011534383792643545),\\\\ (2000,0.030505284447352746),(2001,0.004886689383534703),(2002,0.004357898672331982),(2003,0.005428457355999516),(2004,0.005817028918166772),\\\\ (2005,0.00976790454953955),(2006,0.005881481394028688),(2007,0.010246379983008607),(2008,0.0019734244893533683))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.015631051792266138, 0.02986296802524229, 0.012259844509753592, 0.012338783661043004,
            0.011534383792643545, 0.030505284447352746, 0.004886689383534703, 0.004357898672331982,
            0.005428457355999516, 0.005817028918166772, 0.00976790454953955, 0.005881481394028688,
            0.010246379983008607, 0.0019734244893533683
        ])


def share_inventories_next_step_subpost_and_telecommunications(x):
    """
    Real Name: b'share inventories next step subpost and telecommunications'
    Original Eqn: b'([(1995,2008)-(-0.005068250485275013,0.0032325119339692335)],(1995,0.0009488551439241703),(1996,0.0012396105428931219),(1997,0.0007444440848184912),(1998,0.0014685834763999532),(1999,0.0020441730699772512),\\\\ (2000,0.0032325119339692335),(2001,-0.005068250485275013),(2002,0.00043111420964910284),(2003,0.0009169560942092407),(2004,0.000570352331915007),\\\\ (2005,0.0007087983726690691),(2006,0.0005448397305536379),(2007,0.0009565343787786686),(2008,0.000645581668543594))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0009488551439241703, 0.0012396105428931219, 0.0007444440848184912,
            0.0014685834763999532, 0.0020441730699772512, 0.0032325119339692335,
            -0.005068250485275013, 0.00043111420964910284, 0.0009169560942092407,
            0.000570352331915007, 0.0007087983726690691, 0.0005448397305536379,
            0.0009565343787786686, 0.000645581668543594
        ])


def share_inventories_next_step_subfinancial_intermediation(x):
    """
    Real Name: b'share inventories next step subfinancial intermediation'
    Original Eqn: b'([(1995,2008)-(-0.007524568226264509,0.0012264529642908699)],(1995,9.11231272700768e-05),(1996,7.542788209146378e-05),(1997,-1.4400616429060148e-05),(1998,8.229749543927034e-05),(1999,0.0003937912440804006),\\\\ (2000,0.0009093943635503735),(2001,-0.007524568226264509),(2002,-0.004274426163508445),(2003,8.49992603244964e-05),(2004,9.833482351623146e-05),\\\\ (2005,0.00013797126261373458),(2006,8.384317855566425e-05),(2007,0.0006442841441413284),(2008,0.0012264529642908699))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            9.11231272700768e-05, 7.542788209146378e-05, -1.4400616429060148e-05,
            8.229749543927034e-05, 0.0003937912440804006, 0.0009093943635503735,
            -0.007524568226264509, -0.004274426163508445, 8.49992603244964e-05,
            9.833482351623146e-05, 0.00013797126261373458, 8.384317855566425e-05,
            0.0006442841441413284, 0.0012264529642908699
        ])


def share_inventories_next_step_subreal_estate_activities(x):
    """
    Real Name: b'share inventories next step subreal estate activities'
    Original Eqn: b'([(1995,2008)-(-2.8778440691593814e-05,8.646807700213472e-05)],(1995,2.91907526576806e-05),(1996,1.9879281529659025e-05),(1997,1.4105622407877741e-05),(1998,8.646807700213472e-05),(1999,2.161401447580686e-05),\\\\ (2000,7.110088024127258e-06),(2001,7.479695881646118e-06),(2002,2.0296672084406522e-06),(2003,9.156903678863279e-06),(2004,2.6108742903649806e-05),\\\\ (2005,3.0340352036303263e-05),(2006,2.039824756142603e-05),(2007,7.322588921311033e-05),(2008,-2.8778440691593814e-05))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            2.91907526576806e-05, 1.9879281529659025e-05, 1.4105622407877741e-05,
            8.646807700213472e-05, 2.161401447580686e-05, 7.110088024127258e-06,
            7.479695881646118e-06, 2.0296672084406522e-06, 9.156903678863279e-06,
            2.6108742903649806e-05, 3.0340352036303263e-05, 2.039824756142603e-05,
            7.322588921311033e-05, -2.8778440691593814e-05
        ])


def share_inventories_next_step_subrenting_od_meq_and_other_business_activities(x):
    """
    Real Name: b'share inventories next step subrenting od meq and other business activities'
    Original Eqn: b'([(1995,2008)-(0.000463289136776625,0.01864576873493577)],(1995,0.000831602174777396),(1996,0.0033847710947051517),(1997,0.0005761788915349635),(1998,0.0031079738205755606),(1999,0.0021995063936603304),\\\\ (2000,0.0022211587023244217),(2001,0.000463289136776625),(2002,0.003827049793333797),(2003,0.0032723048332935715),(2004,0.00282669028048174),\\\\ (2005,0.0033238445248807004),(2006,0.0019278144414444816),(2007,0.01864576873493577),(2008,0.0074378011898418245))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.000831602174777396, 0.0033847710947051517, 0.0005761788915349635,
            0.0031079738205755606, 0.0021995063936603304, 0.0022211587023244217,
            0.000463289136776625, 0.003827049793333797, 0.0032723048332935715, 0.00282669028048174,
            0.0033238445248807004, 0.0019278144414444816, 0.01864576873493577,
            0.0074378011898418245
        ])


def share_inventories_next_step_subpublic_admin_and_defence_compulsory_social_security(x):
    """
    Real Name: b'share inventories next step subpublic admin and defence compulsory social security'
    Original Eqn: b'([(1995,2008)-(-0.0072323360613766275,-0.0038007332944622442)],(1995,-0.006890673086698083),(1996,-0.005679982938310693),(1997,-0.0072323360613766275),(1998,-0.006114828678354021),(1999,-0.005356116532156387),\\\\ (2000,-0.0038007332944622442),(2001,-0.005674782512487631),(2002,-0.004853486698943161),(2003,-0.004676214705836499),(2004,-0.004558338326465761),\\\\ (2005,-0.004537527544218771),(2006,-0.0053082216326086635),(2007,-0.005544836892740801),(2008,-0.003922579936947399))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            -0.006890673086698083, -0.005679982938310693, -0.0072323360613766275,
            -0.006114828678354021, -0.005356116532156387, -0.0038007332944622442,
            -0.005674782512487631, -0.004853486698943161, -0.004676214705836499,
            -0.004558338326465761, -0.004537527544218771, -0.0053082216326086635,
            -0.005544836892740801, -0.003922579936947399
        ])


def share_inventories_next_step_subeducation(x):
    """
    Real Name: b'share inventories next step subeducation'
    Original Eqn: b'([(1995,2008)-(-2.615975302391741e-05,8.725195270895369e-05)],(1995,1.8730226585082882e-05),(1996,1.3231663407411775e-05),(1997,4.799534989921149e-06),(1998,3.0446684471332545e-05),(1999,1.098827169556429e-05),\\\\ (2000,2.5728856619887022e-05),(2001,1.3380636827243842e-05),(2002,4.505158402132235e-05),(2003,2.248247898388548e-06),(2004,8.725195270895369e-05),\\\\ (2005,-2.615975302391741e-05),(2006,8.26970101974835e-06),(2007,1.5833949800231638e-05),(2008,4.7541740478130375e-05))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            1.8730226585082882e-05, 1.3231663407411775e-05, 4.799534989921149e-06,
            3.0446684471332545e-05, 1.098827169556429e-05, 2.5728856619887022e-05,
            1.3380636827243842e-05, 4.505158402132235e-05, 2.248247898388548e-06,
            8.725195270895369e-05, -2.615975302391741e-05, 8.26970101974835e-06,
            1.5833949800231638e-05, 4.7541740478130375e-05
        ])


def share_inventories_next_step_subhealth_and_social_work(x):
    """
    Real Name: b'share inventories next step subhealth and social work'
    Original Eqn: b'([(1995,2008)-(-3.1727632790426594e-05,2.3448960211648786e-05)],(1995,8.428876000649878e-07),(1996,3.87479673142649e-06),(1997,4.426989397210959e-06),(1998,1.484503418608409e-05),(1999,2.0269244774470538e-05),\\\\ (2000,1.2951043297292982e-05),(2001,-3.1727632790426594e-05),(2002,1.9634547384056006e-05),(2003,1.5997263037852878e-05),(2004,1.0177684924305919e-05),\\\\ (2005,1.965940194824921e-05),(2006,1.4489386545164095e-05),(2007,2.3448960211648786e-05),(2008,-9.502931854099198e-06))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            8.428876000649878e-07, 3.87479673142649e-06, 4.426989397210959e-06,
            1.484503418608409e-05, 2.0269244774470538e-05, 1.2951043297292982e-05,
            -3.1727632790426594e-05, 1.9634547384056006e-05, 1.5997263037852878e-05,
            1.0177684924305919e-05, 1.965940194824921e-05, 1.4489386545164095e-05,
            2.3448960211648786e-05, -9.502931854099198e-06
        ])


def share_inventories_next_step_subother_community_social_and_persona_services(x):
    """
    Real Name: b'share inventories next step subother community social and persona services'
    Original Eqn: b'([(1995,2008)-(-0.013448818323945873,-0.0016249396890407504)],(1995,-0.010629458350807685),(1996,-0.008848671736319593),(1997,-0.013448818323945873),(1998,-0.008946039163755016),(1999,-0.004793431904417115),\\\\ (2000,-0.0016249396890407504),(2001,-0.0022020738024543162),(2002,-0.0018956770408739025),(2003,-0.001785715673228679),(2004,-0.0018879388774512668),\\\\ (2005,-0.0017953987374448959),(2006,-0.0024802205711734492),(2007,-0.003448648466737081),(2008,-0.0020721433092937003))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            -0.010629458350807685, -0.008848671736319593, -0.013448818323945873,
            -0.008946039163755016, -0.004793431904417115, -0.0016249396890407504,
            -0.0022020738024543162, -0.0018956770408739025, -0.001785715673228679,
            -0.0018879388774512668, -0.0017953987374448959, -0.0024802205711734492,
            -0.003448648466737081, -0.0020721433092937003
        ])


def share_inventories_next_step_subprivate_households_with_employed_persons(x):
    """
    Real Name: b'share inventories next step subprivate households with employed persons'
    Original Eqn: b'([(1995,2008)-(-0.0002681430771119126,0.0015237584902465407)],(1995,9.814582614953874e-05),(1996,9.588248461668407e-06),(1997,-7.821361593256881e-05),(1998,-2.411516128394616e-05),(1999,-3.631893686050125e-06),\\\\ (2000,-5.08923087015618e-05),(2001,-0.00022539143199814182),(2002,-0.0002681430771119126),(2003,6.398985647852799e-05),(2004,4.7633349046714305e-05),\\\\ (2005,0.0015237584902465407),(2006,0.000990345581418567),(2007,0.0009393292444326495),(2008,0.0008607609964860263))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            9.814582614953874e-05, 9.588248461668407e-06, -7.821361593256881e-05,
            -2.411516128394616e-05, -3.631893686050125e-06, -5.08923087015618e-05,
            -0.00022539143199814182, -0.0002681430771119126, 6.398985647852799e-05,
            4.7633349046714305e-05, 0.0015237584902465407, 0.000990345581418567,
            0.0009393292444326495, 0.0008607609964860263
        ])


def share_consum_goverments_subagriculture_hunting_forestry_and_fishing(x):
    """
    Real Name: b'share consum goverments subagriculture hunting forestry and fishing'
    Original Eqn: b'([(1995,2009)-(0.005268868173873272,0.010233756778334888)],(1995,0.005268868173873272),(1996,0.0067709613778314465),(1997,0.006395238231716023),(1998,0.007562221479560522),(1999,0.006909511984020509),\\\\ (2000,0.007982988184916011),(2001,0.008446717428753593),(2002,0.009326405167881661),(2003,0.009029494951501007),(2004,0.009305637069275475),\\\\ (2005,0.009311394291421764),(2006,0.009911989953154088),(2007,0.010233756778334888),(2008,0.008994169837883667),(2009,0.00869869421963916))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.005268868173873272, 0.0067709613778314465, 0.006395238231716023,
            0.007562221479560522, 0.006909511984020509, 0.007982988184916011, 0.008446717428753593,
            0.009326405167881661, 0.009029494951501007, 0.009305637069275475, 0.009311394291421764,
            0.009911989953154088, 0.010233756778334888, 0.008994169837883667, 0.00869869421963916
        ])


def share_consum_goverments_submining_and_quarrying(x):
    """
    Real Name: b'share consum goverments submining and quarrying'
    Original Eqn: b'([(1995,2009)-(0.003995603763685553,0.006393419006564868)],(1995,0.00465464399106785),(1996,0.00436164392290795),(1997,0.003995603763685553),(1998,0.004066047799643348),(1999,0.006393419006564868),\\\\ (2000,0.006003153311605073),(2001,0.0042157315738525596),(2002,0.005643824953173819),(2003,0.005273239069785034),(2004,0.005338694073945094),\\\\ (2005,0.005231106875192582),(2006,0.004151188915356074),(2007,0.004717994395060901),(2008,0.00450208701463089),(2009,0.004934708656353205))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.00465464399106785, 0.00436164392290795, 0.003995603763685553, 0.004066047799643348,
            0.006393419006564868, 0.006003153311605073, 0.0042157315738525596,
            0.005643824953173819, 0.005273239069785034, 0.005338694073945094, 0.005231106875192582,
            0.004151188915356074, 0.004717994395060901, 0.00450208701463089, 0.004934708656353205
        ])


def share_consum_goverments_subfood_beverages_and_tobacco(x):
    """
    Real Name: b'share consum goverments subfood beverages and tobacco'
    Original Eqn: b'([(1995,2009)-(0.002885066309883363,0.004599538103475525)],(1995,0.004599538103475525),(1996,0.0038220671963571573),(1997,0.002903073070627261),(1998,0.002936792709517417),(1999,0.003142168948714033),\\\\ (2000,0.0031340511473669625),(2001,0.0030303441468097964),(2002,0.003102005746783019),(2003,0.003076968042145073),(2004,0.002915823853670982),\\\\ (2005,0.002931906554520569),(2006,0.002970467773012117),(2007,0.003045614006493215),(2008,0.002961515281763346),(2009,0.002885066309883363))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.004599538103475525, 0.0038220671963571573, 0.002903073070627261, 0.002936792709517417,
        0.003142168948714033, 0.0031340511473669625, 0.0030303441468097964, 0.003102005746783019,
        0.003076968042145073, 0.002915823853670982, 0.002931906554520569, 0.002970467773012117,
        0.003045614006493215, 0.002961515281763346, 0.002885066309883363
    ])


def share_consum_goverments_subtextiles_and_textile_products(x):
    """
    Real Name: b'share consum goverments subtextiles and textile products'
    Original Eqn: b'([(1995,2009)-(0.0025817118313251836,0.005253312524302093)],(1995,0.003187221954138558),(1996,0.003551578898993538),(1997,0.00295957655229884),(1998,0.0026490453856551233),(1999,0.0028527421747088517),\\\\ (2000,0.0025817118313251836),(2001,0.0027787410874748823),(2002,0.0028558425631741735),(2003,0.003004220437100366),(2004,0.0030660841863479906),\\\\ (2005,0.0034604581246728532),(2006,0.00402674114226547),(2007,0.004420561138285466),(2008,0.004407476902887508),(2009,0.005253312524302093))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.003187221954138558, 0.003551578898993538, 0.00295957655229884, 0.0026490453856551233,
        0.0028527421747088517, 0.0025817118313251836, 0.0027787410874748823, 0.0028558425631741735,
        0.003004220437100366, 0.0030660841863479906, 0.0034604581246728532, 0.00402674114226547,
        0.004420561138285466, 0.004407476902887508, 0.005253312524302093
    ])


def share_consum_goverments_subleather_leather_and_footwear(x):
    """
    Real Name: b'share consum goverments subleather leather and footwear'
    Original Eqn: b'([(1995,2009)-(0.0007351843303268899,0.0017657285218539121)],(1995,0.0017657285218539121),(1996,0.0015559542279136721),(1997,0.0012399353066103794),(1998,0.0013267840090444238),(1999,0.00133344367825553),\\\\ (2000,0.0012313162901100574),(2001,0.0011201067862366928),(2002,0.0008200600923468703),(2003,0.0007351843303268899),(2004,0.0007872038350995223),\\\\ (2005,0.0008524970828855757),(2006,0.000980302019330771),(2007,0.0012534804090331476),(2008,0.0013308059227996672),(2009,0.001514645887241861))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.0017657285218539121, 0.0015559542279136721, 0.0012399353066103794, 0.0013267840090444238,
        0.00133344367825553, 0.0012313162901100574, 0.0011201067862366928, 0.0008200600923468703,
        0.0007351843303268899, 0.0007872038350995223, 0.0008524970828855757, 0.000980302019330771,
        0.0012534804090331476, 0.0013308059227996672, 0.001514645887241861
    ])


def share_consum_goverments_subwood_and_products_of_wood_and_cork(x):
    """
    Real Name: b'share consum goverments subwood and products of wood and cork'
    Original Eqn: b'([(1995,2009)-(0.002934685814185623,0.010385380453511185)],(1995,0.008220627948340928),(1996,0.009005435491861913),(1997,0.00784410468158404),(1998,0.010385380453511185),(1999,0.005983313227598484),\\\\ (2000,0.0029442159037194747),(2001,0.003191210291931943),(2002,0.0038803930252921484),(2003,0.0033353083568353945),(2004,0.0031038702125085094),\\\\ (2005,0.002934685814185623),(2006,0.0032009994283761284),(2007,0.0031885473327917984),(2008,0.003374415685759153),(2009,0.003641151621250122))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.008220627948340928, 0.009005435491861913, 0.00784410468158404, 0.010385380453511185,
        0.005983313227598484, 0.0029442159037194747, 0.003191210291931943, 0.0038803930252921484,
        0.0033353083568353945, 0.0031038702125085094, 0.002934685814185623, 0.0032009994283761284,
        0.0031885473327917984, 0.003374415685759153, 0.003641151621250122
    ])


def share_consum_goverments_subpulp_paper_printing_and_publishing(x):
    """
    Real Name: b'share consum goverments subpulp paper printing and publishing'
    Original Eqn: b'([(1995,2009)-(0.010944306361792914,0.01977514458023117)],(1995,0.011608853579237062),(1996,0.012152022471383788),(1997,0.010944306361792914),(1998,0.013144143333725558),(1999,0.01481962044356459),\\\\ (2000,0.014280346332352903),(2001,0.014584228557471577),(2002,0.01813378209427802),(2003,0.01800422812064625),(2004,0.017428493050279235),\\\\ (2005,0.01703528662283678),(2006,0.018253358153044425),(2007,0.01977514458023117),(2008,0.016156351225622194),(2009,0.016038861285036368))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.011608853579237062, 0.012152022471383788, 0.010944306361792914, 0.013144143333725558,
            0.01481962044356459, 0.014280346332352903, 0.014584228557471577, 0.01813378209427802,
            0.01800422812064625, 0.017428493050279235, 0.01703528662283678, 0.018253358153044425,
            0.01977514458023117, 0.016156351225622194, 0.016038861285036368
        ])


def share_consum_goverments_subcoke_refined_petroleum_and_nuclear_fuel(x):
    """
    Real Name: b'share consum goverments subcoke refined petroleum and nuclear fuel'
    Original Eqn: b'([(1995,2009)-(0.005867347651754397,0.01638462176078289)],(1995,0.014933772211345458),(1996,0.014073012258205416),(1997,0.014138264180255291),(1998,0.01638462176078289),(1999,0.012559974344452331),\\\\ (2000,0.009745231174255206),(2001,0.008722834180249866),(2002,0.009133945504476285),(2003,0.007599833303872037),(2004,0.006750850405801407),\\\\ (2005,0.005867347651754397),(2006,0.006685369003406569),(2007,0.007433579067682456),(2008,0.006607524613390546),(2009,0.007784103038001168))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.014933772211345458, 0.014073012258205416, 0.014138264180255291, 0.01638462176078289,
            0.012559974344452331, 0.009745231174255206, 0.008722834180249866, 0.009133945504476285,
            0.007599833303872037, 0.006750850405801407, 0.005867347651754397, 0.006685369003406569,
            0.007433579067682456, 0.006607524613390546, 0.007784103038001168
        ])


def share_consum_goverments_subchemicals_and_chemical_products(x):
    """
    Real Name: b'share consum goverments subchemicals and chemical products'
    Original Eqn: b'([(1995,2009)-(0.09588197518751453,0.13239560556296268)],(1995,0.09588197518751453),(1996,0.1019113905016282),(1997,0.0973261077437338),(1998,0.10451610930994258),(1999,0.1038905105421696),\\\\ (2000,0.10684729730821506),(2001,0.11441273827060026),(2002,0.11710461296677933),(2003,0.11802421308716918),(2004,0.1131680314380918),\\\\ (2005,0.11811035287289917),(2006,0.1159991266683548),(2007,0.12291936960693232),(2008,0.13104795855975498),(2009,0.13239560556296268))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.09588197518751453, 0.1019113905016282, 0.0973261077437338, 0.10451610930994258,
            0.1038905105421696, 0.10684729730821506, 0.11441273827060026, 0.11710461296677933,
            0.11802421308716918, 0.1131680314380918, 0.11811035287289917, 0.1159991266683548,
            0.12291936960693232, 0.13104795855975498, 0.13239560556296268
        ])


def share_consum_goverments_subrubber_and_plastics(x):
    """
    Real Name: b'share consum goverments subrubber and plastics'
    Original Eqn: b'([(1995,2009)-(0.00627859918453306,0.008121760071879654)],(1995,0.006867200230823096),(1996,0.007733117166691025),(1997,0.007382076353556275),(1998,0.008098756846008068),(1999,0.008121760071879654),\\\\ (2000,0.006928724883784163),(2001,0.006611896916921303),(2002,0.006412599503225718),(2003,0.00627859918453306),(2004,0.006463852038577615),\\\\ (2005,0.006987327120633945),(2006,0.007095522534506072),(2007,0.007271046894131369),(2008,0.006823697974194504),(2009,0.0071450764967817045))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.006867200230823096, 0.007733117166691025, 0.007382076353556275, 0.008098756846008068,
            0.008121760071879654, 0.006928724883784163, 0.006611896916921303, 0.006412599503225718,
            0.00627859918453306, 0.006463852038577615, 0.006987327120633945, 0.007095522534506072,
            0.007271046894131369, 0.006823697974194504, 0.0071450764967817045
        ])


def share_consum_goverments_subother_non_metalic_mineral(x):
    """
    Real Name: b'share consum goverments subother non metalic mineral'
    Original Eqn: b'([(1995,2009)-(0.004575710980134348,0.006158849250484725)],(1995,0.005150147500748169),(1996,0.005601972248454674),(1997,0.004984833707272183),(1998,0.0050045677027149025),(1999,0.005220994619862051),\\\\ (2000,0.004906031702269911),(2001,0.0046695726368900506),(2002,0.004765867407184146),(2003,0.004575710980134348),(2004,0.004925408480648355),\\\\ (2005,0.005451801457053173),(2006,0.005476256518325244),(2007,0.005940164753101489),(2008,0.006012657637842877),(2009,0.006158849250484725))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.005150147500748169, 0.005601972248454674, 0.004984833707272183, 0.0050045677027149025,
        0.005220994619862051, 0.004906031702269911, 0.0046695726368900506, 0.004765867407184146,
        0.004575710980134348, 0.004925408480648355, 0.005451801457053173, 0.005476256518325244,
        0.005940164753101489, 0.006012657637842877, 0.006158849250484725
    ])


def share_consum_goverments_subbasic_metals_and_fabricated_metal(x):
    """
    Real Name: b'share consum goverments subbasic metals and fabricated metal'
    Original Eqn: b'([(1995,2009)-(0.003264025079857985,0.005212766425513586)],(1995,0.003714588731977942),(1996,0.003695607624002559),(1997,0.003264025079857985),(1998,0.003456144989750174),(1999,0.003909675072085389),\\\\ (2000,0.003567486126274761),(2001,0.004087484008773003),(2002,0.004580826890509096),(2003,0.003954657469767477),(2004,0.003832560933406138),\\\\ (2005,0.003872948283557392),(2006,0.0037354425586724055),(2007,0.004369197638847987),(2008,0.004504712881791057),(2009,0.005212766425513586))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.003714588731977942, 0.003695607624002559, 0.003264025079857985, 0.003456144989750174,
            0.003909675072085389, 0.003567486126274761, 0.004087484008773003, 0.004580826890509096,
            0.003954657469767477, 0.003832560933406138, 0.003872948283557392,
            0.0037354425586724055, 0.004369197638847987, 0.004504712881791057, 0.005212766425513586
        ])


def share_consum_goverments_submachinery_nec(x):
    """
    Real Name: b'share consum goverments submachinery nec'
    Original Eqn: b'([(1995,2009)-(0.0015195162676146234,0.003975012421065428)],(1995,0.003462102165770177),(1996,0.0036617822542566983),(1997,0.003605389168536691),(1998,0.003975012421065428),(1999,0.003576070848771421),\\\\ (2000,0.0024004574567129543),(2001,0.002133422389799059),(2002,0.0020732528087047206),(2003,0.0015195162676146234),(2004,0.0016070917766987168),\\\\ (2005,0.0017110936542217888),(2006,0.0017042538525656047),(2007,0.0018089274613794315),(2008,0.00179493990200113),(2009,0.0020036796744404423))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.003462102165770177, 0.0036617822542566983, 0.003605389168536691, 0.003975012421065428,
        0.003576070848771421, 0.0024004574567129543, 0.002133422389799059, 0.0020732528087047206,
        0.0015195162676146234, 0.0016070917766987168, 0.0017110936542217888, 0.0017042538525656047,
        0.0018089274613794315, 0.00179493990200113, 0.0020036796744404423
    ])


def share_consum_goverments_subelectrical_and_optical_equipment(x):
    """
    Real Name: b'share consum goverments subelectrical and optical equipment'
    Original Eqn: b'([(1995,2009)-(0.005879390033122016,0.010584245313257168)],(1995,0.005879390033122016),(1996,0.006689280053562139),(1997,0.006260917348372466),(1998,0.006383402577586877),(1999,0.007626339783897834),\\\\ (2000,0.008952172345135323),(2001,0.009938402470472538),(2002,0.010584245313257168),(2003,0.010485426607225824),(2004,0.009528021492371893),\\\\ (2005,0.009159007241327075),(2006,0.009390892943976928),(2007,0.009368214117085202),(2008,0.008491380955383702),(2009,0.010526372953268005))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.005879390033122016, 0.006689280053562139, 0.006260917348372466, 0.006383402577586877,
            0.007626339783897834, 0.008952172345135323, 0.009938402470472538, 0.010584245313257168,
            0.010485426607225824, 0.009528021492371893, 0.009159007241327075, 0.009390892943976928,
            0.009368214117085202, 0.008491380955383702, 0.010526372953268005
        ])


def share_consum_goverments_subtransport_equipment(x):
    """
    Real Name: b'share consum goverments subtransport equipment'
    Original Eqn: b'([(1995,2009)-(0.002818274426028272,0.004599388270976094)],(1995,0.002818274426028272),(1996,0.0030134399979940317),(1997,0.0030013782829294688),(1998,0.003324582114787668),(1999,0.0033937364928424093),\\\\ (2000,0.004179287165548907),(2001,0.004060256365656964),(2002,0.004599388270976094),(2003,0.004521827080112946),(2004,0.0039045057195699682),\\\\ (2005,0.003377303061102904),(2006,0.0032156831100202668),(2007,0.002999720037553041),(2008,0.003025284132570713),(2009,0.0031225730516014757))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.002818274426028272, 0.0030134399979940317, 0.0030013782829294688, 0.003324582114787668,
        0.0033937364928424093, 0.004179287165548907, 0.004060256365656964, 0.004599388270976094,
        0.004521827080112946, 0.0039045057195699682, 0.003377303061102904, 0.0032156831100202668,
        0.002999720037553041, 0.003025284132570713, 0.0031225730516014757
    ])


def share_consum_goverments_submanufacturing_nec_recycling(x):
    """
    Real Name: b'share consum goverments submanufacturing nec recycling'
    Original Eqn: b'([(1995,2009)-(0.010195116719573927,0.02514402773966533)],(1995,0.02071206794500831),(1996,0.02145589854505419),(1997,0.0214355818274276),(1998,0.02514402773966533),(1999,0.01774772016365786),\\\\ (2000,0.013419020602064787),(2001,0.012203537170182726),(2002,0.011759010701610579),(2003,0.010195116719573927),(2004,0.010562251657894164),\\\\ (2005,0.010833741123216334),(2006,0.01030096052750391),(2007,0.010593246762629493),(2008,0.011621782561596393),(2009,0.012719313855909485))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.02071206794500831, 0.02145589854505419, 0.0214355818274276, 0.02514402773966533,
            0.01774772016365786, 0.013419020602064787, 0.012203537170182726, 0.011759010701610579,
            0.010195116719573927, 0.010562251657894164, 0.010833741123216334, 0.01030096052750391,
            0.010593246762629493, 0.011621782561596393, 0.012719313855909485
        ])


def share_consum_goverments_subelectricity_gas_and_water_supply(x):
    """
    Real Name: b'share consum goverments subelectricity gas and water supply'
    Original Eqn: b'([(1995,2009)-(0.011073682393823454,0.020307088408552488)],(1995,0.011073682393823454),(1996,0.014062257866705289),(1997,0.013761686141498856),(1998,0.014297671627160625),(1999,0.012947249209290532),\\\\ (2000,0.013116308794034108),(2001,0.012724684366983808),(2002,0.01399302698870909),(2003,0.013964725368533456),(2004,0.014932092232165415),\\\\ (2005,0.016923049048231383),(2006,0.020237318698904688),(2007,0.020307088408552488),(2008,0.018222111231047673),(2009,0.019718462441084224))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.011073682393823454, 0.014062257866705289, 0.013761686141498856, 0.014297671627160625,
            0.012947249209290532, 0.013116308794034108, 0.012724684366983808, 0.01399302698870909,
            0.013964725368533456, 0.014932092232165415, 0.016923049048231383, 0.020237318698904688,
            0.020307088408552488, 0.018222111231047673, 0.019718462441084224
        ])


def share_consum_goverments_subconstruction(x):
    """
    Real Name: b'share consum goverments subconstruction'
    Original Eqn: b'([(1995,2009)-(0.0016539914075433919,0.004951394442164713)],(1995,0.0038967149105365593),(1996,0.0037926289235951103),(1997,0.003584887454493617),(1998,0.004030136291386803),(1999,0.0043782604871680005),\\\\ (2000,0.004424182707116258),(2001,0.004527167347521452),(2002,0.004951394442164713),(2003,0.0046428441481454205),(2004,0.003398133507831463),\\\\ (2005,0.0023546145866514584),(2006,0.001689633412741827),(2007,0.0016539914075433919),(2008,0.0017930949205848523),(2009,0.0020141898925777795))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.0038967149105365593, 0.0037926289235951103, 0.003584887454493617, 0.004030136291386803,
        0.0043782604871680005, 0.004424182707116258, 0.004527167347521452, 0.004951394442164713,
        0.0046428441481454205, 0.003398133507831463, 0.0023546145866514584, 0.001689633412741827,
        0.0016539914075433919, 0.0017930949205848523, 0.0020141898925777795
    ])


def share_consum_goverments_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
        x):
    """
    Real Name: b'share consum goverments subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'
    Original Eqn: b'([(1995,2009)-(0.0038892410595649297,0.008003455543375147)],(1995,0.0038892410595649297),(1996,0.005403324383601953),(1997,0.005555193258671485),(1998,0.005806921261116362),(1999,0.0055187734847195),\\\\ (2000,0.0060804999283362755),(2001,0.006576770190355463),(2002,0.006599236892085225),(2003,0.006951525047583767),(2004,0.006930155684757487),\\\\ (2005,0.0071569467110036466),(2006,0.006965090647827174),(2007,0.006885708406717167),(2008,0.006969574494336234),(2009,0.008003455543375147))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.0038892410595649297, 0.005403324383601953, 0.005555193258671485, 0.005806921261116362,
        0.0055187734847195, 0.0060804999283362755, 0.006576770190355463, 0.006599236892085225,
        0.006951525047583767, 0.006930155684757487, 0.0071569467110036466, 0.006965090647827174,
        0.006885708406717167, 0.006969574494336234, 0.008003455543375147
    ])


def share_consum_goverments_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
        x):
    """
    Real Name: b'share consum goverments subwholesale trade and commissions trade except of motor vehicles and motorcycles'
    Original Eqn: b'([(1995,2009)-(0.008215710233384077,0.012048869135356076)],(1995,0.008215710233384077),(1996,0.01006648267750522),(1997,0.009307515695653029),(1998,0.009444958125729505),(1999,0.009364679486856759),\\\\ (2000,0.009765600552568655),(2001,0.010207317570209486),(2002,0.010771962374229452),(2003,0.01067527004648461),(2004,0.010462899400149748),\\\\ (2005,0.010587576110538116),(2006,0.0108347645089915),(2007,0.01077759596108046),(2008,0.010732709364063026),(2009,0.012048869135356076))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.008215710233384077, 0.01006648267750522, 0.009307515695653029, 0.009444958125729505,
            0.009364679486856759, 0.009765600552568655, 0.010207317570209486, 0.010771962374229452,
            0.01067527004648461, 0.010462899400149748, 0.010587576110538116, 0.0108347645089915,
            0.01077759596108046, 0.010732709364063026, 0.012048869135356076
        ])


def share_consum_goverments_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
        x):
    """
    Real Name: b'share consum goverments subretail trade except of motor vehicles and motorcycles repair of household goods'
    Original Eqn: b'([(1995,2009)-(0.004884652051206438,0.009141731015561386)],(1995,0.004884652051206438),(1996,0.006598553542763822),(1997,0.006508686887531563),(1998,0.006705691997046858),(1999,0.007025347276833513),\\\\ (2000,0.00720794339648111),(2001,0.007317693553382741),(2002,0.007707318698817354),(2003,0.007486817205849609),(2004,0.007496077432961913),\\\\ (2005,0.007788715871380901),(2006,0.007790913253695477),(2007,0.00796523132976134),(2008,0.008075132023729639),(2009,0.009141731015561386))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.004884652051206438, 0.006598553542763822, 0.006508686887531563, 0.006705691997046858,
            0.007025347276833513, 0.00720794339648111, 0.007317693553382741, 0.007707318698817354,
            0.007486817205849609, 0.007496077432961913, 0.007788715871380901, 0.007790913253695477,
            0.00796523132976134, 0.008075132023729639, 0.009141731015561386
        ])


def share_consum_goverments_subhotels_and_restaurants(x):
    """
    Real Name: b'share consum goverments subhotels and restaurants'
    Original Eqn: b'([(1995,2009)-(0.002236912343894969,0.014358500409294464)],(1995,0.014358500409294464),(1996,0.009986641171961503),(1997,0.004972707818870327),(1998,0.005180644227287415),(1999,0.003157808005666468),\\\\ (2000,0.0026105687179988736),(2001,0.0023619220258709814),(2002,0.0022802596097973695),(2003,0.002236912343894969),(2004,0.0032285975612425005),\\\\ (2005,0.004006717191046085),(2006,0.004771145868031531),(2007,0.005057546903846365),(2008,0.004275366439841901),(2009,0.004318083939434814))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.014358500409294464, 0.009986641171961503, 0.004972707818870327, 0.005180644227287415,
        0.003157808005666468, 0.0026105687179988736, 0.0023619220258709814, 0.0022802596097973695,
        0.002236912343894969, 0.0032285975612425005, 0.004006717191046085, 0.004771145868031531,
        0.005057546903846365, 0.004275366439841901, 0.004318083939434814
    ])


def share_consum_goverments_subinland_transport(x):
    """
    Real Name: b'share consum goverments subinland transport'
    Original Eqn: b'([(1995,2009)-(0.015458390956758244,0.04548291871340436)],(1995,0.015458390956758244),(1996,0.020988629145090622),(1997,0.020208389033241396),(1998,0.024190375963752966),(1999,0.028979965613103086),\\\\ (2000,0.0340573400355154),(2001,0.03787454338990796),(2002,0.038778817683728796),(2003,0.042856040285980994),(2004,0.04333737779943819),\\\\ (2005,0.040877931695314014),(2006,0.040017654428911954),(2007,0.044561875720359245),(2008,0.042253292012375945),(2009,0.04548291871340436))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.015458390956758244, 0.020988629145090622, 0.020208389033241396, 0.024190375963752966,
            0.028979965613103086, 0.0340573400355154, 0.03787454338990796, 0.038778817683728796,
            0.042856040285980994, 0.04333737779943819, 0.040877931695314014, 0.040017654428911954,
            0.044561875720359245, 0.042253292012375945, 0.04548291871340436
        ])


def share_consum_goverments_subwater_transport(x):
    """
    Real Name: b'share consum goverments subwater transport'
    Original Eqn: b'([(1995,2009)-(0.005625692184953877,0.05576891724508192)],(1995,0.006638978375793083),(1996,0.007670674964602831),(1997,0.006643243068732121),(1998,0.0070420634278164475),(1999,0.005625692184953877),\\\\ (2000,0.005825483070381239),(2001,0.005755526565640597),(2002,0.0059064747947359724),(2003,0.031040299562048543),(2004,0.0444328959360957),\\\\ (2005,0.045343068051017205),(2006,0.0419767170469466),(2007,0.05198184793293863),(2008,0.050442763300947255),(2009,0.05576891724508192))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.006638978375793083, 0.007670674964602831, 0.006643243068732121, 0.0070420634278164475,
        0.005625692184953877, 0.005825483070381239, 0.005755526565640597, 0.0059064747947359724,
        0.031040299562048543, 0.0444328959360957, 0.045343068051017205, 0.0419767170469466,
        0.05198184793293863, 0.050442763300947255, 0.05576891724508192
    ])


def share_consum_goverments_subair_transport(x):
    """
    Real Name: b'share consum goverments subair transport'
    Original Eqn: b'([(1995,2009)-(0.002600142907132616,0.01003440101939009)],(1995,0.005646296734251731),(1996,0.0056558638910256965),(1997,0.003568218719757792),(1998,0.003452988698190144),(1999,0.003113214535012367),\\\\ (2000,0.002600142907132616),(2001,0.00352760744719066),(2002,0.0035150489272458216),(2003,0.008303301417705423),(2004,0.01003440101939009),\\\\ (2005,0.007348632019004971),(2006,0.007740245562564343),(2007,0.009810656999234713),(2008,0.009168958102788652),(2009,0.00981130620506604))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.005646296734251731, 0.0056558638910256965, 0.003568218719757792,
            0.003452988698190144, 0.003113214535012367, 0.002600142907132616, 0.00352760744719066,
            0.0035150489272458216, 0.008303301417705423, 0.01003440101939009, 0.007348632019004971,
            0.007740245562564343, 0.009810656999234713, 0.009168958102788652, 0.00981130620506604
        ])


def share_consum_goverments_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
        x):
    """
    Real Name: b'share consum goverments subother supporting and auxiliary transport activities activities of travel agencies'
    Original Eqn: b'([(1995,2009)-(0.08605821054032661,0.11357295739188283)],(1995,0.09733431731089942),(1996,0.09901239662412917),(1997,0.09351013009433082),(1998,0.09307715377473842),(1999,0.090464559595115),\\\\ (2000,0.08605821054032661),(2001,0.10652486260006906),(2002,0.11145975472969767),(2003,0.11357295739188283),(2004,0.11017723359651423),\\\\ (2005,0.10491172806150008),(2006,0.1011831510665581),(2007,0.09842241225860136),(2008,0.09838464480853919),(2009,0.09731960940160281))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.09733431731089942, 0.09901239662412917, 0.09351013009433082, 0.09307715377473842,
            0.090464559595115, 0.08605821054032661, 0.10652486260006906, 0.11145975472969767,
            0.11357295739188283, 0.11017723359651423, 0.10491172806150008, 0.1011831510665581,
            0.09842241225860136, 0.09838464480853919, 0.09731960940160281
        ])


def share_consum_goverments_subpost_and_telecommunications(x):
    """
    Real Name: b'share consum goverments subpost and telecommunications'
    Original Eqn: b'([(1995,2009)-(0.004821274684917958,0.007810889098747097)],(1995,0.007425900250296456),(1996,0.007218033564359982),(1997,0.006671966436504588),(1998,0.00755011709325932),(1999,0.007798984111468217),\\\\ (2000,0.006194892527289748),(2001,0.005508562494627751),(2002,0.00575293539502172),(2003,0.005392135225406816),(2004,0.004821274684917958),\\\\ (2005,0.005148559804682313),(2006,0.00553343108337951),(2007,0.006297209998691717),(2008,0.006491788496943986),(2009,0.007810889098747097))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.007425900250296456, 0.007218033564359982, 0.006671966436504588, 0.00755011709325932,
            0.007798984111468217, 0.006194892527289748, 0.005508562494627751, 0.00575293539502172,
            0.005392135225406816, 0.004821274684917958, 0.005148559804682313, 0.00553343108337951,
            0.006297209998691717, 0.006491788496943986, 0.007810889098747097
        ])


def share_consum_goverments_subfinancial_intermediation(x):
    """
    Real Name: b'share consum goverments subfinancial intermediation'
    Original Eqn: b'([(1995,2009)-(0.024038702335690176,0.057191672612287296)],(1995,0.03758331475685865),(1996,0.027581273496790935),(1997,0.025235830692599766),(1998,0.02508840686447435),(1999,0.024038702335690176),\\\\ (2000,0.02474875619024354),(2001,0.031203030082480394),(2002,0.03890041017856948),(2003,0.04298777082414324),(2004,0.04647391196264396),\\\\ (2005,0.04820648818054139),(2006,0.054020887398685435),(2007,0.05660365990915811),(2008,0.057191672612287296),(2009,0.05349723889956909))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.03758331475685865, 0.027581273496790935, 0.025235830692599766, 0.02508840686447435,
            0.024038702335690176, 0.02474875619024354, 0.031203030082480394, 0.03890041017856948,
            0.04298777082414324, 0.04647391196264396, 0.04820648818054139, 0.054020887398685435,
            0.05660365990915811, 0.057191672612287296, 0.05349723889956909
        ])


def share_consum_goverments_subreal_estate_activities(x):
    """
    Real Name: b'share consum goverments subreal estate activities'
    Original Eqn: b'([(1995,2009)-(0.0027998697728837665,0.0053409330371467)],(1995,0.0053409330371467),(1996,0.00480747520979442),(1997,0.004356879732159147),(1998,0.005051056791957753),(1999,0.0042817328034103035),\\\\ (2000,0.003082759572882315),(2001,0.002882345202542986),(2002,0.0028984962506404615),(2003,0.0027998697728837665),(2004,0.0029336909071597957),\\\\ (2005,0.0029228584018284724),(2006,0.0032377155699126986),(2007,0.0032471376757725566),(2008,0.003313038453281683),(2009,0.0033056974047413435))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.0053409330371467, 0.00480747520979442, 0.004356879732159147, 0.005051056791957753,
        0.0042817328034103035, 0.003082759572882315, 0.002882345202542986, 0.0028984962506404615,
        0.0027998697728837665, 0.0029336909071597957, 0.0029228584018284724, 0.0032377155699126986,
        0.0032471376757725566, 0.003313038453281683, 0.0033056974047413435
    ])


def share_consum_goverments_subrenting_od_meq_and_other_business_activities(x):
    """
    Real Name: b'share consum goverments subrenting od meq and other business activities'
    Original Eqn: b'([(1995,2009)-(0.10777177059907846,0.17978959576830966)],(1995,0.10777177059907846),(1996,0.12766213970374193),(1997,0.128477992110974),(1998,0.13977631646313407),(1999,0.14717767633342763),\\\\ (2000,0.15478196524040605),(2001,0.16957094795516728),(2002,0.17978959576830966),(2003,0.1755571954925755),(2004,0.16458717780184334),\\\\ (2005,0.1432232593236837),(2006,0.13416821175274135),(2007,0.14146388986144026),(2008,0.13442398718655846),(2009,0.13699391236524086))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.10777177059907846, 0.12766213970374193, 0.128477992110974, 0.13977631646313407,
            0.14717767633342763, 0.15478196524040605, 0.16957094795516728, 0.17978959576830966,
            0.1755571954925755, 0.16458717780184334, 0.1432232593236837, 0.13416821175274135,
            0.14146388986144026, 0.13442398718655846, 0.13699391236524086
        ])


def share_consum_goverments_subpublic_admin_and_defence_compulsory_social_security(x):
    """
    Real Name: b'share consum goverments subpublic admin and defence compulsory social security'
    Original Eqn: b'([(1995,2009)-(0.8825512222435824,0.9101561542351737)],(1995,0.8825512222435824),(1996,0.9019740353263537),(1997,0.9055209153005452),(1998,0.9070353979129336),(1999,0.9101561542351737),\\\\ (2000,0.9071215692757418),(2001,0.9039291693459441),(2002,0.9009660123926903),(2003,0.8991346577949707),(2004,0.8948821888313753),\\\\ (2005,0.8935084759144025),(2006,0.8922590472793164),(2007,0.8935680286075393),(2008,0.895349946046101),(2009,0.892671897122667))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.8825512222435824, 0.9019740353263537, 0.9055209153005452, 0.9070353979129336,
            0.9101561542351737, 0.9071215692757418, 0.9039291693459441, 0.9009660123926903,
            0.8991346577949707, 0.8948821888313753, 0.8935084759144025, 0.8922590472793164,
            0.8935680286075393, 0.895349946046101, 0.892671897122667
        ])


def share_consum_goverments_subeducation(x):
    """
    Real Name: b'share consum goverments subeducation'
    Original Eqn: b'([(1995,2009)-(0.6593581001080975,0.7095164543500799)],(1995,0.7095164543500799),(1996,0.7040856404423688),(1997,0.6993589354235593),(1998,0.698581612534672),(1999,0.6987685915889159),\\\\ (2000,0.6958775202480544),(2001,0.6893004419028962),(2002,0.6836379033975156),(2003,0.6765593042142081),(2004,0.6662693916312913),\\\\ (2005,0.6630464757694154),(2006,0.660201578395071),(2007,0.6615962513449365),(2008,0.659828413873094),(2009,0.6593581001080975))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.7095164543500799, 0.7040856404423688, 0.6993589354235593, 0.698581612534672,
            0.6987685915889159, 0.6958775202480544, 0.6893004419028962, 0.6836379033975156,
            0.6765593042142081, 0.6662693916312913, 0.6630464757694154, 0.660201578395071,
            0.6615962513449365, 0.659828413873094, 0.6593581001080975
        ])


def share_consum_goverments_subhealth_and_social_work(x):
    """
    Real Name: b'share consum goverments subhealth and social work'
    Original Eqn: b'([(1995,2009)-(0.4372577649745116,0.4588957626796008)],(1995,0.4588957626796008),(1996,0.44707649924014653),(1997,0.43785031864326934),(1998,0.43967250874908564),(1999,0.44259141677895925),\\\\ (2000,0.44421483587784627),(2001,0.440685782407788),(2002,0.43726784569342825),(2003,0.4372577649745116),(2004,0.43796753502845864),\\\\ (2005,0.4378164095136612),(2006,0.43992755579739684),(2007,0.4425537217710332),(2008,0.443198533634356),(2009,0.4408943873395209))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.4588957626796008, 0.44707649924014653, 0.43785031864326934, 0.43967250874908564,
            0.44259141677895925, 0.44421483587784627, 0.440685782407788, 0.43726784569342825,
            0.4372577649745116, 0.43796753502845864, 0.4378164095136612, 0.43992755579739684,
            0.4425537217710332, 0.443198533634356, 0.4408943873395209
        ])


def share_consum_goverments_subother_community_social_and_persona_services(x):
    """
    Real Name: b'share consum goverments subother community social and persona services'
    Original Eqn: b'([(1995,2009)-(0.0807001909529624,0.13593187360842532)],(1995,0.13593187360842532),(1996,0.0910574921371381),(1997,0.0873395017587308),(1998,0.08692860129270708),(1999,0.08999187621790489),\\\\ (2000,0.090740783333636),(2001,0.08823471238711048),(2002,0.0863032736828504),(2003,0.08522731060173952),(2004,0.08453682210016202),\\\\ (2005,0.08167532299694542),(2006,0.0807001909529624),(2007,0.08463448174674901),(2008,0.0850306568023039),(2009,0.08931954847715241))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.13593187360842532, 0.0910574921371381, 0.0873395017587308, 0.08692860129270708,
            0.08999187621790489, 0.090740783333636, 0.08823471238711048, 0.0863032736828504,
            0.08522731060173952, 0.08453682210016202, 0.08167532299694542, 0.0807001909529624,
            0.08463448174674901, 0.0850306568023039, 0.08931954847715241
        ])


def share_consum_goverments_subprivate_households_with_employed_persons(x):
    """
    Real Name: b'share consum goverments subprivate households with employed persons'
    Original Eqn: b'([(1995,2009)-(0.0009518818302216298,0.012031510285201963)],(1995,0.0010228200228570537),(1996,0.0011290416169956153),(1997,0.0009518818302216298),(1998,0.0009739207509484318),(1999,0.003226765298868626),\\\\ (2000,0.0045618940852030915),(2001,0.006250676296558422),(2002,0.007856379237276827),(2003,0.009536129903780428),(2004,0.009469554208776931),\\\\ (2005,0.01007163264373241),(2006,0.010290112726275327),(2007,0.010477541610775753),(2008,0.009767631985404314),(2009,0.012031510285201963))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.0010228200228570537, 0.0011290416169956153, 0.0009518818302216298, 0.0009739207509484318,
        0.003226765298868626, 0.0045618940852030915, 0.006250676296558422, 0.007856379237276827,
        0.009536129903780428, 0.009469554208776931, 0.01007163264373241, 0.010290112726275327,
        0.010477541610775753, 0.009767631985404314, 0.012031510285201963
    ])


def share_inventories_subagriculture_hunting_forestry_and_fishing(x):
    """
    Real Name: b'share inventories subagriculture hunting forestry and fishing'
    Original Eqn: b'([(1995,2009)-(0.009276799405214435,0.041942233336400334)],(1995,0.039806446548852466),(1996,0.03461669019581704),(1997,0.041942233336400334),(1998,0.009276799405214435),(1999,0.016075123961072323),\\\\ (2000,0.024217754183502624),(2001,0.032446087618470246),(2002,0.013212424725283112),(2003,0.03376795965480616),(2004,0.03382604411506391),\\\\ (2005,0.018401487557593552),(2006,0.01982139598204595),(2007,0.018904899276004725),(2008,0.015809658030545876),(2009,0.010160482589476171))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.039806446548852466, 0.03461669019581704, 0.041942233336400334, 0.009276799405214435,
            0.016075123961072323, 0.024217754183502624, 0.032446087618470246, 0.013212424725283112,
            0.03376795965480616, 0.03382604411506391, 0.018401487557593552, 0.01982139598204595,
            0.018904899276004725, 0.015809658030545876, 0.010160482589476171
        ])


def share_inventories_submining_and_quarrying(x):
    """
    Real Name: b'share inventories submining and quarrying'
    Original Eqn: b'([(1995,2009)-(-0.03526634160335441,0.1452938030085441)],(1995,0.14492615777706683),(1996,0.09426322868948797),(1997,0.1452938030085441),(1998,-0.010522918740413148),(1999,0.015323039580696841),\\\\ (2000,0.062066986325035677),(2001,0.04610341694033021),(2002,-0.03526634160335441),(2003,0.04212319356415536),(2004,0.022861810664424075),\\\\ (2005,0.04151711701584518),(2006,0.10319681541565758),(2007,0.021374515787298973),(2008,0.0025377049344237237),(2009,0.020923144714220698))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.14492615777706683, 0.09426322868948797, 0.1452938030085441, -0.010522918740413148,
            0.015323039580696841, 0.062066986325035677, 0.04610341694033021, -0.03526634160335441,
            0.04212319356415536, 0.022861810664424075, 0.04151711701584518, 0.10319681541565758,
            0.021374515787298973, 0.0025377049344237237, 0.020923144714220698
        ])


def share_inventories_subfood_beverages_and_tobacco(x):
    """
    Real Name: b'share inventories subfood beverages and tobacco'
    Original Eqn: b'([(1995,2009)-(0.0015067456009418114,0.015018588928445093)],(1995,0.015018588928445093),(1996,0.011229125465680464),(1997,0.014950252179427848),(1998,0.0015067456009418114),(1999,0.008219784022741013),\\\\ (2000,0.013112354704970405),(2001,0.015008429524128383),(2002,0.00496232604036188),(2003,0.010115436166276024),(2004,0.014090630265515118),\\\\ (2005,0.010472018505405785),(2006,0.011288293056324823),(2007,0.010285984899975899),(2008,0.011670533759363205),(2009,0.003484397941663512))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.015018588928445093, 0.011229125465680464, 0.014950252179427848, 0.0015067456009418114,
        0.008219784022741013, 0.013112354704970405, 0.015008429524128383, 0.00496232604036188,
        0.010115436166276024, 0.014090630265515118, 0.010472018505405785, 0.011288293056324823,
        0.010285984899975899, 0.011670533759363205, 0.003484397941663512
    ])


def share_inventories_subtextiles_and_textile_products(x):
    """
    Real Name: b'share inventories subtextiles and textile products'
    Original Eqn: b'([(1995,2009)-(-0.01617110107273339,0.03700800887524616)],(1995,0.03700800887524616),(1996,0.025922783205493752),(1997,0.025535222531598935),(1998,0.0008444416652216993),(1999,0.020417391981624455),\\\\ (2000,0.028992295980142094),(2001,0.025311362536731913),(2002,0.007727580121531834),(2003,0.002825711516221771),(2004,0.012079303124812086),\\\\ (2005,0.005519571894805784),(2006,0.013120023882477527),(2007,0.005518243280871071),(2008,0.007934972086945095),(2009,-0.01617110107273339))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.03700800887524616, 0.025922783205493752, 0.025535222531598935, 0.0008444416652216993,
            0.020417391981624455, 0.028992295980142094, 0.025311362536731913, 0.007727580121531834,
            0.002825711516221771, 0.012079303124812086, 0.005519571894805784, 0.013120023882477527,
            0.005518243280871071, 0.007934972086945095, -0.01617110107273339
        ])


def share_inventories_subleather_leather_and_footwear(x):
    """
    Real Name: b'share inventories subleather leather and footwear'
    Original Eqn: b'([(1995,2009)-(-0.02726512256395504,0.03913219959356502)],(1995,0.03913219959356502),(1996,0.02741801605303332),(1997,0.03308742478636399),(1998,0.004191804519572037),(1999,0.014882491116945982),\\\\ (2000,0.019108017204367233),(2001,0.024126896069485666),(2002,-0.0019191225645622243),(2003,-0.0011903123376724623),(2004,0.000523595101187629),\\\\ (2005,0.0014322759731371915),(2006,0.0007313941121081056),(2007,-0.0067765566832306955),(2008,-0.00849822559971483),(2009,-0.02726512256395504))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.03913219959356502, 0.02741801605303332, 0.03308742478636399, 0.004191804519572037,
        0.014882491116945982, 0.019108017204367233, 0.024126896069485666, -0.0019191225645622243,
        -0.0011903123376724623, 0.000523595101187629, 0.0014322759731371915, 0.0007313941121081056,
        -0.0067765566832306955, -0.00849822559971483, -0.02726512256395504
    ])


def share_inventories_subwood_and_products_of_wood_and_cork(x):
    """
    Real Name: b'share inventories subwood and products of wood and cork'
    Original Eqn: b'([(1995,2009)-(-0.1616632516649013,0.07544310598978189)],(1995,0.07544310598978189),(1996,0.05099801463435518),(1997,0.060516673656964955),(1998,-0.0006817607991020593),(1999,0.03308155567618923),\\\\ (2000,0.04742896859549011),(2001,0.011396171400018095),(2002,0.0012185991078174092),(2003,-0.0032429105557199417),(2004,0.014559681116070878),\\\\ (2005,0.010593103068180825),(2006,-0.012816239554372989),(2007,-0.07238100443548619),(2008,-0.10795313752850011),(2009,-0.1616632516649013))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.07544310598978189, 0.05099801463435518, 0.060516673656964955, -0.0006817607991020593,
            0.03308155567618923, 0.04742896859549011, 0.011396171400018095, 0.0012185991078174092,
            -0.0032429105557199417, 0.014559681116070878, 0.010593103068180825,
            -0.012816239554372989, -0.07238100443548619, -0.10795313752850011, -0.1616632516649013
        ])


def share_inventories_subpulp_paper_printing_and_publishing(x):
    """
    Real Name: b'share inventories subpulp paper printing and publishing'
    Original Eqn: b'([(1995,2009)-(-0.08641675950037707,0.01797167429902852)],(1995,0.014348233928113558),(1996,0.0017209535478593398),(1997,0.011116633244823542),(1998,-0.019023876579578658),(1999,-0.013690682653597472),\\\\ (2000,0.01797167429902852),(2001,0.009140803917325045),(2002,-0.03402770659174538),(2003,-0.03710591437128926),(2004,-0.03741405276295467),\\\\ (2005,-0.03459212455574808),(2006,-0.04266723275308837),(2007,-0.05746675136230981),(2008,-0.06279328074894397),(2009,-0.08641675950037707))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.014348233928113558, 0.0017209535478593398, 0.011116633244823542, -0.019023876579578658,
        -0.013690682653597472, 0.01797167429902852, 0.009140803917325045, -0.03402770659174538,
        -0.03710591437128926, -0.03741405276295467, -0.03459212455574808, -0.04266723275308837,
        -0.05746675136230981, -0.06279328074894397, -0.08641675950037707
    ])


def share_inventories_subcoke_refined_petroleum_and_nuclear_fuel(x):
    """
    Real Name: b'share inventories subcoke refined petroleum and nuclear fuel'
    Original Eqn: b'([(1995,2009)-(-0.01979745228789293,0.029657526659950657)],(1995,0.009662414285604149),(1996,0.022397163766748884),(1997,0.029657526659950657),(1998,-0.009844842065857869),(1999,-0.0012157576444566558),\\\\ (2000,0.017875454252156166),(2001,0.017945093269225307),(2002,-0.016425040672843304),(2003,0.0015011190602734984),(2004,0.012571300154402403),\\\\ (2005,0.024019248679712973),(2006,0.01245074623470567),(2007,-0.011533595218422517),(2008,0.008062090060610764),(2009,-0.01979745228789293))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.009662414285604149, 0.022397163766748884, 0.029657526659950657, -0.009844842065857869,
        -0.0012157576444566558, 0.017875454252156166, 0.017945093269225307, -0.016425040672843304,
        0.0015011190602734984, 0.012571300154402403, 0.024019248679712973, 0.01245074623470567,
        -0.011533595218422517, 0.008062090060610764, -0.01979745228789293
    ])


def share_inventories_subchemicals_and_chemical_products(x):
    """
    Real Name: b'share inventories subchemicals and chemical products'
    Original Eqn: b'([(1995,2009)-(0.002697712399088707,0.06341341306758376)],(1995,0.05693764085223191),(1996,0.05005938101189353),(1997,0.06341341306758376),(1998,0.020305971801720977),(1999,0.045376681578992654),\\\\ (2000,0.04901889821081202),(2001,0.04136089819946551),(2002,0.009874150034516383),(2003,0.013029559844310389),(2004,0.031023231245148577),\\\\ (2005,0.027035191107908304),(2006,0.03542343907150098),(2007,0.03570302269336227),(2008,0.014621691554917347),(2009,0.002697712399088707))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.05693764085223191, 0.05005938101189353, 0.06341341306758376, 0.020305971801720977,
            0.045376681578992654, 0.04901889821081202, 0.04136089819946551, 0.009874150034516383,
            0.013029559844310389, 0.031023231245148577, 0.027035191107908304, 0.03542343907150098,
            0.03570302269336227, 0.014621691554917347, 0.002697712399088707
        ])


def share_inventories_subrubber_and_plastics(x):
    """
    Real Name: b'share inventories subrubber and plastics'
    Original Eqn: b'([(1995,2009)-(-0.05411230890422361,0.0778141986127367)],(1995,0.0778141986127367),(1996,0.05155601037400166),(1997,0.05613935712413145),(1998,0.01993782490332162),(1999,0.014493329733790127),\\\\ (2000,0.0326650525055877),(2001,0.022302165133758694),(2002,0.007727464783111726),(2003,0.008855703431832364),(2004,0.02600911316279692),\\\\ (2005,0.00811772737440893),(2006,0.02960706717970953),(2007,0.0038264700381658127),(2008,0.005101709762047021),(2009,-0.05411230890422361))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.0778141986127367, 0.05155601037400166, 0.05613935712413145, 0.01993782490332162,
            0.014493329733790127, 0.0326650525055877, 0.022302165133758694, 0.007727464783111726,
            0.008855703431832364, 0.02600911316279692, 0.00811772737440893, 0.02960706717970953,
            0.0038264700381658127, 0.005101709762047021, -0.05411230890422361
        ])


def share_inventories_subother_non_metalic_mineral(x):
    """
    Real Name: b'share inventories subother non metalic mineral'
    Original Eqn: b'([(1995,2009)-(-0.06198036957638333,0.12020984415955097)],(1995,0.12020984415955097),(1996,0.09206994019660208),(1997,0.10746874545566801),(1998,0.029834516830541346),(1999,0.0323522570370145),\\\\ (2000,0.04737016753690253),(2001,0.0459722775727321),(2002,-0.06198036957638333),(2003,-0.028632375936390057),(2004,-0.0045939428954693065),\\\\ (2005,0.007506379019318679),(2006,0.0529179511250499),(2007,0.040814956805921516),(2008,0.023955408358392986),(2009,-0.049341810520510544))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.12020984415955097, 0.09206994019660208, 0.10746874545566801, 0.029834516830541346,
            0.0323522570370145, 0.04737016753690253, 0.0459722775727321, -0.06198036957638333,
            -0.028632375936390057, -0.0045939428954693065, 0.007506379019318679,
            0.0529179511250499, 0.040814956805921516, 0.023955408358392986, -0.049341810520510544
        ])


def share_inventories_subbasic_metals_and_fabricated_metal(x):
    """
    Real Name: b'share inventories subbasic metals and fabricated metal'
    Original Eqn: b'([(1995,2009)-(-0.1578288206210243,0.039232899341370225)],(1995,0.03598798077997525),(1996,0.0031870963507300964),(1997,0.009123680856206623),(1998,-0.05776728641089819),(1999,-0.063023093491151),\\\\ (2000,0.028766376131321228),(2001,-0.0012881757231380966),(2002,-0.05179315666335895),(2003,-0.02408351048492784),(2004,0.007466442421217998),\\\\ (2005,-7.513578161285693e-05),(2006,0.039232899341370225),(2007,-0.04691660213435318),(2008,-0.05954158611418101),(2009,-0.1578288206210243))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.03598798077997525, 0.0031870963507300964, 0.009123680856206623, -0.05776728641089819,
            -0.063023093491151, 0.028766376131321228, -0.0012881757231380966, -0.05179315666335895,
            -0.02408351048492784, 0.007466442421217998, -7.513578161285693e-05,
            0.039232899341370225, -0.04691660213435318, -0.05954158611418101, -0.1578288206210243
        ])


def share_inventories_submachinery_nec(x):
    """
    Real Name: b'share inventories submachinery nec'
    Original Eqn: b'([(1995,2009)-(-0.011732858194081435,0.018576378785219894)],(1995,0.01812631038583679),(1996,0.010574262541391523),(1997,0.00696599493820793),(1998,-0.002172547925658203),(1999,0.0016757710330077133),\\\\ (2000,0.018576378785219894),(2001,0.013271560872378692),(2002,-0.011732858194081435),(2003,0.01588751699230089),(2004,0.009124612525020096),\\\\ (2005,0.006060567821491422),(2006,0.014060643446260344),(2007,0.006903952206265926),(2008,0.004552560360692592),(2009,-0.00599537770581172))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.01812631038583679, 0.010574262541391523, 0.00696599493820793, -0.002172547925658203,
            0.0016757710330077133, 0.018576378785219894, 0.013271560872378692,
            -0.011732858194081435, 0.01588751699230089, 0.009124612525020096, 0.006060567821491422,
            0.014060643446260344, 0.006903952206265926, 0.004552560360692592, -0.00599537770581172
        ])


def share_inventories_subelectrical_and_optical_equipment(x):
    """
    Real Name: b'share inventories subelectrical and optical equipment'
    Original Eqn: b'([(1995,2009)-(-0.009340748606651865,0.04296331477731733)],(1995,0.03195972862002789),(1996,0.023168508723542067),(1997,0.028354704013657167),(1998,0.015847142402905943),(1999,0.02265004660576361),\\\\ (2000,0.04296331477731733),(2001,0.0016590409136539952),(2002,-0.00859960846267911),(2003,0.011252897017189633),(2004,0.03358385692165521),\\\\ (2005,0.02280449294652064),(2006,0.029076321142639805),(2007,0.01526034762999966),(2008,0.013992211001478148),(2009,-0.009340748606651865))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.03195972862002789, 0.023168508723542067, 0.028354704013657167, 0.015847142402905943,
            0.02265004660576361, 0.04296331477731733, 0.0016590409136539952, -0.00859960846267911,
            0.011252897017189633, 0.03358385692165521, 0.02280449294652064, 0.029076321142639805,
            0.01526034762999966, 0.013992211001478148, -0.009340748606651865
        ])


def share_inventories_subtransport_equipment(x):
    """
    Real Name: b'share inventories subtransport equipment'
    Original Eqn: b'([(1995,2009)-(-0.006722001475231583,0.02190095810026589)],(1995,0.01872732946069781),(1996,0.008363827805679104),(1997,0.010886046103550569),(1998,0.0032035392047634697),(1999,0.021106266218248022),\\\\ (2000,0.011928490546162383),(2001,0.021600092686336735),(2002,0.011439507854791203),(2003,0.012926172570669917),(2004,0.010692503650363025),\\\\ (2005,0.0198993047564401),(2006,0.02190095810026589),(2007,0.015357859751103917),(2008,0.006712683942431885),(2009,-0.006722001475231583))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.01872732946069781, 0.008363827805679104, 0.010886046103550569, 0.0032035392047634697,
            0.021106266218248022, 0.011928490546162383, 0.021600092686336735, 0.011439507854791203,
            0.012926172570669917, 0.010692503650363025, 0.0198993047564401, 0.02190095810026589,
            0.015357859751103917, 0.006712683942431885, -0.006722001475231583
        ])


def share_inventories_submanufacturing_nec_recycling(x):
    """
    Real Name: b'share inventories submanufacturing nec recycling'
    Original Eqn: b'([(1995,2009)-(-0.006185433819430002,0.03481081306590101)],(1995,0.02326623640267202),(1996,0.01857734778416911),(1997,0.022404736598060047),(1998,0.007320140860101643),(1999,0.017631024963925525),\\\\ (2000,0.03481081306590101),(2001,0.030668103927010547),(2002,0.014946590623808492),(2003,0.013840143578630438),(2004,0.021493995531179255),\\\\ (2005,0.02802975748870618),(2006,0.022896789367939235),(2007,0.007827848982984867),(2008,0.01601343571723777),(2009,-0.006185433819430002))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.02326623640267202, 0.01857734778416911, 0.022404736598060047, 0.007320140860101643,
            0.017631024963925525, 0.03481081306590101, 0.030668103927010547, 0.014946590623808492,
            0.013840143578630438, 0.021493995531179255, 0.02802975748870618, 0.022896789367939235,
            0.007827848982984867, 0.01601343571723777, -0.006185433819430002
        ])


def share_inventories_subelectricity_gas_and_water_supply(x):
    """
    Real Name: b'share inventories subelectricity gas and water supply'
    Original Eqn: b'([(1995,2009)-(-0.0021056969906526287,0.0013558288107230248)],(1995,0.0009962481163932318),(1996,0.00042413317519049144),(1997,0.0013558288107230248),(1998,0.0005431237710083078),(1999,0.0007282829655163663),\\\\ (2000,0.0006328974362719102),(2001,-0.0002694355176032213),(2002,-0.0010487328296012264),(2003,-0.00033330844580074255),(2004,-0.0016884595669077243),\\\\ (2005,-0.0005938883617179873),(2006,0.00023858153100637895),(2007,-0.0009011798421525196),(2008,-0.00120160160343804),(2009,-0.0021056969906526287))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.0009962481163932318, 0.00042413317519049144, 0.0013558288107230248,
            0.0005431237710083078, 0.0007282829655163663, 0.0006328974362719102,
            -0.0002694355176032213, -0.0010487328296012264, -0.00033330844580074255,
            -0.0016884595669077243, -0.0005938883617179873, 0.00023858153100637895,
            -0.0009011798421525196, -0.00120160160343804, -0.0021056969906526287
        ])


def share_inventories_subconstruction(x):
    """
    Real Name: b'share inventories subconstruction'
    Original Eqn: b'([(1995,2009)-(-0.00020292513825069224,0.0011973075229034687)],(1995,0.00020072745436100465),(1996,-0.00014896785893889322),(1997,0.00032862049346872265),(1998,0.00012345146463194415),(1999,0.0004437915830468549),\\\\ (2000,0.0002729355150054159),(2001,0.00034811231920423496),(2002,2.6341616277743705e-05),(2003,-5.133599583922819e-05),(2004,-0.00020292513825069224),\\\\ (2005,0.00020208833289227384),(2006,0.0003465351793535172),(2007,0.0009605838860180702),(2008,0.0011973075229034687),(2009,0.0010350447943260576))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.00020072745436100465, -0.00014896785893889322, 0.00032862049346872265,
            0.00012345146463194415, 0.0004437915830468549, 0.0002729355150054159,
            0.00034811231920423496, 2.6341616277743705e-05, -5.133599583922819e-05,
            -0.00020292513825069224, 0.00020208833289227384, 0.0003465351793535172,
            0.0009605838860180702, 0.0011973075229034687, 0.0010350447943260576
        ])


def share_inventories_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
        x):
    """
    Real Name: b'share inventories subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'
    Original Eqn: b'([(1995,2009)-(-0.004117596796533778,0.006521608339560344)],(1995,0.004810299878730776),(1996,0.0023929746013658833),(1997,0.0031142324982446606),(1998,0.0015004391254643849),(1999,0.0028785617029874824),\\\\ (2000,0.006521608339560344),(2001,0.006391678364164279),(2002,-0.000475560711611828),(2003,0.001976871260373391),(2004,0.004240190894063026),\\\\ (2005,0.0031622262651984615),(2006,0.005417379052287837),(2007,0.004613781515618692),(2008,0.004953710498287375),(2009,-0.004117596796533778))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.004810299878730776, 0.0023929746013658833, 0.0031142324982446606, 0.0015004391254643849,
        0.0028785617029874824, 0.006521608339560344, 0.006391678364164279, -0.000475560711611828,
        0.001976871260373391, 0.004240190894063026, 0.0031622262651984615, 0.005417379052287837,
        0.004613781515618692, 0.004953710498287375, -0.004117596796533778
    ])


def share_inventories_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
        x):
    """
    Real Name: b'share inventories subwholesale trade and commissions trade except of motor vehicles and motorcycles'
    Original Eqn: b'([(1995,2009)-(-0.0021458011259934246,0.021671426326427642)],(1995,0.021671426326427642),(1996,0.015368793493944032),(1997,0.0176144036678834),(1998,0.0076430350349353925),(1999,0.010562158065515002),\\\\ (2000,0.016008740199098148),(2001,0.007243281960070458),(2002,0.0009669664677655769),(2003,0.0035568537305010403),(2004,0.0022383440684109767),\\\\ (2005,0.003896461990106976),(2006,0.005195678507696852),(2007,0.003923266504628535),(2008,0.008047525531025905),(2009,-0.0021458011259934246))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.021671426326427642, 0.015368793493944032, 0.0176144036678834, 0.0076430350349353925,
        0.010562158065515002, 0.016008740199098148, 0.007243281960070458, 0.0009669664677655769,
        0.0035568537305010403, 0.0022383440684109767, 0.003896461990106976, 0.005195678507696852,
        0.003923266504628535, 0.008047525531025905, -0.0021458011259934246
    ])


def share_inventories_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
        x):
    """
    Real Name: b'share inventories subretail trade except of motor vehicles and motorcycles repair of household goods'
    Original Eqn: b'([(1995,2009)-(-0.000741128990872675,0.010710865249582027)],(1995,0.008215506595961384),(1996,0.004783819038525881),(1997,0.006436223327803524),(1998,0.0026383681892997285),(1999,0.005164286657848896),\\\\ (2000,0.010710865249582027),(2001,0.00984858735790179),(2002,0.0015008944423482583),(2003,0.003897921771497273),(2004,0.006130297658989541),\\\\ (2005,0.004498001375669275),(2006,0.006691703056267292),(2007,0.0054425175554355726),(2008,0.004830282847275033),(2009,-0.000741128990872675))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.008215506595961384, 0.004783819038525881, 0.006436223327803524, 0.0026383681892997285,
        0.005164286657848896, 0.010710865249582027, 0.00984858735790179, 0.0015008944423482583,
        0.003897921771497273, 0.006130297658989541, 0.004498001375669275, 0.006691703056267292,
        0.0054425175554355726, 0.004830282847275033, -0.000741128990872675
    ])


def share_inventories_subhotels_and_restaurants(x):
    """
    Real Name: b'share inventories subhotels and restaurants'
    Original Eqn: b'([(1995,2009)-(-0.0003572996584286368,0.002911897359610583)],(1995,-0.00014589121778786507),(1996,-0.00020737488320897337),(1997,0.0001446685483487721),(1998,-0.0003572996584286368),(1999,0.0006549819387167176),\\\\ (2000,0.0020955879814969908),(2001,0.002911897359610583),(2002,0.0006233249367963001),(2003,0.0007016828988724827),(2004,0.0005359206216678118),\\\\ (2005,0.0004919458570455678),(2006,0.0006475599403373204),(2007,0.0002856755321237399),(2008,0.00023288616823906658),(2009,0.0004124112092339731))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        -0.00014589121778786507, -0.00020737488320897337, 0.0001446685483487721,
        -0.0003572996584286368, 0.0006549819387167176, 0.0020955879814969908, 0.002911897359610583,
        0.0006233249367963001, 0.0007016828988724827, 0.0005359206216678118, 0.0004919458570455678,
        0.0006475599403373204, 0.0002856755321237399, 0.00023288616823906658, 0.0004124112092339731
    ])


def share_inventories_subinland_transport(x):
    """
    Real Name: b'share inventories subinland transport'
    Original Eqn: b'([(1995,2009)-(0.0002411375900309864,0.01399853187795113)],(1995,0.01399853187795113),(1996,0.010176833024630351),(1997,0.012536329641196792),(1998,0.00430214531254968),(1999,0.005348367920419633),\\\\ (2000,0.006554338122717555),(2001,0.005378382435539208),(2002,0.0019515962711634627),(2003,0.0027197909056981668),(2004,0.004730984658814206),\\\\ (2005,0.003957970135238292),(2006,0.006311517029460731),(2007,0.003440626216147738),(2008,0.0028761249209255206),(2009,0.0002411375900309864))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.01399853187795113, 0.010176833024630351, 0.012536329641196792, 0.00430214531254968,
        0.005348367920419633, 0.006554338122717555, 0.005378382435539208, 0.0019515962711634627,
        0.0027197909056981668, 0.004730984658814206, 0.003957970135238292, 0.006311517029460731,
        0.003440626216147738, 0.0028761249209255206, 0.0002411375900309864
    ])


def share_inventories_subwater_transport(x):
    """
    Real Name: b'share inventories subwater transport'
    Original Eqn: b'([(1995,2009)-(0.0014308799030149516,0.08684434873201745)],(1995,0.04320323072050123),(1996,0.03445012707955338),(1997,0.033535203070921914),(1998,0.013131889748329966),(1999,0.027919145462781503),\\\\ (2000,0.041024487927804686),(2001,0.08466919183155805),(2002,0.00307740567425285),(2003,0.003488829237790001),(2004,0.0029639888705386475),\\\\ (2005,0.003599625678616155),(2006,0.05066574298576478),(2007,0.0014308799030149516),(2008,0.08611950649678217),(2009,0.08684434873201745))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.04320323072050123, 0.03445012707955338, 0.033535203070921914, 0.013131889748329966,
            0.027919145462781503, 0.041024487927804686, 0.08466919183155805, 0.00307740567425285,
            0.003488829237790001, 0.0029639888705386475, 0.003599625678616155, 0.05066574298576478,
            0.0014308799030149516, 0.08611950649678217, 0.08684434873201745
        ])


def share_inventories_subair_transport(x):
    """
    Real Name: b'share inventories subair transport'
    Original Eqn: b'([(1995,2009)-(-0.00044423394440304637,0.010872926861949048)],(1995,0.0031032243349323895),(1996,0.0021245645834738853),(1997,0.0025850705351703157),(1998,0.0008091388791002279),(1999,0.0023436047159025035),\\\\ (2000,0.004759184665233702),(2001,0.010872926861949048),(2002,-0.00044423394440304637),(2003,0.0012555125044372616),(2004,0.0004702718420441391),\\\\ (2005,0.001191508687522141),(2006,0.00350381933999573),(2007,0.0010309466286302909),(2008,0.002977872931688678),(2009,0.0005918793793829298))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.0031032243349323895, 0.0021245645834738853, 0.0025850705351703157, 0.0008091388791002279,
        0.0023436047159025035, 0.004759184665233702, 0.010872926861949048, -0.00044423394440304637,
        0.0012555125044372616, 0.0004702718420441391, 0.001191508687522141, 0.00350381933999573,
        0.0010309466286302909, 0.002977872931688678, 0.0005918793793829298
    ])


def share_inventories_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
        x):
    """
    Real Name: b'share inventories subother supporting and auxiliary transport activities activities of travel agencies'
    Original Eqn: b'([(1995,2009)-(0.0019734244893533683,0.030505284447352746)],(1995,0.02284442934144017),(1996,0.015631051792266138),(1997,0.02986296802524229),(1998,0.012259844509753592),(1999,0.012338783661043004),\\\\ (2000,0.011534383792643545),(2001,0.030505284447352746),(2002,0.004886689383534703),(2003,0.004357898672331982),(2004,0.005428457355999516),\\\\ (2005,0.005817028918166772),(2006,0.00976790454953955),(2007,0.005881481394028688),(2008,0.010246379983008607),(2009,0.0019734244893533683))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.02284442934144017, 0.015631051792266138, 0.02986296802524229, 0.012259844509753592,
            0.012338783661043004, 0.011534383792643545, 0.030505284447352746, 0.004886689383534703,
            0.004357898672331982, 0.005428457355999516, 0.005817028918166772, 0.00976790454953955,
            0.005881481394028688, 0.010246379983008607, 0.0019734244893533683
        ])


def share_inventories_subpost_and_telecommunications(x):
    """
    Real Name: b'share inventories subpost and telecommunications'
    Original Eqn: b'([(1995,2009)-(-0.005068250485275013,0.0032325119339692335)],(1995,0.0011057850769560624),(1996,0.0009488551439241703),(1997,0.0012396105428931219),(1998,0.0007444440848184912),(1999,0.0014685834763999532),\\\\ (2000,0.0020441730699772512),(2001,0.0032325119339692335),(2002,-0.005068250485275013),(2003,0.00043111420964910284),(2004,0.0009169560942092407),\\\\ (2005,0.000570352331915007),(2006,0.0007087983726690691),(2007,0.0005448397305536379),(2008,0.0009565343787786686),(2009,0.000645581668543594))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.0011057850769560624, 0.0009488551439241703, 0.0012396105428931219, 0.0007444440848184912,
        0.0014685834763999532, 0.0020441730699772512, 0.0032325119339692335, -0.005068250485275013,
        0.00043111420964910284, 0.0009169560942092407, 0.000570352331915007, 0.0007087983726690691,
        0.0005448397305536379, 0.0009565343787786686, 0.000645581668543594
    ])


def share_inventories_subfinancial_intermediation(x):
    """
    Real Name: b'share inventories subfinancial intermediation'
    Original Eqn: b'([(1995,2009)-(-0.007524568226264509,0.0012264529642908699)],(1995,0.00018628940902411898),(1996,9.11231272700768e-05),(1997,7.542788209146378e-05),(1998,-1.4400616429060148e-05),(1999,8.229749543927034e-05),\\\\ (2000,0.0003937912440804006),(2001,0.0009093943635503735),(2002,-0.007524568226264509),(2003,-0.004274426163508445),(2004,8.49992603244964e-05),\\\\ (2005,9.833482351623146e-05),(2006,0.00013797126261373458),(2007,8.384317855566425e-05),(2008,0.0006442841441413284),(2009,0.0012264529642908699))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.00018628940902411898, 9.11231272700768e-05, 7.542788209146378e-05,
            -1.4400616429060148e-05, 8.229749543927034e-05, 0.0003937912440804006,
            0.0009093943635503735, -0.007524568226264509, -0.004274426163508445,
            8.49992603244964e-05, 9.833482351623146e-05, 0.00013797126261373458,
            8.384317855566425e-05, 0.0006442841441413284, 0.0012264529642908699
        ])


def share_inventories_subreal_estate_activities(x):
    """
    Real Name: b'share inventories subreal estate activities'
    Original Eqn: b'([(1995,2009)-(-2.8778440691593814e-05,8.646807700213472e-05)],(1995,3.55572466866178e-05),(1996,2.91907526576806e-05),(1997,1.9879281529659025e-05),(1998,1.4105622407877741e-05),(1999,8.646807700213472e-05),\\\\ (2000,2.161401447580686e-05),(2001,7.110088024127258e-06),(2002,7.479695881646118e-06),(2003,2.0296672084406522e-06),(2004,9.156903678863279e-06),\\\\ (2005,2.6108742903649806e-05),(2006,3.0340352036303263e-05),(2007,2.039824756142603e-05),(2008,7.322588921311033e-05),(2009,-2.8778440691593814e-05))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            3.55572466866178e-05, 2.91907526576806e-05, 1.9879281529659025e-05,
            1.4105622407877741e-05, 8.646807700213472e-05, 2.161401447580686e-05,
            7.110088024127258e-06, 7.479695881646118e-06, 2.0296672084406522e-06,
            9.156903678863279e-06, 2.6108742903649806e-05, 3.0340352036303263e-05,
            2.039824756142603e-05, 7.322588921311033e-05, -2.8778440691593814e-05
        ])


def share_inventories_subrenting_od_meq_and_other_business_activities(x):
    """
    Real Name: b'share inventories subrenting od meq and other business activities'
    Original Eqn: b'([(1995,2009)-(0.000463289136776625,0.01864576873493577)],(1995,0.0011964287316454426),(1996,0.000831602174777396),(1997,0.0033847710947051517),(1998,0.0005761788915349635),(1999,0.0031079738205755606),\\\\ (2000,0.0021995063936603304),(2001,0.0022211587023244217),(2002,0.000463289136776625),(2003,0.003827049793333797),(2004,0.0032723048332935715),\\\\ (2005,0.00282669028048174),(2006,0.0033238445248807004),(2007,0.0019278144414444816),(2008,0.01864576873493577),(2009,0.0074378011898418245))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.0011964287316454426, 0.000831602174777396, 0.0033847710947051517, 0.0005761788915349635,
        0.0031079738205755606, 0.0021995063936603304, 0.0022211587023244217, 0.000463289136776625,
        0.003827049793333797, 0.0032723048332935715, 0.00282669028048174, 0.0033238445248807004,
        0.0019278144414444816, 0.01864576873493577, 0.0074378011898418245
    ])


def share_inventories_subpublic_admin_and_defence_compulsory_social_security(x):
    """
    Real Name: b'share inventories subpublic admin and defence compulsory social security'
    Original Eqn: b'([(1995,2009)-(-0.0072323360613766275,-0.0038007332944622442)],(1995,-0.006668793979221436),(1996,-0.006890673086698083),(1997,-0.005679982938310693),(1998,-0.0072323360613766275),(1999,-0.006114828678354021),\\\\ (2000,-0.005356116532156387),(2001,-0.0038007332944622442),(2002,-0.005674782512487631),(2003,-0.004853486698943161),(2004,-0.004676214705836499),\\\\ (2005,-0.004558338326465761),(2006,-0.004537527544218771),(2007,-0.0053082216326086635),(2008,-0.005544836892740801),(2009,-0.003922579936947399))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            -0.006668793979221436, -0.006890673086698083, -0.005679982938310693,
            -0.0072323360613766275, -0.006114828678354021, -0.005356116532156387,
            -0.0038007332944622442, -0.005674782512487631, -0.004853486698943161,
            -0.004676214705836499, -0.004558338326465761, -0.004537527544218771,
            -0.0053082216326086635, -0.005544836892740801, -0.003922579936947399
        ])


def share_inventories_subeducation(x):
    """
    Real Name: b'share inventories subeducation'
    Original Eqn: b'([(1995,2009)-(-2.615975302391741e-05,8.725195270895369e-05)],(1995,2.144403809132422e-05),(1996,1.8730226585082882e-05),(1997,1.3231663407411775e-05),(1998,4.799534989921149e-06),(1999,3.0446684471332545e-05),\\\\ (2000,1.098827169556429e-05),(2001,2.5728856619887022e-05),(2002,1.3380636827243842e-05),(2003,4.505158402132235e-05),(2004,2.248247898388548e-06),\\\\ (2005,8.725195270895369e-05),(2006,-2.615975302391741e-05),(2007,8.26970101974835e-06),(2008,1.5833949800231638e-05),(2009,4.7541740478130375e-05))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            2.144403809132422e-05, 1.8730226585082882e-05, 1.3231663407411775e-05,
            4.799534989921149e-06, 3.0446684471332545e-05, 1.098827169556429e-05,
            2.5728856619887022e-05, 1.3380636827243842e-05, 4.505158402132235e-05,
            2.248247898388548e-06, 8.725195270895369e-05, -2.615975302391741e-05,
            8.26970101974835e-06, 1.5833949800231638e-05, 4.7541740478130375e-05
        ])


def share_inventories_subhealth_and_social_work(x):
    """
    Real Name: b'share inventories subhealth and social work'
    Original Eqn: b'([(1995,2009)-(-3.1727632790426594e-05,2.3448960211648786e-05)],(1995,5.356250958867206e-06),(1996,8.428876000649878e-07),(1997,3.87479673142649e-06),(1998,4.426989397210959e-06),(1999,1.484503418608409e-05),\\\\ (2000,2.0269244774470538e-05),(2001,1.2951043297292982e-05),(2002,-3.1727632790426594e-05),(2003,1.9634547384056006e-05),(2004,1.5997263037852878e-05),\\\\ (2005,1.0177684924305919e-05),(2006,1.965940194824921e-05),(2007,1.4489386545164095e-05),(2008,2.3448960211648786e-05),(2009,-9.502931854099198e-06))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            5.356250958867206e-06, 8.428876000649878e-07, 3.87479673142649e-06,
            4.426989397210959e-06, 1.484503418608409e-05, 2.0269244774470538e-05,
            1.2951043297292982e-05, -3.1727632790426594e-05, 1.9634547384056006e-05,
            1.5997263037852878e-05, 1.0177684924305919e-05, 1.965940194824921e-05,
            1.4489386545164095e-05, 2.3448960211648786e-05, -9.502931854099198e-06
        ])


def share_inventories_subother_community_social_and_persona_services(x):
    """
    Real Name: b'share inventories subother community social and persona services'
    Original Eqn: b'([(1995,2009)-(-0.013448818323945873,-0.0016249396890407504)],(1995,-0.0090127726393938),(1996,-0.010629458350807685),(1997,-0.008848671736319593),(1998,-0.013448818323945873),(1999,-0.008946039163755016),\\\\ (2000,-0.004793431904417115),(2001,-0.0016249396890407504),(2002,-0.0022020738024543162),(2003,-0.0018956770408739025),(2004,-0.001785715673228679),\\\\ (2005,-0.0018879388774512668),(2006,-0.0017953987374448959),(2007,-0.0024802205711734492),(2008,-0.003448648466737081),(2009,-0.0020721433092937003))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            -0.0090127726393938, -0.010629458350807685, -0.008848671736319593,
            -0.013448818323945873, -0.008946039163755016, -0.004793431904417115,
            -0.0016249396890407504, -0.0022020738024543162, -0.0018956770408739025,
            -0.001785715673228679, -0.0018879388774512668, -0.0017953987374448959,
            -0.0024802205711734492, -0.003448648466737081, -0.0020721433092937003
        ])


def share_inventories_subprivate_households_with_employed_persons(x):
    """
    Real Name: b'share inventories subprivate households with employed persons'
    Original Eqn: b'([(1995,2009)-(-0.0002681430771119126,0.0015237584902465407)],(1995,7.853351243135922e-05),(1996,9.814582614953874e-05),(1997,9.588248461668407e-06),(1998,-7.821361593256881e-05),(1999,-2.411516128394616e-05),\\\\ (2000,-3.631893686050125e-06),(2001,-5.08923087015618e-05),(2002,-0.00022539143199814182),(2003,-0.0002681430771119126),(2004,6.398985647852799e-05),\\\\ (2005,4.7633349046714305e-05),(2006,0.0015237584902465407),(2007,0.000990345581418567),(2008,0.0009393292444326495),(2009,0.0008607609964860263))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            7.853351243135922e-05, 9.814582614953874e-05, 9.588248461668407e-06,
            -7.821361593256881e-05, -2.411516128394616e-05, -3.631893686050125e-06,
            -5.08923087015618e-05, -0.00022539143199814182, -0.0002681430771119126,
            6.398985647852799e-05, 4.7633349046714305e-05, 0.0015237584902465407,
            0.000990345581418567, 0.0009393292444326495, 0.0008607609964860263
        ])


def share_consum_goverments_next_step_subagriculture_hunting_forestry_and_fishing(x):
    """
    Real Name: b'share consum goverments next step subagriculture hunting forestry and fishing'
    Original Eqn: b'([(1995,2008)-(0.006395238231716023,0.010233756778334888)],(1995,0.0067709613778314465),(1996,0.006395238231716023),(1997,0.007562221479560522),(1998,0.006909511984020509),(1999,0.007982988184916011),\\\\ (2000,0.008446717428753593),(2001,0.009326405167881661),(2002,0.009029494951501007),(2003,0.009305637069275475),(2004,0.009311394291421764),\\\\ (2005,0.009911989953154088),(2006,0.010233756778334888),(2007,0.008994169837883667),(2008,0.00869869421963916))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0067709613778314465, 0.006395238231716023, 0.007562221479560522,
            0.006909511984020509, 0.007982988184916011, 0.008446717428753593, 0.009326405167881661,
            0.009029494951501007, 0.009305637069275475, 0.009311394291421764, 0.009911989953154088,
            0.010233756778334888, 0.008994169837883667, 0.00869869421963916
        ])


def share_consum_goverments_next_step_submining_and_quarrying(x):
    """
    Real Name: b'share consum goverments next step submining and quarrying'
    Original Eqn: b'([(1995,2008)-(0.003995603763685553,0.006393419006564868)],(1995,0.00436164392290795),(1996,0.003995603763685553),(1997,0.004066047799643348),(1998,0.006393419006564868),(1999,0.006003153311605073),\\\\ (2000,0.0042157315738525596),(2001,0.005643824953173819),(2002,0.005273239069785034),(2003,0.005338694073945094),(2004,0.005231106875192582),\\\\ (2005,0.004151188915356074),(2006,0.004717994395060901),(2007,0.00450208701463089),(2008,0.004934708656353205))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.00436164392290795, 0.003995603763685553, 0.004066047799643348, 0.006393419006564868,
            0.006003153311605073, 0.0042157315738525596, 0.005643824953173819,
            0.005273239069785034, 0.005338694073945094, 0.005231106875192582, 0.004151188915356074,
            0.004717994395060901, 0.00450208701463089, 0.004934708656353205
        ])


def share_consum_goverments_next_step_subfood_beverages_and_tobacco(x):
    """
    Real Name: b'share consum goverments next step subfood beverages and tobacco'
    Original Eqn: b'([(1995,2008)-(0.002885066309883363,0.0038220671963571573)],(1995,0.0038220671963571573),(1996,0.002903073070627261),(1997,0.002936792709517417),(1998,0.003142168948714033),(1999,0.0031340511473669625),\\\\ (2000,0.0030303441468097964),(2001,0.003102005746783019),(2002,0.003076968042145073),(2003,0.002915823853670982),(2004,0.002931906554520569),\\\\ (2005,0.002970467773012117),(2006,0.003045614006493215),(2007,0.002961515281763346),(2008,0.002885066309883363))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0038220671963571573, 0.002903073070627261, 0.002936792709517417,
            0.003142168948714033, 0.0031340511473669625, 0.0030303441468097964,
            0.003102005746783019, 0.003076968042145073, 0.002915823853670982, 0.002931906554520569,
            0.002970467773012117, 0.003045614006493215, 0.002961515281763346, 0.002885066309883363
        ])


def share_consum_goverments_next_step_subtextiles_and_textile_products(x):
    """
    Real Name: b'share consum goverments next step subtextiles and textile products'
    Original Eqn: b'([(1995,2008)-(0.0025817118313251836,0.005253312524302093)],(1995,0.003551578898993538),(1996,0.00295957655229884),(1997,0.0026490453856551233),(1998,0.0028527421747088517),(1999,0.0025817118313251836),\\\\ (2000,0.0027787410874748823),(2001,0.0028558425631741735),(2002,0.003004220437100366),(2003,0.0030660841863479906),(2004,0.0034604581246728532),\\\\ (2005,0.00402674114226547),(2006,0.004420561138285466),(2007,0.004407476902887508),(2008,0.005253312524302093))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.003551578898993538, 0.00295957655229884, 0.0026490453856551233,
            0.0028527421747088517, 0.0025817118313251836, 0.0027787410874748823,
            0.0028558425631741735, 0.003004220437100366, 0.0030660841863479906,
            0.0034604581246728532, 0.00402674114226547, 0.004420561138285466, 0.004407476902887508,
            0.005253312524302093
        ])


def share_consum_goverments_next_step_subleather_leather_and_footwear(x):
    """
    Real Name: b'share consum goverments next step subleather leather and footwear'
    Original Eqn: b'([(1995,2008)-(0.0007351843303268899,0.0015559542279136721)],(1995,0.0015559542279136721),(1996,0.0012399353066103794),(1997,0.0013267840090444238),(1998,0.00133344367825553),(1999,0.0012313162901100574),\\\\ (2000,0.0011201067862366928),(2001,0.0008200600923468703),(2002,0.0007351843303268899),(2003,0.0007872038350995223),(2004,0.0008524970828855757),\\\\ (2005,0.000980302019330771),(2006,0.0012534804090331476),(2007,0.0013308059227996672),(2008,0.001514645887241861))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0015559542279136721, 0.0012399353066103794, 0.0013267840090444238,
            0.00133344367825553, 0.0012313162901100574, 0.0011201067862366928,
            0.0008200600923468703, 0.0007351843303268899, 0.0007872038350995223,
            0.0008524970828855757, 0.000980302019330771, 0.0012534804090331476,
            0.0013308059227996672, 0.001514645887241861
        ])


def share_consum_goverments_next_step_subwood_and_products_of_wood_and_cork(x):
    """
    Real Name: b'share consum goverments next step subwood and products of wood and cork'
    Original Eqn: b'([(1995,2008)-(0.002934685814185623,0.010385380453511185)],(1995,0.009005435491861913),(1996,0.00784410468158404),(1997,0.010385380453511185),(1998,0.005983313227598484),(1999,0.0029442159037194747),\\\\ (2000,0.003191210291931943),(2001,0.0038803930252921484),(2002,0.0033353083568353945),(2003,0.0031038702125085094),(2004,0.002934685814185623),\\\\ (2005,0.0032009994283761284),(2006,0.0031885473327917984),(2007,0.003374415685759153),(2008,0.003641151621250122))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.009005435491861913, 0.00784410468158404, 0.010385380453511185, 0.005983313227598484,
            0.0029442159037194747, 0.003191210291931943, 0.0038803930252921484,
            0.0033353083568353945, 0.0031038702125085094, 0.002934685814185623,
            0.0032009994283761284, 0.0031885473327917984, 0.003374415685759153,
            0.003641151621250122
        ])


def share_consum_goverments_next_step_subpulp_paper_printing_and_publishing(x):
    """
    Real Name: b'share consum goverments next step subpulp paper printing and publishing'
    Original Eqn: b'([(1995,2008)-(0.010944306361792914,0.01977514458023117)],(1995,0.012152022471383788),(1996,0.010944306361792914),(1997,0.013144143333725558),(1998,0.01481962044356459),(1999,0.014280346332352903),\\\\ (2000,0.014584228557471577),(2001,0.01813378209427802),(2002,0.01800422812064625),(2003,0.017428493050279235),(2004,0.01703528662283678),\\\\ (2005,0.018253358153044425),(2006,0.01977514458023117),(2007,0.016156351225622194),(2008,0.016038861285036368))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.012152022471383788, 0.010944306361792914, 0.013144143333725558, 0.01481962044356459,
            0.014280346332352903, 0.014584228557471577, 0.01813378209427802, 0.01800422812064625,
            0.017428493050279235, 0.01703528662283678, 0.018253358153044425, 0.01977514458023117,
            0.016156351225622194, 0.016038861285036368
        ])


def share_consum_goverments_next_step_subcoke_refined_petroleum_and_nuclear_fuel(x):
    """
    Real Name: b'share consum goverments next step subcoke refined petroleum and nuclear fuel'
    Original Eqn: b'([(1995,2008)-(0.005867347651754397,0.01638462176078289)],(1995,0.014073012258205416),(1996,0.014138264180255291),(1997,0.01638462176078289),(1998,0.012559974344452331),(1999,0.009745231174255206),\\\\ (2000,0.008722834180249866),(2001,0.009133945504476285),(2002,0.007599833303872037),(2003,0.006750850405801407),(2004,0.005867347651754397),\\\\ (2005,0.006685369003406569),(2006,0.007433579067682456),(2007,0.006607524613390546),(2008,0.007784103038001168))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.014073012258205416, 0.014138264180255291, 0.01638462176078289, 0.012559974344452331,
            0.009745231174255206, 0.008722834180249866, 0.009133945504476285, 0.007599833303872037,
            0.006750850405801407, 0.005867347651754397, 0.006685369003406569, 0.007433579067682456,
            0.006607524613390546, 0.007784103038001168
        ])


def share_consum_goverments_next_step_subchemicals_and_chemical_products(x):
    """
    Real Name: b'share consum goverments next step subchemicals and chemical products'
    Original Eqn: b'([(1995,2008)-(0.0973261077437338,0.13239560556296268)],(1995,0.1019113905016282),(1996,0.0973261077437338),(1997,0.10451610930994258),(1998,0.1038905105421696),(1999,0.10684729730821506),\\\\ (2000,0.11441273827060026),(2001,0.11710461296677933),(2002,0.11802421308716918),(2003,0.1131680314380918),(2004,0.11811035287289917),\\\\ (2005,0.1159991266683548),(2006,0.12291936960693232),(2007,0.13104795855975498),(2008,0.13239560556296268))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.1019113905016282, 0.0973261077437338, 0.10451610930994258, 0.1038905105421696,
            0.10684729730821506, 0.11441273827060026, 0.11710461296677933, 0.11802421308716918,
            0.1131680314380918, 0.11811035287289917, 0.1159991266683548, 0.12291936960693232,
            0.13104795855975498, 0.13239560556296268
        ])


def share_consum_goverments_next_step_subrubber_and_plastics(x):
    """
    Real Name: b'share consum goverments next step subrubber and plastics'
    Original Eqn: b'([(1995,2008)-(0.00627859918453306,0.008121760071879654)],(1995,0.007733117166691025),(1996,0.007382076353556275),(1997,0.008098756846008068),(1998,0.008121760071879654),(1999,0.006928724883784163),\\\\ (2000,0.006611896916921303),(2001,0.006412599503225718),(2002,0.00627859918453306),(2003,0.006463852038577615),(2004,0.006987327120633945),\\\\ (2005,0.007095522534506072),(2006,0.007271046894131369),(2007,0.006823697974194504),(2008,0.0071450764967817045))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.007733117166691025, 0.007382076353556275, 0.008098756846008068, 0.008121760071879654,
            0.006928724883784163, 0.006611896916921303, 0.006412599503225718, 0.00627859918453306,
            0.006463852038577615, 0.006987327120633945, 0.007095522534506072, 0.007271046894131369,
            0.006823697974194504, 0.0071450764967817045
        ])


def share_consum_goverments_next_step_subother_non_metalic_mineral(x):
    """
    Real Name: b'share consum goverments next step subother non metalic mineral'
    Original Eqn: b'([(1995,2008)-(0.004575710980134348,0.006158849250484725)],(1995,0.005601972248454674),(1996,0.004984833707272183),(1997,0.0050045677027149025),(1998,0.005220994619862051),(1999,0.004906031702269911),\\\\ (2000,0.0046695726368900506),(2001,0.004765867407184146),(2002,0.004575710980134348),(2003,0.004925408480648355),(2004,0.005451801457053173),\\\\ (2005,0.005476256518325244),(2006,0.005940164753101489),(2007,0.006012657637842877),(2008,0.006158849250484725))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.005601972248454674, 0.004984833707272183, 0.0050045677027149025,
            0.005220994619862051, 0.004906031702269911, 0.0046695726368900506,
            0.004765867407184146, 0.004575710980134348, 0.004925408480648355, 0.005451801457053173,
            0.005476256518325244, 0.005940164753101489, 0.006012657637842877, 0.006158849250484725
        ])


def share_consum_goverments_next_step_subbasic_metals_and_fabricated_metal(x):
    """
    Real Name: b'share consum goverments next step subbasic metals and fabricated metal'
    Original Eqn: b'([(1995,2008)-(0.003264025079857985,0.005212766425513586)],(1995,0.003695607624002559),(1996,0.003264025079857985),(1997,0.003456144989750174),(1998,0.003909675072085389),(1999,0.003567486126274761),\\\\ (2000,0.004087484008773003),(2001,0.004580826890509096),(2002,0.003954657469767477),(2003,0.003832560933406138),(2004,0.003872948283557392),\\\\ (2005,0.0037354425586724055),(2006,0.004369197638847987),(2007,0.004504712881791057),(2008,0.005212766425513586))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.003695607624002559, 0.003264025079857985, 0.003456144989750174, 0.003909675072085389,
            0.003567486126274761, 0.004087484008773003, 0.004580826890509096, 0.003954657469767477,
            0.003832560933406138, 0.003872948283557392, 0.0037354425586724055,
            0.004369197638847987, 0.004504712881791057, 0.005212766425513586
        ])


def share_consum_goverments_next_step_submachinery_nec(x):
    """
    Real Name: b'share consum goverments next step submachinery nec'
    Original Eqn: b'([(1995,2008)-(0.0015195162676146234,0.003975012421065428)],(1995,0.0036617822542566983),(1996,0.003605389168536691),(1997,0.003975012421065428),(1998,0.003576070848771421),(1999,0.0024004574567129543),\\\\ (2000,0.002133422389799059),(2001,0.0020732528087047206),(2002,0.0015195162676146234),(2003,0.0016070917766987168),(2004,0.0017110936542217888),\\\\ (2005,0.0017042538525656047),(2006,0.0018089274613794315),(2007,0.00179493990200113),(2008,0.0020036796744404423))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0036617822542566983, 0.003605389168536691, 0.003975012421065428,
            0.003576070848771421, 0.0024004574567129543, 0.002133422389799059,
            0.0020732528087047206, 0.0015195162676146234, 0.0016070917766987168,
            0.0017110936542217888, 0.0017042538525656047, 0.0018089274613794315,
            0.00179493990200113, 0.0020036796744404423
        ])


def share_consum_goverments_next_step_subelectrical_and_optical_equipment(x):
    """
    Real Name: b'share consum goverments next step subelectrical and optical equipment'
    Original Eqn: b'([(1995,2008)-(0.006260917348372466,0.010584245313257168)],(1995,0.006689280053562139),(1996,0.006260917348372466),(1997,0.006383402577586877),(1998,0.007626339783897834),(1999,0.008952172345135323),\\\\ (2000,0.009938402470472538),(2001,0.010584245313257168),(2002,0.010485426607225824),(2003,0.009528021492371893),(2004,0.009159007241327075),\\\\ (2005,0.009390892943976928),(2006,0.009368214117085202),(2007,0.008491380955383702),(2008,0.010526372953268005))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.006689280053562139, 0.006260917348372466, 0.006383402577586877, 0.007626339783897834,
            0.008952172345135323, 0.009938402470472538, 0.010584245313257168, 0.010485426607225824,
            0.009528021492371893, 0.009159007241327075, 0.009390892943976928, 0.009368214117085202,
            0.008491380955383702, 0.010526372953268005
        ])


def share_consum_goverments_next_step_subtransport_equipment(x):
    """
    Real Name: b'share consum goverments next step subtransport equipment'
    Original Eqn: b'([(1995,2008)-(0.002999720037553041,0.004599388270976094)],(1995,0.0030134399979940317),(1996,0.0030013782829294688),(1997,0.003324582114787668),(1998,0.0033937364928424093),(1999,0.004179287165548907),\\\\ (2000,0.004060256365656964),(2001,0.004599388270976094),(2002,0.004521827080112946),(2003,0.0039045057195699682),(2004,0.003377303061102904),\\\\ (2005,0.0032156831100202668),(2006,0.002999720037553041),(2007,0.003025284132570713),(2008,0.0031225730516014757))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0030134399979940317, 0.0030013782829294688, 0.003324582114787668,
            0.0033937364928424093, 0.004179287165548907, 0.004060256365656964,
            0.004599388270976094, 0.004521827080112946, 0.0039045057195699682,
            0.003377303061102904, 0.0032156831100202668, 0.002999720037553041,
            0.003025284132570713, 0.0031225730516014757
        ])


def share_consum_goverments_next_step_submanufacturing_nec_recycling(x):
    """
    Real Name: b'share consum goverments next step submanufacturing nec recycling'
    Original Eqn: b'([(1995,2008)-(0.010195116719573927,0.02514402773966533)],(1995,0.02145589854505419),(1996,0.0214355818274276),(1997,0.02514402773966533),(1998,0.01774772016365786),(1999,0.013419020602064787),\\\\ (2000,0.012203537170182726),(2001,0.011759010701610579),(2002,0.010195116719573927),(2003,0.010562251657894164),(2004,0.010833741123216334),\\\\ (2005,0.01030096052750391),(2006,0.010593246762629493),(2007,0.011621782561596393),(2008,0.012719313855909485))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.02145589854505419, 0.0214355818274276, 0.02514402773966533, 0.01774772016365786,
            0.013419020602064787, 0.012203537170182726, 0.011759010701610579, 0.010195116719573927,
            0.010562251657894164, 0.010833741123216334, 0.01030096052750391, 0.010593246762629493,
            0.011621782561596393, 0.012719313855909485
        ])


def share_consum_goverments_next_step_subelectricity_gas_and_water_supply(x):
    """
    Real Name: b'share consum goverments next step subelectricity gas and water supply'
    Original Eqn: b'([(1995,2008)-(0.012724684366983808,0.020307088408552488)],(1995,0.014062257866705289),(1996,0.013761686141498856),(1997,0.014297671627160625),(1998,0.012947249209290532),(1999,0.013116308794034108),\\\\ (2000,0.012724684366983808),(2001,0.01399302698870909),(2002,0.013964725368533456),(2003,0.014932092232165415),(2004,0.016923049048231383),\\\\ (2005,0.020237318698904688),(2006,0.020307088408552488),(2007,0.018222111231047673),(2008,0.019718462441084224))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.014062257866705289, 0.013761686141498856, 0.014297671627160625, 0.012947249209290532,
            0.013116308794034108, 0.012724684366983808, 0.01399302698870909, 0.013964725368533456,
            0.014932092232165415, 0.016923049048231383, 0.020237318698904688, 0.020307088408552488,
            0.018222111231047673, 0.019718462441084224
        ])


def share_consum_goverments_next_step_subconstruction(x):
    """
    Real Name: b'share consum goverments next step subconstruction'
    Original Eqn: b'([(1995,2008)-(0.0016539914075433919,0.004951394442164713)],(1995,0.0037926289235951103),(1996,0.003584887454493617),(1997,0.004030136291386803),(1998,0.0043782604871680005),(1999,0.004424182707116258),\\\\ (2000,0.004527167347521452),(2001,0.004951394442164713),(2002,0.0046428441481454205),(2003,0.003398133507831463),(2004,0.0023546145866514584),\\\\ (2005,0.001689633412741827),(2006,0.0016539914075433919),(2007,0.0017930949205848523),(2008,0.0020141898925777795))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0037926289235951103, 0.003584887454493617, 0.004030136291386803,
            0.0043782604871680005, 0.004424182707116258, 0.004527167347521452,
            0.004951394442164713, 0.0046428441481454205, 0.003398133507831463,
            0.0023546145866514584, 0.001689633412741827, 0.0016539914075433919,
            0.0017930949205848523, 0.0020141898925777795
        ])


def share_consum_goverments_next_step_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
        x):
    """
    Real Name: b'share consum goverments next step subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'
    Original Eqn: b'([(1995,2008)-(0.005403324383601953,0.008003455543375147)],(1995,0.005403324383601953),(1996,0.005555193258671485),(1997,0.005806921261116362),(1998,0.0055187734847195),(1999,0.0060804999283362755),\\\\ (2000,0.006576770190355463),(2001,0.006599236892085225),(2002,0.006951525047583767),(2003,0.006930155684757487),(2004,0.0071569467110036466),\\\\ (2005,0.006965090647827174),(2006,0.006885708406717167),(2007,0.006969574494336234),(2008,0.008003455543375147))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.005403324383601953, 0.005555193258671485, 0.005806921261116362, 0.0055187734847195,
            0.0060804999283362755, 0.006576770190355463, 0.006599236892085225,
            0.006951525047583767, 0.006930155684757487, 0.0071569467110036466,
            0.006965090647827174, 0.006885708406717167, 0.006969574494336234, 0.008003455543375147
        ])


def share_consum_goverments_next_step_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
        x):
    """
    Real Name: b'share consum goverments next step subwholesale trade and commissions trade except of motor vehicles and motorcycles'
    Original Eqn: b'([(1995,2008)-(0.009307515695653029,0.012048869135356076)],(1995,0.01006648267750522),(1996,0.009307515695653029),(1997,0.009444958125729505),(1998,0.009364679486856759),(1999,0.009765600552568655),\\\\ (2000,0.010207317570209486),(2001,0.010771962374229452),(2002,0.01067527004648461),(2003,0.010462899400149748),(2004,0.010587576110538116),\\\\ (2005,0.0108347645089915),(2006,0.01077759596108046),(2007,0.010732709364063026),(2008,0.012048869135356076))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.01006648267750522, 0.009307515695653029, 0.009444958125729505, 0.009364679486856759,
            0.009765600552568655, 0.010207317570209486, 0.010771962374229452, 0.01067527004648461,
            0.010462899400149748, 0.010587576110538116, 0.0108347645089915, 0.01077759596108046,
            0.010732709364063026, 0.012048869135356076
        ])


def share_consum_goverments_next_step_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
        x):
    """
    Real Name: b'share consum goverments next step subretail trade except of motor vehicles and motorcycles repair of household goods'
    Original Eqn: b'([(1995,2008)-(0.006508686887531563,0.009141731015561386)],(1995,0.006598553542763822),(1996,0.006508686887531563),(1997,0.006705691997046858),(1998,0.007025347276833513),(1999,0.00720794339648111),\\\\ (2000,0.007317693553382741),(2001,0.007707318698817354),(2002,0.007486817205849609),(2003,0.007496077432961913),(2004,0.007788715871380901),\\\\ (2005,0.007790913253695477),(2006,0.00796523132976134),(2007,0.008075132023729639),(2008,0.009141731015561386))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.006598553542763822, 0.006508686887531563, 0.006705691997046858, 0.007025347276833513,
            0.00720794339648111, 0.007317693553382741, 0.007707318698817354, 0.007486817205849609,
            0.007496077432961913, 0.007788715871380901, 0.007790913253695477, 0.00796523132976134,
            0.008075132023729639, 0.009141731015561386
        ])


def share_consum_goverments_next_step_subhotels_and_restaurants(x):
    """
    Real Name: b'share consum goverments next step subhotels and restaurants'
    Original Eqn: b'([(1995,2008)-(0.002236912343894969,0.009986641171961503)],(1995,0.009986641171961503),(1996,0.004972707818870327),(1997,0.005180644227287415),(1998,0.003157808005666468),(1999,0.0026105687179988736),\\\\ (2000,0.0023619220258709814),(2001,0.0022802596097973695),(2002,0.002236912343894969),(2003,0.0032285975612425005),(2004,0.004006717191046085),\\\\ (2005,0.004771145868031531),(2006,0.005057546903846365),(2007,0.004275366439841901),(2008,0.004318083939434814))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.009986641171961503, 0.004972707818870327, 0.005180644227287415, 0.003157808005666468,
            0.0026105687179988736, 0.0023619220258709814, 0.0022802596097973695,
            0.002236912343894969, 0.0032285975612425005, 0.004006717191046085,
            0.004771145868031531, 0.005057546903846365, 0.004275366439841901, 0.004318083939434814
        ])


def share_consum_goverments_next_step_subinland_transport(x):
    """
    Real Name: b'share consum goverments next step subinland transport'
    Original Eqn: b'([(1995,2008)-(0.020208389033241396,0.04548291871340436)],(1995,0.020988629145090622),(1996,0.020208389033241396),(1997,0.024190375963752966),(1998,0.028979965613103086),(1999,0.0340573400355154),\\\\ (2000,0.03787454338990796),(2001,0.038778817683728796),(2002,0.042856040285980994),(2003,0.04333737779943819),(2004,0.040877931695314014),\\\\ (2005,0.040017654428911954),(2006,0.044561875720359245),(2007,0.042253292012375945),(2008,0.04548291871340436))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.020988629145090622, 0.020208389033241396, 0.024190375963752966, 0.028979965613103086,
            0.0340573400355154, 0.03787454338990796, 0.038778817683728796, 0.042856040285980994,
            0.04333737779943819, 0.040877931695314014, 0.040017654428911954, 0.044561875720359245,
            0.042253292012375945, 0.04548291871340436
        ])


def share_consum_goverments_next_step_subwater_transport(x):
    """
    Real Name: b'share consum goverments next step subwater transport'
    Original Eqn: b'([(1995,2008)-(0.005625692184953877,0.05576891724508192)],(1995,0.007670674964602831),(1996,0.006643243068732121),(1997,0.0070420634278164475),(1998,0.005625692184953877),(1999,0.005825483070381239),\\\\ (2000,0.005755526565640597),(2001,0.0059064747947359724),(2002,0.031040299562048543),(2003,0.0444328959360957),(2004,0.045343068051017205),\\\\ (2005,0.0419767170469466),(2006,0.05198184793293863),(2007,0.050442763300947255),(2008,0.05576891724508192))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.007670674964602831, 0.006643243068732121, 0.0070420634278164475,
            0.005625692184953877, 0.005825483070381239, 0.005755526565640597,
            0.0059064747947359724, 0.031040299562048543, 0.0444328959360957, 0.045343068051017205,
            0.0419767170469466, 0.05198184793293863, 0.050442763300947255, 0.05576891724508192
        ])


def share_consum_goverments_next_step_subair_transport(x):
    """
    Real Name: b'share consum goverments next step subair transport'
    Original Eqn: b'([(1995,2008)-(0.002600142907132616,0.01003440101939009)],(1995,0.0056558638910256965),(1996,0.003568218719757792),(1997,0.003452988698190144),(1998,0.003113214535012367),(1999,0.002600142907132616),\\\\ (2000,0.00352760744719066),(2001,0.0035150489272458216),(2002,0.008303301417705423),(2003,0.01003440101939009),(2004,0.007348632019004971),\\\\ (2005,0.007740245562564343),(2006,0.009810656999234713),(2007,0.009168958102788652),(2008,0.00981130620506604))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0056558638910256965, 0.003568218719757792, 0.003452988698190144,
            0.003113214535012367, 0.002600142907132616, 0.00352760744719066, 0.0035150489272458216,
            0.008303301417705423, 0.01003440101939009, 0.007348632019004971, 0.007740245562564343,
            0.009810656999234713, 0.009168958102788652, 0.00981130620506604
        ])


def share_consum_goverments_next_step_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
        x):
    """
    Real Name: b'share consum goverments next step subother supporting and auxiliary transport activities activities of travel agencies'
    Original Eqn: b'([(1995,2008)-(0.08605821054032661,0.11357295739188283)],(1995,0.09901239662412917),(1996,0.09351013009433082),(1997,0.09307715377473842),(1998,0.090464559595115),(1999,0.08605821054032661),\\\\ (2000,0.10652486260006906),(2001,0.11145975472969767),(2002,0.11357295739188283),(2003,0.11017723359651423),(2004,0.10491172806150008),\\\\ (2005,0.1011831510665581),(2006,0.09842241225860136),(2007,0.09838464480853919),(2008,0.09731960940160281))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.09901239662412917, 0.09351013009433082, 0.09307715377473842, 0.090464559595115,
            0.08605821054032661, 0.10652486260006906, 0.11145975472969767, 0.11357295739188283,
            0.11017723359651423, 0.10491172806150008, 0.1011831510665581, 0.09842241225860136,
            0.09838464480853919, 0.09731960940160281
        ])


def share_consum_goverments_next_step_subpost_and_telecommunications(x):
    """
    Real Name: b'share consum goverments next step subpost and telecommunications'
    Original Eqn: b'([(1995,2008)-(0.004821274684917958,0.007810889098747097)],(1995,0.007218033564359982),(1996,0.006671966436504588),(1997,0.00755011709325932),(1998,0.007798984111468217),(1999,0.006194892527289748),\\\\ (2000,0.005508562494627751),(2001,0.00575293539502172),(2002,0.005392135225406816),(2003,0.004821274684917958),(2004,0.005148559804682313),\\\\ (2005,0.00553343108337951),(2006,0.006297209998691717),(2007,0.006491788496943986),(2008,0.007810889098747097))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.007218033564359982, 0.006671966436504588, 0.00755011709325932, 0.007798984111468217,
            0.006194892527289748, 0.005508562494627751, 0.00575293539502172, 0.005392135225406816,
            0.004821274684917958, 0.005148559804682313, 0.00553343108337951, 0.006297209998691717,
            0.006491788496943986, 0.007810889098747097
        ])


def share_consum_goverments_next_step_subfinancial_intermediation(x):
    """
    Real Name: b'share consum goverments next step subfinancial intermediation'
    Original Eqn: b'([(1995,2008)-(0.024038702335690176,0.057191672612287296)],(1995,0.027581273496790935),(1996,0.025235830692599766),(1997,0.02508840686447435),(1998,0.024038702335690176),(1999,0.02474875619024354),\\\\ (2000,0.031203030082480394),(2001,0.03890041017856948),(2002,0.04298777082414324),(2003,0.04647391196264396),(2004,0.04820648818054139),\\\\ (2005,0.054020887398685435),(2006,0.05660365990915811),(2007,0.057191672612287296),(2008,0.05349723889956909))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.027581273496790935, 0.025235830692599766, 0.02508840686447435, 0.024038702335690176,
            0.02474875619024354, 0.031203030082480394, 0.03890041017856948, 0.04298777082414324,
            0.04647391196264396, 0.04820648818054139, 0.054020887398685435, 0.05660365990915811,
            0.057191672612287296, 0.05349723889956909
        ])


def share_consum_goverments_next_step_subreal_estate_activities(x):
    """
    Real Name: b'share consum goverments next step subreal estate activities'
    Original Eqn: b'([(1995,2008)-(0.0027998697728837665,0.005051056791957753)],(1995,0.00480747520979442),(1996,0.004356879732159147),(1997,0.005051056791957753),(1998,0.0042817328034103035),(1999,0.003082759572882315),\\\\ (2000,0.002882345202542986),(2001,0.0028984962506404615),(2002,0.0027998697728837665),(2003,0.0029336909071597957),(2004,0.0029228584018284724),\\\\ (2005,0.0032377155699126986),(2006,0.0032471376757725566),(2007,0.003313038453281683),(2008,0.0033056974047413435))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.00480747520979442, 0.004356879732159147, 0.005051056791957753, 0.0042817328034103035,
            0.003082759572882315, 0.002882345202542986, 0.0028984962506404615,
            0.0027998697728837665, 0.0029336909071597957, 0.0029228584018284724,
            0.0032377155699126986, 0.0032471376757725566, 0.003313038453281683,
            0.0033056974047413435
        ])


def share_consum_goverments_next_step_subrenting_od_meq_and_other_business_activities(x):
    """
    Real Name: b'share consum goverments next step subrenting od meq and other business activities'
    Original Eqn: b'([(1995,2008)-(0.12766213970374193,0.17978959576830966)],(1995,0.12766213970374193),(1996,0.128477992110974),(1997,0.13977631646313407),(1998,0.14717767633342763),(1999,0.15478196524040605),\\\\ (2000,0.16957094795516728),(2001,0.17978959576830966),(2002,0.1755571954925755),(2003,0.16458717780184334),(2004,0.1432232593236837),\\\\ (2005,0.13416821175274135),(2006,0.14146388986144026),(2007,0.13442398718655846),(2008,0.13699391236524086))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.12766213970374193, 0.128477992110974, 0.13977631646313407, 0.14717767633342763,
            0.15478196524040605, 0.16957094795516728, 0.17978959576830966, 0.1755571954925755,
            0.16458717780184334, 0.1432232593236837, 0.13416821175274135, 0.14146388986144026,
            0.13442398718655846, 0.13699391236524086
        ])


def share_consum_goverments_next_step_subpublic_admin_and_defence_compulsory_social_security(x):
    """
    Real Name: b'share consum goverments next step subpublic admin and defence compulsory social security'
    Original Eqn: b'([(1995,2008)-(0.8922590472793164,0.9101561542351737)],(1995,0.9019740353263537),(1996,0.9055209153005452),(1997,0.9070353979129336),(1998,0.9101561542351737),(1999,0.9071215692757418),\\\\ (2000,0.9039291693459441),(2001,0.9009660123926903),(2002,0.8991346577949707),(2003,0.8948821888313753),(2004,0.8935084759144025),\\\\ (2005,0.8922590472793164),(2006,0.8935680286075393),(2007,0.895349946046101),(2008,0.892671897122667))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.9019740353263537, 0.9055209153005452, 0.9070353979129336, 0.9101561542351737,
            0.9071215692757418, 0.9039291693459441, 0.9009660123926903, 0.8991346577949707,
            0.8948821888313753, 0.8935084759144025, 0.8922590472793164, 0.8935680286075393,
            0.895349946046101, 0.892671897122667
        ])


def share_consum_goverments_next_step_subeducation(x):
    """
    Real Name: b'share consum goverments next step subeducation'
    Original Eqn: b'([(1995,2008)-(0.6593581001080975,0.7040856404423688)],(1995,0.7040856404423688),(1996,0.6993589354235593),(1997,0.698581612534672),(1998,0.6987685915889159),(1999,0.6958775202480544),\\\\ (2000,0.6893004419028962),(2001,0.6836379033975156),(2002,0.6765593042142081),(2003,0.6662693916312913),(2004,0.6630464757694154),\\\\ (2005,0.660201578395071),(2006,0.6615962513449365),(2007,0.659828413873094),(2008,0.6593581001080975))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.7040856404423688, 0.6993589354235593, 0.698581612534672, 0.6987685915889159,
            0.6958775202480544, 0.6893004419028962, 0.6836379033975156, 0.6765593042142081,
            0.6662693916312913, 0.6630464757694154, 0.660201578395071, 0.6615962513449365,
            0.659828413873094, 0.6593581001080975
        ])


def share_consum_goverments_next_step_subhealth_and_social_work(x):
    """
    Real Name: b'share consum goverments next step subhealth and social work'
    Original Eqn: b'([(1995,2008)-(0.4372577649745116,0.44707649924014653)],(1995,0.44707649924014653),(1996,0.43785031864326934),(1997,0.43967250874908564),(1998,0.44259141677895925),(1999,0.44421483587784627),\\\\ (2000,0.440685782407788),(2001,0.43726784569342825),(2002,0.4372577649745116),(2003,0.43796753502845864),(2004,0.4378164095136612),\\\\ (2005,0.43992755579739684),(2006,0.4425537217710332),(2007,0.443198533634356),(2008,0.4408943873395209))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.44707649924014653, 0.43785031864326934, 0.43967250874908564, 0.44259141677895925,
            0.44421483587784627, 0.440685782407788, 0.43726784569342825, 0.4372577649745116,
            0.43796753502845864, 0.4378164095136612, 0.43992755579739684, 0.4425537217710332,
            0.443198533634356, 0.4408943873395209
        ])


def share_consum_goverments_next_step_subother_community_social_and_persona_services(x):
    """
    Real Name: b'share consum goverments next step subother community social and persona services'
    Original Eqn: b'([(1995,2008)-(0.0807001909529624,0.0910574921371381)],(1995,0.0910574921371381),(1996,0.0873395017587308),(1997,0.08692860129270708),(1998,0.08999187621790489),(1999,0.090740783333636),\\\\ (2000,0.08823471238711048),(2001,0.0863032736828504),(2002,0.08522731060173952),(2003,0.08453682210016202),(2004,0.08167532299694542),\\\\ (2005,0.0807001909529624),(2006,0.08463448174674901),(2007,0.0850306568023039),(2008,0.08931954847715241))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0910574921371381, 0.0873395017587308, 0.08692860129270708, 0.08999187621790489,
            0.090740783333636, 0.08823471238711048, 0.0863032736828504, 0.08522731060173952,
            0.08453682210016202, 0.08167532299694542, 0.0807001909529624, 0.08463448174674901,
            0.0850306568023039, 0.08931954847715241
        ])


def share_consum_goverments_next_step_subprivate_households_with_employed_persons(x):
    """
    Real Name: b'share consum goverments next step subprivate households with employed persons'
    Original Eqn: b'([(1995,2008)-(0.0009518818302216298,0.012031510285201963)],(1995,0.0011290416169956153),(1996,0.0009518818302216298),(1997,0.0009739207509484318),(1998,0.003226765298868626),(1999,0.0045618940852030915),\\\\ (2000,0.006250676296558422),(2001,0.007856379237276827),(2002,0.009536129903780428),(2003,0.009469554208776931),(2004,0.01007163264373241),\\\\ (2005,0.010290112726275327),(2006,0.010477541610775753),(2007,0.009767631985404314),(2008,0.012031510285201963))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0011290416169956153, 0.0009518818302216298, 0.0009739207509484318,
            0.003226765298868626, 0.0045618940852030915, 0.006250676296558422,
            0.007856379237276827, 0.009536129903780428, 0.009469554208776931, 0.01007163264373241,
            0.010290112726275327, 0.010477541610775753, 0.009767631985404314, 0.012031510285201963
        ])


def historic_gfcf_subagriculture_hunting_forestry_and_fishing(x):
    """
    Real Name: b'historic gfcf subagriculture hunting forestry and fishing'
    Original Eqn: b'([(1995,2009)-(35732.832,42430.488)],(1995,35732.832),(1996,37614.691),(1997,40803.641),(1998,41916.227),(1999,38520.117),\\\\ (2000,38440.754),(2001,36423.711),(2002,38511.609),(2003,37743.941),(2004,40307.848),\\\\ (2005,42430.488),(2006,40835.578),(2007,39981.016),(2008,41155.035),(2009,41396.871))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            35732.832, 37614.691, 40803.641, 41916.227, 38520.117, 38440.754, 36423.711, 38511.609,
            37743.941, 40307.848, 42430.488, 40835.578, 39981.016, 41155.035, 41396.871
        ])


def historic_gfcf_submining_and_quarrying(x):
    """
    Real Name: b'historic gfcf submining and quarrying'
    Original Eqn: b'([(1995,2009)-(49168.223,130683.09)],(1995,49168.223),(1996,50558.738),(1997,59227.895),(1998,57727.891),(1999,57437.492),\\\\ (2000,57307.668),(2001,65567.406),(2002,67555.18),(2003,59670.992),(2004,70731.68),\\\\ (2005,87666.406),(2006,107134.18),(2007,120398.63),(2008,130683.09),(2009,87922.734))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            49168.223, 50558.738, 59227.895, 57727.891, 57437.492, 57307.668, 65567.406, 67555.18,
            59670.992, 70731.68, 87666.406, 107134.18, 120398.63, 130683.09, 87922.734
        ])


def historic_gfcf_subfood_beverages_and_tobacco(x):
    """
    Real Name: b'historic gfcf subfood beverages and tobacco'
    Original Eqn: b'([(1995,2009)-(3153.3279,4752.7988)],(1995,3153.3279),(1996,3405.948),(1997,3856.0354),(1998,3880.1582),(1999,3853.2202),\\\\ (2000,3988.8564),(2001,3816.6501),(2002,3554.2256),(2003,3559.5305),(2004,3899.083),\\\\ (2005,4242.4302),(2006,4362.2729),(2007,4699.4136),(2008,4752.7988),(2009,4192.0625))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            3153.3279, 3405.948, 3856.0354, 3880.1582, 3853.2202, 3988.8564, 3816.6501, 3554.2256,
            3559.5305, 3899.083, 4242.4302, 4362.2729, 4699.4136, 4752.7988, 4192.0625
        ])


def historic_gfcf_subtextiles_and_textile_products(x):
    """
    Real Name: b'historic gfcf subtextiles and textile products'
    Original Eqn: b'([(1995,2009)-(9805.4414,13205.372)],(1995,9805.4414),(1996,10735.85),(1997,11137.633),(1998,10800.096),(1999,10876.121),\\\\ (2000,11490.052),(2001,11577.753),(2002,12166.8),(2003,11730.841),(2004,11857.032),\\\\ (2005,13205.372),(2006,12958.692),(2007,11822.783),(2008,12343.811),(2009,10536.79))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            9805.4414, 10735.85, 11137.633, 10800.096, 10876.121, 11490.052, 11577.753, 12166.8,
            11730.841, 11857.032, 13205.372, 12958.692, 11822.783, 12343.811, 10536.79
        ])


def historic_gfcf_subleather_leather_and_footwear(x):
    """
    Real Name: b'historic gfcf subleather leather and footwear'
    Original Eqn: b'([(1995,2009)-(519.88055,817.67688)],(1995,654.27881),(1996,757.39868),(1997,813.76819),(1998,817.67688),(1999,752.20032),\\\\ (2000,643.75079),(2001,576.78583),(2002,519.88055),(2003,542.40131),(2004,604.32587),\\\\ (2005,622.45618),(2006,615.94867),(2007,678.13239),(2008,644.13391),(2009,604.7887))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            654.27881, 757.39868, 813.76819, 817.67688, 752.20032, 643.75079, 576.78583, 519.88055,
            542.40131, 604.32587, 622.45618, 615.94867, 678.13239, 644.13391, 604.7887
        ])


def historic_gfcf_subwood_and_products_of_wood_and_cork(x):
    """
    Real Name: b'historic gfcf subwood and products of wood and cork'
    Original Eqn: b'([(1995,2009)-(15459.762,28397.006)],(1995,26489.537),(1996,26581.762),(1997,28397.006),(1998,27623.027),(1999,26920.006),\\\\ (2000,25842.48),(2001,23475.318),(2002,21862.025),(2003,20325.885),(2004,18978.408),\\\\ (2005,20301.361),(2006,20253.908),(2007,20320.295),(2008,18429.826),(2009,15459.762))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            26489.537, 26581.762, 28397.006, 27623.027, 26920.006, 25842.48, 23475.318, 21862.025,
            20325.885, 18978.408, 20301.361, 20253.908, 20320.295, 18429.826, 15459.762
        ])


def historic_gfcf_subpulp_paper_printing_and_publishing(x):
    """
    Real Name: b'historic gfcf subpulp paper printing and publishing'
    Original Eqn: b'([(1995,2009)-(36798.738,59567.02)],(1995,36798.738),(1996,37032.848),(1997,39961.035),(1998,41669.242),(1999,46405.641),\\\\ (2000,49903.871),(2001,51752.203),(2002,50975.605),(2003,50689.711),(2004,54906.703),\\\\ (2005,56410.535),(2006,57824.684),(2007,59567.02),(2008,58348.961),(2009,52958.492))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            36798.738, 37032.848, 39961.035, 41669.242, 46405.641, 49903.871, 51752.203, 50975.605,
            50689.711, 54906.703, 56410.535, 57824.684, 59567.02, 58348.961, 52958.492
        ])


def historic_gfcf_subcoke_refined_petroleum_and_nuclear_fuel(x):
    """
    Real Name: b'historic gfcf subcoke refined petroleum and nuclear fuel'
    Original Eqn: b'([(1995,2009)-(1227.5522,1773.6797)],(1995,1328.0853),(1996,1227.5522),(1997,1353.3188),(1998,1539.4121),(1999,1476.5179),\\\\ (2000,1365.4154),(2001,1631.8383),(2002,1701.6514),(2003,1283.2863),(2004,1285.8644),\\\\ (2005,1511.526),(2006,1526.3302),(2007,1572.2338),(2008,1773.6797),(2009,1679.7283))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1328.0853, 1227.5522, 1353.3188, 1539.4121, 1476.5179, 1365.4154, 1631.8383, 1701.6514,
            1283.2863, 1285.8644, 1511.526, 1526.3302, 1572.2338, 1773.6797, 1679.7283
        ])


def historic_gfcf_subchemicals_and_chemical_products(x):
    """
    Real Name: b'historic gfcf subchemicals and chemical products'
    Original Eqn: b'([(1995,2009)-(10602.439,14185.478)],(1995,10869.645),(1996,12038.465),(1997,13229.726),(1998,13637.507),(1999,12738.396),\\\\ (2000,11845.654),(2001,11435.997),(2002,10917.669),(2003,11387.182),(2004,10602.439),\\\\ (2005,11093.072),(2006,11520.979),(2007,14185.478),(2008,14120.531),(2009,12864.762))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            10869.645, 12038.465, 13229.726, 13637.507, 12738.396, 11845.654, 11435.997, 10917.669,
            11387.182, 10602.439, 11093.072, 11520.979, 14185.478, 14120.531, 12864.762
        ])


def historic_gfcf_subrubber_and_plastics(x):
    """
    Real Name: b'historic gfcf subrubber and plastics'
    Original Eqn: b'([(1995,2009)-(12706.039,18017.344)],(1995,12706.039),(1996,14192.511),(1997,14736.633),(1998,15018.491),(1999,15287.824),\\\\ (2000,14431.255),(2001,14019.702),(2002,14085.24),(2003,13984.364),(2004,14517.224),\\\\ (2005,15653.112),(2006,16725.594),(2007,18017.344),(2008,16867.807),(2009,15186.176))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            12706.039, 14192.511, 14736.633, 15018.491, 15287.824, 14431.255, 14019.702, 14085.24,
            13984.364, 14517.224, 15653.112, 16725.594, 18017.344, 16867.807, 15186.176
        ])


def historic_gfcf_subother_non_metalic_mineral(x):
    """
    Real Name: b'historic gfcf subother non metalic mineral'
    Original Eqn: b'([(1995,2009)-(5801.4595,7284.7769)],(1995,5833.2832),(1996,6141.4766),(1997,6658.7974),(1998,6528.9243),(1999,6939.7749),\\\\ (2000,6940.7358),(2001,6785.4204),(2002,6367.7344),(2003,6292.3218),(2004,6195.3579),\\\\ (2005,6629.5493),(2006,6526.0938),(2007,7284.7769),(2008,6779.4404),(2009,5801.4595))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            5833.2832, 6141.4766, 6658.7974, 6528.9243, 6939.7749, 6940.7358, 6785.4204, 6367.7344,
            6292.3218, 6195.3579, 6629.5493, 6526.0938, 7284.7769, 6779.4404, 5801.4595
        ])


def historic_gfcf_subbasic_metals_and_fabricated_metal(x):
    """
    Real Name: b'historic gfcf subbasic metals and fabricated metal'
    Original Eqn: b'([(1995,2009)-(151450.72,191195.25)],(1995,151450.72),(1996,168036.17),(1997,175682.53),(1998,172156.44),(1999,176539.11),\\\\ (2000,174882.11),(2001,172961.69),(2002,172230.45),(2003,172920.44),(2004,163433.64),\\\\ (2005,171458.94),(2006,180851.8),(2007,191195.25),(2008,189079.64),(2009,169590.94))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            151450.72, 168036.17, 175682.53, 172156.44, 176539.11, 174882.11, 172961.69, 172230.45,
            172920.44, 163433.64, 171458.94, 180851.8, 191195.25, 189079.64, 169590.94
        ])


def historic_gfcf_submachinery_nec(x):
    """
    Real Name: b'historic gfcf submachinery nec'
    Original Eqn: b'([(1995,2009)-(591070.69,1010400.5)],(1995,591070.69),(1996,624630.06),(1997,650666.31),(1998,661738.56),(1999,649393.38),\\\\ (2000,705485.75),(2001,686770.25),(2002,676821.63),(2003,711485.5),(2004,772953.69),\\\\ (2005,844631.38),(2006,901317.69),(2007,980461.25),(2008,1010400.5),(2009,851105.94))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            591070.69, 624630.06, 650666.31, 661738.56, 649393.38, 705485.75, 686770.25, 676821.63,
            711485.5, 772953.69, 844631.38, 901317.69, 980461.25, 1010400.5, 851105.94
        ])


def historic_gfcf_subelectrical_and_optical_equipment(x):
    """
    Real Name: b'historic gfcf subelectrical and optical equipment'
    Original Eqn: b'([(1995,2009)-(592198.44,1354865.9)],(1995,592198.44),(1996,655007.69),(1997,741965.0),(1998,772863.31),(1999,844308.38),\\\\ (2000,974987.0),(2001,968576.31),(2002,909083.63),(2003,945232.75),(2004,1011340.2),\\\\ (2005,1107939.9),(2006,1204886.8),(2007,1314391.4),(2008,1354865.9),(2009,1251572.4))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            592198.44, 655007.69, 741965.0, 772863.31, 844308.38, 974987.0, 968576.31, 909083.63,
            945232.75, 1011340.2, 1107939.9, 1204886.8, 1314391.4, 1354865.9, 1251572.4
        ])


def historic_gfcf_subtransport_equipment(x):
    """
    Real Name: b'historic gfcf subtransport equipment'
    Original Eqn: b'([(1995,2009)-(525742.88,995201.56)],(1995,525742.88),(1996,560220.13),(1997,599235.56),(1998,630740.38),(1999,681251.81),\\\\ (2000,683685.88),(2001,656420.25),(2002,667179.38),(2003,713015.38),(2004,768573.88),\\\\ (2005,828957.69),(2006,900477.81),(2007,995201.56),(2008,985637.94),(2009,849517.56))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            525742.88, 560220.13, 599235.56, 630740.38, 681251.81, 683685.88, 656420.25, 667179.38,
            713015.38, 768573.88, 828957.69, 900477.81, 995201.56, 985637.94, 849517.56
        ])


def historic_gfcf_submanufacturing_nec_recycling(x):
    """
    Real Name: b'historic gfcf submanufacturing nec recycling'
    Original Eqn: b'([(1995,2009)-(85966.852,142813.61)],(1995,85966.852),(1996,93761.969),(1997,99366.813),(1998,103879.14),(1999,107439.22),\\\\ (2000,111866.84),(2001,110534.02),(2002,111077.36),(2003,113451.95),(2004,118669.55),\\\\ (2005,131024.1),(2006,131647.16),(2007,136376.63),(2008,142813.61),(2009,132990.0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            85966.852, 93761.969, 99366.813, 103879.14, 107439.22, 111866.84, 110534.02, 111077.36,
            113451.95, 118669.55, 131024.1, 131647.16, 136376.63, 142813.61, 132990.0
        ])


def historic_gfcf_subelectricity_gas_and_water_supply(x):
    """
    Real Name: b'historic gfcf subelectricity gas and water supply'
    Original Eqn: b'([(1995,2009)-(9163.3457,18707.898)],(1995,9163.3457),(1996,9879.9082),(1997,9898.4268),(1998,10042.622),(1999,10664.927),\\\\ (2000,11776.001),(2001,12365.013),(2002,12512.324),(2003,13303.008),(2004,13730.786),\\\\ (2005,16534.152),(2006,16654.773),(2007,17834.195),(2008,18707.898),(2009,16229.776))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            9163.3457, 9879.9082, 9898.4268, 10042.622, 10664.927, 11776.001, 12365.013, 12512.324,
            13303.008, 13730.786, 16534.152, 16654.773, 17834.195, 18707.898, 16229.776
        ])


def historic_gfcf_subconstruction(x):
    """
    Real Name: b'historic gfcf subconstruction'
    Original Eqn: b'([(1995,2009)-(3315735.5,4373414.0)],(1995,3315735.5),(1996,3380354.5),(1997,3427133.5),(1998,3469614.0),(1999,3552832.5),\\\\ (2000,3576725.5),(2001,3590266.5),(2002,3589436.8),(2003,3693404.0),(2004,3835621.0),\\\\ (2005,4009451.3),(2006,4215311.0),(2007,4373414.0),(2008,4370240.5),(2009,4246355.0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            3315735.5, 3380354.5, 3427133.5, 3469614.0, 3552832.5, 3576725.5, 3590266.5, 3589436.8,
            3693404.0, 3835621.0, 4009451.3, 4215311.0, 4373414.0, 4370240.5, 4246355.0
        ])


def historic_gfcf_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
        x):
    """
    Real Name: b'historic gfcf subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'
    Original Eqn: b'([(1995,2009)-(20114.217,33514.207)],(1995,20114.217),(1996,22476.516),(1997,22885.188),(1998,25268.574),(1999,25426.08),\\\\ (2000,26552.805),(2001,26028.451),(2002,25794.117),(2003,25518.584),(2004,27205.137),\\\\ (2005,29690.898),(2006,30987.475),(2007,33514.207),(2008,33058.988),(2009,27617.543))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            20114.217, 22476.516, 22885.188, 25268.574, 25426.08, 26552.805, 26028.451, 25794.117,
            25518.584, 27205.137, 29690.898, 30987.475, 33514.207, 33058.988, 27617.543
        ])


def historic_gfcf_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
        x):
    """
    Real Name: b'historic gfcf subwholesale trade and commissions trade except of motor vehicles and motorcycles'
    Original Eqn: b'([(1995,2009)-(272784.38,435917.31)],(1995,272784.38),(1996,295626.84),(1997,311371.94),(1998,327195.78),(1999,341950.22),\\\\ (2000,355568.5),(2001,355673.53),(2002,358418.03),(2003,358038.75),(2004,385270.97),\\\\ (2005,408631.41),(2006,413487.31),(2007,427566.13),(2008,435917.31),(2009,387395.69))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            272784.38, 295626.84, 311371.94, 327195.78, 341950.22, 355568.5, 355673.53, 358418.03,
            358038.75, 385270.97, 408631.41, 413487.31, 427566.13, 435917.31, 387395.69
        ])


def historic_gfcf_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
        x):
    """
    Real Name: b'historic gfcf subretail trade except of motor vehicles and motorcycles repair of household goods'
    Original Eqn: b'([(1995,2009)-(134780.13,228615.17)],(1995,134780.13),(1996,145710.55),(1997,152762.44),(1998,161182.28),(1999,164131.47),\\\\ (2000,166019.34),(2001,166866.67),(2002,170615.55),(2003,174059.25),(2004,190358.11),\\\\ (2005,216744.02),(2006,224155.45),(2007,228615.17),(2008,227170.06),(2009,195714.02))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            134780.13, 145710.55, 152762.44, 161182.28, 164131.47, 166019.34, 166866.67, 170615.55,
            174059.25, 190358.11, 216744.02, 224155.45, 228615.17, 227170.06, 195714.02
        ])


def historic_gfcf_subhotels_and_restaurants(x):
    """
    Real Name: b'historic gfcf subhotels and restaurants'
    Original Eqn: b'([(1995,2009)-(4036.8662,6338.0215)],(1995,6338.0215),(1996,6149.7041),(1997,5875.1206),(1998,4984.3564),(1999,5163.3916),\\\\ (2000,5408.5967),(2001,5032.4741),(2002,4891.4541),(2003,4406.771),(2004,4312.0898),\\\\ (2005,4053.8296),(2006,4194.439),(2007,4313.0947),(2008,4425.0718),(2009,4036.8662))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            6338.0215, 6149.7041, 5875.1206, 4984.3564, 5163.3916, 5408.5967, 5032.4741, 4891.4541,
            4406.771, 4312.0898, 4053.8296, 4194.439, 4313.0947, 4425.0718, 4036.8662
        ])


def historic_gfcf_subinland_transport(x):
    """
    Real Name: b'historic gfcf subinland transport'
    Original Eqn: b'([(1995,2009)-(49677.738,72946.836)],(1995,49677.738),(1996,50398.684),(1997,53456.406),(1998,54578.48),(1999,58112.934),\\\\ (2000,52657.016),(2001,50783.926),(2002,52491.391),(2003,51862.168),(2004,57095.516),\\\\ (2005,64329.469),(2006,70106.383),(2007,72946.836),(2008,72193.539),(2009,61845.871))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            49677.738, 50398.684, 53456.406, 54578.48, 58112.934, 52657.016, 50783.926, 52491.391,
            51862.168, 57095.516, 64329.469, 70106.383, 72946.836, 72193.539, 61845.871
        ])


def historic_gfcf_subwater_transport(x):
    """
    Real Name: b'historic gfcf subwater transport'
    Original Eqn: b'([(1995,2009)-(2462.5908,4775.0659)],(1995,2462.5908),(1996,2531.9485),(1997,2810.0728),(1998,4047.5605),(1999,4551.7358),\\\\ (2000,4567.0215),(2001,4585.7559),(2002,4775.0659),(2003,4308.2896),(2004,4417.4858),\\\\ (2005,4655.2271),(2006,4511.1509),(2007,4315.3672),(2008,4326.1084),(2009,4421.8511))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            2462.5908, 2531.9485, 2810.0728, 4047.5605, 4551.7358, 4567.0215, 4585.7559, 4775.0659,
            4308.2896, 4417.4858, 4655.2271, 4511.1509, 4315.3672, 4326.1084, 4421.8511
        ])


def historic_gfcf_subair_transport(x):
    """
    Real Name: b'historic gfcf subair transport'
    Original Eqn: b'([(1995,2009)-(3658.7437,5297.9785)],(1995,4389.7974),(1996,4811.0552),(1997,5240.1558),(1998,5297.9785),(1999,5140.0283),\\\\ (2000,4839.623),(2001,4492.3311),(2002,4079.4124),(2003,3658.7437),(2004,4157.6909),\\\\ (2005,4297.7334),(2006,4729.563),(2007,5259.9507),(2008,5141.3306),(2009,4125.6865))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            4389.7974, 4811.0552, 5240.1558, 5297.9785, 5140.0283, 4839.623, 4492.3311, 4079.4124,
            3658.7437, 4157.6909, 4297.7334, 4729.563, 5259.9507, 5141.3306, 4125.6865
        ])


def historic_gfcf_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
        x):
    """
    Real Name: b'historic gfcf subother supporting and auxiliary transport activities activities of travel agencies'
    Original Eqn: b'([(1995,2009)-(6212.1035,9921.543)],(1995,7163.0146),(1996,6735.1499),(1997,6212.1035),(1998,6414.583),(1999,6624.3755),\\\\ (2000,6811.5542),(2001,6294.2832),(2002,6947.418),(2003,7070.0679),(2004,7531.814),\\\\ (2005,8541.0635),(2006,9228.2764),(2007,9921.543),(2008,9895.9375),(2009,8696.0947))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            7163.0146, 6735.1499, 6212.1035, 6414.583, 6624.3755, 6811.5542, 6294.2832, 6947.418,
            7070.0679, 7531.814, 8541.0635, 9228.2764, 9921.543, 9895.9375, 8696.0947
        ])


def historic_gfcf_subpost_and_telecommunications(x):
    """
    Real Name: b'historic gfcf subpost and telecommunications'
    Original Eqn: b'([(1995,2009)-(9400.0742,38329.137)],(1995,9400.0742),(1996,10358.336),(1997,12133.059),(1998,13841.907),(1999,17040.002),\\\\ (2000,20493.102),(2001,22652.508),(2002,22411.086),(2003,24883.102),(2004,28778.445),\\\\ (2005,31190.512),(2006,33387.305),(2007,36844.961),(2008,38329.137),(2009,36114.047))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            9400.0742, 10358.336, 12133.059, 13841.907, 17040.002, 20493.102, 22652.508, 22411.086,
            24883.102, 28778.445, 31190.512, 33387.305, 36844.961, 38329.137, 36114.047
        ])


def historic_gfcf_subfinancial_intermediation(x):
    """
    Real Name: b'historic gfcf subfinancial intermediation'
    Original Eqn: b'([(1995,2009)-(3753.4692,12140.073)],(1995,3753.4692),(1996,4015.5376),(1997,4656.2686),(1998,4870.4028),(1999,5495.1387),\\\\ (2000,5409.3198),(2001,5890.9595),(2002,6514.6733),(2003,6840.2881),(2004,8639.1191),\\\\ (2005,9947.8135),(2006,11000.363),(2007,12140.073),(2008,11535.349),(2009,9802.5811))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            3753.4692, 4015.5376, 4656.2686, 4870.4028, 5495.1387, 5409.3198, 5890.9595, 6514.6733,
            6840.2881, 8639.1191, 9947.8135, 11000.363, 12140.073, 11535.349, 9802.5811
        ])


def historic_gfcf_subreal_estate_activities(x):
    """
    Real Name: b'historic gfcf subreal estate activities'
    Original Eqn: b'([(1995,2009)-(105648.82,233717.48)],(1995,105648.82),(1996,112505.58),(1997,121700.46),(1998,130935.03),(1999,138473.86),\\\\ (2000,140215.89),(2001,148289.28),(2002,163227.39),(2003,184642.38),(2004,208041.58),\\\\ (2005,231293.97),(2006,233717.48),(2007,227724.55),(2008,208201.86),(2009,192484.63))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            105648.82, 112505.58, 121700.46, 130935.03, 138473.86, 140215.89, 148289.28, 163227.39,
            184642.38, 208041.58, 231293.97, 233717.48, 227724.55, 208201.86, 192484.63
        ])


def historic_gfcf_subrenting_od_meq_and_other_business_activities(x):
    """
    Real Name: b'historic gfcf subrenting od meq and other business activities'
    Original Eqn: b'([(1995,2009)-(322190.16,725018.06)],(1995,322190.16),(1996,361983.34),(1997,384212.78),(1998,429207.44),(1999,473706.81),\\\\ (2000,517232.19),(2001,537414.25),(2002,532837.94),(2003,542599.75),(2004,577060.56),\\\\ (2005,617376.75),(2006,667582.25),(2007,703895.94),(2008,725018.06),(2009,672112.25))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            322190.16, 361983.34, 384212.78, 429207.44, 473706.81, 517232.19, 537414.25, 532837.94,
            542599.75, 577060.56, 617376.75, 667582.25, 703895.94, 725018.06, 672112.25
        ])


def historic_gfcf_subpublic_admin_and_defence_compulsory_social_security(x):
    """
    Real Name: b'historic gfcf subpublic admin and defence compulsory social security'
    Original Eqn: b'([(1995,2009)-(8284.8584,16466.713)],(1995,16466.713),(1996,8284.8584),(1997,8695.0361),(1998,8756.8301),(1999,9585.9248),\\\\ (2000,9790.8984),(2001,9414.084),(2002,9308.3301),(2003,9819.3438),(2004,10995.426),\\\\ (2005,12019.087),(2006,12665.439),(2007,13487.202),(2008,12984.448),(2009,10894.959))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            16466.713, 8284.8584, 8695.0361, 8756.8301, 9585.9248, 9790.8984, 9414.084, 9308.3301,
            9819.3438, 10995.426, 12019.087, 12665.439, 13487.202, 12984.448, 10894.959
        ])


def historic_gfcf_subeducation(x):
    """
    Real Name: b'historic gfcf subeducation'
    Original Eqn: b'([(1995,2009)-(877.41577,1361.8879)],(1995,877.41577),(1996,1190.7976),(1997,1051.7266),(1998,1118.6437),(1999,1211.5232),\\\\ (2000,1361.8879),(2001,1197.3674),(2002,1297.8099),(2003,1128.9475),(2004,1177.98),\\\\ (2005,1207.3063),(2006,1207.5222),(2007,1313.7346),(2008,1230.2579),(2009,1138.8306))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            877.41577, 1190.7976, 1051.7266, 1118.6437, 1211.5232, 1361.8879, 1197.3674, 1297.8099,
            1128.9475, 1177.98, 1207.3063, 1207.5222, 1313.7346, 1230.2579, 1138.8306
        ])


def historic_gfcf_subhealth_and_social_work(x):
    """
    Real Name: b'historic gfcf subhealth and social work'
    Original Eqn: b'([(1995,2009)-(2020.5743,4686.6963)],(1995,2020.5743),(1996,2411.981),(1997,2387.1941),(1998,2317.7742),(1999,2457.7114),\\\\ (2000,2582.917),(2001,2985.6318),(2002,3204.249),(2003,3562.0264),(2004,4106.2969),\\\\ (2005,4548.6128),(2006,4686.6963),(2007,4528.8252),(2008,3930.343),(2009,3988.499))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            2020.5743, 2411.981, 2387.1941, 2317.7742, 2457.7114, 2582.917, 2985.6318, 3204.249,
            3562.0264, 4106.2969, 4548.6128, 4686.6963, 4528.8252, 3930.343, 3988.499
        ])


def historic_gfcf_subother_community_social_and_persona_services(x):
    """
    Real Name: b'historic gfcf subother community social and persona services'
    Original Eqn: b'([(1995,2009)-(19066.77,33997.836)],(1995,19066.77),(1996,23366.191),(1997,23901.691),(1998,25248.57),(1999,25473.307),\\\\ (2000,27629.49),(2001,27269.873),(2002,26582.359),(2003,26523.111),(2004,28863.715),\\\\ (2005,30638.781),(2006,32234.186),(2007,33909.887),(2008,33997.836),(2009,28864.693))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            19066.77, 23366.191, 23901.691, 25248.57, 25473.307, 27629.49, 27269.873, 26582.359,
            26523.111, 28863.715, 30638.781, 32234.186, 33909.887, 33997.836, 28864.693
        ])


def historic_gfcf_subprivate_households_with_employed_persons(x):
    """
    Real Name: b'historic gfcf subprivate households with employed persons'
    Original Eqn: b'([(1995,2009)-(68.236107,147.96854)],(1995,133.84763),(1996,131.45456),(1997,128.82707),(1998,147.96854),(1999,122.28409),\\\\ (2000,104.01704),(2001,80.335487),(2002,71.17453),(2003,73.229172),(2004,78.620636),\\\\ (2005,90.77932),(2006,88.329956),(2007,97.497345),(2008,95.166161),(2009,68.236107))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            133.84763, 131.45456, 128.82707, 147.96854, 122.28409, 104.01704, 80.335487, 71.17453,
            73.229172, 78.620636, 90.77932, 88.329956, 97.497345, 95.166161, 68.236107
        ])


def historic_hd_subagriculture_hunting_forestry_and_fishing(x):
    """
    Real Name: b'historic hd subagriculture hunting forestry and fishing'
    Original Eqn: b'([(1995,2009)-(748525.1845,964691.9819)],(1995,748525.1845),(1996,763287.0495),(1997,770336.1225),(1998,811036.2165),(1999,829790.0459),\\\\ (2000,822865.7691),(2001,825028.4316),(2002,854006.3347),(2003,851658.472),(2004,859315.9644),\\\\ (2005,869780.6132),(2006,881620.6251),(2007,885511.0359),(2008,934301.625),(2009,964691.9819))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            748525.1845, 763287.0495, 770336.1225, 811036.2165, 829790.0459, 822865.7691,
            825028.4316, 854006.3347, 851658.472, 859315.9644, 869780.6132, 881620.6251,
            885511.0359, 934301.625, 964691.9819
        ])


def historic_hd_submining_and_quarrying(x):
    """
    Real Name: b'historic hd submining and quarrying'
    Original Eqn: b'([(1995,2009)-(32802.32296,51252.85249)],(1995,41789.6873),(1996,40774.55363),(1997,35760.8687),(1998,32802.32296),(1999,37641.00965),\\\\ (2000,48407.97747),(2001,46807.61795),(2002,51252.85249),(2003,49636.55263),(2004,49512.87455),\\\\ (2005,46724.86493),(2006,39361.70374),(2007,34217.52762),(2008,39115.98394),(2009,34147.69516))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            41789.6873, 40774.55363, 35760.8687, 32802.32296, 37641.00965, 48407.97747,
            46807.61795, 51252.85249, 49636.55263, 49512.87455, 46724.86493, 39361.70374,
            34217.52762, 39115.98394, 34147.69516
        ])


def historic_hd_subfood_beverages_and_tobacco(x):
    """
    Real Name: b'historic hd subfood beverages and tobacco'
    Original Eqn: b'([(1995,2009)-(1723750.214,2246958.729)],(1995,1723750.214),(1996,1738706.496),(1997,1774037.996),(1998,1848995.869),(1999,1895713.275),\\\\ (2000,1931662.187),(2001,1942552.633),(2002,1958247.896),(2003,1986716.788),(2004,2022834.744),\\\\ (2005,2089671.199),(2006,2153060.415),(2007,2238091.994),(2008,2246958.729),(2009,2245656.855))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1723750.214, 1738706.496, 1774037.996, 1848995.869, 1895713.275, 1931662.187,
            1942552.633, 1958247.896, 1986716.788, 2022834.744, 2089671.199, 2153060.415,
            2238091.994, 2246958.729, 2245656.855
        ])


def historic_hd_subtextiles_and_textile_products(x):
    """
    Real Name: b'historic hd subtextiles and textile products'
    Original Eqn: b'([(1995,2009)-(470469.2814,627023.5263)],(1995,470469.2814),(1996,471356.0045),(1997,476964.8114),(1998,493102.4947),(1999,493611.554),\\\\ (2000,515098.03),(2001,517850.0139),(2002,531176.2526),(2003,532061.3635),(2004,541778.7234),\\\\ (2005,563405.2326),(2006,592743.206),(2007,625432.3504),(2008,627023.5263),(2009,611100.8105))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            470469.2814, 471356.0045, 476964.8114, 493102.4947, 493611.554, 515098.03, 517850.0139,
            531176.2526, 532061.3635, 541778.7234, 563405.2326, 592743.206, 625432.3504,
            627023.5263, 611100.8105
        ])


def historic_hd_subleather_leather_and_footwear(x):
    """
    Real Name: b'historic hd subleather leather and footwear'
    Original Eqn: b'([(1995,2009)-(97413.51078,124995.4693)],(1995,97413.51078),(1996,99005.48025),(1997,97752.3784),(1998,99637.54181),(1999,98274.45556),\\\\ (2000,103223.4987),(2001,104490.9256),(2002,105493.3023),(2003,106139.4451),(2004,108526.3023),\\\\ (2005,109548.0365),(2006,114884.4565),(2007,121097.4926),(2008,124995.4693),(2009,119187.6975))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            97413.51078, 99005.48025, 97752.3784, 99637.54181, 98274.45556, 103223.4987,
            104490.9256, 105493.3023, 106139.4451, 108526.3023, 109548.0365, 114884.4565,
            121097.4926, 124995.4693, 119187.6975
        ])


def historic_hd_subwood_and_products_of_wood_and_cork(x):
    """
    Real Name: b'historic hd subwood and products of wood and cork'
    Original Eqn: b'([(1995,2009)-(26691.7558,33069.44101)],(1995,27311.38121),(1996,26691.7558),(1997,29615.10196),(1998,29971.29581),(1999,28692.07457),\\\\ (2000,29540.09729),(2001,29526.83953),(2002,29878.51743),(2003,30112.75414),(2004,30240.47199),\\\\ (2005,30309.37202),(2006,31382.94995),(2007,33069.44101),(2008,30997.81253),(2009,29891.58369))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            27311.38121, 26691.7558, 29615.10196, 29971.29581, 28692.07457, 29540.09729,
            29526.83953, 29878.51743, 30112.75414, 30240.47199, 30309.37202, 31382.94995,
            33069.44101, 30997.81253, 29891.58369
        ])


def historic_hd_subpulp_paper_printing_and_publishing(x):
    """
    Real Name: b'historic hd subpulp paper printing and publishing'
    Original Eqn: b'([(1995,2009)-(218308.7852,278249.174)],(1995,218308.7852),(1996,224848.8639),(1997,233135.3592),(1998,239779.917),(1999,245020.8308),\\\\ (2000,248600.3498),(2001,245907.4753),(2002,251845.6153),(2003,252932.4609),(2004,260211.7944),\\\\ (2005,262604.975),(2006,270462.3618),(2007,277128.7161),(2008,278249.174),(2009,263144.934))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            218308.7852, 224848.8639, 233135.3592, 239779.917, 245020.8308, 248600.3498,
            245907.4753, 251845.6153, 252932.4609, 260211.7944, 262604.975, 270462.3618,
            277128.7161, 278249.174, 263144.934
        ])


def historic_hd_subcoke_refined_petroleum_and_nuclear_fuel(x):
    """
    Real Name: b'historic hd subcoke refined petroleum and nuclear fuel'
    Original Eqn: b'([(1995,2009)-(217859.5983,314295.3504)],(1995,217859.5983),(1996,227030.6499),(1997,231061.0208),(1998,233139.8992),(1999,242777.5242),\\\\ (2000,247730.3037),(2001,255008.8399),(2002,255881.6315),(2003,249517.5902),(2004,256059.9905),\\\\ (2005,264654.8552),(2006,281863.4531),(2007,283885.0762),(2008,305058.1479),(2009,314295.3504))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            217859.5983, 227030.6499, 231061.0208, 233139.8992, 242777.5242, 247730.3037,
            255008.8399, 255881.6315, 249517.5902, 256059.9905, 264654.8552, 281863.4531,
            283885.0762, 305058.1479, 314295.3504
        ])


def historic_hd_subchemicals_and_chemical_products(x):
    """
    Real Name: b'historic hd subchemicals and chemical products'
    Original Eqn: b'([(1995,2009)-(329088.216,493254.1673)],(1995,329088.216),(1996,338997.7663),(1997,357939.9716),(1998,377533.0605),(1999,391534.1448),\\\\ (2000,400362.1034),(2001,408700.5194),(2002,439916.4235),(2003,445918.3201),(2004,458362.0534),\\\\ (2005,453945.8561),(2006,464577.3553),(2007,485124.7181),(2008,485202.7031),(2009,493254.1673))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            329088.216, 338997.7663, 357939.9716, 377533.0605, 391534.1448, 400362.1034,
            408700.5194, 439916.4235, 445918.3201, 458362.0534, 453945.8561, 464577.3553,
            485124.7181, 485202.7031, 493254.1673
        ])


def historic_hd_subrubber_and_plastics(x):
    """
    Real Name: b'historic hd subrubber and plastics'
    Original Eqn: b'([(1995,2009)-(91494.36847,130009.9874)],(1995,91494.36847),(1996,92997.61224),(1997,98746.44195),(1998,101253.0568),(1999,106386.6536),\\\\ (2000,109284.1565),(2001,108616.9065),(2002,108496.0829),(2003,109817.8004),(2004,115248.1582),\\\\ (2005,119022.5462),(2006,122671.6583),(2007,127897.3432),(2008,130009.9874),(2009,129860.5313))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            91494.36847, 92997.61224, 98746.44195, 101253.0568, 106386.6536, 109284.1565,
            108616.9065, 108496.0829, 109817.8004, 115248.1582, 119022.5462, 122671.6583,
            127897.3432, 130009.9874, 129860.5313
        ])


def historic_hd_subother_non_metalic_mineral(x):
    """
    Real Name: b'historic hd subother non metalic mineral'
    Original Eqn: b'([(1995,2009)-(50849.6903,67078.25726)],(1995,50849.6903),(1996,52185.75254),(1997,55570.83701),(1998,57512.95127),(1999,61138.98637),\\\\ (2000,66091.5223),(2001,66829.09701),(2002,67078.25726),(2003,61896.61387),(2004,60607.83051),\\\\ (2005,57837.85562),(2006,56383.1174),(2007,57059.3999),(2008,56934.76676),(2009,52614.06982))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            50849.6903, 52185.75254, 55570.83701, 57512.95127, 61138.98637, 66091.5223,
            66829.09701, 67078.25726, 61896.61387, 60607.83051, 57837.85562, 56383.1174,
            57059.3999, 56934.76676, 52614.06982
        ])


def historic_hd_subbasic_metals_and_fabricated_metal(x):
    """
    Real Name: b'historic hd subbasic metals and fabricated metal'
    Original Eqn: b'([(1995,2009)-(98211.18593,117239.6397)],(1995,98211.18593),(1996,101364.5069),(1997,105638.8761),(1998,109614.7046),(1999,109634.716),\\\\ (2000,109513.8361),(2001,108781.2866),(2002,107727.9884),(2003,107406.8228),(2004,108813.2145),\\\\ (2005,108643.8029),(2006,110632.9872),(2007,117104.5),(2008,117239.6397),(2009,111348.4293))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            98211.18593, 101364.5069, 105638.8761, 109614.7046, 109634.716, 109513.8361,
            108781.2866, 107727.9884, 107406.8228, 108813.2145, 108643.8029, 110632.9872, 117104.5,
            117239.6397, 111348.4293
        ])


def historic_hd_submachinery_nec(x):
    """
    Real Name: b'historic hd submachinery nec'
    Original Eqn: b'([(1995,2009)-(165460.9408,238684.2123)],(1995,169551.7844),(1996,165460.9408),(1997,173073.1117),(1998,172458.5657),(1999,166225.228),\\\\ (2000,177635.06),(2001,179257.497),(2002,180868.4452),(2003,192695.9211),(2004,204320.0422),\\\\ (2005,213294.6206),(2006,222421.2828),(2007,230417.0138),(2008,238684.2123),(2009,209182.9328))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            169551.7844, 165460.9408, 173073.1117, 172458.5657, 166225.228, 177635.06, 179257.497,
            180868.4452, 192695.9211, 204320.0422, 213294.6206, 222421.2828, 230417.0138,
            238684.2123, 209182.9328
        ])


def historic_hd_subelectrical_and_optical_equipment(x):
    """
    Real Name: b'historic hd subelectrical and optical equipment'
    Original Eqn: b'([(1995,2009)-(269085.0789,659502.0775)],(1995,269085.0789),(1996,292528.3037),(1997,314568.9572),(1998,327006.1972),(1999,362531.3665),\\\\ (2000,403721.8382),(2001,421237.8362),(2002,424194.5776),(2003,462089.486),(2004,500625.8901),\\\\ (2005,528593.1563),(2006,575337.1644),(2007,626824.9313),(2008,659502.0775),(2009,638774.7252))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            269085.0789, 292528.3037, 314568.9572, 327006.1972, 362531.3665, 403721.8382,
            421237.8362, 424194.5776, 462089.486, 500625.8901, 528593.1563, 575337.1644,
            626824.9313, 659502.0775, 638774.7252
        ])


def historic_hd_subtransport_equipment(x):
    """
    Real Name: b'historic hd subtransport equipment'
    Original Eqn: b'([(1995,2009)-(559770.1377,900674.5172)],(1995,559770.1377),(1996,562660.0135),(1997,610616.3602),(1998,637624.4844),(1999,658779.9693),\\\\ (2000,678119.7767),(2001,705524.229),(2002,730358.9824),(2003,762695.1596),(2004,804770.2701),\\\\ (2005,822767.0034),(2006,841264.7015),(2007,900674.5172),(2008,872656.5609),(2009,774016.3155))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            559770.1377, 562660.0135, 610616.3602, 637624.4844, 658779.9693, 678119.7767,
            705524.229, 730358.9824, 762695.1596, 804770.2701, 822767.0034, 841264.7015,
            900674.5172, 872656.5609, 774016.3155
        ])


def historic_hd_submanufacturing_nec_recycling(x):
    """
    Real Name: b'historic hd submanufacturing nec recycling'
    Original Eqn: b'([(1995,2009)-(222979.9294,294441.8347)],(1995,222979.9294),(1996,228135.1029),(1997,240692.1728),(1998,250014.8123),(1999,258144.9556),\\\\ (2000,265663.7602),(2001,267864.6516),(2002,274989.6719),(2003,267848.5325),(2004,265540.4372),\\\\ (2005,266704.1404),(2006,287544.6036),(2007,294441.8347),(2008,286817.0569),(2009,273080.4631))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            222979.9294, 228135.1029, 240692.1728, 250014.8123, 258144.9556, 265663.7602,
            267864.6516, 274989.6719, 267848.5325, 265540.4372, 266704.1404, 287544.6036,
            294441.8347, 286817.0569, 273080.4631
        ])


def historic_hd_subelectricity_gas_and_water_supply(x):
    """
    Real Name: b'historic hd subelectricity gas and water supply'
    Original Eqn: b'([(1995,2009)-(425936.7741,606105.3211)],(1995,425936.7741),(1996,442338.7712),(1997,442427.9943),(1998,454117.2328),(1999,441934.9356),\\\\ (2000,459895.6379),(2001,470380.3946),(2002,479556.851),(2003,499323.8146),(2004,513594.6788),\\\\ (2005,538766.6204),(2006,545184.665),(2007,562485.9796),(2008,606105.3211),(2009,581811.356))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            425936.7741, 442338.7712, 442427.9943, 454117.2328, 441934.9356, 459895.6379,
            470380.3946, 479556.851, 499323.8146, 513594.6788, 538766.6204, 545184.665,
            562485.9796, 606105.3211, 581811.356
        ])


def historic_hd_subconstruction(x):
    """
    Real Name: b'historic hd subconstruction'
    Original Eqn: b'([(1995,2009)-(42009.8992,76525.49367)],(1995,43757.57239),(1996,42009.8992),(1997,44512.78978),(1998,44853.27532),(1999,44317.62707),\\\\ (2000,47960.07991),(2001,46618.12233),(2002,48551.27075),(2003,49838.11959),(2004,54193.50436),\\\\ (2005,57076.19252),(2006,61104.42813),(2007,64866.31738),(2008,68880.49312),(2009,76525.49367))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            43757.57239, 42009.8992, 44512.78978, 44853.27532, 44317.62707, 47960.07991,
            46618.12233, 48551.27075, 49838.11959, 54193.50436, 57076.19252, 61104.42813,
            64866.31738, 68880.49312, 76525.49367
        ])


def historic_hd_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
        x):
    """
    Real Name: b'historic hd subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'
    Original Eqn: b'([(1995,2009)-(329630.4134,479671.7303)],(1995,329630.4134),(1996,339665.4583),(1997,348852.2901),(1998,362383.2948),(1999,386175.4877),\\\\ (2000,394209.6837),(2001,389345.6728),(2002,415315.3145),(2003,420385.015),(2004,437089.0681),\\\\ (2005,452805.9513),(2006,469217.9448),(2007,479671.7303),(2008,477835.4496),(2009,441238.7686))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            329630.4134, 339665.4583, 348852.2901, 362383.2948, 386175.4877, 394209.6837,
            389345.6728, 415315.3145, 420385.015, 437089.0681, 452805.9513, 469217.9448,
            479671.7303, 477835.4496, 441238.7686
        ])


def historic_hd_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
        x):
    """
    Real Name: b'historic hd subwholesale trade and commissions trade except of motor vehicles and motorcycles'
    Original Eqn: b'([(1995,2009)-(953189.7518,1654069.375)],(1995,953189.7518),(1996,977575.7887),(1997,1031268.424),(1998,1083125.505),(1999,1134670.38),\\\\ (2000,1145796.696),(2001,1188875.24),(2002,1235385.121),(2003,1297218.855),(2004,1376569.796),\\\\ (2005,1419687.917),(2006,1460277.285),(2007,1587635.385),(2008,1650741.741),(2009,1654069.375))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            953189.7518, 977575.7887, 1031268.424, 1083125.505, 1134670.38, 1145796.696,
            1188875.24, 1235385.121, 1297218.855, 1376569.796, 1419687.917, 1460277.285,
            1587635.385, 1650741.741, 1654069.375
        ])


def historic_hd_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
        x):
    """
    Real Name: b'historic hd subretail trade except of motor vehicles and motorcycles repair of household goods'
    Original Eqn: b'([(1995,2009)-(1442744.515,2004091.37)],(1995,1442744.515),(1996,1484111.231),(1997,1511377.547),(1998,1545708.108),(1999,1603578.387),\\\\ (2000,1651018.305),(2001,1692079.184),(2002,1735449.801),(2003,1786053.772),(2004,1824945.424),\\\\ (2005,1888889.851),(2006,1946985.91),(2007,1966830.2),(2008,2004091.37),(2009,1943464.737))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1442744.515, 1484111.231, 1511377.547, 1545708.108, 1603578.387, 1651018.305,
            1692079.184, 1735449.801, 1786053.772, 1824945.424, 1888889.851, 1946985.91, 1966830.2,
            2004091.37, 1943464.737
        ])


def historic_hd_subhotels_and_restaurants(x):
    """
    Real Name: b'historic hd subhotels and restaurants'
    Original Eqn: b'([(1995,2009)-(1113431.496,1533397.36)],(1995,1113431.496),(1996,1145333.762),(1997,1160594.202),(1998,1204074.939),(1999,1248189.218),\\\\ (2000,1290930.693),(2001,1305338.397),(2002,1321460.001),(2003,1346728.693),(2004,1381971.212),\\\\ (2005,1431615.207),(2006,1478748.724),(2007,1520610.363),(2008,1533397.36),(2009,1478111.427))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1113431.496, 1145333.762, 1160594.202, 1204074.939, 1248189.218, 1290930.693,
            1305338.397, 1321460.001, 1346728.693, 1381971.212, 1431615.207, 1478748.724,
            1520610.363, 1533397.36, 1478111.427
        ])


def historic_hd_subinland_transport(x):
    """
    Real Name: b'historic hd subinland transport'
    Original Eqn: b'([(1995,2009)-(512283.1868,687030.627)],(1995,512283.1868),(1996,516283.7531),(1997,527525.772),(1998,548001.3754),(1999,583355.5247),\\\\ (2000,577090.4927),(2001,576348.165),(2002,589005.7397),(2003,603398.7816),(2004,618148.8674),\\\\ (2005,629131.2697),(2006,640920.8658),(2007,656990.6185),(2008,687030.627),(2009,677773.459))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            512283.1868, 516283.7531, 527525.772, 548001.3754, 583355.5247, 577090.4927,
            576348.165, 589005.7397, 603398.7816, 618148.8674, 629131.2697, 640920.8658,
            656990.6185, 687030.627, 677773.459
        ])


def historic_hd_subwater_transport(x):
    """
    Real Name: b'historic hd subwater transport'
    Original Eqn: b'([(1995,2009)-(44308.95214,93235.80175)],(1995,44308.95214),(1996,47639.79652),(1997,51042.05014),(1998,52387.1092),(1999,56976.62146),\\\\ (2000,61869.36149),(2001,64202.31502),(2002,69243.18102),(2003,74692.81662),(2004,80768.97233),\\\\ (2005,82380.51438),(2006,83700.92717),(2007,90448.73024),(2008,93235.80175),(2009,86145.54496))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            44308.95214, 47639.79652, 51042.05014, 52387.1092, 56976.62146, 61869.36149,
            64202.31502, 69243.18102, 74692.81662, 80768.97233, 82380.51438, 83700.92717,
            90448.73024, 93235.80175, 86145.54496
        ])


def historic_hd_subair_transport(x):
    """
    Real Name: b'historic hd subair transport'
    Original Eqn: b'([(1995,2009)-(137453.8779,200264.0223)],(1995,137453.8779),(1996,148653.8674),(1997,154276.2508),(1998,157494.006),(1999,161326.5298),\\\\ (2000,171955.3187),(2001,160991.2496),(2002,161745.3217),(2003,166470.3069),(2004,180233.9222),\\\\ (2005,183284.5052),(2006,191905.9349),(2007,200264.0223),(2008,198775.0988),(2009,182876.4735))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            137453.8779, 148653.8674, 154276.2508, 157494.006, 161326.5298, 171955.3187,
            160991.2496, 161745.3217, 166470.3069, 180233.9222, 183284.5052, 191905.9349,
            200264.0223, 198775.0988, 182876.4735
        ])


def historic_hd_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
        x):
    """
    Real Name: b'historic hd subother supporting and auxiliary transport activities activities of travel agencies'
    Original Eqn: b'([(1995,2009)-(138435.9275,205871.1577)],(1995,138435.9275),(1996,139688.8976),(1997,147937.0151),(1998,154397.118),(1999,160370.3872),\\\\ (2000,155638.3897),(2001,153853.6935),(2002,152642.7157),(2003,155699.8146),(2004,164699.6652),\\\\ (2005,174244.2692),(2006,180720.5432),(2007,193769.3659),(2008,204150.5715),(2009,205871.1577))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            138435.9275, 139688.8976, 147937.0151, 154397.118, 160370.3872, 155638.3897,
            153853.6935, 152642.7157, 155699.8146, 164699.6652, 174244.2692, 180720.5432,
            193769.3659, 204150.5715, 205871.1577
        ])


def historic_hd_subpost_and_telecommunications(x):
    """
    Real Name: b'historic hd subpost and telecommunications'
    Original Eqn: b'([(1995,2009)-(324538.4833,961153.9218)],(1995,324538.4833),(1996,354295.5739),(1997,387919.9858),(1998,424177.5174),(1999,485852.2574),\\\\ (2000,554236.5348),(2001,618457.2676),(2002,666784.4572),(2003,710574.4463),(2004,765818.0055),\\\\ (2005,804816.0351),(2006,849312.5464),(2007,898049.3822),(2008,951908.6976),(2009,961153.9218))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            324538.4833, 354295.5739, 387919.9858, 424177.5174, 485852.2574, 554236.5348,
            618457.2676, 666784.4572, 710574.4463, 765818.0055, 804816.0351, 849312.5464,
            898049.3822, 951908.6976, 961153.9218
        ])


def historic_hd_subfinancial_intermediation(x):
    """
    Real Name: b'historic hd subfinancial intermediation'
    Original Eqn: b'([(1995,2009)-(992982.5746,1861451.265)],(1995,992982.5746),(1996,1024466.451),(1997,1104078.809),(1998,1141697.612),(1999,1212703.706),\\\\ (2000,1332023.396),(2001,1343319.477),(2002,1349136.338),(2003,1383135.657),(2004,1487346.859),\\\\ (2005,1574452.568),(2006,1688561.211),(2007,1829768.303),(2008,1861451.265),(2009,1853536.727))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            992982.5746, 1024466.451, 1104078.809, 1141697.612, 1212703.706, 1332023.396,
            1343319.477, 1349136.338, 1383135.657, 1487346.859, 1574452.568, 1688561.211,
            1829768.303, 1861451.265, 1853536.727
        ])


def historic_hd_subreal_estate_activities(x):
    """
    Real Name: b'historic hd subreal estate activities'
    Original Eqn: b'([(1995,2009)-(2441020.979,3340479.192)],(1995,2441020.979),(1996,2529304.337),(1997,2567774.037),(1998,2642829.576),(1999,2733948.497),\\\\ (2000,2803765.837),(2001,2876959.249),(2002,2915973.737),(2003,2982427.268),(2004,3050480.543),\\\\ (2005,3109956.804),(2006,3175840.531),(2007,3240184.883),(2008,3293070.023),(2009,3340479.192))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            2441020.979, 2529304.337, 2567774.037, 2642829.576, 2733948.497, 2803765.837,
            2876959.249, 2915973.737, 2982427.268, 3050480.543, 3109956.804, 3175840.531,
            3240184.883, 3293070.023, 3340479.192
        ])


def historic_hd_subrenting_od_meq_and_other_business_activities(x):
    """
    Real Name: b'historic hd subrenting od meq and other business activities'
    Original Eqn: b'([(1995,2009)-(314984.6207,556229.075)],(1995,314984.6207),(1996,333044.0176),(1997,341190.5309),(1998,368007.479),(1999,383757.4154),\\\\ (2000,400238.0943),(2001,396798.5427),(2002,402480.575),(2003,413969.7256),(2004,433966.7039),\\\\ (2005,457741.692),(2006,480708.902),(2007,511773.291),(2008,543182.732),(2009,556229.075))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            314984.6207, 333044.0176, 341190.5309, 368007.479, 383757.4154, 400238.0943,
            396798.5427, 402480.575, 413969.7256, 433966.7039, 457741.692, 480708.902, 511773.291,
            543182.732, 556229.075
        ])


def historic_hd_subpublic_admin_and_defence_compulsory_social_security(x):
    """
    Real Name: b'historic hd subpublic admin and defence compulsory social security'
    Original Eqn: b'([(1995,2009)-(320408.035,484305.844)],(1995,376202.178),(1996,332038.488),(1997,320408.035),(1998,329085.09),(1999,328446.16),\\\\ (2000,346046.543),(2001,362074.766),(2002,392771.431),(2003,407507.525),(2004,433867.474),\\\\ (2005,441176.919),(2006,451861.479),(2007,455933.663),(2008,461450.031),(2009,484305.844))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            376202.178, 332038.488, 320408.035, 329085.09, 328446.16, 346046.543, 362074.766,
            392771.431, 407507.525, 433867.474, 441176.919, 451861.479, 455933.663, 461450.031,
            484305.844
        ])


def historic_hd_subeducation(x):
    """
    Real Name: b'historic hd subeducation'
    Original Eqn: b'([(1995,2009)-(340722.53,485121.345)],(1995,340722.53),(1996,350270.806),(1997,362212.427),(1998,375472.918),(1999,388453.727),\\\\ (2000,385804.453),(2001,399798.349),(2002,410892.68),(2003,428390.985),(2004,449502.133),\\\\ (2005,455067.481),(2006,464749.508),(2007,471472.367),(2008,480018.337),(2009,485121.345))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            340722.53, 350270.806, 362212.427, 375472.918, 388453.727, 385804.453, 399798.349,
            410892.68, 428390.985, 449502.133, 455067.481, 464749.508, 471472.367, 480018.337,
            485121.345
        ])


def historic_hd_subhealth_and_social_work(x):
    """
    Real Name: b'historic hd subhealth and social work'
    Original Eqn: b'([(1995,2009)-(1143478.152,1793666.33)],(1995,1143478.152),(1996,1201180.793),(1997,1245130.725),(1998,1276058.878),(1999,1324541.543),\\\\ (2000,1350134.311),(2001,1401510.594),(2002,1460040.018),(2003,1508964.291),(2004,1557680.132),\\\\ (2005,1628369.246),(2006,1668980.892),(2007,1717773.42),(2008,1754141.008),(2009,1793666.33))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            1143478.152, 1201180.793, 1245130.725, 1276058.878, 1324541.543, 1350134.311,
            1401510.594, 1460040.018, 1508964.291, 1557680.132, 1628369.246, 1668980.892,
            1717773.42, 1754141.008, 1793666.33
        ])


def historic_hd_subother_community_social_and_persona_services(x):
    """
    Real Name: b'historic hd subother community social and persona services'
    Original Eqn: b'([(1995,2009)-(959930.083,1352218.5)],(1995,959930.083),(1996,1015666.047),(1997,1021758.423),(1998,1057090.263),(1999,1100282.525),\\\\ (2000,1145322.223),(2001,1161611.045),(2002,1201423.452),(2003,1223840.595),(2004,1257042.147),\\\\ (2005,1268420.147),(2006,1303972.186),(2007,1330364.267),(2008,1352218.5),(2009,1344696.133))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            959930.083, 1015666.047, 1021758.423, 1057090.263, 1100282.525, 1145322.223,
            1161611.045, 1201423.452, 1223840.595, 1257042.147, 1268420.147, 1303972.186,
            1330364.267, 1352218.5, 1344696.133
        ])


def historic_hd_subprivate_households_with_employed_persons(x):
    """
    Real Name: b'historic hd subprivate households with employed persons'
    Original Eqn: b'([(1995,2009)-(47919.81618,59045.67614)],(1995,47919.81618),(1996,48735.14528),(1997,49312.02724),(1998,51231.33634),(1999,50583.91028),\\\\ (2000,51814.0594),(2001,51742.50474),(2002,51846.85244),(2003,52989.78551),(2004,54193.75841),\\\\ (2005,54513.73037),(2006,55623.74619),(2007,57995.17327),(2008,59045.67614),(2009,58243.5006))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            47919.81618, 48735.14528, 49312.02724, 51231.33634, 50583.91028, 51814.0594,
            51742.50474, 51846.85244, 52989.78551, 54193.75841, 54513.73037, 55623.74619,
            57995.17327, 59045.67614, 58243.5006
        ])


def share_cc_next_step_subagriculture_hunting_forestry_and_fishing(x):
    """
    Real Name: b'share cc next step subagriculture hunting forestry and fishing'
    Original Eqn: b'([(1995,2008)-(0.01655073055008412,0.025078382628402493)],(1995,0.025078382628402493),(1996,0.02464951185425293),(1997,0.024412482955470757),(1998,0.022658014973602505),(1999,0.02491994295641962),\\\\ (2000,0.02507741479510443),(2001,0.02302318244876147),(2002,0.02341619403613124),(2003,0.023769823644028576),(2004,0.02040672872055882),\\\\ (2005,0.018639964524329856),(2006,0.019132109467672614),(2007,0.019439319871382504),(2008,0.01655073055008412))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.025078382628402493, 0.02464951185425293, 0.024412482955470757, 0.022658014973602505,
            0.02491994295641962, 0.02507741479510443, 0.02302318244876147, 0.02341619403613124,
            0.023769823644028576, 0.02040672872055882, 0.018639964524329856, 0.019132109467672614,
            0.019439319871382504, 0.01655073055008412
        ])


def share_cc_next_step_submining_and_quarrying(x):
    """
    Real Name: b'share cc next step submining and quarrying'
    Original Eqn: b'([(1995,2008)-(0.0165157932633882,0.019668699343532815)],(1995,0.018101740661219327),(1996,0.018332290256034372),(1997,0.01703113414914862),(1998,0.0165157932633882),(1999,0.017486811309906522),\\\\ (2000,0.01801189939841712),(2001,0.017721589288219524),(2002,0.016965563499255994),(2003,0.017484206427070492),(2004,0.01752032040491682),\\\\ (2005,0.018382928551712276),(2006,0.01856406183756792),(2007,0.01917091605291903),(2008,0.019668699343532815))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.018101740661219327, 0.018332290256034372, 0.01703113414914862, 0.0165157932633882,
            0.017486811309906522, 0.01801189939841712, 0.017721589288219524, 0.016965563499255994,
            0.017484206427070492, 0.01752032040491682, 0.018382928551712276, 0.01856406183756792,
            0.01917091605291903, 0.019668699343532815
        ])


def share_cc_next_step_subfood_beverages_and_tobacco(x):
    """
    Real Name: b'share cc next step subfood beverages and tobacco'
    Original Eqn: b'([(1995,2008)-(0.023143221409336112,0.02876498203026079)],(1995,0.02876498203026079),(1996,0.02814531333997819),(1997,0.027531214667705785),(1998,0.02874565191986845),(1999,0.02788345999760771),\\\\ (2000,0.02802430949192551),(2001,0.026795521737131983),(2002,0.02600865546252975),(2003,0.0238629158502632),(2004,0.02330770485908382),\\\\ (2005,0.023629186745957292),(2006,0.02356268466844763),(2007,0.023143221409336112),(2008,0.023638735612115706))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.02876498203026079, 0.02814531333997819, 0.027531214667705785, 0.02874565191986845,
            0.02788345999760771, 0.02802430949192551, 0.026795521737131983, 0.02600865546252975,
            0.0238629158502632, 0.02330770485908382, 0.023629186745957292, 0.02356268466844763,
            0.023143221409336112, 0.023638735612115706
        ])


def share_cc_next_step_subtextiles_and_textile_products(x):
    """
    Real Name: b'share cc next step subtextiles and textile products'
    Original Eqn: b'([(1995,2008)-(0.005124370728697409,0.007825063986088282)],(1995,0.007825063986088282),(1996,0.007651438290957927),(1997,0.0074916774298229),(1998,0.0065129555117770625),(1999,0.006447661322563113),\\\\ (2000,0.00606430460937917),(2001,0.005883481200538257),(2002,0.005318456094464006),(2003,0.005508273168393984),(2004,0.005124370728697409),\\\\ (2005,0.005360769244134405),(2006,0.005676448056192027),(2007,0.005897454007932367),(2008,0.005910777608613948))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.007825063986088282, 0.007651438290957927, 0.0074916774298229, 0.0065129555117770625,
            0.006447661322563113, 0.00606430460937917, 0.005883481200538257, 0.005318456094464006,
            0.005508273168393984, 0.005124370728697409, 0.005360769244134405, 0.005676448056192027,
            0.005897454007932367, 0.005910777608613948
        ])


def share_cc_next_step_subleather_leather_and_footwear(x):
    """
    Real Name: b'share cc next step subleather leather and footwear'
    Original Eqn: b'([(1995,2008)-(0.0008843018128007417,0.0011516930123566763)],(1995,0.001143608757867767),(1996,0.0010819449533878667),(1997,0.0010508849725526389),(1998,0.0009647149390711795),(1999,0.0009573791517385931),\\\\ (2000,0.0011008752744973995),(2001,0.00102773596644666),(2002,0.0009999533655333415),(2003,0.0008843018128007417),(2004,0.0009008914767220458),\\\\ (2005,0.0009874610391665518),(2006,0.001067974870512249),(2007,0.001128960946128135),(2008,0.0011516930123566763))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.001143608757867767, 0.0010819449533878667, 0.0010508849725526389,
            0.0009647149390711795, 0.0009573791517385931, 0.0011008752744973995,
            0.00102773596644666, 0.0009999533655333415, 0.0008843018128007417,
            0.0009008914767220458, 0.0009874610391665518, 0.001067974870512249,
            0.001128960946128135, 0.0011516930123566763
        ])


def share_cc_next_step_subwood_and_products_of_wood_and_cork(x):
    """
    Real Name: b'share cc next step subwood and products of wood and cork'
    Original Eqn: b'([(1995,2008)-(0.0024892388370459616,0.0033681335538219806)],(1995,0.003168228187107202),(1996,0.0033681335538219806),(1997,0.0032993092220650784),(1998,0.003328976784436948),(1999,0.0031833806038531506),\\\\ (2000,0.003120972846879468),(2001,0.0029739924497252965),(2002,0.003047707007696271),(2003,0.0030294902999746915),(2004,0.0029438212130334035),\\\\ (2005,0.002889431931536702),(2006,0.0029644037920589375),(2007,0.002754986281307624),(2008,0.0024892388370459616))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.003168228187107202, 0.0033681335538219806, 0.0032993092220650784,
            0.003328976784436948, 0.0031833806038531506, 0.003120972846879468,
            0.0029739924497252965, 0.003047707007696271, 0.0030294902999746915,
            0.0029438212130334035, 0.002889431931536702, 0.0029644037920589375,
            0.002754986281307624, 0.0024892388370459616
        ])


def share_cc_next_step_subpulp_paper_printing_and_publishing(x):
    """
    Real Name: b'share cc next step subpulp paper printing and publishing'
    Original Eqn: b'([(1995,2008)-(0.011602358740517354,0.016674768573807)],(1995,0.015985164553250452),(1996,0.015469435942986349),(1997,0.015498594516144475),(1998,0.016674768573807),(1999,0.016252638998880308),\\\\ (2000,0.015313901877892746),(2001,0.01488650915592016),(2002,0.01395986569583055),(2003,0.014257477691022605),(2004,0.014401523761225027),\\\\ (2005,0.012986096954139215),(2006,0.0124551897341896),(2007,0.011948904045551118),(2008,0.011602358740517354))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.015985164553250452, 0.015469435942986349, 0.015498594516144475, 0.016674768573807,
            0.016252638998880308, 0.015313901877892746, 0.01488650915592016, 0.01395986569583055,
            0.014257477691022605, 0.014401523761225027, 0.012986096954139215, 0.0124551897341896,
            0.011948904045551118, 0.011602358740517354
        ])


def share_cc_next_step_subcoke_refined_petroleum_and_nuclear_fuel(x):
    """
    Real Name: b'share cc next step subcoke refined petroleum and nuclear fuel'
    Original Eqn: b'([(1995,2008)-(0.010670476406875505,0.01461178252401957)],(1995,0.012746459305556141),(1996,0.013633527821310106),(1997,0.01359401984732537),(1998,0.011047742103384642),(1999,0.01184315652889293),\\\\ (2000,0.012897411493201982),(2001,0.010670476406875505),(2002,0.01269276226211265),(2003,0.01461178252401957),(2004,0.014107919688276434),\\\\ (2005,0.01221847799976767),(2006,0.011732689862703299),(2007,0.011403344506130163),(2008,0.012538492970489885))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.012746459305556141, 0.013633527821310106, 0.01359401984732537, 0.011047742103384642,
            0.01184315652889293, 0.012897411493201982, 0.010670476406875505, 0.01269276226211265,
            0.01461178252401957, 0.014107919688276434, 0.01221847799976767, 0.011732689862703299,
            0.011403344506130163, 0.012538492970489885
        ])


def share_cc_next_step_subchemicals_and_chemical_products(x):
    """
    Real Name: b'share cc next step subchemicals and chemical products'
    Original Eqn: b'([(1995,2008)-(0.026181380294071407,0.02853635359715732)],(1995,0.027479288796231974),(1996,0.02786846743794753),(1997,0.02644383447466471),(1998,0.02724529339079687),(1999,0.02624198821499827),\\\\ (2000,0.026181380294071407),(2001,0.027621052672975967),(2002,0.027145511225085295),(2003,0.027529056528481182),(2004,0.02654123196808494),\\\\ (2005,0.027374754999941013),(2006,0.02853635359715732),(2007,0.026591622864745416),(2008,0.026767398009174638))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.027479288796231974, 0.02786846743794753, 0.02644383447466471, 0.02724529339079687,
            0.02624198821499827, 0.026181380294071407, 0.027621052672975967, 0.027145511225085295,
            0.027529056528481182, 0.02654123196808494, 0.027374754999941013, 0.02853635359715732,
            0.026591622864745416, 0.026767398009174638
        ])


def share_cc_next_step_subrubber_and_plastics(x):
    """
    Real Name: b'share cc next step subrubber and plastics'
    Original Eqn: b'([(1995,2008)-(0.005981566587978499,0.008081105585862648)],(1995,0.007931836698194594),(1996,0.007929950133355458),(1997,0.008081105585862648),(1998,0.008032743025468464),(1999,0.007568253072198993),\\\\ (2000,0.007055808764641412),(2001,0.007271392284354727),(2002,0.007325513751262952),(2003,0.007354678780301329),(2004,0.00721820304143248),\\\\ (2005,0.007005938695842652),(2006,0.007367759456408463),(2007,0.006715065354087769),(2008,0.005981566587978499))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.007931836698194594, 0.007929950133355458, 0.008081105585862648, 0.008032743025468464,
            0.007568253072198993, 0.007055808764641412, 0.007271392284354727, 0.007325513751262952,
            0.007354678780301329, 0.00721820304143248, 0.007005938695842652, 0.007367759456408463,
            0.006715065354087769, 0.005981566587978499
        ])


def share_cc_next_step_subother_non_metalic_mineral(x):
    """
    Real Name: b'share cc next step subother non metalic mineral'
    Original Eqn: b'([(1995,2008)-(0.007857115260071003,0.009359182092185262)],(1995,0.009083085220471966),(1996,0.009359182092185262),(1997,0.008776038855268316),(1998,0.00880951349188728),(1999,0.008519134385357204),\\\\ (2000,0.008295573751607464),(2001,0.00811510007249048),(2002,0.008044587776070526),(2003,0.008372147189461823),(2004,0.00843120193208617),\\\\ (2005,0.008877056370860618),(2006,0.009110566920957066),(2007,0.008719093392781017),(2008,0.007857115260071003))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.009083085220471966, 0.009359182092185262, 0.008776038855268316, 0.00880951349188728,
            0.008519134385357204, 0.008295573751607464, 0.00811510007249048, 0.008044587776070526,
            0.008372147189461823, 0.00843120193208617, 0.008877056370860618, 0.009110566920957066,
            0.008719093392781017, 0.007857115260071003
        ])


def share_cc_next_step_subbasic_metals_and_fabricated_metal(x):
    """
    Real Name: b'share cc next step subbasic metals and fabricated metal'
    Original Eqn: b'([(1995,2008)-(0.019502770478668816,0.026498741926502475)],(1995,0.02409241566665906),(1996,0.024628932833239057),(1997,0.022608432090721487),(1998,0.021563891804170753),(1999,0.02274463504803309),\\\\ (2000,0.02031556538542781),(2001,0.019502770478668816),(2002,0.020279731161448163),(2003,0.022241883350801843),(2004,0.023391355493617486),\\\\ (2005,0.024932615017941605),(2006,0.026498741926502475),(2007,0.026394927346192133),(2008,0.02322394279397999))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.02409241566665906, 0.024628932833239057, 0.022608432090721487, 0.021563891804170753,
            0.02274463504803309, 0.02031556538542781, 0.019502770478668816, 0.020279731161448163,
            0.022241883350801843, 0.023391355493617486, 0.024932615017941605, 0.026498741926502475,
            0.026394927346192133, 0.02322394279397999
        ])


def share_cc_next_step_submachinery_nec(x):
    """
    Real Name: b'share cc next step submachinery nec'
    Original Eqn: b'([(1995,2008)-(0.011661210055884422,0.01970770333839225)],(1995,0.013719072372734927),(1996,0.01393565671152066),(1997,0.014096065919260808),(1998,0.012396757811239846),(1999,0.013555513896937202),\\\\ (2000,0.012458152299629186),(2001,0.011661210055884422),(2002,0.012266401752284125),(2003,0.013881604122856654),(2004,0.015158824782683553),\\\\ (2005,0.016585895022378887),(2006,0.01761172852089743),(2007,0.01970770333839225),(2008,0.017516772760582607))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.013719072372734927, 0.01393565671152066, 0.014096065919260808, 0.012396757811239846,
            0.013555513896937202, 0.012458152299629186, 0.011661210055884422, 0.012266401752284125,
            0.013881604122856654, 0.015158824782683553, 0.016585895022378887, 0.01761172852089743,
            0.01970770333839225, 0.017516772760582607
        ])


def share_cc_next_step_subelectrical_and_optical_equipment(x):
    """
    Real Name: b'share cc next step subelectrical and optical equipment'
    Original Eqn: b'([(1995,2008)-(0.0240724320246828,0.04779006980275797)],(1995,0.0240724320246828),(1996,0.026879516079187753),(1997,0.027491298893010396),(1998,0.030775962613424947),(1999,0.03820207983468018),\\\\ (2000,0.027047047895312745),(2001,0.027906514442787748),(2002,0.03409009944486845),(2003,0.038641933859760995),(2004,0.04129830740111195),\\\\ (2005,0.043431988576497264),(2006,0.04706087316905279),(2007,0.04779006980275797),(2008,0.045176727210357176))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0240724320246828, 0.026879516079187753, 0.027491298893010396, 0.030775962613424947,
            0.03820207983468018, 0.027047047895312745, 0.027906514442787748, 0.03409009944486845,
            0.038641933859760995, 0.04129830740111195, 0.043431988576497264, 0.04706087316905279,
            0.04779006980275797, 0.045176727210357176
        ])


def share_cc_next_step_subtransport_equipment(x):
    """
    Real Name: b'share cc next step subtransport equipment'
    Original Eqn: b'([(1995,2008)-(0.016071504276576817,0.02068709274361638)],(1995,0.016071504276576817),(1996,0.016269187914275323),(1997,0.017384791192130742),(1998,0.018521083745308402),(1999,0.017510845619079896),\\\\ (2000,0.01750544095862379),(2001,0.019580343726275647),(2002,0.017519592188039654),(2003,0.017505942568556376),(2004,0.018029153530819162),\\\\ (2005,0.018884900139347384),(2006,0.02068709274361638),(2007,0.018734791973192437),(2008,0.017331831349728804))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.016071504276576817, 0.016269187914275323, 0.017384791192130742, 0.018521083745308402,
            0.017510845619079896, 0.01750544095862379, 0.019580343726275647, 0.017519592188039654,
            0.017505942568556376, 0.018029153530819162, 0.018884900139347384, 0.02068709274361638,
            0.018734791973192437, 0.017331831349728804
        ])


def share_cc_next_step_submanufacturing_nec_recycling(x):
    """
    Real Name: b'share cc next step submanufacturing nec recycling'
    Original Eqn: b'([(1995,2008)-(0.004177586302183998,0.006430083963705986)],(1995,0.004246578649526875),(1996,0.004325414800652897),(1997,0.004465400376368324),(1998,0.0042640218851806785),(1999,0.004382284365538603),\\\\ (2000,0.004177586302183998),(2001,0.0044474981883766305),(2002,0.0044519849138500095),(2003,0.005381816335691264),(2004,0.006430083963705986),\\\\ (2005,0.006026154324366072),(2006,0.0058666091075879),(2007,0.005829000303710761),(2008,0.005502366671535831))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.004246578649526875, 0.004325414800652897, 0.004465400376368324,
            0.0042640218851806785, 0.004382284365538603, 0.004177586302183998,
            0.0044474981883766305, 0.0044519849138500095, 0.005381816335691264,
            0.006430083963705986, 0.006026154324366072, 0.0058666091075879, 0.005829000303710761,
            0.005502366671535831
        ])


def share_cc_next_step_subelectricity_gas_and_water_supply(x):
    """
    Real Name: b'share cc next step subelectricity gas and water supply'
    Original Eqn: b'([(1995,2008)-(0.038426723351002466,0.04702297200735588)],(1995,0.04702297200735588),(1996,0.043770893328872754),(1997,0.043527249921124174),(1998,0.042248197518757455),(1999,0.04144001516883796),\\\\ (2000,0.03937928827045648),(2001,0.03954100227559819),(2002,0.03992084800226018),(2003,0.04122838142863999),(2004,0.04124366752005908),\\\\ (2005,0.03908474464960975),(2006,0.038426723351002466),(2007,0.03972970117195154),(2008,0.039340682954113484))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.04702297200735588, 0.043770893328872754, 0.043527249921124174, 0.042248197518757455,
            0.04144001516883796, 0.03937928827045648, 0.03954100227559819, 0.03992084800226018,
            0.04122838142863999, 0.04124366752005908, 0.03908474464960975, 0.038426723351002466,
            0.03972970117195154, 0.039340682954113484
        ])


def share_cc_next_step_subconstruction(x):
    """
    Real Name: b'share cc next step subconstruction'
    Original Eqn: b'([(1995,2008)-(0.02490199946395865,0.029711743968391505)],(1995,0.029711743968391505),(1996,0.02784947827139627),(1997,0.028342394795020702),(1998,0.027970268160605542),(1999,0.025480331282401503),\\\\ (2000,0.025832810595568145),(2001,0.025271920012836506),(2002,0.02490199946395865),(2003,0.026099648636237482),(2004,0.026303515770198044),\\\\ (2005,0.027156725944773412),(2006,0.026060042489757677),(2007,0.025878577266468014),(2008,0.025758496017789966))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.029711743968391505, 0.02784947827139627, 0.028342394795020702, 0.027970268160605542,
            0.025480331282401503, 0.025832810595568145, 0.025271920012836506, 0.02490199946395865,
            0.026099648636237482, 0.026303515770198044, 0.027156725944773412, 0.026060042489757677,
            0.025878577266468014, 0.025758496017789966
        ])


def share_cc_next_step_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
        x):
    """
    Real Name: b'share cc next step subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'
    Original Eqn: b'([(1995,2008)-(0.00579608344911891,0.009522368180830508)],(1995,0.00903374834872022),(1996,0.009173380221024536),(1997,0.009522368180830508),(1998,0.009262104773787541),(1999,0.008679969036621738),\\\\ (2000,0.008024579623124155),(2001,0.007668346382009341),(2002,0.007234417099582751),(2003,0.007793426044455792),(2004,0.0077206884013198435),\\\\ (2005,0.00787785920922557),(2006,0.007519391350279477),(2007,0.006816306866714831),(2008,0.00579608344911891))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.00903374834872022, 0.009173380221024536, 0.009522368180830508, 0.009262104773787541,
            0.008679969036621738, 0.008024579623124155, 0.007668346382009341, 0.007234417099582751,
            0.007793426044455792, 0.0077206884013198435, 0.00787785920922557, 0.007519391350279477,
            0.006816306866714831, 0.00579608344911891
        ])


def share_cc_next_step_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
        x):
    """
    Real Name: b'share cc next step subwholesale trade and commissions trade except of motor vehicles and motorcycles'
    Original Eqn: b'([(1995,2008)-(0.06872416518698367,0.08680986189833101)],(1995,0.06872416518698367),(1996,0.07397466130108132),(1997,0.07759140573182152),(1998,0.0790311572976072),(1999,0.07895106157594772),\\\\ (2000,0.08358153667209856),(2001,0.08046215105242577),(2002,0.08057597818003052),(2003,0.08366266458872629),(2004,0.08459099239634021),\\\\ (2005,0.08197165939884506),(2006,0.08438846586604647),(2007,0.0837852429770754),(2008,0.08680986189833101))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.06872416518698367, 0.07397466130108132, 0.07759140573182152, 0.0790311572976072,
            0.07895106157594772, 0.08358153667209856, 0.08046215105242577, 0.08057597818003052,
            0.08366266458872629, 0.08459099239634021, 0.08197165939884506, 0.08438846586604647,
            0.0837852429770754, 0.08680986189833101
        ])


def share_cc_next_step_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
        x):
    """
    Real Name: b'share cc next step subretail trade except of motor vehicles and motorcycles repair of household goods'
    Original Eqn: b'([(1995,2008)-(0.03600442411878235,0.04802528865820533)],(1995,0.043218689413549206),(1996,0.04418452831060235),(1997,0.04431907265956516),(1998,0.04453363331100283),(1999,0.04423144754730959),\\\\ (2000,0.04719982136870136),(2001,0.04802528865820533),(2002,0.046326157202964964),(2003,0.043729995596854115),(2004,0.04365355366137524),\\\\ (2005,0.04447043011858734),(2006,0.04115812502638437),(2007,0.037186956214448466),(2008,0.03600442411878235))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.043218689413549206, 0.04418452831060235, 0.04431907265956516, 0.04453363331100283,
            0.04423144754730959, 0.04719982136870136, 0.04802528865820533, 0.046326157202964964,
            0.043729995596854115, 0.04365355366137524, 0.04447043011858734, 0.04115812502638437,
            0.037186956214448466, 0.03600442411878235
        ])


def share_cc_next_step_subhotels_and_restaurants(x):
    """
    Real Name: b'share cc next step subhotels and restaurants'
    Original Eqn: b'([(1995,2008)-(0.01729384088477041,0.019375033321432044)],(1995,0.017674065016558355),(1996,0.018149583857362074),(1997,0.018880821695584853),(1998,0.019187506494702862),(1999,0.01848919255326852),\\\\ (2000,0.018801788372633084),(2001,0.019375033321432044),(2002,0.01894584982699591),(2003,0.018775261769920393),(2004,0.018685354294381163),\\\\ (2005,0.019167548759844704),(2006,0.01817645780586637),(2007,0.017594543932584812),(2008,0.01729384088477041))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.017674065016558355, 0.018149583857362074, 0.018880821695584853, 0.019187506494702862,
            0.01848919255326852, 0.018801788372633084, 0.019375033321432044, 0.01894584982699591,
            0.018775261769920393, 0.018685354294381163, 0.019167548759844704, 0.01817645780586637,
            0.017594543932584812, 0.01729384088477041
        ])


def share_cc_next_step_subinland_transport(x):
    """
    Real Name: b'share cc next step subinland transport'
    Original Eqn: b'([(1995,2008)-(0.016899900875868307,0.018692217055157924)],(1995,0.01757328059423465),(1996,0.017533477095097345),(1997,0.01708335113402725),(1998,0.016899900875868307),(1999,0.017573466333478917),\\\\ (2000,0.0184060737777463),(2001,0.017573394156884907),(2002,0.01752725282216478),(2003,0.017674037253620118),(2004,0.01775614429616209),\\\\ (2005,0.01790638924580825),(2006,0.01823776170799223),(2007,0.018692217055157924),(2008,0.017259316371031952))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.01757328059423465, 0.017533477095097345, 0.01708335113402725, 0.016899900875868307,
            0.017573466333478917, 0.0184060737777463, 0.017573394156884907, 0.01752725282216478,
            0.017674037253620118, 0.01775614429616209, 0.01790638924580825, 0.01823776170799223,
            0.018692217055157924, 0.017259316371031952
        ])


def share_cc_next_step_subwater_transport(x):
    """
    Real Name: b'share cc next step subwater transport'
    Original Eqn: b'([(1995,2008)-(0.0019363175510912095,0.006485775212538603)],(1995,0.0019363175510912095),(1996,0.002174967262959381),(1997,0.002445572534255821),(1998,0.0025031485102358655),(1999,0.0027778550421596786),\\\\ (2000,0.003017307520741118),(2001,0.003093341832727418),(2002,0.0033244710209141787),(2003,0.0040514983108206415),(2004,0.004701125070493769),\\\\ (2005,0.004946960268778851),(2006,0.005842127228333952),(2007,0.006485775212538603),(2008,0.006004459143157512))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.0019363175510912095, 0.002174967262959381, 0.002445572534255821,
            0.0025031485102358655, 0.0027778550421596786, 0.003017307520741118,
            0.003093341832727418, 0.0033244710209141787, 0.0040514983108206415,
            0.004701125070493769, 0.004946960268778851, 0.005842127228333952, 0.006485775212538603,
            0.006004459143157512
        ])


def share_cc_next_step_subair_transport(x):
    """
    Real Name: b'share cc next step subair transport'
    Original Eqn: b'([(1995,2008)-(0.0016726602837590257,0.004985152824590062)],(1995,0.004725321799396147),(1996,0.004985152824590062),(1997,0.004397007883431417),(1998,0.003784892111621302),(1999,0.003282607584440268),\\\\ (2000,0.0016726602837590257),(2001,0.0021694690555328824),(2002,0.0030221235882390467),(2003,0.0035400602398324727),(2004,0.0034155250192160567),\\\\ (2005,0.0036206051079420323),(2006,0.0033596968339394905),(2007,0.002817936173472771),(2008,0.0023199328516766635))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.004725321799396147, 0.004985152824590062, 0.004397007883431417, 0.003784892111621302,
            0.003282607584440268, 0.0016726602837590257, 0.0021694690555328824,
            0.0030221235882390467, 0.0035400602398324727, 0.0034155250192160567,
            0.0036206051079420323, 0.0033596968339394905, 0.002817936173472771,
            0.0023199328516766635
        ])


def share_cc_next_step_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
        x):
    """
    Real Name: b'share cc next step subother supporting and auxiliary transport activities activities of travel agencies'
    Original Eqn: b'([(1995,2008)-(0.005691227831434559,0.00905327322223547)],(1995,0.006899084212642317),(1996,0.0074114575956901255),(1997,0.0071853424807637525),(1998,0.006714489302199572),(1999,0.005691227831434559),\\\\ (2000,0.006036424779551169),(2001,0.006585132573263568),(2002,0.006975233725391538),(2003,0.007547036142033878),(2004,0.008121570535510506),\\\\ (2005,0.008817806913968915),(2006,0.00905327322223547),(2007,0.00899968325699662),(2008,0.007461986150000285))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.006899084212642317, 0.0074114575956901255, 0.0071853424807637525,
            0.006714489302199572, 0.005691227831434559, 0.006036424779551169, 0.006585132573263568,
            0.006975233725391538, 0.007547036142033878, 0.008121570535510506, 0.008817806913968915,
            0.00905327322223547, 0.00899968325699662, 0.007461986150000285
        ])


def share_cc_next_step_subpost_and_telecommunications(x):
    """
    Real Name: b'share cc next step subpost and telecommunications'
    Original Eqn: b'([(1995,2008)-(0.03160549275661185,0.050155005310443236)],(1995,0.03160549275661185),(1996,0.0322243006026475),(1997,0.03388806015063383),(1998,0.03591291947337805),(1999,0.03791737172900439),\\\\ (2000,0.0413838152640967),(2001,0.04456758387526782),(2002,0.04571097051257681),(2003,0.046742194825149755),(2004,0.04604476002740335),\\\\ (2005,0.045529587353981896),(2006,0.04443512758226394),(2007,0.046731061459096244),(2008,0.050155005310443236))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.03160549275661185, 0.0322243006026475, 0.03388806015063383, 0.03591291947337805,
            0.03791737172900439, 0.0413838152640967, 0.04456758387526782, 0.04571097051257681,
            0.046742194825149755, 0.04604476002740335, 0.045529587353981896, 0.04443512758226394,
            0.046731061459096244, 0.050155005310443236
        ])


def share_cc_next_step_subfinancial_intermediation(x):
    """
    Real Name: b'share cc next step subfinancial intermediation'
    Original Eqn: b'([(1995,2008)-(0.07263386823827737,0.08477781706234779)],(1995,0.07263386823827737),(1996,0.07524361994554456),(1997,0.07469807199082727),(1998,0.07674454224960045),(1999,0.07811355669530828),\\\\ (2000,0.08063039557217784),(2001,0.0847256373038466),(2002,0.08363368144151041),(2003,0.07945056175518507),(2004,0.07873728904029753),\\\\ (2005,0.08477781706234779),(2006,0.08274482610250618),(2007,0.07932373057747709),(2008,0.08359235909013855))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.07263386823827737, 0.07524361994554456, 0.07469807199082727, 0.07674454224960045,
            0.07811355669530828, 0.08063039557217784, 0.0847256373038466, 0.08363368144151041,
            0.07945056175518507, 0.07873728904029753, 0.08477781706234779, 0.08274482610250618,
            0.07932373057747709, 0.08359235909013855
        ])


def share_cc_next_step_subreal_estate_activities(x):
    """
    Real Name: b'share cc next step subreal estate activities'
    Original Eqn: b'([(1995,2008)-(0.2057033512412547,0.23937803446193515)],(1995,0.23937803446193515),(1996,0.23358810685060818),(1997,0.2301581651449089),(1998,0.227948775874283),(1999,0.2256644107843945),\\\\ (2000,0.22877553857089394),(2001,0.22367874012980918),(2002,0.22277622638960762),(2003,0.21590454968628062),(2004,0.2127113153994352),\\\\ (2005,0.20839896270047154),(2006,0.2057033512412547),(2007,0.2094927971640791),(2008,0.21569041217322732))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.23937803446193515, 0.23358810685060818, 0.2301581651449089, 0.227948775874283,
            0.2256644107843945, 0.22877553857089394, 0.22367874012980918, 0.22277622638960762,
            0.21590454968628062, 0.2127113153994352, 0.20839896270047154, 0.2057033512412547,
            0.2094927971640791, 0.21569041217322732
        ])


def share_cc_next_step_subrenting_od_meq_and_other_business_activities(x):
    """
    Real Name: b'share cc next step subrenting od meq and other business activities'
    Original Eqn: b'([(1995,2008)-(0.06450830258564538,0.07522583494958558)],(1995,0.06905001380524613),(1996,0.06821043531529368),(1997,0.07288181835394007),(1998,0.06817971257110544),(1999,0.06450830258564538),\\\\ (2000,0.06454304884231093),(2001,0.06721206423359273),(2002,0.0667362552587201),(2003,0.06682921530945202),(2004,0.06977231435038858),\\\\ (2005,0.06861132671855419),(2006,0.07189063738602502),(2007,0.07522583494958558),(2008,0.06706870740084765))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.06905001380524613, 0.06821043531529368, 0.07288181835394007, 0.06817971257110544,
            0.06450830258564538, 0.06454304884231093, 0.06721206423359273, 0.0667362552587201,
            0.06682921530945202, 0.06977231435038858, 0.06861132671855419, 0.07189063738602502,
            0.07522583494958558, 0.06706870740084765
        ])


def share_cc_next_step_subpublic_admin_and_defence_compulsory_social_security(x):
    """
    Real Name: b'share cc next step subpublic admin and defence compulsory social security'
    Original Eqn: b'([(1995,2008)-(0.026470257950723577,0.03826439070447431)],(1995,0.03783224147960273),(1996,0.03701298705578099),(1997,0.03567177066473178),(1998,0.038192407838542546),(1999,0.038012695658412206),\\\\ (2000,0.03826439070447431),(2001,0.03718222874310394),(2002,0.03554916941396557),(2003,0.030954803248098826),(2004,0.029375582837865413),\\\\ (2005,0.029483320594616752),(2006,0.026471578950167513),(2007,0.026470257950723577),(2008,0.0318911564104782))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.03783224147960273, 0.03701298705578099, 0.03567177066473178, 0.038192407838542546,
            0.038012695658412206, 0.03826439070447431, 0.03718222874310394, 0.03554916941396557,
            0.030954803248098826, 0.029375582837865413, 0.029483320594616752, 0.026471578950167513,
            0.026470257950723577, 0.0318911564104782
        ])


def share_cc_next_step_subeducation(x):
    """
    Real Name: b'share cc next step subeducation'
    Original Eqn: b'([(1995,2008)-(0.004847058955568252,0.006127937515178124)],(1995,0.005875669601914743),(1996,0.0056678531809458655),(1997,0.006082054444355262),(1998,0.006127937515178124),(1999,0.005803650449733586),\\\\ (2000,0.005767438285737494),(2001,0.0059783876907612225),(2002,0.006127107081716946),(2003,0.005054519325957908),(2004,0.005130009752766508),\\\\ (2005,0.004847058955568252),(2006,0.0051597539362335815),(2007,0.005669951603168591),(2008,0.005755993947517754))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.005875669601914743, 0.0056678531809458655, 0.006082054444355262,
            0.006127937515178124, 0.005803650449733586, 0.005767438285737494,
            0.0059783876907612225, 0.006127107081716946, 0.005054519325957908,
            0.005130009752766508, 0.004847058955568252, 0.0051597539362335815,
            0.005669951603168591, 0.005755993947517754
        ])


def share_cc_next_step_subhealth_and_social_work(x):
    """
    Real Name: b'share cc next step subhealth and social work'
    Original Eqn: b'([(1995,2008)-(0.026615770620869734,0.03422943890008811)],(1995,0.029160160403648494),(1996,0.02821173656516283),(1997,0.026615770620869734),(1998,0.0273539727857798),(1999,0.02662583643780871),\\\\ (2000,0.028142691231517622),(2001,0.029297619075475182),(2002,0.02941131460970212),(2003,0.0301810591244524),(2004,0.031490932282237226),\\\\ (2005,0.031232041065638115),(2006,0.02959403415633184),(2007,0.02988511373451547),(2008,0.03422943890008811))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.029160160403648494, 0.02821173656516283, 0.026615770620869734, 0.0273539727857798,
            0.02662583643780871, 0.028142691231517622, 0.029297619075475182, 0.02941131460970212,
            0.0301810591244524, 0.031490932282237226, 0.031232041065638115, 0.02959403415633184,
            0.02988511373451547, 0.03422943890008811
        ])


def share_cc_next_step_subother_community_social_and_persona_services(x):
    """
    Real Name: b'share cc next step subother community social and persona services'
    Original Eqn: b'([(1995,2008)-(0.023811135179053207,0.029323662796849222)],(1995,0.02841304632967128),(1996,0.027082293603525917),(1997,0.027431107643009052),(1998,0.029323662796849222),(1999,0.029033478768738467),\\\\ (2000,0.027866881374139507),(2001,0.028477811794828094),(2002,0.027741634257114605),(2003,0.02643605715958021),(2004,0.025304071077875273),\\\\ (2005,0.023855398102559003),(2006,0.02385049848422552),(2007,0.023811135179053207),(2008,0.024622633133622788))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            0.02841304632967128, 0.027082293603525917, 0.027431107643009052, 0.029323662796849222,
            0.029033478768738467, 0.027866881374139507, 0.028477811794828094, 0.027741634257114605,
            0.02643605715958021, 0.025304071077875273, 0.023855398102559003, 0.02385049848422552,
            0.023811135179053207, 0.024622633133622788
        ])


def share_cc_next_step_subprivate_households_with_employed_persons(x):
    """
    Real Name: b'share cc next step subprivate households with employed persons'
    Original Eqn: b'([(1995,2008)-(2.224100933757743e-05,3.676247669895163e-05)],(1995,2.224100933757743e-05),(1996,2.3182796720525097e-05),(1997,2.2308822775885723e-05),(1998,2.2884702082035344e-05),(1999,2.4357628368450084e-05),\\\\ (2000,2.586345147694192e-05),(2001,2.6477256965928314e-05),(2002,2.6730466120345426e-05),(2003,2.769540121679224e-05),(2004,2.994530061908033e-05),\\\\ (2005,3.0137690959046645e-05),(2006,3.283954762959073e-05),(2007,3.3795758345553865e-05),(2008,3.676247669895163e-05))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008], [
            2.224100933757743e-05, 2.3182796720525097e-05, 2.2308822775885723e-05,
            2.2884702082035344e-05, 2.4357628368450084e-05, 2.586345147694192e-05,
            2.6477256965928314e-05, 2.6730466120345426e-05, 2.769540121679224e-05,
            2.994530061908033e-05, 3.0137690959046645e-05, 3.283954762959073e-05,
            3.3795758345553865e-05, 3.676247669895163e-05
        ])


def historic_labour_share(x):
    """
    Real Name: b'historic labour share'
    Original Eqn: b'([(1995,2013)-(-0.03570221794602446,0.0033245164448738596)],(1995,-0.03570221794602446),(1996,-0.007511835079606288),(1997,-4.9226177098571355e-05),(1998,-0.0036856044367975516),(1999,-0.0018807592046075072),\\\\ (2000,0.0033245164448738596),(2001,-0.00916060631432225),(2002,-0.0035427091662072474),(2003,-0.012338255775489415),(2004,-0.00752841386661518),\\\\ (2005,-0.0031033781483257306),(2006,-0.005033300111722316),(2007,-0.00010456283432869196),(2008,-0.005033300111722316),(2009,-0.009419751237859098),\\\\ (2010,-0.009419751237859098),(2011,-0.009419751237859098),(2012,-0.009419751237859098),(2013,-0.009419751237859098))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013
    ], [
        -0.03570221794602446, -0.007511835079606288, -4.9226177098571355e-05,
        -0.0036856044367975516, -0.0018807592046075072, 0.0033245164448738596,
        -0.00916060631432225, -0.0035427091662072474, -0.012338255775489415, -0.00752841386661518,
        -0.0031033781483257306, -0.005033300111722316, -0.00010456283432869196,
        -0.005033300111722316, -0.009419751237859098, -0.009419751237859098, -0.009419751237859098,
        -0.009419751237859098, -0.009419751237859098
    ])


def share_cc_sectoral_subagriculture_hunting_forestry_and_fishing(x):
    """
    Real Name: b'share cc sectoral subagriculture hunting forestry and fishing'
    Original Eqn: b'([(1995,2009)-(0.01655073055008412,0.025078382628402493)],(1995,0.02287729187012649),(1996,0.025078382628402493),(1997,0.02464951185425293),(1998,0.024412482955470757),(1999,0.022658014973602505),\\\\ (2000,0.02491994295641962),(2001,0.02507741479510443),(2002,0.02302318244876147),(2003,0.02341619403613124),(2004,0.023769823644028576),\\\\ (2005,0.02040672872055882),(2006,0.018639964524329856),(2007,0.019132109467672614),(2008,0.019439319871382504),(2009,0.01655073055008412))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.02287729187012649, 0.025078382628402493, 0.02464951185425293, 0.024412482955470757,
            0.022658014973602505, 0.02491994295641962, 0.02507741479510443, 0.02302318244876147,
            0.02341619403613124, 0.023769823644028576, 0.02040672872055882, 0.018639964524329856,
            0.019132109467672614, 0.019439319871382504, 0.01655073055008412
        ])


def share_cc_sectoral_submining_and_quarrying(x):
    """
    Real Name: b'share cc sectoral submining and quarrying'
    Original Eqn: b'([(1995,2009)-(0.0165157932633882,0.019668699343532815)],(1995,0.019074894806125776),(1996,0.018101740661219327),(1997,0.018332290256034372),(1998,0.01703113414914862),(1999,0.0165157932633882),\\\\ (2000,0.017486811309906522),(2001,0.01801189939841712),(2002,0.017721589288219524),(2003,0.016965563499255994),(2004,0.017484206427070492),\\\\ (2005,0.01752032040491682),(2006,0.018382928551712276),(2007,0.01856406183756792),(2008,0.01917091605291903),(2009,0.019668699343532815))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.019074894806125776, 0.018101740661219327, 0.018332290256034372, 0.01703113414914862,
            0.0165157932633882, 0.017486811309906522, 0.01801189939841712, 0.017721589288219524,
            0.016965563499255994, 0.017484206427070492, 0.01752032040491682, 0.018382928551712276,
            0.01856406183756792, 0.01917091605291903, 0.019668699343532815
        ])


def share_cc_sectoral_subfood_beverages_and_tobacco(x):
    """
    Real Name: b'share cc sectoral subfood beverages and tobacco'
    Original Eqn: b'([(1995,2009)-(0.023143221409336112,0.0321389816671635)],(1995,0.0321389816671635),(1996,0.02876498203026079),(1997,0.02814531333997819),(1998,0.027531214667705785),(1999,0.02874565191986845),\\\\ (2000,0.02788345999760771),(2001,0.02802430949192551),(2002,0.026795521737131983),(2003,0.02600865546252975),(2004,0.0238629158502632),\\\\ (2005,0.02330770485908382),(2006,0.023629186745957292),(2007,0.02356268466844763),(2008,0.023143221409336112),(2009,0.023638735612115706))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.0321389816671635, 0.02876498203026079, 0.02814531333997819, 0.027531214667705785,
            0.02874565191986845, 0.02788345999760771, 0.02802430949192551, 0.026795521737131983,
            0.02600865546252975, 0.0238629158502632, 0.02330770485908382, 0.023629186745957292,
            0.02356268466844763, 0.023143221409336112, 0.023638735612115706
        ])


def share_cc_sectoral_subtextiles_and_textile_products(x):
    """
    Real Name: b'share cc sectoral subtextiles and textile products'
    Original Eqn: b'([(1995,2009)-(0.005124370728697409,0.008385489965815875)],(1995,0.008385489965815875),(1996,0.007825063986088282),(1997,0.007651438290957927),(1998,0.0074916774298229),(1999,0.0065129555117770625),\\\\ (2000,0.006447661322563113),(2001,0.00606430460937917),(2002,0.005883481200538257),(2003,0.005318456094464006),(2004,0.005508273168393984),\\\\ (2005,0.005124370728697409),(2006,0.005360769244134405),(2007,0.005676448056192027),(2008,0.005897454007932367),(2009,0.005910777608613948))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.008385489965815875, 0.007825063986088282, 0.007651438290957927, 0.0074916774298229,
            0.0065129555117770625, 0.006447661322563113, 0.00606430460937917, 0.005883481200538257,
            0.005318456094464006, 0.005508273168393984, 0.005124370728697409, 0.005360769244134405,
            0.005676448056192027, 0.005897454007932367, 0.005910777608613948
        ])


def share_cc_sectoral_subleather_leather_and_footwear(x):
    """
    Real Name: b'share cc sectoral subleather leather and footwear'
    Original Eqn: b'([(1995,2009)-(0.0008843018128007417,0.0012340222421751328)],(1995,0.0012340222421751328),(1996,0.001143608757867767),(1997,0.0010819449533878667),(1998,0.0010508849725526389),(1999,0.0009647149390711795),\\\\ (2000,0.0009573791517385931),(2001,0.0011008752744973995),(2002,0.00102773596644666),(2003,0.0009999533655333415),(2004,0.0008843018128007417),\\\\ (2005,0.0009008914767220458),(2006,0.0009874610391665518),(2007,0.001067974870512249),(2008,0.001128960946128135),(2009,0.0011516930123566763))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.0012340222421751328, 0.001143608757867767, 0.0010819449533878667, 0.0010508849725526389,
        0.0009647149390711795, 0.0009573791517385931, 0.0011008752744973995, 0.00102773596644666,
        0.0009999533655333415, 0.0008843018128007417, 0.0009008914767220458, 0.0009874610391665518,
        0.001067974870512249, 0.001128960946128135, 0.0011516930123566763
    ])


def share_cc_sectoral_subwood_and_products_of_wood_and_cork(x):
    """
    Real Name: b'share cc sectoral subwood and products of wood and cork'
    Original Eqn: b'([(1995,2009)-(0.0024892388370459616,0.0036959103200494992)],(1995,0.0036959103200494992),(1996,0.003168228187107202),(1997,0.0033681335538219806),(1998,0.0032993092220650784),(1999,0.003328976784436948),\\\\ (2000,0.0031833806038531506),(2001,0.003120972846879468),(2002,0.0029739924497252965),(2003,0.003047707007696271),(2004,0.0030294902999746915),\\\\ (2005,0.0029438212130334035),(2006,0.002889431931536702),(2007,0.0029644037920589375),(2008,0.002754986281307624),(2009,0.0024892388370459616))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.0036959103200494992, 0.003168228187107202, 0.0033681335538219806, 0.0032993092220650784,
        0.003328976784436948, 0.0031833806038531506, 0.003120972846879468, 0.0029739924497252965,
        0.003047707007696271, 0.0030294902999746915, 0.0029438212130334035, 0.002889431931536702,
        0.0029644037920589375, 0.002754986281307624, 0.0024892388370459616
    ])


def share_cc_sectoral_subpulp_paper_printing_and_publishing(x):
    """
    Real Name: b'share cc sectoral subpulp paper printing and publishing'
    Original Eqn: b'([(1995,2009)-(0.011602358740517354,0.016674768573807)],(1995,0.016163481867476657),(1996,0.015985164553250452),(1997,0.015469435942986349),(1998,0.015498594516144475),(1999,0.016674768573807),\\\\ (2000,0.016252638998880308),(2001,0.015313901877892746),(2002,0.01488650915592016),(2003,0.01395986569583055),(2004,0.014257477691022605),\\\\ (2005,0.014401523761225027),(2006,0.012986096954139215),(2007,0.0124551897341896),(2008,0.011948904045551118),(2009,0.011602358740517354))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.016163481867476657, 0.015985164553250452, 0.015469435942986349, 0.015498594516144475,
            0.016674768573807, 0.016252638998880308, 0.015313901877892746, 0.01488650915592016,
            0.01395986569583055, 0.014257477691022605, 0.014401523761225027, 0.012986096954139215,
            0.0124551897341896, 0.011948904045551118, 0.011602358740517354
        ])


def share_cc_sectoral_subcoke_refined_petroleum_and_nuclear_fuel(x):
    """
    Real Name: b'share cc sectoral subcoke refined petroleum and nuclear fuel'
    Original Eqn: b'([(1995,2009)-(0.010670476406875505,0.01461178252401957)],(1995,0.012911021621846729),(1996,0.012746459305556141),(1997,0.013633527821310106),(1998,0.01359401984732537),(1999,0.011047742103384642),\\\\ (2000,0.01184315652889293),(2001,0.012897411493201982),(2002,0.010670476406875505),(2003,0.01269276226211265),(2004,0.01461178252401957),\\\\ (2005,0.014107919688276434),(2006,0.01221847799976767),(2007,0.011732689862703299),(2008,0.011403344506130163),(2009,0.012538492970489885))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.012911021621846729, 0.012746459305556141, 0.013633527821310106, 0.01359401984732537,
            0.011047742103384642, 0.01184315652889293, 0.012897411493201982, 0.010670476406875505,
            0.01269276226211265, 0.01461178252401957, 0.014107919688276434, 0.01221847799976767,
            0.011732689862703299, 0.011403344506130163, 0.012538492970489885
        ])


def share_cc_sectoral_subchemicals_and_chemical_products(x):
    """
    Real Name: b'share cc sectoral subchemicals and chemical products'
    Original Eqn: b'([(1995,2009)-(0.026181380294071407,0.02853635359715732)],(1995,0.02819783641479054),(1996,0.027479288796231974),(1997,0.02786846743794753),(1998,0.02644383447466471),(1999,0.02724529339079687),\\\\ (2000,0.02624198821499827),(2001,0.026181380294071407),(2002,0.027621052672975967),(2003,0.027145511225085295),(2004,0.027529056528481182),\\\\ (2005,0.02654123196808494),(2006,0.027374754999941013),(2007,0.02853635359715732),(2008,0.026591622864745416),(2009,0.026767398009174638))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.02819783641479054, 0.027479288796231974, 0.02786846743794753, 0.02644383447466471,
            0.02724529339079687, 0.02624198821499827, 0.026181380294071407, 0.027621052672975967,
            0.027145511225085295, 0.027529056528481182, 0.02654123196808494, 0.027374754999941013,
            0.02853635359715732, 0.026591622864745416, 0.026767398009174638
        ])


def share_cc_sectoral_subrubber_and_plastics(x):
    """
    Real Name: b'share cc sectoral subrubber and plastics'
    Original Eqn: b'([(1995,2009)-(0.005981566587978499,0.008081105585862648)],(1995,0.007458520759641382),(1996,0.007931836698194594),(1997,0.007929950133355458),(1998,0.008081105585862648),(1999,0.008032743025468464),\\\\ (2000,0.007568253072198993),(2001,0.007055808764641412),(2002,0.007271392284354727),(2003,0.007325513751262952),(2004,0.007354678780301329),\\\\ (2005,0.00721820304143248),(2006,0.007005938695842652),(2007,0.007367759456408463),(2008,0.006715065354087769),(2009,0.005981566587978499))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.007458520759641382, 0.007931836698194594, 0.007929950133355458, 0.008081105585862648,
            0.008032743025468464, 0.007568253072198993, 0.007055808764641412, 0.007271392284354727,
            0.007325513751262952, 0.007354678780301329, 0.00721820304143248, 0.007005938695842652,
            0.007367759456408463, 0.006715065354087769, 0.005981566587978499
        ])


def share_cc_sectoral_subother_non_metalic_mineral(x):
    """
    Real Name: b'share cc sectoral subother non metalic mineral'
    Original Eqn: b'([(1995,2009)-(0.007857115260071003,0.009909953771210725)],(1995,0.009909953771210725),(1996,0.009083085220471966),(1997,0.009359182092185262),(1998,0.008776038855268316),(1999,0.00880951349188728),\\\\ (2000,0.008519134385357204),(2001,0.008295573751607464),(2002,0.00811510007249048),(2003,0.008044587776070526),(2004,0.008372147189461823),\\\\ (2005,0.00843120193208617),(2006,0.008877056370860618),(2007,0.009110566920957066),(2008,0.008719093392781017),(2009,0.007857115260071003))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.009909953771210725, 0.009083085220471966, 0.009359182092185262, 0.008776038855268316,
            0.00880951349188728, 0.008519134385357204, 0.008295573751607464, 0.00811510007249048,
            0.008044587776070526, 0.008372147189461823, 0.00843120193208617, 0.008877056370860618,
            0.009110566920957066, 0.008719093392781017, 0.007857115260071003
        ])


def share_cc_sectoral_subbasic_metals_and_fabricated_metal(x):
    """
    Real Name: b'share cc sectoral subbasic metals and fabricated metal'
    Original Eqn: b'([(1995,2009)-(0.019502770478668816,0.026498741926502475)],(1995,0.025876033237234416),(1996,0.02409241566665906),(1997,0.024628932833239057),(1998,0.022608432090721487),(1999,0.021563891804170753),\\\\ (2000,0.02274463504803309),(2001,0.02031556538542781),(2002,0.019502770478668816),(2003,0.020279731161448163),(2004,0.022241883350801843),\\\\ (2005,0.023391355493617486),(2006,0.024932615017941605),(2007,0.026498741926502475),(2008,0.026394927346192133),(2009,0.02322394279397999))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.025876033237234416, 0.02409241566665906, 0.024628932833239057, 0.022608432090721487,
            0.021563891804170753, 0.02274463504803309, 0.02031556538542781, 0.019502770478668816,
            0.020279731161448163, 0.022241883350801843, 0.023391355493617486, 0.024932615017941605,
            0.026498741926502475, 0.026394927346192133, 0.02322394279397999
        ])


def share_cc_sectoral_submachinery_nec(x):
    """
    Real Name: b'share cc sectoral submachinery nec'
    Original Eqn: b'([(1995,2009)-(0.011661210055884422,0.01970770333839225)],(1995,0.014059658337226175),(1996,0.013719072372734927),(1997,0.01393565671152066),(1998,0.014096065919260808),(1999,0.012396757811239846),\\\\ (2000,0.013555513896937202),(2001,0.012458152299629186),(2002,0.011661210055884422),(2003,0.012266401752284125),(2004,0.013881604122856654),\\\\ (2005,0.015158824782683553),(2006,0.016585895022378887),(2007,0.01761172852089743),(2008,0.01970770333839225),(2009,0.017516772760582607))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.014059658337226175, 0.013719072372734927, 0.01393565671152066, 0.014096065919260808,
            0.012396757811239846, 0.013555513896937202, 0.012458152299629186, 0.011661210055884422,
            0.012266401752284125, 0.013881604122856654, 0.015158824782683553, 0.016585895022378887,
            0.01761172852089743, 0.01970770333839225, 0.017516772760582607
        ])


def share_cc_sectoral_subelectrical_and_optical_equipment(x):
    """
    Real Name: b'share cc sectoral subelectrical and optical equipment'
    Original Eqn: b'([(1995,2009)-(0.02211615042750115,0.04779006980275797)],(1995,0.02211615042750115),(1996,0.0240724320246828),(1997,0.026879516079187753),(1998,0.027491298893010396),(1999,0.030775962613424947),\\\\ (2000,0.03820207983468018),(2001,0.027047047895312745),(2002,0.027906514442787748),(2003,0.03409009944486845),(2004,0.038641933859760995),\\\\ (2005,0.04129830740111195),(2006,0.043431988576497264),(2007,0.04706087316905279),(2008,0.04779006980275797),(2009,0.045176727210357176))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.02211615042750115, 0.0240724320246828, 0.026879516079187753, 0.027491298893010396,
            0.030775962613424947, 0.03820207983468018, 0.027047047895312745, 0.027906514442787748,
            0.03409009944486845, 0.038641933859760995, 0.04129830740111195, 0.043431988576497264,
            0.04706087316905279, 0.04779006980275797, 0.045176727210357176
        ])


def share_cc_sectoral_subtransport_equipment(x):
    """
    Real Name: b'share cc sectoral subtransport equipment'
    Original Eqn: b'([(1995,2009)-(0.016071504276576817,0.02068709274361638)],(1995,0.01611580684921055),(1996,0.016071504276576817),(1997,0.016269187914275323),(1998,0.017384791192130742),(1999,0.018521083745308402),\\\\ (2000,0.017510845619079896),(2001,0.01750544095862379),(2002,0.019580343726275647),(2003,0.017519592188039654),(2004,0.017505942568556376),\\\\ (2005,0.018029153530819162),(2006,0.018884900139347384),(2007,0.02068709274361638),(2008,0.018734791973192437),(2009,0.017331831349728804))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.01611580684921055, 0.016071504276576817, 0.016269187914275323, 0.017384791192130742,
            0.018521083745308402, 0.017510845619079896, 0.01750544095862379, 0.019580343726275647,
            0.017519592188039654, 0.017505942568556376, 0.018029153530819162, 0.018884900139347384,
            0.02068709274361638, 0.018734791973192437, 0.017331831349728804
        ])


def share_cc_sectoral_submanufacturing_nec_recycling(x):
    """
    Real Name: b'share cc sectoral submanufacturing nec recycling'
    Original Eqn: b'([(1995,2009)-(0.004136770188653854,0.006430083963705986)],(1995,0.004136770188653854),(1996,0.004246578649526875),(1997,0.004325414800652897),(1998,0.004465400376368324),(1999,0.0042640218851806785),\\\\ (2000,0.004382284365538603),(2001,0.004177586302183998),(2002,0.0044474981883766305),(2003,0.0044519849138500095),(2004,0.005381816335691264),\\\\ (2005,0.006430083963705986),(2006,0.006026154324366072),(2007,0.0058666091075879),(2008,0.005829000303710761),(2009,0.005502366671535831))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.004136770188653854, 0.004246578649526875, 0.004325414800652897, 0.004465400376368324,
        0.0042640218851806785, 0.004382284365538603, 0.004177586302183998, 0.0044474981883766305,
        0.0044519849138500095, 0.005381816335691264, 0.006430083963705986, 0.006026154324366072,
        0.0058666091075879, 0.005829000303710761, 0.005502366671535831
    ])


def share_cc_sectoral_subelectricity_gas_and_water_supply(x):
    """
    Real Name: b'share cc sectoral subelectricity gas and water supply'
    Original Eqn: b'([(1995,2009)-(0.038426723351002466,0.047066365445528786)],(1995,0.047066365445528786),(1996,0.04702297200735588),(1997,0.043770893328872754),(1998,0.043527249921124174),(1999,0.042248197518757455),\\\\ (2000,0.04144001516883796),(2001,0.03937928827045648),(2002,0.03954100227559819),(2003,0.03992084800226018),(2004,0.04122838142863999),\\\\ (2005,0.04124366752005908),(2006,0.03908474464960975),(2007,0.038426723351002466),(2008,0.03972970117195154),(2009,0.039340682954113484))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.047066365445528786, 0.04702297200735588, 0.043770893328872754, 0.043527249921124174,
            0.042248197518757455, 0.04144001516883796, 0.03937928827045648, 0.03954100227559819,
            0.03992084800226018, 0.04122838142863999, 0.04124366752005908, 0.03908474464960975,
            0.038426723351002466, 0.03972970117195154, 0.039340682954113484
        ])


def share_cc_sectoral_subconstruction(x):
    """
    Real Name: b'share cc sectoral subconstruction'
    Original Eqn: b'([(1995,2009)-(0.02490199946395865,0.032283292539891505)],(1995,0.032283292539891505),(1996,0.029711743968391505),(1997,0.02784947827139627),(1998,0.028342394795020702),(1999,0.027970268160605542),\\\\ (2000,0.025480331282401503),(2001,0.025832810595568145),(2002,0.025271920012836506),(2003,0.02490199946395865),(2004,0.026099648636237482),\\\\ (2005,0.026303515770198044),(2006,0.027156725944773412),(2007,0.026060042489757677),(2008,0.025878577266468014),(2009,0.025758496017789966))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.032283292539891505, 0.029711743968391505, 0.02784947827139627, 0.028342394795020702,
            0.027970268160605542, 0.025480331282401503, 0.025832810595568145, 0.025271920012836506,
            0.02490199946395865, 0.026099648636237482, 0.026303515770198044, 0.027156725944773412,
            0.026060042489757677, 0.025878577266468014, 0.025758496017789966
        ])


def share_cc_sectoral_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
        x):
    """
    Real Name: b'share cc sectoral subsale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'
    Original Eqn: b'([(1995,2009)-(0.00579608344911891,0.009551079848249643)],(1995,0.009551079848249643),(1996,0.00903374834872022),(1997,0.009173380221024536),(1998,0.009522368180830508),(1999,0.009262104773787541),\\\\ (2000,0.008679969036621738),(2001,0.008024579623124155),(2002,0.007668346382009341),(2003,0.007234417099582751),(2004,0.007793426044455792),\\\\ (2005,0.0077206884013198435),(2006,0.00787785920922557),(2007,0.007519391350279477),(2008,0.006816306866714831),(2009,0.00579608344911891))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.009551079848249643, 0.00903374834872022, 0.009173380221024536, 0.009522368180830508,
            0.009262104773787541, 0.008679969036621738, 0.008024579623124155, 0.007668346382009341,
            0.007234417099582751, 0.007793426044455792, 0.0077206884013198435, 0.00787785920922557,
            0.007519391350279477, 0.006816306866714831, 0.00579608344911891
        ])


def share_cc_sectoral_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
        x):
    """
    Real Name: b'share cc sectoral subwholesale trade and commissions trade except of motor vehicles and motorcycles'
    Original Eqn: b'([(1995,2009)-(0.06748267878929118,0.08680986189833101)],(1995,0.06748267878929118),(1996,0.06872416518698367),(1997,0.07397466130108132),(1998,0.07759140573182152),(1999,0.0790311572976072),\\\\ (2000,0.07895106157594772),(2001,0.08358153667209856),(2002,0.08046215105242577),(2003,0.08057597818003052),(2004,0.08366266458872629),\\\\ (2005,0.08459099239634021),(2006,0.08197165939884506),(2007,0.08438846586604647),(2008,0.0837852429770754),(2009,0.08680986189833101))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.06748267878929118, 0.06872416518698367, 0.07397466130108132, 0.07759140573182152,
            0.0790311572976072, 0.07895106157594772, 0.08358153667209856, 0.08046215105242577,
            0.08057597818003052, 0.08366266458872629, 0.08459099239634021, 0.08197165939884506,
            0.08438846586604647, 0.0837852429770754, 0.08680986189833101
        ])


def share_cc_sectoral_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
        x):
    """
    Real Name: b'share cc sectoral subretail trade except of motor vehicles and motorcycles repair of household goods'
    Original Eqn: b'([(1995,2009)-(0.03600442411878235,0.04802528865820533)],(1995,0.03997245896306118),(1996,0.043218689413549206),(1997,0.04418452831060235),(1998,0.04431907265956516),(1999,0.04453363331100283),\\\\ (2000,0.04423144754730959),(2001,0.04719982136870136),(2002,0.04802528865820533),(2003,0.046326157202964964),(2004,0.043729995596854115),\\\\ (2005,0.04365355366137524),(2006,0.04447043011858734),(2007,0.04115812502638437),(2008,0.037186956214448466),(2009,0.03600442411878235))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.03997245896306118, 0.043218689413549206, 0.04418452831060235, 0.04431907265956516,
            0.04453363331100283, 0.04423144754730959, 0.04719982136870136, 0.04802528865820533,
            0.046326157202964964, 0.043729995596854115, 0.04365355366137524, 0.04447043011858734,
            0.04115812502638437, 0.037186956214448466, 0.03600442411878235
        ])


def share_cc_sectoral_subhotels_and_restaurants(x):
    """
    Real Name: b'share cc sectoral subhotels and restaurants'
    Original Eqn: b'([(1995,2009)-(0.01617662855110026,0.019375033321432044)],(1995,0.01617662855110026),(1996,0.017674065016558355),(1997,0.018149583857362074),(1998,0.018880821695584853),(1999,0.019187506494702862),\\\\ (2000,0.01848919255326852),(2001,0.018801788372633084),(2002,0.019375033321432044),(2003,0.01894584982699591),(2004,0.018775261769920393),\\\\ (2005,0.018685354294381163),(2006,0.019167548759844704),(2007,0.01817645780586637),(2008,0.017594543932584812),(2009,0.01729384088477041))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.01617662855110026, 0.017674065016558355, 0.018149583857362074, 0.018880821695584853,
            0.019187506494702862, 0.01848919255326852, 0.018801788372633084, 0.019375033321432044,
            0.01894584982699591, 0.018775261769920393, 0.018685354294381163, 0.019167548759844704,
            0.01817645780586637, 0.017594543932584812, 0.01729384088477041
        ])


def share_cc_sectoral_subinland_transport(x):
    """
    Real Name: b'share cc sectoral subinland transport'
    Original Eqn: b'([(1995,2009)-(0.016899900875868307,0.021253625676560958)],(1995,0.021253625676560958),(1996,0.01757328059423465),(1997,0.017533477095097345),(1998,0.01708335113402725),(1999,0.016899900875868307),\\\\ (2000,0.017573466333478917),(2001,0.0184060737777463),(2002,0.017573394156884907),(2003,0.01752725282216478),(2004,0.017674037253620118),\\\\ (2005,0.01775614429616209),(2006,0.01790638924580825),(2007,0.01823776170799223),(2008,0.018692217055157924),(2009,0.017259316371031952))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.021253625676560958, 0.01757328059423465, 0.017533477095097345, 0.01708335113402725,
            0.016899900875868307, 0.017573466333478917, 0.0184060737777463, 0.017573394156884907,
            0.01752725282216478, 0.017674037253620118, 0.01775614429616209, 0.01790638924580825,
            0.01823776170799223, 0.018692217055157924, 0.017259316371031952
        ])


def share_cc_sectoral_subwater_transport(x):
    """
    Real Name: b'share cc sectoral subwater transport'
    Original Eqn: b'([(1995,2009)-(0.0019363175510912095,0.006485775212538603)],(1995,0.00237930634975559),(1996,0.0019363175510912095),(1997,0.002174967262959381),(1998,0.002445572534255821),(1999,0.0025031485102358655),\\\\ (2000,0.0027778550421596786),(2001,0.003017307520741118),(2002,0.003093341832727418),(2003,0.0033244710209141787),(2004,0.0040514983108206415),\\\\ (2005,0.004701125070493769),(2006,0.004946960268778851),(2007,0.005842127228333952),(2008,0.006485775212538603),(2009,0.006004459143157512))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.00237930634975559, 0.0019363175510912095, 0.002174967262959381, 0.002445572534255821,
        0.0025031485102358655, 0.0027778550421596786, 0.003017307520741118, 0.003093341832727418,
        0.0033244710209141787, 0.0040514983108206415, 0.004701125070493769, 0.004946960268778851,
        0.005842127228333952, 0.006485775212538603, 0.006004459143157512
    ])


def share_cc_sectoral_subair_transport(x):
    """
    Real Name: b'share cc sectoral subair transport'
    Original Eqn: b'([(1995,2009)-(0.0016726602837590257,0.004985152824590062)],(1995,0.004166442318428751),(1996,0.004725321799396147),(1997,0.004985152824590062),(1998,0.004397007883431417),(1999,0.003784892111621302),\\\\ (2000,0.003282607584440268),(2001,0.0016726602837590257),(2002,0.0021694690555328824),(2003,0.0030221235882390467),(2004,0.0035400602398324727),\\\\ (2005,0.0034155250192160567),(2006,0.0036206051079420323),(2007,0.0033596968339394905),(2008,0.002817936173472771),(2009,0.0023199328516766635))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.004166442318428751, 0.004725321799396147, 0.004985152824590062, 0.004397007883431417,
        0.003784892111621302, 0.003282607584440268, 0.0016726602837590257, 0.0021694690555328824,
        0.0030221235882390467, 0.0035400602398324727, 0.0034155250192160567, 0.0036206051079420323,
        0.0033596968339394905, 0.002817936173472771, 0.0023199328516766635
    ])


def share_cc_sectoral_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
        x):
    """
    Real Name: b'share cc sectoral subother supporting and auxiliary transport activities activities of travel agencies'
    Original Eqn: b'([(1995,2009)-(0.005691227831434559,0.00905327322223547)],(1995,0.006778853572000129),(1996,0.006899084212642317),(1997,0.0074114575956901255),(1998,0.0071853424807637525),(1999,0.006714489302199572),\\\\ (2000,0.005691227831434559),(2001,0.006036424779551169),(2002,0.006585132573263568),(2003,0.006975233725391538),(2004,0.007547036142033878),\\\\ (2005,0.008121570535510506),(2006,0.008817806913968915),(2007,0.00905327322223547),(2008,0.00899968325699662),(2009,0.007461986150000285))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.006778853572000129, 0.006899084212642317, 0.0074114575956901255, 0.0071853424807637525,
        0.006714489302199572, 0.005691227831434559, 0.006036424779551169, 0.006585132573263568,
        0.006975233725391538, 0.007547036142033878, 0.008121570535510506, 0.008817806913968915,
        0.00905327322223547, 0.00899968325699662, 0.007461986150000285
    ])


def share_cc_sectoral_subpost_and_telecommunications(x):
    """
    Real Name: b'share cc sectoral subpost and telecommunications'
    Original Eqn: b'([(1995,2009)-(0.029057579895015385,0.050155005310443236)],(1995,0.029057579895015385),(1996,0.03160549275661185),(1997,0.0322243006026475),(1998,0.03388806015063383),(1999,0.03591291947337805),\\\\ (2000,0.03791737172900439),(2001,0.0413838152640967),(2002,0.04456758387526782),(2003,0.04571097051257681),(2004,0.046742194825149755),\\\\ (2005,0.04604476002740335),(2006,0.045529587353981896),(2007,0.04443512758226394),(2008,0.046731061459096244),(2009,0.050155005310443236))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.029057579895015385, 0.03160549275661185, 0.0322243006026475, 0.03388806015063383,
            0.03591291947337805, 0.03791737172900439, 0.0413838152640967, 0.04456758387526782,
            0.04571097051257681, 0.046742194825149755, 0.04604476002740335, 0.045529587353981896,
            0.04443512758226394, 0.046731061459096244, 0.050155005310443236
        ])


def share_cc_sectoral_subfinancial_intermediation(x):
    """
    Real Name: b'share cc sectoral subfinancial intermediation'
    Original Eqn: b'([(1995,2009)-(0.07263386823827737,0.08477781706234779)],(1995,0.07273569540483278),(1996,0.07263386823827737),(1997,0.07524361994554456),(1998,0.07469807199082727),(1999,0.07674454224960045),\\\\ (2000,0.07811355669530828),(2001,0.08063039557217784),(2002,0.0847256373038466),(2003,0.08363368144151041),(2004,0.07945056175518507),\\\\ (2005,0.07873728904029753),(2006,0.08477781706234779),(2007,0.08274482610250618),(2008,0.07932373057747709),(2009,0.08359235909013855))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.07273569540483278, 0.07263386823827737, 0.07524361994554456, 0.07469807199082727,
            0.07674454224960045, 0.07811355669530828, 0.08063039557217784, 0.0847256373038466,
            0.08363368144151041, 0.07945056175518507, 0.07873728904029753, 0.08477781706234779,
            0.08274482610250618, 0.07932373057747709, 0.08359235909013855
        ])


def share_cc_sectoral_subreal_estate_activities(x):
    """
    Real Name: b'share cc sectoral subreal estate activities'
    Original Eqn: b'([(1995,2009)-(0.2057033512412547,0.24111520591885524)],(1995,0.24111520591885524),(1996,0.23937803446193515),(1997,0.23358810685060818),(1998,0.2301581651449089),(1999,0.227948775874283),\\\\ (2000,0.2256644107843945),(2001,0.22877553857089394),(2002,0.22367874012980918),(2003,0.22277622638960762),(2004,0.21590454968628062),\\\\ (2005,0.2127113153994352),(2006,0.20839896270047154),(2007,0.2057033512412547),(2008,0.2094927971640791),(2009,0.21569041217322732))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.24111520591885524, 0.23937803446193515, 0.23358810685060818, 0.2301581651449089,
            0.227948775874283, 0.2256644107843945, 0.22877553857089394, 0.22367874012980918,
            0.22277622638960762, 0.21590454968628062, 0.2127113153994352, 0.20839896270047154,
            0.2057033512412547, 0.2094927971640791, 0.21569041217322732
        ])


def share_cc_sectoral_subrenting_od_meq_and_other_business_activities(x):
    """
    Real Name: b'share cc sectoral subrenting od meq and other business activities'
    Original Eqn: b'([(1995,2009)-(0.06450830258564538,0.07522583494958558)],(1995,0.06459602118620193),(1996,0.06905001380524613),(1997,0.06821043531529368),(1998,0.07288181835394007),(1999,0.06817971257110544),\\\\ (2000,0.06450830258564538),(2001,0.06454304884231093),(2002,0.06721206423359273),(2003,0.0667362552587201),(2004,0.06682921530945202),\\\\ (2005,0.06977231435038858),(2006,0.06861132671855419),(2007,0.07189063738602502),(2008,0.07522583494958558),(2009,0.06706870740084765))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.06459602118620193, 0.06905001380524613, 0.06821043531529368, 0.07288181835394007,
            0.06817971257110544, 0.06450830258564538, 0.06454304884231093, 0.06721206423359273,
            0.0667362552587201, 0.06682921530945202, 0.06977231435038858, 0.06861132671855419,
            0.07189063738602502, 0.07522583494958558, 0.06706870740084765
        ])


def share_cc_sectoral_subpublic_admin_and_defence_compulsory_social_security(x):
    """
    Real Name: b'share cc sectoral subpublic admin and defence compulsory social security'
    Original Eqn: b'([(1995,2009)-(0.026470257950723577,0.03826439070447431)],(1995,0.03788162091421682),(1996,0.03783224147960273),(1997,0.03701298705578099),(1998,0.03567177066473178),(1999,0.038192407838542546),\\\\ (2000,0.038012695658412206),(2001,0.03826439070447431),(2002,0.03718222874310394),(2003,0.03554916941396557),(2004,0.030954803248098826),\\\\ (2005,0.029375582837865413),(2006,0.029483320594616752),(2007,0.026471578950167513),(2008,0.026470257950723577),(2009,0.0318911564104782))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.03788162091421682, 0.03783224147960273, 0.03701298705578099, 0.03567177066473178,
            0.038192407838542546, 0.038012695658412206, 0.03826439070447431, 0.03718222874310394,
            0.03554916941396557, 0.030954803248098826, 0.029375582837865413, 0.029483320594616752,
            0.026471578950167513, 0.026470257950723577, 0.0318911564104782
        ])


def share_cc_sectoral_subeducation(x):
    """
    Real Name: b'share cc sectoral subeducation'
    Original Eqn: b'([(1995,2009)-(0.004847058955568252,0.006956181200851506)],(1995,0.006956181200851506),(1996,0.005875669601914743),(1997,0.0056678531809458655),(1998,0.006082054444355262),(1999,0.006127937515178124),\\\\ (2000,0.005803650449733586),(2001,0.005767438285737494),(2002,0.0059783876907612225),(2003,0.006127107081716946),(2004,0.005054519325957908),\\\\ (2005,0.005130009752766508),(2006,0.004847058955568252),(2007,0.0051597539362335815),(2008,0.005669951603168591),(2009,0.005755993947517754))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        0.006956181200851506, 0.005875669601914743, 0.0056678531809458655, 0.006082054444355262,
        0.006127937515178124, 0.005803650449733586, 0.005767438285737494, 0.0059783876907612225,
        0.006127107081716946, 0.005054519325957908, 0.005130009752766508, 0.004847058955568252,
        0.0051597539362335815, 0.005669951603168591, 0.005755993947517754
    ])


def share_cc_sectoral_subhealth_and_social_work(x):
    """
    Real Name: b'share cc sectoral subhealth and social work'
    Original Eqn: b'([(1995,2009)-(0.026615770620869734,0.03422943890008811)],(1995,0.027445053332828068),(1996,0.029160160403648494),(1997,0.02821173656516283),(1998,0.026615770620869734),(1999,0.0273539727857798),\\\\ (2000,0.02662583643780871),(2001,0.028142691231517622),(2002,0.029297619075475182),(2003,0.02941131460970212),(2004,0.0301810591244524),\\\\ (2005,0.031490932282237226),(2006,0.031232041065638115),(2007,0.02959403415633184),(2008,0.02988511373451547),(2009,0.03422943890008811))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.027445053332828068, 0.029160160403648494, 0.02821173656516283, 0.026615770620869734,
            0.0273539727857798, 0.02662583643780871, 0.028142691231517622, 0.029297619075475182,
            0.02941131460970212, 0.0301810591244524, 0.031490932282237226, 0.031232041065638115,
            0.02959403415633184, 0.02988511373451547, 0.03422943890008811
        ])


def share_cc_sectoral_subother_community_social_and_persona_services(x):
    """
    Real Name: b'share cc sectoral subother community social and persona services'
    Original Eqn: b'([(1995,2009)-(0.023811135179053207,0.029323662796849222)],(1995,0.028727661644533248),(1996,0.02841304632967128),(1997,0.027082293603525917),(1998,0.027431107643009052),(1999,0.029323662796849222),\\\\ (2000,0.029033478768738467),(2001,0.027866881374139507),(2002,0.028477811794828094),(2003,0.027741634257114605),(2004,0.02643605715958021),\\\\ (2005,0.025304071077875273),(2006,0.023855398102559003),(2007,0.02385049848422552),(2008,0.023811135179053207),(2009,0.024622633133622788))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.028727661644533248, 0.02841304632967128, 0.027082293603525917, 0.027431107643009052,
            0.029323662796849222, 0.029033478768738467, 0.027866881374139507, 0.028477811794828094,
            0.027741634257114605, 0.02643605715958021, 0.025304071077875273, 0.023855398102559003,
            0.02385049848422552, 0.023811135179053207, 0.024622633133622788
        ])


def share_cc_sectoral_subprivate_households_with_employed_persons(x):
    """
    Real Name: b'share cc sectoral subprivate households with employed persons'
    Original Eqn: b'([(1995,2009)-(2.224100933757743e-05,3.676247669895163e-05)],(1995,2.242410254852871e-05),(1996,2.224100933757743e-05),(1997,2.3182796720525097e-05),(1998,2.2308822775885723e-05),(1999,2.2884702082035344e-05),\\\\ (2000,2.4357628368450084e-05),(2001,2.586345147694192e-05),(2002,2.6477256965928314e-05),(2003,2.6730466120345426e-05),(2004,2.769540121679224e-05),\\\\ (2005,2.994530061908033e-05),(2006,3.0137690959046645e-05),(2007,3.283954762959073e-05),(2008,3.3795758345553865e-05),(2009,3.676247669895163e-05))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            2.242410254852871e-05, 2.224100933757743e-05, 2.3182796720525097e-05,
            2.2308822775885723e-05, 2.2884702082035344e-05, 2.4357628368450084e-05,
            2.586345147694192e-05, 2.6477256965928314e-05, 2.6730466120345426e-05,
            2.769540121679224e-05, 2.994530061908033e-05, 3.0137690959046645e-05,
            3.283954762959073e-05, 3.3795758345553865e-05, 3.676247669895163e-05
        ])


def historic_pes_waste_ej(x):
    """
    Real Name: b'historic pes waste ej'
    Original Eqn: b'([(1995,2014)-(0.9254440700000001,2.11879269)],(1995,0.94403359),(1996,0.9254440700000001),(1997,0.96264396),(1998,0.97404579),(1999,1.0843876399999999),\\\\ (2000,1.20351759),(2001,1.1960921400000002),(2002,1.24529466),(2003,1.24459098),(2004,1.29713973),\\\\ (2005,1.34430356),(2006,1.4583756600000002),(2007,1.48302204),(2008,1.51246124),(2009,1.57780579),\\\\ (2010,1.8249681400000002),(2011,1.96140481),(2012,2.0159873999999998),(2013,2.07606288),(2014,2.11879269))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.94403359, 0.9254440700000001, 0.96264396, 0.97404579, 1.0843876399999999, 1.20351759,
        1.1960921400000002, 1.24529466, 1.24459098, 1.29713973, 1.34430356, 1.4583756600000002,
        1.48302204, 1.51246124, 1.57780579, 1.8249681400000002, 1.96140481, 2.0159873999999998,
        2.07606288, 2.11879269
    ])


def table_hist_capacity_res_elec_subhydro(x):
    """
    Real Name: b'table hist capacity res elec subhydro'
    Original Eqn: b'([(1995,2015)-(0.624490030142469,1.0915964000000002)],(1995,0.624490030142469),(1996,0.634070032104449),(1997,0.648500038817058),(1998,0.657040027472228),(1999,0.674990036363238),\\\\ (2000,0.688220036952962),(2001,0.698510036448025),(2002,0.71313002660836),(2003,0.731790042351271),(2004,0.750370028846775),\\\\ (2005,0.770490041148841),(2006,0.792870048368696),(2007,0.82019003092096),(2008,0.852160046683773),(2009,0.8859300529104),\\\\ (2010,0.919750045926543),(2011,0.946530044441139),(2012,0.976190046399544),(2013,1.0204726000000002),(2014,1.0567436000000001),\\\\ (2015,1.0915964000000002))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014, 2015
    ], [
        0.624490030142469, 0.634070032104449, 0.648500038817058, 0.657040027472228,
        0.674990036363238, 0.688220036952962, 0.698510036448025, 0.71313002660836,
        0.731790042351271, 0.750370028846775, 0.770490041148841, 0.792870048368696,
        0.82019003092096, 0.852160046683773, 0.8859300529104, 0.919750045926543, 0.946530044441139,
        0.976190046399544, 1.0204726000000002, 1.0567436000000001, 1.0915964000000002
    ])


def table_hist_capacity_res_elec_subgeot_elec(x):
    """
    Real Name: b'table hist capacity res elec subgeot elec'
    Original Eqn: b'([(1995,2015)-(0.007384619419926325,0.0118479)],(1995,0.007384619419926325),(1996,0.007564460131224811),(1997,0.007748680578241711),(1998,0.007937387422504466),(1999,0.008130689923113103),\\\\ (2000,0.008328700000000001),(2001,0.0080097),(2002,0.0082019),(2003,0.008357799999999999),(2004,0.0083085),\\\\ (2005,0.008689700000000002),(2006,0.008921799999999999),(2007,0.0091435),(2008,0.0094635),(2009,0.0099034),\\\\ (2010,0.0101248),(2011,0.010015399999999999),(2012,0.010482),(2013,0.010787),(2014,0.0114575),\\\\ (2015,0.0118479))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014, 2015
    ], [
        0.007384619419926325, 0.007564460131224811, 0.007748680578241711, 0.007937387422504466,
        0.008130689923113103, 0.008328700000000001, 0.0080097, 0.0082019, 0.008357799999999999,
        0.0083085, 0.008689700000000002, 0.008921799999999999, 0.0091435, 0.0094635, 0.0099034,
        0.0101248, 0.010015399999999999, 0.010482, 0.010787, 0.0114575, 0.0118479
    ])


def table_hist_capacity_res_elec_subsolid_bioe_elec(x):
    """
    Real Name: b'table hist capacity res elec subsolid bioe elec'
    Original Eqn: b'([(1995,2015)-(0.02075556130242758,0.08402219999999999)],(1995,0.02075556130242758),(1996,0.022343248327393452),(1997,0.024052384734166706),(1998,0.025892260736819418),(1999,0.02787287720003564),\\\\ (2000,0.030005),(2001,0.0318786),(2002,0.033744300000000005),(2003,0.0367185),(2004,0.0392421),\\\\ (2005,0.0394749),(2006,0.0430149),(2007,0.0451547),(2008,0.0488584),(2009,0.054362),\\\\ (2010,0.0588526),(2011,0.062469699999999996),(2012,0.06715460000000001),(2013,0.07378739999999999),(2014,0.078254),\\\\ (2015,0.08402219999999999))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014, 2015
    ], [
        0.02075556130242758, 0.022343248327393452, 0.024052384734166706, 0.025892260736819418,
        0.02787287720003564, 0.030005, 0.0318786, 0.033744300000000005, 0.0367185, 0.0392421,
        0.0394749, 0.0430149, 0.0451547, 0.0488584, 0.054362, 0.0588526, 0.062469699999999996,
        0.06715460000000001, 0.07378739999999999, 0.078254, 0.08402219999999999
    ])


def table_hist_capacity_res_elec_suboceanic(x):
    """
    Real Name: b'table hist capacity res elec suboceanic'
    Original Eqn: b'([(1995,2015)-(0.00020760889860613118,0.0005334)],(1995,0.00020760889860613118),(1996,0.000218011155677108),(1997,0.00022893461850032943),(1998,0.0002404054021231664),(1999,0.0002524509300890995),\\\\ (2000,0.00026510000000000005),(2001,0.00026510000000000005),(2002,0.00026510000000000005),(2003,0.00026510000000000005),(2004,0.00026510000000000005),\\\\ (2005,0.00026510000000000005),(2006,0.00026510000000000005),(2007,0.0002674),(2008,0.0002674),(2009,0.00026910000000000004),\\\\ (2010,0.00027069999999999997),(2011,0.0005251),(2012,0.0005277000000000001),(2013,0.0005265),(2014,0.0005273),\\\\ (2015,0.0005334))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014, 2015
    ], [
        0.00020760889860613118, 0.000218011155677108, 0.00022893461850032943,
        0.0002404054021231664, 0.0002524509300890995, 0.00026510000000000005,
        0.00026510000000000005, 0.00026510000000000005, 0.00026510000000000005,
        0.00026510000000000005, 0.00026510000000000005, 0.00026510000000000005, 0.0002674,
        0.0002674, 0.00026910000000000004, 0.00027069999999999997, 0.0005251,
        0.0005277000000000001, 0.0005265, 0.0005273, 0.0005334
    ])


def table_hist_capacity_res_elec_subwind_onshore(x):
    """
    Real Name: b'table hist capacity res elec subwind onshore'
    Original Eqn: b'([(1995,2015)-(0.00455706227539308,0.4036673)],(1995,0.00455706227539308),(1996,0.005947976066351176),(1997,0.007763426775385634),(1998,0.010132992235415647),(1999,0.013225800231482635),\\\\ (2000,0.0172626),(2001,0.0238921),(2002,0.0306214),(2003,0.038160599999999996),(2004,0.046517699999999995),\\\\ (2005,0.057833),(2006,0.0723973),(2007,0.09245880000000001),(2008,0.1182237),(2009,0.147983),\\\\ (2010,0.1795401),(2011,0.21826189999999998),(2012,0.26633959999999995),(2013,0.2961245),(2014,0.341731),\\\\ (2015,0.4036673))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014, 2015
    ], [
        0.00455706227539308, 0.005947976066351176, 0.007763426775385634, 0.010132992235415647,
        0.013225800231482635, 0.0172626, 0.0238921, 0.0306214, 0.038160599999999996,
        0.046517699999999995, 0.057833, 0.0723973, 0.09245880000000001, 0.1182237, 0.147983,
        0.1795401, 0.21826189999999998, 0.26633959999999995, 0.2961245, 0.341731, 0.4036673
    ])


def table_hist_capacity_res_elec_subwind_offshore(x):
    """
    Real Name: b'table hist capacity res elec subwind offshore'
    Original Eqn: b'([(1995,2015)-(4.77710420476937e-06,0.011636700000000002)],(1995,4.77710420476937e-06),(1996,8.101151096781961e-06),(1997,1.3738165691962337e-05),(1998,2.329757763125582e-05),(1999,3.9508704120663585e-05),\\\\ (2000,6.7e-05),(2001,7.7e-05),(2002,0.000237),(2003,0.0005072),(2004,0.0005974),\\\\ (2005,0.0006843999999999999),(2006,0.0008834),(2007,0.0010939),(2008,0.0014419),(2009,0.0021587),\\\\ (2010,0.0031435),(2011,0.0037905),(2012,0.005374100000000001),(2013,0.0075502),(2014,0.0084937),\\\\ (2015,0.011636700000000002))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014, 2015
    ], [
        4.77710420476937e-06, 8.101151096781961e-06, 1.3738165691962337e-05, 2.329757763125582e-05,
        3.9508704120663585e-05, 6.7e-05, 7.7e-05, 0.000237, 0.0005072, 0.0005974,
        0.0006843999999999999, 0.0008834, 0.0010939, 0.0014419, 0.0021587, 0.0031435, 0.0037905,
        0.005374100000000001, 0.0075502, 0.0084937, 0.011636700000000002
    ])


def table_hist_capacity_res_elec_subsolar_pv(x):
    """
    Real Name: b'table hist capacity res elec subsolar pv'
    Original Eqn: b'([(1995,2015)-(3.921043766748761e-05,0.2192966)],(1995,3.921043766748761e-05),(1996,7.173827876311545e-05),(1997,0.00013125027278544562),(1998,0.00024013168984911632),(1999,0.0004393379704745763),\\\\ (2000,0.0008037999999999999),(2001,0.0010863),(2002,0.0014352),(2003,0.0019645),(2004,0.0030528),\\\\ (2005,0.0045056),(2006,0.006083399999999999),(2007,0.0086421),(2008,0.0145796),(2009,0.0224319),\\\\ (2010,0.0387925),(2011,0.0693767),(2012,0.098947),(2013,0.1353989),(2014,0.1718955),\\\\ (2015,0.2192966))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014, 2015
    ], [
        3.921043766748761e-05, 7.173827876311545e-05, 0.00013125027278544562,
        0.00024013168984911632, 0.0004393379704745763, 0.0008037999999999999, 0.0010863, 0.0014352,
        0.0019645, 0.0030528, 0.0045056, 0.006083399999999999, 0.0086421, 0.0145796, 0.0224319,
        0.0387925, 0.0693767, 0.098947, 0.1353989, 0.1718955, 0.2192966
    ])


def table_hist_capacity_res_elec_subcsp(x):
    """
    Real Name: b'table hist capacity res elec subcsp'
    Original Eqn: b'([(1995,2015)-(0.000341,0.00469302)],(1995,0.00035380000000000003),(1996,0.00035380000000000003),(1997,0.00035380000000000003),(1998,0.00035380000000000003),(1999,0.00035380000000000003),\\\\ (2000,0.00035380000000000003),(2001,0.00035380000000000003),(2002,0.00035380000000000003),(2003,0.00035380000000000003),(2004,0.00035380000000000003),\\\\ (2005,0.00035380000000000003),(2006,0.000341),(2007,0.000424),(2008,0.00048039999999999997),(2009,0.0008077000000000001),\\\\ (2010,0.00116082),(2011,0.00167582),(2012,0.00253307),(2013,0.00328092),(2014,0.004338020000000001),\\\\ (2015,0.00469302))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014, 2015
    ], [
        0.00035380000000000003, 0.00035380000000000003, 0.00035380000000000003,
        0.00035380000000000003, 0.00035380000000000003, 0.00035380000000000003,
        0.00035380000000000003, 0.00035380000000000003, 0.00035380000000000003,
        0.00035380000000000003, 0.00035380000000000003, 0.000341, 0.000424, 0.00048039999999999997,
        0.0008077000000000001, 0.00116082, 0.00167582, 0.00253307, 0.00328092,
        0.004338020000000001, 0.00469302
    ])


def losses_in_charcoal_plants_ej(x):
    """
    Real Name: b'losses in charcoal plants ej'
    Original Eqn: b'([(1995,2014)-(2.1130467299999998,3.5232924299999997)],(1995,2.1227642400000004),(1996,2.1262310400000004),(1997,2.1231064699999997),(1998,2.1130467299999998),(1999,2.1735678),\\\\ (2000,2.18822825),(2001,2.2560478),(2002,2.3403727099999996),(2003,2.4201021199999997),(2004,2.54406673),\\\\ (2005,2.6353136),(2006,2.7016235600000007),(2007,2.83974232),(2008,2.86682404),(2009,2.78902384),\\\\ (2010,2.92604662),(2011,3.0703874300000003),(2012,3.5232924299999997),(2013,3.4736966899999997),(2014,3.4703146300000003))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        2.1227642400000004, 2.1262310400000004, 2.1231064699999997, 2.1130467299999998, 2.1735678,
        2.18822825, 2.2560478, 2.3403727099999996, 2.4201021199999997, 2.54406673, 2.6353136,
        2.7016235600000007, 2.83974232, 2.86682404, 2.78902384, 2.92604662, 3.0703874300000003,
        3.5232924299999997, 3.4736966899999997, 3.4703146300000003
    ])


def historic_share_chp_plants_gas(x):
    """
    Real Name: b'historic share chp plants gas'
    Original Eqn: b'([(1995,2014)-(0.5224061688803091,0.6518959474484941)],(1995,0.542607444618554),(1996,0.5269313193785189),(1997,0.5382532583200468),(1998,0.5297249478665147),(1999,0.5460827573768788),\\\\ (2000,0.5224061688803091),(2001,0.5411877199764002),(2002,0.5577070041319593),(2003,0.562342979935354),(2004,0.5613705825714098),\\\\ (2005,0.5857040300373348),(2006,0.5890026793248733),(2007,0.5983201717080272),(2008,0.5900688532905982),(2009,0.5816026263018895),\\\\ (2010,0.5969505315378193),(2011,0.6059246889618498),(2012,0.6191394159419781),(2013,0.6468415798082748),(2014,0.6518959474484941))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.542607444618554, 0.5269313193785189, 0.5382532583200468, 0.5297249478665147,
        0.5460827573768788, 0.5224061688803091, 0.5411877199764002, 0.5577070041319593,
        0.562342979935354, 0.5613705825714098, 0.5857040300373348, 0.5890026793248733,
        0.5983201717080272, 0.5900688532905982, 0.5816026263018895, 0.5969505315378193,
        0.6059246889618498, 0.6191394159419781, 0.6468415798082748, 0.6518959474484941
    ])


def historic_share_liquids_for_heat_plants(x):
    """
    Real Name: b'historic share liquids for heat plants'
    Original Eqn: b'([(1995,2014)-(0.06478078155386392,0.18497727967085997)],(1995,0.18497727967085997),(1996,0.17191646447570985),(1997,0.1330532764569175),(1998,0.15161781088000842),(1999,0.13531842227897417),\\\\ (2000,0.12023891330325187),(2001,0.12010733048107938),(2002,0.10499688074615252),(2003,0.10170168137771297),(2004,0.08909757858316623),\\\\ (2005,0.08211320924276294),(2006,0.07546615577930145),(2007,0.07135237951220018),(2008,0.06937841924029578),(2009,0.07213434112645382),\\\\ (2010,0.07775801992149381),(2011,0.06902303071848384),(2012,0.06498032662251463),(2013,0.06478078155386392),(2014,0.06752954750266457))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.18497727967085997, 0.17191646447570985, 0.1330532764569175, 0.15161781088000842,
        0.13531842227897417, 0.12023891330325187, 0.12010733048107938, 0.10499688074615252,
        0.10170168137771297, 0.08909757858316623, 0.08211320924276294, 0.07546615577930145,
        0.07135237951220018, 0.06937841924029578, 0.07213434112645382, 0.07775801992149381,
        0.06902303071848384, 0.06498032662251463, 0.06478078155386392, 0.06752954750266457
    ])


def historic_share_chp_plants_oil(x):
    """
    Real Name: b'historic share chp plants oil'
    Original Eqn: b'([(1995,2014)-(0.032844869257742916,0.11787701564444898)],(1995,0.09862928248379321),(1996,0.11787701564444898),(1997,0.10608252906539808),(1998,0.10858090585253756),(1999,0.08882230533385095),\\\\ (2000,0.07562621902637809),(2001,0.0734600656866448),(2002,0.06506856593351103),(2003,0.06329937880802863),(2004,0.07127638319113186),\\\\ (2005,0.07390231230724596),(2006,0.07582583414512277),(2007,0.06819575385574247),(2008,0.06266601654129239),(2009,0.06998905828978902),\\\\ (2010,0.05073704681719738),(2011,0.05157446046900763),(2012,0.04861084829791663),(2013,0.033462519012298),(2014,0.032844869257742916))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.09862928248379321, 0.11787701564444898, 0.10608252906539808, 0.10858090585253756,
        0.08882230533385095, 0.07562621902637809, 0.0734600656866448, 0.06506856593351103,
        0.06329937880802863, 0.07127638319113186, 0.07390231230724596, 0.07582583414512277,
        0.06819575385574247, 0.06266601654129239, 0.06998905828978902, 0.05073704681719738,
        0.05157446046900763, 0.04861084829791663, 0.033462519012298, 0.032844869257742916
    ])


def historic_biogas_pes(x):
    """
    Real Name: b'historic biogas pes'
    Original Eqn: b'([(1995,2014)-(0.13135264000000002,1.26714942)],(1995,0.13135264000000002),(1996,0.14522501999999998),(1997,0.16244876),(1998,0.17106013),(1999,0.25641764),\\\\ (2000,0.28492731),(2001,0.33951272),(2002,0.39872446),(2003,0.41243782),(2004,0.45342303),\\\\ (2005,0.49843029),(2006,0.53353154),(2007,0.6900384399999999),(2008,0.79629398),(2009,0.90816046),\\\\ (2010,0.8367312299999999),(2011,0.98802405),(2012,1.0866051),(2013,1.19932464),(2014,1.26714942))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.13135264000000002, 0.14522501999999998, 0.16244876, 0.17106013, 0.25641764, 0.28492731,
        0.33951272, 0.39872446, 0.41243782, 0.45342303, 0.49843029, 0.53353154, 0.6900384399999999,
        0.79629398, 0.90816046, 0.8367312299999999, 0.98802405, 1.0866051, 1.19932464, 1.26714942
    ])


def historic_pes_peat_ej(x):
    """
    Real Name: b'historic pes peat ej'
    Original Eqn: b'([(1995,2014)-(0.13753595999999998,0.23877885999999998)],(1995,0.22106789999999998),(1996,0.23877885999999998),(1997,0.22058298),(1998,0.19908862),(1999,0.17753217000000002),\\\\ (2000,0.16850551),(2001,0.18371079999999998),(2002,0.19475629),(2003,0.19557075),(2004,0.17127541000000002),\\\\ (2005,0.15939893),(2006,0.18059229999999998),(2007,0.18713522),(2008,0.17082508),(2009,0.15967739),\\\\ (2010,0.1799199),(2011,0.1704865),(2012,0.15029599),(2013,0.13919226),(2014,0.13753595999999998))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.22106789999999998, 0.23877885999999998, 0.22058298, 0.19908862, 0.17753217000000002,
        0.16850551, 0.18371079999999998, 0.19475629, 0.19557075, 0.17127541000000002, 0.15939893,
        0.18059229999999998, 0.18713522, 0.17082508, 0.15967739, 0.1799199, 0.1704865, 0.15029599,
        0.13919226, 0.13753595999999998
    ])


def efficiency_heat_oil_chp_plants(x):
    """
    Real Name: b'efficiency heat oil chp plants'
    Original Eqn: b'([(1995,2014)-(0.24249576844589016,0.3864604322008381)],(1995,0.3583416873580516),(1996,0.3864604322008381),(1997,0.3427001131428596),(1998,0.3426092425053806),(1999,0.2559985362733478),\\\\ (2000,0.27189087245527377),(2001,0.30978899425880957),(2002,0.2622427885462967),(2003,0.24249576844589016),(2004,0.2814351729755998),\\\\ (2005,0.29350979736335797),(2006,0.3169617343470768),(2007,0.3231319029553005),(2008,0.32732942509102475),(2009,0.3520069392931584),\\\\ (2010,0.31166079425216436),(2011,0.2791179408861372),(2012,0.26613174359788516),(2013,0.27197080023843734),(2014,0.2580529463443723))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.3583416873580516, 0.3864604322008381, 0.3427001131428596, 0.3426092425053806,
        0.2559985362733478, 0.27189087245527377, 0.30978899425880957, 0.2622427885462967,
        0.24249576844589016, 0.2814351729755998, 0.29350979736335797, 0.3169617343470768,
        0.3231319029553005, 0.32732942509102475, 0.3520069392931584, 0.31166079425216436,
        0.2791179408861372, 0.26613174359788516, 0.27197080023843734, 0.2580529463443723
    ])


def efficiency_elec_coal_chp_plants(x):
    """
    Real Name: b'efficiency elec coal chp plants'
    Original Eqn: b'([(1995,2014)-(0.26306888518464144,0.30761772840986873)],(1995,0.2720349999945255),(1996,0.26306888518464144),(1997,0.27545884097647594),(1998,0.2789107682797072),(1999,0.27789150432842147),\\\\ (2000,0.27881150074145433),(2001,0.27529653704292867),(2002,0.2751896064517859),(2003,0.28277916069267756),(2004,0.2832216768494038),\\\\ (2005,0.2842686028283118),(2006,0.28068849559240433),(2007,0.28915271943220666),(2008,0.30241506318388284),(2009,0.30167536009026713),\\\\ (2010,0.2979348686134844),(2011,0.2926626262217007),(2012,0.29278659243706345),(2013,0.29829300985708207),(2014,0.30761772840986873))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.2720349999945255, 0.26306888518464144, 0.27545884097647594, 0.2789107682797072,
        0.27789150432842147, 0.27881150074145433, 0.27529653704292867, 0.2751896064517859,
        0.28277916069267756, 0.2832216768494038, 0.2842686028283118, 0.28068849559240433,
        0.28915271943220666, 0.30241506318388284, 0.30167536009026713, 0.2979348686134844,
        0.2926626262217007, 0.29278659243706345, 0.29829300985708207, 0.30761772840986873
    ])


def efficiency_elec_gas_chp_plants(x):
    """
    Real Name: b'efficiency elec gas chp plants'
    Original Eqn: b'([(1995,2014)-(0.2666572241731881,0.3351515677147325)],(1995,0.26782295944824347),(1996,0.2666572241731881),(1997,0.26830320759173404),(1998,0.2738131863521139),(1999,0.2780196471160715),\\\\ (2000,0.3055205882931438),(2001,0.30845101322725493),(2002,0.3086933636483027),(2003,0.316047593938253),(2004,0.31760571304542445),\\\\ (2005,0.31705352904069145),(2006,0.3240026232130847),(2007,0.3279642160865447),(2008,0.32862834898119897),(2009,0.3336097590206972),\\\\ (2010,0.3351515677147325),(2011,0.3243356439411598),(2012,0.32476042746440104),(2013,0.31797643498814804),(2014,0.33154405356432026))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.26782295944824347, 0.2666572241731881, 0.26830320759173404, 0.2738131863521139,
        0.2780196471160715, 0.3055205882931438, 0.30845101322725493, 0.3086933636483027,
        0.316047593938253, 0.31760571304542445, 0.31705352904069145, 0.3240026232130847,
        0.3279642160865447, 0.32862834898119897, 0.3336097590206972, 0.3351515677147325,
        0.3243356439411598, 0.32476042746440104, 0.31797643498814804, 0.33154405356432026
    ])


def efficiency_elec_oil_chp_plants(x):
    """
    Real Name: b'efficiency elec oil chp plants'
    Original Eqn: b'([(1995,2014)-(0.2893579004394849,0.3605926738806412)],(1995,0.3605926738806412),(1996,0.3348333610288783),(1997,0.3466476498304344),(1998,0.3531299339587378),(1999,0.29737398934546155),\\\\ (2000,0.31012580512156696),(2001,0.32513162171457316),(2002,0.3418424504153948),(2003,0.3283762635470366),(2004,0.31172847731284714),\\\\ (2005,0.30438653224080414),(2006,0.29767818828797493),(2007,0.29991121932367),(2008,0.2993764831229446),(2009,0.300032598019261),\\\\ (2010,0.29242527982890654),(2011,0.2893579004394849),(2012,0.29758405532679544),(2013,0.3107288107229254),(2014,0.32993276951104356))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.3605926738806412, 0.3348333610288783, 0.3466476498304344, 0.3531299339587378,
        0.29737398934546155, 0.31012580512156696, 0.32513162171457316, 0.3418424504153948,
        0.3283762635470366, 0.31172847731284714, 0.30438653224080414, 0.29767818828797493,
        0.29991121932367, 0.2993764831229446, 0.300032598019261, 0.29242527982890654,
        0.2893579004394849, 0.29758405532679544, 0.3107288107229254, 0.32993276951104356
    ])


def efficiency_heat_gas_chp_plants(x):
    """
    Real Name: b'efficiency heat gas chp plants'
    Original Eqn: b'([(1995,2014)-(0.26852977690961327,0.34818197812029744)],(1995,0.34818197812029744),(1996,0.30658370588876055),(1997,0.29071150494278963),(1998,0.27992388078634095),(1999,0.2689321316194951),\\\\ (2000,0.2916261332435117),(2001,0.29242955417479993),(2002,0.289381470807263),(2003,0.2814273774503354),(2004,0.27495237777396736),\\\\ (2005,0.26980106264673176),(2006,0.2871855759202209),(2007,0.27965735655873114),(2008,0.2711157820652094),(2009,0.26852977690961327),\\\\ (2010,0.26853864364145363),(2011,0.26936552781846224),(2012,0.26897430848954873),(2013,0.27004646141898336),(2014,0.2843726348639607))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.34818197812029744, 0.30658370588876055, 0.29071150494278963, 0.27992388078634095,
        0.2689321316194951, 0.2916261332435117, 0.29242955417479993, 0.289381470807263,
        0.2814273774503354, 0.27495237777396736, 0.26980106264673176, 0.2871855759202209,
        0.27965735655873114, 0.2711157820652094, 0.26852977690961327, 0.26853864364145363,
        0.26936552781846224, 0.26897430848954873, 0.27004646141898336, 0.2843726348639607
    ])


def share_heat_com_chp_plants_nre_vs_nre_tot_heat_com_generation(x):
    """
    Real Name: b'share heat com chp plants nre vs nre tot heat com generation'
    Original Eqn: b'([(1995,2014)-(0.4410346921325672,0.48784484337985057)],(1995,0.47494035235993737),(1996,0.48784484337985057),(1997,0.48319453732010703),(1998,0.4689138621366646),(1999,0.45504898204107314),\\\\ (2000,0.4787622080599851),(2001,0.4767869618571136),(2002,0.47874893888354547),(2003,0.47529703503778065),(2004,0.477544401524363),\\\\ (2005,0.4599838057623242),(2006,0.4659217428645132),(2007,0.4655488531999236),(2008,0.46823780955770167),(2009,0.4600254701073876),\\\\ (2010,0.45474576456496724),(2011,0.44887567948184176),(2012,0.4410346921325672),(2013,0.44994734894394395),(2014,0.4547662603919192))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.47494035235993737, 0.48784484337985057, 0.48319453732010703, 0.4689138621366646,
        0.45504898204107314, 0.4787622080599851, 0.4767869618571136, 0.47874893888354547,
        0.47529703503778065, 0.477544401524363, 0.4599838057623242, 0.4659217428645132,
        0.4655488531999236, 0.46823780955770167, 0.4600254701073876, 0.45474576456496724,
        0.44887567948184176, 0.4410346921325672, 0.44994734894394395, 0.4547662603919192
    ])


def efficiency_heat_coal_chp_plants(x):
    """
    Real Name: b'efficiency heat coal chp plants'
    Original Eqn: b'([(1995,2014)-(0.2406045127607476,0.31110748223005136)],(1995,0.31110748223005136),(1996,0.27146068584931377),(1997,0.2800501070449751),(1998,0.2908126586324929),(1999,0.2831297492346078),\\\\ (2000,0.30852271504871565),(2001,0.30629958279337455),(2002,0.2992513065181298),(2003,0.2780742636093701),(2004,0.2829681290854686),\\\\ (2005,0.24566650306280705),(2006,0.2406045127607476),(2007,0.2438696178536268),(2008,0.25122846960658485),(2009,0.2689306835894877),\\\\ (2010,0.27212307003403136),(2011,0.26753189523710946),(2012,0.2645720057578548),(2013,0.24924363461171214),(2014,0.25692298720979917))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.31110748223005136, 0.27146068584931377, 0.2800501070449751, 0.2908126586324929,
        0.2831297492346078, 0.30852271504871565, 0.30629958279337455, 0.2992513065181298,
        0.2780742636093701, 0.2829681290854686, 0.24566650306280705, 0.2406045127607476,
        0.2438696178536268, 0.25122846960658485, 0.2689306835894877, 0.27212307003403136,
        0.26753189523710946, 0.2645720057578548, 0.24924363461171214, 0.25692298720979917
    ])


def historic_non_energy_use_subliquids(x):
    """
    Real Name: b'historic non energy use subliquids'
    Original Eqn: b'([(1995,2009)-(17.86474451,24.616445300000002)],(1995,17.86474451),(1996,18.642216100000002),(1997,19.669279510000003),(1998,19.482172170000002),(1999,20.12592009),\\\\ (2000,20.309394920000003),(2001,20.619444329999997),(2002,21.34137057),(2003,22.0610557),(2004,23.32966305),\\\\ (2005,23.355337600000002),(2006,24.137153670000004),(2007,24.616445300000002),(2008,23.63162834),(2009,23.839961539999997))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
    ], [
        17.86474451, 18.642216100000002, 19.669279510000003, 19.482172170000002, 20.12592009,
        20.309394920000003, 20.619444329999997, 21.34137057, 22.0610557, 23.32966305,
        23.355337600000002, 24.137153670000004, 24.616445300000002, 23.63162834, 23.839961539999997
    ])


def historic_non_energy_use_subsolids(x):
    """
    Real Name: b'historic non energy use subsolids'
    Original Eqn: b'([(1995,2009)-(0.68570774,1.78348197)],(1995,0.86732782),(1996,0.9033509599999999),(1997,0.81759914),(1998,0.74229678),(1999,0.68570774),\\\\ (2000,1.03101072),(2001,1.01775427),(2002,1.08015287),(2003,1.18593028),(2004,1.29226541),\\\\ (2005,1.4364099399999999),(2006,1.6726974399999999),(2007,1.7306662800000001),(2008,1.74080181),(2009,1.78348197))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.86732782, 0.9033509599999999, 0.81759914, 0.74229678, 0.68570774, 1.03101072,
            1.01775427, 1.08015287, 1.18593028, 1.29226541, 1.4364099399999999, 1.6726974399999999,
            1.7306662800000001, 1.74080181, 1.78348197
        ])


def historic_non_energy_use_subgases(x):
    """
    Real Name: b'historic non energy use subgases'
    Original Eqn: b'([(1995,2009)-(3.74572862,5.4843512)],(1995,3.74572862),(1996,3.75295893),(1997,4.03143292),(1998,4.05466539),(1999,4.17667242),\\\\ (2000,4.47201851),(2001,4.3420209199999995),(2002,4.3756594699999996),(2003,4.45160149),(2004,4.78613611),\\\\ (2005,5.14473235),(2006,5.00779145),(2007,5.3063370899999995),(2008,5.338537059999999),(2009,5.4843512))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            3.74572862, 3.75295893, 4.03143292, 4.05466539, 4.17667242, 4.47201851,
            4.3420209199999995, 4.3756594699999996, 4.45160149, 4.78613611, 5.14473235, 5.00779145,
            5.3063370899999995, 5.338537059999999, 5.4843512
        ])


def historic_non_energy_use_subelectricity(x):
    """
    Real Name: b'historic non energy use subelectricity'
    Original Eqn: b'([(1995,2009)-(0.001995,0.002009)],(1995,0.001995),(1996,0.001996),(1997,0.001997),(1998,0.001998),(1999,0.001999),\\\\ (2000,0.002),(2001,0.002001),(2002,0.002002),(2003,0.002003),(2004,0.002004),\\\\ (2005,0.002005),(2006,0.002006),(2007,0.002007),(2008,0.002008),(2009,0.002009))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.001995, 0.001996, 0.001997, 0.001998, 0.001999, 0.002, 0.002001, 0.002002, 0.002003,
            0.002004, 0.002005, 0.002006, 0.002007, 0.002008, 0.002009
        ])


def historic_non_energy_use_subheat(x):
    """
    Real Name: b'historic non energy use subheat'
    Original Eqn: b'([(1995,2009)-(0.001995,0.002009)],(1995,0.001995),(1996,0.001996),(1997,0.001997),(1998,0.001998),(1999,0.001999),\\\\ (2000,0.002),(2001,0.002001),(2002,0.002002),(2003,0.002003),(2004,0.002004),\\\\ (2005,0.002005),(2006,0.002006),(2007,0.002007),(2008,0.002008),(2009,0.002009))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x,
        [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
        [
            0.001995, 0.001996, 0.001997, 0.001998, 0.001999, 0.002, 0.002001, 0.002002, 0.002003,
            0.002004, 0.002005, 0.002006, 0.002007, 0.002008, 0.002009
        ])


def efficiency_liquids_for_heat_plants(x):
    """
    Real Name: b'efficiency liquids for heat plants'
    Original Eqn: b'([(1995,2014)-(0.7866970642224647,0.923745042449277)],(1995,0.923745042449277),(1996,0.8363533334993),(1997,0.8318533392156451),(1998,0.8343775097644487),(1999,0.8449037487785805),\\\\ (2000,0.8134700348415264),(2001,0.8315091058175587),(2002,0.8036477473316663),(2003,0.8199626156663135),(2004,0.8201391471763312),\\\\ (2005,0.830453125951232),(2006,0.8510030575113863),(2007,0.8534313700543216),(2008,0.8527114298309938),(2009,0.8308203086018318),\\\\ (2010,0.8312887451419698),(2011,0.831416361961128),(2012,0.8371918262743113),(2013,0.8177248627892834),(2014,0.7866970642224647))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.923745042449277, 0.8363533334993, 0.8318533392156451, 0.8343775097644487,
        0.8449037487785805, 0.8134700348415264, 0.8315091058175587, 0.8036477473316663,
        0.8199626156663135, 0.8201391471763312, 0.830453125951232, 0.8510030575113863,
        0.8534313700543216, 0.8527114298309938, 0.8308203086018318, 0.8312887451419698,
        0.831416361961128, 0.8371918262743113, 0.8177248627892834, 0.7866970642224647
    ])


def efficiency_coal_for_heat_plants(x):
    """
    Real Name: b'efficiency coal for heat plants'
    Original Eqn: b'([(1995,2014)-(0.665985886065352,0.8347276195018529)],(1995,0.8347276195018529),(1996,0.7939170408846971),(1997,0.8075329657040736),(1998,0.7985649421904794),(1999,0.8053657541377044),\\\\ (2000,0.733731426164544),(2001,0.7535839368782363),(2002,0.7799860116948372),(2003,0.69841143160776),(2004,0.7051976957278331),\\\\ (2005,0.7227781675786922),(2006,0.7195061580692983),(2007,0.7293959273179971),(2008,0.7378841063284353),(2009,0.7364423437396291),\\\\ (2010,0.7004937762675217),(2011,0.7112918920827271),(2012,0.665985886065352),(2013,0.7079178145750791),(2014,0.7145485392606492))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.8347276195018529, 0.7939170408846971, 0.8075329657040736, 0.7985649421904794,
        0.8053657541377044, 0.733731426164544, 0.7535839368782363, 0.7799860116948372,
        0.69841143160776, 0.7051976957278331, 0.7227781675786922, 0.7195061580692983,
        0.7293959273179971, 0.7378841063284353, 0.7364423437396291, 0.7004937762675217,
        0.7112918920827271, 0.665985886065352, 0.7079178145750791, 0.7145485392606492
    ])


def efficiency_gases_for_heat_plants(x):
    """
    Real Name: b'efficiency gases for heat plants'
    Original Eqn: b'([(1995,2014)-(0.7302838157453234,0.9002705165704274)],(1995,0.9002705165704274),(1996,0.798015478374507),(1997,0.8265508524517888),(1998,0.8513851809893292),(1999,0.8366292510284139),\\\\ (2000,0.8071606916492732),(2001,0.8075260241858225),(2002,0.8116671100413593),(2003,0.7803729904585283),(2004,0.8291140201011076),\\\\ (2005,0.8331308600977195),(2006,0.8581487641371625),(2007,0.8638647108245096),(2008,0.8652630305943033),(2009,0.8470379015860756),\\\\ (2010,0.8354220854903446),(2011,0.8235722289925171),(2012,0.7992649323212949),(2013,0.7349857411765203),(2014,0.7302838157453234))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.9002705165704274, 0.798015478374507, 0.8265508524517888, 0.8513851809893292,
        0.8366292510284139, 0.8071606916492732, 0.8075260241858225, 0.8116671100413593,
        0.7803729904585283, 0.8291140201011076, 0.8331308600977195, 0.8581487641371625,
        0.8638647108245096, 0.8652630305943033, 0.8470379015860756, 0.8354220854903446,
        0.8235722289925171, 0.7992649323212949, 0.7349857411765203, 0.7302838157453234
    ])


def invest_cost_res_elec_subhydro(x):
    """
    Real Name: b'invest cost res elec subhydro'
    Original Eqn: b'([(1995,2100)-(2.214812479617349,2.697076638765082)],(1995,2.214812479617349),(2007,2.214812479617349),(2015,2.344999239047722),(2020,2.4170522882922056),(2030,2.5259506468094357),\\\\ (2040,2.6168357430155447),(2050,2.697076638765082),(2060,2.697076638765082),(2070,2.697076638765082),(2080,2.697076638765082),\\\\ (2090,2.697076638765082),(2100,2.697076638765082))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 2007, 2015, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            2.214812479617349, 2.214812479617349, 2.344999239047722, 2.4170522882922056,
            2.5259506468094357, 2.6168357430155447, 2.697076638765082, 2.697076638765082,
            2.697076638765082, 2.697076638765082, 2.697076638765082, 2.697076638765082
        ])


def invest_cost_res_elec_subgeot_elec(x):
    """
    Real Name: b'invest cost res elec subgeot elec'
    Original Eqn: b'([(1995,2100)-(4.254405044026525,20.381187520382646)],(1995,20.381187520382646),(2007,10.190593760191323),(2015,8.9042830742472),(2020,7.519718230242417),(2030,5.9361887161648),\\\\ (2040,4.947096858354169),(2050,4.254405044026525),(2060,4.254405044026525),(2070,4.254405044026525),(2080,4.254405044026525),\\\\ (2090,4.254405044026525),(2100,4.254405044026525))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 2007, 2015, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            20.381187520382646, 10.190593760191323, 8.9042830742472, 7.519718230242417,
            5.9361887161648, 4.947096858354169, 4.254405044026525, 4.254405044026525,
            4.254405044026525, 4.254405044026525, 4.254405044026525, 4.254405044026525
        ])


def invest_cost_res_elec_subsolid_bioe_elec(x):
    """
    Real Name: b'invest cost res elec subsolid bioe elec'
    Original Eqn: b'([(1995,2100)-(1.904493097075769,4.614670290248939)],(1995,4.614670290248939),(2007,2.3073351451244695),(2015,2.0076599630394605),(2020,1.9937406239808673),(2030,1.9462511142515488),\\\\ (2040,1.923325144037395),(2050,1.904493097075769),(2060,1.904493097075769),(2070,1.904493097075769),(2080,1.904493097075769),\\\\ (2090,1.904493097075769),(2100,1.904493097075769))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 2007, 2015, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            4.614670290248939, 2.3073351451244695, 2.0076599630394605, 1.9937406239808673,
            1.9462511142515488, 1.923325144037395, 1.904493097075769, 1.904493097075769,
            1.904493097075769, 1.904493097075769, 1.904493097075769, 1.904493097075769
        ])


def invest_cost_res_elec_suboceanic(x):
    """
    Real Name: b'invest cost res elec suboceanic'
    Original Eqn: b'([(1995,2100)-(1.3141493640613107,11.816700076095225)],(1995,11.816700076095225),(2007,5.908350038047613),(2015,3.1867098597673653),(2020,2.297509729318404),(2030,1.7669372757908466),\\\\ (2040,1.4754499402108923),(2050,1.3141493640613107),(2060,1.3141493640613107),(2070,1.3141493640613107),(2080,1.3141493640613107),\\\\ (2090,1.3141493640613107),(2100,1.3141493640613107))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 2007, 2015, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            11.816700076095225, 5.908350038047613, 3.1867098597673653, 2.297509729318404,
            1.7669372757908466, 1.4754499402108923, 1.3141493640613107, 1.3141493640613107,
            1.3141493640613107, 1.3141493640613107, 1.3141493640613107, 1.3141493640613107
        ])


def invest_cost_res_elec_subwind_onshore(x):
    """
    Real Name: b'invest cost res elec subwind onshore'
    Original Eqn: b'([(1995,2100)-(0.7319934775519076,2.4727296445265785)],(1995,2.4727296445265785),(2007,1.2363648222632893),(2015,1.0275747363843895),(2020,0.8171470812044787),(2030,0.7794829872812261),\\\\ (2040,0.7418188933579735),(2050,0.7319934775519076),(2060,0.7319934775519076),(2070,0.7319934775519076),(2080,0.7319934775519076),\\\\ (2090,0.7319934775519076),(2100,0.7319934775519076))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 2007, 2015, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            2.4727296445265785, 1.2363648222632893, 1.0275747363843895, 0.8171470812044787,
            0.7794829872812261, 0.7418188933579735, 0.7319934775519076, 0.7319934775519076,
            0.7319934775519076, 0.7319934775519076, 0.7319934775519076, 0.7319934775519076
        ])


def invest_cost_res_elec_subwind_offshore(x):
    """
    Real Name: b'invest cost res elec subwind offshore'
    Original Eqn: b'([(1995,2100)-(1.0685139689096637,4.74895097293184)],(1995,4.74895097293184),(2007,2.37447548646592),(2015,1.801326231112077),(2020,1.2609283617784537),(2030,1.1954255897380146),\\\\ (2040,1.088983585172301),(2050,1.0685139689096637),(2060,1.0685139689096637),(2070,1.0685139689096637),(2080,1.0685139689096637),\\\\ (2090,1.0685139689096637),(2100,1.0685139689096637))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 2007, 2015, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            4.74895097293184, 2.37447548646592, 1.801326231112077, 1.2609283617784537,
            1.1954255897380146, 1.088983585172301, 1.0685139689096637, 1.0685139689096637,
            1.0685139689096637, 1.0685139689096637, 1.0685139689096637, 1.0685139689096637
        ])


def invest_cost_res_elec_subsolar_pv(x):
    """
    Real Name: b'invest cost res elec subsolar pv'
    Original Eqn: b'([(1995,2100)-(0.6230951190346776,6.134334601587128)],(1995,6.134334601587128),(2007,3.067167300793564),(2015,2.137027937819328),(2020,1.4541615392977496),(2030,0.8408918360691379),\\\\ (2040,0.6427459506468093),(2050,0.6230951190346776),(2060,0.6230951190346776),(2070,0.6230951190346776),(2080,0.6230951190346776),\\\\ (2090,0.6230951190346776),(2100,0.6230951190346776))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 2007, 2015, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            6.134334601587128, 3.067167300793564, 2.137027937819328, 1.4541615392977496,
            0.8408918360691379, 0.6427459506468093, 0.6230951190346776, 0.6230951190346776,
            0.6230951190346776, 0.6230951190346776, 0.6230951190346776, 0.6230951190346776
        ])


def invest_cost_res_elec_subcsp(x):
    """
    Real Name: b'invest cost res elec subcsp'
    Original Eqn: b'([(1995,2100)-(3.406144146102837,11.872377432329598)],(1995,11.872377432329598),(2007,5.936188716164799),(2015,4.56554321121861),(2020,4.129949777149689),(2030,3.4904789651049017),\\\\ (2040,3.438895532123056),(2050,3.406144146102837),(2060,3.406144146102837),(2070,3.406144146102837),(2080,3.406144146102837),\\\\ (2090,3.406144146102837),(2100,3.406144146102837))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 2007, 2015, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            11.872377432329598, 5.936188716164799, 4.56554321121861, 4.129949777149689,
            3.4904789651049017, 3.438895532123056, 3.406144146102837, 3.406144146102837,
            3.406144146102837, 3.406144146102837, 3.406144146102837, 3.406144146102837
        ])


def table_max_extraction_uranium_user_defined(x):
    """
    Real Name: b'table max extraction uranium user defined'
    Original Eqn: b'([(0,14500)-(0.0,169.474)],(0,0.0),(500,29.4861),(1000,56.0597),(1500,77.0),(2000,94.7098),\\\\ (2500,111.198),(3000,124.131),(3500,136.26),(4000,147.073),(4500,154.041),\\\\ (5000,160.5),(5500,165.566),(6000,167.496),(6500,169.176),(7000,169.474),\\\\ (7500,169.474),(8000,169.474),(8500,169.474),(9000,169.474),(9500,169.474),\\\\ (10000,169.474),(10500,169.474),(11000,169.474),(11500,169.474),(12000,169.474),\\\\ (12500,169.474),(13000,169.474),(13500,169.474),(14000,169.474),(14500,169.474))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000,
        14500
    ], [
        0.0, 29.4861, 56.0597, 77.0, 94.7098, 111.198, 124.131, 136.26, 147.073, 154.041, 160.5,
        165.566, 167.496, 169.176, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474,
        169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474
    ])


def user_defined_extraction_growth_unconv_gas(x):
    """
    Real Name: b'user defined extraction growth unconv gas'
    Original Eqn: b'([(2015,2100)-(0.02,0.19)],(2015,0.19),(2020,0.18),(2025,0.17),(2030,0.16),(2035,0.15),\\\\ (2040,0.14),(2045,0.13),(2050,0.12),(2055,0.11),(2060,0.1),\\\\ (2065,0.09),(2070,0.08),(2075,0.07),(2080,0.06),(2085,0.05),\\\\ (2090,0.04),(2095,0.03),(2100,0.02))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        2015, 2020, 2025, 2030, 2035, 2040, 2045, 2050, 2055, 2060, 2065, 2070, 2075, 2080, 2085,
        2090, 2095, 2100
    ], [
        0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.1, 0.09, 0.08, 0.07, 0.06, 0.05,
        0.04, 0.03, 0.02
    ])


def user_defined_extraction_growth_unconv_oil(x):
    """
    Real Name: b'user defined extraction growth unconv oil'
    Original Eqn: b'([(2015,2100)-(0,0)],(2015,0),(2020,0),(2025,0),(2030,0),(2035,0),\\\\ (2040,0),(2045,0),(2050,0),(2055,0),(2060,0),\\\\ (2065,0),(2070,0),(2075,0),(2080,0),(2085,0),\\\\ (2090,0),(2095,0),(2100,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        2015, 2020, 2025, 2030, 2035, 2040, 2045, 2050, 2055, 2060, 2065, 2070, 2075, 2080, 2085,
        2090, 2095, 2100
    ], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])


def historic_unconv_oil(x):
    """
    Real Name: b'historic unconv oil'
    Original Eqn: b'([(1990,2012)-(0.8042547447027982,10.105037981577686)],(1990,0.8042547447027982),(1991,0.8410083449405368),(1992,0.882574107072071),(1993,0.9251795264521996),(1994,0.9725192749523464),\\\\ (1995,1.0602575075341525),(1996,1.1056776788632727),(1997,1.2903463301151419),(1998,1.4172025337438179),(1999,1.4737016614421428),\\\\ (2000,2.6459843451365654),(2001,2.7048717825313453),(2002,3.129671545010238),(2003,3.4697200909205494),(2004,3.9555142957287224),\\\\ (2005,3.9560890176996315),(2006,4.200681334685477),(2007,4.568217289793923),(2008,5.212758598196126),(2009,5.557878988219476),\\\\ (2010,6.383971244410107),(2011,7.882661254058065),(2012,10.105037981577686))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
        2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012
    ], [
        0.8042547447027982, 0.8410083449405368, 0.882574107072071, 0.9251795264521996,
        0.9725192749523464, 1.0602575075341525, 1.1056776788632727, 1.2903463301151419,
        1.4172025337438179, 1.4737016614421428, 2.6459843451365654, 2.7048717825313453,
        3.129671545010238, 3.4697200909205494, 3.9555142957287224, 3.9560890176996315,
        4.200681334685477, 4.568217289793923, 5.212758598196126, 5.557878988219476,
        6.383971244410107, 7.882661254058065, 10.105037981577686
    ])


def historic_unconv_gas(x):
    """
    Real Name: b'historic unconv gas'
    Original Eqn: b'([(1990,2012)-(0.38917863237784056,13.461287001815634)],(1990,0.38917863237784056),(1991,0.5687418653410531),(1992,0.7882043095790647),(1993,1.0097858800546946),(1994,1.1442239446187303),\\\\ (1995,1.2779344700159663),(1996,1.3548112305831623),(1997,1.4597823428573315),(1998,1.640969796322726),(1999,1.6869119403665676),\\\\ (2000,1.7427730974322593),(2001,1.9657612858624163),(2002,2.0760554776445383),(2003,2.2113588514111604),(2004,2.448984753192105),\\\\ (2005,2.6410048917620728),(2006,3.011593523318122),(2007,3.6728311149610593),(2008,4.893861654707023),(2009,5.979963799647268),\\\\ (2010,8.601989803490744),(2011,11.335682793297288),(2012,13.461287001815634))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
        2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012
    ], [
        0.38917863237784056, 0.5687418653410531, 0.7882043095790647, 1.0097858800546946,
        1.1442239446187303, 1.2779344700159663, 1.3548112305831623, 1.4597823428573315,
        1.640969796322726, 1.6869119403665676, 1.7427730974322593, 1.9657612858624163,
        2.0760554776445383, 2.2113588514111604, 2.448984753192105, 2.6410048917620728,
        3.011593523318122, 3.6728311149610593, 4.893861654707023, 5.979963799647268,
        8.601989803490744, 11.335682793297288, 13.461287001815634
    ])


def historic_pop(x):
    """
    Real Name: b'historic pop'
    Original Eqn: b
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014, 2015, 2016
    ], [
        5709757338.0, 5792568347.0, 5875398158.0, 5957237460.0, 6038067278.0, 6118075293.0,
        6197638117.0, 6276824417.882873, 6356259573.898927, 6436346997.991372, 6517020798.243966,
        6598421257.484986, 6680423046.990929, 6763745673.295534, 6847214549.110201,
        6930656699.362227, 7012843635.357816, 7097400665.077233, 7182860114.610083,
        7268986175.739162, 7355220411.68203, 7442135578.0
    ])


def balancing_costs_ref(x):
    """
    Real Name: b'balancing costs ref'
    Original Eqn: b'([(0.0,0.9999999999999999)-(0.0,4.549383409156905)],(0.0,0.0),(0.1,1.516461136385635),(0.2,3.03292227277127),(0.30000000000000004,4.549383409156905),(0.4,4.549383409156905),\\\\ (0.5,4.549383409156905),(0.6,4.549383409156905),(0.7,4.549383409156905),(0.7999999999999999,4.549383409156905),(0.8999999999999999,4.549383409156905),\\\\ (0.9999999999999999,4.549383409156905))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0.0, 0.1, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6, 0.7, 0.7999999999999999,
        0.8999999999999999, 0.9999999999999999
    ], [
        0.0, 1.516461136385635, 3.03292227277127, 4.549383409156905, 4.549383409156905,
        4.549383409156905, 4.549383409156905, 4.549383409156905, 4.549383409156905,
        4.549383409156905, 4.549383409156905
    ])


def historic_gtl_production(x):
    """
    Real Name: b'historic gtl production'
    Original Eqn: b'([(1990,2015)-(0.0,0.31618224)],(1990,0.06346222),(1991,0.058381449999999994),(1992,0.06496829),(1993,0.06506953),(1994,0.06767736),\\\\ (1995,0.064206),(1996,0.05606117),(1997,0.04747241000000001),(1998,0.025892259999999997),(1999,0.033874730000000006),\\\\ (2000,0.03802368),(2001,0.06179034),(2002,0.058625540000000004),(2003,0.042497019999999996),(2004,0.08330459),\\\\ (2005,0.10185614),(2006,0.10121208),(2007,0.13211313),(2008,0.15293263),(2009,0.14861201999999998),\\\\ (2010,0.15202329),(2011,0.14950447),(2012,0.24690301),(2013,0.29162875),(2014,0.31618224),\\\\ (2015,0.0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
        2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015
    ], [
        0.06346222, 0.058381449999999994, 0.06496829, 0.06506953, 0.06767736, 0.064206, 0.05606117,
        0.04747241000000001, 0.025892259999999997, 0.033874730000000006, 0.03802368, 0.06179034,
        0.058625540000000004, 0.042497019999999996, 0.08330459, 0.10185614, 0.10121208, 0.13211313,
        0.15293263, 0.14861201999999998, 0.15202329, 0.14950447, 0.24690301, 0.29162875,
        0.31618224, 0.0
    ])


def historic_ctl_production(x):
    """
    Real Name: b'historic ctl production'
    Original Eqn: b'([(1990,2015)-(0.0,0.30062303999999995)],(1990,0.16499057),(1991,0.16768147),(1992,0.21825412),(1993,0.24450376000000001),(1994,0.24462182999999998),\\\\ (1995,0.26293196),(1996,0.27309483),(1997,0.27772338),(1998,0.26207404),(1999,0.26722632),\\\\ (2000,0.30062303999999995),(2001,0.15679415),(2002,0.16186449),(2003,0.16539379999999998),(2004,0.13935132),\\\\ (2005,0.10021173),(2006,0.14281665),(2007,0.11917675999999999),(2008,0.09999644),(2009,0.11247093),\\\\ (2010,0.14480621),(2011,0.2200387),(2012,0.22243912),(2013,0.2406164),(2014,0.27127102000000003),\\\\ (2015,0.0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
        2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015
    ], [
        0.16499057, 0.16768147, 0.21825412, 0.24450376000000001, 0.24462182999999998, 0.26293196,
        0.27309483, 0.27772338, 0.26207404, 0.26722632, 0.30062303999999995, 0.15679415,
        0.16186449, 0.16539379999999998, 0.13935132, 0.10021173, 0.14281665, 0.11917675999999999,
        0.09999644, 0.11247093, 0.14480621, 0.2200387, 0.22243912, 0.2406164, 0.27127102000000003,
        0.0
    ])


def historic_produc_biofuels_2gen(x):
    """
    Real Name: b'historic produc biofuels 2gen'
    Original Eqn: b'([(1990,2015)-(7096.883524626101,74847.36659353007)],(1990,7096.883524626101),(1991,7971.694528739449),(1992,7707.278339633647),(1993,7846.760877745217),(1994,8705.079406958428),\\\\ (1995,9052.844108405054),(1996,9171.927311788611),(1997,10472.882598545473),(1998,9937.08737060958),(1999,9619.477252460889),\\\\ (2000,9178.36595626787),(2001,10024.948550755016),(2002,11835.252519246962),(2003,14686.710467070612),(2004,16445.720935966816),\\\\ (2005,19650.71469184889),(2006,25666.356544617964),(2007,34701.5349030663),(2008,46454.13782417379),(2009,51905.07940132504),\\\\ (2010,59604.69080832337),(2011,61162.8030389672),(2012,62278.46999420314),(2013,67260.47281761839),(2014,74207.51498164036),\\\\ (2015,74847.36659353007))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
        2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015
    ], [
        7096.883524626101, 7971.694528739449, 7707.278339633647, 7846.760877745217,
        8705.079406958428, 9052.844108405054, 9171.927311788611, 10472.882598545473,
        9937.08737060958, 9619.477252460889, 9178.36595626787, 10024.948550755016,
        11835.252519246962, 14686.710467070612, 16445.720935966816, 19650.71469184889,
        25666.356544617964, 34701.5349030663, 46454.13782417379, 51905.07940132504,
        59604.69080832337, 61162.8030389672, 62278.46999420314, 67260.47281761839,
        74207.51498164036, 74847.36659353007
    ])


def table_max_extraction_tot_agg_oil_laherrere_2006(x):
    """
    Real Name: b'table max extraction tot agg oil laherrere 2006'
    Original Eqn: b'([(0,16800)-(0.0,189.324922862)],(0,0.0),(600,54.326237263),(1200,77.92436275200001),(1800,98.78275612),(2400,115.24967286600001),\\\\ (3000,130.06932745699999),(3600,140.497709169),(4200,151.475382009),(4800,163.45282174999997),(5400,171.0),\\\\ (6000,177.460153),(6600,182.146242),(7200,187.686421656),(7800,189.07350399999999),(8400,189.324922862),\\\\ (9000,189.324922862),(9600,189.324922862),(10200,189.324922862),(10800,189.324922862),(11400,189.324922862),\\\\ (12000,189.324922862),(12600,189.324922862),(13200,189.324922862),(13800,189.324922862),(14400,189.324922862),\\\\ (15000,189.324922862),(15600,189.324922862),(16200,189.324922862),(16800,189.324922862))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 600, 1200, 1800, 2400, 3000, 3600, 4200, 4800, 5400, 6000, 6600, 7200, 7800, 8400, 9000,
        9600, 10200, 10800, 11400, 12000, 12600, 13200, 13800, 14400, 15000, 15600, 16200, 16800
    ], [
        0.0, 54.326237263, 77.92436275200001, 98.78275612, 115.24967286600001, 130.06932745699999,
        140.497709169, 151.475382009, 163.45282174999997, 171.0, 177.460153, 182.146242,
        187.686421656, 189.07350399999999, 189.324922862, 189.324922862, 189.324922862,
        189.324922862, 189.324922862, 189.324922862, 189.324922862, 189.324922862, 189.324922862,
        189.324922862, 189.324922862, 189.324922862, 189.324922862, 189.324922862, 189.324922862
    ])


def table_max_extraction_maggio12_high_conv_oil_ej(x):
    """
    Real Name: b'table max extraction maggio12 high conv oil ej'
    Original Eqn: b'([(0,17000)-(0.0,176.452)],(0,0.0),(500,15.6384),(1000,43.7316),(1500,66.2483),(2000,87.3472),\\\\ (2500,103.416),(3000,119.408),(3500,131.57),(4000,140.057),(4500,150.257),\\\\ (5000,156.932),(5500,162.683),(6000,167.462),(6500,171.239),(7000,173.998),\\\\ (7500,175.733),(8000,176.452),(8500,176.452),(9000,176.452),(9500,176.452),\\\\ (10000,176.452),(10500,176.452),(11000,176.452),(11500,176.452),(12000,176.452),\\\\ (12500,176.452),(13000,176.452),(13500,176.452),(14000,176.452),(14500,176.452),\\\\ (15000,176.452),(15500,176.452),(16000,176.452),(16500,176.452),(17000,176.452))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000,
        14500, 15000, 15500, 16000, 16500, 17000
    ], [
        0.0, 15.6384, 43.7316, 66.2483, 87.3472, 103.416, 119.408, 131.57, 140.057, 150.257,
        156.932, 162.683, 167.462, 171.239, 173.998, 175.733, 176.452, 176.452, 176.452, 176.452,
        176.452, 176.452, 176.452, 176.452, 176.452, 176.452, 176.452, 176.452, 176.452, 176.452,
        176.452, 176.452, 176.452, 176.452, 176.452
    ])


def table_max_extraction_maggio12_low_con_oil_ej(x):
    """
    Real Name: b'table max extraction maggio12 low con oil ej'
    Original Eqn: b'([(0,12500)-(0.0,162.89303662558495)],(0,0.0),(500,31.19257370050454),(1000,55.93036702223348),(1500,78.9742737866738),(2000,98.99541997370072),\\\\ (2500,112.90238993902808),(3000,129.7869030062217),(3500,139.05477860121135),(4000,149.65885530140235),(4500,155.85226158136214),\\\\ (5000,160.213586322676),(5500,162.5352378599971),(6000,162.89303662558495),(6500,162.89303662558495),(7000,162.89303662558495),\\\\ (7500,162.89303662558495),(8000,162.89303662558495),(8500,162.89303662558495),(9000,162.89303662558495),(9500,162.89303662558495),\\\\ (10000,162.89303662558495),(10500,162.89303662558495),(11000,162.89303662558495),(11500,162.89303662558495),(12000,162.89303662558495),\\\\ (12500,162.89303662558495))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500
    ], [
        0.0, 31.19257370050454, 55.93036702223348, 78.9742737866738, 98.99541997370072,
        112.90238993902808, 129.7869030062217, 139.05477860121135, 149.65885530140235,
        155.85226158136214, 160.213586322676, 162.5352378599971, 162.89303662558495,
        162.89303662558495, 162.89303662558495, 162.89303662558495, 162.89303662558495,
        162.89303662558495, 162.89303662558495, 162.89303662558495, 162.89303662558495,
        162.89303662558495, 162.89303662558495, 162.89303662558495, 162.89303662558495,
        162.89303662558495
    ])


def table_max_extraction_maggio12middle_conv_oil_ej(x):
    """
    Real Name: b'table max extraction maggio12middle conv oil ej'
    Original Eqn: b'([(0,14500)-(0.0,169.474)],(0,0.0),(500,29.4861),(1000,56.0597),(1500,77.0),(2000,94.7098),\\\\ (2500,111.198),(3000,124.131),(3500,136.26),(4000,147.073),(4500,154.041),\\\\ (5000,160.5),(5500,165.566),(6000,167.496),(6500,169.176),(7000,169.474),\\\\ (7500,169.474),(8000,169.474),(8500,169.474),(9000,169.474),(9500,169.474),\\\\ (10000,169.474),(10500,169.474),(11000,169.474),(11500,169.474),(12000,169.474),\\\\ (12500,169.474),(13000,169.474),(13500,169.474),(14000,169.474),(14500,169.474))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000,
        14500
    ], [
        0.0, 29.4861, 56.0597, 77.0, 94.7098, 111.198, 124.131, 136.26, 147.073, 154.041, 160.5,
        165.566, 167.496, 169.176, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474,
        169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474
    ])


def table_max_extraction_unconv_oil_user_defined(x):
    """
    Real Name: b'table max extraction unconv oil user defined'
    Original Eqn: b'([(0,14500)-(0.0,169.474)],(0,0.0),(500,29.4861),(1000,56.0597),(1500,77.0),(2000,94.7098),\\\\ (2500,111.198),(3000,124.131),(3500,136.26),(4000,147.073),(4500,154.041),\\\\ (5000,160.5),(5500,165.566),(6000,167.496),(6500,169.176),(7000,169.474),\\\\ (7500,169.474),(8000,169.474),(8500,169.474),(9000,169.474),(9500,169.474),\\\\ (10000,169.474),(10500,169.474),(11000,169.474),(11500,169.474),(12000,169.474),\\\\ (12500,169.474),(13000,169.474),(13500,169.474),(14000,169.474),(14500,169.474))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000,
        14500
    ], [
        0.0, 29.4861, 56.0597, 77.0, 94.7098, 111.198, 124.131, 136.26, 147.073, 154.041, 160.5,
        165.566, 167.496, 169.176, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474,
        169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474
    ])


def table_max_extraction_uranium_zittel12(x):
    """
    Real Name: b'table max extraction uranium zittel12'
    Original Eqn: b'([(0,3900)-(0.0,44.0)],(0,0.0),(300,10.03061064),(600,23.76488412),(900,33.486863160000006),(1200,39.968210400000004),\\\\ (1500,44.0),(1800,44.0),(2100,44.0),(2400,44.0),(2700,44.0),\\\\ (3000,44.0),(3300,44.0),(3600,44.0),(3900,44.0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [0, 300, 600, 900, 1200, 1500, 1800, 2100, 2400, 2700, 3000, 3300, 3600, 3900], [
            0.0, 10.03061064, 23.76488412, 33.486863160000006, 39.968210400000004, 44.0, 44.0,
            44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0
        ])


def table_max_extraction_unconv_oil_low_mohr15(x):
    """
    Real Name: b'table max extraction unconv oil low mohr15'
    Original Eqn: b'([(0,6000)-(0.0,97.1327)],(0,0.0),(500,43.7805),(1000,76.0897),(1500,88.8414),(2000,94.8748),\\\\ (2500,97.1327),(3000,97.1327),(3500,97.1327),(4000,97.1327),(4500,97.1327),\\\\ (5000,97.1327),(5500,97.1327),(6000,97.1327))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000], [
            0.0, 43.7805, 76.0897, 88.8414, 94.8748, 97.1327, 97.1327, 97.1327, 97.1327, 97.1327,
            97.1327, 97.1327, 97.1327
        ])


def table_max_extraction_unconv_oil_high_mohr15(x):
    """
    Real Name: b'table max extraction unconv oil high mohr15'
    Original Eqn: b'([(0,22000)-(0.0,246.539)],(0,0.0),(1000,24.283),(2000,74.1838),(3000,112.563),(4000,141.537),\\\\ (5000,163.822),(6000,181.819),(7000,196.629),(8000,208.171),(9000,221.49),\\\\ (10000,231.626),(11000,241.856),(12000,246.539),(13000,246.539),(14000,246.539),\\\\ (15000,246.539),(16000,246.539),(17000,246.539),(18000,246.539),(19000,246.539),\\\\ (20000,246.539),(21000,246.539),(22000,246.539))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000,
        15000, 16000, 17000, 18000, 19000, 20000, 21000, 22000
    ], [
        0.0, 24.283, 74.1838, 112.563, 141.537, 163.822, 181.819, 196.629, 208.171, 221.49,
        231.626, 241.856, 246.539, 246.539, 246.539, 246.539, 246.539, 246.539, 246.539, 246.539,
        246.539, 246.539, 246.539
    ])


def table_max_extraction_tot_agg_oil_user_defined(x):
    """
    Real Name: b'table max extraction tot agg oil user defined'
    Original Eqn: b'([(0,14500)-(0.0,169.474)],(0,0.0),(500,29.4861),(1000,56.0597),(1500,77.0),(2000,94.7098),\\\\ (2500,111.198),(3000,124.131),(3500,136.26),(4000,147.073),(4500,154.041),\\\\ (5000,160.5),(5500,165.566),(6000,167.496),(6500,169.176),(7000,169.474),\\\\ (7500,169.474),(8000,169.474),(8500,169.474),(9000,169.474),(9500,169.474),\\\\ (10000,169.474),(10500,169.474),(11000,169.474),(11500,169.474),(12000,169.474),\\\\ (12500,169.474),(13000,169.474),(13500,169.474),(14000,169.474),(14500,169.474))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000,
        14500
    ], [
        0.0, 29.4861, 56.0597, 77.0, 94.7098, 111.198, 124.131, 136.26, 147.073, 154.041, 160.5,
        165.566, 167.496, 169.176, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474,
        169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474
    ])


def table_max_conv_oil_extraction_user_defined(x):
    """
    Real Name: b'table max conv oil extraction user defined'
    Original Eqn: b'([(0,14500)-(0.0,169.474)],(0,0.0),(500,29.4861),(1000,56.0597),(1500,77.0),(2000,94.7098),\\\\ (2500,111.198),(3000,124.131),(3500,136.26),(4000,147.073),(4500,154.041),\\\\ (5000,160.5),(5500,165.566),(6000,167.496),(6500,169.176),(7000,169.474),\\\\ (7500,169.474),(8000,169.474),(8500,169.474),(9000,169.474),(9500,169.474),\\\\ (10000,169.474),(10500,169.474),(11000,169.474),(11500,169.474),(12000,169.474),\\\\ (12500,169.474),(13000,169.474),(13500,169.474),(14000,169.474),(14500,169.474))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000,
        14500
    ], [
        0.0, 29.4861, 56.0597, 77.0, 94.7098, 111.198, 124.131, 136.26, 147.073, 154.041, 160.5,
        165.566, 167.496, 169.176, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474,
        169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474
    ])


def table_max_extraction_uranium_ewg13_ej(x):
    """
    Real Name: b'table max extraction uranium ewg13 ej'
    Original Eqn: b'([(0,3900)-(0.0,52.2)],(0,0.0),(300,17.2759),(600,31.6577),(900,41.2069),(1200,48.093),\\\\ (1500,51.4386),(1800,52.2),(2100,52.2),(2400,52.2),(2700,52.2),\\\\ (3000,52.2),(3300,52.2),(3600,52.2),(3900,52.2))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [0, 300, 600, 900, 1200, 1500, 1800, 2100, 2400, 2700, 3000, 3300, 3600, 3900], [
            0.0, 17.2759, 31.6577, 41.2069, 48.093, 51.4386, 52.2, 52.2, 52.2, 52.2, 52.2, 52.2,
            52.2, 52.2
        ])


def hist_share_oil_div_ff_elec(x):
    """
    Real Name: b'hist share oil div ff elec'
    Original Eqn: b'([(1995,2015)-(0.061736135774793574,0.15348010384558358)],(1995,0.15348010384558358),(1996,0.14549591639715465),(1997,0.14182892835743108),(1998,0.14296579232485399),(1999,0.13485972574217392),\\\\ (2000,0.12404681743507721),(2001,0.12081688214152479),(2002,0.11431542521211846),(2003,0.10884459587869497),(2004,0.10414414420731684),\\\\ (2005,0.0968102122015486),(2006,0.0851794884578831),(2007,0.08004344895270896),(2008,0.07642700648465353),(2009,0.0707422772696409),\\\\ (2010,0.0636235339350285),(2011,0.06252070917450128),(2012,0.06174887355718862),(2013,0.06188136666997736),(2014,0.06173827278530968),\\\\ (2015,0.061736135774793574))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014, 2015
    ], [
        0.15348010384558358, 0.14549591639715465, 0.14182892835743108, 0.14296579232485399,
        0.13485972574217392, 0.12404681743507721, 0.12081688214152479, 0.11431542521211846,
        0.10884459587869497, 0.10414414420731684, 0.0968102122015486, 0.0851794884578831,
        0.08004344895270896, 0.07642700648465353, 0.0707422772696409, 0.0636235339350285,
        0.06252070917450128, 0.06174887355718862, 0.06188136666997736, 0.06173827278530968,
        0.061736135774793574
    ])


def hist_share_gas_div_xcoal_plus_gasx_elec(x):
    """
    Real Name: b'hist share gas div xcoal plus gasx elec'
    Original Eqn: b'([(1995,2014)-(0.2217251120457687,0.31079123544643)],(1995,0.22413023824294928),(1996,0.2217251120457687),(1997,0.23386523401297685),(1998,0.24495146040651222),(1999,0.25808112961507557),\\\\ (2000,0.2589533680662218),(2001,0.2683927992823794),(2002,0.2734259444963716),(2003,0.26962043633910304),(2004,0.2788310171125217),\\\\ (2005,0.2808384825803754),(2006,0.28373606863189066),(2007,0.28937632319005824),(2008,0.299165260107698),(2009,0.3072979704663346),\\\\ (2010,0.3104639543550776),(2011,0.30204108495613075),(2012,0.31079123544643),(2013,0.2980520456011999),(2014,0.3032674271146121))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        0.22413023824294928, 0.2217251120457687, 0.23386523401297685, 0.24495146040651222,
        0.25808112961507557, 0.2589533680662218, 0.2683927992823794, 0.2734259444963716,
        0.26962043633910304, 0.2788310171125217, 0.2808384825803754, 0.28373606863189066,
        0.28937632319005824, 0.299165260107698, 0.3072979704663346, 0.3104639543550776,
        0.30204108495613075, 0.31079123544643, 0.2980520456011999, 0.3032674271146121
    ])


def historic_nuclear_generation_twh(x):
    """
    Real Name: b'historic nuclear generation twh'
    Original Eqn: b'([(1990,2015)-(0,2659)],(1990,1908),(1991,1996),(1992,2015),(1993,2081),(1994,2125),\\\\ (1995,2210),(1996,2291),(1997,2271),(1998,2316),(1999,2393),\\\\ (2000,2449),(2001,2516),(2002,2545),(2003,2517),(2004,2617),\\\\ (2005,2639),(2006,2659),(2007,2597),(2008,2602),(2009,2568),\\\\ (2010,2620),(2011,2507),(2012,2345),(2013,2364),(2014,2408),\\\\ (2015,0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
        2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014
    ], [
        1908, 1996, 2015, 2081, 2125, 2210, 2291, 2271, 2316, 2393, 2449, 2516, 2545, 2517, 2617,
        2639, 2659, 2597, 2602, 2568, 2620, 2507, 2345, 2364, 2408
    ])


def invest_cost_nuclear(x):
    """
    Real Name: b'invest cost nuclear'
    Original Eqn: b'([(1995,2100)-(5.536708628135624,5.536708628135624)],(1995,5.536708628135624),(2007,5.536708628135624),(2015,5.536708628135624),(2020,5.536708628135624),(2030,5.536708628135624),\\\\ (2040,5.536708628135624),(2050,5.536708628135624),(2060,5.536708628135624),(2070,5.536708628135624),(2080,5.536708628135624),\\\\ (2090,5.536708628135624),(2100,5.536708628135624))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [1995, 2007, 2015, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100], [
            5.536708628135624, 5.536708628135624, 5.536708628135624, 5.536708628135624,
            5.536708628135624, 5.536708628135624, 5.536708628135624, 5.536708628135624,
            5.536708628135624, 5.536708628135624, 5.536708628135624, 5.536708628135624
        ])


def tpes_de_castro_phd_scen_xmadcoalx(x):
    """
    Real Name: b'tpes de castro phd scen xmadcoalx'
    Original Eqn: b'([(1985,2100)-(7727.25,25309.5)],(1985,7727.25),(1986,7904.71),(1987,8090.31),(1988,8272.83),(1989,8453.11),\\\\ (1990,8632.09),(1991,8810.72),(1992,8989.94),(1993,9170.63),(1994,9353.55),\\\\ (1995,9539.38),(1996,9728.58),(1997,9921.49),(1998,10118.2),(1999,10318.7),\\\\ (2000,10522.5),(2001,10729.3),(2002,10938.4),(2003,11148.8),(2004,11359.5),\\\\ (2005,11569.5),(2006,11786.3),(2007,11999.6),(2008,12211.4),(2009,12420.8),\\\\ (2010,12626.9),(2011,12829.2),(2012,13027.3),(2013,13221.0),(2014,13410.5),\\\\ (2015,13596.1),(2016,13774.0),(2017,13924.7),(2018,14047.6),(2019,14141.5),\\\\ (2020,14208.3),(2021,14251.8),(2022,14277.8),(2023,14292.7),(2024,14303.7),\\\\ (2025,14317.3),(2026,14343.2),(2027,14382.9),(2028,14441.4),(2029,14521.6),\\\\ (2030,14625.6),(2031,14754.7),(2032,14909.2),(2033,15089.5),(2034,15295.1),\\\\ (2035,15525.7),(2036,15768.7),(2037,16021.4),(2038,16282.5),(2039,16551.3),\\\\ (2040,16827.5),(2041,17111.3),(2042,17402.7),(2043,17701.8),(2044,18008.4),\\\\ (2045,18322.2),(2046,18642.6),(2047,18968.8),(2048,19299.8),(2049,19634.2),\\\\ (2050,19970.7),(2051,20218.4),(2052,20503.9),(2053,20792.3),(2054,21082.0),\\\\ (2055,21370.6),(2056,21655.5),(2057,21933.9),(2058,22202.8),(2059,22459.9),\\\\ (2060,22702.5),(2061,22928.4),(2062,23135.7),(2063,23322.3),(2064,23486.7),\\\\ (2065,23627.4),(2066,23743.2),(2067,23833.1),(2068,23896.3),(2069,23932.3),\\\\ (2070,23940.6),(2071,23921.3),(2072,23874.3),(2073,23810.4),(2074,23774.2),\\\\ (2075,23753.0),(2076,23746.1),(2077,23752.7),(2078,23771.8),(2079,23802.3),\\\\ (2080,23843.3),(2081,23893.7),(2082,23952.6),(2083,24018.9),(2084,24091.6),\\\\ (2085,24169.7),(2086,24252.2),(2087,24338.1),(2088,24426.4),(2089,24516.1),\\\\ (2090,24606.1),(2091,24695.4),(2092,24783.0),(2093,24868.0),(2094,24949.3),\\\\ (2095,25026.0),(2096,25097.2),(2097,25162.0),(2098,25219.5),(2099,25268.9),\\\\ (2100,25309.5))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        7727.25, 7904.71, 8090.31, 8272.83, 8453.11, 8632.09, 8810.72, 8989.94, 9170.63, 9353.55,
        9539.38, 9728.58, 9921.49, 10118.2, 10318.7, 10522.5, 10729.3, 10938.4, 11148.8, 11359.5,
        11569.5, 11786.3, 11999.6, 12211.4, 12420.8, 12626.9, 12829.2, 13027.3, 13221.0, 13410.5,
        13596.1, 13774.0, 13924.7, 14047.6, 14141.5, 14208.3, 14251.8, 14277.8, 14292.7, 14303.7,
        14317.3, 14343.2, 14382.9, 14441.4, 14521.6, 14625.6, 14754.7, 14909.2, 15089.5, 15295.1,
        15525.7, 15768.7, 16021.4, 16282.5, 16551.3, 16827.5, 17111.3, 17402.7, 17701.8, 18008.4,
        18322.2, 18642.6, 18968.8, 19299.8, 19634.2, 19970.7, 20218.4, 20503.9, 20792.3, 21082.0,
        21370.6, 21655.5, 21933.9, 22202.8, 22459.9, 22702.5, 22928.4, 23135.7, 23322.3, 23486.7,
        23627.4, 23743.2, 23833.1, 23896.3, 23932.3, 23940.6, 23921.3, 23874.3, 23810.4, 23774.2,
        23753.0, 23746.1, 23752.7, 23771.8, 23802.3, 23843.3, 23893.7, 23952.6, 24018.9, 24091.6,
        24169.7, 24252.2, 24338.1, 24426.4, 24516.1, 24606.1, 24695.4, 24783.0, 24868.0, 24949.3,
        25026.0, 25097.2, 25162.0, 25219.5, 25268.9, 25309.5
    ])


def gtc_historic_emissions_rcps(x):
    """
    Real Name: b'gtc historic emissions rcps'
    Original Eqn: b'([(1990,2005)-(6.144,7.971)],(1990,6.144),(1995,6.4395),(2000,6.735),(2005,7.971))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [1990, 1995, 2000, 2005], [6.144, 6.4395, 6.735, 7.971])


def afforestation_program_2020(x):
    """
    Real Name: b'afforestation program 2020'
    Original Eqn: b'([(1980,2120)-(0.0,1491.256928496994)],(1980,0.0),(2020,0.0),(2025,138.2727041328326),(2030,299.56044274475425),(2035,452.9353423630819),\\\\ (2040,597.8798562521115),(2045,733.8764376947656),(2050,860.4075399609283),(2055,976.9556163242087),(2060,1083.0031200675294),\\\\ (2065,1178.0325044589117),(2070,1261.5262227738276),(2075,1332.966728293337),(2080,1391.8364742817357),(2085,1437.6179140219465),\\\\ (2090,1469.7935007894412),(2095,1487.8456878541037),(2100,1491.256928496994),(2105,1479.5096759861335),(2110,1452.086383602582),\\\\ (2115,1408.469504618086),(2120,1348.1414923118427))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1980, 2020, 2025, 2030, 2035, 2040, 2045, 2050, 2055, 2060, 2065, 2070, 2075, 2080, 2085,
        2090, 2095, 2100, 2105, 2110, 2115, 2120
    ], [
        0.0, 0.0, 138.2727041328326, 299.56044274475425, 452.9353423630819, 597.8798562521115,
        733.8764376947656, 860.4075399609283, 976.9556163242087, 1083.0031200675294,
        1178.0325044589117, 1261.5262227738276, 1332.966728293337, 1391.8364742817357,
        1437.6179140219465, 1469.7935007894412, 1487.8456878541037, 1491.256928496994,
        1479.5096759861335, 1452.086383602582, 1408.469504618086, 1348.1414923118427
    ])


def historic_efficiency_gas_for_electricity(x):
    """
    Real Name: b'historic efficiency gas for electricity'
    Original Eqn: b'([(1995,2014)-(37.813,44.466)],(1995,37.813),(1996,38.008),(1997,38.708),(1998,38.843),(1999,39.84),\\\\ (2000,39.903),(2001,39.938),(2002,40.541),(2003,41.535),(2004,41.946),\\\\ (2005,42.082),(2006,42.187),(2007,42.885),(2008,43.196),(2009,43.382),\\\\ (2010,43.393),(2011,43.951),(2012,43.855),(2013,44.466),(2014,44.268))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
        2010, 2011, 2012, 2013, 2014
    ], [
        37.813, 38.008, 38.708, 38.843, 39.84, 39.903, 39.938, 40.541, 41.535, 41.946, 42.082,
        42.187, 42.885, 43.196, 43.382, 43.393, 43.951, 43.855, 44.466, 44.268
    ])


def p_timeseries_pop_growth_rate(x):
    """
    Real Name: b'p timeseries pop growth rate'
    Original Eqn: b'([(2015,2101)-(0.0,0.0105)],(2015,0.0105),(2016,0.0102),(2017,0.01),(2018,0.0098),(2019,0.0096),\\\\ (2020,0.0093),(2021,0.0091),(2022,0.0089),(2023,0.0087),(2024,0.0085),\\\\ (2025,0.0082),(2026,0.008),(2027,0.0078),(2028,0.0076),(2029,0.0074),\\\\ (2030,0.0073),(2031,0.0071),(2032,0.0069),(2033,0.0067),(2034,0.0065),\\\\ (2035,0.0064),(2036,0.0062),(2037,0.006),(2038,0.0058),(2039,0.0057),\\\\ (2040,0.0055),(2041,0.0053),(2042,0.0052),(2043,0.005),(2044,0.0048),\\\\ (2045,0.0047),(2046,0.0045),(2047,0.0044),(2048,0.0042),(2049,0.004),\\\\ (2050,0.0039),(2051,0.0037),(2052,0.0036),(2053,0.0035),(2054,0.0033),\\\\ (2055,0.0032),(2056,0.0031),(2057,0.0029),(2058,0.0028),(2059,0.0027),\\\\ (2060,0.0026),(2061,0.0025),(2062,0.0024),(2063,0.0023),(2064,0.0022),\\\\ (2065,0.0021),(2066,0.002),(2067,0.002),(2068,0.0019),(2069,0.0018),\\\\ (2070,0.0017),(2071,0.0017),(2072,0.0016),(2073,0.0015),(2074,0.0015),\\\\ (2075,0.0014),(2076,0.0013),(2077,0.0013),(2078,0.0012),(2079,0.0012),\\\\ (2080,0.0011),(2081,0.0011),(2082,0.001),(2083,0.001),(2084,0.0009),\\\\ (2085,0.0009),(2086,0.0009),(2087,0.0008),(2088,0.0008),(2089,0.0008),\\\\ (2090,0.0008),(2091,0.0007),(2092,0.0007),(2093,0.0007),(2094,0.0006),\\\\ (2095,0.0006),(2096,0.0006),(2097,0.0006),(2098,0.0005),(2099,0.0005),\\\\ (2100,0.0),(2101,0.0))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101
    ], [
        0.0105, 0.0102, 0.01, 0.0098, 0.0096, 0.0093, 0.0091, 0.0089, 0.0087, 0.0085, 0.0082,
        0.008, 0.0078, 0.0076, 0.0074, 0.0073, 0.0071, 0.0069, 0.0067, 0.0065, 0.0064, 0.0062,
        0.006, 0.0058, 0.0057, 0.0055, 0.0053, 0.0052, 0.005, 0.0048, 0.0047, 0.0045, 0.0044,
        0.0042, 0.004, 0.0039, 0.0037, 0.0036, 0.0035, 0.0033, 0.0032, 0.0031, 0.0029, 0.0028,
        0.0027, 0.0026, 0.0025, 0.0024, 0.0023, 0.0022, 0.0021, 0.002, 0.002, 0.0019, 0.0018,
        0.0017, 0.0017, 0.0016, 0.0015, 0.0015, 0.0014, 0.0013, 0.0013, 0.0012, 0.0012, 0.0011,
        0.0011, 0.001, 0.001, 0.0009, 0.0009, 0.0009, 0.0008, 0.0008, 0.0008, 0.0008, 0.0007,
        0.0007, 0.0007, 0.0006, 0.0006, 0.0006, 0.0006, 0.0005, 0.0005, 0.0, 0.0
    ])


def time_dmnl(x):
    """
    Real Name: b'time dmnl'
    Original Eqn: b'([(1990,2100)-(1990,2100)],(1990,1990),(1991,1991),(1992,1992),(1993,1993),(1994,1994),\\\\ (1995,1995),(1996,1996),(1997,1997),(1998,1998),(1999,1999),\\\\ (2000,2000),(2001,2001),(2002,2002),(2003,2003),(2004,2004),\\\\ (2005,2005),(2006,2006),(2007,2007),(2008,2008),(2009,2009),\\\\ (2010,2010),(2011,2011),(2012,2012),(2013,2013),(2014,2014),\\\\ (2015,2015),(2016,2016),(2017,2017),(2018,2018),(2019,2019),\\\\ (2020,2020),(2021,2021),(2022,2022),(2023,2023),(2024,2024),\\\\ (2025,2025),(2026,2026),(2027,2027),(2028,2028),(2029,2029),\\\\ (2030,2030),(2031,2031),(2032,2032),(2033,2033),(2034,2034),\\\\ (2035,2035),(2036,2036),(2037,2037),(2038,2038),(2039,2039),\\\\ (2040,2040),(2041,2041),(2042,2042),(2043,2043),(2044,2044),\\\\ (2045,2045),(2046,2046),(2047,2047),(2048,2048),(2049,2049),\\\\ (2050,2050),(2051,2051),(2052,2052),(2053,2053),(2054,2054),\\\\ (2055,2055),(2056,2056),(2057,2057),(2058,2058),(2059,2059),\\\\ (2060,2060),(2061,2061),(2062,2062),(2063,2063),(2064,2064),\\\\ (2065,2065),(2066,2066),(2067,2067),(2068,2068),(2069,2069),\\\\ (2070,2070),(2071,2071),(2072,2072),(2073,2073),(2074,2074),\\\\ (2075,2075),(2076,2076),(2077,2077),(2078,2078),(2079,2079),\\\\ (2080,2080),(2081,2081),(2082,2082),(2083,2083),(2084,2084),\\\\ (2085,2085),(2086,2086),(2087,2087),(2088,2088),(2089,2089),\\\\ (2090,2090),(2091,2091),(2092,2092),(2093,2093),(2094,2094),\\\\ (2095,2095),(2096,2096),(2097,2097),(2098,2098),(2099,2099),\\\\ (2100,2100))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
        2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
        2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
        2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
        2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
        2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
        2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
        2095, 2096, 2097, 2098, 2099, 2100
    ], [
        1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
        2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
        2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
        2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
        2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
        2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
        2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
        2095, 2096, 2097, 2098, 2099, 2100
    ])


def table_max_extraction_aspo_oil_ej(x):
    """
    Real Name: b'table max extraction aspo oil ej'
    Original Eqn: b'([(0,13200)-(0.0,171.044)],(0,0.0),(600,29.9783),(1200,46.7403),(1800,59.4953),(2400,71.3603),\\\\ (3000,84.9357),(3600,96.0997),(4200,107.465),(4800,118.46),(5400,127.537),\\\\ (6000,137.018),(6600,145.888),(7200,152.005),(7800,156.288),(8400,162.47),\\\\ (9000,166.659),(9600,171.044),(10200,171.044),(10800,171.044),(11400,171.044),\\\\ (12000,171.044),(12600,171.044),(13200,171.044))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 600, 1200, 1800, 2400, 3000, 3600, 4200, 4800, 5400, 6000, 6600, 7200, 7800, 8400, 9000,
        9600, 10200, 10800, 11400, 12000, 12600, 13200
    ], [
        0.0, 29.9783, 46.7403, 59.4953, 71.3603, 84.9357, 96.0997, 107.465, 118.46, 127.537,
        137.018, 145.888, 152.005, 156.288, 162.47, 166.659, 171.044, 171.044, 171.044, 171.044,
        171.044, 171.044, 171.044
    ])


def table_max_extraction_gas_laherrere2010(x):
    """
    Real Name: b'table max extraction gas laherrere2010'
    Original Eqn: b'([(0,13000)-(0.0,152.895)],(0,0.0),(500,23.8621),(1000,44.631),(1500,62.3067),(2000,77.7729),\\\\ (2500,93.8891),(3000,107.821),(3500,119.752),(4000,129.033),(4500,137.87),\\\\ (5000,144.16),(5500,148.917),(6000,151.78),(6500,152.895),(7000,152.895),\\\\ (7500,152.895),(8000,152.895),(8500,152.895),(9000,152.895),(9500,152.895),\\\\ (10000,152.895),(10500,152.895),(11000,152.895),(11500,152.895),(12000,152.895),\\\\ (12500,152.895),(13000,152.895))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000
    ], [
        0.0, 23.8621, 44.631, 62.3067, 77.7729, 93.8891, 107.821, 119.752, 129.033, 137.87, 144.16,
        148.917, 151.78, 152.895, 152.895, 152.895, 152.895, 152.895, 152.895, 152.895, 152.895,
        152.895, 152.895, 152.895, 152.895, 152.895, 152.895
    ])


def table_max_extraction_gas_mohr_high2012(x):
    """
    Real Name: b'table max extraction gas mohr high2012'
    Original Eqn: b'([(0,28500)-(0.0,194.197)],(0,0.0),(1500,36.4477),(3000,58.3656),(4500,72.8198),(6000,98.5),\\\\ (7500,130.439),(9000,159.979),(10500,177.268),(12000,190.383),(13500,194.052),\\\\ (15000,194.197),(16500,194.197),(18000,194.197),(19500,194.197),(21000,194.197),\\\\ (22500,194.197),(24000,194.197),(25500,194.197),(27000,194.197),(28500,194.197))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 1500, 3000, 4500, 6000, 7500, 9000, 10500, 12000, 13500, 15000, 16500, 18000, 19500,
        21000, 22500, 24000, 25500, 27000, 28500
    ], [
        0.0, 36.4477, 58.3656, 72.8198, 98.5, 130.439, 159.979, 177.268, 190.383, 194.052, 194.197,
        194.197, 194.197, 194.197, 194.197, 194.197, 194.197, 194.197, 194.197, 194.197
    ])


def table_max_extraction_gas_mohr_bg2012(x):
    """
    Real Name: b'table max extraction gas mohr bg2012'
    Original Eqn: b'([(0,20000)-(0.0,159.247)],(0,0.0),(1000,27.4739),(2000,42.1041),(3000,51.2745),(4000,58.1215),\\\\ (5000,69.3726),(6000,79.5334),(7000,99.1636),(8000,115.575),(9000,128.798),\\\\ (10000,138.387),(11000,147.465),(12000,150.753),(13000,157.008),(14000,159.247),\\\\ (15000,159.247),(16000,159.247),(17000,159.247),(18000,159.247),(19000,159.247),\\\\ (20000,159.247))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000,
        15000, 16000, 17000, 18000, 19000, 20000
    ], [
        0.0, 27.4739, 42.1041, 51.2745, 58.1215, 69.3726, 79.5334, 99.1636, 115.575, 128.798,
        138.387, 147.465, 150.753, 157.008, 159.247, 159.247, 159.247, 159.247, 159.247, 159.247,
        159.247
    ])


def tnes_de_castro_phd_scen_i(x):
    """
    Real Name: b'tnes de castro phd scen i'
    Original Eqn: b'([(1985,2100)-(7173.13,25962.1)],(1985,7173.13),(1986,7368.39),(1987,7560.95),(1988,7750.95),(1989,7938.54),\\\\ (1990,8123.85),(1991,8306.94),(1992,8487.87),(1993,8666.6),(1994,8843.01),\\\\ (1995,9016.91),(1996,9188.0),(1997,9355.9),(1998,9520.11),(1999,9680.06),\\\\ (2000,9835.12),(2001,9984.57),(2002,10127.7),(2003,10263.7),(2004,10391.9),\\\\ (2005,10511.6),(2006,10622.1),(2007,10723.1),(2008,10814.1),(2009,10894.8),\\\\ (2010,10965.4),(2011,11025.8),(2012,11076.5),(2013,11117.8),(2014,11150.3),\\\\ (2015,11174.8),(2016,11187.2),(2017,11171.3),(2018,11125.6),(2019,11048.7),\\\\ (2020,10941.3),(2021,10806.3),(2022,10648.5),(2023,10473.6),(2024,10288.0),\\\\ (2025,10098.3),(2026,9914.3),(2027,9737.27),(2028,9572.49),(2029,9422.99),\\\\ (2030,9290.79),(2031,9176.91),(2032,9081.61),(2033,9004.54),(2034,8944.92),\\\\ (2035,8901.71),(2036,8868.15),(2037,8842.36),(2038,8822.52),(2039,8807.44),\\\\ (2040,8796.45),(2041,8789.34),(2042,8786.33),(2043,8787.93),(2044,8794.91),\\\\ (2045,8800.9),(2046,8805.38),(2047,8813.47),(2048,8826.89),(2049,8847.13),\\\\ (2050,8844.22),(2051,8829.3),(2052,8822.62),(2053,8829.47),(2054,8853.12),\\\\ (2055,8895.31),(2056,8956.7),(2057,9037.27),(2058,9136.56),(2059,9253.94),\\\\ (2060,9388.68),(2061,9540.13),(2062,9707.65),(2063,9890.73),(2064,10089.0),\\\\ (2065,10302.0),(2066,10529.6),(2067,10771.5),(2068,11027.7),(2069,11298.0),\\\\ (2070,11582.2),(2071,11880.5),(2072,12192.5),(2073,12518.4),(2074,12857.9),\\\\ (2075,13211.0),(2076,13577.5),(2077,13957.4),(2078,14350.4),(2079,14756.5),\\\\ (2080,15175.4),(2081,15606.9),(2082,16051.0),(2083,16507.3),(2084,16975.7),\\\\ (2085,17456.0),(2086,17947.9),(2087,18451.3),(2088,18965.9),(2089,19491.6),\\\\ (2090,20028.0),(2091,20575.1),(2092,21132.7),(2093,21700.6),(2094,22278.8),\\\\ (2095,22867.1),(2096,23465.6),(2097,24074.2),(2098,24693.1),(2099,25322.3),\\\\ (2100,25962.1))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        7173.13, 7368.39, 7560.95, 7750.95, 7938.54, 8123.85, 8306.94, 8487.87, 8666.6, 8843.01,
        9016.91, 9188.0, 9355.9, 9520.11, 9680.06, 9835.12, 9984.57, 10127.7, 10263.7, 10391.9,
        10511.6, 10622.1, 10723.1, 10814.1, 10894.8, 10965.4, 11025.8, 11076.5, 11117.8, 11150.3,
        11174.8, 11187.2, 11171.3, 11125.6, 11048.7, 10941.3, 10806.3, 10648.5, 10473.6, 10288.0,
        10098.3, 9914.3, 9737.27, 9572.49, 9422.99, 9290.79, 9176.91, 9081.61, 9004.54, 8944.92,
        8901.71, 8868.15, 8842.36, 8822.52, 8807.44, 8796.45, 8789.34, 8786.33, 8787.93, 8794.91,
        8800.9, 8805.38, 8813.47, 8826.89, 8847.13, 8844.22, 8829.3, 8822.62, 8829.47, 8853.12,
        8895.31, 8956.7, 9037.27, 9136.56, 9253.94, 9388.68, 9540.13, 9707.65, 9890.73, 10089.0,
        10302.0, 10529.6, 10771.5, 11027.7, 11298.0, 11582.2, 11880.5, 12192.5, 12518.4, 12857.9,
        13211.0, 13577.5, 13957.4, 14350.4, 14756.5, 15175.4, 15606.9, 16051.0, 16507.3, 16975.7,
        17456.0, 17947.9, 18451.3, 18965.9, 19491.6, 20028.0, 20575.1, 21132.7, 21700.6, 22278.8,
        22867.1, 23465.6, 24074.2, 24693.1, 25322.3, 25962.1
    ])


def net_oil_extraction_de_castro_phd_scen_i(x):
    """
    Real Name: b'net oil extraction de castro phd scen i'
    Original Eqn: b'([(1985,2100)-(921.731,3778.86)],(1985,2586.21),(1986,2657.24),(1987,2727.03),(1988,2795.64),(1989,2863.08),\\\\ (1990,2929.39),(1991,2994.56),(1992,3058.58),(1993,3121.38),(1994,3182.87),\\\\ (1995,3242.92),(1996,3301.35),(1997,3357.93),(1998,3412.41),(1999,3464.47),\\\\ (2000,3513.79),(2001,3559.99),(2002,3602.72),(2003,3641.58),(2004,3676.21),\\\\ (2005,3706.25),(2006,3731.41),(2007,3751.42),(2008,3766.07),(2009,3775.24),\\\\ (2010,3778.86),(2011,3776.96),(2012,3769.61),(2013,3756.99),(2014,3739.31),\\\\ (2015,3716.84),(2016,3688.03),(2017,3646.76),(2018,3592.8),(2019,3525.96),\\\\ (2020,3446.96),(2021,3357.36),(2022,3259.3),(2023,3155.32),(2024,3048.04),\\\\ (2025,2940.0),(2026,2833.9),(2027,2731.45),(2028,2633.99),(2029,2542.41),\\\\ (2030,2457.18),(2031,2378.41),(2032,2305.92),(2033,2239.3),(2034,2178.03),\\\\ (2035,2121.51),(2036,2067.41),(2037,2015.01),(2038,1963.69),(2039,1913.01),\\\\ (2040,1862.72),(2041,1812.75),(2042,1763.12),(2043,1713.95),(2044,1665.41),\\\\ (2045,1617.7),(2046,1569.24),(2047,1521.33),(2048,1474.43),(2049,1428.88),\\\\ (2050,1378.91),(2051,1326.44),(2052,1276.28),(2053,1229.49),(2054,1186.64),\\\\ (2055,1147.86),(2056,1113.07),(2057,1082.06),(2058,1054.53),(2059,1030.2),\\\\ (2060,1008.79),(2061,990.086),(2062,973.882),(2063,960.031),(2064,948.419),\\\\ (2065,938.964),(2066,931.608),(2067,926.306),(2068,923.025),(2069,921.731),\\\\ (2070,922.385),(2071,924.939),(2072,929.328),(2073,935.469),(2074,943.259),\\\\ (2075,952.569),(2076,963.248),(2077,975.123),(2078,987.996),(2079,1001.65),\\\\ (2080,1015.86),(2081,1030.38),(2082,1044.96),(2083,1059.33),(2084,1073.23),\\\\ (2085,1086.43),(2086,1098.65),(2087,1109.67),(2088,1119.27),(2089,1127.24),\\\\ (2090,1133.4),(2091,1137.59),(2092,1139.68),(2093,1139.56),(2094,1137.17),\\\\ (2095,1132.46),(2096,1125.41),(2097,1116.04),(2098,1104.39),(2099,1090.55),\\\\ (2100,1074.6))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        2586.21, 2657.24, 2727.03, 2795.64, 2863.08, 2929.39, 2994.56, 3058.58, 3121.38, 3182.87,
        3242.92, 3301.35, 3357.93, 3412.41, 3464.47, 3513.79, 3559.99, 3602.72, 3641.58, 3676.21,
        3706.25, 3731.41, 3751.42, 3766.07, 3775.24, 3778.86, 3776.96, 3769.61, 3756.99, 3739.31,
        3716.84, 3688.03, 3646.76, 3592.8, 3525.96, 3446.96, 3357.36, 3259.3, 3155.32, 3048.04,
        2940.0, 2833.9, 2731.45, 2633.99, 2542.41, 2457.18, 2378.41, 2305.92, 2239.3, 2178.03,
        2121.51, 2067.41, 2015.01, 1963.69, 1913.01, 1862.72, 1812.75, 1763.12, 1713.95, 1665.41,
        1617.7, 1569.24, 1521.33, 1474.43, 1428.88, 1378.91, 1326.44, 1276.28, 1229.49, 1186.64,
        1147.86, 1113.07, 1082.06, 1054.53, 1030.2, 1008.79, 990.086, 973.882, 960.031, 948.419,
        938.964, 931.608, 926.306, 923.025, 921.731, 922.385, 924.939, 929.328, 935.469, 943.259,
        952.569, 963.248, 975.123, 987.996, 1001.65, 1015.86, 1030.38, 1044.96, 1059.33, 1073.23,
        1086.43, 1098.65, 1109.67, 1119.27, 1127.24, 1133.4, 1137.59, 1139.68, 1139.56, 1137.17,
        1132.46, 1125.41, 1116.04, 1104.39, 1090.55, 1074.6
    ])


def pe_oil_extraction_de_castro_phd_scen_ii(x):
    """
    Real Name: b'pe oil extraction de castro phd scen ii'
    Original Eqn: b'([(1985,2100)-(920.786,4269.17)],(1985,2853.6),(1986,2932.69),(1987,3010.55),(1988,3087.22),(1989,3162.74),\\\\ (1990,3237.16),(1991,3310.47),(1992,3382.67),(1993,3453.7),(1994,3523.47),\\\\ (1995,3591.83),(1996,3658.6),(1997,3723.55),(1998,3786.39),(1999,3846.79),\\\\ (2000,3904.4),(2001,3958.81),(2002,4009.62),(2003,4056.42),(2004,4098.78),\\\\ (2005,4136.27),(2006,4169.57),(2007,4198.24),(2008,4222.15),(2009,4241.19),\\\\ (2010,4255.33),(2011,4264.62),(2012,4269.17),(2013,4269.15),(2014,4264.78),\\\\ (2015,4256.34),(2016,4242.11),(2017,4215.12),(2018,4174.81),(2019,4120.76),\\\\ (2020,4053.66),(2021,3975.16),(2022,3887.67),(2023,3794.08),(2024,3697.45),\\\\ (2025,3600.71),(2026,3506.78),(2027,3417.66),(2028,3334.64),(2029,3258.44),\\\\ (2030,3189.17),(2031,3126.44),(2032,3069.5),(2033,3017.29),(2034,2968.65),\\\\ (2035,2922.37),(2036,2873.74),(2037,2821.48),(2038,2764.72),(2039,2703.17),\\\\ (2040,2637.04),(2041,2566.93),(2042,2493.69),(2043,2418.33),(2044,2341.94),\\\\ (2045,2265.58),(2046,2190.28),(2047,2116.99),(2048,2046.54),(2049,1979.65),\\\\ (2050,1909.2),(2051,1839.5),(2052,1776.01),(2053,1719.36),(2054,1669.55),\\\\ (2055,1626.19),(2056,1588.74),(2057,1556.59),(2058,1529.08),(2059,1505.57),\\\\ (2060,1485.41),(2061,1467.99),(2062,1452.74),(2063,1439.12),(2064,1426.63),\\\\ (2065,1414.83),(2066,1403.34),(2067,1391.81),(2068,1379.96),(2069,1367.57),\\\\ (2070,1354.44),(2071,1340.44),(2072,1325.47),(2073,1309.44),(2074,1293.54),\\\\ (2075,1278.69),(2076,1264.85),(2077,1251.89),(2078,1239.63),(2079,1227.89),\\\\ (2080,1216.49),(2081,1205.3),(2082,1194.17),(2083,1182.97),(2084,1171.6),\\\\ (2085,1159.95),(2086,1147.95),(2087,1135.52),(2088,1122.6),(2089,1109.14),\\\\ (2090,1095.1),(2091,1080.45),(2092,1065.16),(2093,1049.24),(2094,1032.67),\\\\ (2095,1015.47),(2096,997.651),(2097,979.238),(2098,960.264),(2099,940.765),\\\\ (2100,920.786))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        2853.6, 2932.69, 3010.55, 3087.22, 3162.74, 3237.16, 3310.47, 3382.67, 3453.7, 3523.47,
        3591.83, 3658.6, 3723.55, 3786.39, 3846.79, 3904.4, 3958.81, 4009.62, 4056.42, 4098.78,
        4136.27, 4169.57, 4198.24, 4222.15, 4241.19, 4255.33, 4264.62, 4269.17, 4269.15, 4264.78,
        4256.34, 4242.11, 4215.12, 4174.81, 4120.76, 4053.66, 3975.16, 3887.67, 3794.08, 3697.45,
        3600.71, 3506.78, 3417.66, 3334.64, 3258.44, 3189.17, 3126.44, 3069.5, 3017.29, 2968.65,
        2922.37, 2873.74, 2821.48, 2764.72, 2703.17, 2637.04, 2566.93, 2493.69, 2418.33, 2341.94,
        2265.58, 2190.28, 2116.99, 2046.54, 1979.65, 1909.2, 1839.5, 1776.01, 1719.36, 1669.55,
        1626.19, 1588.74, 1556.59, 1529.08, 1505.57, 1485.41, 1467.99, 1452.74, 1439.12, 1426.63,
        1414.83, 1403.34, 1391.81, 1379.96, 1367.57, 1354.44, 1340.44, 1325.47, 1309.44, 1293.54,
        1278.69, 1264.85, 1251.89, 1239.63, 1227.89, 1216.49, 1205.3, 1194.17, 1182.97, 1171.6,
        1159.95, 1147.95, 1135.52, 1122.6, 1109.14, 1095.1, 1080.45, 1065.16, 1049.24, 1032.67,
        1015.47, 997.651, 979.238, 960.264, 940.765, 920.786
    ])


def net_oil_extraction_de_castro_phd_scen_iii(x):
    """
    Real Name: b'net oil extraction de castro phd scen iii'
    Original Eqn: b'([(1985,2100)-(7.79015,3778.86)],(1985,2586.21),(1986,2657.24),(1987,2727.03),(1988,2795.64),(1989,2863.08),\\\\ (1990,2929.39),(1991,2994.56),(1992,3058.58),(1993,3121.38),(1994,3182.87),\\\\ (1995,3242.92),(1996,3301.35),(1997,3357.93),(1998,3412.41),(1999,3464.47),\\\\ (2000,3513.79),(2001,3559.99),(2002,3602.72),(2003,3641.58),(2004,3676.21),\\\\ (2005,3706.25),(2006,3731.41),(2007,3751.42),(2008,3766.07),(2009,3775.24),\\\\ (2010,3778.86),(2011,3776.96),(2012,3769.56),(2013,3756.02),(2014,3735.73),\\\\ (2015,3708.45),(2016,3672.29),(2017,3621.03),(2018,3554.53),(2019,3472.85),\\\\ (2020,3377.15),(2021,3269.46),(2022,3152.43),(2023,3029.07),(2024,2902.39),\\\\ (2025,2775.22),(2026,2649.98),(2027,2528.6),(2028,2412.5),(2029,2302.57),\\\\ (2030,2199.24),(2031,2102.59),(2032,2012.4),(2033,1928.26),(2034,1849.64),\\\\ (2035,1775.94),(2036,1705.9),(2037,1639.0),(2038,1574.79),(2039,1512.89),\\\\ (2040,1453.04),(2041,1395.04),(2042,1338.77),(2043,1284.12),(2044,1231.05),\\\\ (2045,1179.51),(2046,1129.49),(2047,1080.95),(2048,1033.89),(2049,988.283),\\\\ (2050,939.916),(2051,888.983),(2052,838.921),(2053,790.425),(2054,743.889),\\\\ (2055,699.498),(2056,657.297),(2057,617.242),(2058,579.24),(2059,543.177),\\\\ (2060,508.93),(2061,476.381),(2062,445.423),(2063,415.961),(2064,387.915),\\\\ (2065,361.216),(2066,335.808),(2067,311.643),(2068,288.683),(2069,266.895),\\\\ (2070,246.251),(2071,226.726),(2072,208.297),(2073,190.943),(2074,174.638),\\\\ (2075,159.36),(2076,145.082),(2077,131.775),(2078,119.409),(2079,107.95),\\\\ (2080,97.3636),(2081,87.6112),(2082,78.6537),(2083,70.4503),(2084,62.9592),\\\\ (2085,56.1382),(2086,49.9448),(2087,44.3368),(2088,39.2727),(2089,34.7122),\\\\ (2090,30.6158),(2091,26.9459),(2092,23.6663),(2093,20.743),(2094,18.1435),\\\\ (2095,15.8376),(2096,13.797),(2097,11.9953),(2098,10.4082),(2099,9.01332),\\\\ (2100,7.79015))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        2586.21, 2657.24, 2727.03, 2795.64, 2863.08, 2929.39, 2994.56, 3058.58, 3121.38, 3182.87,
        3242.92, 3301.35, 3357.93, 3412.41, 3464.47, 3513.79, 3559.99, 3602.72, 3641.58, 3676.21,
        3706.25, 3731.41, 3751.42, 3766.07, 3775.24, 3778.86, 3776.96, 3769.56, 3756.02, 3735.73,
        3708.45, 3672.29, 3621.03, 3554.53, 3472.85, 3377.15, 3269.46, 3152.43, 3029.07, 2902.39,
        2775.22, 2649.98, 2528.6, 2412.5, 2302.57, 2199.24, 2102.59, 2012.4, 1928.26, 1849.64,
        1775.94, 1705.9, 1639.0, 1574.79, 1512.89, 1453.04, 1395.04, 1338.77, 1284.12, 1231.05,
        1179.51, 1129.49, 1080.95, 1033.89, 988.283, 939.916, 888.983, 838.921, 790.425, 743.889,
        699.498, 657.297, 617.242, 579.24, 543.177, 508.93, 476.381, 445.423, 415.961, 387.915,
        361.216, 335.808, 311.643, 288.683, 266.895, 246.251, 226.726, 208.297, 190.943, 174.638,
        159.36, 145.082, 131.775, 119.409, 107.95, 97.3636, 87.6112, 78.6537, 70.4503, 62.9592,
        56.1382, 49.9448, 44.3368, 39.2727, 34.7122, 30.6158, 26.9459, 23.6663, 20.743, 18.1435,
        15.8376, 13.797, 11.9953, 10.4082, 9.01332, 7.79015
    ])


def pe_coal_extraction_de_castro_phd_scen_ii(x):
    """
    Real Name: b'pe coal extraction de castro phd scen ii'
    Original Eqn: b'([(1985,2100)-(1599.53,3382.15)],(1985,2081.44),(1986,2135.51),(1987,2188.27),(1988,2239.78),(1989,2290.12),\\\\ (1990,2339.37),(1991,2387.58),(1992,2434.81),(1993,2481.08),(1994,2526.43),\\\\ (1995,2570.82),(1996,2614.21),(1997,2656.54),(1998,2697.73),(1999,2737.64),\\\\ (2000,2776.16),(2001,2813.12),(2002,2848.39),(2003,2881.79),(2004,2913.19),\\\\ (2005,2942.43),(2006,2970.14),(2007,2996.14),(2008,3020.47),(2009,3043.2),\\\\ (2010,3064.45),(2011,3084.36),(2012,3103.16),(2013,3121.08),(2014,3138.41),\\\\ (2015,3155.49),(2016,3171.11),(2017,3180.04),(2018,3181.73),(2019,3175.59),\\\\ (2020,3161.8),(2021,3141.21),(2022,3115.28),(2023,3085.91),(2024,3055.2),\\\\ (2025,3025.33),(2026,2998.72),(2027,2977.04),(2028,2961.66),(2029,2953.52),\\\\ (2030,2953.18),(2031,2960.78),(2032,2976.17),(2033,2998.94),(2034,3028.5),\\\\ (2035,3064.18),(2036,3101.34),(2037,3138.56),(2038,3174.51),(2039,3208.26),\\\\ (2040,3239.24),(2041,3267.14),(2042,3291.87),(2043,3313.47),(2044,3332.03),\\\\ (2045,3347.68),(2046,3360.5),(2047,3370.53),(2048,3377.77),(2049,3382.15),\\\\ (2050,3369.61),(2051,3346.49),(2052,3321.23),(2053,3294.99),(2054,3268.1),\\\\ (2055,3240.42),(2056,3211.63),(2057,3181.37),(2058,3149.3),(2059,3115.17),\\\\ (2060,3078.78),(2061,3040.04),(2062,2998.94),(2063,2955.52),(2064,2909.85),\\\\ (2065,2862.1),(2066,2812.42),(2067,2761.01),(2068,2708.07),(2069,2653.84),\\\\ (2070,2598.53),(2071,2542.37),(2072,2485.58),(2073,2428.5),(2074,2374.08),\\\\ (2075,2323.46),(2076,2276.45),(2077,2232.72),(2078,2191.9),(2079,2153.67),\\\\ (2080,2117.71),(2081,2083.74),(2082,2051.52),(2083,2020.82),(2084,1991.45),\\\\ (2085,1963.21),(2086,1935.96),(2087,1909.56),(2088,1883.85),(2089,1858.74),\\\\ (2090,1834.13),(2091,1809.91),(2092,1786.01),(2093,1762.35),(2094,1738.88),\\\\ (2095,1715.54),(2096,1692.29),(2097,1669.09),(2098,1645.91),(2099,1622.73),\\\\ (2100,1599.53))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        2081.44, 2135.51, 2188.27, 2239.78, 2290.12, 2339.37, 2387.58, 2434.81, 2481.08, 2526.43,
        2570.82, 2614.21, 2656.54, 2697.73, 2737.64, 2776.16, 2813.12, 2848.39, 2881.79, 2913.19,
        2942.43, 2970.14, 2996.14, 3020.47, 3043.2, 3064.45, 3084.36, 3103.16, 3121.08, 3138.41,
        3155.49, 3171.11, 3180.04, 3181.73, 3175.59, 3161.8, 3141.21, 3115.28, 3085.91, 3055.2,
        3025.33, 2998.72, 2977.04, 2961.66, 2953.52, 2953.18, 2960.78, 2976.17, 2998.94, 3028.5,
        3064.18, 3101.34, 3138.56, 3174.51, 3208.26, 3239.24, 3267.14, 3291.87, 3313.47, 3332.03,
        3347.68, 3360.5, 3370.53, 3377.77, 3382.15, 3369.61, 3346.49, 3321.23, 3294.99, 3268.1,
        3240.42, 3211.63, 3181.37, 3149.3, 3115.17, 3078.78, 3040.04, 2998.94, 2955.52, 2909.85,
        2862.1, 2812.42, 2761.01, 2708.07, 2653.84, 2598.53, 2542.37, 2485.58, 2428.5, 2374.08,
        2323.46, 2276.45, 2232.72, 2191.9, 2153.67, 2117.71, 2083.74, 2051.52, 2020.82, 1991.45,
        1963.21, 1935.96, 1909.56, 1883.85, 1858.74, 1834.13, 1809.91, 1786.01, 1762.35, 1738.88,
        1715.54, 1692.29, 1669.09, 1645.91, 1622.73, 1599.53
    ])


def net_gas_extraction_de_castro_phd_scen_i(x):
    """
    Real Name: b'net gas extraction de castro phd scen i'
    Original Eqn: b'([(1985,2100)-(433.76,2360.56)],(1985,1378.15),(1986,1422.43),(1987,1466.37),(1988,1509.97),(1989,1553.27),\\\\ (1990,1596.27),(1991,1639.0),(1992,1681.45),(1993,1723.6),(1994,1765.43),\\\\ (1995,1806.88),(1996,1847.87),(1997,1888.31),(1998,1928.08),(1999,1967.04),\\\\ (2000,2005.02),(2001,2041.85),(2002,2077.35),(2003,2111.34),(2004,2143.61),\\\\ (2005,2174.01),(2006,2202.36),(2007,2228.55),(2008,2252.45),(2009,2274.0),\\\\ (2010,2293.18),(2011,2310.0),(2012,2324.5),(2013,2336.78),(2014,2346.97),\\\\ (2015,2355.23),(2016,2360.56),(2017,2358.93),(2018,2349.91),(2019,2333.02),\\\\ (2020,2308.36),(2021,2276.56),(2022,2238.66),(2023,2196.02),(2024,2150.19),\\\\ (2025,2102.72),(2026,2055.42),(2027,2009.48),(2028,1965.96),(2029,1925.6),\\\\ (2030,1888.94),(2031,1856.22),(2032,1827.53),(2033,1802.76),(2034,1781.69),\\\\ (2035,1764.05),(2036,1748.05),(2037,1733.15),(2038,1718.83),(2039,1704.69),\\\\ (2040,1690.47),(2041,1676.02),(2042,1661.3),(2043,1646.32),(2044,1631.17),\\\\ (2045,1615.96),(2046,1598.98),(2047,1581.36),(2048,1563.41),(2049,1545.42),\\\\ (2050,1521.06),(2051,1491.54),(2052,1462.02),(2053,1433.79),(2054,1407.58),\\\\ (2055,1383.71),(2056,1362.23),(2057,1342.98),(2058,1325.69),(2059,1310.03),\\\\ (2060,1295.68),(2061,1282.28),(2062,1269.52),(2063,1257.12),(2064,1244.82),\\\\ (2065,1232.39),(2066,1219.62),(2067,1206.36),(2068,1192.45),(2069,1177.78),\\\\ (2070,1162.23),(2071,1145.74),(2072,1128.25),(2073,1109.71),(2074,1090.12),\\\\ (2075,1069.47),(2076,1047.78),(2077,1025.09),(2078,1001.45),(2079,976.929),\\\\ (2080,951.611),(2081,925.587),(2082,898.96),(2083,871.837),(2084,844.332),\\\\ (2085,816.56),(2086,788.637),(2087,760.675),(2088,732.784),(2089,705.067),\\\\ (2090,677.624),(2091,650.543),(2092,623.906),(2093,597.787),(2094,572.25),\\\\ (2095,547.351),(2096,523.135),(2097,499.642),(2098,476.902),(2099,454.936),\\\\ (2100,433.76))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        1378.15, 1422.43, 1466.37, 1509.97, 1553.27, 1596.27, 1639.0, 1681.45, 1723.6, 1765.43,
        1806.88, 1847.87, 1888.31, 1928.08, 1967.04, 2005.02, 2041.85, 2077.35, 2111.34, 2143.61,
        2174.01, 2202.36, 2228.55, 2252.45, 2274.0, 2293.18, 2310.0, 2324.5, 2336.78, 2346.97,
        2355.23, 2360.56, 2358.93, 2349.91, 2333.02, 2308.36, 2276.56, 2238.66, 2196.02, 2150.19,
        2102.72, 2055.42, 2009.48, 1965.96, 1925.6, 1888.94, 1856.22, 1827.53, 1802.76, 1781.69,
        1764.05, 1748.05, 1733.15, 1718.83, 1704.69, 1690.47, 1676.02, 1661.3, 1646.32, 1631.17,
        1615.96, 1598.98, 1581.36, 1563.41, 1545.42, 1521.06, 1491.54, 1462.02, 1433.79, 1407.58,
        1383.71, 1362.23, 1342.98, 1325.69, 1310.03, 1295.68, 1282.28, 1269.52, 1257.12, 1244.82,
        1232.39, 1219.62, 1206.36, 1192.45, 1177.78, 1162.23, 1145.74, 1128.25, 1109.71, 1090.12,
        1069.47, 1047.78, 1025.09, 1001.45, 976.929, 951.611, 925.587, 898.96, 871.837, 844.332,
        816.56, 788.637, 760.675, 732.784, 705.067, 677.624, 650.543, 623.906, 597.787, 572.25,
        547.351, 523.135, 499.642, 476.902, 454.936, 433.76
    ])


def pe_gas_extraction_de_castro_phd_scen_ii(x):
    """
    Real Name: b'pe gas extraction de castro phd scen ii'
    Original Eqn: b'([(1985,2100)-(312.966,2731.16)],(1985,1511.25),(1986,1560.28),(1987,1609.0),(1988,1657.46),(1989,1705.67),\\\\ (1990,1753.67),(1991,1801.48),(1992,1849.09),(1993,1896.51),(1994,1943.7),\\\\ (1995,1990.62),(1996,2037.18),(1997,2083.29),(1998,2128.84),(1999,2173.66),\\\\ (2000,2217.6),(2001,2260.46),(2002,2302.05),(2003,2342.18),(2004,2380.64),\\\\ (2005,2417.18),(2006,2452.25),(2007,2485.65),(2008,2517.3),(2009,2547.21),\\\\ (2010,2575.39),(2011,2601.9),(2012,2626.83),(2013,2650.34),(2014,2672.6),\\\\ (2015,2693.85),(2016,2713.04),(2017,2725.69),(2018,2731.16),(2019,2728.82),\\\\ (2020,2718.75),(2021,2701.64),(2022,2678.7),(2023,2651.58),(2024,2622.12),\\\\ (2025,2592.25),(2026,2564.02),(2027,2538.98),(2028,2518.29),(2029,2502.75),\\\\ (2030,2492.79),(2031,2488.48),(2032,2489.57),(2033,2495.59),(2034,2505.9),\\\\ (2035,2519.76),(2036,2533.25),(2037,2544.98),(2038,2553.75),(2039,2558.7),\\\\ (2040,2559.31),(2041,2555.33),(2042,2546.69),(2043,2533.45),(2044,2515.76),\\\\ (2045,2493.79),(2046,2467.71),(2047,2437.67),(2048,2403.82),(2049,2366.26),\\\\ (2050,2315.78),(2051,2256.66),(2052,2195.62),(2053,2133.79),(2054,2071.61),\\\\ (2055,2009.2),(2056,1946.54),(2057,1883.58),(2058,1820.32),(2059,1756.81),\\\\ (2060,1693.17),(2061,1629.56),(2062,1566.17),(2063,1503.21),(2064,1440.92),\\\\ (2065,1379.52),(2066,1319.21),(2067,1260.2),(2068,1202.66),(2069,1146.75),\\\\ (2070,1092.58),(2071,1040.26),(2072,989.855),(2073,941.438),(2074,895.994),\\\\ (2075,853.858),(2076,814.762),(2077,778.406),(2078,744.501),(2079,712.786),\\\\ (2080,683.028),(2081,655.029),(2082,628.61),(2083,603.618),(2084,579.92),\\\\ (2085,557.398),(2086,535.948),(2087,515.482),(2088,495.919),(2089,477.189),\\\\ (2090,459.233),(2091,441.995),(2092,425.428),(2093,409.491),(2094,394.147),\\\\ (2095,379.364),(2096,365.113),(2097,351.369),(2098,338.109),(2099,325.314),\\\\ (2100,312.966))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        1511.25, 1560.28, 1609.0, 1657.46, 1705.67, 1753.67, 1801.48, 1849.09, 1896.51, 1943.7,
        1990.62, 2037.18, 2083.29, 2128.84, 2173.66, 2217.6, 2260.46, 2302.05, 2342.18, 2380.64,
        2417.18, 2452.25, 2485.65, 2517.3, 2547.21, 2575.39, 2601.9, 2626.83, 2650.34, 2672.6,
        2693.85, 2713.04, 2725.69, 2731.16, 2728.82, 2718.75, 2701.64, 2678.7, 2651.58, 2622.12,
        2592.25, 2564.02, 2538.98, 2518.29, 2502.75, 2492.79, 2488.48, 2489.57, 2495.59, 2505.9,
        2519.76, 2533.25, 2544.98, 2553.75, 2558.7, 2559.31, 2555.33, 2546.69, 2533.45, 2515.76,
        2493.79, 2467.71, 2437.67, 2403.82, 2366.26, 2315.78, 2256.66, 2195.62, 2133.79, 2071.61,
        2009.2, 1946.54, 1883.58, 1820.32, 1756.81, 1693.17, 1629.56, 1566.17, 1503.21, 1440.92,
        1379.52, 1319.21, 1260.2, 1202.66, 1146.75, 1092.58, 1040.26, 989.855, 941.438, 895.994,
        853.858, 814.762, 778.406, 744.501, 712.786, 683.028, 655.029, 628.61, 603.618, 579.92,
        557.398, 535.948, 515.482, 495.919, 477.189, 459.233, 441.995, 425.428, 409.491, 394.147,
        379.364, 365.113, 351.369, 338.109, 325.314, 312.966
    ])


def net_gas_extraction_de_castro_phd_scen_iii(x):
    """
    Real Name: b'net gas extraction de castro phd scen iii'
    Original Eqn: b'([(1985,2100)-(8.39349,2350.38)],(1985,1378.15),(1986,1422.43),(1987,1466.37),(1988,1509.97),(1989,1553.27),\\\\ (1990,1596.27),(1991,1639.0),(1992,1681.45),(1993,1723.6),(1994,1765.43),\\\\ (1995,1806.88),(1996,1847.87),(1997,1888.31),(1998,1928.08),(1999,1967.04),\\\\ (2000,2005.02),(2001,2041.85),(2002,2077.35),(2003,2111.34),(2004,2143.61),\\\\ (2005,2174.01),(2006,2202.36),(2007,2228.55),(2008,2252.45),(2009,2274.0),\\\\ (2010,2293.18),(2011,2310.0),(2012,2324.47),(2013,2336.18),(2014,2344.72),\\\\ (2015,2349.88),(2016,2350.38),(2017,2342.04),(2018,2324.36),(2019,2296.96),\\\\ (2020,2260.1),(2021,2214.64),(2022,2161.88),(2023,2103.47),(2024,2041.17),\\\\ (2025,1976.72),(2026,1911.72),(2027,1847.53),(2028,1785.2),(2029,1725.49),\\\\ (2030,1668.87),(2031,1615.53),(2032,1565.49),(2033,1518.59),(2034,1474.56),\\\\ (2035,1433.08),(2036,1393.24),(2037,1354.7),(2038,1317.14),(2039,1280.29),\\\\ (2040,1243.98),(2041,1208.07),(2042,1172.48),(2043,1137.16),(2044,1102.09),\\\\ (2045,1067.27),(2046,1032.71),(2047,998.441),(2048,964.476),(2049,930.845),\\\\ (2050,893.625),(2051,852.817),(2052,811.701),(2053,771.01),(2054,731.211),\\\\ (2055,692.579),(2056,655.254),(2057,619.284),(2058,584.664),(2059,551.358),\\\\ (2060,519.318),(2061,488.491),(2062,458.831),(2063,430.297),(2064,402.855),\\\\ (2065,376.484),(2066,351.166),(2067,326.892),(2068,303.655),(2069,281.454),\\\\ (2070,260.289),(2071,240.158),(2072,221.061),(2073,202.995),(2074,185.952),\\\\ (2075,169.922),(2076,154.893),(2077,140.845),(2078,127.756),(2079,115.6),\\\\ (2080,104.347),(2081,93.9612),(2082,84.4072),(2083,75.6455),(2084,67.6349),\\\\ (2085,60.3331),(2086,53.697),(2087,47.6834),(2088,42.2492),(2089,37.3523),\\\\ (2090,32.9516),(2091,29.0072),(2092,25.481),(2093,22.3367),(2094,19.5399),\\\\ (2095,17.0583),(2096,14.8618),(2097,12.922),(2098,11.2131),(2099,9.71091),\\\\ (2100,8.39349))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        1378.15, 1422.43, 1466.37, 1509.97, 1553.27, 1596.27, 1639.0, 1681.45, 1723.6, 1765.43,
        1806.88, 1847.87, 1888.31, 1928.08, 1967.04, 2005.02, 2041.85, 2077.35, 2111.34, 2143.61,
        2174.01, 2202.36, 2228.55, 2252.45, 2274.0, 2293.18, 2310.0, 2324.47, 2336.18, 2344.72,
        2349.88, 2350.38, 2342.04, 2324.36, 2296.96, 2260.1, 2214.64, 2161.88, 2103.47, 2041.17,
        1976.72, 1911.72, 1847.53, 1785.2, 1725.49, 1668.87, 1615.53, 1565.49, 1518.59, 1474.56,
        1433.08, 1393.24, 1354.7, 1317.14, 1280.29, 1243.98, 1208.07, 1172.48, 1137.16, 1102.09,
        1067.27, 1032.71, 998.441, 964.476, 930.845, 893.625, 852.817, 811.701, 771.01, 731.211,
        692.579, 655.254, 619.284, 584.664, 551.358, 519.318, 488.491, 458.831, 430.297, 402.855,
        376.484, 351.166, 326.892, 303.655, 281.454, 260.289, 240.158, 221.061, 202.995, 185.952,
        169.922, 154.893, 140.845, 127.756, 115.6, 104.347, 93.9612, 84.4072, 75.6455, 67.6349,
        60.3331, 53.697, 47.6834, 42.2492, 37.3523, 32.9516, 29.0072, 25.481, 22.3367, 19.5399,
        17.0583, 14.8618, 12.922, 11.2131, 9.71091, 8.39349
    ])


def net_coal_extraction_de_castro_phd_scen_iii(x):
    """
    Real Name: b'net coal extraction de castro phd scen iii'
    Original Eqn: b'([(1985,2100)-(12.3777,2873.47)],(1985,1945.63),(1986,1995.96),(1987,2045.03),(1988,2092.89),(1989,2139.62),\\\\ (1990,2185.28),(1991,2229.93),(1992,2273.61),(1993,2316.36),(1994,2358.19),\\\\ (1995,2399.06),(1996,2438.96),(1997,2477.8),(1998,2515.5),(1999,2551.95),\\\\ (2000,2587.03),(2001,2620.58),(2002,2652.48),(2003,2682.56),(2004,2710.7),\\\\ (2005,2736.76),(2006,2760.66),(2007,2782.31),(2008,2801.7),(2009,2818.82),\\\\ (2010,2833.73),(2011,2846.52),(2012,2857.31),(2013,2865.65),(2014,2871.1),\\\\ (2015,2873.47),(2016,2871.23),(2017,2859.31),(2018,2837.16),(2019,2804.26),\\\\ (2020,2760.86),(2021,2707.91),(2022,2646.88),(2023,2579.6),(2024,2508.07),\\\\ (2025,2434.29),(2026,2360.07),(2027,2286.98),(2028,2216.23),(2029,2148.71),\\\\ (2030,2084.94),(2031,2025.17),(2032,1969.39),(2033,1917.4),(2034,1868.88),\\\\ (2035,1823.41),(2036,1779.85),(2037,1737.75),(2038,1696.69),(2039,1656.32),\\\\ (2040,1616.38),(2041,1576.69),(2042,1537.11),(2043,1497.56),(2044,1458.0),\\\\ (2045,1418.41),(2046,1378.78),(2047,1339.14),(2048,1299.51),(2049,1259.91),\\\\ (2050,1215.03),(2051,1164.71),(2052,1113.39),(2053,1062.05),(2054,1011.37),\\\\ (2055,961.747),(2056,913.409),(2057,866.46),(2058,820.93),(2059,776.805),\\\\ (2060,734.051),(2061,692.63),(2062,652.506),(2063,613.653),(2064,576.054),\\\\ (2065,539.706),(2066,504.611),(2067,470.782),(2068,438.236),(2069,406.994),\\\\ (2070,377.077),(2071,348.507),(2072,321.3),(2073,295.471),(2074,271.027),\\\\ (2075,247.969),(2076,226.292),(2077,205.981),(2078,187.015),(2079,169.365),\\\\ (2080,152.995),(2081,137.864),(2082,123.924),(2083,111.123),(2084,99.4056),\\\\ (2085,88.714),(2086,78.9881),(2087,70.1672),(2088,62.1905),(2089,54.9978),\\\\ (2090,48.5302),(2091,42.7303),(2092,37.5432),(2093,32.916),(2094,28.7988),\\\\ (2095,25.1446),(2096,21.9093),(2097,19.0516),(2098,16.5334),(2099,14.3195),\\\\ (2100,12.3777))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        1945.63, 1995.96, 2045.03, 2092.89, 2139.62, 2185.28, 2229.93, 2273.61, 2316.36, 2358.19,
        2399.06, 2438.96, 2477.8, 2515.5, 2551.95, 2587.03, 2620.58, 2652.48, 2682.56, 2710.7,
        2736.76, 2760.66, 2782.31, 2801.7, 2818.82, 2833.73, 2846.52, 2857.31, 2865.65, 2871.1,
        2873.47, 2871.23, 2859.31, 2837.16, 2804.26, 2760.86, 2707.91, 2646.88, 2579.6, 2508.07,
        2434.29, 2360.07, 2286.98, 2216.23, 2148.71, 2084.94, 2025.17, 1969.39, 1917.4, 1868.88,
        1823.41, 1779.85, 1737.75, 1696.69, 1656.32, 1616.38, 1576.69, 1537.11, 1497.56, 1458.0,
        1418.41, 1378.78, 1339.14, 1299.51, 1259.91, 1215.03, 1164.71, 1113.39, 1062.05, 1011.37,
        961.747, 913.409, 866.46, 820.93, 776.805, 734.051, 692.63, 652.506, 613.653, 576.054,
        539.706, 504.611, 470.782, 438.236, 406.994, 377.077, 348.507, 321.3, 295.471, 271.027,
        247.969, 226.292, 205.981, 187.015, 169.365, 152.995, 137.864, 123.924, 111.123, 99.4056,
        88.714, 78.9881, 70.1672, 62.1905, 54.9978, 48.5302, 42.7303, 37.5432, 32.916, 28.7988,
        25.1446, 21.9093, 19.0516, 16.5334, 14.3195, 12.3777
    ])


def net_coal_extraction_de_castro_phd_scen_i(x):
    """
    Real Name: b'net coal extraction de castro phd scen i'
    Original Eqn: b'([(1985,2100)-(433.76,2360.56)],(1985,1378.15),(1986,1422.43),(1987,1466.37),(1988,1509.97),(1989,1553.27),\\\\ (1990,1596.27),(1991,1639.0),(1992,1681.45),(1993,1723.6),(1994,1765.43),\\\\ (1995,1806.88),(1996,1847.87),(1997,1888.31),(1998,1928.08),(1999,1967.04),\\\\ (2000,2005.02),(2001,2041.85),(2002,2077.35),(2003,2111.34),(2004,2143.61),\\\\ (2005,2174.01),(2006,2202.36),(2007,2228.55),(2008,2252.45),(2009,2274.0),\\\\ (2010,2293.18),(2011,2310.0),(2012,2324.5),(2013,2336.78),(2014,2346.97),\\\\ (2015,2355.23),(2016,2360.56),(2017,2358.93),(2018,2349.91),(2019,2333.02),\\\\ (2020,2308.36),(2021,2276.56),(2022,2238.66),(2023,2196.02),(2024,2150.19),\\\\ (2025,2102.72),(2026,2055.42),(2027,2009.48),(2028,1965.96),(2029,1925.6),\\\\ (2030,1888.94),(2031,1856.22),(2032,1827.53),(2033,1802.76),(2034,1781.69),\\\\ (2035,1764.05),(2036,1748.05),(2037,1733.15),(2038,1718.83),(2039,1704.69),\\\\ (2040,1690.47),(2041,1676.02),(2042,1661.3),(2043,1646.32),(2044,1631.17),\\\\ (2045,1615.96),(2046,1598.98),(2047,1581.36),(2048,1563.41),(2049,1545.42),\\\\ (2050,1521.06),(2051,1491.54),(2052,1462.02),(2053,1433.79),(2054,1407.58),\\\\ (2055,1383.71),(2056,1362.23),(2057,1342.98),(2058,1325.69),(2059,1310.03),\\\\ (2060,1295.68),(2061,1282.28),(2062,1269.52),(2063,1257.12),(2064,1244.82),\\\\ (2065,1232.39),(2066,1219.62),(2067,1206.36),(2068,1192.45),(2069,1177.78),\\\\ (2070,1162.23),(2071,1145.74),(2072,1128.25),(2073,1109.71),(2074,1090.12),\\\\ (2075,1069.47),(2076,1047.78),(2077,1025.09),(2078,1001.45),(2079,976.929),\\\\ (2080,951.611),(2081,925.587),(2082,898.96),(2083,871.837),(2084,844.332),\\\\ (2085,816.56),(2086,788.637),(2087,760.675),(2088,732.784),(2089,705.067),\\\\ (2090,677.624),(2091,650.543),(2092,623.906),(2093,597.787),(2094,572.25),\\\\ (2095,547.351),(2096,523.135),(2097,499.642),(2098,476.902),(2099,454.936),\\\\ (2100,433.76))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        1378.15, 1422.43, 1466.37, 1509.97, 1553.27, 1596.27, 1639.0, 1681.45, 1723.6, 1765.43,
        1806.88, 1847.87, 1888.31, 1928.08, 1967.04, 2005.02, 2041.85, 2077.35, 2111.34, 2143.61,
        2174.01, 2202.36, 2228.55, 2252.45, 2274.0, 2293.18, 2310.0, 2324.5, 2336.78, 2346.97,
        2355.23, 2360.56, 2358.93, 2349.91, 2333.02, 2308.36, 2276.56, 2238.66, 2196.02, 2150.19,
        2102.72, 2055.42, 2009.48, 1965.96, 1925.6, 1888.94, 1856.22, 1827.53, 1802.76, 1781.69,
        1764.05, 1748.05, 1733.15, 1718.83, 1704.69, 1690.47, 1676.02, 1661.3, 1646.32, 1631.17,
        1615.96, 1598.98, 1581.36, 1563.41, 1545.42, 1521.06, 1491.54, 1462.02, 1433.79, 1407.58,
        1383.71, 1362.23, 1342.98, 1325.69, 1310.03, 1295.68, 1282.28, 1269.52, 1257.12, 1244.82,
        1232.39, 1219.62, 1206.36, 1192.45, 1177.78, 1162.23, 1145.74, 1128.25, 1109.71, 1090.12,
        1069.47, 1047.78, 1025.09, 1001.45, 976.929, 951.611, 925.587, 898.96, 871.837, 844.332,
        816.56, 788.637, 760.675, 732.784, 705.067, 677.624, 650.543, 623.906, 597.787, 572.25,
        547.351, 523.135, 499.642, 476.902, 454.936, 433.76
    ])


def tnes_de_castro_phd_scen_iii(x):
    """
    Real Name: b'tnes de castro phd scen iii'
    Original Eqn: b'([(1985,2100)-(1742.67,11139.1)],(1985,7173.13),(1986,7368.39),(1987,7560.95),(1988,7750.95),(1989,7938.54),\\\\ (1990,8123.85),(1991,8306.94),(1992,8487.87),(1993,8666.6),(1994,8843.01),\\\\ (1995,9016.91),(1996,9188.0),(1997,9355.9),(1998,9520.11),(1999,9680.06),\\\\ (2000,9835.12),(2001,9984.57),(2002,10127.7),(2003,10263.7),(2004,10391.9),\\\\ (2005,10511.6),(2006,10622.1),(2007,10723.1),(2008,10814.1),(2009,10894.8),\\\\ (2010,10965.4),(2011,11025.8),(2012,11075.0),(2013,11109.9),(2014,11131.5),\\\\ (2015,11139.1),(2016,11127.4),(2017,11079.5),(2018,10993.9),(2019,10869.3),\\\\ (2020,10707.1),(2021,10511.3),(2022,10287.5),(2023,10042.6),(2024,9783.87),\\\\ (2025,9518.5),(2026,9252.88),(2027,8992.4),(2028,8741.21),(2029,8502.22),\\\\ (2030,8277.14),(2031,8066.69),(2032,7870.72),(2033,7688.5),(2034,7518.87),\\\\ (2035,7360.42),(2036,7209.45),(2037,7064.52),(2038,6924.25),(2039,6787.58),\\\\ (2040,6653.67),(2041,6521.96),(2042,6392.02),(2043,6263.61),(2044,6136.56),\\\\ (2045,6010.8),(2046,5886.31),(2047,5763.1),(2048,5641.19),(2049,5520.62),\\\\ (2050,5379.15),(2051,5222.66),(2052,5064.42),(2053,4907.35),(2054,4753.31),\\\\ (2055,4603.4),(2056,4458.15),(2057,4317.76),(2058,4182.18),(2059,4051.27),\\\\ (2060,3924.82),(2061,3802.6),(2062,3684.43),(2063,3570.15),(2064,3459.62),\\\\ (2065,3352.78),(2066,3249.57),(2067,3149.98),(2068,3054.03),(2069,2961.73),\\\\ (2070,2873.14),(2071,2788.3),(2072,2707.25),(2073,2630.04),(2074,2556.68),\\\\ (2075,2487.21),(2076,2421.6),(2077,2359.84),(2078,2301.9),(2079,2247.7),\\\\ (2080,2197.16),(2081,2150.2),(2082,2106.69),(2083,2066.5),(2084,2029.49),\\\\ (2085,1995.52),(2086,1964.42),(2087,1936.03),(2088,1910.19),(2089,1886.73),\\\\ (2090,1865.5),(2091,1846.32),(2092,1829.04),(2093,1813.51),(2094,1799.59),\\\\ (2095,1787.14),(2096,1776.03),(2097,1766.14),(2098,1757.35),(2099,1749.56),\\\\ (2100,1742.67))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        7173.13, 7368.39, 7560.95, 7750.95, 7938.54, 8123.85, 8306.94, 8487.87, 8666.6, 8843.01,
        9016.91, 9188.0, 9355.9, 9520.11, 9680.06, 9835.12, 9984.57, 10127.7, 10263.7, 10391.9,
        10511.6, 10622.1, 10723.1, 10814.1, 10894.8, 10965.4, 11025.8, 11075.0, 11109.9, 11131.5,
        11139.1, 11127.4, 11079.5, 10993.9, 10869.3, 10707.1, 10511.3, 10287.5, 10042.6, 9783.87,
        9518.5, 9252.88, 8992.4, 8741.21, 8502.22, 8277.14, 8066.69, 7870.72, 7688.5, 7518.87,
        7360.42, 7209.45, 7064.52, 6924.25, 6787.58, 6653.67, 6521.96, 6392.02, 6263.61, 6136.56,
        6010.8, 5886.31, 5763.1, 5641.19, 5520.62, 5379.15, 5222.66, 5064.42, 4907.35, 4753.31,
        4603.4, 4458.15, 4317.76, 4182.18, 4051.27, 3924.82, 3802.6, 3684.43, 3570.15, 3459.62,
        3352.78, 3249.57, 3149.98, 3054.03, 2961.73, 2873.14, 2788.3, 2707.25, 2630.04, 2556.68,
        2487.21, 2421.6, 2359.84, 2301.9, 2247.7, 2197.16, 2150.2, 2106.69, 2066.5, 2029.49,
        1995.52, 1964.42, 1936.03, 1910.19, 1886.73, 1865.5, 1846.32, 1829.04, 1813.51, 1799.59,
        1787.14, 1776.03, 1766.14, 1757.35, 1749.56, 1742.67
    ])


def primary_coal_extraction_de_castro_phd_scen_xmadcoalx(x):
    """
    Real Name: b'primary coal extraction de castro phd scen xmadcoalx'
    Original Eqn: b'([(1985,2100)-(1550.24,5496.15)],(1985,2058.92),(1986,2092.27),(1987,2125.72),(1988,2159.47),(1989,2193.76),\\\\ (1990,2228.81),(1991,2264.86),(1992,2302.13),(1993,2340.84),(1994,2381.18),\\\\ (1995,2423.34),(1996,2467.47),(1997,2513.71),(1998,2562.15),(1999,2612.87),\\\\ (2000,2665.92),(2001,2721.31),(2002,2779.03),(2003,2839.06),(2004,2901.33),\\\\ (2005,2965.74),(2006,3032.57),(2007,3101.67),(2008,3172.97),(2009,3246.4),\\\\ (2010,3321.9),(2011,3399.43),(2012,3478.96),(2013,3560.51),(2014,3644.12),\\\\ (2015,3729.86),(2016,3816.11),(2017,3897.75),(2018,3974.81),(2019,4046.62),\\\\ (2020,4112.97),(2021,4174.06),(2022,4230.44),(2023,4282.94),(2024,4332.57),\\\\ (2025,4380.4),(2026,4427.69),(2027,4475.38),(2028,4524.25),(2029,4574.94),\\\\ (2030,4627.89),(2031,4683.41),(2032,4741.63),(2033,4802.57),(2034,4866.15),\\\\ (2035,4932.23),(2036,4997.04),(2037,5059.9),(2038,5120.05),(2039,5176.96),\\\\ (2040,5230.21),(2041,5279.47),(2042,5324.46),(2043,5364.9),(2044,5400.52),\\\\ (2045,5431.05),(2046,5456.18),(2047,5475.61),(2048,5489.04),(2049,5496.15),\\\\ (2050,5485.53),(2051,5462.41),(2052,5433.0),(2053,5397.99),(2054,5357.58),\\\\ (2055,5311.76),(2056,5260.45),(2057,5203.57),(2058,5141.1),(2059,5073.11),\\\\ (2060,4999.72),(2061,4921.11),(2062,4837.56),(2063,4749.39),(2064,4656.95),\\\\ (2065,4560.64),(2066,4460.9),(2067,4358.16),(2068,4252.9),(2069,4145.55),\\\\ (2070,4036.59),(2071,3926.47),(2072,3815.6),(2073,3704.47),(2074,3595.32),\\\\ (2075,3489.22),(2076,3386.16),(2077,3286.01),(2078,3188.63),(2079,3093.87),\\\\ (2080,3001.58),(2081,2911.63),(2082,2823.91),(2083,2738.31),(2084,2654.74),\\\\ (2085,2573.11),(2086,2493.35),(2087,2415.41),(2088,2339.22),(2089,2264.73),\\\\ (2090,2191.92),(2091,2120.74),(2092,2051.16),(2093,1983.17),(2094,1916.73),\\\\ (2095,1851.84),(2096,1788.49),(2097,1726.66),(2098,1666.35),(2099,1607.54),\\\\ (2100,1550.24))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        2058.92, 2092.27, 2125.72, 2159.47, 2193.76, 2228.81, 2264.86, 2302.13, 2340.84, 2381.18,
        2423.34, 2467.47, 2513.71, 2562.15, 2612.87, 2665.92, 2721.31, 2779.03, 2839.06, 2901.33,
        2965.74, 3032.57, 3101.67, 3172.97, 3246.4, 3321.9, 3399.43, 3478.96, 3560.51, 3644.12,
        3729.86, 3816.11, 3897.75, 3974.81, 4046.62, 4112.97, 4174.06, 4230.44, 4282.94, 4332.57,
        4380.4, 4427.69, 4475.38, 4524.25, 4574.94, 4627.89, 4683.41, 4741.63, 4802.57, 4866.15,
        4932.23, 4997.04, 5059.9, 5120.05, 5176.96, 5230.21, 5279.47, 5324.46, 5364.9, 5400.52,
        5431.05, 5456.18, 5475.61, 5489.04, 5496.15, 5485.53, 5462.41, 5433.0, 5397.99, 5357.58,
        5311.76, 5260.45, 5203.57, 5141.1, 5073.11, 4999.72, 4921.11, 4837.56, 4749.39, 4656.95,
        4560.64, 4460.9, 4358.16, 4252.9, 4145.55, 4036.59, 3926.47, 3815.6, 3704.47, 3595.32,
        3489.22, 3386.16, 3286.01, 3188.63, 3093.87, 3001.58, 2911.63, 2823.91, 2738.31, 2654.74,
        2573.11, 2493.35, 2415.41, 2339.22, 2264.73, 2191.92, 2120.74, 2051.16, 1983.17, 1916.73,
        1851.84, 1788.49, 1726.66, 1666.35, 1607.54, 1550.24
    ])


def tpes_de_castro_phd_scen_ii(x):
    """
    Real Name: b'tpes de castro phd scen ii'
    Original Eqn: b'([(1985,2100)-(7749.13,25405.8)],(1985,7749.13),(1986,7949.4),(1987,8160.47),(1988,8369.05),(1989,8575.33),\\\\ (1990,8779.44),(1991,8981.51),(1992,9181.61),(1993,9379.72),(1994,9575.75),\\\\ (1995,9769.52),(1996,9960.74),(1997,10149.0),(1998,10333.8),(1999,10514.5),\\\\ (2000,10690.6),(2001,10861.1),(2002,11025.4),(2003,11182.6),(2004,11331.9),\\\\ (2005,11472.6),(2006,11613.1),(2007,11744.0),(2008,11868.2),(2009,11985.7),\\\\ (2010,12096.8),(2011,12202.0),(2012,12302.1),(2013,12398.0),(2014,12490.6),\\\\ (2015,12581.3),(2016,12667.2),(2017,12730.0),(2018,12767.9),(2019,12779.1),\\\\ (2020,12764.7),(2021,12728.4),(2022,12676.0),(2023,12615.0),(2024,12553.4),\\\\ (2025,12499.7),(2026,12465.2),(2027,12453.3),(2028,12470.3),(2029,12519.7),\\\\ (2030,12603.9),(2031,12723.6),(2032,12878.5),(2033,13067.2),(2034,13287.8),\\\\ (2035,13538.2),(2036,13805.0),(2037,14082.5),(2038,14367.0),(2039,14656.3),\\\\ (2040,14949.0),(2041,15244.7),(2042,15543.8),(2043,15846.7),(2044,16154.3),\\\\ (2045,16467.1),(2046,16785.7),(2047,17110.0),(2048,17439.8),(2049,17774.5),\\\\ (2050,18113.2),(2051,18354.1),(2052,18638.3),(2053,18929.8),(2054,19227.6),\\\\ (2055,19529.3),(2056,19832.1),(2057,20132.6),(2058,20427.7),(2059,20714.2),\\\\ (2060,20989.2),(2061,21250.3),(2062,21494.8),(2063,21720.8),(2064,21926.3),\\\\ (2065,22109.7),(2066,22269.4),(2067,22404.4),(2068,22513.5),(2069,22596.2),\\\\ (2070,22651.7),(2071,22679.9),(2072,22680.6),(2073,22664.5),(2074,22677.2),\\\\ (2075,22706.2),(2076,22750.8),(2077,22809.7),(2078,22881.7),(2079,22965.5),\\\\ (2080,23059.8),(2081,23163.4),(2082,23275.1),(2083,23393.7),(2084,23518.0),\\\\ (2085,23647.0),(2086,23779.6),(2087,23914.5),(2088,24050.7),(2089,24187.2),\\\\ (2090,24322.8),(2091,24456.4),(2092,24587.0),(2093,24713.6),(2094,24835.1),\\\\ (2095,24950.6),(2096,25059.1),(2097,25159.7),(2098,25251.6),(2099,25333.9),\\\\ (2100,25405.8))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
        2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
        2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
        2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
        2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
        2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
        2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
        2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100
    ], [
        7749.13, 7949.4, 8160.47, 8369.05, 8575.33, 8779.44, 8981.51, 9181.61, 9379.72, 9575.75,
        9769.52, 9960.74, 10149.0, 10333.8, 10514.5, 10690.6, 10861.1, 11025.4, 11182.6, 11331.9,
        11472.6, 11613.1, 11744.0, 11868.2, 11985.7, 12096.8, 12202.0, 12302.1, 12398.0, 12490.6,
        12581.3, 12667.2, 12730.0, 12767.9, 12779.1, 12764.7, 12728.4, 12676.0, 12615.0, 12553.4,
        12499.7, 12465.2, 12453.3, 12470.3, 12519.7, 12603.9, 12723.6, 12878.5, 13067.2, 13287.8,
        13538.2, 13805.0, 14082.5, 14367.0, 14656.3, 14949.0, 15244.7, 15543.8, 15846.7, 16154.3,
        16467.1, 16785.7, 17110.0, 17439.8, 17774.5, 18113.2, 18354.1, 18638.3, 18929.8, 19227.6,
        19529.3, 19832.1, 20132.6, 20427.7, 20714.2, 20989.2, 21250.3, 21494.8, 21720.8, 21926.3,
        22109.7, 22269.4, 22404.4, 22513.5, 22596.2, 22651.7, 22679.9, 22680.6, 22664.5, 22677.2,
        22706.2, 22750.8, 22809.7, 22881.7, 22965.5, 23059.8, 23163.4, 23275.1, 23393.7, 23518.0,
        23647.0, 23779.6, 23914.5, 24050.7, 24187.2, 24322.8, 24456.4, 24587.0, 24713.6, 24835.1,
        24950.6, 25059.1, 25159.7, 25251.6, 25333.9, 25405.8
    ])


def table_max_extraction_conv_gas_low_mohr15(x):
    """
    Real Name: b'table max extraction conv gas low mohr15'
    Original Eqn: b'([(0,11000)-(0.0,124.03503097023999)],(0,0.0),(1100,49.9516317103108),(2200,93.2254158071833),(3300,118.25322742687901),(4400,122.34766617760398),\\\\ (5500,124.03503097023999),(6600,124.03503097023999),(7700,124.03503097023999),(8800,124.03503097023999),(9900,124.03503097023999),\\\\ (11000,124.03503097023999))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [0, 1100, 2200, 3300, 4400, 5500, 6600, 7700, 8800, 9900, 11000], [
        0.0, 49.9516317103108, 93.2254158071833, 118.25322742687901, 122.34766617760398,
        124.03503097023999, 124.03503097023999, 124.03503097023999, 124.03503097023999,
        124.03503097023999, 124.03503097023999
    ])


def table_max_extraction_conv_gas_user_defined(x):
    """
    Real Name: b'table max extraction conv gas user defined'
    Original Eqn: b'([(0,14500)-(0.0,169.474)],(0,0.0),(500,29.4861),(1000,56.0597),(1500,77.0),(2000,94.7098),\\\\ (2500,111.198),(3000,124.131),(3500,136.26),(4000,147.073),(4500,154.041),\\\\ (5000,160.5),(5500,165.566),(6000,167.496),(6500,169.176),(7000,169.474),\\\\ (7500,169.474),(8000,169.474),(8500,169.474),(9000,169.474),(9500,169.474),\\\\ (10000,169.474),(10500,169.474),(11000,169.474),(11500,169.474),(12000,169.474),\\\\ (12500,169.474),(13000,169.474),(13500,169.474),(14000,169.474),(14500,169.474))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000,
        14500
    ], [
        0.0, 29.4861, 56.0597, 77.0, 94.7098, 111.198, 124.131, 136.26, 147.073, 154.041, 160.5,
        165.566, 167.496, 169.176, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474,
        169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474
    ])


def table_max_extraction_total_gas_bg_mohr12(x):
    """
    Real Name: b'table max extraction total gas bg mohr12'
    Original Eqn: b'([(0,20000)-(0.0,159.247)],(0,0.0),(1000,27.4739),(2000,42.1041),(3000,51.2745),(4000,58.1215),\\\\ (5000,69.3726),(6000,79.5334),(7000,99.1636),(8000,115.575),(9000,128.798),\\\\ (10000,138.387),(11000,147.465),(12000,150.753),(13000,157.008),(14000,159.247),\\\\ (15000,159.247),(16000,159.247),(17000,159.247),(18000,159.247),(19000,159.247),\\\\ (20000,159.247))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000,
        15000, 16000, 17000, 18000, 19000, 20000
    ], [
        0.0, 27.4739, 42.1041, 51.2745, 58.1215, 69.3726, 79.5334, 99.1636, 115.575, 128.798,
        138.387, 147.465, 150.753, 157.008, 159.247, 159.247, 159.247, 159.247, 159.247, 159.247,
        159.247
    ])


def table_max_extraction_total_gas_laherrere10(x):
    """
    Real Name: b'table max extraction total gas laherrere10'
    Original Eqn: b'([(0,13000)-(0.0,152.89453583099998)],(0,0.0),(500,23.86208767023),(1000,44.63101020582),(1500,62.30666199473999),(2000,77.77291011605999),\\\\ (2500,93.88909467),(3000,107.8214336676),(3500,119.75242469669998),(4000,129.03255377280001),(4500,137.87016844320001),\\\\ (5000,144.16042095),(5500,148.91718678119997),(6000,151.78032891450002),(6500,152.89453583099998),(7000,152.89453583099998),\\\\ (7500,152.89453583099998),(8000,152.89453583099998),(8500,152.89453583099998),(9000,152.89453583099998),(9500,152.89453583099998),\\\\ (10000,152.89453583099998),(10500,152.89453583099998),(11000,152.89453583099998),(11500,152.89453583099998),(12000,152.89453583099998),\\\\ (12500,152.89453583099998),(13000,152.89453583099998))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000
    ], [
        0.0, 23.86208767023, 44.63101020582, 62.30666199473999, 77.77291011605999, 93.88909467,
        107.8214336676, 119.75242469669998, 129.03255377280001, 137.87016844320001, 144.16042095,
        148.91718678119997, 151.78032891450002, 152.89453583099998, 152.89453583099998,
        152.89453583099998, 152.89453583099998, 152.89453583099998, 152.89453583099998,
        152.89453583099998, 152.89453583099998, 152.89453583099998, 152.89453583099998,
        152.89453583099998, 152.89453583099998, 152.89453583099998, 152.89453583099998
    ])


def table_max_extraction_total_gas_user_defined(x):
    """
    Real Name: b'table max extraction total gas user defined'
    Original Eqn: b'([(0,14500)-(0.0,169.474)],(0,0.0),(500,29.4861),(1000,56.0597),(1500,77.0),(2000,94.7098),\\\\ (2500,111.198),(3000,124.131),(3500,136.26),(4000,147.073),(4500,154.041),\\\\ (5000,160.5),(5500,165.566),(6000,167.496),(6500,169.176),(7000,169.474),\\\\ (7500,169.474),(8000,169.474),(8500,169.474),(9000,169.474),(9500,169.474),\\\\ (10000,169.474),(10500,169.474),(11000,169.474),(11500,169.474),(12000,169.474),\\\\ (12500,169.474),(13000,169.474),(13500,169.474),(14000,169.474),(14500,169.474))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000,
        14500
    ], [
        0.0, 29.4861, 56.0597, 77.0, 94.7098, 111.198, 124.131, 136.26, 147.073, 154.041, 160.5,
        165.566, 167.496, 169.176, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474,
        169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474
    ])


def table_max_extraction_unconv_gas_bg_mohr15(x):
    """
    Real Name: b'table max extraction unconv gas bg mohr15'
    Original Eqn: b'([(0,14500)-(0.0,134.974)],(0,0.0),(500,36.281),(1000,59.2482),(1500,79.7156),(2000,92.6562),\\\\ (2500,104.84),(3000,114.916),(3500,121.97),(4000,128.037),(4500,132.221),\\\\ (5000,134.519),(5500,134.974),(6000,134.974),(6500,134.974),(7000,134.974),\\\\ (7500,134.974),(8000,134.974),(8500,134.974),(9000,134.974),(9500,134.974),\\\\ (10000,134.974),(10500,134.974),(11000,134.974),(11500,134.974),(12000,134.974),\\\\ (12500,134.974),(13000,134.974),(13500,134.974),(14000,134.974),(14500,134.974))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000,
        14500
    ], [
        0.0, 36.281, 59.2482, 79.7156, 92.6562, 104.84, 114.916, 121.97, 128.037, 132.221, 134.519,
        134.974, 134.974, 134.974, 134.974, 134.974, 134.974, 134.974, 134.974, 134.974, 134.974,
        134.974, 134.974, 134.974, 134.974, 134.974, 134.974, 134.974, 134.974, 134.974
    ])


def table_max_extraction_unconv_gas_high_mohr15(x):
    """
    Real Name: b'table max extraction unconv gas high mohr15'
    Original Eqn: b'([(0,24000)-(0.0,205.615)],(0,0.0),(1500,83.3997),(3000,135.51),(4500,170.831),(6000,191.804),\\\\ (7500,202.817),(9000,205.615),(10500,205.615),(12000,205.615),(13500,205.615),\\\\ (15000,205.615),(16500,205.615),(18000,205.615),(19500,205.615),(21000,205.615),\\\\ (22500,205.615),(24000,205.615))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 1500, 3000, 4500, 6000, 7500, 9000, 10500, 12000, 13500, 15000, 16500, 18000, 19500,
        21000, 22500, 24000
    ], [
        0.0, 83.3997, 135.51, 170.831, 191.804, 202.817, 205.615, 205.615, 205.615, 205.615,
        205.615, 205.615, 205.615, 205.615, 205.615, 205.615, 205.615
    ])


def table_max_extraction_unconv_gas_low_mohr15(x):
    """
    Real Name: b'table max extraction unconv gas low mohr15'
    Original Eqn: b'([(0,2800)-(0.0,35.9832)],(0,0.0),(400,0.0),(800,0.0),(1200,0.0),(1600,35.9832),\\\\ (2000,35.9832),(2400,35.9832),(2800,35.9832))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [0, 400, 800, 1200, 1600, 2000, 2400, 2800],
                            [0.0, 0.0, 0.0, 0.0, 35.9832, 35.9832, 35.9832, 35.9832])


def table_max_extraction_unconv_gas_user_defined(x):
    """
    Real Name: b'table max extraction unconv gas user defined'
    Original Eqn: b'([(0,14500)-(0.0,169.474)],(0,0.0),(500,29.4861),(1000,56.0597),(1500,77.0),(2000,94.7098),\\\\ (2500,111.198),(3000,124.131),(3500,136.26),(4000,147.073),(4500,154.041),\\\\ (5000,160.5),(5500,165.566),(6000,167.496),(6500,169.176),(7000,169.474),\\\\ (7500,169.474),(8000,169.474),(8500,169.474),(9000,169.474),(9500,169.474),\\\\ (10000,169.474),(10500,169.474),(11000,169.474),(11500,169.474),(12000,169.474),\\\\ (12500,169.474),(13000,169.474),(13500,169.474),(14000,169.474),(14500,169.474))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000,
        14500
    ], [
        0.0, 29.4861, 56.0597, 77.0, 94.7098, 111.198, 124.131, 136.26, 147.073, 154.041, 160.5,
        165.566, 167.496, 169.176, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474,
        169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474
    ])


def table_max_extraction_coal_bg_mohr15(x):
    """
    Real Name: b'table max extraction coal bg mohr15'
    Original Eqn: b'([(0,22500)-(0.0,245.94171830000005)],(0,0.0),(1500,45.8067598),(3000,101.45721979999999),(4500,129.918137083),(6000,129.918137083),\\\\ (7500,129.918137083),(9000,140.66041522999998),(10500,172.65528881379996),(12000,210.75409942999997),(13500,245.94171830000005),\\\\ (15000,245.94171830000005),(16500,245.94171830000005),(18000,245.94171830000005),(19500,245.94171830000005),(21000,245.94171830000005),\\\\ (22500,245.94171830000005))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 1500, 3000, 4500, 6000, 7500, 9000, 10500, 12000, 13500, 15000, 16500, 18000, 19500,
        21000, 22500
    ], [
        0.0, 45.8067598, 101.45721979999999, 129.918137083, 129.918137083, 129.918137083,
        140.66041522999998, 172.65528881379996, 210.75409942999997, 245.94171830000005,
        245.94171830000005, 245.94171830000005, 245.94171830000005, 245.94171830000005,
        245.94171830000005, 245.94171830000005
    ])


def table_max_extraction_coal_high_mohr15(x):
    """
    Real Name: b'table max extraction coal high mohr15'
    Original Eqn: b'([(0,31500)-(0.0,274.87091482169996)],(0,0.0),(1500,49.7354913),(3000,91.20222852385001),(4500,93.95328151),(6000,120.98636085000001),\\\\ (7500,142.6042858061),(9000,157.275271969),(10500,170.16619920999997),(12000,187.20167642),(13500,198.71934311599998),\\\\ (15000,213.61074611700002),(16500,228.50740735999997),(18000,252.196010948),(19500,264.94099527149996),(21000,272.123730091),\\\\ (22500,274.87091482169996),(24000,274.87091482169996),(25500,274.87091482169996),(27000,274.87091482169996),(28500,274.87091482169996),\\\\ (30000,274.87091482169996),(31500,274.87091482169996))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 1500, 3000, 4500, 6000, 7500, 9000, 10500, 12000, 13500, 15000, 16500, 18000, 19500,
        21000, 22500, 24000, 25500, 27000, 28500, 30000, 31500
    ], [
        0.0, 49.7354913, 91.20222852385001, 93.95328151, 120.98636085000001, 142.6042858061,
        157.275271969, 170.16619920999997, 187.20167642, 198.71934311599998, 213.61074611700002,
        228.50740735999997, 252.196010948, 264.94099527149996, 272.123730091, 274.87091482169996,
        274.87091482169996, 274.87091482169996, 274.87091482169996, 274.87091482169996,
        274.87091482169996, 274.87091482169996
    ])


def table_max_extraction_coal_low_mohr15(x):
    """
    Real Name: b'table max extraction coal low mohr15'
    Original Eqn: b'([(0,14500)-(0.0,224.4862273680001)],(0,0.0),(500,10.7961939),(1000,41.4887626012),(1500,69.58980656000001),(2000,94.81256219),\\\\ (2500,106.66908508867104),(3000,119.606988),(3500,140.56757997980003),(4000,158.59254590300003),(4500,179.93148888900004),\\\\ (5000,202.8910104403),(5500,214.784730211),(6000,224.11729660400007),(6500,224.4862273680001),(7000,224.4862273680001),\\\\ (7500,224.4862273680001),(8000,224.4862273680001),(8500,224.4862273680001),(9000,224.4862273680001),(9500,224.4862273680001),\\\\ (10000,224.4862273680001),(10500,224.4862273680001),(11000,224.4862273680001),(11500,224.4862273680001),(12000,224.4862273680001),\\\\ (12500,224.4862273680001),(13000,224.4862273680001),(13500,224.4862273680001),(14000,224.4862273680001),(14500,224.4862273680001))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000,
        14500
    ], [
        0.0, 10.7961939, 41.4887626012, 69.58980656000001, 94.81256219, 106.66908508867104,
        119.606988, 140.56757997980003, 158.59254590300003, 179.93148888900004, 202.8910104403,
        214.784730211, 224.11729660400007, 224.4862273680001, 224.4862273680001, 224.4862273680001,
        224.4862273680001, 224.4862273680001, 224.4862273680001, 224.4862273680001,
        224.4862273680001, 224.4862273680001, 224.4862273680001, 224.4862273680001,
        224.4862273680001, 224.4862273680001, 224.4862273680001, 224.4862273680001,
        224.4862273680001, 224.4862273680001
    ])


def table_max_extraction_coal_mohr2012_ej(x):
    """
    Real Name: b'table max extraction coal mohr2012 ej'
    Original Eqn: b'([(0,28000)-(0.0,216.291)],(0,0.0),(2000,50.9743),(4000,81.21),(6000,91.3165),(8000,96.3823),\\\\ (10000,109.46),(12000,123.422),(14000,148.171),(16000,204.223),(18000,216.291),\\\\ (20000,216.291),(22000,216.291),(24000,216.291),(26000,216.291),(28000,216.291))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 2000, 4000, 6000, 8000, 10000, 12000, 14000, 16000, 18000, 20000, 22000, 24000, 26000,
        28000
    ], [
        0.0, 50.9743, 81.21, 91.3165, 96.3823, 109.46, 123.422, 148.171, 204.223, 216.291, 216.291,
        216.291, 216.291, 216.291, 216.291
    ])


def table_max_extraction_coal_user_defined(x):
    """
    Real Name: b'table max extraction coal user defined'
    Original Eqn: b'([(0,14500)-(0.0,169.474)],(0,0.0),(500,29.4861),(1000,56.0597),(1500,77.0),(2000,94.7098),\\\\ (2500,111.198),(3000,124.131),(3500,136.26),(4000,147.073),(4500,154.041),\\\\ (5000,160.5),(5500,165.566),(6000,167.496),(6500,169.176),(7000,169.474),\\\\ (7500,169.474),(8000,169.474),(8500,169.474),(9000,169.474),(9500,169.474),\\\\ (10000,169.474),(10500,169.474),(11000,169.474),(11500,169.474),(12000,169.474),\\\\ (12500,169.474),(13000,169.474),(13500,169.474),(14000,169.474),(14500,169.474))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000,
        14500
    ], [
        0.0, 29.4861, 56.0597, 77.0, 94.7098, 111.198, 124.131, 136.26, 147.073, 154.041, 160.5,
        165.566, 167.496, 169.176, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474,
        169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474, 169.474
    ])


def table_max_extraction_conv_gas_bg_mohr15(x):
    """
    Real Name: b'table max extraction conv gas bg mohr15'
    Original Eqn: b'([(0,13200)-(0.0,134.77)],(0,0.0),(1200,53.7105),(2400,94.1488),(3600,124.386),(4800,132.465),\\\\ (6000,134.77),(7200,134.77),(8400,134.77),(9600,134.77),(10800,134.77),\\\\ (12000,134.77),(13200,134.77))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(
        x, [0, 1200, 2400, 3600, 4800, 6000, 7200, 8400, 9600, 10800, 12000, 13200], [
            0.0, 53.7105, 94.1488, 124.386, 132.465, 134.77, 134.77, 134.77, 134.77, 134.77,
            134.77, 134.77
        ])


def table_max_extraction_conv_gas_high_mohr15(x):
    """
    Real Name: b'table max extraction conv gas high mohr15'
    Original Eqn: b'([(0,22500)-(0.0,218.76844181844524)],(0,0.0),(1500,85.11063547168709),(3000,136.8937293509019),(4500,179.4938495500182),(6000,203.86285809423433),\\\\ (7500,216.27987364278962),(9000,218.76844181844524),(10500,218.76844181844524),(12000,218.76844181844524),(13500,218.76844181844524),\\\\ (15000,218.76844181844524),(16500,218.76844181844524),(18000,218.76844181844524),(19500,218.76844181844524),(21000,218.76844181844524),\\\\ (22500,218.76844181844524))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 1500, 3000, 4500, 6000, 7500, 9000, 10500, 12000, 13500, 15000, 16500, 18000, 19500,
        21000, 22500
    ], [
        0.0, 85.11063547168709, 136.8937293509019, 179.4938495500182, 203.86285809423433,
        216.27987364278962, 218.76844181844524, 218.76844181844524, 218.76844181844524,
        218.76844181844524, 218.76844181844524, 218.76844181844524, 218.76844181844524,
        218.76844181844524, 218.76844181844524, 218.76844181844524
    ])


def table_max_extraction_unconv_oil_bg_mohr15(x):
    """
    Real Name: b'table max extraction unconv oil bg mohr15'
    Original Eqn: b'([(0,10500)-(0.0,138.735)],(0,0.0),(500,11.1694),(1000,20.7262),(1500,46.1364),(2000,67.4689),\\\\ (2500,93.0394),(3000,111.958),(3500,122.983),(4000,129.802),(4500,134.906),\\\\ (5000,138.735),(5500,138.735),(6000,138.735),(6500,138.735),(7000,138.735),\\\\ (7500,138.735),(8000,138.735),(8500,138.735),(9000,138.735),(9500,138.735),\\\\ (10000,138.735),(10500,138.735))'
    Units: b''
    Limits: (None, None)
    Type: lookup

    b''
    """
    return lookup(x, [
        0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
        8000, 8500, 9000, 9500, 10000, 10500
    ], [
        0.0, 11.1694, 20.7262, 46.1364, 67.4689, 93.0394, 111.958, 122.983, 129.802, 134.906,
        138.735, 138.735, 138.735, 138.735, 138.735, 138.735, 138.735, 138.735, 138.735, 138.735,
        138.735, 138.735
    ])


@cache('run')
def year_energy_intensity_target():
    """
    Real Name: b'year energy intensity target'
    Original Eqn: b'if then else(choose energy intensity target method=1,start year modification ei,year change pct energy intensity target )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(choose_energy_intensity_target_method() == 1,
                                  start_year_modification_ei(),
                                  year_change_pct_energy_intensity_target())


@cache('run')
def policy_to_improve_efficiency_speed():
    """
    Real Name: b'policy to improve efficiency speed'
    Original Eqn: b'if then else(choose policies of intensities global or by sector=1,policy to improve efficiency speed by sector [sectors,final sources],policy to improve efficiency speed sector uniform[final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    a = xr.DataArray(data=[policy_to_improve_efficiency_speed_sector_uniform().values]*35,
                     dims=['sectors', 'final sources'],
                     coords={'sectors': _subscript_dict.get('sectors'),
                             'final sources': _subscript_dict.get('final sources')})

    return if_then_else(choose_policies_of_intensities_global_or_by_sector() == 1,
                                  policy_to_improve_efficiency_speed_by_sector(),
                                  a)


@cache('run')
def start_year_modification_ei():
    """
    Real Name: b'start year modification ei'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('step')
def share_biogas_in_pes():
    """
    Real Name: b'share biogas in pes'
    Original Eqn: b'zidz(pes biogas for tfc, pes gases )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(pes_biogas_for_tfc(), pes_gases())


@cache('step')
def fes_total_biogas():
    """
    Real Name: b'fes total biogas'
    Original Eqn: b'share biogas in pes*real fe consumption gases ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_biogas_in_pes() * real_fe_consumption_gases_ej()


@cache('step')
def fes_total_biofuels():
    """
    Real Name: b'fes total biofuels'
    Original Eqn: b'share biofuel in pes*real fe consumption liquids ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_biofuel_in_pes() * real_fe_consumption_liquids_ej()


@cache('step')
def share_biofuel_in_pes():
    """
    Real Name: b'share biofuel in pes'
    Original Eqn: b'zidz(fes total biofuels production ej, pes liquids ej )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(fes_total_biofuels_production_ej(), pes_liquids_ej())


@cache('step')
def share_e_industry_own_use_vs_tfec_in_x2015():
    """
    Real Name: b'share e industry own use vs tfec in x2015'
    Original Eqn: b'if then else(Time<2015, historic share e industry own use vs tfec , aux1 1 1)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2015, historic_share_e_industry_own_use_vs_tfec(),
                                  aux1_1_1())


@cache('step')
def feist_system():
    """
    Real Name: b'feist system'
    Original Eqn: b'share e industry own use vs tfec in x2015*(real tfec-fe tot generation all res elec ej)+total dyn fei res'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_e_industry_own_use_vs_tfec_in_x2015() * (
        real_tfec() - fe_tot_generation_all_res_elec_ej()) + total_dyn_fei_res()


@cache('step')
def aux1_1_1():
    """
    Real Name: b'aux1 1 1'
    Original Eqn: b'delay fixed ( share e industry own use vs tfec in x2015, time step , 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_share_e_industry_own_use_vs_tfec_in_x2015_roundtime_step__time_step___time_step_0_time_step__time_step(
    )


@cache('run')
def efficiency_rate_of_substitution():
    """
    Real Name: b'efficiency rate of substitution'
    Original Eqn: b'if then else(choose policies of intensities global or by sector=1,efficiency rate of substitution by sector [sectors,final sources,final sources1],efficiency rate of substitution sector uniform[final sources,final sources1])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    a = xr.DataArray(data=[efficiency_rate_of_substitution_sector_uniform().values] * 35,
                     coords={'sectors': _subscript_dict.get('sectors'),
                             'final sources': _subscript_dict.get('final sources'),
                             'final sources1': _subscript_dict.get('final sources1')},
                     dims=['sectors', 'final sources', 'final sources1'],
                     )

    return if_then_else(choose_policies_of_intensities_global_or_by_sector() == 1,
                        efficiency_rate_of_substitution_by_sector(),
                        a)


@cache('run')
def year_policy_to_improve_efficiency():
    """
    Real Name: b'year policy to improve efficiency'
    Original Eqn: b'if then else(choose policies of intensities global or by sector=1,year policy to improve efficiency by sector [sectors,final sources],year policy to improve efficiency sector uniform[final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """

    a = xr.DataArray(data=[year_policy_to_improve_efficiency_sector_uniform().values]*35,
                     coords = {'sectors': _subscript_dict.get('sectors'),
                               'final sources': _subscript_dict.get('final sources')},
                     dims = ['sectors', 'final sources'])

    return if_then_else(choose_policies_of_intensities_global_or_by_sector() == 1,
                                  year_policy_to_improve_efficiency_by_sector(),
                                  a)


@cache('step')
def total_fed_households():
    """
    Real Name: b'total fed households'
    Original Eqn: b'sum(households final energy demand)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(households_final_energy_demand())


@cache('run')
def year_policy_change_energy():
    """
    Real Name: b'year policy change energy'
    Original Eqn: b'if then else(choose policies of intensities global or by sector=1,year policy change energy by sector[sectors,final sources],year policy change energy sector uniform[final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    a = xr.DataArray(data=[year_policy_change_energy_sector_uniform().values] * 35,
                     coords={'sectors': _subscript_dict.get('sectors'),
                             'final sources': _subscript_dict.get('final sources')},
                     dims=['sectors', 'final sources'])

    return if_then_else(choose_policies_of_intensities_global_or_by_sector() == 1,
                        year_policy_change_energy_by_sector(),
                        a)


@cache('run')
def policy_change_energy_speed():
    """
    Real Name: b'policy change energy speed'
    Original Eqn: b'if then else(choose policies of intensities global or by sector=1,policy change energy speed by sector[sectors,final sources],policy change energy speed sector uniform[final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    a = xr.DataArray(data=[policy_change_energy_speed_sector_uniform().values] * 35,
                     dims=['sectors', 'final sources'],
                     coords={'sectors': _subscript_dict.get('sectors'),
                             'final sources': _subscript_dict.get('final sources')})

    return if_then_else(choose_policies_of_intensities_global_or_by_sector() == 1,
                                  policy_change_energy_speed_by_sector(),
                                  a)


@cache('step')
def inertial_rate_energy_intensity_top_down():
    """
    Real Name: b'inertial rate energy intensity top down'
    Original Eqn: b'if then else(Time<2009, historic rate final energy intensity[sectors,final sources], if then else(choose final sectoral energy intensities evolution method =1,if then else(activate bottom up method [sectors]=0:or:rate change intensity bottom up[ sectors,final sources]=0, if then else(efficiency energy acceleration [sectors,final sources]<0,evol final energy intensity by sector and fuel [sectors,final sources]*efficiency energy acceleration[sectors,final sources]*available improvement efficiency [sectors],initial energy intensity by fuel and sector 1995 [sectors,final sources] *efficiency energy acceleration[sectors,final sources]),0), if then else(Time<year energy intensity target,if then else(activate bottom up method [sectors]=0:or:rate change intensity bottom up[ sectors,final sources]=0, if then else((historical mean rate energy intensity[sectors,final sources]+efficiency energy acceleration [sectors,final sources])<0,evol final energy intensity by sector and fuel [sectors,final sources]*(historical mean rate energy intensity[sectors,final sources] +efficiency energy acceleration[sectors,final sources])*available improvement efficiency[sectors],initial energy intensity by fuel and sector 1995 [sectors,final sources] *(historical mean rate energy intensity[sectors,final sources]+efficiency energy acceleration[sectors,final sources])),0), if then else(choose final sectoral energy intensities evolution method=2, if then else(activate bottom up method [sectors]=0:or:rate change intensity bottom up[ sectors,final sources]=0, if then else((historical mean rate energy intensity[sectors,final sources]+efficiency energy acceleration [sectors,final sources])<0,evol final energy intensity by sector and fuel [sectors,final sources]*(historical mean rate energy intensity[sectors,final sources] +efficiency energy acceleration[sectors,final sources])*available improvement efficiency[sectors],initial energy intensity by fuel and sector 1995 [sectors,final sources] *(historical mean rate energy intensity[sectors,final sources]+efficiency energy acceleration[sectors,final sources])),0), if then else(activate bottom up method[sectors]=0:or:rate change intensity bottom up[ sectors,final sources]=0, if then else((efficiency energy acceleration [sectors,final sources])<0,evol final energy intensity by sector and fuel [sectors,final sources]*efficiency energy acceleration[sectors,final sources]*available improvement efficiency [sectors],initial energy intensity by fuel and sector 1995 [sectors,final sources] *efficiency energy acceleration[sectors,final sources])+variation energy intensity target[sectors,final sources],0)))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2009, historic_rate_final_energy_intensity(),
        if_then_else(
            choose_final_sectoral_energy_intensities_evolution_method() == 1,
            if_then_else(
                logical_or(activate_bottom_up_method() == 0, rate_change_intensity_bottom_up() == 0),
                if_then_else(
                    efficiency_energy_acceleration() < 0,
                    evol_final_energy_intensity_by_sector_and_fuel() *
                    efficiency_energy_acceleration() * available_improvement_efficiency(),
                    initial_energy_intensity_by_fuel_and_sector_1995() *
                    efficiency_energy_acceleration()), 0),
            if_then_else(
                time() < year_energy_intensity_target(),
                if_then_else(
                    logical_or(activate_bottom_up_method() == 0, rate_change_intensity_bottom_up() == 0),
                    if_then_else(
                        (historical_mean_rate_energy_intensity() + efficiency_energy_acceleration())
                        < 0,
                        evol_final_energy_intensity_by_sector_and_fuel() *
                        (historical_mean_rate_energy_intensity() + efficiency_energy_acceleration())
                        * available_improvement_efficiency(),
                        initial_energy_intensity_by_fuel_and_sector_1995() *
                        (historical_mean_rate_energy_intensity() +
                         efficiency_energy_acceleration())), 0),
                if_then_else(
                    choose_final_sectoral_energy_intensities_evolution_method() == 2,
                    if_then_else(
                        logical_or(activate_bottom_up_method() == 0, rate_change_intensity_bottom_up() == 0),
                        if_then_else(
                            (historical_mean_rate_energy_intensity() +
                             efficiency_energy_acceleration()) < 0,
                            evol_final_energy_intensity_by_sector_and_fuel() *
                            (historical_mean_rate_energy_intensity() +
                             efficiency_energy_acceleration()) * available_improvement_efficiency(),
                            initial_energy_intensity_by_fuel_and_sector_1995() *
                            (historical_mean_rate_energy_intensity() +
                             efficiency_energy_acceleration())), 0),
                    if_then_else(
                        logical_or(activate_bottom_up_method() == 0, rate_change_intensity_bottom_up() == 0),
                        if_then_else(
                            (efficiency_energy_acceleration()) < 0,
                            evol_final_energy_intensity_by_sector_and_fuel() *
                            efficiency_energy_acceleration() * available_improvement_efficiency(),
                            initial_energy_intensity_by_fuel_and_sector_1995() *
                            efficiency_energy_acceleration()) + variation_energy_intensity_target(),
                        0)))))


@cache('step')
def final_energy_intensity_2020():
    """
    Real Name: b'final energy intensity 2020'
    Original Eqn: b'if then else(Time<year energy intensity target,evol final energy intensity by sector and fuel [sectors,final sources],aux20[final sources,sectors])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    ret = if_then_else(time() < year_energy_intensity_target(),
                                  evol_final_energy_intensity_by_sector_and_fuel(), aux20())

    return align_by_dims(ret, ('final sources', 'sectors'))


@cache('step')
def variation_energy_intensity_target():
    """
    Real Name: b'variation energy intensity target'
    Original Eqn: b'if then else(choose energy intensity target method=1,if then else(Time>=final year target,0,if then else (Time <year energy intensity target,0,((energy intensity target by sector and fuel[sectors,final sources]-evol final energy intensity by sector and fuel[sectors,final sources])/(final year target-Time)))),if then else (Time>=final year target,0,if then else(Time <year energy intensity target,0,((final energy intensity 2020[final sources,sectors]*(1+pct change energy intensity target )-evol final energy intensity by sector and fuel[sectors,final sources])/(final year target-Time)))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        choose_energy_intensity_target_method() == 1,
        if_then_else(
            time() >= final_year_target(), 0,
            if_then_else(time() < year_energy_intensity_target(), 0,
                                   ((energy_intensity_target_by_sector_and_fuel() -
                                     evol_final_energy_intensity_by_sector_and_fuel()) /
                                    (final_year_target() - time())))),
        if_then_else(
            time() >= final_year_target(), 0,
            if_then_else(time() < year_energy_intensity_target(), 0,
                                   ((final_energy_intensity_2020() *
                                     (1 + pct_change_energy_intensity_target()) -
                                     evol_final_energy_intensity_by_sector_and_fuel()) /
                                    (final_year_target() - time())))))


@cache('step')
def scarcity_primary_sources():
    """
    Real Name: b'scarcity primary sources'
    Original Eqn: b'1-abundance primary sources[primary sources]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 - abundance_primary_sources()


@cache('step')
def increase_in_perception_ps_scarcity():
    """
    Real Name: b'increase in perception ps scarcity'
    Original Eqn: b'scarcity primary sources[primary sources]*sensitivity to scarcity*(1-perception in primary sources scarcity[primary sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return scarcity_primary_sources() * sensitivity_to_scarcity() * (
        1 - perception_in_primary_sources_scarcity())


@cache('step')
def abundance_primary_sources():
    """
    Real Name: b'abundance primary sources'
    Original Eqn: b'abundance coal'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        abundance_coal(),
        abundance_total_oil(),
        abundance_total_natx_gas(), 1.0],
        coords={'primary sources': ['coal', 'oil', 'natural gas', 'others']},
        dims=['primary sources'])


@cache('step')
def perception_in_primary_sources_scarcity():
    """
    Real Name: b'perception in primary sources scarcity'
    Original Eqn: b'integ ( increase in perception ps scarcity[primary sources]-reduction in perception ps scarcity[primary sources], 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_perception_in_primary_sources_scarcity()


@cache('step')
def reduction_in_perception_ps_scarcity():
    """
    Real Name: b'reduction in perception ps scarcity'
    Original Eqn: b'perception in primary sources scarcity[primary sources]/energy scarcity forgetting time'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return perception_in_primary_sources_scarcity() / energy_scarcity_forgetting_time()


@cache('step')
def perception_of_inter_fuel_primary_sources_scarcity():
    """
    Real Name: b'perception of inter fuel primary sources scarcity'
    Original Eqn: b'if then else(sensitivity to scarcity=0,0,zidz(perception in primary sources scarcity[primary sources]-perception in primary sources scarcity[coal], 1))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        if_then_else(
            sensitivity_to_scarcity() == 0, 0,
            zidz(
                perception_in_primary_sources_scarcity() - perception_in_primary_sources_scarcity().loc['coal'].values, 1)),
        if_then_else(
            sensitivity_to_scarcity() == 0, 0,
            zidz(
                perception_in_primary_sources_scarcity() - perception_in_primary_sources_scarcity().loc['oil'].values, 1)),
        if_then_else(
            sensitivity_to_scarcity() == 0, 0,
            zidz(
                perception_in_primary_sources_scarcity() - perception_in_primary_sources_scarcity().loc['natural gas'].values, 1)),
        if_then_else(
            sensitivity_to_scarcity() == 0, 0,
            zidz(
                perception_in_primary_sources_scarcity() - perception_in_primary_sources_scarcity().loc['others'].values, 1))],
        coords={'primary sources1': ['coal', 'oil', 'natural gas', 'others'], 'primary sources': ['coal', 'oil', 'natural gas', 'others']},
        dims=['primary sources1', 'primary sources'])



@cache('step')
def perception_of_inter_fuel_ps_scarcity_coal_gas():
    """
    Real Name: b'perception of inter fuel ps scarcity coal gas'
    Original Eqn: b'max(0,perception of inter fuel primary sources scarcity[coal,natural gas])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, perception_of_inter_fuel_primary_sources_scarcity().loc['coal', 'natural gas'].values)


@cache('step')
def perception_of_inter_fuel_ps_scarcity_coal_oil():
    """
    Real Name: b'perception of inter fuel ps scarcity coal oil'
    Original Eqn: b'max(0,perception of inter fuel primary sources scarcity[coal,oil])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, perception_of_inter_fuel_primary_sources_scarcity().loc['coal', 'oil'].values)


@cache('step')
def increase_in_perception_fe_scarcity_h():
    """
    Real Name: b'increase in perception fe scarcity h'
    Original Eqn: b'scarcity final fuels h[final sources]*sensitivity to scarcity h *(1-perception of final energy scarcity h[final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return scarcity_final_fuels_h() * sensitivity_to_scarcity_h() * (
        1 - perception_of_final_energy_scarcity_h())


@cache('step')
def perception_of_inter_fuel_ps_scarcity_gas_coal():
    """
    Real Name: b'perception of inter fuel ps scarcity gas coal'
    Original Eqn: b'max(0,perception of inter fuel primary sources scarcity[natural gas,coal])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, perception_of_inter_fuel_primary_sources_scarcity().loc['natural gas', 'coal'].values)


@cache('step')
def perception_of_inter_fuel_ps_scarcity_natx_gas_oil():
    """
    Real Name: b'perception of inter fuel ps scarcity natx gas oil'
    Original Eqn: b'max(0,perception of inter fuel primary sources scarcity[natural gas,oil] )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, perception_of_inter_fuel_primary_sources_scarcity().loc['natural gas', 'oil'].values)


@cache('step')
def perception_of_inter_fuel_ps_scarcity_oil_coal():
    """
    Real Name: b'perception of inter fuel ps scarcity oil coal'
    Original Eqn: b'max(0,perception of inter fuel primary sources scarcity[oil,coal])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, perception_of_inter_fuel_primary_sources_scarcity().loc['oil', 'coal'].values)


@cache('run')
def sensitivity_to_energy_scarcity_medium():
    """
    Real Name: b'sensitivity to energy scarcity medium'
    Original Eqn: b'15.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 15.0


@cache('step')
def perception_of_inter_fuel_ps_scarcity_oil_natxgas():
    """
    Real Name: b'perception of inter fuel ps scarcity oil natxgas'
    Original Eqn: b'max(0,perception of inter fuel primary sources scarcity[oil,natural gas] )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, perception_of_inter_fuel_primary_sources_scarcity().loc['oil', 'natural gas'].values)


@cache('step')
def reduction_in_perception_fe_scarcity():
    """
    Real Name: b'reduction in perception fe scarcity'
    Original Eqn: b'perception of final energy scarcity[final sources]/energy scarcity forgetting time'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return perception_of_final_energy_scarcity() / energy_scarcity_forgetting_time()


@cache('step')
def reduction_in_perception_fe_scarcity_h():
    """
    Real Name: b'reduction in perception fe scarcity h'
    Original Eqn: b'perception of final energy scarcity h[final sources]/energy scarcity forgetting time h'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return perception_of_final_energy_scarcity_h() / energy_scarcity_forgetting_time_h()


@cache('run')
def sensitivity_to_scarcity_option_h():
    """
    Real Name: b'sensitivity to scarcity option h'
    Original Eqn: b'2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2


@cache('run')
def energy_scarcity_forgetting_time_h():
    """
    Real Name: b'energy scarcity forgetting time h'
    Original Eqn: b'5'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5


@cache('step')
def increase_in_perception_fe_scarcity():
    """
    Real Name: b'increase in perception fe scarcity'
    Original Eqn: b'scarcity final fuels[final sources]*sensitivity to scarcity*(1- perception of final energy scarcity [final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return scarcity_final_fuels() * sensitivity_to_scarcity() * (
        1 - perception_of_final_energy_scarcity())


@cache('run')
def sensitivity_to_energy_scarcity_high():
    """
    Real Name: b'sensitivity to energy scarcity high'
    Original Eqn: b'75.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 75.0


@cache('step')
def perception_of_final_energy_scarcity():
    """
    Real Name: b'perception of final energy scarcity'
    Original Eqn: b'integ ( increase in perception fe scarcity[final sources]-reduction in perception fe scarcity[final sources], 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_perception_of_final_energy_scarcity()


@cache('step')
def perception_of_final_energy_scarcity_h():
    """
    Real Name: b'perception of final energy scarcity h'
    Original Eqn: b'integ ( increase in perception fe scarcity h[final sources]-reduction in perception fe scarcity h[final sources], 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_perception_of_final_energy_scarcity_h()


@cache('step')
def perception_of_inter_fuel_final_energy_scarcities_h():
    """
    Real Name: b'perception of inter fuel final energy scarcities h'
    Original Eqn: b'if then else(sensitivity to scarcity h=0,0,zidz(perception of final energy scarcity h[final sources]-perception of final energy scarcity h[liquids], 1))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        if_then_else(
            sensitivity_to_scarcity_h() == 0, 0,
            zidz(
                perception_of_final_energy_scarcity_h() - perception_of_final_energy_scarcity_h().loc['electricity'].values,
                1)),
        if_then_else(
            sensitivity_to_scarcity_h() == 0, 0,
            zidz(
                perception_of_final_energy_scarcity_h() - perception_of_final_energy_scarcity_h().loc['heat'].values,
                1)),
        if_then_else(
            sensitivity_to_scarcity_h() == 0, 0,
            zidz(
                perception_of_final_energy_scarcity_h() - perception_of_final_energy_scarcity_h().loc['liquids'].values,
                1)),
        if_then_else(
            sensitivity_to_scarcity_h() == 0, 0,
            zidz(
                perception_of_final_energy_scarcity_h() - perception_of_final_energy_scarcity_h().loc['gases'].values,
                1)),
        if_then_else(
            sensitivity_to_scarcity_h() == 0, 0,
            zidz(
                perception_of_final_energy_scarcity_h() - perception_of_final_energy_scarcity_h().loc['solids'].values,
                1))],
        coords={'final sources1': ['electricity', 'heat', 'liquids', 'gases', 'solids'],
                'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources1', 'final sources'])




@cache('step')
def perception_of_inter_fuel_final_energy_scarcities():
    """
    Real Name: b'perception of inter fuel final energy scarcities'
    Original Eqn: b'if then else(sensitivity to scarcity=0,0,zidz(perception of final energy scarcity[final sources]-perception of final energy scarcity[liquids], 1))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        if_then_else(
            sensitivity_to_scarcity() == 0, 0,
            zidz(
                perception_of_final_energy_scarcity() - perception_of_final_energy_scarcity().loc['electricity'].values, 1)),
        if_then_else(
            sensitivity_to_scarcity() == 0, 0,
            zidz(
                perception_of_final_energy_scarcity() - perception_of_final_energy_scarcity().loc['heat'].values, 1)),
        if_then_else(
            sensitivity_to_scarcity() == 0, 0,
            zidz(
                perception_of_final_energy_scarcity() - perception_of_final_energy_scarcity().loc['liquids'].values, 1)),
        if_then_else(
            sensitivity_to_scarcity() == 0, 0,
            zidz(
                perception_of_final_energy_scarcity() - perception_of_final_energy_scarcity().loc['gases'].values, 1)),
        if_then_else(
            sensitivity_to_scarcity() == 0, 0,
            zidz(
                perception_of_final_energy_scarcity() - perception_of_final_energy_scarcity().loc['solids'].values, 1))],
        coords={'final sources1': ['electricity', 'heat', 'liquids', 'gases', 'solids'],
                'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources1', 'final sources'])



@cache('step')
def scarcity_final_fuels_h():
    """
    Real Name: b'scarcity final fuels h'
    Original Eqn: b'1-abundance final fuels[final sources]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 - abundance_final_fuels()


@cache('run')
def sensitivity_to_scarcity_h():
    """
    Real Name: b'sensitivity to scarcity h'
    Original Eqn: b'if then else(sensitivity to scarcity option h=1,sensitivity to energy scarcity low ,if then else(sensitivity to scarcity option h=2,sensitivity to energy scarcity medium ,sensitivity to energy scarcity high))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        sensitivity_to_scarcity_option_h() == 1, sensitivity_to_energy_scarcity_low(),
        if_then_else(sensitivity_to_scarcity_option_h() == 2,
                               sensitivity_to_energy_scarcity_medium(),
                               sensitivity_to_energy_scarcity_high()))


@cache('run')
def sensitivity_to_scarcity():
    """
    Real Name: b'sensitivity to scarcity'
    Original Eqn: b'if then else(sensitivity to scarcity option=1,sensitivity to energy scarcity low ,if then else(sensitivity to scarcity option=2,sensitivity to energy scarcity medium ,sensitivity to energy scarcity high))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        sensitivity_to_scarcity_option() == 1, sensitivity_to_energy_scarcity_low(),
        if_then_else(sensitivity_to_scarcity_option() == 2,
                               sensitivity_to_energy_scarcity_medium(),
                               sensitivity_to_energy_scarcity_high()))


@cache('step')
def scarcity_final_fuels():
    """
    Real Name: b'scarcity final fuels'
    Original Eqn: b'1-abundance final fuels[final sources]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 - abundance_final_fuels()


@cache('run')
def sensitivity_to_energy_scarcity_low():
    """
    Real Name: b'sensitivity to energy scarcity low'
    Original Eqn: b'5.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5.0


@cache('run')
def sensitivity_to_scarcity_option():
    """
    Real Name: b'sensitivity to scarcity option'
    Original Eqn: b'2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2


@cache('run')
def energy_scarcity_forgetting_time():
    """
    Real Name: b'energy scarcity forgetting time'
    Original Eqn: b'5'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5


@cache('run')
def year_to_finish_policy_change_energy():
    """
    Real Name: b'year to finish policy change energy'
    Original Eqn: b'2050'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2050


@cache('run')
def policy_change_energy_speed_sector_uniform():
    """
    Real Name: b'policy change energy speed sector uniform'
    Original Eqn: b'0,0,0,0,0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0., 0., 0., 0., 0.],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def pressure_to_improve_energy_intensity_efficiency():
    """
    Real Name: b'pressure to improve energy intensity efficiency'
    Original Eqn: b'min(1,fuel scarcity pressure[final sources]+implementation policy to improve energy intensity efficiency[sectors,final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    ret = np.minimum(
        1,
        fuel_scarcity_pressure() + implementation_policy_to_improve_energy_intensity_efficiency())

    return align_by_dims(ret, ('sectors', 'final sources'))


@cache('run')
def minimum_fraction():
    """
    Real Name: b'minimum fraction'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0]],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons'], 'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['sectors', 'final sources'])


@cache('run')
def choose_final_sectoral_energy_intensities_evolution_method():
    """
    Real Name: b'choose final sectoral energy intensities evolution method'
    Original Eqn: b'2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2


@cache('step')
def decrease_of_intensity_due_to_energy_a_technology_change_top_down():
    """
    Real Name: b'decrease of intensity due to energy a technology change top down'
    Original Eqn: b'if then else(activate bottom up method[sectors]=0,if then else((zidz(evol final energy intensity by sector and fuel [sectors,final sources], global energy intensity by sector [sectors])) >= minimum fraction[sectors,final sources] ,(max yearly change[sectors,final sources]*(1+percentage of change over the historic maximun variation of energy intensities)) *evol final energy intensity by sector and fuel[sectors,final sources] * pressure to change energy technology[sectors,final sources] , 0 ),0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        activate_bottom_up_method() == 0,
        if_then_else(
            (zidz(evol_final_energy_intensity_by_sector_and_fuel(),
                            global_energy_intensity_by_sector())) >= minimum_fraction(),
            (max_yearly_change() *
             (1 + percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities())
             ) * evol_final_energy_intensity_by_sector_and_fuel() *
            pressure_to_change_energy_technology(), 0), 0)


@cache('run')
def policy_to_improve_efficiency_speed_by_sector():
    """
    Real Name: b'policy to improve efficiency speed by sector'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0]],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons'], 'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['sectors', 'final sources'])


@cache('step')
def rate_change_intensity_bottom_up():
    """
    Real Name: b'rate change intensity bottom up'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],
        if_then_else(activate_bottom_up_method().loc['inland transport'].values == 1,
                               inland_transport_variation_intensity(), 0),[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0]],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons'], 'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['sectors', 'final sources'])


@cache('step')
def inter_fuel_scarcity_pressure():
    """
    Real Name: b'inter fuel scarcity pressure'
    Original Eqn: b'if then else(activate scarcity feedback final fuel replacement quest x0=1,max (0,perception of inter fuel final energy scarcities [final sources,final sources1]),0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """

    a = align_by_dims(perception_of_inter_fuel_final_energy_scarcities(), ('final sources', 'final sources1'))

    return if_then_else(
        activate_scarcity_feedback_final_fuel_replacement_quest() == 1,
        np.maximum(0, a), 0)



@cache('step')
def increase_of_intensity_due_to_energy_a_technology_change_top_down():
    """
    Real Name: b'increase of intensity due to energy a technology change top down'
    Original Eqn: b'sum2(increase of intensity due to energy a technology eff)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    x = sum(data=increase_of_intensity_due_to_energy_a_technology_eff(), dim='final sources')

    return x.rename({'final sources1': 'final sources'})



@cache('step')
def increase_of_intensity_due_to_energy_a_technology_eff():
    """
    Real Name: b'increase of intensity due to energy a technology eff'
    Original Eqn: b'if then else(efficiency rate of substitution[sectors,final sources1,final sources]=0,increase of intensity due to energy a technology net [sectors,final sources1,final sources],increase of intensity due to energy a technology net[sectors,final sources1,final sources]*efficiency rate of substitution[sectors,final sources1,final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    a = align_by_dims(efficiency_rate_of_substitution(), ('sectors', 'final sources1', 'final sources'))
    return if_then_else(
        a == 0,
        increase_of_intensity_due_to_energy_a_technology_net(),
        increase_of_intensity_due_to_energy_a_technology_net() * a)


@cache('step')
def increase_of_intensity_due_to_energy_a_technology_net():
    """
    Real Name: b'increase of intensity due to energy a technology net'
    Original Eqn: b'decrease of intensity due to energy a technology change top down[sectors,final sources]*share tech change fuel[sectors,final sources1,final sources]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return align_by_dims(decrease_of_intensity_due_to_energy_a_technology_change_top_down() * share_tech_change_fuel(), ('sectors', 'final sources1', 'final sources'))


@cache('run')
def efficiency_rate_of_substitution_by_sector():
    """
    Real Name: b'efficiency rate of substitution by sector'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data= [[[0.0] * 5] * 5] * 35,
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons'], 'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids'], 'final sources1': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['sectors', 'final sources', 'final sources1'])


@cache('step')
def share_tech_change_fuel():
    """
    Real Name: b'share tech change fuel'
    Original Eqn: b'zidz(pressure to change energy technology by fuel[sectors,final sources1,final sources] , sum2(pressure to change energy technology by fuel))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    a = align_by_dims(pressure_to_change_energy_technology_by_fuel(), ('sectors', 'final sources1', 'final sources'))

    x = sum(dim='final sources1', data=a)

    return zidz(a, x)


@cache('step')
def evol_final_energy_intensity_by_sector_and_fuel():
    """
    Real Name: b'evol final energy intensity by sector and fuel'
    Original Eqn: b'integ ( increase of intensity due to energy a technology change top down[sectors,final sources]+inertial rate energy intensity top down[sectors,final sources]+rate change intensity bottom up[sectors,final sources]-decrease of intensity due to energy a technology change top down[sectors,final sources], initial energy intensity by fuel and sector 1995[sectors,final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    ret = _integ_evol_final_energy_intensity_by_sector_and_fuel()

    return align_by_dims(ret, ('sectors', 'final sources'))



@cache('step')
def fuel_scarcity_pressure():
    """
    Real Name: b'fuel scarcity pressure'
    Original Eqn: b'if then else(activate scarcity feedback final fuel replacement quest x0=1,perception of final energy scarcity[final sources] ,0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        activate_scarcity_feedback_final_fuel_replacement_quest() == 1,
        perception_of_final_energy_scarcity(), 0)


@cache('step')
def fuel_scarcity_pressure_h():
    """
    Real Name: b'fuel scarcity pressure h'
    Original Eqn: b'if then else(activate scarcity feedback final fuel replacement quest=1,perception of final energy scarcity h[final sources],0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(activate_scarcity_feedback_final_fuel_replacement_quest() == 1,
                                  perception_of_final_energy_scarcity_h(), 0)


@cache('run')
def year_policy_to_improve_efficiency_sector_uniform():
    """
    Real Name: b'year policy to improve efficiency sector uniform'
    Original Eqn: b'0,0,0,0,0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0., 0., 0., 0., 0.],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('run')
def exp_rapid_evolution_improve_efficiency():
    """
    Real Name: b'exp rapid evolution improve efficiency'
    Original Eqn: b'1/2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1 / 2


@cache('step')
def inter_fuel_scarcity_pressure_h():
    """
    Real Name: b'inter fuel scarcity pressure h'
    Original Eqn: b'if then else(activate scarcity feedback final fuel replacement quest=1,max(0 ,perception of inter fuel final energy scarcities h [final sources,final sources1]),0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    a = align_by_dims(perception_of_inter_fuel_final_energy_scarcities_h(), ('final sources', 'final sources1'))

    return if_then_else(
        activate_scarcity_feedback_final_fuel_replacement_quest() == 1,
        np.maximum(0, a), 0)


@cache('run')
def historical_mean_rate_energy_intensity():
    """
    Real Name: b'historical mean rate energy intensity'
    Original Eqn: b'-0.005943308'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[-0.00594331,-0.12011212,-0.01702233,0.00649193,-0.04199447],[-0.01292442,-0.04518246,-0.01034553,-0.00468514,0.01253506],[0.00400537,-0.03138628,-0.01180247,0.00788062,-0.00678344],[-0.00992662,-0.01949561,-0.04541047,-0.01309037,-0.06194968],[-0.02023598,-0.04979546,-0.03162812,-0.02367399,-0.04577093],[-0.01776254,-0.12490597,-0.02823126,0.01183321,-0.00733869],[-0.00950341,0.05313765,-0.04045002,-0.01206145,0.00749482],[-0.01886605,-0.01847262,-0.03188427,-0.02840818,-0.00295949],[-0.01281968,-0.02254765,-0.02264326,-0.01543831,-0.04863373],[-0.00156569,-0.04884816,-0.01991446,-0.01145573,-0.01683848],[0.01540775,-0.01630938,-0.01400116,0.0066328,-0.00025385],[0.00733569,-0.05521067,-0.03842037,-0.01299638,-0.00274809],[-0.01479467,-0.13612799,-0.05007249,-0.00896218,-0.08810427],[-0.04147397,-0.14823739,-0.07540414,-0.04217459,-0.12148873],[-0.00904026,0.02069871,-0.03899174,0.0007079,-0.03058529],[-0.00569454,-0.04044161,-0.02169462,-0.00191565,-0.05464288],[0.00532142,0.00891843,-0.03679899,-0.02325057,0.05228512],[-0.00841393,-0.31124022,-0.00453141,0.00490538,0.0093747],[0.00605911,-0.01422534,-0.02190432,-0.01092198,-0.17006181],[-0.00036395,-0.01905378,-0.04133912,-0.02730321,-0.07895893],[-0.00386347,-0.01325683,-0.02968859,-0.00458373,-0.09655175],[0.01980806,-0.01257244,-0.03131294,0.05258562,-0.02234642],[-0.00404563,0.0,0.00290517,-0.00873679,-0.06650353],[0.0,0.0,-0.03742717,-0.04770914,-0.07070365],[0.0,0.0,-0.00469314,-0.01226672,-0.73407054],[0.01034127,-0.18672971,0.01036057,-0.0406507,-0.09713694],[0.01239715,-0.04082706,-0.04085653,-0.1071439,-0.03762176],[-0.00447336,-0.1398287,-0.04749345,-0.01013251,-0.34654798],[-0.01637684,-0.04922435,-0.02508782,-0.01725737,-0.18054948],[0.00418362,-0.02366548,-0.03195417,-0.00052349,-0.01660373],[0.01668083,-0.02455965,-0.02219986,-0.05911978,0.00105572],[0.03481818,-0.00483609,-0.00077546,0.00180503,-0.07266663],[0.01151148,-0.02092861,-0.025051,-0.00719733,0.03300624],[0.01105651,-0.05757374,-0.01504249,-0.02016622,-0.01382198],[0.0,0.0,0.0,0.0,0.0]],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons'], 'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['sectors', 'final sources'])


@cache('run')
def exp_slow_evolution_improve_efficiency():
    """
    Real Name: b'exp slow evolution improve efficiency'
    Original Eqn: b'2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2


@cache('step')
def implementatio_policy_to_change_final_energy():
    """
    Real Name: b'implementatio policy to change final energy'
    Original Eqn: b'if then else(choose final sectoral energy intensities evolution method<>2 ,0,if then else(year policy change energy[sectors,final sources]<2015:or: year policy change energy[sectors,final sources]>year to finish energy intensity policies,0,if then else(Time <year policy change energy[sectors,final sources],0,if then else(Time >year to finish energy intensity policies,1,if then else(policy change energy speed[sectors,final sources]= 1,((Time-year policy change energy[sectors,final sources])/(year to finish energy intensity policies-year policy change energy [sectors,final sources]))^(exp rapid evol change energy),if then else(policy change energy speed[sectors,final sources]=2,((Time-year policy change energy[sectors,final sources]) /(year to finish energy intensity policies -year policy change energy[sectors,final sources])),if then else(policy change energy speed[sectors,final sources]=3,((Time-year policy change energy[sectors,final sources]) /(year to finish energy intensity policies -year policy change energy[sectors,final sources]))^exp slow evol change energy ,0)))))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    ret = if_then_else(
        choose_final_sectoral_energy_intensities_evolution_method() != 2, 0,
        if_then_else(
            logical_or(year_policy_change_energy() < 2015,
                       year_policy_change_energy() > year_to_finish_energy_intensity_policies()), 0,
            if_then_else(
                time() < year_policy_change_energy(), 0,
                if_then_else(
                    time() > year_to_finish_energy_intensity_policies(), 1,
                    if_then_else(
                        policy_change_energy_speed() == 1,
                        ((time() - year_policy_change_energy()) /
                         (year_to_finish_energy_intensity_policies() -
                          year_policy_change_energy()))**(exp_rapid_evol_change_energy()),
                        if_then_else(
                            policy_change_energy_speed() == 2,
                            ((time() - year_policy_change_energy()) /
                             (year_to_finish_energy_intensity_policies() -
                              year_policy_change_energy())),
                            if_then_else(
                                policy_change_energy_speed() == 3,
                                ((time() - year_policy_change_energy()) /
                                 (year_to_finish_energy_intensity_policies() -
                                  year_policy_change_energy()))**exp_slow_evol_change_energy(),
                                0)))))))

    return align_by_dims(ret, ('sectors', 'final sources'))


@cache('run')
def policy_to_improve_efficiency_speed_sector_uniform():
    """
    Real Name: b'policy to improve efficiency speed sector uniform'
    Original Eqn: b'0,0,0,0,0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0., 0., 0., 0., 0.],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('run')
def final_year_target():
    """
    Real Name: b'final year target'
    Original Eqn: b'2060'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2060


@cache('run')
def activate_bottom_up_method():
    """
    Real Name: b'activate bottom up method'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons']},
        dims=['sectors'])


@cache('run')
def year_change_pct_energy_intensity_target():
    """
    Real Name: b'year change pct energy intensity target'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('run')
def year_policy_to_improve_efficiency_by_sector():
    """
    Real Name: b'year policy to improve efficiency by sector'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0]],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons'], 'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['sectors', 'final sources'])


@cache('step')
def aux20():
    """
    Real Name: b'aux20'
    Original Eqn: b'delay fixed ( final energy intensity 2020[final sources,sectors], time step , 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    x = np.reshape([x() for x in _delay_final_energy_intensity_2020_roundtime_step__time_step___time_step_0_time_step__time_step], (len(_subscript_dict.get('final sources')), len(_subscript_dict.get('sectors'))))

    return xr.DataArray(data=x,
                        dims=['final sources', 'sectors'],
                        coords={'final sources': _subscript_dict.get('final sources'), 'sectors': _subscript_dict.get('sectors')})



@cache('run')
def year_policy_change_energy_by_sector():
    """
    Real Name: b'year policy change energy by sector'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0]],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons'], 'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['sectors', 'final sources'])


@cache('run')
def year_policy_change_energy_sector_uniform():
    """
    Real Name: b'year policy change energy sector uniform'
    Original Eqn: b'0,0,0,0,0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0., 0., 0., 0., 0.],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('run')
def energy_intensity_target_by_sector_and_fuel():
    """
    Real Name: b'energy intensity target by sector and fuel'
    Original Eqn: b'0.6750516890263'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0.67505169,0.05109429,2.62911863,0.26023408,0.25445363],[1.32834175,0.21661982,1.19570221,4.66277571,1.18704845],[0.41162622,0.12010631,0.43695491,0.33393466,0.97044762],[0.7024079,0.1875755,0.39044189,0.23320031,0.49724291],[0.25757049,0.0722097,0.32373967,0.08239602,0.20248688],[0.67778379,0.17875505,0.57342542,0.24657379,1.40332251],[1.06762093,0.27018421,0.41270602,0.46051132,1.67114615],[0.70691239,0.72196412,7.192514,2.03652797,0.58130287],[1.51459975,0.66974307,1.1478779,1.43936435,1.01755991],[1.73611014,0.2439218,1.59707255,0.98850677,2.33995545],[1.95197537,0.12875483,1.78498551,1.64611433,8.3121495],[2.19480245,0.22324946,0.38925971,1.12000651,2.74096286],[0.32409543,0.049491,0.19970664,0.12287157,0.16728427],[0.21658242,0.01916487,0.16111787,0.06968808,0.02668936],[0.26199151,0.04994551,0.14861014,0.11017172,0.09639911],[0.81707391,0.19532636,1.53687059,0.69220341,1.04995256],[2.85747288,0.23420825,0.47998291,2.73119171,2.47366288],[0.10473827,0.00995206,0.66736923,0.06379826,0.09338287],[0.31807253,0.03173736,0.48022101,0.11355533,0.01468862],[0.19985183,0.03974309,0.41068203,0.05910934,0.02326699],[0.47628497,0.03583695,0.93014667,0.17702047,0.01949478],[0.81623407,0.0511995,0.94101911,0.40567549,0.40393582],[0.42698524,0.0,6.03997682,1.58529839,0.06913766],[1.79643578e-05,0.0,23.62845198,2.67502701e-06,0.00979235],[0.0,0.0,25.0856884,1.89558222e-05,1.49272737e-06],[0.38538782,0.08941672,2.49983293,0.1046461,0.03583322],[0.26002566,0.02464708,0.42985269,0.195723,0.00632167],[0.13140906,0.01304232,0.18964237,0.04127577,0.00352349],[0.27833046,0.04894408,0.09797354,0.07296546,0.01494402],[0.19378581,0.01823275,0.51290373,0.10356363,0.02975559],[0.52611138,0.04206668,0.83999467,0.79425899,0.08212843],[0.74137835,0.06914625,0.85008308,0.21082169,0.11454601],[0.39270182,0.03924341,0.75385614,0.15304709,0.07897412],[0.45223717,0.07499199,0.92788804,0.19740651,0.08137643],[0.0,0.0,0.0,0.0,0.0]],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons'], 'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['sectors', 'final sources'])


@cache('run')
def maximum_yearly_acceleration_of_intensity_improvement_pct():
    """
    Real Name: b'maximum yearly acceleration of intensity improvement pct'
    Original Eqn: b'0.009339249971298282'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0.00933925,0.16744793,0.03309459,0.01558529,0.07886244],[0.03055735,0.07604381,0.02328182,0.03783584,0.06546551],[0.00431208,0.04128312,0.02107804,0.02144491,0.02477986],[0.01937187,0.05297394,0.11043508,0.04960886,0.08961748],[0.04199229,0.06377357,0.07041393,0.0676231,0.07590346],[0.0396271,0.18350577,0.05112943,0.02608952,0.01877253],[0.01938971,0.02187242,0.08544291,0.02618082,0.01972705],[0.05148648,0.05475679,0.06254854,0.05218953,0.04047196],[0.02412931,0.03455453,0.04484451,0.04614098,0.06437622],[0.02331464,0.08065144,0.03541006,0.04021234,0.02978748],[0.00365875,0.02885442,0.02818213,0.02179039,0.02731053],[0.00485383,0.08760379,0.08502194,0.02194309,0.01445956],[0.02192236,0.17907449,0.10078494,0.05230214,0.08548414],[0.08057514,0.21586267,0.14453145,0.04889797,0.14297185],[0.02321553,0.07010564,0.08604948,0.03558963,0.05314749],[0.02424457,0.06431599,0.04464336,0.03499284,0.08373812],[0.02791172,0.04213916,0.09437875,0.04941635,0.11404078],[0.07317832,0.24835213,0.01423633,0.03196929,0.01509729],[0.018951,0.04416114,0.03929524,0.03899543,0.11411747],[0.02612164,0.06464106,0.09139272,0.05036487,0.07196047],[0.0182506,0.05624316,0.06048467,0.0305953,0.06937659],[0.009243,0.04877401,0.05657429,0.04264438,0.05457405],[0.01131309,0.0,0.00848221,0.02067851,0.13310805],[0.0,0.0,0.06496764,0.09151423,0.11539825],[0.0,0.0,0.01337347,0.05982706,0.11982371],[0.02531654,0.10525586,0.00919074,0.05567749,0.0985855],[0.00995826,0.09253137,0.07911161,0.14487808,0.06576371],[0.02549826,0.11311089,0.09871344,0.01896352,0.13304998],[0.07858632,0.05909126,0.04861986,0.0261963,0.14163468],[0.01476335,0.05390804,0.06730667,0.05825319,0.07297288],[0.01438708,0.0466997,0.04745223,0.1095518,0.06053629],[0.00637635,0.03151567,0.00823683,0.0129305,0.07615113],[0.01499762,0.02791,0.05052115,0.05137329,0.04485981],[0.01372449,0.0709266,0.02923605,0.05202041,0.08801703],[0.0,0.0,0.0,0.0,0.0]],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons'], 'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['sectors', 'final sources'])


@cache('step')
def available_improvement_efficiency():
    """
    Real Name: b'available improvement efficiency'
    Original Eqn: b'min(1,if then else(Time>2009, zidz((global energy intensity by sector[sectors]-(min energy intensity vs intial*initial global energy intensity by sector 2009[sectors])), (1-min energy intensity vs intial)*initial global energy intensity by sector 2009[sectors]), 1))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(
        1,
        if_then_else(
            time() > 2009,
            zidz((global_energy_intensity_by_sector() -
                            (min_energy_intensity_vs_intial() *
                             initial_global_energy_intensity_by_sector_2009())),
                           (1 - min_energy_intensity_vs_intial()) *
                           initial_global_energy_intensity_by_sector_2009()), 1))


@cache('run')
def initial_global_energy_intensity_by_sector_2009():
    """
    Real Name: b'initial global energy intensity by sector 2009'
    Original Eqn: b'3.8699523223524217,8.59048794328416,2.2730697032750133,2.010868502985446,0.9384027485237335,3.0798605681705,3.882168633095476,11.239221350242309,5.789144973269702,6.9055667191250105,13.823979538086423,6.668280989903224,0.8634488999847711,0.49324260062935,0.6671179833322058,4.29142682261221,8.776518634614447,0.9392406828344904,0.9582748424774322,0.7326532798581419,1.638783845409482,2.6180639873329015,8.12139811472845,23.63826496958816,25.085708850793683,3.1151167953952954,0.9165700997313891,0.3788930038364209,0.5131575612776583,0.8582415145874005,2.284560153318178,1.9859753806227771,1.4178225791680519,1.733900141940882,0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[
            3.86995232, 8.59048794, 2.2730697, 2.0108685, 0.93840275, 3.07986057, 3.88216863,
            11.23922135, 5.78914497, 6.90556672, 13.82397954, 6.66828099, 0.8634489, 0.4932426,
            0.66711798, 4.29142682, 8.77651863, 0.93924068, 0.95827484, 0.73265328, 1.63878385,
            2.61806399, 8.12139811, 23.63826497, 25.08570885, 3.1151168, 0.9165701, 0.378893,
            0.51315756, 0.85824151, 2.28456015, 1.98597538, 1.41782258, 1.73390014, 0.
        ],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors'])


@cache('step')
def efficiency_energy_acceleration():
    """
    Real Name: b'efficiency energy acceleration'
    Original Eqn: b'-maximum yearly acceleration of intensity improvement pct[sectors,final sources]*(1+percentage of change over the historic maximun variation of energy intensities)*pressure to improve energy intensity efficiency [sectors,final sources]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return -maximum_yearly_acceleration_of_intensity_improvement_pct() * (
        1 + percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities()
    ) * pressure_to_improve_energy_intensity_efficiency()


@cache('step')
def global_energy_intensity_by_sector():
    """
    Real Name: b'global energy intensity by sector'
    Original Eqn: b'sum2(evol final energy intensity by sector and fuel)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(data=evol_final_energy_intensity_by_sector_and_fuel(), dim='final sources')


@cache('run')
def initial_energy_intensity_by_fuel_and_sector_1995():
    """
    Real Name: b'initial energy intensity by fuel and sector 1995'
    Original Eqn: b'0.7241971461530861'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0.72419715,0.1779432,3.32933712,0.21503569,0.47086768],[1.563491,0.39615757,1.34136258,4.69078138,0.95068866],[0.38725897,0.16496473,0.51411063,0.26307121,1.04794477],[0.80985958,0.2208637,0.88069214,0.22170153,0.99195523],[0.35139111,0.11953127,0.54391221,0.09354931,0.36017316],[0.87290452,0.87939526,0.85318442,0.16492388,1.54358467],[1.22637684,0.10098146,0.77252486,0.4924435,1.41596642],[0.91655574,0.83062554,11.72311084,3.00131309,0.56351885],[1.80355296,0.85843673,1.61410459,1.47202838,1.69033825],[1.75167552,0.45484858,2.07496676,1.02938173,2.73744036],[1.60100296,0.11474365,2.19605512,1.34343882,7.9972297],[1.97761559,0.4444717,0.72411951,1.31080652,2.8148349],[0.38497879,0.26636943,0.42382675,0.12021542,0.34965201],[0.38811218,0.10697241,0.47801984,0.11143834,0.08366552],[0.29157176,0.03230247,0.2833001,0.0917108,0.11490861],[0.85691698,0.25247423,2.14392313,0.63619042,2.12600143],[2.62405852,0.17656446,0.64790005,3.92239687,1.30847508],[0.10596937,0.08379637,0.70681406,0.05766783,0.08061731],[0.29023907,0.0343743,0.65161055,0.12338712,0.02572129],[0.19819158,0.04237136,0.79950961,0.08311736,0.03537462],[0.49852024,0.03854825,1.44622456,0.18343785,0.03731645],[0.63162597,0.05421857,1.41963918,0.22968876,0.47227027],[0.44834521,0.0,5.78459465,1.76868907,0.19289284],[0.0,0.0,37.93416087,4.57484716e-06,0.02025755],[0.0,0.0,26.71573179,1.98484033e-05,0.0],[0.3351251,0.24766114,2.12294444,0.15920033,0.04933503],[0.21424532,0.03630473,0.76886647,0.55711416,0.00880215],[0.13571294,0.03042315,0.39026415,0.04635998,0.01496297],[0.31331707,0.06748503,0.14099642,0.08985637,0.05228868],[0.18155751,0.02293191,0.83315094,0.0977231,0.02983079],[0.40839952,0.05140637,1.18805417,1.53739517,0.07497031],[0.47589912,0.07013227,0.85574009,0.19922448,0.19199273],[0.33605505,0.04920999,1.08999354,0.16141075,0.05863355],[0.38788798,0.11996459,1.14939878,0.2435464,0.06819527],[0.001,0.001,0.001,0.001,0.001]],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons'], 'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['sectors', 'final sources'])


@cache('step')
def pressure_to_change_energy_technology_by_fuel():
    """
    Real Name: b'pressure to change energy technology by fuel'
    Original Eqn: b'if then else(efficiency rate of substitution[sectors,final sources,final sources1]=0,min(max(inter fuel scarcity pressure [final sources,final sources1],0),1) ,min(max(inter fuel scarcity pressure[final sources,final sources1] + implementatio policy to change final energy [sectors,final sources1], 0) , 1 ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """

    b = implementatio_policy_to_change_final_energy().rename({'final sources': 'final sources1'})

    ret = if_then_else(
        efficiency_rate_of_substitution() == 0,
        np.minimum(np.maximum(inter_fuel_scarcity_pressure(), 0), 1),
        np.minimum(
            np.maximum(
                inter_fuel_scarcity_pressure() + b, 0),
            1))

    return align_by_dims(ret, ('sectors', 'final sources', 'final sources1'))


@cache('step')
def implementation_policy_to_improve_energy_intensity_efficiency():
    """
    Real Name: b'implementation policy to improve energy intensity efficiency'
    Original Eqn: b'if then else(choose final sectoral energy intensities evolution method<>2 ,0,if then else(year policy to improve efficiency[sectors,final sources]< 2015:or:year policy to improve efficiency [sectors,final sources]>year to finish energy intensity policies,0,if then else (Time<year policy to improve efficiency [sectors,final sources],0,if then else(Time >year to finish energy intensity policies,1,if then else(policy to improve efficiency speed[sectors,final sources]= 1,((Time-year policy to improve efficiency [sectors,final sources])/(year to finish energy intensity policies-year policy to improve efficiency [sectors,final sources]))^(exp rapid evolution improve efficiency),if then else(policy to improve efficiency speed[sectors,final sources]=2,((Time-year policy to improve efficiency[sectors,final sources])/(year to finish energy intensity policies -year policy to improve efficiency [sectors,final sources])),if then else(policy to improve efficiency speed[ sectors,final sources]=3, ((Time-year policy to improve efficiency [sectors,final sources])/(year to finish energy intensity policies-year policy to improve efficiency [sectors,final sources]))^exp slow evolution improve efficiency,0)))))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        choose_final_sectoral_energy_intensities_evolution_method() != 2, 0,
        if_then_else(
            logical_or(year_policy_to_improve_efficiency() < 2015
           ,year_policy_to_improve_efficiency() > year_to_finish_energy_intensity_policies()), 0,
            if_then_else(
                time() < year_policy_to_improve_efficiency(), 0,
                if_then_else(
                    time() > year_to_finish_energy_intensity_policies(), 1,
                    if_then_else(
                        policy_to_improve_efficiency_speed() == 1,
                        ((time() - year_policy_to_improve_efficiency()) /
                         (year_to_finish_energy_intensity_policies() -
                          year_policy_to_improve_efficiency()))**(
                              exp_rapid_evolution_improve_efficiency()),
                        if_then_else(
                            policy_to_improve_efficiency_speed() == 2,
                            ((time() - year_policy_to_improve_efficiency()) /
                             (year_to_finish_energy_intensity_policies() -
                              year_policy_to_improve_efficiency())),
                            if_then_else(
                                policy_to_improve_efficiency_speed() == 3,
                                ((time() - year_policy_to_improve_efficiency()) /
                                 (year_to_finish_energy_intensity_policies() -
                                  year_policy_to_improve_efficiency())
                                 )**exp_slow_evolution_improve_efficiency(), 0)))))))


@cache('run')
def exp_slow_evol_change_energy():
    """
    Real Name: b'exp slow evol change energy'
    Original Eqn: b'2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2


@cache('step')
def pressure_to_change_energy_technology():
    """
    Real Name: b'pressure to change energy technology'
    Original Eqn: b'min(1,sum2(pressure to change energy technology by fuel))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """

    a = align_by_dims(pressure_to_change_energy_technology_by_fuel(), ('sectors', 'final sources1', 'final sources'))

    ret = np.minimum(1, sum(dim='final sources1', data=a))

    return align_by_dims(ret, ('sectors', 'final sources'))


@cache('run')
def min_energy_intensity_vs_intial():
    """
    Real Name: b'min energy intensity vs intial'
    Original Eqn: b'0.3'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.3


@cache('run')
def policy_change_energy_speed_by_sector():
    """
    Real Name: b'policy change energy speed by sector'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0]],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons'], 'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['sectors', 'final sources'])


@cache('run')
def year_to_finish_energy_intensity_policies():
    """
    Real Name: b'year to finish energy intensity policies'
    Original Eqn: b'2050'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2050


@cache('run')
def max_yearly_change():
    """
    Real Name: b'max yearly change'
    Original Eqn: b'0.005220657864891083'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0.00522066,0.06648978,0.00736074,0.01683207,0.03038532],[0.01044469,0.02078772,0.0177965,0.00278217,0.03372507],[0.00395886,0.00340738,0.0140722,0.02553316,0.00424987],[0.01023697,0.01054206,0.0313095,0.02060687,0.03576283],[0.02154718,0.0146526,0.01129892,0.01255362,0.02890583],[0.01740944,0.04832414,0.00165667,0.03974226,0.00339266],[0.01024589,0.10205285,0.01881341,0.00260017,0.02491876],[0.01567791,0.0133563,0.00736623,0.02461139,0.01691868],[0.01261569,0.00130352,0.00148579,0.01570123,0.02314221],[0.00023661,0.02309154,0.00620301,0.00587522,0.00141987],[0.0140501,0.05509806,0.00981698,0.02400113,0.01593162],[0.00709183,0.02656771,0.01860293,0.00926285,0.00773383],[0.01151221,0.07230306,0.02648443,0.01097009,0.03369617],[0.0408386,0.09069715,0.04835768,0.02555307,0.06244002],[0.0065412,0.07489427,0.0191167,0.0252098,0.00591432],[0.00166623,0.02601155,0.00158636,0.01532448,0.03067166],[0.00692906,0.04639522,0.02727093,0.02581226,0.12099854],[0.00612615,0.10694188,0.0203964,0.00861487,0.02090153],[0.00701378,0.02139937,0.00426042,0.00165765,0.03485928],[0.0009278,0.02597715,0.02178832,0.02155524,0.00652669],[0.00316252,0.01922222,0.0063343,0.00157395,0.02102245],[0.01829887,0.0207074,0.0043791,0.04482812,0.0036582],[0.00358574,0.01723418,0.02731014,0.00794673,0.05750812],[0.00055103,0.01723418,0.00857578,0.01030106,0.02115648],[0.00055103,0.01723418,0.0197386,0.00671038,0.00487646],[0.01065026,0.0237411,0.03688326,0.02894283,0.00945108],[0.01406932,0.00575619,0.01564777,0.05017648,0.00128575],[0.00073179,0.02173786,0.02544868,0.00804781,0.0476528],[0.00122193,0.00420824,0.00040189,0.01420224,0.06177144],[0.00479665,0.00677375,0.00974529,0.00835543,0.02275249],[0.0196661,0.01651008,0.00018193,0.03498971,0.02270903],[0.03199806,0.02024596,0.0237434,0.00479777,0.00897993],[0.0110776,0.00613716,0.00135254,0.0015045,0.04720558],[0.0111158,0.00483286,0.00929002,0.01298112,0.0711359],[0.00055103,0.01723418,0.02390804,0.00110409,0.0090459]],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons'], 'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['sectors', 'final sources'])


@cache('run')
def exp_rapid_evol_change_energy():
    """
    Real Name: b'exp rapid evol change energy'
    Original Eqn: b'1/2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1 / 2


@cache('run')
def efficiency_rate_of_substitution_sector_uniform():
    """
    Real Name: b'efficiency rate of substitution sector uniform'
    Original Eqn: b'0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0.0] *5]*5,
                        coords={
                            'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids'],
                            'final sources1': ['electricity', 'heat', 'liquids', 'gases', 'solids']
                        },
                        dims=['final sources', 'final sources1'])


@cache('step')
def inertial_rate_energy_intensity_h_top_down():
    """
    Real Name: b'inertial rate energy intensity h top down'
    Original Eqn: b'if then else(Time<2009, historic rate final energy intensity h[final sources],if then else (choose final sectoral energy intensities evolution method =1,if then else(efficiency energy acceleration h[final sources]< 0,evol final energy intensity h[final sources]*efficiency energy acceleration h[final sources]*available improvement efficiency h, initial energy intensity 1995 h [final sources] *efficiency energy acceleration h[final sources]), if then else(Time<year energy intensity target,if then else((historical mean rate energy intensity h[final sources]+efficiency energy acceleration h[final sources])<0,evol final energy intensity h[final sources]*(historical mean rate energy intensity h [final sources] +efficiency energy acceleration h[final sources])*available improvement efficiency h,initial energy intensity 1995 h [final sources] *(historical mean rate energy intensity h[final sources]+efficiency energy acceleration h[final sources])), if then else(choose final sectoral energy intensities evolution method=2, if then else((historical mean rate energy intensity h [final sources]+efficiency energy acceleration h[final sources])<0,evol final energy intensity h[final sources]*(historical mean rate energy intensity h[final sources] +efficiency energy acceleration h[final sources])*available improvement efficiency h,initial energy intensity 1995 h [final sources] *(historical mean rate energy intensity h[final sources]+efficiency energy acceleration h[final sources])),if then else ((efficiency energy acceleration h[final sources])<0,evol final energy intensity h[final sources]*efficiency energy acceleration h [final sources]*available improvement efficiency h,initial energy intensity 1995 h[final sources] *efficiency energy acceleration h[final sources])+variation energy intensity target h[final sources] ))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2009, historic_rate_final_energy_intensity_h(),
        if_then_else(
            choose_final_sectoral_energy_intensities_evolution_method() == 1,
            if_then_else(
                efficiency_energy_acceleration_h() < 0,
                evol_final_energy_intensity_h() * efficiency_energy_acceleration_h() *
                available_improvement_efficiency_h(),
                initial_energy_intensity_1995_h() * efficiency_energy_acceleration_h()),
            if_then_else(
                time() < year_energy_intensity_target(),
                if_then_else(
                    (historical_mean_rate_energy_intensity_h() + efficiency_energy_acceleration_h())
                    < 0,
                    evol_final_energy_intensity_h() *
                    (historical_mean_rate_energy_intensity_h() + efficiency_energy_acceleration_h())
                    * available_improvement_efficiency_h(),
                    initial_energy_intensity_1995_h() *
                    (historical_mean_rate_energy_intensity_h() +
                     efficiency_energy_acceleration_h())),
                if_then_else(
                    choose_final_sectoral_energy_intensities_evolution_method() == 2,
                    if_then_else(
                        (historical_mean_rate_energy_intensity_h() +
                         efficiency_energy_acceleration_h()) < 0,
                        evol_final_energy_intensity_h() *
                        (historical_mean_rate_energy_intensity_h() +
                         efficiency_energy_acceleration_h()) * available_improvement_efficiency_h(),
                        initial_energy_intensity_1995_h() *
                        (historical_mean_rate_energy_intensity_h() +
                         efficiency_energy_acceleration_h())),
                    if_then_else(
                        (efficiency_energy_acceleration_h()) < 0,
                        evol_final_energy_intensity_h() * efficiency_energy_acceleration_h() *
                        available_improvement_efficiency_h(),
                        initial_energy_intensity_1995_h() * efficiency_energy_acceleration_h()) +
                    variation_energy_intensity_target_h()))))


@cache('step')
def final_energy_intensity_by_sector_and_fuel():
    """
    Real Name: b'final energy intensity by sector and fuel'
    Original Eqn: b'evol final energy intensity by sector and fuel[sectors,final sources]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    ret = evol_final_energy_intensity_by_sector_and_fuel()

    return align_by_dims(ret, ('final sources', 'sectors'))


@cache('step')
def implementation_policy_to_improve_energy_intensity_efficiency_h():
    """
    Real Name: b'implementation policy to improve energy intensity efficiency h'
    Original Eqn: b'if then else(choose final sectoral energy intensities evolution method<>2 ,0,if then else(year policy to improve efficiency h[final sources]<2015:or: year policy to improve efficiency h[final sources]>year to finish energy intensity policies h,0,if then else (Time<year policy to improve efficiency h [final sources],0,if then else(Time >year to finish energy intensity policies h,1,if then else(policy to improve efficiency speed h[final sources]= 1,((Time-year policy to improve efficiency h [final sources])/(year to finish energy intensity policies h-year policy to improve efficiency h[final sources]))^(exp rapid evolution improve efficiency h),if then else(policy to improve efficiency speed h [final sources]=2,((Time-year policy to improve efficiency h[final sources])/(year to finish energy intensity policies h -year policy to improve efficiency h [final sources])),if then else(policy to improve efficiency speed h[final sources]=3,((Time-year policy to improve efficiency h [final sources])/(year to finish energy intensity policies h-year policy to improve efficiency h[final sources]))^exp slow evolution improve efficiency h,0)))))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        choose_final_sectoral_energy_intensities_evolution_method() != 2, 0,
        if_then_else(
            logical_or(year_policy_to_improve_efficiency_h() < 2015, year_policy_to_improve_efficiency_h() > year_to_finish_energy_intensity_policies_h()),
            0,
            if_then_else(
                time() < year_policy_to_improve_efficiency_h(), 0,
                if_then_else(
                    time() > year_to_finish_energy_intensity_policies_h(), 1,
                    if_then_else(
                        policy_to_improve_efficiency_speed_h() == 1,
                        ((time() - year_policy_to_improve_efficiency_h()) /
                         (year_to_finish_energy_intensity_policies_h() -
                          year_policy_to_improve_efficiency_h()))**(
                              exp_rapid_evolution_improve_efficiency_h()),
                        if_then_else(
                            policy_to_improve_efficiency_speed_h() == 2,
                            ((time() - year_policy_to_improve_efficiency_h()) /
                             (year_to_finish_energy_intensity_policies_h() -
                              year_policy_to_improve_efficiency_h())),
                            if_then_else(
                                policy_to_improve_efficiency_speed_h() == 3,
                                ((time() - year_policy_to_improve_efficiency_h()) /
                                 (year_to_finish_energy_intensity_policies_h() -
                                  year_policy_to_improve_efficiency_h())
                                 )**exp_slow_evolution_improve_efficiency_h(), 0)))))))


@cache('run')
def year_to_finish_energy_intensity_policies_h():
    """
    Real Name: b'year to finish energy intensity policies h'
    Original Eqn: b'2050'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2050


@cache('step')
def global_energy_intensity_h():
    """
    Real Name: b'global energy intensity h'
    Original Eqn: b'sum(evol final energy intensity h)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(evol_final_energy_intensity_h())


@cache('step')
def pressure_to_improve_energy_intensity_efficiency_h():
    """
    Real Name: b'pressure to improve energy intensity efficiency h'
    Original Eqn: b'min(1,fuel scarcity pressure h[final sources]+implementation policy to improve energy intensity efficiency h[final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(
        1,
        fuel_scarcity_pressure_h() +
        implementation_policy_to_improve_energy_intensity_efficiency_h())


@cache('run')
def minimum_fraction_h():
    """
    Real Name: b'minimum fraction h'
    Original Eqn: b'0,0,0,0,0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0., 0., 0., 0., 0.],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('run')
def policy_change_energy_speed_h_sector_uniform():
    """
    Real Name: b'policy change energy speed h sector uniform'
    Original Eqn: b'0,0,0,0,0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0., 0., 0., 0., 0.],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('run')
def policy_to_improve_efficiency_speed_h():
    """
    Real Name: b'policy to improve efficiency speed h'
    Original Eqn: b'if then else(choose policies of intensities global or by sector=1,policy to improve efficiency speed h by sector[final sources],policy to improve efficiency speed h sector uniform[final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(choose_policies_of_intensities_global_or_by_sector() == 1,
                                  policy_to_improve_efficiency_speed_h_by_sector(),
                                  policy_to_improve_efficiency_speed_h_sector_uniform())


@cache('run')
def policy_to_improve_efficiency_speed_h_by_sector():
    """
    Real Name: b'policy to improve efficiency speed h by sector'
    Original Eqn: b'0,0,0,0,0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0., 0., 0., 0., 0.],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('run')
def policy_to_improve_efficiency_speed_h_sector_uniform():
    """
    Real Name: b'policy to improve efficiency speed h sector uniform'
    Original Eqn: b'0,0,0,0,0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0., 0., 0., 0., 0.],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def increase_of_intensity_due_to_change_energy_technology_eff_h():
    """
    Real Name: b'increase of intensity due to change energy technology eff h'
    Original Eqn: b'if then else(efficiency rate of substitution h[final sources1,final sources]=0,increase of intensity due to change energy technology net h [final sources1,final sources],increase of intensity due to change energy technology net h[final sources1,final sources]*efficiency rate of substitution h[final sources1,final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    a = align_by_dims(efficiency_rate_of_substitution_h(), ('final sources1', 'final sources'))
    return if_then_else(
        a == 0,
        increase_of_intensity_due_to_change_energy_technology_net_h(),
        increase_of_intensity_due_to_change_energy_technology_net_h() *
        a)


@cache('step')
def increase_of_intensity_due_to_change_energy_technology_h_top_down():
    """
    Real Name: b'increase of intensity due to change energy technology h top down'
    Original Eqn: b'sum2(increase of intensity due to change energy technology eff h)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    x = sum(data=increase_of_intensity_due_to_change_energy_technology_eff_h(), dim='final sources')

    return x.rename({'final sources1': 'final sources'})


@cache('step')
def increase_of_intensity_due_to_change_energy_technology_net_h():
    """
    Real Name: b'increase of intensity due to change energy technology net h'
    Original Eqn: b'decrease of intensity due to change energy technology h top down[final sources]*share tech change fuel h[final sources1,final sources]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return decrease_of_intensity_due_to_change_energy_technology_h_top_down() * share_tech_change_fuel_h()


@cache('run')
def efficiency_rate_of_substitution_h_sector_uniform():
    """
    Real Name: b'efficiency rate of substitution h sector uniform'
    Original Eqn: b'0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]],
                        coords={
                            'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids'],
                            'final sources1':
                            ['electricity', 'heat', 'liquids', 'gases', 'solids']
                        },
                        dims=['final sources', 'final sources1'])


@cache('run')
def energy_intensity_target_h():
    """
    Real Name: b'energy intensity target h'
    Original Eqn: b'0.668275972558369,0.158901439155964,1.57877870665412,0.690080675387289,1.45256951961667'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0.66827597, 0.15890144, 1.57877871, 0.69008068, 1.45256952],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def evol_final_energy_intensity_h():
    """
    Real Name: b'evol final energy intensity h'
    Original Eqn: b'integ ( increase of intensity due to change energy technology h top down[final sources]+inertial rate energy intensity h top down[final sources]-decrease of intensity due to change energy technology h top down [final sources], initial energy intensity 1995 h[final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_evol_final_energy_intensity_h()


@cache('run')
def activate_scarcity_feedback_final_fuel_replacement_quest():
    """
    Real Name: b'activate scarcity feedback final fuel replacement quest'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def activate_transport_h_bottom_up_method():
    """
    Real Name: b'activate transport h bottom up method'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def initial_energy_intensity_1995_h():
    """
    Real Name: b'initial energy intensity 1995 h'
    Original Eqn: b'0.6319452492878225,0.2855157381546875,1.568424004123364,0.8069129864373691,1.95104724970324'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0.63194525, 0.28551574, 1.568424, 0.80691299, 1.95104725],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def change_total_intensity_to_rest():
    """
    Real Name: b'change total intensity to rest'
    Original Eqn: b'1-step(0.78, 2009)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        1 - step(__data['time'], 0.007, 2009), 0.0,
        1 - step(__data['time'], 0.78, 2009),
        1 - step(__data['time'], 0.025, 2009), 0.0],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def variation_energy_intensity_target_h():
    """
    Real Name: b'variation energy intensity target h'
    Original Eqn: b'if then else(choose energy intensity target method=1,if then else(Time>=final year target h,0,if then else (Time <year energy intensity target,0,((energy intensity target h[final sources]-evol final energy intensity h[final sources])/(final year target h-Time)))),if then else(Time >=final year target h,0,if then else(Time <year energy intensity target,0,((final energy intensity 2020 h[final sources]*(1+pct change energy intensity target )-evol final energy intensity h[final sources])/(final year target h-Time)))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        choose_energy_intensity_target_method() == 1,
        if_then_else(
            time() >= final_year_target_h(), 0,
            if_then_else(
                time() < year_energy_intensity_target(), 0,
                ((energy_intensity_target_h() - evol_final_energy_intensity_h()) /
                 (final_year_target_h() - time())))),
        if_then_else(
            time() >= final_year_target_h(), 0,
            if_then_else(
                time() < year_energy_intensity_target(), 0,
                ((final_energy_intensity_2020_h() *
                  (1 + pct_change_energy_intensity_target()) - evol_final_energy_intensity_h()) /
                 (final_year_target_h() - time())))))


@cache('run')
def exp_rapid_evolution_improve_efficiency_h():
    """
    Real Name: b'exp rapid evolution improve efficiency h'
    Original Eqn: b'1/2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1 / 2


@cache('run')
def initial_global_energy_intensity_2009_h():
    """
    Real Name: b'initial global energy intensity 2009 h'
    Original Eqn: b'4.597962348639566'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 4.597962348639566


@cache('run')
def exp_slow_evolution_change_energy_h():
    """
    Real Name: b'exp slow evolution change energy h'
    Original Eqn: b'2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2


@cache('step')
def final_energy_intensity_2020_h():
    """
    Real Name: b'final energy intensity 2020 h'
    Original Eqn: b'if then else(Time<year energy intensity target,evol final energy intensity h[final sources],aux19[final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < year_energy_intensity_target(),
                                  evol_final_energy_intensity_h(), aux19())


@cache('run')
def exp_slow_evolution_improve_efficiency_h():
    """
    Real Name: b'exp slow evolution improve efficiency h'
    Original Eqn: b'2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2


@cache('run')
def percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities():
    """
    Real Name: b'percentage of change over the historic maximun variation of energy intensities'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('step')
def efficiency_energy_acceleration_h():
    """
    Real Name: b'efficiency energy acceleration h'
    Original Eqn: b'(-maximum yearly acceleration of intensity improvement pct h[final sources]*(1+percentage of change over the historic maximun variation of energy intensities))*pressure to improve energy intensity efficiency h [final sources]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (-maximum_yearly_acceleration_of_intensity_improvement_pct_h() *
            (1 + percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities())
            ) * pressure_to_improve_energy_intensity_efficiency_h()


@cache('run')
def final_year_target_h():
    """
    Real Name: b'final year target h'
    Original Eqn: b'2060'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2060


@cache('run')
def year_policy_change_energy_h():
    """
    Real Name: b'year policy change energy h'
    Original Eqn: b'if then else(choose policies of intensities global or by sector=1,year policy change energy h by sector[final sources],year policy change energy h sector uniform[final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(choose_policies_of_intensities_global_or_by_sector() == 1,
                                  year_policy_change_energy_h_by_sector(),
                                  year_policy_change_energy_h_sector_uniform())


@cache('step')
def decrease_of_intensity_due_to_change_energy_technology_h_top_down():
    """
    Real Name: b'decrease of intensity due to change energy technology h top down'
    Original Eqn: b'if then else((zidz(evol final energy intensity h[final sources], global energy intensity h)) >= minimum fraction h [final sources] ,(max yearly change h[final sources]*(1+percentage of change over the historic maximun variation of energy intensities)) *evol final energy intensity h[final sources] * pressure to change energy technology h [final sources] , 0 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        (zidz(evol_final_energy_intensity_h(),
                        global_energy_intensity_h())) >= minimum_fraction_h(),
        (max_yearly_change_h() *
         (1 + percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities())) *
        evol_final_energy_intensity_h() * pressure_to_change_energy_technology_h(), 0)


@cache('run')
def historical_mean_rate_energy_intensity_h():
    """
    Real Name: b'historical mean rate energy intensity h'
    Original Eqn: b'0.004811875,-0.04466554,0.001057561,-0.010881799,-0.021956531'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0.00481188, -0.04466554, 0.00105756, -0.0108818, -0.02195653],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def aux19():
    """
    Real Name: b'aux19'
    Original Eqn: b'delay fixed ( final energy intensity 2020 h[final sources], time step , 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    x = [x() for x in _delay_final_energy_intensity_2020_h_roundtime_step__time_step___time_step_0_time_step__time_step]

    return xr.DataArray(data=x,
                        dims=['final sources'],
                        coords={'final sources': _subscript_dict.get('final sources')})


@cache('run')
def year_policy_to_improve_efficiency_h():
    """
    Real Name: b'year policy to improve efficiency h'
    Original Eqn: b'if then else(choose policies of intensities global or by sector=1,year policy to improve efficiency h by sector[final sources],year policy to improve efficiency h sector uniform[final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(choose_policies_of_intensities_global_or_by_sector() == 1,
                                  year_policy_to_improve_efficiency_h_by_sector(),
                                  year_policy_to_improve_efficiency_h_sector_uniform())


@cache('run')
def exp_rapid_evolution_change_energy_h():
    """
    Real Name: b'exp rapid evolution change energy h'
    Original Eqn: b'1/2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1 / 2


@cache('run')
def max_yearly_change_h():
    """
    Real Name: b'max yearly change h'
    Original Eqn: b'0.004334270610034585,0.02195329077995646,0.025375451485255995,0.01081587243373559,0.010890999470972778'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0.00433427, 0.02195329, 0.02537545, 0.01081587, 0.010891],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def pressure_to_change_energy_technology_h():
    """
    Real Name: b'pressure to change energy technology h'
    Original Eqn: b'min(1,sum1(pressure to change energy technology by fuel h))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """

    a = align_by_dims(pressure_to_change_energy_technology_by_fuel_h(), ('final sources1', 'final sources'))

    return np.minimum(1, sum(dim='final sources1', data=a))


@cache('step')
def energy_intensity_of_households():
    """
    Real Name: b'energy intensity of households'
    Original Eqn: b'if then else(Time<2009,energy intensity of households rest[final sources], if then else(activate transport h bottom up method=0,energy intensity of households rest[final sources],energy intensity of households transport [final sources]+energy intensity of households rest[final sources]))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2009, energy_intensity_of_households_rest(),
        if_then_else(
            activate_transport_h_bottom_up_method() == 0, energy_intensity_of_households_rest(),
            energy_intensity_of_households_transport() + energy_intensity_of_households_rest()))


@cache('step')
def energy_intensity_of_households_rest():
    """
    Real Name: b'energy intensity of households rest'
    Original Eqn: b'if then else(activate transport h bottom up method=1,evol final energy intensity h[liquids]*change total intensity to rest[liquids],evol final energy intensity h[liquids])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        if_then_else(activate_transport_h_bottom_up_method() == 1,
                               evol_final_energy_intensity_h().loc['electricity'].values * change_total_intensity_to_rest().loc['electricity'].values,
                               evol_final_energy_intensity_h().loc['electricity'].values),
        evol_final_energy_intensity_h().loc['heat'].values,
        if_then_else(activate_transport_h_bottom_up_method() == 1,
                               evol_final_energy_intensity_h().loc['liquids'].values * change_total_intensity_to_rest().loc['liquids'].values,
                               evol_final_energy_intensity_h().loc['liquids'].values),
        if_then_else(activate_transport_h_bottom_up_method() == 1,
                               evol_final_energy_intensity_h().loc['gases'].values * change_total_intensity_to_rest().loc['gases'].values,
                               evol_final_energy_intensity_h().loc['gases'].values),
        evol_final_energy_intensity_h().loc['solids'].values],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('run')
def efficiency_rate_of_substitution_h_by_sector():
    """
    Real Name: b'efficiency rate of substitution h by sector'
    Original Eqn: b'0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]],
                        coords={
                            'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids'],
                            'final sources1':
                            ['electricity', 'heat', 'liquids', 'gases', 'solids']
                        },
                        dims=['final sources', 'final sources1'])


@cache('step')
def available_improvement_efficiency_h():
    """
    Real Name: b'available improvement efficiency h'
    Original Eqn: b'min(1,if then else(Time>2009, zidz((global energy intensity h-(min energy intensity vs intial h*initial global energy intensity 2009 h)), (1-min energy intensity vs intial h)*initial global energy intensity 2009 h), 1))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(
        1,
        if_then_else(
            time() > 2009,
            zidz(
                (global_energy_intensity_h() -
                 (min_energy_intensity_vs_intial_h() * initial_global_energy_intensity_2009_h())),
                (1 - min_energy_intensity_vs_intial_h()) *
                initial_global_energy_intensity_2009_h()), 1))


@cache('run')
def policy_change_energy_speed_h_by_sector():
    """
    Real Name: b'policy change energy speed h by sector'
    Original Eqn: b'0,0,0,0,0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0., 0., 0., 0., 0.],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('run')
def year_policy_to_improve_efficiency_h_by_sector():
    """
    Real Name: b'year policy to improve efficiency h by sector'
    Original Eqn: b'0,0,0,0,0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0., 0., 0., 0., 0.],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def pressure_to_change_energy_technology_by_fuel_h():
    """
    Real Name: b'pressure to change energy technology by fuel h'
    Original Eqn: b'if then else(efficiency rate of substitution h[final sources,final sources1]=0,min(max(inter fuel scarcity pressure h [final sources,final sources1],0),1) ,min(max(inter fuel scarcity pressure h[final sources,final sources1] + implementatio policy to change final energy h [final sources1], 0) , 1 ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    b = implementatio_policy_to_change_final_energy_h().rename({'final sources': 'final sources1'})

    return if_then_else(
        efficiency_rate_of_substitution_h() == 0,
        np.minimum(np.maximum(inter_fuel_scarcity_pressure_h(), 0), 1),
        np.minimum(
            np.maximum(
                inter_fuel_scarcity_pressure_h() + b,
                0), 1))


@cache('run')
def year_policy_to_improve_efficiency_h_sector_uniform():
    """
    Real Name: b'year policy to improve efficiency h sector uniform'
    Original Eqn: b'0,0,0,0,0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0., 0., 0., 0., 0.],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('run')
def min_energy_intensity_vs_intial_h():
    """
    Real Name: b'min energy intensity vs intial h'
    Original Eqn: b'0.3'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.3


@cache('run')
def year_policy_change_energy_h_by_sector():
    """
    Real Name: b'year policy change energy h by sector'
    Original Eqn: b'0,0,0,0,0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0., 0., 0., 0., 0.],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('run')
def year_policy_change_energy_h_sector_uniform():
    """
    Real Name: b'year policy change energy h sector uniform'
    Original Eqn: b'0,0,0,0,0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0., 0., 0., 0., 0.],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('run')
def pct_change_energy_intensity_target():
    """
    Real Name: b'pct change energy intensity target'
    Original Eqn: b'-0.3'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return -0.3


@cache('step')
def share_tech_change_fuel_h():
    """
    Real Name: b'share tech change fuel h'
    Original Eqn: b'zidz(pressure to change energy technology by fuel h[final sources1,final sources] , sum1(pressure to change energy technology by fuel h))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    a = align_by_dims(pressure_to_change_energy_technology_by_fuel_h(), ('final sources1', 'final sources'))

    x = sum(dim='final sources1', data=a)

    return zidz(a, x)


@cache('run')
def choose_policies_of_intensities_global_or_by_sector():
    """
    Real Name: b'choose policies of intensities global or by sector'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def choose_energy_intensity_target_method():
    """
    Real Name: b'choose energy intensity target method'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def implementatio_policy_to_change_final_energy_h():
    """
    Real Name: b'implementatio policy to change final energy h'
    Original Eqn: b'if then else(choose final sectoral energy intensities evolution method<>2 ,0,if then else(year policy change energy h[final sources]<2015:or:year policy change energy h[final sources]>year to finish energy intensity policies h,0,if then else(Time<year policy change energy h[final sources],0,if then else (Time >year to finish energy intensity policies h,1,if then else(policy change energy speed h[final sources]= 1,((Time-year policy change energy h[final sources])/(year to finish energy intensity policies h-year policy change energy h [final sources]))^(exp rapid evolution change energy h),if then else(policy change energy speed h[final sources]=2,((Time-year policy change energy h[final sources])/(year to finish energy intensity policies h -year policy change energy h[final sources])),if then else(policy change energy speed h[final sources]=3,((Time-year policy change energy h[final sources])/(year to finish energy intensity policies h -year policy change energy h [final sources]))^exp slow evolution change energy h,0)))))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        choose_final_sectoral_energy_intensities_evolution_method() != 2, 0,
        if_then_else(
            logical_or(year_policy_change_energy_h() < 2015,
                       year_policy_change_energy_h() > year_to_finish_energy_intensity_policies_h()), 0,
            if_then_else(
                time() < year_policy_change_energy_h(), 0,
                if_then_else(
                    time() > year_to_finish_energy_intensity_policies_h(), 1,
                    if_then_else(
                        policy_change_energy_speed_h() == 1,
                        ((time() - year_policy_change_energy_h()) /
                         (year_to_finish_energy_intensity_policies_h() -
                          year_policy_change_energy_h()))**(exp_rapid_evolution_change_energy_h()),
                        if_then_else(
                            policy_change_energy_speed_h() == 2,
                            ((time() - year_policy_change_energy_h()) /
                             (year_to_finish_energy_intensity_policies_h() -
                              year_policy_change_energy_h())),
                            if_then_else(policy_change_energy_speed_h() == 3,
                                                   ((time() - year_policy_change_energy_h()) /
                                                    (year_to_finish_energy_intensity_policies_h() -
                                                     year_policy_change_energy_h())
                                                    )**exp_slow_evolution_change_energy_h(),
                                                   0)))))))


@cache('run')
def maximum_yearly_acceleration_of_intensity_improvement_pct_h():
    """
    Real Name: b'maximum yearly acceleration of intensity improvement pct h'
    Original Eqn: b'0.0031949700518810174,0.07837494830908362,0.008594628243924323,0.01942356796190789,0.03987380839165724'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[0.00319497, 0.07837495, 0.00859463, 0.01942357, 0.03987381],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('run')
def policy_change_energy_speed_h():
    """
    Real Name: b'policy change energy speed h'
    Original Eqn: b'if then else(choose policies of intensities global or by sector=1,policy change energy speed h by sector[final sources],policy change energy speed h sector uniform[final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(choose_policies_of_intensities_global_or_by_sector() == 1,
                                  policy_change_energy_speed_h_by_sector(),
                                  policy_change_energy_speed_h_sector_uniform())


@cache('run')
def efficiency_rate_of_substitution_h():
    """
    Real Name: b'efficiency rate of substitution h'
    Original Eqn: b'if then else(choose policies of intensities global or by sector=1,efficiency rate of substitution h by sector[final sources,final sources1],efficiency rate of substitution h sector uniform[final sources,final sources1])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(choose_policies_of_intensities_global_or_by_sector() == 1,
                                  efficiency_rate_of_substitution_h_by_sector(),
                                  efficiency_rate_of_substitution_h_sector_uniform())


@cache('step')
def households_final_energy_demand():
    """
    Real Name: b'households final energy demand'
    Original Eqn: b'household demand total*energy intensity of households[final sources]/1e+006'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return household_demand_total() * energy_intensity_of_households() / 1e+006


@cache('step')
def perception_of_inter_fuel_ps_scarcity_oil_ff():
    """
    Real Name: b'perception of inter fuel ps scarcity oil ff'
    Original Eqn: b'max(perception of inter fuel ps scarcity oil coal,perception of inter fuel ps scarcity oil natxgas)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(perception_of_inter_fuel_ps_scarcity_oil_coal(),
                      perception_of_inter_fuel_ps_scarcity_oil_natxgas())


@cache('run')
def max_auxiliar_elec():
    """
    Real Name: b'max auxiliar elec'
    Original Eqn: b'0.03'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.03


@cache('step')
def increase_share_gas_for_elec():
    """
    Real Name: b'increase share gas for elec'
    Original Eqn: b'max auxiliar elec*perception of inter fuel ps scarcity gas coal*((1-future share gas div xcoal plus gasx for elec))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_auxiliar_elec() * perception_of_inter_fuel_ps_scarcity_gas_coal() * (
        (1 - future_share_gas_div_xcoal_plus_gasx_for_elec()))


@cache('step')
def decrease_share_gas_for_elec():
    """
    Real Name: b'decrease share gas for elec'
    Original Eqn: b'max auxiliar elec*perception of inter fuel ps scarcity coal gas*(future share gas div xcoal plus gasx for elec)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_auxiliar_elec() * perception_of_inter_fuel_ps_scarcity_coal_gas() * (
        future_share_gas_div_xcoal_plus_gasx_for_elec())


@cache('step')
def decrease_share_oil_for_elec():
    """
    Real Name: b'decrease share oil for elec'
    Original Eqn: b'max auxiliar elec*perception of inter fuel ps scarcity ff oil*(future share oil div ff for elec)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_auxiliar_elec() * perception_of_inter_fuel_ps_scarcity_ff_oil() * (
        future_share_oil_div_ff_for_elec())


@cache('step')
def future_share_gas_plus_coal_div_ff_for_elec():
    """
    Real Name: b'future share gas plus coal div ff for elec'
    Original Eqn: b'1-future share oil div ff for elec'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 - future_share_oil_div_ff_for_elec()


@cache('step')
def future_share_gas_div_xcoal_plus_gasx_for_elec():
    """
    Real Name: b'future share gas div xcoal plus gasx for elec'
    Original Eqn: b'integ ( increase share gas for elec-decrease share gas for elec, share gas div xcoal plus gasx for elec in x2014)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_future_share_gas_div_xcoal_plus_gasx_for_elec()


@cache('step')
def future_share_oil_div_ff_for_elec():
    """
    Real Name: b'future share oil div ff for elec'
    Original Eqn: b'integ ( increase share oil for elec-decrease share oil for elec, share oil div ff for elec in x2015)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_future_share_oil_div_ff_for_elec()


@cache('step')
def perception_of_inter_fuel_ps_scarcity_ff_oil():
    """
    Real Name: b'perception of inter fuel ps scarcity ff oil'
    Original Eqn: b'max(perception of inter fuel ps scarcity coal oil,perception of inter fuel ps scarcity natx gas oil)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(perception_of_inter_fuel_ps_scarcity_coal_oil(),
                      perception_of_inter_fuel_ps_scarcity_natx_gas_oil())


@cache('run')
def switch_scarcity_ps_elec_substit():
    """
    Real Name: b'switch scarcity ps elec substit'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def share_gas_div_xcoal_plus_gasx_for_elec_in_x2014():
    """
    Real Name: b'share gas div xcoal plus gasx for elec in x2014'
    Original Eqn: b'0.3032674271146121'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.3032674271146121


@cache('step')
def increase_share_oil_for_elec():
    """
    Real Name: b'increase share oil for elec'
    Original Eqn: b'max auxiliar elec*perception of inter fuel ps scarcity oil ff*((1-future share oil div ff for elec))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_auxiliar_elec() * perception_of_inter_fuel_ps_scarcity_oil_ff() * (
        (1 - future_share_oil_div_ff_for_elec()))


@cache('run')
def share_oil_div_ff_for_elec_in_x2015():
    """
    Real Name: b'share oil div ff for elec in x2015'
    Original Eqn: b'0.061736135774793574'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.061736135774793574


@cache('step')
def total_fed_trasnport_households():
    """
    Real Name: b'total fed trasnport households'
    Original Eqn: b'sum(transport households final energy demand)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(transport_households_final_energy_demand())


@cache('step')
def transport_households_final_energy_demand():
    """
    Real Name: b'transport households final energy demand'
    Original Eqn: b'energy intensity of households transport[final sources]*household demand total/1e+006'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return energy_intensity_of_households_transport() * household_demand_total() / 1e+006


@cache('step')
def modern_bioe_in_households():
    """
    Real Name: b'modern bioe in households'
    Original Eqn: b'households final energy demand[solids]-pe traditional biomass consum ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return households_final_energy_demand().loc['solids'].values - pe_traditional_biomass_consum_ej()


@cache('step')
def households_total_final_energy_demand():
    """
    Real Name: b'households total final energy demand'
    Original Eqn: b'sum(households final energy demand)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(households_final_energy_demand())


@cache('step')
def pe_traditional_biomass_demand_ej():
    """
    Real Name: b'pe traditional biomass demand ej'
    Original Eqn: b'households final energy demand[solids]*share trad biomass vs solids in households'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return households_final_energy_demand().loc['solids'].values * share_trad_biomass_vs_solids_in_households()


@cache('step')
def required_fed_by_fuel_before_heat_correction():
    """
    Real Name: b'required fed by fuel before heat correction'
    Original Eqn: b'(required fed sectors by fuel[final sources]+households final energy demand[final sources])*eroi fc system from 2015'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (required_fed_sectors_by_fuel() +
            households_final_energy_demand()) * eroi_fc_system_from_2015()


@cache('step')
def total_transport_fed_by_fuel():
    """
    Real Name: b'total transport fed by fuel'
    Original Eqn: b'required final energy air transport[final sources]+required final energy inland transport[final sources]+required final energy other transport[final sources]+required final energy water transport[final sources]+transport households final energy demand[final sources]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_final_energy_air_transport() + required_final_energy_inland_transport(
    ) + required_final_energy_other_transport() + required_final_energy_water_transport(
    ) + transport_households_final_energy_demand()


@cache('step')
def phs_overcapacity():
    """
    Real Name: b'phs overcapacity'
    Original Eqn: b'max(0, zidz((potential fe elec stored phs twh - real fe elec stored phs twh) , potential fe elec stored phs twh))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        zidz((potential_fe_elec_stored_phs_twh() - real_fe_elec_stored_phs_twh()),
                       potential_fe_elec_stored_phs_twh()))


@cache('step')
def potential_fe_elec_stored_phs_twh():
    """
    Real Name: b'potential fe elec stored phs twh'
    Original Eqn: b'installed capacity phs tw*cp phs/twe per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return installed_capacity_phs_tw() * cp_phs() / twe_per_twh()


@cache('run')
def activate_eroi_quest():
    """
    Real Name: b'activate eroi quest'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def eroi_fc_system_from_2015():
    """
    Real Name: b'eroi fc system from 2015'
    Original Eqn: b'if then else(activate eroi quest=0,1,eroi fc system from 2015 1)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(activate_eroi_quest() == 0, 1, eroi_fc_system_from_2015_1())


@cache('run')
def ratio_land_productivity_2gen_vs_marg():
    """
    Real Name: b'ratio land productivity 2gen vs marg'
    Original Eqn: b'land productivity biofuels 2gen ej mha/land productivity biofuels marg ej mha'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return land_productivity_biofuels_2gen_ej_mha() / land_productivity_biofuels_marg_ej_mha()


@cache('run')
def land_productivity_biofuels_marg_ej_mha():
    """
    Real Name: b'land productivity biofuels marg ej mha'
    Original Eqn: b'0.0106'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.0106


@cache('run')
def correction_factor_all_ghgs():
    """
    Real Name: b'correction factor all ghgs'
    Original Eqn: b'1.22'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1.22


@cache('step')
def cumulative_co2e_ghg_emissions():
    """
    Real Name: b'cumulative co2e ghg emissions'
    Original Eqn: b'integ ( total ce all ghg, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cumulative_co2e_ghg_emissions()


@cache('step')
def total_ce_all_ghg():
    """
    Real Name: b'total ce all ghg'
    Original Eqn: b'total co2exgwp equal 100 yearsx*correction factor all ghgs*c per co2'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_co2exgwp_equal_100_yearsx() * correction_factor_all_ghgs() * c_per_co2()


@cache('step')
def total_co2e_all_ghg():
    """
    Real Name: b'total co2e all ghg'
    Original Eqn: b'total co2exgwp equal 100 yearsx*correction factor all ghgs'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_co2exgwp_equal_100_yearsx() * correction_factor_all_ghgs()


@cache('run')
def share_in_target_year_oil_for_heat():
    """
    Real Name: b'share in target year oil for heat'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('step')
def p_share_oil_for_heat():
    """
    Real Name: b'p share oil for heat'
    Original Eqn: b'max(0, a lineal regr phase out oil for heat*Time+b lineal regr phase out oil for heat)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        a_lineal_regr_phase_out_oil_for_heat() * time() + b_lineal_regr_phase_out_oil_for_heat())


@cache('run')
def target_year_policy_phase_out_oil_for_heat():
    """
    Real Name: b'target year policy phase out oil for heat'
    Original Eqn: b'2030'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2030


@cache('step')
def b_lineal_regr_phase_out_oil_for_heat():
    """
    Real Name: b'b lineal regr phase out oil for heat'
    Original Eqn: b'share in target year oil for heat-a lineal regr phase out oil for heat*target year policy phase out oil for heat'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_in_target_year_oil_for_heat(
    ) - a_lineal_regr_phase_out_oil_for_heat() * target_year_policy_phase_out_oil_for_heat()


@cache('run')
def start_year_policy_phase_out_oil_for_heat():
    """
    Real Name: b'start year policy phase out oil for heat'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('run')
def start_year_policy_phase_out_oil_for_elec():
    """
    Real Name: b'start year policy phase out oil for elec'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('step')
def p_share_oil_for_elec():
    """
    Real Name: b'p share oil for elec'
    Original Eqn: b'max(0, a lineal regr phase out oil for elec*Time+b lineal regr phase out oil for elec)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        a_lineal_regr_phase_out_oil_for_elec() * time() + b_lineal_regr_phase_out_oil_for_elec())


@cache('run')
def share_in_target_year_oil_for_elec():
    """
    Real Name: b'share in target year oil for elec'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def target_year_policy_phase_out_oil_for_elec():
    """
    Real Name: b'target year policy phase out oil for elec'
    Original Eqn: b'2030'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2030


@cache('step')
def b_lineal_regr_phase_out_oil_for_elec():
    """
    Real Name: b'b lineal regr phase out oil for elec'
    Original Eqn: b'share in target year oil for elec-a lineal regr phase out oil for elec*target year policy phase out oil for elec'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_in_target_year_oil_for_elec() - a_lineal_regr_phase_out_oil_for_elec() * target_year_policy_phase_out_oil_for_elec()


@cache('step')
def fed_heat_nc_ej():
    """
    Real Name: b'fed heat nc ej'
    Original Eqn: b'fe heat demand consum-required heat com'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fe_heat_demand_consum() - required_heat_com()


@cache('step')
def leontief_matrix():
    """
    Real Name: b'leontief matrix'
    Original Eqn: b'leontief matrix for python[sectors,sectors1]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    ret = leontief_matrix_for_python()

    return align_by_dims(ret, ('sectors', 'sectors1'))


@cache('step')
def ia_matrix():
    """
    Real Name: b'ia matrix'
    Original Eqn: b'ia matrix for python[sectors,sectors1]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """

    ret = ia_matrix_for_python()
    return align_by_dims(ret, ('sectors', 'sectors1'))



@cache('step')
def pe_traditional_biomass_consum_ej():
    """
    Real Name: b'pe traditional biomass consum ej'
    Original Eqn: b'pe traditional biomass demand ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_traditional_biomass_demand_ej()


@cache('step')
def scarcity_resources_counter():
    """
    Real Name: b'scarcity resources counter'
    Original Eqn: b'integ ( if then else(materials availability xresourcesx[materials]=0, 1 , 0 ), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_scarcity_resources_counter()


@cache('step')
def scarcity_resources_flag():
    """
    Real Name: b'scarcity resources flag'
    Original Eqn: b'if then else(scarcity resources counter[materials]>1, 1 , 0 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(scarcity_resources_counter() > 1, 1, 0)


@cache('step')
def percent_res_vs_tpes():
    """
    Real Name: b'percent res vs tpes'
    Original Eqn: b'share res vs tpes*100'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_res_vs_tpes() * 100


@cache('step')
def year_init_scarcity_final_fuels():
    """
    Real Name: b'year init scarcity final fuels'
    Original Eqn: b'integ ( if then else(scarcity final fuels flags[final sources]=1,(if then else(scarcity final fuels counter[final sources]=1 , (Time*1/time step)-20, 0)), 0), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_year_init_scarcity_final_fuels()


@cache('step')
def year_init_scarcity_reserves():
    """
    Real Name: b'year init scarcity reserves'
    Original Eqn: b'integ ( if then else(materials availability xreservesx[materials]=0, (if then else (scarcity reserves counter[materials]=1 , (Time*1/time step) , 0 )) , 0 ), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_year_init_scarcity_reserves()


@cache('step')
def percent_tot_monet_invest_reselec_vs_gdp():
    """
    Real Name: b'percent tot monet invest reselec vs gdp'
    Original Eqn: b'share tot monet invest elec res vs gdp*100'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_tot_monet_invest_elec_res_vs_gdp() * 100


@cache('step')
def scarcity_final_fuels_counter():
    """
    Real Name: b'scarcity final fuels counter'
    Original Eqn: b'integ ( if then else(scarcity final fuels flags[final sources]=1, 1 , 0 ), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_scarcity_final_fuels_counter()


@cache('step')
def percent_e_losses_cc():
    """
    Real Name: b'percent e losses cc'
    Original Eqn: b'share e losses cc*100'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_e_losses_cc() * 100


@cache('step')
def scarcity_reserves_counter():
    """
    Real Name: b'scarcity reserves counter'
    Original Eqn: b'integ ( if then else(materials availability xreservesx[materials]=0, 1 , 0 ), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_scarcity_reserves_counter()


@cache('step')
def year_final_scarcity_reserves():
    """
    Real Name: b'year final scarcity reserves'
    Original Eqn: b'if then else(scarcity reserves counter[materials]>0,year init scarcity reserves[materials]+scarcity reserves counter[materials]-1,0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(scarcity_reserves_counter() > 0,
                                  year_init_scarcity_reserves() + scarcity_reserves_counter() - 1,
                                  0)


@cache('step')
def year_final_scarcity_resources():
    """
    Real Name: b'year final scarcity resources'
    Original Eqn: b'if then else(scarcity resources counter[materials]>0,year init scarcity resources[materials]+scarcity resources counter[materials]-1,0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        scarcity_resources_counter() > 0,
        year_init_scarcity_resources() + scarcity_resources_counter() - 1, 0)


@cache('step')
def scarcity_fuels_flag():
    """
    Real Name: b'scarcity fuels flag'
    Original Eqn: b'if then else(scarcity final fuels counter[final sources]>1, 1, 0 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(scarcity_final_fuels_counter() > 1, 1, 0)


@cache('step')
def scarcity_reserves_flag():
    """
    Real Name: b'scarcity reserves flag'
    Original Eqn: b'if then else(scarcity reserves counter[materials]>1 ,1 , 0 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(scarcity_reserves_counter() > 1, 1, 0)


@cache('step')
def year_init_scarcity_resources():
    """
    Real Name: b'year init scarcity resources'
    Original Eqn: b'integ ( if then else(materials availability xresourcesx[materials]=0,(if then else (scarcity resources counter[materials]=1,(Time*1/time step),0)),0), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_year_init_scarcity_resources()


@cache('step')
def percent_remaining_potential_tot_res_heat():
    """
    Real Name: b'percent remaining potential tot res heat'
    Original Eqn: b'remaining potential tot res heat*100'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return remaining_potential_tot_res_heat() * 100


@cache('step')
def abundance_final_fuels():
    """
    Real Name: b'abundance final fuels'
    Original Eqn: b'abundance liquids'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        abundance_electricity(),
        abundance_heat(),
        abundance_liquids(),
        abundance_gases(),
        abundance_solids()],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def scarcity_final_fuels_flags():
    """
    Real Name: b'scarcity final fuels flags'
    Original Eqn: b'if then else(abundance final fuels[final sources]<0.999, 1 , 0 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(abundance_final_fuels() < 0.999, 1, 0)


@cache('step')
def percent_remaining_potential_tot_res_elec():
    """
    Real Name: b'percent remaining potential tot res elec'
    Original Eqn: b'remaining potential tot res elec*100'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return remaining_potential_tot_res_elec() * 100


@cache('step')
def year_final_scarcity_final_fuels():
    """
    Real Name: b'year final scarcity final fuels'
    Original Eqn: b'if then else(scarcity final fuels counter[final sources]>0,year init scarcity final fuels[final sources]+scarcity final fuels counter[final sources]-1,0 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        scarcity_final_fuels_counter() > 0,
        year_init_scarcity_final_fuels() + scarcity_final_fuels_counter() - 1, 0)


@cache('step')
def share_blue_water_use_vs_ar():
    """
    Real Name: b'share blue water use vs ar'
    Original Eqn: b'total water use by type[blue water]/(ar water*dam3 per km3)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_water_use_by_type().loc['blue water'].values / (ar_water() * dam3_per_km3())


@cache('run')
def ar_water():
    """
    Real Name: b'ar water'
    Original Eqn: b'7091.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 7091.0


@cache('step')
def share_total_water_use_vs_ar():
    """
    Real Name: b'share total water use vs ar'
    Original Eqn: b'total water use/(ar water*dam3 per km3)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_water_use() / (ar_water() * dam3_per_km3())


@cache('run')
def renewable_water_resources():
    """
    Real Name: b'renewable water resources'
    Original Eqn: b'43659.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 43659.0


@cache('step')
def share_blue_water_use_vs_renewable_water_resources():
    """
    Real Name: b'share blue water use vs renewable water resources'
    Original Eqn: b'total water use by type[blue water]/(renewable water resources*dam3 per km3 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_water_use_by_type().loc['blue water'].values / (renewable_water_resources() * dam3_per_km3())


@cache('run')
def dam3_per_km3():
    """
    Real Name: b'dam3 per km3'
    Original Eqn: b'1000000.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000000.0


@cache('step')
def share_total_water_use_vs_renewable_water_resources():
    """
    Real Name: b'share total water use vs renewable water resources'
    Original Eqn: b'total water use/(renewable water resources*dam3 per km3)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_water_use() / (renewable_water_resources() * dam3_per_km3())


@cache('step')
def total_pe_solid_bioe_potential_heat_plus_elec_ej():
    """
    Real Name: b'total pe solid bioe potential heat plus elec ej'
    Original Eqn: b'max potential npp bioe conventional for heat plus elec+pe bioe residues for heat plus elec ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_potential_npp_bioe_conventional_for_heat_plus_elec(
    ) + pe_bioe_residues_for_heat_plus_elec_ej()


@cache('run')
def land_module_activated_quest():
    """
    Real Name: b'land module activated quest'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def cp_res_for_heat():
    """
    Real Name: b'cp res for heat'
    Original Eqn: b'cp ini res for heat[res heat]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return cp_ini_res_for_heat()


@cache('step')
def potential_fes_res_for_heat_com_ej():
    """
    Real Name: b'potential fes res for heat com ej'
    Original Eqn: b'potential fes res for heat com twh[res heat]*ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return potential_fes_res_for_heat_com_twh() * ej_per_twh()


@cache('step')
def potential_fes_res_for_heat_com_twh():
    """
    Real Name: b'potential fes res for heat com twh'
    Original Eqn: b'installed capacity res heat com tw[res heat]*efficiency res heat[res heat]*cp res for heat[res heat]/twe per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return installed_capacity_res_heat_com_tw() * efficiency_res_heat() * cp_res_for_heat(
    ) / twe_per_twh()


@cache('step')
def real_generation_res_elec_twh():
    """
    Real Name: b'real generation res elec twh'
    Original Eqn: b'potential generation res elec twh[res elec]*(1-res elec tot overcapacity)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return potential_generation_res_elec_twh() * (1 - res_elec_tot_overcapacity())


@cache('step')
def potential_fes_res_for_heat_nc_twh():
    """
    Real Name: b'potential fes res for heat nc twh'
    Original Eqn: b'installed capacity res heat nc tw[res heat]*efficiency res heat[res heat]*cp res for heat[res heat]/twe per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return installed_capacity_res_heat_nc_tw() * efficiency_res_heat() * cp_res_for_heat(
    ) / twe_per_twh()


@cache('step')
def replacement_capacity_res_elec():
    """
    Real Name: b'replacement capacity res elec'
    Original Eqn: b'if then else(Time<2015,0,replacement rate res elec[res elec]*wear res elec[res elec]*(1-res elec tot overcapacity ))*constraint elec storage availability[res elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, 0,
        replacement_rate_res_elec() * wear_res_elec() *
        (1 - res_elec_tot_overcapacity())) * constraint_elec_storage_availability()


@cache('step')
def cp_res_elec():
    """
    Real Name: b'cp res elec'
    Original Eqn: b'max(min cp baseload res[res elec], cp ini res elec[res elec]*cp exogenous res elec reduction[res elec])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(min_cp_baseload_res(), cp_ini_res_elec() * cp_exogenous_res_elec_reduction())


@cache('step')
def replacement_res_for_heat_nc_tw():
    """
    Real Name: b'replacement res for heat nc tw'
    Original Eqn: b'wear res capacity for heat nc tw[res heat]*replacement res for heat nc[res heat]*(1-res heat nc tot overcapacity )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return wear_res_capacity_for_heat_nc_tw() * replacement_res_for_heat_nc() * (
        1 - res_heat_nc_tot_overcapacity())


@cache('step')
def replacement_res_for_heat_com_tw():
    """
    Real Name: b'replacement res for heat com tw'
    Original Eqn: b'wear res capacity for heat com tw[res heat]*replacement res for heat com[res heat]*(1-res heat com tot overcapacity )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return wear_res_capacity_for_heat_com_tw() * replacement_res_for_heat_com() * (
        1 - res_heat_com_tot_overcapacity())


@cache('run')
def max_eroi_fc():
    """
    Real Name: b'max eroi fc'
    Original Eqn: b'5'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5


@cache('step')
def eroi_fc_system_from_2015_1():
    """
    Real Name: b'eroi fc system from 2015 1'
    Original Eqn: b'if then else(Time<2016,1, if then else(eroist system delayed 1yr>1,min(max eroi fc, (eroist system delayed 1yr/(eroist system delayed 1yr - 1))*((eroist system until 2015 -1)/eroist system until 2015) ), max eroi fc))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2016, 1,
        if_then_else(
            eroist_system_delayed_1yr() > 1,
            np.minimum(max_eroi_fc(),
                       (eroist_system_delayed_1yr() / (eroist_system_delayed_1yr() - 1)) *
                       ((eroist_system_until_2015() - 1) / eroist_system_until_2015())),
            max_eroi_fc()))


@cache('run')
def p_rr_ti_rest():
    """
    Real Name: b'p rr ti rest'
    Original Eqn: b'0.91'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.91


@cache('run')
def p_rr_li_rest():
    """
    Real Name: b'p rr li rest'
    Original Eqn: b'0.005'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.005


@cache('run')
def p_rr_v_rest():
    """
    Real Name: b'p rr v rest'
    Original Eqn: b'0.005'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.005


@cache('run')
def p_rr_mg_rest():
    """
    Real Name: b'p rr mg rest'
    Original Eqn: b'0.39'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.39


@cache('run')
def p_rr_zn_rest():
    """
    Real Name: b'p rr zn rest'
    Original Eqn: b'0.395'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.395


@cache('run')
def p_rr_minerals_rest():
    """
    Real Name: b'p rr minerals rest'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,
        p_rr_al_rest(),0.0,
        p_rr_cd_rest(),0.0,0.0,
        p_rr_cr_rest(),
        p_rr_cu_rest(),0.0,0.0,0.0,0.0,0.0,0.0,
        p_rr_ga_rest(),0.0,0.0,0.0,
        p_rr_in_rest(),
        p_rr_fe_rest(),0.0,0.0,0.0,0.0,
        p_rr_li_rest(),0.0,
        p_rr_mg_rest(),
        p_rr_mn_rest(),0.0,0.0,
        p_rr_mo_rest(),0.0,0.0,0.0,
        p_rr_ni_rest(),0.0,0.0,0.0,
        p_rr_pb_rest(),0.0,0.0,0.0,0.0,0.0,0.0,0.0,
        p_rr_ag_rest(),0.0,
        p_rr_sn_rest(),0.0,0.0,0.0,
        p_rr_te_rest(),
        p_rr_ti_rest(),0.0,
        p_rr_v_rest(),0.0,
        p_rr_zn_rest()],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('run')
def p_rr_cd_rest():
    """
    Real Name: b'p rr cd rest'
    Original Eqn: b'0.15'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.15


@cache('step')
def improvement_recycling_rates_minerals_rest():
    """
    Real Name: b'improvement recycling rates minerals rest'
    Original Eqn: b'if then else(Time<2015, historic improvement recycling rates minerals[materials], if then else(choose targets mineral recycling rates=2,common rr minerals variation rest[materials] *recycling rates minerals rest[materials], by mineral rr variation rest[materials]))*constrain rr improv for rest per mineral [materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, historic_improvement_recycling_rates_minerals(),
        if_then_else(
            choose_targets_mineral_recycling_rates() == 2,
            common_rr_minerals_variation_rest() * recycling_rates_minerals_rest(),
            by_mineral_rr_variation_rest())) * constrain_rr_improv_for_rest_per_mineral()


@cache('run')
def b_lineal_regr_rr_alt_techn():
    """
    Real Name: b'b lineal regr rr alt techn'
    Original Eqn: b'p rr minerals alt techn[materials]-a lineal regr rr alt techn[materials]*target year p rr minerals alt techn'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return p_rr_minerals_alt_techn(
    ) - a_lineal_regr_rr_alt_techn() * target_year_p_rr_minerals_alt_techn()


@cache('run')
def b_lineal_regr_rr_rest():
    """
    Real Name: b'b lineal regr rr rest'
    Original Eqn: b'p rr minerals rest[materials]-a lineal regr rr rest[materials]* target year p rr minerals rest'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return p_rr_minerals_rest() - a_lineal_regr_rr_rest() * target_year_p_rr_minerals_rest()


@cache('step')
def by_mineral_rr_rest_1yr():
    """
    Real Name: b'by mineral rr rest 1yr'
    Original Eqn: b'delay fixed ( by mineral rr rest[materials], 1, current recycling rates minerals alt techn[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    x = [x() for x in
         _delay_by_mineral_rr_rest_round1__time_step___time_step_current_recycling_rates_minerals_alt_techn_1__time_step]
    return xr.DataArray(data=x,
                        dims=['materials'],
                        coords={'materials': _subscript_dict.get('materials')})

@cache('run')
def p_rr_cu_rest():
    """
    Real Name: b'p rr cu rest'
    Original Eqn: b'0.48'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.48


@cache('run')
def a_lineal_regr_rr_alt_techn():
    """
    Real Name: b'a lineal regr rr alt techn'
    Original Eqn: b'(p rr minerals alt techn[materials]-current recycling rates minerals alt techn[materials])/(target year p rr minerals alt techn-start year p rr minerals alt techn)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (p_rr_minerals_alt_techn() - current_recycling_rates_minerals_alt_techn()) / (
        target_year_p_rr_minerals_alt_techn() - start_year_p_rr_minerals_alt_techn())


@cache('run')
def a_lineal_regr_rr_rest():
    """
    Real Name: b'a lineal regr rr rest'
    Original Eqn: b'(p rr minerals rest[materials]-current recycling rates minerals[materials] )/(target year p rr minerals rest -start year p rr minerals rest)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (p_rr_minerals_rest() - current_recycling_rates_minerals()) / (
        target_year_p_rr_minerals_rest() - start_year_p_rr_minerals_rest())


@cache('run')
def start_year_p_rr_minerals_rest():
    """
    Real Name: b'start year p rr minerals rest'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('step')
def common_rr_minerals_variation_rest():
    """
    Real Name: b'common rr minerals variation rest'
    Original Eqn: b'if then else(Time<start year p common rr minerals rest, historic improvement recycling rates minerals[materials], p common rr minerals variation rest)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < start_year_p_common_rr_minerals_rest(),
                                  historic_improvement_recycling_rates_minerals(),
                                  p_common_rr_minerals_variation_rest())


@cache('run')
def p_rr_in_rest():
    """
    Real Name: b'p rr in rest'
    Original Eqn: b'0.005'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.005


@cache('run')
def p_rr_te_rest():
    """
    Real Name: b'p rr te rest'
    Original Eqn: b'0.005'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.005


@cache('run')
def p_rr_mo_rest():
    """
    Real Name: b'p rr mo rest'
    Original Eqn: b'0.3'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.3


@cache('step')
def by_mineral_rr_rest():
    """
    Real Name: b'by mineral rr rest'
    Original Eqn: b'a lineal regr rr rest[materials]*Time+b lineal regr rr rest[materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return a_lineal_regr_rr_rest() * time() + b_lineal_regr_rr_rest()


@cache('run')
def p_rr_ag_rest():
    """
    Real Name: b'p rr ag rest'
    Original Eqn: b'0.635'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.635


@cache('run')
def p_rr_mn_rest():
    """
    Real Name: b'p rr mn rest'
    Original Eqn: b'0.53'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.53


@cache('run')
def p_rr_al_rest():
    """
    Real Name: b'p rr al rest'
    Original Eqn: b'0.5599999999999999'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.5599999999999999


@cache('run')
def target_year_p_rr_minerals_rest():
    """
    Real Name: b'target year p rr minerals rest'
    Original Eqn: b'2050'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2050


@cache('run')
def p_rr_ga_rest():
    """
    Real Name: b'p rr ga rest'
    Original Eqn: b'0.005'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.005


@cache('run')
def p_rr_sn_rest():
    """
    Real Name: b'p rr sn rest'
    Original Eqn: b'0.75'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.75


@cache('run')
def p_rr_pb_rest():
    """
    Real Name: b'p rr pb rest'
    Original Eqn: b'0.735'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.735


@cache('run')
def p_rr_cr_rest():
    """
    Real Name: b'p rr cr rest'
    Original Eqn: b'0.9'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.9


@cache('run')
def p_rr_ni_rest():
    """
    Real Name: b'p rr ni rest'
    Original Eqn: b'0.6'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.6


@cache('run')
def p_rr_fe_rest():
    """
    Real Name: b'p rr fe rest'
    Original Eqn: b'0.71'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.71


@cache('step')
def by_mineral_rr_variation_rest():
    """
    Real Name: b'by mineral rr variation rest'
    Original Eqn: b'if then else(Time<2015, historic improvement recycling rates minerals[materials], if then else(Time<start year p rr minerals rest, historic improvement recycling rates minerals[materials], by mineral rr rest[materials]-by mineral rr rest 1yr[materials]) )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, historic_improvement_recycling_rates_minerals(),
        if_then_else(time() < start_year_p_rr_minerals_rest(),
                               historic_improvement_recycling_rates_minerals(),
                               by_mineral_rr_rest() - by_mineral_rr_rest_1yr()))


@cache('run')
def current_recycling_rates_minerals_alt_techn():
    """
    Real Name: b'current recycling rates minerals alt techn'
    Original Eqn: b'current recycling rates minerals[materials]*eol rr minerals alt techn res vsx total economy'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return current_recycling_rates_minerals() * eol_rr_minerals_alt_techn_res_vsx_total_economy()


@cache('run')
def p_rr_mg_alt_techn():
    """
    Real Name: b'p rr mg alt techn'
    Original Eqn: b'0.13'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.13


@cache('run')
def p_rr_minerals_alt_techn():
    """
    Real Name: b'p rr minerals alt techn'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,
        p_rr_al_alt_techn(),0.0,
        p_rr_cd_alt_techn(),0.0,0.0,
        p_rr_cr_alt_techn(),
        p_rr_cu_alt_techn(),0.0,0.0,0.0,0.0,0.0,0.0,
        p_rr_ga_alt_techn(),0.0,0.0,0.0,
        p_rr_in_alt_techn(),
        p_rr_fe_alt_techn(),0.0,0.0,0.0,0.0,
        p_rr_li_alt_techn(),0.0,
        p_rr_mg_alt_techn(),
        p_rr_mn_alt_techn(),0.0,0.0,
        p_rr_mo_alt_techn(),0.0,0.0,0.0,
        p_rr_ni_alt_techn(),0.0,0.0,0.0,
        p_rr_pb_alt_techn(),0.0,0.0,0.0,0.0,0.0,0.0,0.0,
        p_rr_ag_alt_techn(),0.0,
        p_rr_sn_alt_techn(),0.0,0.0,0.0,
        p_rr_te_alt_techn(),
        p_rr_ti_alt_techn(),0.0,
        p_rr_v_alt_techn(),0.0,
        p_rr_zn_alt_techn()],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('run')
def p_rr_mn_alt_techn():
    """
    Real Name: b'p rr mn alt techn'
    Original Eqn: b'0.17666666666666667'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.17666666666666667


@cache('run')
def p_rr_mo_alt_techn():
    """
    Real Name: b'p rr mo alt techn'
    Original Eqn: b'0.09999999999999999'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.09999999999999999


@cache('run')
def p_rr_ni_alt_techn():
    """
    Real Name: b'p rr ni alt techn'
    Original Eqn: b'0.19999999999999998'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.19999999999999998


@cache('run')
def p_rr_pb_alt_techn():
    """
    Real Name: b'p rr pb alt techn'
    Original Eqn: b'0.245'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.245


@cache('step')
def by_mineral_rr_alt_techn():
    """
    Real Name: b'by mineral rr alt techn'
    Original Eqn: b'a lineal regr rr alt techn[materials]*Time+b lineal regr rr alt techn[materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return a_lineal_regr_rr_alt_techn() * time() + b_lineal_regr_rr_alt_techn()


@cache('step')
def by_mineral_rr_alt_techn_1yr():
    """
    Real Name: b'by mineral rr alt techn 1yr'
    Original Eqn: b'delay fixed ( by mineral rr alt techn[materials], 1, current recycling rates minerals alt techn[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    x = [x() for x in _delay_by_mineral_rr_alt_techn_round1__time_step___time_step_current_recycling_rates_minerals_alt_techn_1__time_step]

    return xr.DataArray(data=x,
                        dims=['materials'],
                        coords={'materials': _subscript_dict.get('materials')})

@cache('run')
def p_rr_al_alt_techn():
    """
    Real Name: b'p rr al alt techn'
    Original Eqn: b'0.18666666666666665'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.18666666666666665


@cache('run')
def p_rr_cd_alt_techn():
    """
    Real Name: b'p rr cd alt techn'
    Original Eqn: b'0.049999999999999996'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.049999999999999996


@cache('run')
def p_rr_cu_alt_techn():
    """
    Real Name: b'p rr cu alt techn'
    Original Eqn: b'0.15999999999999998'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.15999999999999998


@cache('run')
def p_rr_fe_alt_techn():
    """
    Real Name: b'p rr fe alt techn'
    Original Eqn: b'0.23666666666666664'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.23666666666666664


@cache('run')
def p_rr_ga_alt_techn():
    """
    Real Name: b'p rr ga alt techn'
    Original Eqn: b'0.0016666666666666666'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.0016666666666666666


@cache('run')
def p_rr_in_alt_techn():
    """
    Real Name: b'p rr in alt techn'
    Original Eqn: b'0.0016666666666666666'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.0016666666666666666


@cache('run')
def p_rr_li_alt_techn():
    """
    Real Name: b'p rr li alt techn'
    Original Eqn: b'0.0016666666666666666'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.0016666666666666666


@cache('step')
def recycling_rates_minerals_alt_techn():
    """
    Real Name: b'recycling rates minerals alt techn'
    Original Eqn: b'integ ( improvement recycling rates minerals alt techn[materials], current recycling rates minerals alt techn[materials]*all minerals virgin quest)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_recycling_rates_minerals_alt_techn()


@cache('run')
def p_rr_v_alt_techn():
    """
    Real Name: b'p rr v alt techn'
    Original Eqn: b'0.0016666666666666666'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.0016666666666666666


@cache('run')
def p_rr_zn_alt_techn():
    """
    Real Name: b'p rr zn alt techn'
    Original Eqn: b'0.13166666666666665'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.13166666666666665


@cache('run')
def p_rr_ti_alt_techn():
    """
    Real Name: b'p rr ti alt techn'
    Original Eqn: b'0.30333333333333334'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.30333333333333334


@cache('run')
def p_rr_cr_alt_techn():
    """
    Real Name: b'p rr cr alt techn'
    Original Eqn: b'0.3'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.3


@cache('run')
def p_rr_ag_alt_techn():
    """
    Real Name: b'p rr ag alt techn'
    Original Eqn: b'0.21166666666666667'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.21166666666666667


@cache('run')
def p_rr_sn_alt_techn():
    """
    Real Name: b'p rr sn alt techn'
    Original Eqn: b'0.25'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.25


@cache('run')
def p_rr_te_alt_techn():
    """
    Real Name: b'p rr te alt techn'
    Original Eqn: b'0.0016666666666666666'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.0016666666666666666


@cache('step')
def improvement_recycling_rates_minerals_alt_techn():
    """
    Real Name: b'improvement recycling rates minerals alt techn'
    Original Eqn: b'if then else(Time<2015, historic improvement recycling rates minerals[materials], if then else(choose targets mineral recycling rates=2,common rr minerals variation alt techn[materials]*recycling rates minerals alt techn[materials], by mineral rr variation alt techn[materials]))*constrain rr improv for alt techn per mineral[materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, historic_improvement_recycling_rates_minerals(),
        if_then_else(
            choose_targets_mineral_recycling_rates() == 2,
            common_rr_minerals_variation_alt_techn() * recycling_rates_minerals_alt_techn(),
            by_mineral_rr_variation_alt_techn())) * constrain_rr_improv_for_alt_techn_per_mineral(
            )


@cache('step')
def by_mineral_rr_variation_alt_techn():
    """
    Real Name: b'by mineral rr variation alt techn'
    Original Eqn: b'if then else(Time<2015, historic improvement recycling rates minerals[materials], if then else(Time<start year p rr minerals alt techn, historic improvement recycling rates minerals[materials], by mineral rr alt techn[materials]-by mineral rr alt techn 1yr[materials]))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, historic_improvement_recycling_rates_minerals(),
        if_then_else(time() < start_year_p_rr_minerals_alt_techn(),
                               historic_improvement_recycling_rates_minerals(),
                               by_mineral_rr_alt_techn() - by_mineral_rr_alt_techn_1yr()))


@cache('run')
def start_year_p_rr_minerals_alt_techn():
    """
    Real Name: b'start year p rr minerals alt techn'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('run')
def target_year_p_rr_minerals_alt_techn():
    """
    Real Name: b'target year p rr minerals alt techn'
    Original Eqn: b'2050'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2050


@cache('run')
def temp_change_15c():
    """
    Real Name: b'temp change 15c'
    Original Eqn: b'1.5'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1.5


@cache('run')
def density():
    """
    Real Name: b'density'
    Original Eqn: b'1000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000


@cache('run')
def sec_per_day():
    """
    Real Name: b'sec per day'
    Original Eqn: b'86400.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 86400.0


@cache('step')
def sec_per_yr():
    """
    Real Name: b'sec per yr'
    Original Eqn: b'initial( days per year*sec per day)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_days_per_yearsec_per_day()


@cache('run')
def init_atmos_uocean_temp():
    """
    Real Name: b'init atmos uocean temp'
    Original Eqn: b'0.585'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.585


@cache('run')
def watt_per_j_s():
    """
    Real Name: b'watt per j s'
    Original Eqn: b'1.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1.0


@cache('step')
def lower_layer_volume_vu():
    """
    Real Name: b'lower layer volume vu'
    Original Eqn: b'initial( area*(1-land area fraction)*layer depth[layers])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_area1land_area_fractionlayer_depth()


@cache('step')
def volumetric_heat_capacity():
    """
    Real Name: b'volumetric heat capacity'
    Original Eqn: b'initial( mass heat cap*watt per j s/sec per yr*density)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_mass_heat_capwatt_per_j_ssec_per_yrdensity()


@cache('run')
def mass_heat_cap():
    """
    Real Name: b'mass heat cap'
    Original Eqn: b'4186'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 4186


@cache('run')
def heat_diffusion_covar():
    """
    Real Name: b'heat diffusion covar'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def twox_co2x_forcing():
    """
    Real Name: b'2 co2x forcing'
    Original Eqn: b'initial( co2 rad force*ln(2))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_co2_rad_forcenplog2()


@cache('run')
def climate_sensitivity_to_2x_co2():
    """
    Real Name: b'climate sensitivity to 2x co2'
    Original Eqn: b'2.9'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2.9


@cache('step')
def temperature_change():
    """
    Real Name: b'temperature change'
    Original Eqn: b'heat in atmosphere and upper ocean/atm and upper ocean heat cap'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return heat_in_atmosphere_and_upper_ocean() / atm_and_upper_ocean_heat_cap()


@cache('run')
def land_thickness():
    """
    Real Name: b'land thickness'
    Original Eqn: b'8.4'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 8.4


@cache('step')
def heat_transfer():
    """
    Real Name: b'heat transfer'
    Original Eqn: b'(temperature change-relative deep ocean temp[layer1])*heat transfer coeff /mean depth of adjacent layers [layer1]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        (temperature_change() - relative_deep_ocean_temp().loc['layer1'].values) * heat_transfer_coeff() /
        mean_depth_of_adjacent_layers().loc['layer1'].values,
        (relative_deep_ocean_temp().loc['layer1'].values - relative_deep_ocean_temp().loc['layer2'].values) * heat_transfer_coeff() /
        mean_depth_of_adjacent_layers().loc['layer2'].values,
        (relative_deep_ocean_temp().loc['layer2'].values - relative_deep_ocean_temp().loc['layer3'].values) * heat_transfer_coeff() /
        mean_depth_of_adjacent_layers().loc['layer3'].values,
        (relative_deep_ocean_temp().loc['layer3'].values - relative_deep_ocean_temp().loc['layer4'].values) * heat_transfer_coeff() /
        mean_depth_of_adjacent_layers().loc['layer4'].values],
        coords={'layers': ['layer1', 'layer2', 'layer3', 'layer4']},
        dims=['layers'])


@cache('step')
def climate_feedback_param():
    """
    Real Name: b'climate feedback param'
    Original Eqn: b'initial( 2 co2x forcing/climate sensitivity to 2x co2)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_2_co2x_forcingclimate_sensitivity_to_2x_co2()


@cache('run')
def area():
    """
    Real Name: b'area'
    Original Eqn: b'510000000000000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 510000000000000


@cache('step')
def heat_transfer_coeff():
    """
    Real Name: b'heat transfer coeff'
    Original Eqn: b'initial( (heat transfer rate*mean depth of adjacent layers[layer1]) *(heat diffusion covar*(eddy diff coeff/eddy diff mean)+(1-heat diffusion covar)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_heat_transfer_ratemean_depth_of_adjacent_layersheat_diffusion_covareddy_diff_coeffeddy_diff_mean1heat_diffusion_covar()


@cache('step')
def eddy_diff_coeff():
    """
    Real Name: b'eddy diff coeff'
    Original Eqn: b'initial( eddy diff coeff index*eddy diff mean)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_eddy_diff_coeff_indexeddy_diff_mean()


@cache('step')
def upper_layer_volume_vu():
    """
    Real Name: b'upper layer volume vu'
    Original Eqn: b'initial( area*(land area fraction*land thickness+(1-land area fraction)*mixed depth))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_arealand_area_fractionland_thickness1land_area_fractionmixed_depth()


@cache('step')
def heat_in_deep_ocean():
    """
    Real Name: b'heat in deep ocean'
    Original Eqn: b'integ ( heat transfer[upper]-heat transfer[lower], init deep ocean temp[upper]*deep ocean heat cap[upper])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_heat_in_deep_ocean()


@cache('run')
def land_area_fraction():
    """
    Real Name: b'land area fraction'
    Original Eqn: b'0.292'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.292


@cache('step')
def relative_deep_ocean_temp():
    """
    Real Name: b'relative deep ocean temp'
    Original Eqn: b'heat in deep ocean[layers]/deep ocean heat cap[layers]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return heat_in_deep_ocean() / deep_ocean_heat_cap()


@cache('run')
def co2_rad_force_coeffcroads():
    """
    Real Name: b'co2 rad force coeffcroads'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def temp_change_2():
    """
    Real Name: b'temp change 2'
    Original Eqn: b'2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2


@cache('step')
def feedback_cooling():
    """
    Real Name: b'feedback cooling'
    Original Eqn: b'temperature change*climate feedback param'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return temperature_change() * climate_feedback_param()


@cache('run')
def heat_transfer_rate():
    """
    Real Name: b'heat transfer rate'
    Original Eqn: b'1.23'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1.23


@cache('step')
def atm_and_upper_ocean_heat_cap():
    """
    Real Name: b'atm and upper ocean heat cap'
    Original Eqn: b'initial( upper layer volume vu*volumetric heat capacity/area)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_upper_layer_volume_vuvolumetric_heat_capacityarea()


@cache('step')
def deep_ocean_heat_cap():
    """
    Real Name: b'deep ocean heat cap'
    Original Eqn: b'initial( lower layer volume vu[layers]*volumetric heat capacity/area)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_lower_layer_volume_vuvolumetric_heat_capacityarea()


@cache('run')
def init_deep_ocean_temp():
    """
    Real Name: b'init deep ocean temp'
    Original Eqn: b'0.3506'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.3506,0.1814,0.1492,0.00038],
        coords={'layers': ['layer1', 'layer2', 'layer3', 'layer4']},
        dims=['layers'])


@cache('step')
def heat_in_atmosphere_and_upper_ocean():
    """
    Real Name: b'heat in atmosphere and upper ocean'
    Original Eqn: b'integ ( effective radiative forcing -feedback cooling -heat transfer[layer1], init atmos uocean temp*atm and upper ocean heat cap)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_heat_in_atmosphere_and_upper_ocean()


@cache('run')
def ch4_n2o_unit_adj():
    """
    Real Name: b'ch4 n2o unit adj'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def adjustment_for_ch4ref_and_n2oref():
    """
    Real Name: b'adjustment for ch4ref and n2oref'
    Original Eqn: b'ch4 n2o interaction coeffient * ln(1 +ch4 n2o inter coef 2 *(ch4 reference conc*n2o reference conc *ch4 n2o unit adj*ch4 n2o unit adj)^ch4 n20 inter exp +ch4 n2o inter coef 3 *ch4 reference conc*ch4 n2o unit adj *(ch4 reference conc*n2o reference conc *ch4 n2o unit adj*ch4 n2o unit adj)^ch4 n20 inter exp 2)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ch4_n2o_interaction_coeffient() * np.log(
        1 + ch4_n2o_inter_coef_2() *
        (ch4_reference_conc() * n2o_reference_conc() * ch4_n2o_unit_adj() *
         ch4_n2o_unit_adj())**ch4_n20_inter_exp() +
        ch4_n2o_inter_coef_3() * ch4_reference_conc() * ch4_n2o_unit_adj() *
        (ch4_reference_conc() * n2o_reference_conc() * ch4_n2o_unit_adj() *
         ch4_n2o_unit_adj())**ch4_n20_inter_exp_2())


@cache('run')
def ch4_radiative_efficiency_coefficient():
    """
    Real Name: b'ch4 radiative efficiency coefficient'
    Original Eqn: b'0.036'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.036


@cache('step')
def total_radiative_forcing():
    """
    Real Name: b'total radiative forcing'
    Original Eqn: b'well mixed ghg forcing+adjusted other forcings'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return well_mixed_ghg_forcing() + adjusted_other_forcings()


@cache('run')
def last_historical_rf_year():
    """
    Real Name: b'last historical rf year'
    Original Eqn: b'2010'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2010


@cache('run')
def ch4_reference_conc():
    """
    Real Name: b'ch4 reference conc'
    Original Eqn: b'722'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 722


@cache('step')
def rf_from_f_gases():
    """
    Real Name: b'rf from f gases'
    Original Eqn: b'pfc rf+sf6 rf+hfc rf total'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pfc_rf() + sf6_rf() + hfc_rf_total()


@cache('step')
def well_mixed_ghg_forcing():
    """
    Real Name: b'well mixed ghg forcing'
    Original Eqn: b'co2 radiative forcing+ch4 and n2o radiative forcing+halocarbon rf'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return co2_radiative_forcing() + ch4_and_n2o_radiative_forcing() + halocarbon_rf()


@cache('run')
def mineral_aerosols_and_land_rf():
    """
    Real Name: b'mineral aerosols and land rf'
    Original Eqn: b'-0.3'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return -0.3


@cache('run')
def time_to_commit_rf():
    """
    Real Name: b'time to commit rf'
    Original Eqn: b'2200'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2200


@cache('run')
def ch4_n20_inter_exp():
    """
    Real Name: b'ch4 n20 inter exp'
    Original Eqn: b'0.75'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.75


@cache('run')
def ch4_n20_inter_exp_2():
    """
    Real Name: b'ch4 n20 inter exp 2'
    Original Eqn: b'1.52'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1.52


@cache('run')
def ch4_n2o_inter_coef_2():
    """
    Real Name: b'ch4 n2o inter coef 2'
    Original Eqn: b'2.01e-05'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2.01e-05


@cache('step')
def adjusted_other_forcings():
    """
    Real Name: b'adjusted other forcings'
    Original Eqn: b'other forcings+if then else(Time>last historical rf year, mineral aerosols and land rf , 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return other_forcings() + if_then_else(time() > last_historical_rf_year(),
                                                     mineral_aerosols_and_land_rf(), 0)


@cache('step')
def adjustment_for_ch4_and_n2oref():
    """
    Real Name: b'adjustment for ch4 and n2oref'
    Original Eqn: b'ch4 n2o interaction coeffient * ln(1 +ch4 n2o inter coef 2 *(ch4 atm conc*n2o reference conc *ch4 n2o unit adj*ch4 n2o unit adj)^ch4 n20 inter exp +ch4 n2o inter coef 3 *ch4 atm conc*ch4 n2o unit adj *(ch4 atm conc*n2o reference conc *ch4 n2o unit adj*ch4 n2o unit adj)^ch4 n20 inter exp 2)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ch4_n2o_interaction_coeffient() * np.log(
        1 + ch4_n2o_inter_coef_2() * (ch4_atm_conc() * n2o_reference_conc() * ch4_n2o_unit_adj() *
                                      ch4_n2o_unit_adj())**ch4_n20_inter_exp() +
        ch4_n2o_inter_coef_3() * ch4_atm_conc() * ch4_n2o_unit_adj() *
        (ch4_atm_conc() * n2o_reference_conc() * ch4_n2o_unit_adj() *
         ch4_n2o_unit_adj())**ch4_n20_inter_exp_2())


@cache('step')
def adjustment_for_ch4ref_and_n2o():
    """
    Real Name: b'adjustment for ch4ref and n2o'
    Original Eqn: b'ch4 n2o interaction coeffient * ln(1 +ch4 n2o inter coef 2 *(ch4 reference conc*n2o atm conc *ch4 n2o unit adj*ch4 n2o unit adj)^ch4 n20 inter exp +ch4 n2o inter coef 3 *ch4 reference conc*ch4 n2o unit adj *(ch4 reference conc*n2o atm conc *ch4 n2o unit adj*ch4 n2o unit adj)^ch4 n20 inter exp 2)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ch4_n2o_interaction_coeffient() * np.log(
        1 + ch4_n2o_inter_coef_2() * (ch4_reference_conc() * n2o_atm_conc() * ch4_n2o_unit_adj() *
                                      ch4_n2o_unit_adj())**ch4_n20_inter_exp() +
        ch4_n2o_inter_coef_3() * ch4_reference_conc() * ch4_n2o_unit_adj() *
        (ch4_reference_conc() * n2o_atm_conc() * ch4_n2o_unit_adj() *
         ch4_n2o_unit_adj())**ch4_n20_inter_exp_2())


@cache('run')
def n2o_reference_conc():
    """
    Real Name: b'n2o reference conc'
    Original Eqn: b'270'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 270


@cache('step')
def delay_effective_radiative_forcing():
    """
    Real Name: b'delay effective radiative forcing'
    Original Eqn: b'delay fixed(total radiative forcing , time step, total radiative forcing )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_total_radiative_forcing_roundtime_step__time_step___time_step_total_radiative_forcing_time_step__time_step(
    )


@cache('step')
def effective_radiative_forcing():
    """
    Real Name: b'effective radiative forcing'
    Original Eqn: b'if then else( Time<=time to commit rf , total radiative forcing , delay effective radiative forcing)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() <= time_to_commit_rf(), total_radiative_forcing(),
                                  delay_effective_radiative_forcing())


@cache('run')
def co2_rad_force():
    """
    Real Name: b'co2 rad force'
    Original Eqn: b'5.35'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5.35


@cache('step')
def co2_radiative_forcing():
    """
    Real Name: b'co2 radiative forcing'
    Original Eqn: b'co2 rad force*ln(c in atmosphere/preindustrial c)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return co2_rad_force() * np.log(c_in_atmosphere() / preindustrial_c())


@cache('run')
def ch4_n2o_interaction_coeffient():
    """
    Real Name: b'ch4 n2o interaction coeffient'
    Original Eqn: b'0.47'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.47


@cache('run')
def n2o_radiative_efficiency_coefficient():
    """
    Real Name: b'n2o radiative efficiency coefficient'
    Original Eqn: b'0.12'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.12


@cache('run')
def ch4_n2o_inter_coef_3():
    """
    Real Name: b'ch4 n2o inter coef 3'
    Original Eqn: b'5.31e-15'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5.31e-15


@cache('step')
def n2o_radiative_forcing():
    """
    Real Name: b'n2o radiative forcing'
    Original Eqn: b'n2o radiative efficiency coefficient*(sqrt(n2o atm conc*ch4 n2o unit adj) -sqrt(n2o reference conc*ch4 n2o unit adj)) -(adjustment for ch4ref and n2o-adjustment for ch4ref and n2oref)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return n2o_radiative_efficiency_coefficient() * (
        np.sqrt(n2o_atm_conc() * ch4_n2o_unit_adj()) -
        np.sqrt(n2o_reference_conc() * ch4_n2o_unit_adj())) - (adjustment_for_ch4ref_and_n2o() -
                                                               adjustment_for_ch4ref_and_n2oref())


@cache('step')
def ch4_radiative_forcing():
    """
    Real Name: b'ch4 radiative forcing'
    Original Eqn: b'ch4 radiative efficiency coefficient*(sqrt(ch4 atm conc*ch4 n2o unit adj) -sqrt(ch4 reference conc*ch4 n2o unit adj)) -(adjustment for ch4 and n2oref-adjustment for ch4ref and n2oref)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ch4_radiative_efficiency_coefficient() * (
        np.sqrt(ch4_atm_conc() * ch4_n2o_unit_adj()) -
        np.sqrt(ch4_reference_conc() * ch4_n2o_unit_adj())) - (adjustment_for_ch4_and_n2oref() -
                                                               adjustment_for_ch4ref_and_n2oref())


@cache('step')
def other_ghg_rad_forcing_xnon_co2x():
    """
    Real Name: b'other ghg rad forcing xnon co2x'
    Original Eqn: b'total radiative forcing-co2 radiative forcing'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_radiative_forcing() - co2_radiative_forcing()


@cache('step')
def ch4_and_n2o_radiative_forcing():
    """
    Real Name: b'ch4 and n2o radiative forcing'
    Original Eqn: b'ch4 radiative forcing + n2o radiative forcing'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ch4_radiative_forcing() + n2o_radiative_forcing()


@cache('step')
def hfc_rf_total():
    """
    Real Name: b'hfc rf total'
    Original Eqn: b'sum(hfc rf)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(hfc_rf())


@cache('run')
def time_const_for_hfc():
    """
    Real Name: b'time const for hfc'
    Original Eqn: b'13.4'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[13.4,222.0,5.2,28.2,47.1,1.5,38.9,6.5,16.1],
        coords={'hfc type': ['hfc134a', 'hfc23', 'hfc32', 'hfc125', 'hfc143a', 'hfc152a', 'hfc227ea', 'hfc245ca', 'hfc4310mee']},
        dims=['hfc type'])


@cache('run')
def time_const_for_n2o():
    """
    Real Name: b'time const for n2o'
    Original Eqn: b'117'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 117


@cache('run')
def time_const_for_pfc():
    """
    Real Name: b'time const for pfc'
    Original Eqn: b'50000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 50000


@cache('run')
def sensitivity_of_methane_emissions_to_permafrost_and_clathrate():
    """
    Real Name: b'sensitivity of methane emissions to permafrost and clathrate'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def reference_ch4_time_constant():
    """
    Real Name: b'reference ch4 time constant'
    Original Eqn: b'8.5'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 8.5


@cache('run')
def stratospheric_ch4_path_share():
    """
    Real Name: b'stratospheric ch4 path share'
    Original Eqn: b'0.08'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.08


@cache('run')
def g_per_ton():
    """
    Real Name: b'g per ton'
    Original Eqn: b'1000000.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000000.0


@cache('run')
def init_pfc_in_atm_con():
    """
    Real Name: b'init pfc in atm con'
    Original Eqn: b'76'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 76


@cache('run')
def inital_hfc_con():
    """
    Real Name: b'inital hfc con'
    Original Eqn: b'1.67'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[1.67,11.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
        coords={'hfc type': ['hfc134a', 'hfc23', 'hfc32', 'hfc125', 'hfc143a', 'hfc152a', 'hfc227ea', 'hfc245ca', 'hfc4310mee']},
        dims=['hfc type'])


@cache('step')
def sf6():
    """
    Real Name: b'sf6'
    Original Eqn: b'integ ( global sf6 emissions-sf6 uptake, initial sf6)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_sf6()


@cache('step')
def sf6_atm_conc():
    """
    Real Name: b'sf6 atm conc'
    Original Eqn: b'sf6*ppt sf6 per tons sf6'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sf6() * ppt_sf6_per_tons_sf6()


@cache('run')
def sf6_molar_mass():
    """
    Real Name: b'sf6 molar mass'
    Original Eqn: b'146'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 146


@cache('run')
def sf6_radiative_efficiency():
    """
    Real Name: b'sf6 radiative efficiency'
    Original Eqn: b'0.57'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.57


@cache('step')
def sf6_rf():
    """
    Real Name: b'sf6 rf'
    Original Eqn: b'(sf6 atm conc-preindustrial sf6 conc)*sf6 radiative efficiency/ppt per ppb'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (sf6_atm_conc() - preindustrial_sf6_conc()) * sf6_radiative_efficiency() / ppt_per_ppb()


@cache('step')
def sf6_uptake():
    """
    Real Name: b'sf6 uptake'
    Original Eqn: b'sf6/time const for sf6'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sf6() / time_const_for_sf6()


@cache('step')
def initial_ch4():
    """
    Real Name: b'initial ch4'
    Original Eqn: b'initial( initial ch4 conc/ppb ch4 per mton ch4)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_initial_ch4_concppb_ch4_per_mton_ch4()


@cache('run')
def initial_ch4_conc():
    """
    Real Name: b'initial ch4 conc'
    Original Eqn: b'1726'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1726


@cache('run')
def pfc_radiative_efficiency():
    """
    Real Name: b'pfc radiative efficiency'
    Original Eqn: b'0.09'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.09


@cache('step')
def ch4_emissions_from_permafrost_and_clathrate():
    """
    Real Name: b'ch4 emissions from permafrost and clathrate'
    Original Eqn: b'sensitivity of methane emissions to permafrost and clathrate*reference sensitivity of ch4 from permafrost and clathrate to temperature *max(0,temperature change-temperature threshold for methane emissions from permafrost and clathrate )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sensitivity_of_methane_emissions_to_permafrost_and_clathrate(
    ) * reference_sensitivity_of_ch4_from_permafrost_and_clathrate_to_temperature() * np.maximum(
        0,
        temperature_change() -
        temperature_threshold_for_methane_emissions_from_permafrost_and_clathrate())


@cache('step')
def hfc_in_atm():
    """
    Real Name: b'hfc in atm'
    Original Eqn: b'integ ( global hfc emissions[hfc type]-hfc uptake[hfc type], initial hfc[hfc type])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_hfc_in_atm()


@cache('run')
def hfc_molar_mass():
    """
    Real Name: b'hfc molar mass'
    Original Eqn: b'102'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[102.0,70.0,52.0,120.0,84.0,66.0,170.0,134.0,252.0],
        coords={'hfc type': ['hfc134a', 'hfc23', 'hfc32', 'hfc125', 'hfc143a', 'hfc152a', 'hfc227ea', 'hfc245ca', 'hfc4310mee']},
        dims=['hfc type'])


@cache('run')
def hfc_radiative_efficiency():
    """
    Real Name: b'hfc radiative efficiency'
    Original Eqn: b'0.19'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.19,0.18,0.11,0.23,0.16,0.1,0.26,0.24,0.42],
        coords={'hfc type': ['hfc134a', 'hfc23', 'hfc32', 'hfc125', 'hfc143a', 'hfc152a', 'hfc227ea', 'hfc245ca', 'hfc4310mee']},
        dims=['hfc type'])


@cache('step')
def ch4_fractional_uptake():
    """
    Real Name: b'ch4 fractional uptake'
    Original Eqn: b'1/reference ch4 time constant*(tropospheric ch4 path share/(stratospheric ch4 path share *(ch4 in atm/preindustrial ch4 ) + 1-stratospheric ch4 path share) +(1-tropospheric ch4 path share) )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 / reference_ch4_time_constant() * (
        tropospheric_ch4_path_share() /
        (stratospheric_ch4_path_share() *
         (ch4_in_atm() / preindustrial_ch4()) + 1 - stratospheric_ch4_path_share()) +
        (1 - tropospheric_ch4_path_share()))


@cache('step')
def hfc_uptake():
    """
    Real Name: b'hfc uptake'
    Original Eqn: b'hfc in atm[hfc type]/time const for hfc[hfc type]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return hfc_in_atm() / time_const_for_hfc()


@cache('step')
def total_c_from_permafrost():
    """
    Real Name: b'total c from permafrost'
    Original Eqn: b'integ ( flux c from permafrost release+ch4 emissions from permafrost and clathrate/ch4 per c/mtons per gtons, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_total_c_from_permafrost()


@cache('run')
def ch4_molar_mass():
    """
    Real Name: b'ch4 molar mass'
    Original Eqn: b'16'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 16


@cache('run')
def n2o_n_molar_mass():
    """
    Real Name: b'n2o n molar mass'
    Original Eqn: b'28'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 28


@cache('step')
def ch4_uptake():
    """
    Real Name: b'ch4 uptake'
    Original Eqn: b'ch4 in atm*ch4 fractional uptake'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ch4_in_atm() * ch4_fractional_uptake()


@cache('step')
def total_ch4_released():
    """
    Real Name: b'total ch4 released'
    Original Eqn: b'integ ( ch4 emissions from permafrost and clathrate/ch4 per c/mtons per gtons, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_total_ch4_released()


@cache('step')
def natural_pfc_emissions():
    """
    Real Name: b'natural pfc emissions'
    Original Eqn: b'preindustrial pfc/time const for pfc'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return preindustrial_pfc() / time_const_for_pfc()


@cache('run')
def choose_rcp():
    """
    Real Name: b'choose rcp'
    Original Eqn: b'4'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 4


@cache('step')
def pfc_atm_conc():
    """
    Real Name: b'pfc atm conc'
    Original Eqn: b'pfc in atm*ppt pfc per tons pfc'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pfc_in_atm() * ppt_pfc_per_tons_pfc()


@cache('step')
def ppb_ch4_per_mton_ch4():
    """
    Real Name: b'ppb ch4 per mton ch4'
    Original Eqn: b'initial( ppt per mol/ch4 molar mass*g per ton*ton per mton/ppt per ppb)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_ppt_per_molch4_molar_massg_per_tonton_per_mtonppt_per_ppb()


@cache('step')
def ppb_n2o_per_mtonn():
    """
    Real Name: b'ppb n2o per mtonn'
    Original Eqn: b'initial( ppt per mol/n2o n molar mass*g per ton*ton per mton/ppt per ppb)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_ppt_per_moln2o_n_molar_massg_per_tonton_per_mtonppt_per_ppb()


@cache('step')
def ppt_hfc_per_tons_hfc():
    """
    Real Name: b'ppt hfc per tons hfc'
    Original Eqn: b'initial( ppt per mol/hfc molar mass[hfc type]*g per ton)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_ppt_per_molhfc_molar_massg_per_ton()


@cache('run')
def ppt_per_mol():
    """
    Real Name: b'ppt per mol'
    Original Eqn: b'5.68e-09'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5.68e-09


@cache('run')
def ppt_per_ppb():
    """
    Real Name: b'ppt per ppb'
    Original Eqn: b'1000.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000.0


@cache('step')
def ppt_pfc_per_tons_pfc():
    """
    Real Name: b'ppt pfc per tons pfc'
    Original Eqn: b'initial( ppt per mol/cf4 molar mass*g per ton)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_ppt_per_molcf4_molar_massg_per_ton()


@cache('step')
def c_from_ch4_oxidation():
    """
    Real Name: b'c from ch4 oxidation'
    Original Eqn: b'ch4 uptake/ch4 per c/mtons per gtons'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ch4_uptake() / ch4_per_c() / mtons_per_gtons()


@cache('run')
def reference_sensitivity_of_ch4_from_permafrost_and_clathrate_to_temperature():
    """
    Real Name: b'reference sensitivity of ch4 from permafrost and clathrate to temperature'
    Original Eqn: b'50'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 50


@cache('step')
def global_ch4_emissions():
    """
    Real Name: b'global ch4 emissions'
    Original Eqn: b'global ch4 anthro emissions+natural ch4 emissions'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return global_ch4_anthro_emissions() + natural_ch4_emissions()


@cache('run')
def preindustrial_ch4():
    """
    Real Name: b'preindustrial ch4'
    Original Eqn: b'2213'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2213


@cache('run')
def preindustrial_hfc_conc():
    """
    Real Name: b'preindustrial hfc conc'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('step')
def pfc_in_atm():
    """
    Real Name: b'pfc in atm'
    Original Eqn: b'integ ( global total pfc emissions-pfc uptake, init pfc in atm)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_pfc_in_atm()


@cache('run')
def initial_sf6_con():
    """
    Real Name: b'initial sf6 con'
    Original Eqn: b'3.47'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 3.47


@cache('step')
def pfc_rf():
    """
    Real Name: b'pfc rf'
    Original Eqn: b'(pfc atm conc-preindustrial pfc conc)*pfc radiative efficiency/ppt per ppb'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (pfc_atm_conc() - preindustrial_pfc_conc()) * pfc_radiative_efficiency() / ppt_per_ppb()


@cache('step')
def pfc_uptake():
    """
    Real Name: b'pfc uptake'
    Original Eqn: b'pfc in atm/time const for pfc'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pfc_in_atm() / time_const_for_pfc()


@cache('step')
def init_pfc_in_atm():
    """
    Real Name: b'init pfc in atm'
    Original Eqn: b'init pfc in atm con/ppt pfc per tons pfc'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return init_pfc_in_atm_con() / ppt_pfc_per_tons_pfc()


@cache('step')
def n2o_atm_conc():
    """
    Real Name: b'n2o atm conc'
    Original Eqn: b'n2o in atm*ppb n2o per mtonn'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return n2o_in_atm() * ppb_n2o_per_mtonn()


@cache('step')
def n2o_in_atm():
    """
    Real Name: b'n2o in atm'
    Original Eqn: b'integ ( global n2o emissions-n2o uptake, initial n2o)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_n2o_in_atm()


@cache('step')
def n2o_uptake():
    """
    Real Name: b'n2o uptake'
    Original Eqn: b'n2o in atm/time const for n2o'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return n2o_in_atm() / time_const_for_n2o()


@cache('step')
def hfc_atm_conc():
    """
    Real Name: b'hfc atm conc'
    Original Eqn: b'hfc in atm[hfc type]*ppt hfc per tons hfc[hfc type]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return hfc_in_atm() * ppt_hfc_per_tons_hfc()


@cache('run')
def ton_per_mton():
    """
    Real Name: b'ton per mton'
    Original Eqn: b'1000000.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000000.0


@cache('run')
def natural_n2o_emissions():
    """
    Real Name: b'natural n2o emissions'
    Original Eqn: b'11'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 11


@cache('run')
def cf4_molar_mass():
    """
    Real Name: b'cf4 molar mass'
    Original Eqn: b'88'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 88


@cache('step')
def ch4_atm_conc():
    """
    Real Name: b'ch4 atm conc'
    Original Eqn: b'ch4 in atm*ppb ch4 per mton ch4'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ch4_in_atm() * ppb_ch4_per_mton_ch4()


@cache('run')
def preindustrial_sf6_conc():
    """
    Real Name: b'preindustrial sf6 conc'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('step')
def time_const_for_ch4():
    """
    Real Name: b'time const for ch4'
    Original Eqn: b'1/ch4 fractional uptake'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 / ch4_fractional_uptake()


@cache('step')
def initial_hfc():
    """
    Real Name: b'initial hfc'
    Original Eqn: b'initial( inital hfc con[hfc type]/ppt hfc per tons hfc[hfc type])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_inital_hfc_conppt_hfc_per_tons_hfc()


@cache('step')
def flux_c_from_permafrost_release():
    """
    Real Name: b'flux c from permafrost release'
    Original Eqn: b'sensitivity of methane emissions to permafrost and clathrate*reference sensitivity of c from permafrost and clathrate to temperature *max(0,temperature change-temperature threshold for methane emissions from permafrost and clathrate )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sensitivity_of_methane_emissions_to_permafrost_and_clathrate(
    ) * reference_sensitivity_of_c_from_permafrost_and_clathrate_to_temperature() * np.maximum(
        0,
        temperature_change() -
        temperature_threshold_for_methane_emissions_from_permafrost_and_clathrate())


@cache('step')
def global_n2o_emissions():
    """
    Real Name: b'global n2o emissions'
    Original Eqn: b'global n2o anthro emissions+natural n2o emissions'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return global_n2o_anthro_emissions() + natural_n2o_emissions()


@cache('run')
def tropospheric_ch4_path_share():
    """
    Real Name: b'tropospheric ch4 path share'
    Original Eqn: b'0.88'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.88


@cache('step')
def preindustrial_pfc():
    """
    Real Name: b'preindustrial pfc'
    Original Eqn: b'initial( preindustrial pfc conc/ppt pfc per tons pfc)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_preindustrial_pfc_concppt_pfc_per_tons_pfc()


@cache('step')
def ppt_sf6_per_tons_sf6():
    """
    Real Name: b'ppt sf6 per tons sf6'
    Original Eqn: b'initial( ppt per mol/sf6 molar mass*g per ton)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_ppt_per_molsf6_molar_massg_per_ton()


@cache('step')
def hfc_rf():
    """
    Real Name: b'hfc rf'
    Original Eqn: b'(hfc atm conc[hfc type]-preindustrial hfc conc)*hfc radiative efficiency[hfc type]/ppt per ppb'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (hfc_atm_conc() - preindustrial_hfc_conc()) * hfc_radiative_efficiency() / ppt_per_ppb()


@cache('step')
def initial_n2o():
    """
    Real Name: b'initial n2o'
    Original Eqn: b'initial( initial n2o conc/ppb n2o per mtonn)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_initial_n2o_concppb_n2o_per_mtonn()


@cache('run')
def initial_n2o_conc():
    """
    Real Name: b'initial n2o conc'
    Original Eqn: b'312.3'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 312.3


@cache('run')
def temperature_threshold_for_methane_emissions_from_permafrost_and_clathrate():
    """
    Real Name: b'temperature threshold for methane emissions from permafrost and clathrate'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def time_const_for_sf6():
    """
    Real Name: b'time const for sf6'
    Original Eqn: b'3200'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 3200


@cache('run')
def preindustrial_pfc_conc():
    """
    Real Name: b'preindustrial pfc conc'
    Original Eqn: b'40'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 40


@cache('step')
def initial_sf6():
    """
    Real Name: b'initial sf6'
    Original Eqn: b'initial sf6 con/ppt sf6 per tons sf6'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return initial_sf6_con() / ppt_sf6_per_tons_sf6()


@cache('run')
def reference_sensitivity_of_c_from_permafrost_and_clathrate_to_temperature():
    """
    Real Name: b'reference sensitivity of c from permafrost and clathrate to temperature'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def global_total_pfc_emissions():
    """
    Real Name: b'global total pfc emissions'
    Original Eqn: b'global pfc emissions+natural pfc emissions'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return global_pfc_emissions() + natural_pfc_emissions()


@cache('step')
def ch4_in_atm():
    """
    Real Name: b'ch4 in atm'
    Original Eqn: b'integ ( ch4 emissions from permafrost and clathrate+global anthropogenic ch4 emissions+natural ch4 emissions-ch4 uptake, initial ch4)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_ch4_in_atm()


@cache('step')
def global_anthropogenic_ch4_emissions():
    """
    Real Name: b'global anthropogenic ch4 emissions'
    Original Eqn: b'global ch4 anthro emissions'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return global_ch4_anthro_emissions()


@cache('step')
def sensitivity_of_pco2_dic_to_temperature():
    """
    Real Name: b'sensitivity of pco2 dic to temperature'
    Original Eqn: b'initial( sensitivity of c uptake to temperature*sensitivity of pco2 dic to temperature mean)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_sensitivity_of_c_uptake_to_temperaturesensitivity_of_pco2_dic_to_temperature_mean(
    )


@cache('run')
def sensitivity_of_pco2_dic_to_temperature_mean():
    """
    Real Name: b'sensitivity of pco2 dic to temperature mean'
    Original Eqn: b'0.003'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.003


@cache('step')
def mean_depth_of_adjacent_layers():
    """
    Real Name: b'mean depth of adjacent layers'
    Original Eqn: b'initial( (mixed depth+layer depth[layer1])/2)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        _initial_mixed_depthlayer_depth2(),
        (layer_depth().loc['layer1'].values + layer_depth().loc['layer2'].values) / 2,
        (layer_depth().loc['layer2'].values + layer_depth().loc['layer3'].values) / 2,
        (layer_depth().loc['layer3'].values + layer_depth().loc['layer4'].values) / 2],
        coords={'layers': ['layer1', 'layer2', 'layer3', 'layer4']},
        dims=['layers'])


@cache('step')
def diffusion_flux():
    """
    Real Name: b'diffusion flux'
    Original Eqn: b'(c in mixed layer per meter-c in deep ocean per meter[layer1])* eddy diff coeff/mean depth of adjacent layers[layer1]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        (c_in_mixed_layer_per_meter() - c_in_deep_ocean_per_meter().loc['layer1'].values) * eddy_diff_coeff() /
        mean_depth_of_adjacent_layers().loc['layer1'].values,
        (c_in_deep_ocean_per_meter().loc['layer1'].values - c_in_deep_ocean_per_meter().loc['layer2'].values) * eddy_diff_coeff() /
        mean_depth_of_adjacent_layers().loc['layer2'].values,
        (c_in_deep_ocean_per_meter().loc['layer2'].values - c_in_deep_ocean_per_meter().loc['layer3'].values) * eddy_diff_coeff() /
        mean_depth_of_adjacent_layers().loc['layer3'].values,
        (c_in_deep_ocean_per_meter().loc['layer3'].values - c_in_deep_ocean_per_meter().loc['layer4'].values) * eddy_diff_coeff() /
        mean_depth_of_adjacent_layers().loc['layer4'].values],
        coords={'layers': ['layer1', 'layer2', 'layer3', 'layer4']},
        dims=['layers'])


@cache('run')
def init_c_in_biomass():
    """
    Real Name: b'init c in biomass'
    Original Eqn: b'988.158'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 988.158


@cache('run')
def init_c_in_deep_ocean_per_meter():
    """
    Real Name: b'init c in deep ocean per meter'
    Original Eqn: b'10.4027'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[10.4027,10.345,10.2768,10.265],
        coords={'layers': ['layer1', 'layer2', 'layer3', 'layer4']},
        dims=['layers'])


@cache('run')
def init_c_in_humus():
    """
    Real Name: b'init c in humus'
    Original Eqn: b'1076.17'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1076.17


@cache('step')
def flux_atm_to_biomass():
    """
    Real Name: b'flux atm to biomass'
    Original Eqn: b'init npp* (1+ biostim coeff* ln(c in atmosphere/preindustrial c))*effect of warming on c flux to biomass'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return init_npp() * (1 + biostim_coeff() * np.log(c_in_atmosphere() / preindustrial_c())
                         ) * effect_of_warming_on_c_flux_to_biomass()


@cache('step')
def flux_atm_to_ocean():
    """
    Real Name: b'flux atm to ocean'
    Original Eqn: b'((equil c in mixed layer-c in mixed layer)/mixing time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ((equil_c_in_mixed_layer() - c_in_mixed_layer()) / mixing_time())


@cache('step')
def flux_biomass_to_atmosphere():
    """
    Real Name: b'flux biomass to atmosphere'
    Original Eqn: b'c in biomass/biomass res time*(1-humification fraction)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return c_in_biomass() / biomass_res_time() * (1 - humification_fraction())


@cache('step')
def flux_biomass_to_ch4():
    """
    Real Name: b'flux biomass to ch4'
    Original Eqn: b'c in biomass*ch4 generation rate from biomass*effect of warming on ch4 release from biological activity'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return c_in_biomass() * ch4_generation_rate_from_biomass(
    ) * effect_of_warming_on_ch4_release_from_biological_activity()


@cache('step')
def flux_biomass_to_humus():
    """
    Real Name: b'flux biomass to humus'
    Original Eqn: b'c in biomass/biomass res time*humification fraction'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return c_in_biomass() / biomass_res_time() * humification_fraction()


@cache('step')
def flux_biosphere_to_ch4():
    """
    Real Name: b'flux biosphere to ch4'
    Original Eqn: b'flux biomass to ch4+flux humus to ch4'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return flux_biomass_to_ch4() + flux_humus_to_ch4()


@cache('step')
def flux_humus_to_atmosphere():
    """
    Real Name: b'flux humus to atmosphere'
    Original Eqn: b'c in humus/humus res time'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return c_in_humus() / humus_res_time()


@cache('step')
def co2_ppm_concentrations():
    """
    Real Name: b'co2 ppm concentrations'
    Original Eqn: b'c in atmosphere / 2.13'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return c_in_atmosphere() / 2.13


@cache('step')
def total_c_anthro_emissions():
    """
    Real Name: b'total c anthro emissions'
    Original Eqn: b'total co2 emissions gtco2*c per co2'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_co2_emissions_gtco2() * c_per_co2()


@cache('step')
def effect_of_temp_on_dic_pco2():
    """
    Real Name: b'effect of temp on dic pco2'
    Original Eqn: b'1-sensitivity of pco2 dic to temperature*temperature change'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 - sensitivity_of_pco2_dic_to_temperature() * temperature_change()


@cache('step')
def effect_of_warming_on_c_flux_to_biomass():
    """
    Real Name: b'effect of warming on c flux to biomass'
    Original Eqn: b'1+strength of temp effect on c flux to land*temperature change'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 + strength_of_temp_effect_on_c_flux_to_land() * temperature_change()


@cache('step')
def effect_of_warming_on_ch4_release_from_biological_activity():
    """
    Real Name: b'effect of warming on ch4 release from biological activity'
    Original Eqn: b'1+sensitivity of methane emissions to temperature*(temperature change)/(reference temperature change for effect of warming on ch4 from respiration )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 + sensitivity_of_methane_emissions_to_temperature() * (temperature_change()) / (
        reference_temperature_change_for_effect_of_warming_on_ch4_from_respiration())


@cache('step')
def c_in_mixed_layer_per_meter():
    """
    Real Name: b'c in mixed layer per meter'
    Original Eqn: b'c in mixed layer/mixed depth'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return c_in_mixed_layer() / mixed_depth()


@cache('run')
def biomass_res_time():
    """
    Real Name: b'biomass res time'
    Original Eqn: b'10.6'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 10.6


@cache('step')
def biostim_coeff():
    """
    Real Name: b'biostim coeff'
    Original Eqn: b'initial( biostim coeff index*biostim coeff mean)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_biostim_coeff_indexbiostim_coeff_mean()


@cache('run')
def mtons_per_gtons():
    """
    Real Name: b'mtons per gtons'
    Original Eqn: b'1000.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000.0


@cache('run')
def biostim_coeff_mean():
    """
    Real Name: b'biostim coeff mean'
    Original Eqn: b'0.42'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.42


@cache('run')
def buff_c_coeff():
    """
    Real Name: b'buff c coeff'
    Original Eqn: b'3.92'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 3.92


@cache('step')
def natural_ch4_emissions():
    """
    Real Name: b'natural ch4 emissions'
    Original Eqn: b'flux biosphere to ch4*ch4 per c*mtons per gtons'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return flux_biosphere_to_ch4() * ch4_per_c() * mtons_per_gtons()


@cache('run')
def humification_fraction():
    """
    Real Name: b'humification fraction'
    Original Eqn: b'0.428'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.428


@cache('run')
def humus_res_time():
    """
    Real Name: b'humus res time'
    Original Eqn: b'27.8'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 27.8


@cache('run')
def layer_depth():
    """
    Real Name: b'layer depth'
    Original Eqn: b'300'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[300.0,300.0,1300.0,1800.0],
        coords={'layers': ['layer1', 'layer2', 'layer3', 'layer4']},
        dims=['layers'])


@cache('run')
def ref_buffer_factor():
    """
    Real Name: b'ref buffer factor'
    Original Eqn: b'9.7'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 9.7


@cache('run')
def reference_temperature_change_for_effect_of_warming_on_ch4_from_respiration():
    """
    Real Name: b'reference temperature change for effect of warming on ch4 from respiration'
    Original Eqn: b'5'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5


@cache('step')
def c_in_humus():
    """
    Real Name: b'c in humus'
    Original Eqn: b'integ (flux biomass to humus-flux humus to atmosphere-flux humus to ch4, init c in humus)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_c_in_humus()


@cache('step')
def c_in_mixed_layer():
    """
    Real Name: b'c in mixed layer'
    Original Eqn: b'integ ( flux atm to ocean-diffusion flux[layer1], init c in mixed ocean per meter*mixed depth)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_c_in_mixed_layer()


@cache('run')
def init_c_in_atmos():
    """
    Real Name: b'init c in atmos'
    Original Eqn: b'init co2 in atmos ppm*gtc per ppm'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return init_co2_in_atmos_ppm() * gtc_per_ppm()


@cache('run')
def strength_of_temp_effect_on_land_c_flux_mean():
    """
    Real Name: b'strength of temp effect on land c flux mean'
    Original Eqn: b'-0.01'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return -0.01


@cache('run')
def pre_industrial_value_ppm():
    """
    Real Name: b'pre industrial value ppm'
    Original Eqn: b'275'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 275


@cache('run')
def biostim_coeff_index():
    """
    Real Name: b'biostim coeff index'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def init_c_in_mixed_ocean_per_meter():
    """
    Real Name: b'init c in mixed ocean per meter'
    Original Eqn: b'10.4652'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 10.4652


@cache('run')
def init_co2_in_atmos_ppm():
    """
    Real Name: b'init co2 in atmos ppm'
    Original Eqn: b'360.3'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 360.3


@cache('run')
def init_npp():
    """
    Real Name: b'init npp'
    Original Eqn: b'85.1771'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 85.1771


@cache('step')
def buffer_factor():
    """
    Real Name: b'buffer factor'
    Original Eqn: b'active initial ( ref buffer factor*(c in mixed layer/preind c in mixed layer)^buff c coeff , ref buffer factor)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return active_initial(
        __data['time'], lambda: (ref_buffer_factor() *
                                 (c_in_mixed_layer() / preind_c_in_mixed_layer())**buff_c_coeff()),
        ref_buffer_factor())


@cache('step')
def c_in_atmosphere():
    """
    Real Name: b'c in atmosphere'
    Original Eqn: b'integ ( c from ch4 oxidation+flux biomass to atmosphere+flux humus to atmosphere+total c anthro emissions-flux atm to biomass-flux atm to ocean+flux c from permafrost release, init c in atmos)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_c_in_atmosphere()


@cache('run')
def mixed_depth():
    """
    Real Name: b'mixed depth'
    Original Eqn: b'100'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 100


@cache('run')
def mixing_time():
    """
    Real Name: b'mixing time'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def c_in_deep_ocean_per_meter():
    """
    Real Name: b'c in deep ocean per meter'
    Original Eqn: b'c in deep ocean[layers]/layer depth[layers]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return c_in_deep_ocean() / layer_depth()


@cache('step')
def elf_concentrations_logistic():
    """
    Real Name: b'elf concentrations logistic'
    Original Eqn: b'1-1/(1+exp((co2 ppm concentrations-a logistic)/b logistic))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 - 1 / (1 + np.exp((co2_ppm_concentrations() - a_logistic()) / b_logistic()))


@cache('step')
def strength_of_temp_effect_on_c_flux_to_land():
    """
    Real Name: b'strength of temp effect on c flux to land'
    Original Eqn: b'initial( sensitivity of c uptake to temperature*strength of temp effect on land c flux mean)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_sensitivity_of_c_uptake_to_temperaturestrength_of_temp_effect_on_land_c_flux_mean(
    )


@cache('run')
def ch4_generation_rate_from_humus():
    """
    Real Name: b'ch4 generation rate from humus'
    Original Eqn: b'8e-05'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 8e-05


@cache('step')
def preind_c_in_mixed_layer():
    """
    Real Name: b'preind c in mixed layer'
    Original Eqn: b'initial( preind ocean c per meter*mixed depth)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _initial_preind_ocean_c_per_metermixed_depth()


@cache('run')
def preind_ocean_c_per_meter():
    """
    Real Name: b'preind ocean c per meter'
    Original Eqn: b'10.2373'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 10.2373


@cache('run')
def preindustrial_c():
    """
    Real Name: b'preindustrial c'
    Original Eqn: b'590'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 590


@cache('step')
def equilibrium_c_per_meter_in_mixed_layer():
    """
    Real Name: b'equilibrium c per meter in mixed layer'
    Original Eqn: b'equil c in mixed layer/mixed depth'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return equil_c_in_mixed_layer() / mixed_depth()


@cache('run')
def sensitivity_of_c_uptake_to_temperature():
    """
    Real Name: b'sensitivity of c uptake to temperature'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def ch4_generation_rate_from_biomass():
    """
    Real Name: b'ch4 generation rate from biomass'
    Original Eqn: b'8e-05'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 8e-05


@cache('run')
def ch4_per_c():
    """
    Real Name: b'ch4 per c'
    Original Eqn: b'1.33'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1.33


@cache('step')
def flux_humus_to_ch4():
    """
    Real Name: b'flux humus to ch4'
    Original Eqn: b'c in humus*ch4 generation rate from humus*effect of warming on ch4 release from biological activity'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return c_in_humus() * ch4_generation_rate_from_humus(
    ) * effect_of_warming_on_ch4_release_from_biological_activity()


@cache('run')
def sensitivity_of_methane_emissions_to_temperature():
    """
    Real Name: b'sensitivity of methane emissions to temperature'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def eddy_diff_coeff_index():
    """
    Real Name: b'eddy diff coeff index'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def c_in_biomass():
    """
    Real Name: b'c in biomass'
    Original Eqn: b'integ ( flux atm to biomass-flux biomass to atmosphere-flux biomass to ch4-flux biomass to humus, init c in biomass)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_c_in_biomass()


@cache('run')
def gtc_per_ppm():
    """
    Real Name: b'gtc per ppm'
    Original Eqn: b'2.13'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2.13


@cache('step')
def c_in_deep_ocean():
    """
    Real Name: b'c in deep ocean'
    Original Eqn: b'integ ( diffusion flux[upper]-diffusion flux[lower], init c in deep ocean per meter[upper]*layer depth[upper])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_c_in_deep_ocean()


@cache('step')
def equil_c_in_mixed_layer():
    """
    Real Name: b'equil c in mixed layer'
    Original Eqn: b'preind c in mixed layer*effect of temp on dic pco2*(c in atmosphere/preindustrial c)^(1/buffer factor)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return preind_c_in_mixed_layer() * effect_of_temp_on_dic_pco2() * (
        c_in_atmosphere() / preindustrial_c())**(1 / buffer_factor())


@cache('step')
def layer_time_constant():
    """
    Real Name: b'layer time constant'
    Original Eqn: b'initial( layer depth[layer1]/(eddy diff coeff/mean depth of adjacent layers[layer1]))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    x = [x() for x in _initial_layer_deptheddy_diff_coeffmean_depth_of_adjacent_layers]
    return xr.DataArray(data=x,
                        dims=['layers'],
                        coords={'layers': _subscript_dict.get('layers')})


@cache('run')
def eddy_diff_mean():
    """
    Real Name: b'eddy diff mean'
    Original Eqn: b'4400'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 4400


@cache('step')
def common_rr_minerals_variation_alt_techn():
    """
    Real Name: b'common rr minerals variation alt techn'
    Original Eqn: b'if then else(Time<start year p common rr minerals alt techn, historic improvement recycling rates minerals[materials], p common rr minerals variation alt techn)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < start_year_p_common_rr_minerals_alt_techn(),
                                  historic_improvement_recycling_rates_minerals(),
                                  p_common_rr_minerals_variation_alt_techn())


@cache('run')
def choose_targets_mineral_recycling_rates():
    """
    Real Name: b'choose targets mineral recycling rates'
    Original Eqn: b'2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2


@cache('step')
def total_water_use_per_capita():
    """
    Real Name: b'total water use per capita'
    Original Eqn: b'total water use/population'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_water_use() / population()


@cache('step')
def total_water_use():
    """
    Real Name: b'total water use'
    Original Eqn: b'sum(total water use by type)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(total_water_use_by_type())


@cache('step')
def water_use_per_type_per_capita():
    """
    Real Name: b'water use per type per capita'
    Original Eqn: b'total water use by type[water color]/population'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_water_use_by_type() / population()


@cache('step')
def variation_water_intensity_by_sector():
    """
    Real Name: b'variation water intensity by sector'
    Original Eqn: b'if then else(Time<2008, historic water by type intensities by sector[sectors,water color]-historic water intensities by sector delayed 1yr[sectors,water color], 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    ret = if_then_else(
        time() < 2008,
        historic_water_by_type_intensities_by_sector() -
        historic_water_intensities_by_sector_delayed_1yr(), 0)

    return align_by_dims(ret, ('sectors', 'water color'))



@cache('step')
def historic_water_intensities_by_sector_delayed_1yr():
    """
    Real Name: b'historic water intensities by sector delayed 1yr'
    Original Eqn: b'delay fixed ( historic water by type intensities by sector[sectors,water color], 1, initial water intensity by sector[sectors,water color])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    x = np.reshape([x() for x in _delay_historic_water_by_type_intensities_by_sector_round1__time_step___time_step_initial_water_intensity_by_sector_1__time_step], (len(_subscript_dict.get('sectors')), len(_subscript_dict.get('water color'))))

    return xr.DataArray(data=x,
                        dims=['sectors', 'water color'],
                        coords={'sectors': _subscript_dict.get('sectors'), 'water color': _subscript_dict.get('water color')})



@cache('step')
def historic_water_intensities_for_households_delayed_1yr():
    """
    Real Name: b'historic water intensities for households delayed 1yr'
    Original Eqn: b'delay fixed ( historic water by type intensities for households[water color], 1, initial water intensity for households[water color])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    x = [x() for x in _delay_historic_water_by_type_intensities_for_households_round1__time_step___time_step_initial_water_intensity_for_households_1__time_step]

    return xr.DataArray(data=x,
                        dims=['water color'],
                        coords={'water color': _subscript_dict.get('water color')})

@cache('step')
def variation_water_intensity_households():
    """
    Real Name: b'variation water intensity households'
    Original Eqn: b'if then else(Time<2008, historic water by type intensities for households[water color]-historic water intensities for households delayed 1yr [water color], 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2008,
        historic_water_by_type_intensities_for_households() -
        historic_water_intensities_for_households_delayed_1yr(), 0)


@cache('step')
def water_intensity_for_households():
    """
    Real Name: b'water intensity for households'
    Original Eqn: b'integ ( variation water intensity households[water color], initial water intensity for households[water color])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_water_intensity_for_households()


@cache('step')
def total_water_use_by_type():
    """
    Real Name: b'total water use by type'
    Original Eqn: b'sum1(water use by sector)+water use by households[water color]+total water for o and m required by res elec dam3[water color]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """

    return sum(dim='sectors', data=water_use_by_sector()) + water_use_by_households(
    ) + total_water_for_o_and_m_required_by_res_elec_dam3()



@cache('step')
def total_water_for_o_and_m_required_by_res_elec_dam3():
    """
    Real Name: b'total water for o and m required by res elec dam3'
    Original Eqn: b'total water for o and m required by res elec[water color]*mt to dam3'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_water_for_o_and_m_required_by_res_elec() * mt_to_dam3()


@cache('step')
def initial_water_intensity_for_households():
    """
    Real Name: b'initial water intensity for households'
    Original Eqn: b'if then else(Time<1996, initial water use by households[water color]/household demand total, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 1996,
                                  initial_water_use_by_households() / household_demand_total(), 0)


@cache('step')
def water_intensity_by_sector():
    """
    Real Name: b'water intensity by sector'
    Original Eqn: b'integ ( variation water intensity by sector[sectors,water color], initial water intensity by sector[sectors,water color])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    ret =_integ_water_intensity_by_sector()

    return align_by_dims(ret, ('sectors', 'water color'))


@cache('step')
def water_use_by_sector():
    """
    Real Name: b'water use by sector'
    Original Eqn: b'water intensity by sector[sectors,water color]*real total output by sector[sectors]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return water_intensity_by_sector() * real_total_output_by_sector()


@cache('step')
def water_use_by_households():
    """
    Real Name: b'water use by households'
    Original Eqn: b'water intensity for households[water color]*household demand total'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return water_intensity_for_households() * household_demand_total()


@cache('step')
def tfec_res_ej():
    """
    Real Name: b'tfec res ej'
    Original Eqn: b'fe tot generation all res elec ej+fes res for heat ej+pe traditional biomass consum ej +fes total biofuels+fes total biogas'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fe_tot_generation_all_res_elec_ej() + fes_res_for_heat_ej(
    ) + pe_traditional_biomass_consum_ej() + fes_total_biofuels() + fes_total_biogas()


@cache('step')
def pe_traditional_biomass_ej_delayed_1yr():
    """
    Real Name: b'pe traditional biomass ej delayed 1yr'
    Original Eqn: b'delay fixed ( pe traditional biomass consum ej, 1, 30)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_pe_traditional_biomass_consum_ej_round1__time_step___time_step_30_1__time_step()


@cache('step')
def population_dependent_on_trad_biomass():
    """
    Real Name: b'population dependent on trad biomass'
    Original Eqn: b'pe traditional biomass consum ej/pepc consumption people depending on trad biomass'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_traditional_biomass_consum_ej() / pepc_consumption_people_depending_on_trad_biomass()


@cache('run')
def mt_to_dam3():
    """
    Real Name: b'mt to dam3'
    Original Eqn: b'1000.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000.0


@cache('step')
def total_water_for_o_and_m_required_by_res_elec():
    """
    Real Name: b'total water for o and m required by res elec'
    Original Eqn: b'sum(total water for o and m required by res elec per techn)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        sum(total_water_for_o_and_m_required_by_res_elec_per_techn()),0.0,0.0],
        coords={'water color': ['blue water', 'green water', 'gray water']},
        dims=['water color'])


@cache('step')
def initial_water_intensity_by_sector():
    """
    Real Name: b'initial water intensity by sector'
    Original Eqn: b'if then else(Time<1996, initial water use by sector[sectors,water color]/real total output by sector[sectors] , 0 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 1996,
                                  initial_water_use_by_sector() / real_total_output_by_sector(), 0)


@cache('run')
def initial_water_use_by_households():
    """
    Real Name: b'initial water use by households'
    Original Eqn: b'39538356.485179946'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[39538356.48517995,0.0,264130630.0],
        coords={'water color': ['blue water', 'green water', 'gray water']},
        dims=['water color'])


@cache('run')
def initial_water_use_by_sector():
    """
    Real Name: b'initial water use by sector'
    Original Eqn: b'875813247.2645526'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[875813247.0,5977864530.0,651138685.0],[0.0,0.0,0.0],[6043346.01034091,0.0,51655857.26464701],[2856810.35086267,0.0,25563592.7501675],[0.0,0.0,0.0],[0.0,0.0,0.0],[5511624.24222653,0.0,48897115.23912518],[0.0,0.0,0.0],[7734732.5382935,0.0,71068432.36246447],[0.0,0.0,0.0],[1654566.63492239,0.0,17130547.55065427],[7855774.10285661,0.0,78961833.92970943],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[607162225.0,0.0,710.30657137],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[76.61435359,0.0,496.96858614],[76.30793914,0.0,498.00510337],[0.0,0.0,0.0],[0.0,0.0,0.0]],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons'], 'water color': ['blue water', 'green water', 'gray water']},
        dims=['sectors', 'water color'])


@cache('run')
def max_potential_npp_bioe_conventional_for_heat_plus_elec():
    """
    Real Name: b'max potential npp bioe conventional for heat plus elec'
    Original Eqn: b'30'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 30


@cache('step')
def diff_demand():
    """
    Real Name: b'diff demand'
    Original Eqn: b'if then else(Time<2009, 1, (gdp delayed 1yr*(1+desired annual gdp growth rate ))/total demand)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2009, 1,
                                  (gdp_delayed_1yr() *
                                   (1 + desired_annual_gdp_growth_rate())) / total_demand())


@cache('step')
def variation_lc():
    """
    Real Name: b'variation lc'
    Original Eqn: b'real demand*labour share*(desired annual gdp growth rate+growth labour share+desired annual gdp growth rate*growth labour share)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_demand() * labour_share() * (
        desired_annual_gdp_growth_rate() + growth_labour_share() +
        desired_annual_gdp_growth_rate() * growth_labour_share())


@cache('step')
def variation_cc():
    """
    Real Name: b'variation cc'
    Original Eqn: b'capital share*(desired annual gdp growth rate+growth capital share+desired annual gdp growth rate*growth capital share)*real demand'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return capital_share() * (
        desired_annual_gdp_growth_rate() + growth_capital_share() +
        desired_annual_gdp_growth_rate() * growth_capital_share()) * real_demand()


@cache('step')
def demand_by_sector_fd_adjusted():
    """
    Real Name: b'demand by sector fd adjusted'
    Original Eqn: b'demand by sector fd[sectors]*diff demand'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return demand_by_sector_fd() * diff_demand()


@cache('step')
def total_demand_adjusted():
    """
    Real Name: b'total demand adjusted'
    Original Eqn: b'sum(demand by sector fd adjusted)/1e+006'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(demand_by_sector_fd_adjusted()) / 1e+006


@cache('step')
def desired_gdp():
    """
    Real Name: b'desired gdp'
    Original Eqn: b'if then else(Time<2009, total demand,desired gdppc*population/dollars to tdollars-0.56)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2009, total_demand(),
                                  desired_gdppc() * population() / dollars_to_tdollars() - 0.56)


@cache('step')
def demand_by_sector():
    """
    Real Name: b'demand by sector'
    Original Eqn: b'demand by sector fd adjusted[sectors]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return demand_by_sector_fd_adjusted()


@cache('step')
def aux4():
    """
    Real Name: b'aux4'
    Original Eqn: b'delay fixed ( eroist system until 2015, time step , 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_eroist_system_until_2015_roundtime_step__time_step___time_step_0_time_step__time_step()


@cache('run')
def one_year():
    """
    Real Name: b'1 year'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def eptb_dynamic():
    """
    Real Name: b'eptb dynamic'
    Original Eqn: b'zidz(lifetime res elec[res elec] , xdynamicx eroi res elec var[res elec] )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(lifetime_res_elec(), xdynamicx_eroi_res_elec_var())


@cache('step')
def eroist_system_delayed():
    """
    Real Name: b'eroist system delayed'
    Original Eqn: b'delay fixed ( eroist system, time step, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_eroist_system_roundtime_step__time_step___time_step_0_time_step__time_step()


@cache('step')
def eroist_system_delayed_1yr():
    """
    Real Name: b'eroist system delayed 1yr'
    Original Eqn: b'delay fixed ( eroist system, 1, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_eroist_system_round1__time_step___time_step_0_1__time_step()


@cache('run')
def pipeline_transport_constant_26x_ej_in_x2014():
    """
    Real Name: b'pipeline transport constant 26x ej in x2014'
    Original Eqn: b'2.6'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2.6


@cache('step')
def total_distribution_losses():
    """
    Real Name: b'total distribution losses'
    Original Eqn: b'electrical distribution losses ej+heat com distribution losses+heat nc distribution losses+pipeline transport constant 26x ej in x2014+sum(energy distr losses ff ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return electrical_distribution_losses_ej() + heat_com_distribution_losses(
    ) + heat_nc_distribution_losses() + pipeline_transport_constant_26x_ej_in_x2014(
    ) + sum(energy_distr_losses_ff_ej())


@cache('run')
def ia_matrix_2002():
    """
    Real Name: b'ia matrix 2002'
    Original Eqn: b'0.868684171,-0.000933669,-0.25764361,-0.039438198,-0.036633454,-0.129627905,-0.012123226,-0.001562256,-0.004955206,-0.0140601,-0.000623449,-0.000271843,-0.000276016,-0.000188636,-0.000149733,-0.009527471,-0.000510374,-0.010256609,-0.000455947,-0.003133054,-0.002645024,-0.038678427,-0.001338086,-0.001279996,-0.000307578,-0.003939451,-0.000252928,-0.000141304,-0.000371861,-0.000627869,-0.001906118,-0.00201888,-0.002151984,-0.002334622,-0.015372458;-0.00352914,0.926812613,-0.002615202,-0.00201922,-0.000851768,-0.003653669,-0.004388637,-0.442566481,-0.03182023,-0.002937557,-0.064238016,-0.043989098,-0.00294532,-0.001278056,-0.001237646,-0.006005501,-0.106270138,-0.017527625,-0.000449917,-0.000674029,-0.00107797,-0.001571003,-0.003845481,-0.002403354,-0.002420279,-0.001567511,-0.000495052,-0.000269923,-0.001652317,-0.000823667,-0.002749329,-0.002997115,-0.000869258,-0.002451498,-0.061735655;-0.054180465,-0.000643059,0.852960376,-0.002677164,-0.082385461,-0.001299553,-0.00274504,-0.000747645,-0.009352539,-0.00254585,-0.001451857,-0.00091834,-0.001064716,-0.000907012,-0.000808241,-0.002026328,-0.000706891,-0.000896595,-0.001586893,-0.004663312,-0.004478962,-0.146896488,-0.001229752,-0.006262548,-0.003064506,-0.001617524,-0.001461036,-0.000689845,-0.000232331,-0.001572909,-0.00631706,-0.007565279,-0.012874017,-0.006387422,-0.003288181;-0.002006843,-0.001075707,-0.00153823,0.698491953,-0.048633377,-0.003539674,-0.005304043,-0.000726834,-0.003197631,-0.01114956,-0.004151758,-0.001602376,-0.00276374,-0.001945256,-0.005590248,-0.020854177,-0.000514172,-0.002187176,-0.001393908,-0.002436637,-0.003107608,-0.002557516,-0.001552732,-0.001847724,-0.001133339,-0.001496355,-0.000826729,-0.000491484,-0.000252858,-0.001061092,-0.003324369,-0.000956161,-0.002773383,-0.006158342,-0.000142113;-0.000133399,-9.47579e-05,-0.000146871,-0.0059124,0.787478676,-0.000424063,-0.000571795,-4.85136e-05,-0.000218821,-0.001417522,-0.000286707,-0.000192086,-0.000245768,-0.000236819,-0.001239475,-0.003996125,-0.000123783,-0.000126771,-0.000400562,-0.000417897,-0.000322356,-0.00012783,-0.000186509,-0.00014257,-0.000120078,-0.000173915,-0.000254114,-3.41829e-05,-1.26275e-05,-0.000109905,-0.000491493,-0.000107976,-0.000107733,-0.000387677,-4.19055e-06;-0.002133086,-0.001495755,-0.001646649,-0.001304958,-0.001724277,0.787339416,-0.010161514,-0.000272584,-0.001479282,-0.003369931,-0.006131361,-0.00293257,-0.00283651,-0.001545278,-0.00284319,-0.067946024,-0.000833441,-0.032440652,-0.000683174,-0.00150209,-0.001300395,-0.002357106,-0.001180237,-0.000488472,-0.000338699,-0.002996641,-0.00070673,-0.00037427,-0.001994877,-0.000882198,-0.001489793,-0.002024278,-0.000962912,-0.002695246,-0.000101196;-0.002589472,-0.002647316,-0.024810946,-0.010579562,-0.013304633,-0.012413578,0.771667173,-0.001575063,-0.016718117,-0.016799853,-0.019601511,-0.005408542,-0.008688682,-0.011274008,-0.004795946,-0.020092213,-0.003487569,-0.004273543,-0.007700171,-0.013508198,-0.012545455,-0.008726088,-0.005948049,-0.00264805,-0.005336394,-0.013457586,-0.011521106,-0.013253254,-0.002216097,-0.021337905,-0.018057439,-0.017970807,-0.009095412,-0.025262104,-0.000207308;-0.013188805,-0.010337618,-0.003380349,-0.005318086,-0.003695765,-0.005135618,-0.004469915,0.951354947,-0.031818904,-0.008338689,-0.017995637,-0.009827114,-0.003798291,-0.002278187,-0.001942407,-0.00397617,-0.019513334,-0.013115523,-0.004127438,-0.005721513,-0.004139236,-0.003609597,-0.051707005,-0.079859624,-0.062432525,-0.014097638,-0.003212907,-0.001171542,-0.001028213,-0.004434038,-0.008783316,-0.002709726,-0.002990072,-0.005028242,-4.72208e-05;-0.038038787,-0.010494326,-0.010542373,-0.069201063,-0.037512199,-0.032441715,-0.035154803,-0.015084121,0.769136332,-0.201669822,-0.033013469,-0.015696104,-0.011875281,-0.017289655,-0.012014637,-0.025783089,-0.006304014,-0.010539087,-0.006320973,-0.003150346,-0.002327944,-0.004525379,-0.002967288,-0.003552077,-0.002456911,-0.003427711,-0.001414667,-0.000853278,-0.001295686,-0.004743442,-0.009944684,-0.003799831,-0.064560953,-0.010008993,-0.000155806;-0.005155392,-0.006697623,-0.017206739,-0.010084883,-0.034818906,-0.009343379,-0.015614152,-0.002886492,-0.018411757,0.87235598,-0.010722736,-0.00722221,-0.02828255,-0.025412126,-0.035398338,-0.031084568,-0.002493156,-0.018120907,-0.016526316,-0.004779719,-0.005159003,-0.004192222,-0.009947341,-0.003045405,-0.002977222,-0.005932192,-0.00337561,-0.000602723,-0.001006119,-0.002764542,-0.003281995,-0.000949348,-0.00507268,-0.003762522,-3.2924e-05;-0.002396536,-0.004368691,-0.006030805,-0.00243471,-0.00179705,-0.008053233,-0.001276634,-0.002183591,-0.005989635,-0.006687103,0.884982649,-0.010776589,-0.005540109,-0.011947162,-0.007085699,-0.006542728,-0.001938776,-0.076606134,-0.002918356,-0.001292705,-0.001075744,-0.003529057,-0.001276917,-0.000637478,-0.000508203,-0.001414303,-0.001257923,-0.000184129,-0.00188767,-0.001080058,-0.001340791,-0.0016994,-0.00203615,-0.002001259,-2.79889e-05;-0.0046742,-0.021764386,-0.013962697,-0.005845585,-0.010056668,-0.025067902,-0.009136161,-0.006784498,-0.014490576,-0.025233814,-0.031855507,0.684288956,-0.163871829,-0.062887224,-0.094565947,-0.079638509,-0.007354554,-0.088202428,-0.017421614,-0.00414447,-0.003692428,-0.004548669,-0.007027096,-0.007306819,-0.004110258,-0.006487789,-0.004056849,-0.000666126,-0.002243252,-0.003680472,-0.004662256,-0.001765171,-0.002201141,-0.004452414,-0.000200665;-0.006917628,-0.01469079,-0.003871259,-0.008247428,-0.005135918,-0.008080653,-0.006325508,-0.005471052,-0.006625737,-0.010811618,-0.016704878,-0.016071554,0.875736679,-0.014441467,-0.030336265,-0.009413847,-0.009714777,-0.017215457,-0.020611496,-0.003886039,-0.002512237,-0.002016781,-0.005645719,-0.009282112,-0.00457942,-0.004498216,-0.002867317,-0.001011411,-0.001390545,-0.003027114,-0.005868231,-0.002137076,-0.002237175,-0.003357562,-7.7125e-05;-0.001877178,-0.006296258,-0.003313542,-0.005926711,-0.00482406,-0.006734389,-0.009780987,-0.005128298,-0.009527336,-0.013783266,-0.010840997,-0.016199855,-0.087766598,0.697609799,-0.053805994,-0.020846592,-0.016422371,-0.030305774,-0.026565345,-0.0090525,-0.007423475,-0.004117447,-0.006596852,-0.004456161,-0.004472434,-0.007696366,-0.038518424,-0.00386178,-0.001900298,-0.015009342,-0.013651272,-0.006249813,-0.021173282,-0.009780842,-0.000584822;-0.004508286,-0.005984424,-0.002255963,-0.00281451,-0.002519828,-0.003542356,-0.002424391,-0.001298755,-0.002240703,-0.004421946,-0.003691893,-0.00536205,-0.014137101,-0.005033421,0.700211819,-0.004766489,-0.002030794,-0.004494497,-0.089111882,-0.006049897,-0.004352661,-0.00137874,-0.035515817,-0.041684978,-0.052458657,-0.011671399,-0.004005547,-0.001197916,-0.00099148,-0.00430604,-0.016230307,-0.0016056,-0.001331653,-0.005405423,-0.000187691;-0.000704125,-0.001024989,-0.001095159,-0.004848134,-0.002878729,-0.004729457,-0.003719757,-0.000559699,-0.001701483,-0.002562333,-0.002841472,-0.009193948,-0.003868115,-0.002768392,-0.004981248,0.958832067,-0.001280015,-0.005069501,-0.002250941,-0.001312929,-0.001508634,-0.002487744,-0.001870558,-0.000749417,-0.001409049,-0.0016613,-0.001023635,-0.000920886,-0.001642237,-0.001895402,-0.003911703,-0.003098075,-0.00282035,-0.005510608,-0.002037634;-0.010832112,-0.027029295,-0.013078252,-0.018076281,-0.008341925,-0.01710373,-0.023047459,-0.014004261,-0.026404744,-0.021623949,-0.038275368,-0.028261452,-0.011612254,-0.00831688,-0.008678897,-0.009080691,0.903801502,-0.005810995,-0.010177762,-0.006381617,-0.01362693,-0.023383014,-0.014869382,-0.003420036,-0.004386254,-0.01361205,-0.009081572,-0.004158661,-0.009801946,-0.005803496,-0.015419372,-0.019929468,-0.012696252,-0.015632167,-0.000194963;-0.003755614,-0.008670104,-0.002477636,-0.002847382,-0.001721063,-0.003357262,-0.003554503,-0.002732729,-0.003488391,-0.003037052,-0.007222754,-0.004310593,-0.003365902,-0.002410334,-0.002064966,-0.002473739,-0.022626514,0.952351146,-0.00429858,-0.003994041,-0.004944986,-0.006065174,-0.009947986,-0.002778254,-0.002782399,-0.012673361,-0.011157627,-0.005063832,-0.041032153,-0.004947183,-0.018107835,-0.015345834,-0.005986122,-0.010314783,-0.000709895;-0.005038356,-0.004036658,-0.006805591,-0.005794962,-0.007679881,-0.005913912,-0.005001134,-0.002609576,-0.005993286,-0.006360608,-0.007421439,-0.006058722,-0.005267681,-0.004094162,-0.004848233,-0.006164589,-0.008248447,-0.007082693,0.989504485,-0.004171643,-0.004209183,-0.004972883,-0.016737413,-0.002131401,-0.003748984,-0.007964137,-0.003824251,-0.002533164,-0.001859976,-0.005798092,-0.004411696,-0.002904285,-0.003654867,-0.006243272,-2.7702e-05;-0.033658131,-0.024860485,-0.064319325,-0.052507964,-0.066813014,-0.055335402,-0.050915385,-0.042257127,-0.049422047,-0.049962994,-0.04372396,-0.046442674,-0.048364542,-0.042919412,-0.044481862,-0.046721575,-0.023178318,-0.041097734,-0.035250123,0.974329958,-0.012928765,-0.044664564,-0.022034111,-0.019362354,-0.020078516,-0.019788358,-0.010504079,-0.004210213,-0.003561806,-0.012971992,-0.018281368,-0.010410566,-0.026402114,-0.016235167,-0.000190568;-0.017078117,-0.009528735,-0.030997619,-0.027867638,-0.040671149,-0.020986893,-0.01891515,-0.010972035,-0.021839969,-0.020535067,-0.019468396,-0.016721449,-0.017551506,-0.014105077,-0.019023927,-0.024605082,-0.0084466,-0.029488114,-0.015946428,-0.00685054,0.992287939,-0.025444294,-0.013533109,-0.007826447,-0.009285106,-0.008765155,-0.008022418,-0.004266029,-0.002967375,-0.009120574,-0.008657242,-0.00573249,-0.011573878,-0.010731821,-0.000326523;-0.001317146,-0.003071325,-0.003784409,-0.004372122,-0.004148086,-0.0048277,-0.006341092,-0.001322568,-0.004397792,-0.00576705,-0.005519552,-0.004586708,-0.006163653,-0.005005242,-0.002751197,-0.003786206,-0.005565546,-0.004431264,-0.005748586,-0.008436445,-0.005767769,0.989590774,-0.007553707,-0.004019906,-0.021137734,-0.016788923,-0.009437895,-0.009475019,-0.002505475,-0.014147087,-0.010758874,-0.006145657,-0.008496282,-0.011799152,-6.66582e-05;-0.01271717,-0.02123563,-0.023201699,-0.019654646,-0.020667414,-0.023279171,-0.019215018,-0.033684508,-0.017987141,-0.017593649,-0.033691294,-0.018004623,-0.012766915,-0.008642762,-0.011452431,-0.01708272,-0.022007312,-0.015573729,-0.014156592,-0.018578658,-0.011709029,-0.009315747,0.954727388,-0.043697576,-0.013862012,-0.056873737,-0.00865676,-0.00525938,-0.001766715,-0.00576086,-0.010797988,-0.010036528,-0.006887915,-0.009189366,-0.000297054;-0.003784235,-0.005943942,-0.004815802,-0.004713467,-0.005917339,-0.008272535,-0.004113686,-0.008059746,-0.003807861,-0.00408709,-0.010874711,-0.007033898,-0.003705054,-0.002582534,-0.002236166,-0.00311404,-0.00355268,-0.004738248,-0.00113362,-0.003166628,-0.001644553,-0.001743891,-0.003195572,0.895683618,-0.002708299,-0.005661555,-0.000821042,-0.000511302,-0.000594771,-0.001056717,-0.001445726,-0.001106583,-0.000532451,-0.001304674,-2.10223e-05;-0.000663915,-0.001984984,-0.00135336,-0.001809963,-0.002646226,-0.001802611,-0.002294011,-0.000616803,-0.001690192,-0.001930331,-0.001678322,-0.001353008,-0.00219909,-0.001946648,-0.001447868,-0.001293905,-0.000861576,-0.001009128,-0.001560043,-0.003078255,-0.001396263,-0.001088807,-0.002305829,-0.006682735,0.96623112,-0.017439828,-0.003391373,-0.002727331,-0.000475161,-0.003902916,-0.003759776,-0.001915599,-0.001147294,-0.003928198,-1.25732e-05;-0.003548878,-0.005385149,-0.006341204,-0.00389294,-0.004735976,-0.006792094,-0.009356652,-0.007254411,-0.005163527,-0.005352864,-0.008321831,-0.00527485,-0.004741647,-0.003397221,-0.004415223,-0.004437167,-0.00418651,-0.00406452,-0.010392378,-0.020401853,-0.010588811,-0.007614471,-0.04028783,-0.112198366,-0.099561519,0.894596273,-0.004505714,-0.003217237,-0.000921526,-0.004893775,-0.004822986,-0.002370077,-0.003027406,-0.005829079,-2.53379e-05;-0.00267326,-0.006046831,-0.004881497,-0.006061926,-0.007122241,-0.006191287,-0.013551176,-0.003004596,-0.008571623,-0.006873279,-0.007471771,-0.006505156,-0.008566734,-0.007855753,-0.00458603,-0.007512976,-0.006609298,-0.012539845,-0.015437579,-0.021230725,-0.021990342,-0.013921273,-0.016418696,-0.0171028,-0.024744516,-0.025287559,0.873460895,-0.028266106,-0.005003756,-0.02628928,-0.022343507,-0.009935523,-0.012723362,-0.022793085,-0.000436304;-0.021014135,-0.029112578,-0.015348867,-0.021930902,-0.015446604,-0.017589285,-0.023459934,-0.011706735,-0.017744791,-0.017995941,-0.024917726,-0.018424448,-0.018604038,-0.014317684,-0.013276364,-0.021925042,-0.023585037,-0.02117435,-0.021982514,-0.037529053,-0.03540501,-0.026002547,-0.04953412,-0.043510381,-0.038633029,-0.026891134,-0.02218497,0.801075656,-0.073615227,-0.03742236,-0.024928295,-0.012284724,-0.023709171,-0.043160776,-0.007388415;-0.005105609,-0.005507224,-0.004821338,-0.005102359,-0.004709797,-0.006401513,-0.010022301,-0.002267374,-0.004776342,-0.00637849,-0.005129417,-0.005487742,-0.006275611,-0.00478982,-0.004646709,-0.006552791,-0.005147569,-0.010209385,-0.02351519,-0.02263123,-0.040905683,-0.029578722,-0.009267827,-0.01840852,-0.011392795,-0.022291094,-0.016721603,-0.022487585,0.967236156,-0.024110513,-0.014600158,-0.019972918,-0.034048647,-0.02601125,-5.12455e-05;-0.011226175,-0.028792825,-0.038844232,-0.026958729,-0.021987935,-0.026819914,-0.063883444,-0.0151799,-0.067815323,-0.039201764,-0.034966205,-0.031177829,-0.045463156,-0.050907587,-0.040024918,-0.030330928,-0.03822413,-0.05319742,-0.051005171,-0.054722434,-0.06033958,-0.04217551,-0.043907266,-0.034090874,-0.085639322,-0.066377094,-0.070377626,-0.09359434,-0.032713261,0.857256968,-0.077569369,-0.032031287,-0.05735968,-0.075443284,-0.002393294;-0.001423908,-0.003199932,-0.001828886,-0.001110611,-0.000744897,-0.003188369,-0.003222972,-0.001037814,-0.00275221,-0.00203998,-0.002164539,-0.002446004,-0.001117675,-0.00109976,-0.001144437,-0.001849908,-0.004714965,-0.001478522,-0.002427735,-0.001460771,-0.002668983,-0.003629998,-0.003050622,-0.005961288,-0.009442094,-0.00334172,-0.002940545,-0.001469701,-0.00306816,-0.002690037,0.992723398,-0.004439867,-0.00445018,-0.008165743,-6.27059e-06;-0.000507793,-0.000450761,-0.000464532,-0.000442401,-0.00047921,-0.000397113,-0.000677882,-0.000398894,-0.000996413,-0.000669651,-0.000691382,-0.000632005,-0.000895125,-0.000828707,-0.000715183,-0.000445345,-0.000806414,-0.000489027,-0.000811212,-0.000741528,-0.001033935,-0.000585263,-0.001142297,-0.000375702,-0.00188586,-0.001182294,-0.001522828,-0.001195731,-0.000298592,-0.002327972,-0.004128042,0.988067408,-0.001087342,-0.001585374,-5.05288e-06;-0.001490484,-0.000381636,-0.00051539,-0.000412807,-0.001086843,-0.00040325,-0.000431896,-0.000194739,-0.000526594,-0.000405704,-0.000427699,-0.000373029,-0.000535757,-0.000372755,-0.000340403,-0.000499627,-0.00034353,-0.000434422,-0.000567715,-0.000611904,-0.000464216,-0.001083578,-0.00066296,-0.000340282,-0.000456104,-0.00062634,-0.000687475,-0.00053238,-9.4814e-05,-0.00072693,-0.004750227,-0.001505716,0.975124459,-0.001146753,-1.4577e-07;-0.002568154,-0.006476888,-0.005635973,-0.005233612,-0.006526335,-0.005509546,-0.013450617,-0.002862943,-0.007963984,-0.00581574,-0.005990283,-0.006362449,-0.005840321,-0.004482119,-0.004260952,-0.0052654,-0.005961785,-0.00603579,-0.008277212,-0.008217871,-0.008637449,-0.013156738,-0.009226786,-0.005185778,-0.008003777,-0.010217908,-0.020649187,-0.009870351,-0.007256217,-0.026227887,-0.015921883,-0.010531638,-0.013694503,0.920896753,-0.001872351;-1.7234e-05,-2.0392e-05,-2.61728e-05,-5.94183e-05,-2.38557e-05,-3.22037e-05,-3.81192e-05,-1.34552e-05,-3.20485e-05,-3.92075e-05,-2.20377e-05,-2.06752e-05,-2.66707e-05,-1.55686e-05,-4.20794e-05,-1.41105e-05,-9.84367e-06,-6.57959e-05,-5.45386e-05,-1.32667e-05,-3.83636e-05,-5.16637e-05,-7.15444e-05,-1.04754e-05,-2.32562e-05,-1.88441e-05,-3.94316e-05,-4.90602e-05,-0.000242861,-6.11539e-05,-7.05908e-05,-3.89425e-05,-6.60497e-05,-0.000110022,0.999904553;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    
    return xr.DataArray(
        data=[[
            8.68684171e-01, -9.33669000e-04, -2.57643610e-01, -3.94381980e-02, -3.66334540e-02,
            -1.29627905e-01, -1.21232260e-02, -1.56225600e-03, -4.95520600e-03, -1.40601000e-02,
            -6.23449000e-04, -2.71843000e-04, -2.76016000e-04, -1.88636000e-04, -1.49733000e-04,
            -9.52747100e-03, -5.10374000e-04, -1.02566090e-02, -4.55947000e-04, -3.13305400e-03,
            -2.64502400e-03, -3.86784270e-02, -1.33808600e-03, -1.27999600e-03, -3.07578000e-04,
            -3.93945100e-03, -2.52928000e-04, -1.41304000e-04, -3.71861000e-04, -6.27869000e-04,
            -1.90611800e-03, -2.01888000e-03, -2.15198400e-03, -2.33462200e-03, -1.53724580e-02
        ],
              [
                  -3.52914000e-03, 9.26812613e-01, -2.61520200e-03, -2.01922000e-03,
                  -8.51768000e-04, -3.65366900e-03, -4.38863700e-03, -4.42566481e-01,
                  -3.18202300e-02, -2.93755700e-03, -6.42380160e-02, -4.39890980e-02,
                  -2.94532000e-03, -1.27805600e-03, -1.23764600e-03, -6.00550100e-03,
                  -1.06270138e-01, -1.75276250e-02, -4.49917000e-04, -6.74029000e-04,
                  -1.07797000e-03, -1.57100300e-03, -3.84548100e-03, -2.40335400e-03,
                  -2.42027900e-03, -1.56751100e-03, -4.95052000e-04, -2.69923000e-04,
                  -1.65231700e-03, -8.23667000e-04, -2.74932900e-03, -2.99711500e-03,
                  -8.69258000e-04, -2.45149800e-03, -6.17356550e-02
              ],
              [
                  -5.41804650e-02, -6.43059000e-04, 8.52960376e-01, -2.67716400e-03,
                  -8.23854610e-02, -1.29955300e-03, -2.74504000e-03, -7.47645000e-04,
                  -9.35253900e-03, -2.54585000e-03, -1.45185700e-03, -9.18340000e-04,
                  -1.06471600e-03, -9.07012000e-04, -8.08241000e-04, -2.02632800e-03,
                  -7.06891000e-04, -8.96595000e-04, -1.58689300e-03, -4.66331200e-03,
                  -4.47896200e-03, -1.46896488e-01, -1.22975200e-03, -6.26254800e-03,
                  -3.06450600e-03, -1.61752400e-03, -1.46103600e-03, -6.89845000e-04,
                  -2.32331000e-04, -1.57290900e-03, -6.31706000e-03, -7.56527900e-03,
                  -1.28740170e-02, -6.38742200e-03, -3.28818100e-03
              ],
              [
                  -2.00684300e-03, -1.07570700e-03, -1.53823000e-03, 6.98491953e-01,
                  -4.86333770e-02, -3.53967400e-03, -5.30404300e-03, -7.26834000e-04,
                  -3.19763100e-03, -1.11495600e-02, -4.15175800e-03, -1.60237600e-03,
                  -2.76374000e-03, -1.94525600e-03, -5.59024800e-03, -2.08541770e-02,
                  -5.14172000e-04, -2.18717600e-03, -1.39390800e-03, -2.43663700e-03,
                  -3.10760800e-03, -2.55751600e-03, -1.55273200e-03, -1.84772400e-03,
                  -1.13333900e-03, -1.49635500e-03, -8.26729000e-04, -4.91484000e-04,
                  -2.52858000e-04, -1.06109200e-03, -3.32436900e-03, -9.56161000e-04,
                  -2.77338300e-03, -6.15834200e-03, -1.42113000e-04
              ],
              [
                  -1.33399000e-04, -9.47579000e-05, -1.46871000e-04, -5.91240000e-03,
                  7.87478676e-01, -4.24063000e-04, -5.71795000e-04, -4.85136000e-05,
                  -2.18821000e-04, -1.41752200e-03, -2.86707000e-04, -1.92086000e-04,
                  -2.45768000e-04, -2.36819000e-04, -1.23947500e-03, -3.99612500e-03,
                  -1.23783000e-04, -1.26771000e-04, -4.00562000e-04, -4.17897000e-04,
                  -3.22356000e-04, -1.27830000e-04, -1.86509000e-04, -1.42570000e-04,
                  -1.20078000e-04, -1.73915000e-04, -2.54114000e-04, -3.41829000e-05,
                  -1.26275000e-05, -1.09905000e-04, -4.91493000e-04, -1.07976000e-04,
                  -1.07733000e-04, -3.87677000e-04, -4.19055000e-06
              ],
              [
                  -2.13308600e-03, -1.49575500e-03, -1.64664900e-03, -1.30495800e-03,
                  -1.72427700e-03, 7.87339416e-01, -1.01615140e-02, -2.72584000e-04,
                  -1.47928200e-03, -3.36993100e-03, -6.13136100e-03, -2.93257000e-03,
                  -2.83651000e-03, -1.54527800e-03, -2.84319000e-03, -6.79460240e-02,
                  -8.33441000e-04, -3.24406520e-02, -6.83174000e-04, -1.50209000e-03,
                  -1.30039500e-03, -2.35710600e-03, -1.18023700e-03, -4.88472000e-04,
                  -3.38699000e-04, -2.99664100e-03, -7.06730000e-04, -3.74270000e-04,
                  -1.99487700e-03, -8.82198000e-04, -1.48979300e-03, -2.02427800e-03,
                  -9.62912000e-04, -2.69524600e-03, -1.01196000e-04
              ],
              [
                  -2.58947200e-03, -2.64731600e-03, -2.48109460e-02, -1.05795620e-02,
                  -1.33046330e-02, -1.24135780e-02, 7.71667173e-01, -1.57506300e-03,
                  -1.67181170e-02, -1.67998530e-02, -1.96015110e-02, -5.40854200e-03,
                  -8.68868200e-03, -1.12740080e-02, -4.79594600e-03, -2.00922130e-02,
                  -3.48756900e-03, -4.27354300e-03, -7.70017100e-03, -1.35081980e-02,
                  -1.25454550e-02, -8.72608800e-03, -5.94804900e-03, -2.64805000e-03,
                  -5.33639400e-03, -1.34575860e-02, -1.15211060e-02, -1.32532540e-02,
                  -2.21609700e-03, -2.13379050e-02, -1.80574390e-02, -1.79708070e-02,
                  -9.09541200e-03, -2.52621040e-02, -2.07308000e-04
              ],
              [
                  -1.31888050e-02, -1.03376180e-02, -3.38034900e-03, -5.31808600e-03,
                  -3.69576500e-03, -5.13561800e-03, -4.46991500e-03, 9.51354947e-01,
                  -3.18189040e-02, -8.33868900e-03, -1.79956370e-02, -9.82711400e-03,
                  -3.79829100e-03, -2.27818700e-03, -1.94240700e-03, -3.97617000e-03,
                  -1.95133340e-02, -1.31155230e-02, -4.12743800e-03, -5.72151300e-03,
                  -4.13923600e-03, -3.60959700e-03, -5.17070050e-02, -7.98596240e-02,
                  -6.24325250e-02, -1.40976380e-02, -3.21290700e-03, -1.17154200e-03,
                  -1.02821300e-03, -4.43403800e-03, -8.78331600e-03, -2.70972600e-03,
                  -2.99007200e-03, -5.02824200e-03, -4.72208000e-05
              ],
              [
                  -3.80387870e-02, -1.04943260e-02, -1.05423730e-02, -6.92010630e-02,
                  -3.75121990e-02, -3.24417150e-02, -3.51548030e-02, -1.50841210e-02,
                  7.69136332e-01, -2.01669822e-01, -3.30134690e-02, -1.56961040e-02,
                  -1.18752810e-02, -1.72896550e-02, -1.20146370e-02, -2.57830890e-02,
                  -6.30401400e-03, -1.05390870e-02, -6.32097300e-03, -3.15034600e-03,
                  -2.32794400e-03, -4.52537900e-03, -2.96728800e-03, -3.55207700e-03,
                  -2.45691100e-03, -3.42771100e-03, -1.41466700e-03, -8.53278000e-04,
                  -1.29568600e-03, -4.74344200e-03, -9.94468400e-03, -3.79983100e-03,
                  -6.45609530e-02, -1.00089930e-02, -1.55806000e-04
              ],
              [
                  -5.15539200e-03, -6.69762300e-03, -1.72067390e-02, -1.00848830e-02,
                  -3.48189060e-02, -9.34337900e-03, -1.56141520e-02, -2.88649200e-03,
                  -1.84117570e-02, 8.72355980e-01, -1.07227360e-02, -7.22221000e-03,
                  -2.82825500e-02, -2.54121260e-02, -3.53983380e-02, -3.10845680e-02,
                  -2.49315600e-03, -1.81209070e-02, -1.65263160e-02, -4.77971900e-03,
                  -5.15900300e-03, -4.19222200e-03, -9.94734100e-03, -3.04540500e-03,
                  -2.97722200e-03, -5.93219200e-03, -3.37561000e-03, -6.02723000e-04,
                  -1.00611900e-03, -2.76454200e-03, -3.28199500e-03, -9.49348000e-04,
                  -5.07268000e-03, -3.76252200e-03, -3.29240000e-05
              ],
              [
                  -2.39653600e-03, -4.36869100e-03, -6.03080500e-03, -2.43471000e-03,
                  -1.79705000e-03, -8.05323300e-03, -1.27663400e-03, -2.18359100e-03,
                  -5.98963500e-03, -6.68710300e-03, 8.84982649e-01, -1.07765890e-02,
                  -5.54010900e-03, -1.19471620e-02, -7.08569900e-03, -6.54272800e-03,
                  -1.93877600e-03, -7.66061340e-02, -2.91835600e-03, -1.29270500e-03,
                  -1.07574400e-03, -3.52905700e-03, -1.27691700e-03, -6.37478000e-04,
                  -5.08203000e-04, -1.41430300e-03, -1.25792300e-03, -1.84129000e-04,
                  -1.88767000e-03, -1.08005800e-03, -1.34079100e-03, -1.69940000e-03,
                  -2.03615000e-03, -2.00125900e-03, -2.79889000e-05
              ],
              [
                  -4.67420000e-03, -2.17643860e-02, -1.39626970e-02, -5.84558500e-03,
                  -1.00566680e-02, -2.50679020e-02, -9.13616100e-03, -6.78449800e-03,
                  -1.44905760e-02, -2.52338140e-02, -3.18555070e-02, 6.84288956e-01,
                  -1.63871829e-01, -6.28872240e-02, -9.45659470e-02, -7.96385090e-02,
                  -7.35455400e-03, -8.82024280e-02, -1.74216140e-02, -4.14447000e-03,
                  -3.69242800e-03, -4.54866900e-03, -7.02709600e-03, -7.30681900e-03,
                  -4.11025800e-03, -6.48778900e-03, -4.05684900e-03, -6.66126000e-04,
                  -2.24325200e-03, -3.68047200e-03, -4.66225600e-03, -1.76517100e-03,
                  -2.20114100e-03, -4.45241400e-03, -2.00665000e-04
              ],
              [
                  -6.91762800e-03, -1.46907900e-02, -3.87125900e-03, -8.24742800e-03,
                  -5.13591800e-03, -8.08065300e-03, -6.32550800e-03, -5.47105200e-03,
                  -6.62573700e-03, -1.08116180e-02, -1.67048780e-02, -1.60715540e-02,
                  8.75736679e-01, -1.44414670e-02, -3.03362650e-02, -9.41384700e-03,
                  -9.71477700e-03, -1.72154570e-02, -2.06114960e-02, -3.88603900e-03,
                  -2.51223700e-03, -2.01678100e-03, -5.64571900e-03, -9.28211200e-03,
                  -4.57942000e-03, -4.49821600e-03, -2.86731700e-03, -1.01141100e-03,
                  -1.39054500e-03, -3.02711400e-03, -5.86823100e-03, -2.13707600e-03,
                  -2.23717500e-03, -3.35756200e-03, -7.71250000e-05
              ],
              [
                  -1.87717800e-03, -6.29625800e-03, -3.31354200e-03, -5.92671100e-03,
                  -4.82406000e-03, -6.73438900e-03, -9.78098700e-03, -5.12829800e-03,
                  -9.52733600e-03, -1.37832660e-02, -1.08409970e-02, -1.61998550e-02,
                  -8.77665980e-02, 6.97609799e-01, -5.38059940e-02, -2.08465920e-02,
                  -1.64223710e-02, -3.03057740e-02, -2.65653450e-02, -9.05250000e-03,
                  -7.42347500e-03, -4.11744700e-03, -6.59685200e-03, -4.45616100e-03,
                  -4.47243400e-03, -7.69636600e-03, -3.85184240e-02, -3.86178000e-03,
                  -1.90029800e-03, -1.50093420e-02, -1.36512720e-02, -6.24981300e-03,
                  -2.11732820e-02, -9.78084200e-03, -5.84822000e-04
              ],
              [
                  -4.50828600e-03, -5.98442400e-03, -2.25596300e-03, -2.81451000e-03,
                  -2.51982800e-03, -3.54235600e-03, -2.42439100e-03, -1.29875500e-03,
                  -2.24070300e-03, -4.42194600e-03, -3.69189300e-03, -5.36205000e-03,
                  -1.41371010e-02, -5.03342100e-03, 7.00211819e-01, -4.76648900e-03,
                  -2.03079400e-03, -4.49449700e-03, -8.91118820e-02, -6.04989700e-03,
                  -4.35266100e-03, -1.37874000e-03, -3.55158170e-02, -4.16849780e-02,
                  -5.24586570e-02, -1.16713990e-02, -4.00554700e-03, -1.19791600e-03,
                  -9.91480000e-04, -4.30604000e-03, -1.62303070e-02, -1.60560000e-03,
                  -1.33165300e-03, -5.40542300e-03, -1.87691000e-04
              ],
              [
                  -7.04125000e-04, -1.02498900e-03, -1.09515900e-03, -4.84813400e-03,
                  -2.87872900e-03, -4.72945700e-03, -3.71975700e-03, -5.59699000e-04,
                  -1.70148300e-03, -2.56233300e-03, -2.84147200e-03, -9.19394800e-03,
                  -3.86811500e-03, -2.76839200e-03, -4.98124800e-03, 9.58832067e-01,
                  -1.28001500e-03, -5.06950100e-03, -2.25094100e-03, -1.31292900e-03,
                  -1.50863400e-03, -2.48774400e-03, -1.87055800e-03, -7.49417000e-04,
                  -1.40904900e-03, -1.66130000e-03, -1.02363500e-03, -9.20886000e-04,
                  -1.64223700e-03, -1.89540200e-03, -3.91170300e-03, -3.09807500e-03,
                  -2.82035000e-03, -5.51060800e-03, -2.03763400e-03
              ],
              [
                  -1.08321120e-02, -2.70292950e-02, -1.30782520e-02, -1.80762810e-02,
                  -8.34192500e-03, -1.71037300e-02, -2.30474590e-02, -1.40042610e-02,
                  -2.64047440e-02, -2.16239490e-02, -3.82753680e-02, -2.82614520e-02,
                  -1.16122540e-02, -8.31688000e-03, -8.67889700e-03, -9.08069100e-03,
                  9.03801502e-01, -5.81099500e-03, -1.01777620e-02, -6.38161700e-03,
                  -1.36269300e-02, -2.33830140e-02, -1.48693820e-02, -3.42003600e-03,
                  -4.38625400e-03, -1.36120500e-02, -9.08157200e-03, -4.15866100e-03,
                  -9.80194600e-03, -5.80349600e-03, -1.54193720e-02, -1.99294680e-02,
                  -1.26962520e-02, -1.56321670e-02, -1.94963000e-04
              ],
              [
                  -3.75561400e-03, -8.67010400e-03, -2.47763600e-03, -2.84738200e-03,
                  -1.72106300e-03, -3.35726200e-03, -3.55450300e-03, -2.73272900e-03,
                  -3.48839100e-03, -3.03705200e-03, -7.22275400e-03, -4.31059300e-03,
                  -3.36590200e-03, -2.41033400e-03, -2.06496600e-03, -2.47373900e-03,
                  -2.26265140e-02, 9.52351146e-01, -4.29858000e-03, -3.99404100e-03,
                  -4.94498600e-03, -6.06517400e-03, -9.94798600e-03, -2.77825400e-03,
                  -2.78239900e-03, -1.26733610e-02, -1.11576270e-02, -5.06383200e-03,
                  -4.10321530e-02, -4.94718300e-03, -1.81078350e-02, -1.53458340e-02,
                  -5.98612200e-03, -1.03147830e-02, -7.09895000e-04
              ],
              [
                  -5.03835600e-03, -4.03665800e-03, -6.80559100e-03, -5.79496200e-03,
                  -7.67988100e-03, -5.91391200e-03, -5.00113400e-03, -2.60957600e-03,
                  -5.99328600e-03, -6.36060800e-03, -7.42143900e-03, -6.05872200e-03,
                  -5.26768100e-03, -4.09416200e-03, -4.84823300e-03, -6.16458900e-03,
                  -8.24844700e-03, -7.08269300e-03, 9.89504485e-01, -4.17164300e-03,
                  -4.20918300e-03, -4.97288300e-03, -1.67374130e-02, -2.13140100e-03,
                  -3.74898400e-03, -7.96413700e-03, -3.82425100e-03, -2.53316400e-03,
                  -1.85997600e-03, -5.79809200e-03, -4.41169600e-03, -2.90428500e-03,
                  -3.65486700e-03, -6.24327200e-03, -2.77020000e-05
              ],
              [
                  -3.36581310e-02, -2.48604850e-02, -6.43193250e-02, -5.25079640e-02,
                  -6.68130140e-02, -5.53354020e-02, -5.09153850e-02, -4.22571270e-02,
                  -4.94220470e-02, -4.99629940e-02, -4.37239600e-02, -4.64426740e-02,
                  -4.83645420e-02, -4.29194120e-02, -4.44818620e-02, -4.67215750e-02,
                  -2.31783180e-02, -4.10977340e-02, -3.52501230e-02, 9.74329958e-01,
                  -1.29287650e-02, -4.46645640e-02, -2.20341110e-02, -1.93623540e-02,
                  -2.00785160e-02, -1.97883580e-02, -1.05040790e-02, -4.21021300e-03,
                  -3.56180600e-03, -1.29719920e-02, -1.82813680e-02, -1.04105660e-02,
                  -2.64021140e-02, -1.62351670e-02, -1.90568000e-04
              ],
              [
                  -1.70781170e-02, -9.52873500e-03, -3.09976190e-02, -2.78676380e-02,
                  -4.06711490e-02, -2.09868930e-02, -1.89151500e-02, -1.09720350e-02,
                  -2.18399690e-02, -2.05350670e-02, -1.94683960e-02, -1.67214490e-02,
                  -1.75515060e-02, -1.41050770e-02, -1.90239270e-02, -2.46050820e-02,
                  -8.44660000e-03, -2.94881140e-02, -1.59464280e-02, -6.85054000e-03,
                  9.92287939e-01, -2.54442940e-02, -1.35331090e-02, -7.82644700e-03,
                  -9.28510600e-03, -8.76515500e-03, -8.02241800e-03, -4.26602900e-03,
                  -2.96737500e-03, -9.12057400e-03, -8.65724200e-03, -5.73249000e-03,
                  -1.15738780e-02, -1.07318210e-02, -3.26523000e-04
              ],
              [
                  -1.31714600e-03, -3.07132500e-03, -3.78440900e-03, -4.37212200e-03,
                  -4.14808600e-03, -4.82770000e-03, -6.34109200e-03, -1.32256800e-03,
                  -4.39779200e-03, -5.76705000e-03, -5.51955200e-03, -4.58670800e-03,
                  -6.16365300e-03, -5.00524200e-03, -2.75119700e-03, -3.78620600e-03,
                  -5.56554600e-03, -4.43126400e-03, -5.74858600e-03, -8.43644500e-03,
                  -5.76776900e-03, 9.89590774e-01, -7.55370700e-03, -4.01990600e-03,
                  -2.11377340e-02, -1.67889230e-02, -9.43789500e-03, -9.47501900e-03,
                  -2.50547500e-03, -1.41470870e-02, -1.07588740e-02, -6.14565700e-03,
                  -8.49628200e-03, -1.17991520e-02, -6.66582000e-05
              ],
              [
                  -1.27171700e-02, -2.12356300e-02, -2.32016990e-02, -1.96546460e-02,
                  -2.06674140e-02, -2.32791710e-02, -1.92150180e-02, -3.36845080e-02,
                  -1.79871410e-02, -1.75936490e-02, -3.36912940e-02, -1.80046230e-02,
                  -1.27669150e-02, -8.64276200e-03, -1.14524310e-02, -1.70827200e-02,
                  -2.20073120e-02, -1.55737290e-02, -1.41565920e-02, -1.85786580e-02,
                  -1.17090290e-02, -9.31574700e-03, 9.54727388e-01, -4.36975760e-02,
                  -1.38620120e-02, -5.68737370e-02, -8.65676000e-03, -5.25938000e-03,
                  -1.76671500e-03, -5.76086000e-03, -1.07979880e-02, -1.00365280e-02,
                  -6.88791500e-03, -9.18936600e-03, -2.97054000e-04
              ],
              [
                  -3.78423500e-03, -5.94394200e-03, -4.81580200e-03, -4.71346700e-03,
                  -5.91733900e-03, -8.27253500e-03, -4.11368600e-03, -8.05974600e-03,
                  -3.80786100e-03, -4.08709000e-03, -1.08747110e-02, -7.03389800e-03,
                  -3.70505400e-03, -2.58253400e-03, -2.23616600e-03, -3.11404000e-03,
                  -3.55268000e-03, -4.73824800e-03, -1.13362000e-03, -3.16662800e-03,
                  -1.64455300e-03, -1.74389100e-03, -3.19557200e-03, 8.95683618e-01,
                  -2.70829900e-03, -5.66155500e-03, -8.21042000e-04, -5.11302000e-04,
                  -5.94771000e-04, -1.05671700e-03, -1.44572600e-03, -1.10658300e-03,
                  -5.32451000e-04, -1.30467400e-03, -2.10223000e-05
              ],
              [
                  -6.63915000e-04, -1.98498400e-03, -1.35336000e-03, -1.80996300e-03,
                  -2.64622600e-03, -1.80261100e-03, -2.29401100e-03, -6.16803000e-04,
                  -1.69019200e-03, -1.93033100e-03, -1.67832200e-03, -1.35300800e-03,
                  -2.19909000e-03, -1.94664800e-03, -1.44786800e-03, -1.29390500e-03,
                  -8.61576000e-04, -1.00912800e-03, -1.56004300e-03, -3.07825500e-03,
                  -1.39626300e-03, -1.08880700e-03, -2.30582900e-03, -6.68273500e-03,
                  9.66231120e-01, -1.74398280e-02, -3.39137300e-03, -2.72733100e-03,
                  -4.75161000e-04, -3.90291600e-03, -3.75977600e-03, -1.91559900e-03,
                  -1.14729400e-03, -3.92819800e-03, -1.25732000e-05
              ],
              [
                  -3.54887800e-03, -5.38514900e-03, -6.34120400e-03, -3.89294000e-03,
                  -4.73597600e-03, -6.79209400e-03, -9.35665200e-03, -7.25441100e-03,
                  -5.16352700e-03, -5.35286400e-03, -8.32183100e-03, -5.27485000e-03,
                  -4.74164700e-03, -3.39722100e-03, -4.41522300e-03, -4.43716700e-03,
                  -4.18651000e-03, -4.06452000e-03, -1.03923780e-02, -2.04018530e-02,
                  -1.05888110e-02, -7.61447100e-03, -4.02878300e-02, -1.12198366e-01,
                  -9.95615190e-02, 8.94596273e-01, -4.50571400e-03, -3.21723700e-03,
                  -9.21526000e-04, -4.89377500e-03, -4.82298600e-03, -2.37007700e-03,
                  -3.02740600e-03, -5.82907900e-03, -2.53379000e-05
              ],
              [
                  -2.67326000e-03, -6.04683100e-03, -4.88149700e-03, -6.06192600e-03,
                  -7.12224100e-03, -6.19128700e-03, -1.35511760e-02, -3.00459600e-03,
                  -8.57162300e-03, -6.87327900e-03, -7.47177100e-03, -6.50515600e-03,
                  -8.56673400e-03, -7.85575300e-03, -4.58603000e-03, -7.51297600e-03,
                  -6.60929800e-03, -1.25398450e-02, -1.54375790e-02, -2.12307250e-02,
                  -2.19903420e-02, -1.39212730e-02, -1.64186960e-02, -1.71028000e-02,
                  -2.47445160e-02, -2.52875590e-02, 8.73460895e-01, -2.82661060e-02,
                  -5.00375600e-03, -2.62892800e-02, -2.23435070e-02, -9.93552300e-03,
                  -1.27233620e-02, -2.27930850e-02, -4.36304000e-04
              ],
              [
                  -2.10141350e-02, -2.91125780e-02, -1.53488670e-02, -2.19309020e-02,
                  -1.54466040e-02, -1.75892850e-02, -2.34599340e-02, -1.17067350e-02,
                  -1.77447910e-02, -1.79959410e-02, -2.49177260e-02, -1.84244480e-02,
                  -1.86040380e-02, -1.43176840e-02, -1.32763640e-02, -2.19250420e-02,
                  -2.35850370e-02, -2.11743500e-02, -2.19825140e-02, -3.75290530e-02,
                  -3.54050100e-02, -2.60025470e-02, -4.95341200e-02, -4.35103810e-02,
                  -3.86330290e-02, -2.68911340e-02, -2.21849700e-02, 8.01075656e-01,
                  -7.36152270e-02, -3.74223600e-02, -2.49282950e-02, -1.22847240e-02,
                  -2.37091710e-02, -4.31607760e-02, -7.38841500e-03
              ],
              [
                  -5.10560900e-03, -5.50722400e-03, -4.82133800e-03, -5.10235900e-03,
                  -4.70979700e-03, -6.40151300e-03, -1.00223010e-02, -2.26737400e-03,
                  -4.77634200e-03, -6.37849000e-03, -5.12941700e-03, -5.48774200e-03,
                  -6.27561100e-03, -4.78982000e-03, -4.64670900e-03, -6.55279100e-03,
                  -5.14756900e-03, -1.02093850e-02, -2.35151900e-02, -2.26312300e-02,
                  -4.09056830e-02, -2.95787220e-02, -9.26782700e-03, -1.84085200e-02,
                  -1.13927950e-02, -2.22910940e-02, -1.67216030e-02, -2.24875850e-02,
                  9.67236156e-01, -2.41105130e-02, -1.46001580e-02, -1.99729180e-02,
                  -3.40486470e-02, -2.60112500e-02, -5.12455000e-05
              ],
              [
                  -1.12261750e-02, -2.87928250e-02, -3.88442320e-02, -2.69587290e-02,
                  -2.19879350e-02, -2.68199140e-02, -6.38834440e-02, -1.51799000e-02,
                  -6.78153230e-02, -3.92017640e-02, -3.49662050e-02, -3.11778290e-02,
                  -4.54631560e-02, -5.09075870e-02, -4.00249180e-02, -3.03309280e-02,
                  -3.82241300e-02, -5.31974200e-02, -5.10051710e-02, -5.47224340e-02,
                  -6.03395800e-02, -4.21755100e-02, -4.39072660e-02, -3.40908740e-02,
                  -8.56393220e-02, -6.63770940e-02, -7.03776260e-02, -9.35943400e-02,
                  -3.27132610e-02, 8.57256968e-01, -7.75693690e-02, -3.20312870e-02,
                  -5.73596800e-02, -7.54432840e-02, -2.39329400e-03
              ],
              [
                  -1.42390800e-03, -3.19993200e-03, -1.82888600e-03, -1.11061100e-03,
                  -7.44897000e-04, -3.18836900e-03, -3.22297200e-03, -1.03781400e-03,
                  -2.75221000e-03, -2.03998000e-03, -2.16453900e-03, -2.44600400e-03,
                  -1.11767500e-03, -1.09976000e-03, -1.14443700e-03, -1.84990800e-03,
                  -4.71496500e-03, -1.47852200e-03, -2.42773500e-03, -1.46077100e-03,
                  -2.66898300e-03, -3.62999800e-03, -3.05062200e-03, -5.96128800e-03,
                  -9.44209400e-03, -3.34172000e-03, -2.94054500e-03, -1.46970100e-03,
                  -3.06816000e-03, -2.69003700e-03, 9.92723398e-01, -4.43986700e-03,
                  -4.45018000e-03, -8.16574300e-03, -6.27059000e-06
              ],
              [
                  -5.07793000e-04, -4.50761000e-04, -4.64532000e-04, -4.42401000e-04,
                  -4.79210000e-04, -3.97113000e-04, -6.77882000e-04, -3.98894000e-04,
                  -9.96413000e-04, -6.69651000e-04, -6.91382000e-04, -6.32005000e-04,
                  -8.95125000e-04, -8.28707000e-04, -7.15183000e-04, -4.45345000e-04,
                  -8.06414000e-04, -4.89027000e-04, -8.11212000e-04, -7.41528000e-04,
                  -1.03393500e-03, -5.85263000e-04, -1.14229700e-03, -3.75702000e-04,
                  -1.88586000e-03, -1.18229400e-03, -1.52282800e-03, -1.19573100e-03,
                  -2.98592000e-04, -2.32797200e-03, -4.12804200e-03, 9.88067408e-01,
                  -1.08734200e-03, -1.58537400e-03, -5.05288000e-06
              ],
              [
                  -1.49048400e-03, -3.81636000e-04, -5.15390000e-04, -4.12807000e-04,
                  -1.08684300e-03, -4.03250000e-04, -4.31896000e-04, -1.94739000e-04,
                  -5.26594000e-04, -4.05704000e-04, -4.27699000e-04, -3.73029000e-04,
                  -5.35757000e-04, -3.72755000e-04, -3.40403000e-04, -4.99627000e-04,
                  -3.43530000e-04, -4.34422000e-04, -5.67715000e-04, -6.11904000e-04,
                  -4.64216000e-04, -1.08357800e-03, -6.62960000e-04, -3.40282000e-04,
                  -4.56104000e-04, -6.26340000e-04, -6.87475000e-04, -5.32380000e-04,
                  -9.48140000e-05, -7.26930000e-04, -4.75022700e-03, -1.50571600e-03,
                  9.75124459e-01, -1.14675300e-03, -1.45770000e-07
              ],
              [
                  -2.56815400e-03, -6.47688800e-03, -5.63597300e-03, -5.23361200e-03,
                  -6.52633500e-03, -5.50954600e-03, -1.34506170e-02, -2.86294300e-03,
                  -7.96398400e-03, -5.81574000e-03, -5.99028300e-03, -6.36244900e-03,
                  -5.84032100e-03, -4.48211900e-03, -4.26095200e-03, -5.26540000e-03,
                  -5.96178500e-03, -6.03579000e-03, -8.27721200e-03, -8.21787100e-03,
                  -8.63744900e-03, -1.31567380e-02, -9.22678600e-03, -5.18577800e-03,
                  -8.00377700e-03, -1.02179080e-02, -2.06491870e-02, -9.87035100e-03,
                  -7.25621700e-03, -2.62278870e-02, -1.59218830e-02, -1.05316380e-02,
                  -1.36945030e-02, 9.20896753e-01, -1.87235100e-03
              ],
              [
                  -1.72340000e-05, -2.03920000e-05, -2.61728000e-05, -5.94183000e-05,
                  -2.38557000e-05, -3.22037000e-05, -3.81192000e-05, -1.34552000e-05,
                  -3.20485000e-05, -3.92075000e-05, -2.20377000e-05, -2.06752000e-05,
                  -2.66707000e-05, -1.55686000e-05, -4.20794000e-05, -1.41105000e-05,
                  -9.84367000e-06, -6.57959000e-05, -5.45386000e-05, -1.32667000e-05,
                  -3.83636000e-05, -5.16637000e-05, -7.15444000e-05, -1.04754000e-05,
                  -2.32562000e-05, -1.88441000e-05, -3.94316000e-05, -4.90602000e-05,
                  -2.42861000e-04, -6.11539000e-05, -7.05908000e-05, -3.89425000e-05,
                  -6.60497000e-05, -1.10022000e-04, 9.99904553e-01
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])



@cache('run')
def ia_matrix_2003():
    """
    Real Name: b'ia matrix 2003'
    Original Eqn: b'0.871748522,-0.000802303,-0.25668027,-0.0426759,-0.042483353,-0.124470047,-0.012868491,-0.001945821,-0.005331104,-0.013203244,-0.000564509,-0.000252567,-0.000265907,-0.000172078,-0.00015033,-0.009713017,-0.0004726,-0.008136106,-0.000495083,-0.002971511,-0.002569215,-0.03879115,-0.001616409,-0.00117875,-0.00028913,-0.004031851,-0.000262692,-0.000139846,-0.000360426,-0.00069594,-0.002176008,-0.002262956,-0.002164395,-0.00243113,-0.017557447;-0.00332194,0.917765794,-0.002670743,-0.002439711,-0.001262039,-0.004132039,-0.004698109,-0.466175612,-0.03344912,-0.003323698,-0.066959454,-0.047533929,-0.003017259,-0.001228493,-0.001244808,-0.005449232,-0.113529653,-0.017622988,-0.000490317,-0.000658781,-0.001180912,-0.001762693,-0.004448997,-0.002728161,-0.002365127,-0.001747299,-0.000560834,-0.000264762,-0.001288543,-0.000837147,-0.003088539,-0.002892219,-0.001092913,-0.002738598,-0.060288018;-0.056511477,-0.000762079,0.849354659,-0.003342352,-0.087238539,-0.001557323,-0.002963784,-0.001081702,-0.010117854,-0.002951535,-0.001954631,-0.001204645,-0.001238839,-0.001061213,-0.00094456,-0.002330368,-0.000813332,-0.001036601,-0.001614635,-0.004789023,-0.004534735,-0.150432337,-0.001355379,-0.00608859,-0.003407222,-0.001628173,-0.001419675,-0.000682969,-0.000236472,-0.001670901,-0.007216702,-0.008046876,-0.013267067,-0.006678732,-0.002991253;-0.001983404,-0.001025394,-0.0015834,0.69083927,-0.052197798,-0.003449903,-0.005135896,-0.000517824,-0.003297155,-0.011811925,-0.003773857,-0.001652437,-0.002455685,-0.001873604,-0.005404231,-0.020867902,-0.000580324,-0.002242908,-0.001377832,-0.002428184,-0.002946335,-0.002670154,-0.001668378,-0.002215427,-0.001334515,-0.001493407,-0.000761255,-0.00045439,-0.000248974,-0.001172875,-0.003009414,-0.000938677,-0.002879041,-0.005473805,-0.000104462;-0.000137004,-8.0512e-05,-0.000126554,-0.007747518,0.787508376,-0.000458159,-0.000510193,-4.43231e-05,-0.000216748,-0.001171981,-0.000316792,-0.00018041,-0.000217237,-0.000249284,-0.00144764,-0.004225441,-0.000110859,-0.000120735,-0.000396394,-0.000405119,-0.000302006,-0.00012289,-0.000190731,-0.000131819,-0.000126042,-0.000150889,-0.000244135,-3.16055e-05,-1.06295e-05,-0.000108215,-0.000417681,-0.000100702,-0.000104411,-0.000385726,-1.74238e-06;-0.001945471,-0.00153071,-0.001662131,-0.001230411,-0.001711124,0.777953834,-0.010422765,-0.000255988,-0.00148333,-0.003340744,-0.006493991,-0.003129366,-0.002930763,-0.001560112,-0.002783478,-0.070792356,-0.000867246,-0.032476846,-0.000778512,-0.001448268,-0.001239425,-0.002313394,-0.001177105,-0.000554803,-0.000407349,-0.002849459,-0.000693898,-0.000346182,-0.00187363,-0.000913146,-0.00159978,-0.002195714,-0.001072394,-0.002720118,-9.64006e-05;-0.002523376,-0.002732761,-0.024086259,-0.011069723,-0.013868743,-0.012996626,0.767410711,-0.001263196,-0.016122287,-0.016568935,-0.019518014,-0.005287922,-0.008139905,-0.010479749,-0.004704772,-0.019933712,-0.003128496,-0.004333032,-0.007545084,-0.012949745,-0.011981613,-0.008414549,-0.006047874,-0.002953761,-0.005307327,-0.013182838,-0.011138533,-0.013026447,-0.002118701,-0.020701533,-0.01859817,-0.017899793,-0.008688492,-0.024604834,-0.00017388;-0.012157304,-0.009105314,-0.003046978,-0.005075613,-0.00374425,-0.004769227,-0.004357972,0.961798473,-0.033984057,-0.008179414,-0.017138403,-0.010282934,-0.00371982,-0.002072222,-0.00181411,-0.003556651,-0.018548895,-0.012068389,-0.003968001,-0.004995774,-0.003780569,-0.003355491,-0.049210487,-0.072476589,-0.063956523,-0.015786418,-0.003179908,-0.001114105,-0.000921764,-0.004414947,-0.008350643,-0.002943738,-0.002816652,-0.005074399,-3.48911e-05;-0.038336424,-0.010522534,-0.00999355,-0.06989513,-0.03756249,-0.03339286,-0.035411889,-0.013367075,0.762568528,-0.205155668,-0.034899927,-0.01593319,-0.011440306,-0.017295443,-0.011889592,-0.025687381,-0.006463133,-0.01082411,-0.006282547,-0.003166391,-0.00222327,-0.004502576,-0.00323309,-0.004408262,-0.003280927,-0.003832926,-0.001401995,-0.000807658,-0.001303588,-0.00475064,-0.01000891,-0.003800542,-0.063292692,-0.009948183,-0.000143276;-0.005042721,-0.006340169,-0.017682938,-0.010367541,-0.03607421,-0.009098169,-0.015880439,-0.002579758,-0.018146469,0.867111406,-0.010518357,-0.007110502,-0.026991326,-0.024544322,-0.036219078,-0.032803921,-0.002419652,-0.018433674,-0.016572821,-0.004543999,-0.005117875,-0.004005218,-0.010238811,-0.003059916,-0.00314877,-0.006061738,-0.003402524,-0.000598153,-0.00099406,-0.002789733,-0.003292333,-0.001051123,-0.005054476,-0.003819217,-2.64243e-05;-0.001958636,-0.004559002,-0.005938244,-0.002276877,-0.001652786,-0.007617142,-0.001196441,-0.001799817,-0.005729342,-0.006104292,0.876847359,-0.010485917,-0.005228727,-0.010634366,-0.006934643,-0.00661289,-0.00180079,-0.080126343,-0.003036674,-0.001203535,-0.001012624,-0.00331612,-0.001289334,-0.000608874,-0.000566356,-0.001312971,-0.001187236,-0.000151955,-0.001535074,-0.000970465,-0.001337749,-0.001660461,-0.001936022,-0.00187401,-2.18944e-05;-0.004453483,-0.021162388,-0.012831161,-0.005681158,-0.010133515,-0.024429949,-0.008703717,-0.005613018,-0.013668006,-0.024378988,-0.032033465,0.683268302,-0.161803666,-0.062886785,-0.092960337,-0.075951364,-0.007035315,-0.088743303,-0.017419472,-0.003939792,-0.003539939,-0.004265107,-0.00670576,-0.006471886,-0.004739435,-0.006937642,-0.003886206,-0.000636467,-0.002026148,-0.003636434,-0.004629102,-0.001736183,-0.002178748,-0.004323377,-0.000183784;-0.006803999,-0.015652379,-0.003876108,-0.00834418,-0.005874878,-0.008449998,-0.006497715,-0.00565669,-0.006961599,-0.011514151,-0.017344218,-0.018304355,0.868813017,-0.014874972,-0.032739768,-0.009438204,-0.008696244,-0.017476087,-0.02222622,-0.003691171,-0.002535441,-0.002076496,-0.005551581,-0.009475857,-0.00530898,-0.005363047,-0.002881838,-0.000936743,-0.001369029,-0.002927123,-0.005936722,-0.00206732,-0.00259423,-0.003499695,-9.85335e-05;-0.001784929,-0.006391531,-0.003424846,-0.006252446,-0.004821027,-0.006904126,-0.010011154,-0.003893562,-0.009551814,-0.013621744,-0.01062083,-0.016740134,-0.092464574,0.684819637,-0.05790102,-0.023195584,-0.018000115,-0.032209473,-0.029627641,-0.008852423,-0.007698879,-0.004310672,-0.006803285,-0.00421233,-0.004791701,-0.008630943,-0.03910451,-0.003666423,-0.001970763,-0.015413772,-0.0148755,-0.007390009,-0.022605878,-0.010744906,-0.000651832;-0.004412382,-0.005724947,-0.002061476,-0.002793273,-0.002519205,-0.00348837,-0.00256182,-0.001160989,-0.002334902,-0.004621448,-0.00433671,-0.005819901,-0.014953003,-0.004881743,0.694968018,-0.005238227,-0.002343755,-0.004796834,-0.087558061,-0.005578868,-0.003981161,-0.001469669,-0.036391917,-0.040763823,-0.050506006,-0.012038651,-0.004063601,-0.001095536,-0.000887212,-0.004248509,-0.017119608,-0.001826159,-0.001318945,-0.006473424,-0.000192978;-0.000821098,-0.000854983,-0.000976825,-0.004350566,-0.002706388,-0.004479079,-0.003662124,-0.00051502,-0.001656101,-0.00257464,-0.002905776,-0.009181243,-0.003747354,-0.002572561,-0.004906835,0.955632787,-0.001167016,-0.005007996,-0.001943785,-0.00121626,-0.001428443,-0.002322826,-0.001933283,-0.000694995,-0.001534928,-0.001474917,-0.000969247,-0.000858368,-0.001188181,-0.001778617,-0.00375793,-0.002919186,-0.002876406,-0.004992274,-0.002110646;-0.010822679,-0.029965175,-0.013154647,-0.018092651,-0.008332114,-0.017132446,-0.023161227,-0.01388678,-0.025837972,-0.020827446,-0.039016336,-0.028101005,-0.011398281,-0.008039791,-0.008696588,-0.00900837,0.896458287,-0.00621072,-0.010118242,-0.006443083,-0.013631286,-0.023112413,-0.014916733,-0.003595012,-0.005215312,-0.014299748,-0.009310089,-0.004229395,-0.008486968,-0.005722823,-0.015320751,-0.020341505,-0.012160238,-0.015577836,-0.000201872;-0.003634883,-0.007738657,-0.002423251,-0.002785751,-0.001652996,-0.003273321,-0.003506142,-0.002279493,-0.0033573,-0.002900607,-0.007040227,-0.004173032,-0.003146405,-0.002227792,-0.002013348,-0.002513542,-0.019784261,0.951294172,-0.004411403,-0.003947675,-0.004881287,-0.005887801,-0.009566505,-0.002594567,-0.003299916,-0.012588656,-0.010831968,-0.004985452,-0.039675555,-0.004828728,-0.018485539,-0.013954289,-0.006260958,-0.009788323,-0.000458219;-0.004917101,-0.003639499,-0.006516618,-0.005480613,-0.00680912,-0.006118083,-0.004940025,-0.002354659,-0.005870542,-0.00616409,-0.007202421,-0.005783303,-0.004971916,-0.003743028,-0.004820822,-0.006139936,-0.008117898,-0.007068392,0.989378492,-0.004054621,-0.004060383,-0.004853991,-0.016203501,-0.002142538,-0.004083179,-0.007277926,-0.003673284,-0.002515703,-0.001815554,-0.005638359,-0.004448877,-0.002833361,-0.003560522,-0.006057583,-2.19605e-05;-0.033195497,-0.022445743,-0.064699828,-0.052223238,-0.062931043,-0.055045618,-0.050399243,-0.041648171,-0.047226552,-0.04842297,-0.041490856,-0.045104693,-0.046125518,-0.038753564,-0.043995129,-0.044094728,-0.023218615,-0.0411012,-0.034217009,0.975390168,-0.01278873,-0.046474086,-0.021304286,-0.020053482,-0.020295909,-0.019414648,-0.010531959,-0.003876464,-0.003337537,-0.012799982,-0.018901137,-0.010775193,-0.025945813,-0.016353218,-0.000153094;-0.017079169,-0.008898434,-0.030689487,-0.026934384,-0.037137109,-0.020938484,-0.01881166,-0.010909876,-0.021674813,-0.020066508,-0.019160264,-0.01638824,-0.016613344,-0.012734824,-0.018519627,-0.024786006,-0.00860239,-0.031257298,-0.015558038,-0.006502507,0.992618511,-0.025244345,-0.013970991,-0.007868675,-0.009423839,-0.008691178,-0.008108113,-0.004352269,-0.002895564,-0.008947672,-0.008653562,-0.005908956,-0.011628319,-0.010682686,-0.000251602;-0.001359482,-0.003204752,-0.003766752,-0.004235921,-0.004262058,-0.004769139,-0.0060352,-0.001037038,-0.004200233,-0.005457483,-0.005274976,-0.004464899,-0.00568673,-0.004596963,-0.00273689,-0.003762765,-0.004022706,-0.004602309,-0.005693056,-0.008257769,-0.005709773,0.989536881,-0.007907126,-0.004317084,-0.022471256,-0.017459807,-0.009683465,-0.009768567,-0.002460581,-0.014141207,-0.011345095,-0.006796557,-0.008668551,-0.011662387,-6.9635e-05;-0.013614935,-0.020554784,-0.023297841,-0.019103039,-0.0201975,-0.023806147,-0.019492301,-0.035494387,-0.017876104,-0.017164366,-0.033478243,-0.01749663,-0.01231433,-0.008244264,-0.011226775,-0.017737657,-0.019562909,-0.016599592,-0.01389763,-0.019397003,-0.012021264,-0.009261147,0.954790615,-0.034029369,-0.012590718,-0.055330065,-0.008793747,-0.005225503,-0.001594578,-0.005684926,-0.011114205,-0.010318264,-0.006940498,-0.009032651,-0.000218592;-0.003489304,-0.005946937,-0.004854798,-0.004806605,-0.005799893,-0.00780699,-0.003891591,-0.00551181,-0.003507662,-0.003834389,-0.009490828,-0.006306403,-0.003507389,-0.002385968,-0.002221571,-0.003189623,-0.003221971,-0.004431649,-0.001207688,-0.003944835,-0.001981896,-0.00169936,-0.00329176,0.880785424,-0.002864003,-0.005300579,-0.000836337,-0.000495629,-0.000907016,-0.001087643,-0.001353159,-0.001061648,-0.000514627,-0.001322151,-1.86795e-05;-0.000699556,-0.001882203,-0.001388224,-0.001750691,-0.002627767,-0.001884025,-0.002490538,-0.000576455,-0.001673053,-0.00189862,-0.00163891,-0.001358245,-0.002056494,-0.001790097,-0.001391078,-0.001335811,-0.000799612,-0.001097338,-0.001720253,-0.002989521,-0.001487667,-0.001250308,-0.002794519,-0.007427011,0.968621591,-0.017131387,-0.003663525,-0.002961861,-0.000456989,-0.004200666,-0.004595828,-0.002169292,-0.00125995,-0.004013249,-1.58223e-05;-0.003308566,-0.005353437,-0.006646383,-0.00393591,-0.004637737,-0.006909593,-0.00941968,-0.006479274,-0.004943185,-0.00525752,-0.008283731,-0.005156287,-0.004503252,-0.003187606,-0.004135203,-0.00435577,-0.004015592,-0.005501037,-0.010673851,-0.02012254,-0.011235215,-0.007598594,-0.040302102,-0.113733278,-0.095103768,0.896913511,-0.004424784,-0.003306431,-0.000902015,-0.005016414,-0.004956665,-0.002428776,-0.003130738,-0.005790388,-1.69145e-05;-0.002919933,-0.00560112,-0.004779369,-0.006193433,-0.00702229,-0.006165715,-0.013145267,-0.002637917,-0.008193697,-0.006383487,-0.007094393,-0.006509947,-0.007640094,-0.007526468,-0.00453772,-0.008279227,-0.006189937,-0.012446661,-0.015714896,-0.020764446,-0.021839114,-0.014434768,-0.016702133,-0.017352601,-0.025623596,-0.025180735,0.87239695,-0.028302711,-0.004981967,-0.026012977,-0.022952396,-0.010393603,-0.01288272,-0.022343714,-0.000525984;-0.019515889,-0.02695759,-0.015138035,-0.021081135,-0.015152556,-0.017084191,-0.0230849,-0.011128046,-0.01754497,-0.016856046,-0.023094578,-0.017981311,-0.017686167,-0.013764257,-0.013242801,-0.025046665,-0.022287392,-0.021658674,-0.021566421,-0.035188902,-0.0360044,-0.02557575,-0.047936667,-0.037261657,-0.037576235,-0.028882821,-0.022305637,0.797899626,-0.076805255,-0.038034358,-0.021711323,-0.013825994,-0.024210764,-0.042821941,-0.004686462;-0.004586971,-0.00631436,-0.004621509,-0.005198486,-0.005149948,-0.006117705,-0.009707608,-0.001941458,-0.004603443,-0.006144591,-0.005107521,-0.0053335,-0.005890284,-0.004451898,-0.004713052,-0.00667042,-0.004694924,-0.010316405,-0.023394655,-0.022124817,-0.041159757,-0.028926775,-0.00930485,-0.017532155,-0.013257446,-0.022765048,-0.016315458,-0.023025509,0.970599511,-0.024686465,-0.014704042,-0.01982276,-0.034247703,-0.026420105,-1.11853e-06;-0.011480006,-0.029206128,-0.037855939,-0.026901291,-0.021975413,-0.026630525,-0.062815969,-0.012045042,-0.066218809,-0.038061237,-0.034434791,-0.03032378,-0.043936583,-0.048289338,-0.039172057,-0.029784621,-0.03317107,-0.053255409,-0.051307037,-0.05485969,-0.060200136,-0.04234011,-0.04441587,-0.032366755,-0.085697652,-0.066481424,-0.068871654,-0.09734752,-0.033096768,0.858610603,-0.080551063,-0.032856771,-0.058159064,-0.075751939,-0.002617846;-0.001498021,-0.0033279,-0.001788463,-0.001129164,-0.00077522,-0.003125284,-0.003217116,-0.000725439,-0.00272031,-0.001985674,-0.002363793,-0.002486756,-0.001129604,-0.00105827,-0.001180686,-0.001850203,-0.004958206,-0.001545098,-0.002398689,-0.001478138,-0.002667042,-0.003654368,-0.003080082,-0.005953301,-0.009617785,-0.003468509,-0.002968703,-0.001520107,-0.00299225,-0.002752024,0.992549204,-0.004422996,-0.004539823,-0.008387935,-4.47473e-06;-0.00051311,-0.000425779,-0.000473136,-0.000424244,-0.000488117,-0.000395908,-0.000684568,-0.000371784,-0.00097442,-0.000678854,-0.00070275,-0.000634745,-0.000831845,-0.000763514,-0.000670291,-0.000455483,-0.000771864,-0.000506516,-0.000813492,-0.000751655,-0.000960005,-0.000596017,-0.0011136,-0.000390144,-0.002004045,-0.001223123,-0.001631231,-0.001210716,-0.000308708,-0.002285399,-0.004283269,0.988389884,-0.001144506,-0.001574455,-3.27316e-06;-0.001343679,-0.000374161,-0.000475534,-0.000402072,-0.000992738,-0.000431161,-0.000430067,-0.000167401,-0.000523693,-0.000398995,-0.000483237,-0.000386851,-0.00058304,-0.000370009,-0.000361021,-0.000509022,-0.000345452,-0.000419761,-0.000561167,-0.00062427,-0.000453612,-0.001055666,-0.000655319,-0.000343884,-0.00041124,-0.000603165,-0.000707389,-0.000489352,-9.62737e-05,-0.000712889,-0.004803472,-0.00146999,0.974389171,-0.001137175,-1.22023e-07;-0.002622548,-0.006096264,-0.005305623,-0.00489638,-0.006315198,-0.005412929,-0.012846991,-0.002252594,-0.007518848,-0.005454905,-0.005770328,-0.005859296,-0.005273652,-0.004054461,-0.004262336,-0.005023497,-0.005474505,-0.006026262,-0.007662987,-0.007884059,-0.008512625,-0.013408505,-0.010294731,-0.005207711,-0.008010522,-0.011131229,-0.020123275,-0.00983748,-0.007369146,-0.025759873,-0.016762229,-0.010887018,-0.013684347,0.921643845,-0.002180873;-1.40602e-05,-2.24296e-05,-2.4764e-05,-5.75753e-05,-1.70001e-05,-3.04476e-05,-3.74455e-05,-8.13903e-06,-1.92898e-05,-2.43695e-05,-2.01898e-05,-1.81431e-05,-2.73016e-05,-1.53573e-05,-7.15171e-05,-1.18537e-05,-5.84632e-06,-7.03975e-05,-5.89372e-05,-1.16449e-05,-3.91367e-05,-5.29344e-05,-7.64027e-05,-2.63495e-05,-2.58013e-05,-1.91726e-05,-4.07749e-05,-5.50902e-05,-0.000232072,-6.80072e-05,-7.22623e-05,-3.80176e-05,-5.4143e-05,-0.00011798,0.999886489;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    
    return xr.DataArray(
        data=[[
            8.71748522e-01, -8.02303000e-04, -2.56680270e-01, -4.26759000e-02, -4.24833530e-02,
            -1.24470047e-01, -1.28684910e-02, -1.94582100e-03, -5.33110400e-03, -1.32032440e-02,
            -5.64509000e-04, -2.52567000e-04, -2.65907000e-04, -1.72078000e-04, -1.50330000e-04,
            -9.71301700e-03, -4.72600000e-04, -8.13610600e-03, -4.95083000e-04, -2.97151100e-03,
            -2.56921500e-03, -3.87911500e-02, -1.61640900e-03, -1.17875000e-03, -2.89130000e-04,
            -4.03185100e-03, -2.62692000e-04, -1.39846000e-04, -3.60426000e-04, -6.95940000e-04,
            -2.17600800e-03, -2.26295600e-03, -2.16439500e-03, -2.43113000e-03, -1.75574470e-02
        ],
              [
                  -3.32194000e-03, 9.17765794e-01, -2.67074300e-03, -2.43971100e-03,
                  -1.26203900e-03, -4.13203900e-03, -4.69810900e-03, -4.66175612e-01,
                  -3.34491200e-02, -3.32369800e-03, -6.69594540e-02, -4.75339290e-02,
                  -3.01725900e-03, -1.22849300e-03, -1.24480800e-03, -5.44923200e-03,
                  -1.13529653e-01, -1.76229880e-02, -4.90317000e-04, -6.58781000e-04,
                  -1.18091200e-03, -1.76269300e-03, -4.44899700e-03, -2.72816100e-03,
                  -2.36512700e-03, -1.74729900e-03, -5.60834000e-04, -2.64762000e-04,
                  -1.28854300e-03, -8.37147000e-04, -3.08853900e-03, -2.89221900e-03,
                  -1.09291300e-03, -2.73859800e-03, -6.02880180e-02
              ],
              [
                  -5.65114770e-02, -7.62079000e-04, 8.49354659e-01, -3.34235200e-03,
                  -8.72385390e-02, -1.55732300e-03, -2.96378400e-03, -1.08170200e-03,
                  -1.01178540e-02, -2.95153500e-03, -1.95463100e-03, -1.20464500e-03,
                  -1.23883900e-03, -1.06121300e-03, -9.44560000e-04, -2.33036800e-03,
                  -8.13332000e-04, -1.03660100e-03, -1.61463500e-03, -4.78902300e-03,
                  -4.53473500e-03, -1.50432337e-01, -1.35537900e-03, -6.08859000e-03,
                  -3.40722200e-03, -1.62817300e-03, -1.41967500e-03, -6.82969000e-04,
                  -2.36472000e-04, -1.67090100e-03, -7.21670200e-03, -8.04687600e-03,
                  -1.32670670e-02, -6.67873200e-03, -2.99125300e-03
              ],
              [
                  -1.98340400e-03, -1.02539400e-03, -1.58340000e-03, 6.90839270e-01,
                  -5.21977980e-02, -3.44990300e-03, -5.13589600e-03, -5.17824000e-04,
                  -3.29715500e-03, -1.18119250e-02, -3.77385700e-03, -1.65243700e-03,
                  -2.45568500e-03, -1.87360400e-03, -5.40423100e-03, -2.08679020e-02,
                  -5.80324000e-04, -2.24290800e-03, -1.37783200e-03, -2.42818400e-03,
                  -2.94633500e-03, -2.67015400e-03, -1.66837800e-03, -2.21542700e-03,
                  -1.33451500e-03, -1.49340700e-03, -7.61255000e-04, -4.54390000e-04,
                  -2.48974000e-04, -1.17287500e-03, -3.00941400e-03, -9.38677000e-04,
                  -2.87904100e-03, -5.47380500e-03, -1.04462000e-04
              ],
              [
                  -1.37004000e-04, -8.05120000e-05, -1.26554000e-04, -7.74751800e-03,
                  7.87508376e-01, -4.58159000e-04, -5.10193000e-04, -4.43231000e-05,
                  -2.16748000e-04, -1.17198100e-03, -3.16792000e-04, -1.80410000e-04,
                  -2.17237000e-04, -2.49284000e-04, -1.44764000e-03, -4.22544100e-03,
                  -1.10859000e-04, -1.20735000e-04, -3.96394000e-04, -4.05119000e-04,
                  -3.02006000e-04, -1.22890000e-04, -1.90731000e-04, -1.31819000e-04,
                  -1.26042000e-04, -1.50889000e-04, -2.44135000e-04, -3.16055000e-05,
                  -1.06295000e-05, -1.08215000e-04, -4.17681000e-04, -1.00702000e-04,
                  -1.04411000e-04, -3.85726000e-04, -1.74238000e-06
              ],
              [
                  -1.94547100e-03, -1.53071000e-03, -1.66213100e-03, -1.23041100e-03,
                  -1.71112400e-03, 7.77953834e-01, -1.04227650e-02, -2.55988000e-04,
                  -1.48333000e-03, -3.34074400e-03, -6.49399100e-03, -3.12936600e-03,
                  -2.93076300e-03, -1.56011200e-03, -2.78347800e-03, -7.07923560e-02,
                  -8.67246000e-04, -3.24768460e-02, -7.78512000e-04, -1.44826800e-03,
                  -1.23942500e-03, -2.31339400e-03, -1.17710500e-03, -5.54803000e-04,
                  -4.07349000e-04, -2.84945900e-03, -6.93898000e-04, -3.46182000e-04,
                  -1.87363000e-03, -9.13146000e-04, -1.59978000e-03, -2.19571400e-03,
                  -1.07239400e-03, -2.72011800e-03, -9.64006000e-05
              ],
              [
                  -2.52337600e-03, -2.73276100e-03, -2.40862590e-02, -1.10697230e-02,
                  -1.38687430e-02, -1.29966260e-02, 7.67410711e-01, -1.26319600e-03,
                  -1.61222870e-02, -1.65689350e-02, -1.95180140e-02, -5.28792200e-03,
                  -8.13990500e-03, -1.04797490e-02, -4.70477200e-03, -1.99337120e-02,
                  -3.12849600e-03, -4.33303200e-03, -7.54508400e-03, -1.29497450e-02,
                  -1.19816130e-02, -8.41454900e-03, -6.04787400e-03, -2.95376100e-03,
                  -5.30732700e-03, -1.31828380e-02, -1.11385330e-02, -1.30264470e-02,
                  -2.11870100e-03, -2.07015330e-02, -1.85981700e-02, -1.78997930e-02,
                  -8.68849200e-03, -2.46048340e-02, -1.73880000e-04
              ],
              [
                  -1.21573040e-02, -9.10531400e-03, -3.04697800e-03, -5.07561300e-03,
                  -3.74425000e-03, -4.76922700e-03, -4.35797200e-03, 9.61798473e-01,
                  -3.39840570e-02, -8.17941400e-03, -1.71384030e-02, -1.02829340e-02,
                  -3.71982000e-03, -2.07222200e-03, -1.81411000e-03, -3.55665100e-03,
                  -1.85488950e-02, -1.20683890e-02, -3.96800100e-03, -4.99577400e-03,
                  -3.78056900e-03, -3.35549100e-03, -4.92104870e-02, -7.24765890e-02,
                  -6.39565230e-02, -1.57864180e-02, -3.17990800e-03, -1.11410500e-03,
                  -9.21764000e-04, -4.41494700e-03, -8.35064300e-03, -2.94373800e-03,
                  -2.81665200e-03, -5.07439900e-03, -3.48911000e-05
              ],
              [
                  -3.83364240e-02, -1.05225340e-02, -9.99355000e-03, -6.98951300e-02,
                  -3.75624900e-02, -3.33928600e-02, -3.54118890e-02, -1.33670750e-02,
                  7.62568528e-01, -2.05155668e-01, -3.48999270e-02, -1.59331900e-02,
                  -1.14403060e-02, -1.72954430e-02, -1.18895920e-02, -2.56873810e-02,
                  -6.46313300e-03, -1.08241100e-02, -6.28254700e-03, -3.16639100e-03,
                  -2.22327000e-03, -4.50257600e-03, -3.23309000e-03, -4.40826200e-03,
                  -3.28092700e-03, -3.83292600e-03, -1.40199500e-03, -8.07658000e-04,
                  -1.30358800e-03, -4.75064000e-03, -1.00089100e-02, -3.80054200e-03,
                  -6.32926920e-02, -9.94818300e-03, -1.43276000e-04
              ],
              [
                  -5.04272100e-03, -6.34016900e-03, -1.76829380e-02, -1.03675410e-02,
                  -3.60742100e-02, -9.09816900e-03, -1.58804390e-02, -2.57975800e-03,
                  -1.81464690e-02, 8.67111406e-01, -1.05183570e-02, -7.11050200e-03,
                  -2.69913260e-02, -2.45443220e-02, -3.62190780e-02, -3.28039210e-02,
                  -2.41965200e-03, -1.84336740e-02, -1.65728210e-02, -4.54399900e-03,
                  -5.11787500e-03, -4.00521800e-03, -1.02388110e-02, -3.05991600e-03,
                  -3.14877000e-03, -6.06173800e-03, -3.40252400e-03, -5.98153000e-04,
                  -9.94060000e-04, -2.78973300e-03, -3.29233300e-03, -1.05112300e-03,
                  -5.05447600e-03, -3.81921700e-03, -2.64243000e-05
              ],
              [
                  -1.95863600e-03, -4.55900200e-03, -5.93824400e-03, -2.27687700e-03,
                  -1.65278600e-03, -7.61714200e-03, -1.19644100e-03, -1.79981700e-03,
                  -5.72934200e-03, -6.10429200e-03, 8.76847359e-01, -1.04859170e-02,
                  -5.22872700e-03, -1.06343660e-02, -6.93464300e-03, -6.61289000e-03,
                  -1.80079000e-03, -8.01263430e-02, -3.03667400e-03, -1.20353500e-03,
                  -1.01262400e-03, -3.31612000e-03, -1.28933400e-03, -6.08874000e-04,
                  -5.66356000e-04, -1.31297100e-03, -1.18723600e-03, -1.51955000e-04,
                  -1.53507400e-03, -9.70465000e-04, -1.33774900e-03, -1.66046100e-03,
                  -1.93602200e-03, -1.87401000e-03, -2.18944000e-05
              ],
              [
                  -4.45348300e-03, -2.11623880e-02, -1.28311610e-02, -5.68115800e-03,
                  -1.01335150e-02, -2.44299490e-02, -8.70371700e-03, -5.61301800e-03,
                  -1.36680060e-02, -2.43789880e-02, -3.20334650e-02, 6.83268302e-01,
                  -1.61803666e-01, -6.28867850e-02, -9.29603370e-02, -7.59513640e-02,
                  -7.03531500e-03, -8.87433030e-02, -1.74194720e-02, -3.93979200e-03,
                  -3.53993900e-03, -4.26510700e-03, -6.70576000e-03, -6.47188600e-03,
                  -4.73943500e-03, -6.93764200e-03, -3.88620600e-03, -6.36467000e-04,
                  -2.02614800e-03, -3.63643400e-03, -4.62910200e-03, -1.73618300e-03,
                  -2.17874800e-03, -4.32337700e-03, -1.83784000e-04
              ],
              [
                  -6.80399900e-03, -1.56523790e-02, -3.87610800e-03, -8.34418000e-03,
                  -5.87487800e-03, -8.44999800e-03, -6.49771500e-03, -5.65669000e-03,
                  -6.96159900e-03, -1.15141510e-02, -1.73442180e-02, -1.83043550e-02,
                  8.68813017e-01, -1.48749720e-02, -3.27397680e-02, -9.43820400e-03,
                  -8.69624400e-03, -1.74760870e-02, -2.22262200e-02, -3.69117100e-03,
                  -2.53544100e-03, -2.07649600e-03, -5.55158100e-03, -9.47585700e-03,
                  -5.30898000e-03, -5.36304700e-03, -2.88183800e-03, -9.36743000e-04,
                  -1.36902900e-03, -2.92712300e-03, -5.93672200e-03, -2.06732000e-03,
                  -2.59423000e-03, -3.49969500e-03, -9.85335000e-05
              ],
              [
                  -1.78492900e-03, -6.39153100e-03, -3.42484600e-03, -6.25244600e-03,
                  -4.82102700e-03, -6.90412600e-03, -1.00111540e-02, -3.89356200e-03,
                  -9.55181400e-03, -1.36217440e-02, -1.06208300e-02, -1.67401340e-02,
                  -9.24645740e-02, 6.84819637e-01, -5.79010200e-02, -2.31955840e-02,
                  -1.80001150e-02, -3.22094730e-02, -2.96276410e-02, -8.85242300e-03,
                  -7.69887900e-03, -4.31067200e-03, -6.80328500e-03, -4.21233000e-03,
                  -4.79170100e-03, -8.63094300e-03, -3.91045100e-02, -3.66642300e-03,
                  -1.97076300e-03, -1.54137720e-02, -1.48755000e-02, -7.39000900e-03,
                  -2.26058780e-02, -1.07449060e-02, -6.51832000e-04
              ],
              [
                  -4.41238200e-03, -5.72494700e-03, -2.06147600e-03, -2.79327300e-03,
                  -2.51920500e-03, -3.48837000e-03, -2.56182000e-03, -1.16098900e-03,
                  -2.33490200e-03, -4.62144800e-03, -4.33671000e-03, -5.81990100e-03,
                  -1.49530030e-02, -4.88174300e-03, 6.94968018e-01, -5.23822700e-03,
                  -2.34375500e-03, -4.79683400e-03, -8.75580610e-02, -5.57886800e-03,
                  -3.98116100e-03, -1.46966900e-03, -3.63919170e-02, -4.07638230e-02,
                  -5.05060060e-02, -1.20386510e-02, -4.06360100e-03, -1.09553600e-03,
                  -8.87212000e-04, -4.24850900e-03, -1.71196080e-02, -1.82615900e-03,
                  -1.31894500e-03, -6.47342400e-03, -1.92978000e-04
              ],
              [
                  -8.21098000e-04, -8.54983000e-04, -9.76825000e-04, -4.35056600e-03,
                  -2.70638800e-03, -4.47907900e-03, -3.66212400e-03, -5.15020000e-04,
                  -1.65610100e-03, -2.57464000e-03, -2.90577600e-03, -9.18124300e-03,
                  -3.74735400e-03, -2.57256100e-03, -4.90683500e-03, 9.55632787e-01,
                  -1.16701600e-03, -5.00799600e-03, -1.94378500e-03, -1.21626000e-03,
                  -1.42844300e-03, -2.32282600e-03, -1.93328300e-03, -6.94995000e-04,
                  -1.53492800e-03, -1.47491700e-03, -9.69247000e-04, -8.58368000e-04,
                  -1.18818100e-03, -1.77861700e-03, -3.75793000e-03, -2.91918600e-03,
                  -2.87640600e-03, -4.99227400e-03, -2.11064600e-03
              ],
              [
                  -1.08226790e-02, -2.99651750e-02, -1.31546470e-02, -1.80926510e-02,
                  -8.33211400e-03, -1.71324460e-02, -2.31612270e-02, -1.38867800e-02,
                  -2.58379720e-02, -2.08274460e-02, -3.90163360e-02, -2.81010050e-02,
                  -1.13982810e-02, -8.03979100e-03, -8.69658800e-03, -9.00837000e-03,
                  8.96458287e-01, -6.21072000e-03, -1.01182420e-02, -6.44308300e-03,
                  -1.36312860e-02, -2.31124130e-02, -1.49167330e-02, -3.59501200e-03,
                  -5.21531200e-03, -1.42997480e-02, -9.31008900e-03, -4.22939500e-03,
                  -8.48696800e-03, -5.72282300e-03, -1.53207510e-02, -2.03415050e-02,
                  -1.21602380e-02, -1.55778360e-02, -2.01872000e-04
              ],
              [
                  -3.63488300e-03, -7.73865700e-03, -2.42325100e-03, -2.78575100e-03,
                  -1.65299600e-03, -3.27332100e-03, -3.50614200e-03, -2.27949300e-03,
                  -3.35730000e-03, -2.90060700e-03, -7.04022700e-03, -4.17303200e-03,
                  -3.14640500e-03, -2.22779200e-03, -2.01334800e-03, -2.51354200e-03,
                  -1.97842610e-02, 9.51294172e-01, -4.41140300e-03, -3.94767500e-03,
                  -4.88128700e-03, -5.88780100e-03, -9.56650500e-03, -2.59456700e-03,
                  -3.29991600e-03, -1.25886560e-02, -1.08319680e-02, -4.98545200e-03,
                  -3.96755550e-02, -4.82872800e-03, -1.84855390e-02, -1.39542890e-02,
                  -6.26095800e-03, -9.78832300e-03, -4.58219000e-04
              ],
              [
                  -4.91710100e-03, -3.63949900e-03, -6.51661800e-03, -5.48061300e-03,
                  -6.80912000e-03, -6.11808300e-03, -4.94002500e-03, -2.35465900e-03,
                  -5.87054200e-03, -6.16409000e-03, -7.20242100e-03, -5.78330300e-03,
                  -4.97191600e-03, -3.74302800e-03, -4.82082200e-03, -6.13993600e-03,
                  -8.11789800e-03, -7.06839200e-03, 9.89378492e-01, -4.05462100e-03,
                  -4.06038300e-03, -4.85399100e-03, -1.62035010e-02, -2.14253800e-03,
                  -4.08317900e-03, -7.27792600e-03, -3.67328400e-03, -2.51570300e-03,
                  -1.81555400e-03, -5.63835900e-03, -4.44887700e-03, -2.83336100e-03,
                  -3.56052200e-03, -6.05758300e-03, -2.19605000e-05
              ],
              [
                  -3.31954970e-02, -2.24457430e-02, -6.46998280e-02, -5.22232380e-02,
                  -6.29310430e-02, -5.50456180e-02, -5.03992430e-02, -4.16481710e-02,
                  -4.72265520e-02, -4.84229700e-02, -4.14908560e-02, -4.51046930e-02,
                  -4.61255180e-02, -3.87535640e-02, -4.39951290e-02, -4.40947280e-02,
                  -2.32186150e-02, -4.11012000e-02, -3.42170090e-02, 9.75390168e-01,
                  -1.27887300e-02, -4.64740860e-02, -2.13042860e-02, -2.00534820e-02,
                  -2.02959090e-02, -1.94146480e-02, -1.05319590e-02, -3.87646400e-03,
                  -3.33753700e-03, -1.27999820e-02, -1.89011370e-02, -1.07751930e-02,
                  -2.59458130e-02, -1.63532180e-02, -1.53094000e-04
              ],
              [
                  -1.70791690e-02, -8.89843400e-03, -3.06894870e-02, -2.69343840e-02,
                  -3.71371090e-02, -2.09384840e-02, -1.88116600e-02, -1.09098760e-02,
                  -2.16748130e-02, -2.00665080e-02, -1.91602640e-02, -1.63882400e-02,
                  -1.66133440e-02, -1.27348240e-02, -1.85196270e-02, -2.47860060e-02,
                  -8.60239000e-03, -3.12572980e-02, -1.55580380e-02, -6.50250700e-03,
                  9.92618511e-01, -2.52443450e-02, -1.39709910e-02, -7.86867500e-03,
                  -9.42383900e-03, -8.69117800e-03, -8.10811300e-03, -4.35226900e-03,
                  -2.89556400e-03, -8.94767200e-03, -8.65356200e-03, -5.90895600e-03,
                  -1.16283190e-02, -1.06826860e-02, -2.51602000e-04
              ],
              [
                  -1.35948200e-03, -3.20475200e-03, -3.76675200e-03, -4.23592100e-03,
                  -4.26205800e-03, -4.76913900e-03, -6.03520000e-03, -1.03703800e-03,
                  -4.20023300e-03, -5.45748300e-03, -5.27497600e-03, -4.46489900e-03,
                  -5.68673000e-03, -4.59696300e-03, -2.73689000e-03, -3.76276500e-03,
                  -4.02270600e-03, -4.60230900e-03, -5.69305600e-03, -8.25776900e-03,
                  -5.70977300e-03, 9.89536881e-01, -7.90712600e-03, -4.31708400e-03,
                  -2.24712560e-02, -1.74598070e-02, -9.68346500e-03, -9.76856700e-03,
                  -2.46058100e-03, -1.41412070e-02, -1.13450950e-02, -6.79655700e-03,
                  -8.66855100e-03, -1.16623870e-02, -6.96350000e-05
              ],
              [
                  -1.36149350e-02, -2.05547840e-02, -2.32978410e-02, -1.91030390e-02,
                  -2.01975000e-02, -2.38061470e-02, -1.94923010e-02, -3.54943870e-02,
                  -1.78761040e-02, -1.71643660e-02, -3.34782430e-02, -1.74966300e-02,
                  -1.23143300e-02, -8.24426400e-03, -1.12267750e-02, -1.77376570e-02,
                  -1.95629090e-02, -1.65995920e-02, -1.38976300e-02, -1.93970030e-02,
                  -1.20212640e-02, -9.26114700e-03, 9.54790615e-01, -3.40293690e-02,
                  -1.25907180e-02, -5.53300650e-02, -8.79374700e-03, -5.22550300e-03,
                  -1.59457800e-03, -5.68492600e-03, -1.11142050e-02, -1.03182640e-02,
                  -6.94049800e-03, -9.03265100e-03, -2.18592000e-04
              ],
              [
                  -3.48930400e-03, -5.94693700e-03, -4.85479800e-03, -4.80660500e-03,
                  -5.79989300e-03, -7.80699000e-03, -3.89159100e-03, -5.51181000e-03,
                  -3.50766200e-03, -3.83438900e-03, -9.49082800e-03, -6.30640300e-03,
                  -3.50738900e-03, -2.38596800e-03, -2.22157100e-03, -3.18962300e-03,
                  -3.22197100e-03, -4.43164900e-03, -1.20768800e-03, -3.94483500e-03,
                  -1.98189600e-03, -1.69936000e-03, -3.29176000e-03, 8.80785424e-01,
                  -2.86400300e-03, -5.30057900e-03, -8.36337000e-04, -4.95629000e-04,
                  -9.07016000e-04, -1.08764300e-03, -1.35315900e-03, -1.06164800e-03,
                  -5.14627000e-04, -1.32215100e-03, -1.86795000e-05
              ],
              [
                  -6.99556000e-04, -1.88220300e-03, -1.38822400e-03, -1.75069100e-03,
                  -2.62776700e-03, -1.88402500e-03, -2.49053800e-03, -5.76455000e-04,
                  -1.67305300e-03, -1.89862000e-03, -1.63891000e-03, -1.35824500e-03,
                  -2.05649400e-03, -1.79009700e-03, -1.39107800e-03, -1.33581100e-03,
                  -7.99612000e-04, -1.09733800e-03, -1.72025300e-03, -2.98952100e-03,
                  -1.48766700e-03, -1.25030800e-03, -2.79451900e-03, -7.42701100e-03,
                  9.68621591e-01, -1.71313870e-02, -3.66352500e-03, -2.96186100e-03,
                  -4.56989000e-04, -4.20066600e-03, -4.59582800e-03, -2.16929200e-03,
                  -1.25995000e-03, -4.01324900e-03, -1.58223000e-05
              ],
              [
                  -3.30856600e-03, -5.35343700e-03, -6.64638300e-03, -3.93591000e-03,
                  -4.63773700e-03, -6.90959300e-03, -9.41968000e-03, -6.47927400e-03,
                  -4.94318500e-03, -5.25752000e-03, -8.28373100e-03, -5.15628700e-03,
                  -4.50325200e-03, -3.18760600e-03, -4.13520300e-03, -4.35577000e-03,
                  -4.01559200e-03, -5.50103700e-03, -1.06738510e-02, -2.01225400e-02,
                  -1.12352150e-02, -7.59859400e-03, -4.03021020e-02, -1.13733278e-01,
                  -9.51037680e-02, 8.96913511e-01, -4.42478400e-03, -3.30643100e-03,
                  -9.02015000e-04, -5.01641400e-03, -4.95666500e-03, -2.42877600e-03,
                  -3.13073800e-03, -5.79038800e-03, -1.69145000e-05
              ],
              [
                  -2.91993300e-03, -5.60112000e-03, -4.77936900e-03, -6.19343300e-03,
                  -7.02229000e-03, -6.16571500e-03, -1.31452670e-02, -2.63791700e-03,
                  -8.19369700e-03, -6.38348700e-03, -7.09439300e-03, -6.50994700e-03,
                  -7.64009400e-03, -7.52646800e-03, -4.53772000e-03, -8.27922700e-03,
                  -6.18993700e-03, -1.24466610e-02, -1.57148960e-02, -2.07644460e-02,
                  -2.18391140e-02, -1.44347680e-02, -1.67021330e-02, -1.73526010e-02,
                  -2.56235960e-02, -2.51807350e-02, 8.72396950e-01, -2.83027110e-02,
                  -4.98196700e-03, -2.60129770e-02, -2.29523960e-02, -1.03936030e-02,
                  -1.28827200e-02, -2.23437140e-02, -5.25984000e-04
              ],
              [
                  -1.95158890e-02, -2.69575900e-02, -1.51380350e-02, -2.10811350e-02,
                  -1.51525560e-02, -1.70841910e-02, -2.30849000e-02, -1.11280460e-02,
                  -1.75449700e-02, -1.68560460e-02, -2.30945780e-02, -1.79813110e-02,
                  -1.76861670e-02, -1.37642570e-02, -1.32428010e-02, -2.50466650e-02,
                  -2.22873920e-02, -2.16586740e-02, -2.15664210e-02, -3.51889020e-02,
                  -3.60044000e-02, -2.55757500e-02, -4.79366670e-02, -3.72616570e-02,
                  -3.75762350e-02, -2.88828210e-02, -2.23056370e-02, 7.97899626e-01,
                  -7.68052550e-02, -3.80343580e-02, -2.17113230e-02, -1.38259940e-02,
                  -2.42107640e-02, -4.28219410e-02, -4.68646200e-03
              ],
              [
                  -4.58697100e-03, -6.31436000e-03, -4.62150900e-03, -5.19848600e-03,
                  -5.14994800e-03, -6.11770500e-03, -9.70760800e-03, -1.94145800e-03,
                  -4.60344300e-03, -6.14459100e-03, -5.10752100e-03, -5.33350000e-03,
                  -5.89028400e-03, -4.45189800e-03, -4.71305200e-03, -6.67042000e-03,
                  -4.69492400e-03, -1.03164050e-02, -2.33946550e-02, -2.21248170e-02,
                  -4.11597570e-02, -2.89267750e-02, -9.30485000e-03, -1.75321550e-02,
                  -1.32574460e-02, -2.27650480e-02, -1.63154580e-02, -2.30255090e-02,
                  9.70599511e-01, -2.46864650e-02, -1.47040420e-02, -1.98227600e-02,
                  -3.42477030e-02, -2.64201050e-02, -1.11853000e-06
              ],
              [
                  -1.14800060e-02, -2.92061280e-02, -3.78559390e-02, -2.69012910e-02,
                  -2.19754130e-02, -2.66305250e-02, -6.28159690e-02, -1.20450420e-02,
                  -6.62188090e-02, -3.80612370e-02, -3.44347910e-02, -3.03237800e-02,
                  -4.39365830e-02, -4.82893380e-02, -3.91720570e-02, -2.97846210e-02,
                  -3.31710700e-02, -5.32554090e-02, -5.13070370e-02, -5.48596900e-02,
                  -6.02001360e-02, -4.23401100e-02, -4.44158700e-02, -3.23667550e-02,
                  -8.56976520e-02, -6.64814240e-02, -6.88716540e-02, -9.73475200e-02,
                  -3.30967680e-02, 8.58610603e-01, -8.05510630e-02, -3.28567710e-02,
                  -5.81590640e-02, -7.57519390e-02, -2.61784600e-03
              ],
              [
                  -1.49802100e-03, -3.32790000e-03, -1.78846300e-03, -1.12916400e-03,
                  -7.75220000e-04, -3.12528400e-03, -3.21711600e-03, -7.25439000e-04,
                  -2.72031000e-03, -1.98567400e-03, -2.36379300e-03, -2.48675600e-03,
                  -1.12960400e-03, -1.05827000e-03, -1.18068600e-03, -1.85020300e-03,
                  -4.95820600e-03, -1.54509800e-03, -2.39868900e-03, -1.47813800e-03,
                  -2.66704200e-03, -3.65436800e-03, -3.08008200e-03, -5.95330100e-03,
                  -9.61778500e-03, -3.46850900e-03, -2.96870300e-03, -1.52010700e-03,
                  -2.99225000e-03, -2.75202400e-03, 9.92549204e-01, -4.42299600e-03,
                  -4.53982300e-03, -8.38793500e-03, -4.47473000e-06
              ],
              [
                  -5.13110000e-04, -4.25779000e-04, -4.73136000e-04, -4.24244000e-04,
                  -4.88117000e-04, -3.95908000e-04, -6.84568000e-04, -3.71784000e-04,
                  -9.74420000e-04, -6.78854000e-04, -7.02750000e-04, -6.34745000e-04,
                  -8.31845000e-04, -7.63514000e-04, -6.70291000e-04, -4.55483000e-04,
                  -7.71864000e-04, -5.06516000e-04, -8.13492000e-04, -7.51655000e-04,
                  -9.60005000e-04, -5.96017000e-04, -1.11360000e-03, -3.90144000e-04,
                  -2.00404500e-03, -1.22312300e-03, -1.63123100e-03, -1.21071600e-03,
                  -3.08708000e-04, -2.28539900e-03, -4.28326900e-03, 9.88389884e-01,
                  -1.14450600e-03, -1.57445500e-03, -3.27316000e-06
              ],
              [
                  -1.34367900e-03, -3.74161000e-04, -4.75534000e-04, -4.02072000e-04,
                  -9.92738000e-04, -4.31161000e-04, -4.30067000e-04, -1.67401000e-04,
                  -5.23693000e-04, -3.98995000e-04, -4.83237000e-04, -3.86851000e-04,
                  -5.83040000e-04, -3.70009000e-04, -3.61021000e-04, -5.09022000e-04,
                  -3.45452000e-04, -4.19761000e-04, -5.61167000e-04, -6.24270000e-04,
                  -4.53612000e-04, -1.05566600e-03, -6.55319000e-04, -3.43884000e-04,
                  -4.11240000e-04, -6.03165000e-04, -7.07389000e-04, -4.89352000e-04,
                  -9.62737000e-05, -7.12889000e-04, -4.80347200e-03, -1.46999000e-03,
                  9.74389171e-01, -1.13717500e-03, -1.22023000e-07
              ],
              [
                  -2.62254800e-03, -6.09626400e-03, -5.30562300e-03, -4.89638000e-03,
                  -6.31519800e-03, -5.41292900e-03, -1.28469910e-02, -2.25259400e-03,
                  -7.51884800e-03, -5.45490500e-03, -5.77032800e-03, -5.85929600e-03,
                  -5.27365200e-03, -4.05446100e-03, -4.26233600e-03, -5.02349700e-03,
                  -5.47450500e-03, -6.02626200e-03, -7.66298700e-03, -7.88405900e-03,
                  -8.51262500e-03, -1.34085050e-02, -1.02947310e-02, -5.20771100e-03,
                  -8.01052200e-03, -1.11312290e-02, -2.01232750e-02, -9.83748000e-03,
                  -7.36914600e-03, -2.57598730e-02, -1.67622290e-02, -1.08870180e-02,
                  -1.36843470e-02, 9.21643845e-01, -2.18087300e-03
              ],
              [
                  -1.40602000e-05, -2.24296000e-05, -2.47640000e-05, -5.75753000e-05,
                  -1.70001000e-05, -3.04476000e-05, -3.74455000e-05, -8.13903000e-06,
                  -1.92898000e-05, -2.43695000e-05, -2.01898000e-05, -1.81431000e-05,
                  -2.73016000e-05, -1.53573000e-05, -7.15171000e-05, -1.18537000e-05,
                  -5.84632000e-06, -7.03975000e-05, -5.89372000e-05, -1.16449000e-05,
                  -3.91367000e-05, -5.29344000e-05, -7.64027000e-05, -2.63495000e-05,
                  -2.58013000e-05, -1.91726000e-05, -4.07749000e-05, -5.50902000e-05,
                  -2.32072000e-04, -6.80072000e-05, -7.22623000e-05, -3.80176000e-05,
                  -5.41430000e-05, -1.17980000e-04, 9.99886489e-01
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])



@cache('run')
def ia_matrix_2004():
    """
    Real Name: b'ia matrix 2004'
    Original Eqn: b'0.869899915,-0.000774275,-0.261175907,-0.044378224,-0.048799803,-0.122809367,-0.013681837,-0.001495636,-0.005502175,-0.013091638,-0.000576532,-0.000236829,-0.000230561,-0.000122512,-0.000136909,-0.00878868,-0.000496432,-0.006825071,-0.00076407,-0.002784804,-0.00259458,-0.039493995,-0.001643775,-0.001063565,-0.000326902,-0.005206937,-0.000272803,-0.000142262,-0.000376732,-0.000792102,-0.002071086,-0.002496966,-0.002194474,-0.002580587,-0.019727466;-0.002927428,0.915250896,-0.002704673,-0.002514319,-0.001710314,-0.004218515,-0.004701284,-0.458014421,-0.033834244,-0.00372342,-0.070870708,-0.050991115,-0.0030674,-0.001267689,-0.001479835,-0.005684053,-0.111050254,-0.017370495,-0.000556769,-0.000627479,-0.001080869,-0.001967873,-0.004885749,-0.003125174,-0.002766012,-0.002130135,-0.000573123,-0.000284015,-0.001680688,-0.000909418,-0.00342853,-0.002523107,-0.001311563,-0.002973793,-0.061327604;-0.057344177,-0.000791808,0.847234911,-0.003728871,-0.088074829,-0.001795647,-0.002843695,-0.001322181,-0.010091889,-0.003049233,-0.001912909,-0.00131039,-0.001329704,-0.001126259,-0.000986803,-0.002351378,-0.000868037,-0.001118167,-0.001762366,-0.004590917,-0.004590848,-0.150576988,-0.001496483,-0.005231772,-0.003411173,-0.001747169,-0.001496069,-0.000654823,-0.000253407,-0.001732843,-0.007046713,-0.00845133,-0.013216773,-0.006846735,-0.002761675;-0.001897313,-0.001045731,-0.00139734,0.688542011,-0.053736668,-0.003219958,-0.00529225,-0.000448678,-0.003212089,-0.0121132,-0.003491497,-0.001575904,-0.002286973,-0.001848243,-0.005247906,-0.020591671,-0.000622831,-0.002363009,-0.001503512,-0.0023457,-0.003062053,-0.002773218,-0.001749569,-0.002378083,-0.001500644,-0.001540204,-0.000710122,-0.000407962,-0.000334025,-0.001274027,-0.002694171,-0.000874733,-0.003081362,-0.005162812,-9.82311e-05;-0.000136653,-6.72078e-05,-0.000126619,-0.008067477,0.800801276,-0.00039361,-0.000521965,-4.45521e-05,-0.000205855,-0.00089347,-0.000237038,-0.000166558,-0.000202861,-0.000249043,-0.001509296,-0.004004204,-9.4825e-05,-0.000112269,-0.000382759,-0.000356891,-0.000286177,-0.000119914,-0.0002041,-0.000114343,-0.000121599,-0.000139781,-0.000245406,-2.94447e-05,-9.67592e-06,-9.63656e-05,-0.000333309,-9.0276e-05,-0.000104453,-0.000379359,-2.89658e-06;-0.001881734,-0.001662022,-0.001631544,-0.001292122,-0.001833802,0.766562426,-0.010614514,-0.000280412,-0.001472493,-0.003075293,-0.006678829,-0.003080113,-0.002835166,-0.001587603,-0.002791814,-0.070031485,-0.000837597,-0.032062101,-0.001102025,-0.00144501,-0.001272933,-0.002350868,-0.001157398,-0.000556006,-0.00038399,-0.002729611,-0.000670007,-0.000336158,-0.002466981,-0.000928017,-0.001733622,-0.002447311,-0.001227321,-0.002711387,-5.12038e-05;-0.002541162,-0.002715439,-0.024457268,-0.011441347,-0.015020156,-0.013326228,0.76032648,-0.00135901,-0.015534743,-0.016141678,-0.019957518,-0.004964665,-0.007739373,-0.009723184,-0.00450702,-0.019273364,-0.00302021,-0.004263747,-0.0082401,-0.012548486,-0.011943324,-0.008440651,-0.006152933,-0.003087269,-0.005138115,-0.013547949,-0.010791429,-0.012975103,-0.002237177,-0.020916258,-0.0185996,-0.018189611,-0.008604033,-0.024803221,-0.000185744;-0.012506041,-0.008368225,-0.003113629,-0.005608643,-0.004374865,-0.004943446,-0.004342524,0.957676389,-0.037454136,-0.008952235,-0.017866928,-0.011682576,-0.004101647,-0.002181675,-0.001944825,-0.003574706,-0.019687549,-0.011824954,-0.004534089,-0.004899396,-0.003782111,-0.003505087,-0.050840906,-0.072493436,-0.072619933,-0.018462388,-0.00314673,-0.001158037,-0.00110134,-0.004613193,-0.008521612,-0.003148212,-0.002880161,-0.005174979,-2.90503e-05;-0.038681445,-0.010151798,-0.009609941,-0.069929539,-0.039537267,-0.032838518,-0.034942814,-0.013518979,0.761344036,-0.20607921,-0.03483578,-0.015470734,-0.011108044,-0.017583471,-0.011595541,-0.024743038,-0.006515647,-0.010674283,-0.006358005,-0.003146102,-0.002314915,-0.00443074,-0.003342108,-0.004399896,-0.003633445,-0.004101937,-0.001399853,-0.000756893,-0.00157367,-0.004838083,-0.009621279,-0.003826033,-0.061918883,-0.009951816,-0.000159609;-0.004918485,-0.006300126,-0.017685305,-0.010393988,-0.038043564,-0.009113335,-0.015877425,-0.002391045,-0.017149573,0.866067244,-0.01015247,-0.006718907,-0.02539514,-0.023684611,-0.035612379,-0.031716214,-0.002304259,-0.018406544,-0.01671564,-0.004506754,-0.005338268,-0.004051705,-0.010261791,-0.002767497,-0.003296251,-0.006370878,-0.003355011,-0.000614463,-0.001216974,-0.002909605,-0.003388747,-0.001123733,-0.005390725,-0.004329468,-3.94199e-05;-0.001834927,-0.004734064,-0.005585484,-0.002190064,-0.001642327,-0.007752586,-0.001186738,-0.001664156,-0.005479113,-0.005771393,0.874537849,-0.010012938,-0.005127048,-0.01032467,-0.006967562,-0.006423405,-0.001693166,-0.083343163,-0.003402947,-0.001214874,-0.001057284,-0.003279575,-0.001358045,-0.000523046,-0.000602087,-0.001359664,-0.001169622,-0.000134833,-0.001717374,-0.000999411,-0.001359908,-0.00163521,-0.001998698,-0.001902704,-2.61914e-05;-0.004261421,-0.020362028,-0.012386326,-0.005272169,-0.010199828,-0.023280842,-0.008570557,-0.005671894,-0.01239771,-0.023555356,-0.031333724,0.678481754,-0.159678259,-0.063751555,-0.093853037,-0.074937804,-0.006613513,-0.086532224,-0.015888973,-0.00362584,-0.00343342,-0.004047003,-0.006377229,-0.005282795,-0.004324035,-0.007171268,-0.003621124,-0.000578018,-0.002441464,-0.003655531,-0.004361188,-0.00175067,-0.002113966,-0.004330731,-0.000154949;-0.007166829,-0.016347588,-0.003809717,-0.008639319,-0.006728445,-0.008894996,-0.00671229,-0.006249665,-0.007104845,-0.011952329,-0.018151625,-0.019719631,0.858187549,-0.015956102,-0.035506258,-0.011054115,-0.008453808,-0.018114996,-0.024208671,-0.003407595,-0.00260478,-0.002202963,-0.005718248,-0.00926745,-0.006337766,-0.006280329,-0.003007989,-0.000895135,-0.001632823,-0.002967213,-0.006239441,-0.002185663,-0.00305097,-0.00390165,-0.000177651;-0.001922095,-0.007057038,-0.003626999,-0.006119527,-0.005091534,-0.007179131,-0.010308781,-0.003635923,-0.009855022,-0.013683245,-0.010784588,-0.016824309,-0.097852884,0.670568868,-0.060316567,-0.02400519,-0.020611597,-0.034008027,-0.031898234,-0.008773378,-0.008319927,-0.004751849,-0.007069864,-0.004027193,-0.005168274,-0.00967168,-0.040675902,-0.003916807,-0.002334241,-0.016270503,-0.016336087,-0.008471238,-0.023887902,-0.011778101,-0.000735315;-0.004320812,-0.005753344,-0.002009984,-0.002739141,-0.002566015,-0.003445567,-0.002714257,-0.001106465,-0.002296997,-0.004546809,-0.004575048,-0.00600268,-0.015288036,-0.004585536,0.694224702,-0.005902207,-0.002613062,-0.004988514,-0.088045704,-0.004907881,-0.004025062,-0.001656171,-0.036445814,-0.035195115,-0.048640529,-0.01314878,-0.003809902,-0.001064828,-0.000978667,-0.004213627,-0.016924261,-0.001920796,-0.001383488,-0.007221647,-0.000211328;-0.000579394,-0.000778085,-0.000924919,-0.004512342,-0.002867608,-0.004230448,-0.003559956,-0.00054411,-0.001663058,-0.002545392,-0.002799404,-0.008731866,-0.003730334,-0.002388684,-0.005031552,0.954567277,-0.001266639,-0.005135101,-0.001958754,-0.001227386,-0.001504788,-0.002332128,-0.002313717,-0.000733862,-0.001846307,-0.001535596,-0.000974208,-0.000752306,-0.001378941,-0.001733414,-0.003678171,-0.002878137,-0.002852043,-0.00494621,-0.002095997;-0.010895078,-0.031801106,-0.013475023,-0.018403715,-0.009014682,-0.017199958,-0.022725537,-0.016537861,-0.025514741,-0.020469341,-0.040864561,-0.028707507,-0.012024776,-0.007943381,-0.008674537,-0.009461703,0.888403618,-0.006345553,-0.011090114,-0.006444749,-0.014120193,-0.023013965,-0.015664185,-0.00358496,-0.00540354,-0.014621115,-0.009379055,-0.004058993,-0.009643195,-0.005655694,-0.014948637,-0.02060814,-0.01206655,-0.015876136,-0.000201539;-0.003470342,-0.007120332,-0.002378891,-0.002658841,-0.001653622,-0.003141269,-0.00320737,-0.00254911,-0.003152373,-0.00270067,-0.006624926,-0.003860614,-0.00295116,-0.002077376,-0.001898853,-0.002554001,-0.017918272,0.951817653,-0.00483784,-0.003782974,-0.004807617,-0.005722697,-0.009611398,-0.00217123,-0.003098111,-0.012565108,-0.010237291,-0.00491485,-0.033120721,-0.004727129,-0.018353923,-0.012602767,-0.006405615,-0.009396977,-0.00070441;-0.005282912,-0.003598247,-0.006856476,-0.005421049,-0.006929249,-0.006356651,-0.004948231,-0.002506859,-0.005916747,-0.006265038,-0.00720621,-0.005758477,-0.005025926,-0.003595842,-0.004945267,-0.006536695,-0.008211002,-0.007043383,0.989033527,-0.004269748,-0.004187072,-0.004964631,-0.016345993,-0.002096372,-0.004924442,-0.00761504,-0.003731438,-0.002739897,-0.001978044,-0.005658818,-0.004444153,-0.00286377,-0.003694978,-0.006251856,-2.80576e-05;-0.032777521,-0.02110555,-0.06368301,-0.049249078,-0.061469469,-0.055447874,-0.050694872,-0.044464836,-0.046490333,-0.048282926,-0.040489202,-0.045149444,-0.046478473,-0.036923667,-0.044896431,-0.043236626,-0.022001604,-0.04118116,-0.035062924,0.974133592,-0.013186039,-0.047030414,-0.022747238,-0.020284125,-0.021777647,-0.019242452,-0.011022951,-0.003980189,-0.004104011,-0.01318716,-0.019526111,-0.011142819,-0.02662328,-0.017040682,-0.000183597;-0.016754845,-0.007888115,-0.030577793,-0.02609504,-0.035923866,-0.02066193,-0.018359288,-0.011646203,-0.021803469,-0.020076638,-0.018311236,-0.016560416,-0.016621381,-0.012165789,-0.018842711,-0.025864797,-0.007757562,-0.031729372,-0.01599211,-0.006318014,0.992515284,-0.024150824,-0.014064197,-0.00734233,-0.009427026,-0.00864514,-0.007992048,-0.004415165,-0.003285148,-0.00862798,-0.008338142,-0.005856782,-0.011874497,-0.010747663,-0.000283483;-0.001403886,-0.003422119,-0.003813873,-0.004138982,-0.004454108,-0.00449465,-0.005704123,-0.001035525,-0.003972577,-0.00508278,-0.005065331,-0.004093555,-0.005430523,-0.004219379,-0.002666909,-0.003592803,-0.003202749,-0.004708313,-0.005596664,-0.00802711,-0.00640856,0.989444392,-0.007873096,-0.00408579,-0.01884247,-0.019485369,-0.010323601,-0.010469929,-0.002966388,-0.014174288,-0.011814844,-0.00800883,-0.00902257,-0.011807014,-7.71145e-05;-0.012868066,-0.020908268,-0.023998675,-0.019841946,-0.020937168,-0.023998349,-0.019281698,-0.037086284,-0.01793774,-0.017015159,-0.033245421,-0.017233814,-0.012426117,-0.008170377,-0.011131894,-0.018259774,-0.018530842,-0.017958603,-0.015589194,-0.02013986,-0.012155245,-0.00945805,0.954690728,-0.025170108,-0.011419987,-0.054886753,-0.008705922,-0.004918931,-0.001903711,-0.005645683,-0.010982664,-0.010052844,-0.007356567,-0.009257093,-0.000345466;-0.003273646,-0.006687834,-0.004795575,-0.004830774,-0.0053747,-0.007238595,-0.003742332,-0.004478196,-0.003146049,-0.003670991,-0.00891332,-0.005745904,-0.003470105,-0.002281168,-0.002216544,-0.002909818,-0.003217791,-0.003891566,-0.001702622,-0.004752125,-0.002422808,-0.00165016,-0.003299112,0.869779911,-0.002988739,-0.005146187,-0.000930586,-0.000576917,-0.001464546,-0.001304162,-0.00131489,-0.001059093,-0.000558266,-0.001290716,-2.86248e-05;-0.000743863,-0.001748947,-0.00142468,-0.001703018,-0.002410709,-0.001828296,-0.00235236,-0.000579938,-0.001654753,-0.001735193,-0.001587115,-0.001216616,-0.001995105,-0.001723807,-0.001409796,-0.001318862,-0.000716554,-0.001050993,-0.002017029,-0.002921268,-0.001526036,-0.001310198,-0.002660803,-0.006747063,0.967616397,-0.015666111,-0.003797469,-0.003032389,-0.00054147,-0.004068414,-0.004437001,-0.002515988,-0.001302166,-0.004044595,-1.86978e-05;-0.003273243,-0.004370424,-0.00658271,-0.003984328,-0.004735921,-0.006914874,-0.00912793,-0.006729886,-0.004838507,-0.005233187,-0.008267752,-0.004913782,-0.004385128,-0.003091349,-0.004115351,-0.004464656,-0.003887284,-0.006755184,-0.011249819,-0.020574149,-0.011900001,-0.007561361,-0.040058647,-0.114880954,-0.089047813,0.89692067,-0.004463321,-0.003422451,-0.000987415,-0.005035405,-0.004834355,-0.00266042,-0.003214743,-0.005942764,-2.15542e-05;-0.003260901,-0.005380721,-0.005039436,-0.006079035,-0.006958574,-0.006146597,-0.012615371,-0.00285334,-0.007761855,-0.006030183,-0.006846955,-0.006293022,-0.007155132,-0.007341786,-0.004461788,-0.008795784,-0.006124619,-0.011879435,-0.01682986,-0.020109124,-0.022020881,-0.014754838,-0.016821131,-0.018133909,-0.023216889,-0.024964194,0.879178202,-0.028248006,-0.005592943,-0.026471825,-0.022731015,-0.010791448,-0.013578332,-0.022050936,-0.000616615;-0.01854221,-0.023522861,-0.014869532,-0.020924875,-0.015155447,-0.015988004,-0.020402987,-0.010693993,-0.016366496,-0.014651417,-0.0207937,-0.016167776,-0.016281046,-0.012640241,-0.012446209,-0.026963373,-0.020435395,-0.020624369,-0.019076463,-0.031963436,-0.034566329,-0.023097302,-0.044417657,-0.030357965,-0.031960473,-0.029946642,-0.019765189,0.793360473,-0.079588141,-0.035836585,-0.023363868,-0.012613115,-0.022090894,-0.041001945,-0.004490453;-0.004046214,-0.00497516,-0.004779299,-0.004975625,-0.005563769,-0.006029424,-0.009822958,-0.00175156,-0.004328436,-0.005948212,-0.004885014,-0.004754142,-0.005484765,-0.004130493,-0.004523066,-0.006691064,-0.004756888,-0.010234063,-0.022839331,-0.021554805,-0.043988229,-0.029466194,-0.009152896,-0.015479464,-0.01217382,-0.022525154,-0.016185175,-0.024066165,0.968583263,-0.025261265,-0.014136595,-0.01943379,-0.035447507,-0.027245168,-9.70666e-07;-0.011684419,-0.028127627,-0.037885943,-0.024481547,-0.021841685,-0.025891898,-0.060064581,-0.011148973,-0.062561236,-0.036350826,-0.033398437,-0.027727248,-0.040990695,-0.043932444,-0.038110794,-0.02791529,-0.03033085,-0.052292345,-0.050925038,-0.05580592,-0.061327817,-0.043013596,-0.043281937,-0.030174422,-0.077756938,-0.065657216,-0.065950401,-0.099220276,-0.037784607,0.857201047,-0.081697621,-0.033662221,-0.059977876,-0.076517609,-0.002813168;-0.001488437,-0.002912525,-0.001850409,-0.000994792,-0.000773519,-0.003272953,-0.003077746,-0.000636403,-0.002532328,-0.001811901,-0.002351759,-0.00244771,-0.001073634,-0.000977694,-0.001123275,-0.001970133,-0.004378165,-0.001506495,-0.002682509,-0.001541966,-0.002750109,-0.003701325,-0.003479578,-0.005614576,-0.009029847,-0.00327008,-0.002961007,-0.001584726,-0.003814791,-0.00301024,0.992639381,-0.004435898,-0.004581914,-0.008651159,-3.20839e-06;-0.000556463,-0.000447731,-0.00047205,-0.000400693,-0.000501891,-0.000379925,-0.000642913,-0.00034118,-0.00092247,-0.000659945,-0.000607519,-0.000599086,-0.000818485,-0.000710904,-0.000716141,-0.000445602,-0.000777906,-0.000519213,-0.000801209,-0.000853002,-0.000955051,-0.000617786,-0.00113914,-0.000351224,-0.001951004,-0.001260372,-0.001689898,-0.001208885,-0.000317854,-0.002431538,-0.004526127,0.986506013,-0.001216405,-0.001655838,-1.01413e-05;-0.001310278,-0.000419133,-0.000443122,-0.000394217,-0.000933898,-0.000435614,-0.000429299,-0.000151702,-0.000510766,-0.000383228,-0.000510215,-0.000377838,-0.000648206,-0.000364316,-0.000377947,-0.000498168,-0.000362422,-0.000394267,-0.000543517,-0.000566984,-0.000438814,-0.000933967,-0.000635268,-0.000297199,-0.000408273,-0.000563743,-0.000685173,-0.000487641,-8.93916e-05,-0.000677312,-0.004856382,-0.0015125,0.973546975,-0.001228184,-1.97896e-07;-0.002742041,-0.006223616,-0.005319393,-0.00466787,-0.006791016,-0.005368081,-0.012590739,-0.002020276,-0.007134488,-0.005226321,-0.005806376,-0.005362873,-0.004995379,-0.003744881,-0.004303695,-0.004936699,-0.005403125,-0.006186484,-0.007847876,-0.007806793,-0.008860767,-0.013414861,-0.011141821,-0.005432603,-0.007862597,-0.012501183,-0.019738331,-0.01003502,-0.008133371,-0.026067278,-0.017187588,-0.011851185,-0.014127885,0.921440057,-0.00235424;-1.40514e-05,-2.34077e-05,-2.46892e-05,-6.78197e-05,-2.22322e-05,-2.95985e-05,-3.5102e-05,-8.62592e-06,-1.84598e-05,-2.19341e-05,-1.9998e-05,-1.61258e-05,-2.82623e-05,-1.47014e-05,-7.49342e-05,-1.17246e-05,-5.32583e-06,-6.75919e-05,-5.31389e-05,-1.13143e-05,-4.09037e-05,-5.39261e-05,-9.46746e-05,-1.75429e-05,-2.16006e-05,-1.80988e-05,-3.9339e-05,-6.18009e-05,-0.000234087,-6.63067e-05,-6.98526e-05,-3.79116e-05,-5.46024e-05,-0.000118257,0.999870855;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    
    return xr.DataArray(
        data=[[
            8.69899915e-01, -7.74275000e-04, -2.61175907e-01, -4.43782240e-02, -4.87998030e-02,
            -1.22809367e-01, -1.36818370e-02, -1.49563600e-03, -5.50217500e-03, -1.30916380e-02,
            -5.76532000e-04, -2.36829000e-04, -2.30561000e-04, -1.22512000e-04, -1.36909000e-04,
            -8.78868000e-03, -4.96432000e-04, -6.82507100e-03, -7.64070000e-04, -2.78480400e-03,
            -2.59458000e-03, -3.94939950e-02, -1.64377500e-03, -1.06356500e-03, -3.26902000e-04,
            -5.20693700e-03, -2.72803000e-04, -1.42262000e-04, -3.76732000e-04, -7.92102000e-04,
            -2.07108600e-03, -2.49696600e-03, -2.19447400e-03, -2.58058700e-03, -1.97274660e-02
        ],
              [
                  -2.92742800e-03, 9.15250896e-01, -2.70467300e-03, -2.51431900e-03,
                  -1.71031400e-03, -4.21851500e-03, -4.70128400e-03, -4.58014421e-01,
                  -3.38342440e-02, -3.72342000e-03, -7.08707080e-02, -5.09911150e-02,
                  -3.06740000e-03, -1.26768900e-03, -1.47983500e-03, -5.68405300e-03,
                  -1.11050254e-01, -1.73704950e-02, -5.56769000e-04, -6.27479000e-04,
                  -1.08086900e-03, -1.96787300e-03, -4.88574900e-03, -3.12517400e-03,
                  -2.76601200e-03, -2.13013500e-03, -5.73123000e-04, -2.84015000e-04,
                  -1.68068800e-03, -9.09418000e-04, -3.42853000e-03, -2.52310700e-03,
                  -1.31156300e-03, -2.97379300e-03, -6.13276040e-02
              ],
              [
                  -5.73441770e-02, -7.91808000e-04, 8.47234911e-01, -3.72887100e-03,
                  -8.80748290e-02, -1.79564700e-03, -2.84369500e-03, -1.32218100e-03,
                  -1.00918890e-02, -3.04923300e-03, -1.91290900e-03, -1.31039000e-03,
                  -1.32970400e-03, -1.12625900e-03, -9.86803000e-04, -2.35137800e-03,
                  -8.68037000e-04, -1.11816700e-03, -1.76236600e-03, -4.59091700e-03,
                  -4.59084800e-03, -1.50576988e-01, -1.49648300e-03, -5.23177200e-03,
                  -3.41117300e-03, -1.74716900e-03, -1.49606900e-03, -6.54823000e-04,
                  -2.53407000e-04, -1.73284300e-03, -7.04671300e-03, -8.45133000e-03,
                  -1.32167730e-02, -6.84673500e-03, -2.76167500e-03
              ],
              [
                  -1.89731300e-03, -1.04573100e-03, -1.39734000e-03, 6.88542011e-01,
                  -5.37366680e-02, -3.21995800e-03, -5.29225000e-03, -4.48678000e-04,
                  -3.21208900e-03, -1.21132000e-02, -3.49149700e-03, -1.57590400e-03,
                  -2.28697300e-03, -1.84824300e-03, -5.24790600e-03, -2.05916710e-02,
                  -6.22831000e-04, -2.36300900e-03, -1.50351200e-03, -2.34570000e-03,
                  -3.06205300e-03, -2.77321800e-03, -1.74956900e-03, -2.37808300e-03,
                  -1.50064400e-03, -1.54020400e-03, -7.10122000e-04, -4.07962000e-04,
                  -3.34025000e-04, -1.27402700e-03, -2.69417100e-03, -8.74733000e-04,
                  -3.08136200e-03, -5.16281200e-03, -9.82311000e-05
              ],
              [
                  -1.36653000e-04, -6.72078000e-05, -1.26619000e-04, -8.06747700e-03,
                  8.00801276e-01, -3.93610000e-04, -5.21965000e-04, -4.45521000e-05,
                  -2.05855000e-04, -8.93470000e-04, -2.37038000e-04, -1.66558000e-04,
                  -2.02861000e-04, -2.49043000e-04, -1.50929600e-03, -4.00420400e-03,
                  -9.48250000e-05, -1.12269000e-04, -3.82759000e-04, -3.56891000e-04,
                  -2.86177000e-04, -1.19914000e-04, -2.04100000e-04, -1.14343000e-04,
                  -1.21599000e-04, -1.39781000e-04, -2.45406000e-04, -2.94447000e-05,
                  -9.67592000e-06, -9.63656000e-05, -3.33309000e-04, -9.02760000e-05,
                  -1.04453000e-04, -3.79359000e-04, -2.89658000e-06
              ],
              [
                  -1.88173400e-03, -1.66202200e-03, -1.63154400e-03, -1.29212200e-03,
                  -1.83380200e-03, 7.66562426e-01, -1.06145140e-02, -2.80412000e-04,
                  -1.47249300e-03, -3.07529300e-03, -6.67882900e-03, -3.08011300e-03,
                  -2.83516600e-03, -1.58760300e-03, -2.79181400e-03, -7.00314850e-02,
                  -8.37597000e-04, -3.20621010e-02, -1.10202500e-03, -1.44501000e-03,
                  -1.27293300e-03, -2.35086800e-03, -1.15739800e-03, -5.56006000e-04,
                  -3.83990000e-04, -2.72961100e-03, -6.70007000e-04, -3.36158000e-04,
                  -2.46698100e-03, -9.28017000e-04, -1.73362200e-03, -2.44731100e-03,
                  -1.22732100e-03, -2.71138700e-03, -5.12038000e-05
              ],
              [
                  -2.54116200e-03, -2.71543900e-03, -2.44572680e-02, -1.14413470e-02,
                  -1.50201560e-02, -1.33262280e-02, 7.60326480e-01, -1.35901000e-03,
                  -1.55347430e-02, -1.61416780e-02, -1.99575180e-02, -4.96466500e-03,
                  -7.73937300e-03, -9.72318400e-03, -4.50702000e-03, -1.92733640e-02,
                  -3.02021000e-03, -4.26374700e-03, -8.24010000e-03, -1.25484860e-02,
                  -1.19433240e-02, -8.44065100e-03, -6.15293300e-03, -3.08726900e-03,
                  -5.13811500e-03, -1.35479490e-02, -1.07914290e-02, -1.29751030e-02,
                  -2.23717700e-03, -2.09162580e-02, -1.85996000e-02, -1.81896110e-02,
                  -8.60403300e-03, -2.48032210e-02, -1.85744000e-04
              ],
              [
                  -1.25060410e-02, -8.36822500e-03, -3.11362900e-03, -5.60864300e-03,
                  -4.37486500e-03, -4.94344600e-03, -4.34252400e-03, 9.57676389e-01,
                  -3.74541360e-02, -8.95223500e-03, -1.78669280e-02, -1.16825760e-02,
                  -4.10164700e-03, -2.18167500e-03, -1.94482500e-03, -3.57470600e-03,
                  -1.96875490e-02, -1.18249540e-02, -4.53408900e-03, -4.89939600e-03,
                  -3.78211100e-03, -3.50508700e-03, -5.08409060e-02, -7.24934360e-02,
                  -7.26199330e-02, -1.84623880e-02, -3.14673000e-03, -1.15803700e-03,
                  -1.10134000e-03, -4.61319300e-03, -8.52161200e-03, -3.14821200e-03,
                  -2.88016100e-03, -5.17497900e-03, -2.90503000e-05
              ],
              [
                  -3.86814450e-02, -1.01517980e-02, -9.60994100e-03, -6.99295390e-02,
                  -3.95372670e-02, -3.28385180e-02, -3.49428140e-02, -1.35189790e-02,
                  7.61344036e-01, -2.06079210e-01, -3.48357800e-02, -1.54707340e-02,
                  -1.11080440e-02, -1.75834710e-02, -1.15955410e-02, -2.47430380e-02,
                  -6.51564700e-03, -1.06742830e-02, -6.35800500e-03, -3.14610200e-03,
                  -2.31491500e-03, -4.43074000e-03, -3.34210800e-03, -4.39989600e-03,
                  -3.63344500e-03, -4.10193700e-03, -1.39985300e-03, -7.56893000e-04,
                  -1.57367000e-03, -4.83808300e-03, -9.62127900e-03, -3.82603300e-03,
                  -6.19188830e-02, -9.95181600e-03, -1.59609000e-04
              ],
              [
                  -4.91848500e-03, -6.30012600e-03, -1.76853050e-02, -1.03939880e-02,
                  -3.80435640e-02, -9.11333500e-03, -1.58774250e-02, -2.39104500e-03,
                  -1.71495730e-02, 8.66067244e-01, -1.01524700e-02, -6.71890700e-03,
                  -2.53951400e-02, -2.36846110e-02, -3.56123790e-02, -3.17162140e-02,
                  -2.30425900e-03, -1.84065440e-02, -1.67156400e-02, -4.50675400e-03,
                  -5.33826800e-03, -4.05170500e-03, -1.02617910e-02, -2.76749700e-03,
                  -3.29625100e-03, -6.37087800e-03, -3.35501100e-03, -6.14463000e-04,
                  -1.21697400e-03, -2.90960500e-03, -3.38874700e-03, -1.12373300e-03,
                  -5.39072500e-03, -4.32946800e-03, -3.94199000e-05
              ],
              [
                  -1.83492700e-03, -4.73406400e-03, -5.58548400e-03, -2.19006400e-03,
                  -1.64232700e-03, -7.75258600e-03, -1.18673800e-03, -1.66415600e-03,
                  -5.47911300e-03, -5.77139300e-03, 8.74537849e-01, -1.00129380e-02,
                  -5.12704800e-03, -1.03246700e-02, -6.96756200e-03, -6.42340500e-03,
                  -1.69316600e-03, -8.33431630e-02, -3.40294700e-03, -1.21487400e-03,
                  -1.05728400e-03, -3.27957500e-03, -1.35804500e-03, -5.23046000e-04,
                  -6.02087000e-04, -1.35966400e-03, -1.16962200e-03, -1.34833000e-04,
                  -1.71737400e-03, -9.99411000e-04, -1.35990800e-03, -1.63521000e-03,
                  -1.99869800e-03, -1.90270400e-03, -2.61914000e-05
              ],
              [
                  -4.26142100e-03, -2.03620280e-02, -1.23863260e-02, -5.27216900e-03,
                  -1.01998280e-02, -2.32808420e-02, -8.57055700e-03, -5.67189400e-03,
                  -1.23977100e-02, -2.35553560e-02, -3.13337240e-02, 6.78481754e-01,
                  -1.59678259e-01, -6.37515550e-02, -9.38530370e-02, -7.49378040e-02,
                  -6.61351300e-03, -8.65322240e-02, -1.58889730e-02, -3.62584000e-03,
                  -3.43342000e-03, -4.04700300e-03, -6.37722900e-03, -5.28279500e-03,
                  -4.32403500e-03, -7.17126800e-03, -3.62112400e-03, -5.78018000e-04,
                  -2.44146400e-03, -3.65553100e-03, -4.36118800e-03, -1.75067000e-03,
                  -2.11396600e-03, -4.33073100e-03, -1.54949000e-04
              ],
              [
                  -7.16682900e-03, -1.63475880e-02, -3.80971700e-03, -8.63931900e-03,
                  -6.72844500e-03, -8.89499600e-03, -6.71229000e-03, -6.24966500e-03,
                  -7.10484500e-03, -1.19523290e-02, -1.81516250e-02, -1.97196310e-02,
                  8.58187549e-01, -1.59561020e-02, -3.55062580e-02, -1.10541150e-02,
                  -8.45380800e-03, -1.81149960e-02, -2.42086710e-02, -3.40759500e-03,
                  -2.60478000e-03, -2.20296300e-03, -5.71824800e-03, -9.26745000e-03,
                  -6.33776600e-03, -6.28032900e-03, -3.00798900e-03, -8.95135000e-04,
                  -1.63282300e-03, -2.96721300e-03, -6.23944100e-03, -2.18566300e-03,
                  -3.05097000e-03, -3.90165000e-03, -1.77651000e-04
              ],
              [
                  -1.92209500e-03, -7.05703800e-03, -3.62699900e-03, -6.11952700e-03,
                  -5.09153400e-03, -7.17913100e-03, -1.03087810e-02, -3.63592300e-03,
                  -9.85502200e-03, -1.36832450e-02, -1.07845880e-02, -1.68243090e-02,
                  -9.78528840e-02, 6.70568868e-01, -6.03165670e-02, -2.40051900e-02,
                  -2.06115970e-02, -3.40080270e-02, -3.18982340e-02, -8.77337800e-03,
                  -8.31992700e-03, -4.75184900e-03, -7.06986400e-03, -4.02719300e-03,
                  -5.16827400e-03, -9.67168000e-03, -4.06759020e-02, -3.91680700e-03,
                  -2.33424100e-03, -1.62705030e-02, -1.63360870e-02, -8.47123800e-03,
                  -2.38879020e-02, -1.17781010e-02, -7.35315000e-04
              ],
              [
                  -4.32081200e-03, -5.75334400e-03, -2.00998400e-03, -2.73914100e-03,
                  -2.56601500e-03, -3.44556700e-03, -2.71425700e-03, -1.10646500e-03,
                  -2.29699700e-03, -4.54680900e-03, -4.57504800e-03, -6.00268000e-03,
                  -1.52880360e-02, -4.58553600e-03, 6.94224702e-01, -5.90220700e-03,
                  -2.61306200e-03, -4.98851400e-03, -8.80457040e-02, -4.90788100e-03,
                  -4.02506200e-03, -1.65617100e-03, -3.64458140e-02, -3.51951150e-02,
                  -4.86405290e-02, -1.31487800e-02, -3.80990200e-03, -1.06482800e-03,
                  -9.78667000e-04, -4.21362700e-03, -1.69242610e-02, -1.92079600e-03,
                  -1.38348800e-03, -7.22164700e-03, -2.11328000e-04
              ],
              [
                  -5.79394000e-04, -7.78085000e-04, -9.24919000e-04, -4.51234200e-03,
                  -2.86760800e-03, -4.23044800e-03, -3.55995600e-03, -5.44110000e-04,
                  -1.66305800e-03, -2.54539200e-03, -2.79940400e-03, -8.73186600e-03,
                  -3.73033400e-03, -2.38868400e-03, -5.03155200e-03, 9.54567277e-01,
                  -1.26663900e-03, -5.13510100e-03, -1.95875400e-03, -1.22738600e-03,
                  -1.50478800e-03, -2.33212800e-03, -2.31371700e-03, -7.33862000e-04,
                  -1.84630700e-03, -1.53559600e-03, -9.74208000e-04, -7.52306000e-04,
                  -1.37894100e-03, -1.73341400e-03, -3.67817100e-03, -2.87813700e-03,
                  -2.85204300e-03, -4.94621000e-03, -2.09599700e-03
              ],
              [
                  -1.08950780e-02, -3.18011060e-02, -1.34750230e-02, -1.84037150e-02,
                  -9.01468200e-03, -1.71999580e-02, -2.27255370e-02, -1.65378610e-02,
                  -2.55147410e-02, -2.04693410e-02, -4.08645610e-02, -2.87075070e-02,
                  -1.20247760e-02, -7.94338100e-03, -8.67453700e-03, -9.46170300e-03,
                  8.88403618e-01, -6.34555300e-03, -1.10901140e-02, -6.44474900e-03,
                  -1.41201930e-02, -2.30139650e-02, -1.56641850e-02, -3.58496000e-03,
                  -5.40354000e-03, -1.46211150e-02, -9.37905500e-03, -4.05899300e-03,
                  -9.64319500e-03, -5.65569400e-03, -1.49486370e-02, -2.06081400e-02,
                  -1.20665500e-02, -1.58761360e-02, -2.01539000e-04
              ],
              [
                  -3.47034200e-03, -7.12033200e-03, -2.37889100e-03, -2.65884100e-03,
                  -1.65362200e-03, -3.14126900e-03, -3.20737000e-03, -2.54911000e-03,
                  -3.15237300e-03, -2.70067000e-03, -6.62492600e-03, -3.86061400e-03,
                  -2.95116000e-03, -2.07737600e-03, -1.89885300e-03, -2.55400100e-03,
                  -1.79182720e-02, 9.51817653e-01, -4.83784000e-03, -3.78297400e-03,
                  -4.80761700e-03, -5.72269700e-03, -9.61139800e-03, -2.17123000e-03,
                  -3.09811100e-03, -1.25651080e-02, -1.02372910e-02, -4.91485000e-03,
                  -3.31207210e-02, -4.72712900e-03, -1.83539230e-02, -1.26027670e-02,
                  -6.40561500e-03, -9.39697700e-03, -7.04410000e-04
              ],
              [
                  -5.28291200e-03, -3.59824700e-03, -6.85647600e-03, -5.42104900e-03,
                  -6.92924900e-03, -6.35665100e-03, -4.94823100e-03, -2.50685900e-03,
                  -5.91674700e-03, -6.26503800e-03, -7.20621000e-03, -5.75847700e-03,
                  -5.02592600e-03, -3.59584200e-03, -4.94526700e-03, -6.53669500e-03,
                  -8.21100200e-03, -7.04338300e-03, 9.89033527e-01, -4.26974800e-03,
                  -4.18707200e-03, -4.96463100e-03, -1.63459930e-02, -2.09637200e-03,
                  -4.92444200e-03, -7.61504000e-03, -3.73143800e-03, -2.73989700e-03,
                  -1.97804400e-03, -5.65881800e-03, -4.44415300e-03, -2.86377000e-03,
                  -3.69497800e-03, -6.25185600e-03, -2.80576000e-05
              ],
              [
                  -3.27775210e-02, -2.11055500e-02, -6.36830100e-02, -4.92490780e-02,
                  -6.14694690e-02, -5.54478740e-02, -5.06948720e-02, -4.44648360e-02,
                  -4.64903330e-02, -4.82829260e-02, -4.04892020e-02, -4.51494440e-02,
                  -4.64784730e-02, -3.69236670e-02, -4.48964310e-02, -4.32366260e-02,
                  -2.20016040e-02, -4.11811600e-02, -3.50629240e-02, 9.74133592e-01,
                  -1.31860390e-02, -4.70304140e-02, -2.27472380e-02, -2.02841250e-02,
                  -2.17776470e-02, -1.92424520e-02, -1.10229510e-02, -3.98018900e-03,
                  -4.10401100e-03, -1.31871600e-02, -1.95261110e-02, -1.11428190e-02,
                  -2.66232800e-02, -1.70406820e-02, -1.83597000e-04
              ],
              [
                  -1.67548450e-02, -7.88811500e-03, -3.05777930e-02, -2.60950400e-02,
                  -3.59238660e-02, -2.06619300e-02, -1.83592880e-02, -1.16462030e-02,
                  -2.18034690e-02, -2.00766380e-02, -1.83112360e-02, -1.65604160e-02,
                  -1.66213810e-02, -1.21657890e-02, -1.88427110e-02, -2.58647970e-02,
                  -7.75756200e-03, -3.17293720e-02, -1.59921100e-02, -6.31801400e-03,
                  9.92515284e-01, -2.41508240e-02, -1.40641970e-02, -7.34233000e-03,
                  -9.42702600e-03, -8.64514000e-03, -7.99204800e-03, -4.41516500e-03,
                  -3.28514800e-03, -8.62798000e-03, -8.33814200e-03, -5.85678200e-03,
                  -1.18744970e-02, -1.07476630e-02, -2.83483000e-04
              ],
              [
                  -1.40388600e-03, -3.42211900e-03, -3.81387300e-03, -4.13898200e-03,
                  -4.45410800e-03, -4.49465000e-03, -5.70412300e-03, -1.03552500e-03,
                  -3.97257700e-03, -5.08278000e-03, -5.06533100e-03, -4.09355500e-03,
                  -5.43052300e-03, -4.21937900e-03, -2.66690900e-03, -3.59280300e-03,
                  -3.20274900e-03, -4.70831300e-03, -5.59666400e-03, -8.02711000e-03,
                  -6.40856000e-03, 9.89444392e-01, -7.87309600e-03, -4.08579000e-03,
                  -1.88424700e-02, -1.94853690e-02, -1.03236010e-02, -1.04699290e-02,
                  -2.96638800e-03, -1.41742880e-02, -1.18148440e-02, -8.00883000e-03,
                  -9.02257000e-03, -1.18070140e-02, -7.71145000e-05
              ],
              [
                  -1.28680660e-02, -2.09082680e-02, -2.39986750e-02, -1.98419460e-02,
                  -2.09371680e-02, -2.39983490e-02, -1.92816980e-02, -3.70862840e-02,
                  -1.79377400e-02, -1.70151590e-02, -3.32454210e-02, -1.72338140e-02,
                  -1.24261170e-02, -8.17037700e-03, -1.11318940e-02, -1.82597740e-02,
                  -1.85308420e-02, -1.79586030e-02, -1.55891940e-02, -2.01398600e-02,
                  -1.21552450e-02, -9.45805000e-03, 9.54690728e-01, -2.51701080e-02,
                  -1.14199870e-02, -5.48867530e-02, -8.70592200e-03, -4.91893100e-03,
                  -1.90371100e-03, -5.64568300e-03, -1.09826640e-02, -1.00528440e-02,
                  -7.35656700e-03, -9.25709300e-03, -3.45466000e-04
              ],
              [
                  -3.27364600e-03, -6.68783400e-03, -4.79557500e-03, -4.83077400e-03,
                  -5.37470000e-03, -7.23859500e-03, -3.74233200e-03, -4.47819600e-03,
                  -3.14604900e-03, -3.67099100e-03, -8.91332000e-03, -5.74590400e-03,
                  -3.47010500e-03, -2.28116800e-03, -2.21654400e-03, -2.90981800e-03,
                  -3.21779100e-03, -3.89156600e-03, -1.70262200e-03, -4.75212500e-03,
                  -2.42280800e-03, -1.65016000e-03, -3.29911200e-03, 8.69779911e-01,
                  -2.98873900e-03, -5.14618700e-03, -9.30586000e-04, -5.76917000e-04,
                  -1.46454600e-03, -1.30416200e-03, -1.31489000e-03, -1.05909300e-03,
                  -5.58266000e-04, -1.29071600e-03, -2.86248000e-05
              ],
              [
                  -7.43863000e-04, -1.74894700e-03, -1.42468000e-03, -1.70301800e-03,
                  -2.41070900e-03, -1.82829600e-03, -2.35236000e-03, -5.79938000e-04,
                  -1.65475300e-03, -1.73519300e-03, -1.58711500e-03, -1.21661600e-03,
                  -1.99510500e-03, -1.72380700e-03, -1.40979600e-03, -1.31886200e-03,
                  -7.16554000e-04, -1.05099300e-03, -2.01702900e-03, -2.92126800e-03,
                  -1.52603600e-03, -1.31019800e-03, -2.66080300e-03, -6.74706300e-03,
                  9.67616397e-01, -1.56661110e-02, -3.79746900e-03, -3.03238900e-03,
                  -5.41470000e-04, -4.06841400e-03, -4.43700100e-03, -2.51598800e-03,
                  -1.30216600e-03, -4.04459500e-03, -1.86978000e-05
              ],
              [
                  -3.27324300e-03, -4.37042400e-03, -6.58271000e-03, -3.98432800e-03,
                  -4.73592100e-03, -6.91487400e-03, -9.12793000e-03, -6.72988600e-03,
                  -4.83850700e-03, -5.23318700e-03, -8.26775200e-03, -4.91378200e-03,
                  -4.38512800e-03, -3.09134900e-03, -4.11535100e-03, -4.46465600e-03,
                  -3.88728400e-03, -6.75518400e-03, -1.12498190e-02, -2.05741490e-02,
                  -1.19000010e-02, -7.56136100e-03, -4.00586470e-02, -1.14880954e-01,
                  -8.90478130e-02, 8.96920670e-01, -4.46332100e-03, -3.42245100e-03,
                  -9.87415000e-04, -5.03540500e-03, -4.83435500e-03, -2.66042000e-03,
                  -3.21474300e-03, -5.94276400e-03, -2.15542000e-05
              ],
              [
                  -3.26090100e-03, -5.38072100e-03, -5.03943600e-03, -6.07903500e-03,
                  -6.95857400e-03, -6.14659700e-03, -1.26153710e-02, -2.85334000e-03,
                  -7.76185500e-03, -6.03018300e-03, -6.84695500e-03, -6.29302200e-03,
                  -7.15513200e-03, -7.34178600e-03, -4.46178800e-03, -8.79578400e-03,
                  -6.12461900e-03, -1.18794350e-02, -1.68298600e-02, -2.01091240e-02,
                  -2.20208810e-02, -1.47548380e-02, -1.68211310e-02, -1.81339090e-02,
                  -2.32168890e-02, -2.49641940e-02, 8.79178202e-01, -2.82480060e-02,
                  -5.59294300e-03, -2.64718250e-02, -2.27310150e-02, -1.07914480e-02,
                  -1.35783320e-02, -2.20509360e-02, -6.16615000e-04
              ],
              [
                  -1.85422100e-02, -2.35228610e-02, -1.48695320e-02, -2.09248750e-02,
                  -1.51554470e-02, -1.59880040e-02, -2.04029870e-02, -1.06939930e-02,
                  -1.63664960e-02, -1.46514170e-02, -2.07937000e-02, -1.61677760e-02,
                  -1.62810460e-02, -1.26402410e-02, -1.24462090e-02, -2.69633730e-02,
                  -2.04353950e-02, -2.06243690e-02, -1.90764630e-02, -3.19634360e-02,
                  -3.45663290e-02, -2.30973020e-02, -4.44176570e-02, -3.03579650e-02,
                  -3.19604730e-02, -2.99466420e-02, -1.97651890e-02, 7.93360473e-01,
                  -7.95881410e-02, -3.58365850e-02, -2.33638680e-02, -1.26131150e-02,
                  -2.20908940e-02, -4.10019450e-02, -4.49045300e-03
              ],
              [
                  -4.04621400e-03, -4.97516000e-03, -4.77929900e-03, -4.97562500e-03,
                  -5.56376900e-03, -6.02942400e-03, -9.82295800e-03, -1.75156000e-03,
                  -4.32843600e-03, -5.94821200e-03, -4.88501400e-03, -4.75414200e-03,
                  -5.48476500e-03, -4.13049300e-03, -4.52306600e-03, -6.69106400e-03,
                  -4.75688800e-03, -1.02340630e-02, -2.28393310e-02, -2.15548050e-02,
                  -4.39882290e-02, -2.94661940e-02, -9.15289600e-03, -1.54794640e-02,
                  -1.21738200e-02, -2.25251540e-02, -1.61851750e-02, -2.40661650e-02,
                  9.68583263e-01, -2.52612650e-02, -1.41365950e-02, -1.94337900e-02,
                  -3.54475070e-02, -2.72451680e-02, -9.70666000e-07
              ],
              [
                  -1.16844190e-02, -2.81276270e-02, -3.78859430e-02, -2.44815470e-02,
                  -2.18416850e-02, -2.58918980e-02, -6.00645810e-02, -1.11489730e-02,
                  -6.25612360e-02, -3.63508260e-02, -3.33984370e-02, -2.77272480e-02,
                  -4.09906950e-02, -4.39324440e-02, -3.81107940e-02, -2.79152900e-02,
                  -3.03308500e-02, -5.22923450e-02, -5.09250380e-02, -5.58059200e-02,
                  -6.13278170e-02, -4.30135960e-02, -4.32819370e-02, -3.01744220e-02,
                  -7.77569380e-02, -6.56572160e-02, -6.59504010e-02, -9.92202760e-02,
                  -3.77846070e-02, 8.57201047e-01, -8.16976210e-02, -3.36622210e-02,
                  -5.99778760e-02, -7.65176090e-02, -2.81316800e-03
              ],
              [
                  -1.48843700e-03, -2.91252500e-03, -1.85040900e-03, -9.94792000e-04,
                  -7.73519000e-04, -3.27295300e-03, -3.07774600e-03, -6.36403000e-04,
                  -2.53232800e-03, -1.81190100e-03, -2.35175900e-03, -2.44771000e-03,
                  -1.07363400e-03, -9.77694000e-04, -1.12327500e-03, -1.97013300e-03,
                  -4.37816500e-03, -1.50649500e-03, -2.68250900e-03, -1.54196600e-03,
                  -2.75010900e-03, -3.70132500e-03, -3.47957800e-03, -5.61457600e-03,
                  -9.02984700e-03, -3.27008000e-03, -2.96100700e-03, -1.58472600e-03,
                  -3.81479100e-03, -3.01024000e-03, 9.92639381e-01, -4.43589800e-03,
                  -4.58191400e-03, -8.65115900e-03, -3.20839000e-06
              ],
              [
                  -5.56463000e-04, -4.47731000e-04, -4.72050000e-04, -4.00693000e-04,
                  -5.01891000e-04, -3.79925000e-04, -6.42913000e-04, -3.41180000e-04,
                  -9.22470000e-04, -6.59945000e-04, -6.07519000e-04, -5.99086000e-04,
                  -8.18485000e-04, -7.10904000e-04, -7.16141000e-04, -4.45602000e-04,
                  -7.77906000e-04, -5.19213000e-04, -8.01209000e-04, -8.53002000e-04,
                  -9.55051000e-04, -6.17786000e-04, -1.13914000e-03, -3.51224000e-04,
                  -1.95100400e-03, -1.26037200e-03, -1.68989800e-03, -1.20888500e-03,
                  -3.17854000e-04, -2.43153800e-03, -4.52612700e-03, 9.86506013e-01,
                  -1.21640500e-03, -1.65583800e-03, -1.01413000e-05
              ],
              [
                  -1.31027800e-03, -4.19133000e-04, -4.43122000e-04, -3.94217000e-04,
                  -9.33898000e-04, -4.35614000e-04, -4.29299000e-04, -1.51702000e-04,
                  -5.10766000e-04, -3.83228000e-04, -5.10215000e-04, -3.77838000e-04,
                  -6.48206000e-04, -3.64316000e-04, -3.77947000e-04, -4.98168000e-04,
                  -3.62422000e-04, -3.94267000e-04, -5.43517000e-04, -5.66984000e-04,
                  -4.38814000e-04, -9.33967000e-04, -6.35268000e-04, -2.97199000e-04,
                  -4.08273000e-04, -5.63743000e-04, -6.85173000e-04, -4.87641000e-04,
                  -8.93916000e-05, -6.77312000e-04, -4.85638200e-03, -1.51250000e-03,
                  9.73546975e-01, -1.22818400e-03, -1.97896000e-07
              ],
              [
                  -2.74204100e-03, -6.22361600e-03, -5.31939300e-03, -4.66787000e-03,
                  -6.79101600e-03, -5.36808100e-03, -1.25907390e-02, -2.02027600e-03,
                  -7.13448800e-03, -5.22632100e-03, -5.80637600e-03, -5.36287300e-03,
                  -4.99537900e-03, -3.74488100e-03, -4.30369500e-03, -4.93669900e-03,
                  -5.40312500e-03, -6.18648400e-03, -7.84787600e-03, -7.80679300e-03,
                  -8.86076700e-03, -1.34148610e-02, -1.11418210e-02, -5.43260300e-03,
                  -7.86259700e-03, -1.25011830e-02, -1.97383310e-02, -1.00350200e-02,
                  -8.13337100e-03, -2.60672780e-02, -1.71875880e-02, -1.18511850e-02,
                  -1.41278850e-02, 9.21440057e-01, -2.35424000e-03
              ],
              [
                  -1.40514000e-05, -2.34077000e-05, -2.46892000e-05, -6.78197000e-05,
                  -2.22322000e-05, -2.95985000e-05, -3.51020000e-05, -8.62592000e-06,
                  -1.84598000e-05, -2.19341000e-05, -1.99980000e-05, -1.61258000e-05,
                  -2.82623000e-05, -1.47014000e-05, -7.49342000e-05, -1.17246000e-05,
                  -5.32583000e-06, -6.75919000e-05, -5.31389000e-05, -1.13143000e-05,
                  -4.09037000e-05, -5.39261000e-05, -9.46746000e-05, -1.75429000e-05,
                  -2.16006000e-05, -1.80988000e-05, -3.93390000e-05, -6.18009000e-05,
                  -2.34087000e-04, -6.63067000e-05, -6.98526000e-05, -3.79116000e-05,
                  -5.46024000e-05, -1.18257000e-04, 9.99870855e-01
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def ia_matrix_2005():
    """
    Real Name: b'ia matrix 2005'
    Original Eqn: b'0.870592734,-0.000650647,-0.260644047,-0.048211664,-0.053440631,-0.130996855,-0.015431955,-0.001465404,-0.006002795,-0.01322785,-0.00058427,-0.00023433,-0.000223745,-0.000115862,-0.000138397,-0.009046737,-0.000518845,-0.005759286,-0.000839906,-0.002675122,-0.002489806,-0.039642949,-0.001804847,-0.000990375,-0.000338074,-0.006384407,-0.000254595,-0.000141305,-0.000366732,-0.000831057,-0.00222532,-0.002597003,-0.002095426,-0.002587768,-0.021122947;-0.002905819,0.912955335,-0.00295081,-0.002774118,-0.002097788,-0.004659292,-0.004997145,-0.452335484,-0.031240469,-0.004076666,-0.071436255,-0.052543655,-0.003233216,-0.001375669,-0.001834267,-0.005416069,-0.113475558,-0.019015329,-0.000556346,-0.000549434,-0.001068008,-0.002151481,-0.005343436,-0.003533462,-0.002977951,-0.002661985,-0.000553977,-0.000285576,-0.001581843,-0.000868381,-0.003296319,-0.00238784,-0.001520085,-0.00300242,-0.062085974;-0.059353322,-0.000789966,0.845582028,-0.00433457,-0.095987014,-0.002092524,-0.002966256,-0.001483261,-0.010775261,-0.003426031,-0.002245228,-0.001538847,-0.001529925,-0.001294792,-0.001034797,-0.002471672,-0.00096098,-0.001282255,-0.001831223,-0.004565153,-0.004774488,-0.151746417,-0.001689988,-0.005136835,-0.003557514,-0.001815434,-0.001553298,-0.000666602,-0.000277455,-0.00179361,-0.007547669,-0.008378467,-0.013037927,-0.006927793,-0.002980137;-0.001911529,-0.000949837,-0.0014826,0.67037812,-0.055317329,-0.003348604,-0.005644213,-0.000447171,-0.003395753,-0.012894443,-0.003633707,-0.001680942,-0.002280196,-0.001893926,-0.004968493,-0.021355538,-0.00071414,-0.002454791,-0.001592572,-0.002290409,-0.003280742,-0.00288068,-0.001877443,-0.002637305,-0.00166522,-0.001701006,-0.000724024,-0.000417828,-0.000353352,-0.001353727,-0.002788647,-0.000988379,-0.003349283,-0.005018983,-9.82303e-05;-0.000134632,-5.6637e-05,-0.000120508,-0.009526298,0.795572027,-0.000399627,-0.000603808,-4.06085e-05,-0.000207013,-0.000862661,-0.000234157,-0.000155928,-0.000189402,-0.000255821,-0.001621714,-0.004166728,-8.59049e-05,-0.000106069,-0.000413266,-0.000333671,-0.000260546,-0.000120863,-0.000217261,-0.000114866,-0.000126583,-0.000134258,-0.000242413,-2.97885e-05,-8.53178e-06,-9.18227e-05,-0.000451424,-9.75274e-05,-0.000115549,-0.000400131,-3.81655e-06;-0.001753273,-0.001537498,-0.00157046,-0.001307133,-0.001812787,0.761210698,-0.010882151,-0.000311857,-0.001452111,-0.003044933,-0.007060202,-0.003284452,-0.00292554,-0.00160589,-0.002723321,-0.068520398,-0.000829455,-0.031753511,-0.001227788,-0.001404978,-0.00125994,-0.002382208,-0.001212336,-0.000574753,-0.000400727,-0.002657192,-0.000621036,-0.000324807,-0.002585614,-0.000898688,-0.001819411,-0.002586634,-0.001283893,-0.002679751,-2.84157e-05;-0.002485134,-0.002777199,-0.024640069,-0.011733946,-0.015208491,-0.013680784,0.758846508,-0.001622717,-0.015498448,-0.016417142,-0.020986016,-0.005089012,-0.0074738,-0.009250575,-0.004323103,-0.01900323,-0.003156423,-0.004264177,-0.008212674,-0.011614958,-0.012137881,-0.008442088,-0.006311314,-0.00336299,-0.004935213,-0.013308584,-0.01042477,-0.01309468,-0.002237279,-0.020445682,-0.018823458,-0.018217811,-0.009015974,-0.024551474,-0.00015857;-0.01195871,-0.006858945,-0.003052102,-0.005250283,-0.004225808,-0.004732767,-0.004329475,0.933158629,-0.039968608,-0.008736922,-0.01805823,-0.011680831,-0.003881836,-0.00199121,-0.001887179,-0.003499319,-0.021126394,-0.011118151,-0.004593705,-0.004832789,-0.003647674,-0.003481677,-0.050220688,-0.067572962,-0.083563197,-0.019560937,-0.003147508,-0.001128488,-0.001074639,-0.0045051,-0.008799313,-0.002952595,-0.002822244,-0.005008333,-2.64063e-05;-0.036713987,-0.009568343,-0.0092383,-0.067289477,-0.03747888,-0.032121129,-0.033997279,-0.015856932,0.761785304,-0.208101049,-0.034991816,-0.015218858,-0.010570919,-0.017043193,-0.010840196,-0.024095929,-0.006302418,-0.010443617,-0.005781488,-0.002734012,-0.002137858,-0.004383812,-0.003400623,-0.004457148,-0.004094321,-0.004213712,-0.001301131,-0.000695778,-0.001691946,-0.004678638,-0.009808997,-0.003682126,-0.06131502,-0.009554097,-0.000165512;-0.004680617,-0.005657506,-0.018239521,-0.010710911,-0.037484487,-0.008708587,-0.015914837,-0.002537139,-0.017460022,0.860400957,-0.010688006,-0.006820016,-0.024635428,-0.023416767,-0.034788563,-0.032043921,-0.002321393,-0.018583004,-0.016366331,-0.004294528,-0.005219752,-0.004124881,-0.010682757,-0.002754372,-0.003424567,-0.006286069,-0.003295565,-0.0006124,-0.001323934,-0.00284299,-0.003316317,-0.001177295,-0.00523657,-0.00439089,-6.19045e-05;-0.0016503,-0.004562077,-0.005487055,-0.002187115,-0.001610261,-0.007218209,-0.001194984,-0.001873157,-0.005596031,-0.005631218,0.867189694,-0.010230044,-0.005095781,-0.010079401,-0.006813321,-0.006524235,-0.001800051,-0.086563317,-0.003570485,-0.001014787,-0.000993044,-0.003225937,-0.00139243,-0.000505353,-0.000633514,-0.001433525,-0.001149184,-0.000121686,-0.001742069,-0.00095721,-0.001382664,-0.001645526,-0.002024845,-0.00187696,-3.2515e-05;-0.004212891,-0.019269736,-0.011596165,-0.00527505,-0.009936104,-0.022201836,-0.008349381,-0.005635519,-0.012425235,-0.023137856,-0.031583391,0.678946697,-0.158598335,-0.064321645,-0.089955216,-0.073279479,-0.006616673,-0.086789933,-0.015504323,-0.003361444,-0.003024948,-0.003930694,-0.0061908,-0.004268114,-0.003714365,-0.007872932,-0.003441299,-0.000553337,-0.002487059,-0.003560773,-0.004230895,-0.001804121,-0.002171703,-0.004386367,-0.000148229;-0.007097314,-0.014448857,-0.004019873,-0.008921373,-0.006945824,-0.009086034,-0.006947801,-0.006995411,-0.007538004,-0.012359628,-0.019290812,-0.020762091,0.852743007,-0.016488768,-0.036528415,-0.012319617,-0.008398131,-0.018261535,-0.024191178,-0.002985659,-0.002740448,-0.002233125,-0.005724275,-0.008887788,-0.006753992,-0.007162733,-0.002906877,-0.000869142,-0.001656431,-0.002851762,-0.006300919,-0.002112502,-0.003311009,-0.003947009,-0.00028829;-0.001931121,-0.006575571,-0.00381891,-0.006627012,-0.005074295,-0.007581105,-0.010586795,-0.003861996,-0.010379376,-0.014053659,-0.011425792,-0.017930596,-0.100950522,0.651286268,-0.062356742,-0.026496409,-0.022567543,-0.036100144,-0.03272861,-0.008693774,-0.008822988,-0.004953857,-0.007712306,-0.003797037,-0.005282437,-0.010253764,-0.042060695,-0.004008104,-0.002472122,-0.016919341,-0.016552604,-0.009339832,-0.024449015,-0.012624321,-0.000871221;-0.004426218,-0.005342384,-0.00200826,-0.002849518,-0.002541097,-0.003750743,-0.002986716,-0.00118084,-0.002404322,-0.004586649,-0.005187802,-0.006238083,-0.015956918,-0.004728054,0.68992728,-0.006427711,-0.002916423,-0.005244733,-0.085463362,-0.004279998,-0.004527306,-0.001781101,-0.0367579,-0.035624065,-0.050449192,-0.014320342,-0.003717044,-0.001051878,-0.000983324,-0.004205479,-0.017287341,-0.002112031,-0.001561384,-0.007756631,-0.000224268;-0.000558685,-0.000733802,-0.000876293,-0.004789633,-0.00282577,-0.004113194,-0.003351386,-0.00059164,-0.001728613,-0.002604131,-0.002842458,-0.008378705,-0.003730086,-0.002419918,-0.005030859,0.953801849,-0.001459098,-0.005146446,-0.001861217,-0.001144558,-0.001479379,-0.00225576,-0.002780176,-0.000711091,-0.001960501,-0.0014536,-0.001058371,-0.000724389,-0.001359112,-0.001678876,-0.003578828,-0.003010564,-0.002912156,-0.005085208,-0.002137575;-0.011182154,-0.030935854,-0.014082416,-0.01857037,-0.008867421,-0.017680845,-0.02332652,-0.023474905,-0.026782159,-0.021110639,-0.043401052,-0.030497109,-0.012270802,-0.007893999,-0.008529122,-0.00946265,0.878496262,-0.006792746,-0.011227907,-0.006410963,-0.013983072,-0.024164619,-0.015981197,-0.003637463,-0.005556291,-0.015423508,-0.009788389,-0.004124636,-0.010397561,-0.005795413,-0.014749937,-0.021319208,-0.012475232,-0.016102295,-0.000186442;-0.003264861,-0.006702271,-0.002165694,-0.002396654,-0.001571745,-0.002921596,-0.002958466,-0.003621247,-0.003050628,-0.002538199,-0.00604943,-0.003835207,-0.002815161,-0.001785025,-0.001672813,-0.002474762,-0.016736522,0.950846412,-0.004957492,-0.003427298,-0.004325169,-0.00540782,-0.009056831,-0.001994665,-0.002649261,-0.012023383,-0.01027796,-0.00459414,-0.032910001,-0.004456108,-0.017806667,-0.011849047,-0.006240185,-0.008922026,-0.000637504;-0.005077194,-0.003244889,-0.006812394,-0.005103968,-0.00653888,-0.006191643,-0.004855712,-0.002633317,-0.005846966,-0.006208917,-0.006840217,-0.005776848,-0.004845495,-0.003380496,-0.004861112,-0.006451408,-0.007581974,-0.007122095,0.988437725,-0.004438694,-0.004145376,-0.005212598,-0.01617198,-0.002091893,-0.005098273,-0.007602102,-0.003763763,-0.002831702,-0.002005178,-0.005601884,-0.004419625,-0.002879966,-0.003940925,-0.006284869,-2.38989e-05;-0.030851912,-0.017975124,-0.062220143,-0.04551815,-0.054866815,-0.052000957,-0.047336616,-0.045950968,-0.04455119,-0.045607138,-0.037132218,-0.041890623,-0.043186982,-0.033395172,-0.042604976,-0.041179635,-0.02021959,-0.039643832,-0.034451659,0.97564073,-0.012831319,-0.046487739,-0.022128022,-0.018102298,-0.020555998,-0.018879508,-0.010778854,-0.003906073,-0.00413166,-0.012500573,-0.020345829,-0.011028527,-0.027063508,-0.016680146,-0.000174201;-0.017830226,-0.007940905,-0.031000143,-0.025750075,-0.036179793,-0.021047431,-0.018930128,-0.013413707,-0.022071761,-0.021251528,-0.019447514,-0.017297004,-0.017734983,-0.013301858,-0.019000799,-0.025903341,-0.007700226,-0.032832903,-0.015485717,-0.006320329,0.992759865,-0.025049326,-0.014649677,-0.007966671,-0.009991881,-0.008750792,-0.008750579,-0.004562202,-0.003334578,-0.008530004,-0.008313508,-0.006217786,-0.013076211,-0.011321933,-0.000249546;-0.001444178,-0.003152691,-0.003863286,-0.004176122,-0.004642994,-0.004196205,-0.005433718,-0.001093906,-0.003998873,-0.004973607,-0.005178576,-0.004195739,-0.005260058,-0.003936277,-0.002626398,-0.003462772,-0.003526231,-0.00485914,-0.005397463,-0.007594002,-0.00679631,0.989630379,-0.007953486,-0.004458948,-0.016647972,-0.021141741,-0.009974747,-0.010536226,-0.00303208,-0.013480371,-0.011587132,-0.008650888,-0.008828916,-0.012054338,-7.08649e-05;-0.013093933,-0.019158568,-0.024082448,-0.019974762,-0.020430924,-0.02382665,-0.01889971,-0.038988471,-0.018141791,-0.016955931,-0.033648246,-0.017616278,-0.012632947,-0.008039097,-0.010833538,-0.01760249,-0.017792234,-0.018742037,-0.016435906,-0.020739318,-0.012938506,-0.009387936,0.953643203,-0.018366772,-0.010305754,-0.055520955,-0.008694981,-0.004856224,-0.001826828,-0.005620762,-0.010591761,-0.009869813,-0.007388449,-0.009366565,-0.000375522;-0.002831936,-0.006161648,-0.004636015,-0.004522933,-0.004722345,-0.006701431,-0.0035552,-0.004025319,-0.003112518,-0.003374563,-0.008866352,-0.005725165,-0.003286935,-0.002054876,-0.002305215,-0.002479978,-0.002873978,-0.00324491,-0.001849056,-0.00469775,-0.00352184,-0.001597879,-0.003410306,0.852031266,-0.002669404,-0.005143492,-0.001004655,-0.000618611,-0.001969239,-0.001313919,-0.001213239,-0.000940972,-0.000587853,-0.001278146,-3.04805e-05;-0.000730591,-0.001465195,-0.001348596,-0.001642844,-0.002366445,-0.001722058,-0.002164973,-0.000602314,-0.001660427,-0.001646754,-0.001550728,-0.001179379,-0.002011179,-0.001664866,-0.001326833,-0.001230259,-0.000716295,-0.001059312,-0.00198424,-0.002778076,-0.001598163,-0.001247832,-0.002452365,-0.005748731,0.966516804,-0.014492036,-0.00381425,-0.002860106,-0.000557478,-0.003700057,-0.004089981,-0.002589643,-0.001199663,-0.004038537,-1.60473e-05;-0.003374788,-0.004543229,-0.006718621,-0.004029747,-0.004764401,-0.007082587,-0.008994979,-0.00668994,-0.00494354,-0.005294583,-0.008365154,-0.005078262,-0.004333409,-0.002959532,-0.003961708,-0.004415264,-0.003737409,-0.008729278,-0.012053968,-0.021286785,-0.012245301,-0.007712058,-0.039855524,-0.108508255,-0.091956826,0.899821487,-0.004479325,-0.003460178,-0.001023461,-0.005190858,-0.004884529,-0.002780311,-0.003287201,-0.006215502,-1.84633e-05;-0.00343404,-0.005240851,-0.005072714,-0.006126263,-0.006610965,-0.006008481,-0.012404776,-0.003015145,-0.007634687,-0.005835263,-0.006564583,-0.006500211,-0.006797141,-0.00722554,-0.004222,-0.009202505,-0.006560175,-0.011853921,-0.01684637,-0.020089933,-0.021834229,-0.015009406,-0.017229866,-0.017647614,-0.021808944,-0.023158257,0.875814328,-0.028763578,-0.005900286,-0.025204805,-0.022928371,-0.011017239,-0.013902988,-0.022118251,-0.000627489;-0.017347131,-0.022630324,-0.014508319,-0.020478015,-0.014988824,-0.015162996,-0.019887103,-0.011017624,-0.016733802,-0.014579519,-0.020571794,-0.016797995,-0.016246581,-0.012272165,-0.012103828,-0.026188187,-0.021332481,-0.020759179,-0.019553436,-0.031340061,-0.03465936,-0.023415087,-0.043419579,-0.026724835,-0.029898973,-0.031359054,-0.019741806,0.783889766,-0.083556938,-0.034965726,-0.023407048,-0.012767685,-0.022039024,-0.042146929,-0.005907651;-0.003499047,-0.005352966,-0.004660143,-0.005054754,-0.005835402,-0.005865633,-0.010070676,-0.001733642,-0.004450206,-0.005971127,-0.004988462,-0.004825793,-0.005384872,-0.004009437,-0.004633981,-0.006647411,-0.004433356,-0.010194526,-0.022642875,-0.021205073,-0.044618445,-0.030755298,-0.009316862,-0.013844826,-0.010379309,-0.021176507,-0.016789021,-0.025945886,0.970527461,-0.025544885,-0.013702936,-0.020262007,-0.036581015,-0.027758378,-1.08714e-06;-0.011765759,-0.02982723,-0.038387458,-0.023631422,-0.020820219,-0.025485048,-0.05953744,-0.012054902,-0.063972124,-0.036031848,-0.032487434,-0.028107663,-0.04043785,-0.041192404,-0.038742298,-0.027655476,-0.031621594,-0.053992843,-0.050788475,-0.056764743,-0.061299459,-0.04425481,-0.042748595,-0.026931687,-0.076527458,-0.062529108,-0.064918349,-0.10309422,-0.04020853,0.856240651,-0.083512264,-0.035343418,-0.062340311,-0.078390097,-0.002788265;-0.001502843,-0.002744611,-0.001866032,-0.000964354,-0.000755469,-0.003270834,-0.003290283,-0.000875671,-0.002633277,-0.001874419,-0.002496498,-0.002792265,-0.001158077,-0.000929848,-0.001130445,-0.001943336,-0.00440282,-0.001543761,-0.002731223,-0.001567762,-0.002669173,-0.003690991,-0.003734814,-0.004992963,-0.008940156,-0.003212153,-0.002869577,-0.001603891,-0.004072869,-0.00301024,0.992468497,-0.004519783,-0.004299027,-0.008697472,-4.0572e-06;-0.000735356,-0.000410946,-0.000440117,-0.000369504,-0.000445293,-0.000353449,-0.000554251,-0.000311603,-0.000913317,-0.000597087,-0.000545281,-0.000550824,-0.000759887,-0.000648529,-0.000703221,-0.000421326,-0.000712778,-0.000481851,-0.000784288,-0.000844198,-0.001040811,-0.000615682,-0.001082461,-0.000317147,-0.001906748,-0.001176885,-0.001459695,-0.001236012,-0.000296414,-0.002505376,-0.004620743,0.986218279,-0.001440354,-0.001599843,-1.20743e-05;-0.001278327,-0.000412609,-0.000479785,-0.000400545,-0.00097212,-0.000470736,-0.000460941,-0.000164704,-0.000523372,-0.000403503,-0.000609777,-0.000426443,-0.000748771,-0.000382807,-0.000421159,-0.000500744,-0.000383126,-0.000402224,-0.000553848,-0.000579074,-0.00044152,-0.000986869,-0.000636852,-0.000307647,-0.000414647,-0.000522371,-0.000671283,-0.000556354,-9.28391e-05,-0.000637537,-0.005102913,-0.001630615,0.965080541,-0.001290866,-3.40349e-07;-0.002860947,-0.006296248,-0.005406703,-0.004564652,-0.006561396,-0.00509183,-0.012285627,-0.001971398,-0.007101557,-0.00507267,-0.005724065,-0.005404879,-0.004738551,-0.003411511,-0.004148151,-0.00461282,-0.005593763,-0.006218522,-0.00752703,-0.007576472,-0.009056544,-0.013762758,-0.011928935,-0.005016571,-0.007522326,-0.012761927,-0.019301146,-0.010177614,-0.008355319,-0.025270632,-0.017366,-0.012370527,-0.014076732,0.921761694,-0.001972603;-1.43478e-05,-2.44395e-05,-2.3741e-05,-7.7755e-05,-2.5745e-05,-2.88407e-05,-3.09734e-05,-1.10871e-05,-1.95301e-05,-2.14994e-05,-2.08148e-05,-1.65598e-05,-3.07705e-05,-1.46546e-05,-7.64555e-05,-1.25023e-05,-6.2727e-06,-6.72929e-05,-4.57973e-05,-1.13875e-05,-3.80354e-05,-5.28132e-05,-0.000109889,-2.57128e-05,-1.60338e-05,-1.49606e-05,-3.75788e-05,-6.07456e-05,-0.000224378,-6.42811e-05,-6.58038e-05,-4.05495e-05,-5.21875e-05,-0.000110644,0.999883852;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            8.70592734e-01, -6.50647000e-04, -2.60644047e-01, -4.82116640e-02, -5.34406310e-02,
            -1.30996855e-01, -1.54319550e-02, -1.46540400e-03, -6.00279500e-03, -1.32278500e-02,
            -5.84270000e-04, -2.34330000e-04, -2.23745000e-04, -1.15862000e-04, -1.38397000e-04,
            -9.04673700e-03, -5.18845000e-04, -5.75928600e-03, -8.39906000e-04, -2.67512200e-03,
            -2.48980600e-03, -3.96429490e-02, -1.80484700e-03, -9.90375000e-04, -3.38074000e-04,
            -6.38440700e-03, -2.54595000e-04, -1.41305000e-04, -3.66732000e-04, -8.31057000e-04,
            -2.22532000e-03, -2.59700300e-03, -2.09542600e-03, -2.58776800e-03, -2.11229470e-02
        ],
              [
                  -2.90581900e-03, 9.12955335e-01, -2.95081000e-03, -2.77411800e-03,
                  -2.09778800e-03, -4.65929200e-03, -4.99714500e-03, -4.52335484e-01,
                  -3.12404690e-02, -4.07666600e-03, -7.14362550e-02, -5.25436550e-02,
                  -3.23321600e-03, -1.37566900e-03, -1.83426700e-03, -5.41606900e-03,
                  -1.13475558e-01, -1.90153290e-02, -5.56346000e-04, -5.49434000e-04,
                  -1.06800800e-03, -2.15148100e-03, -5.34343600e-03, -3.53346200e-03,
                  -2.97795100e-03, -2.66198500e-03, -5.53977000e-04, -2.85576000e-04,
                  -1.58184300e-03, -8.68381000e-04, -3.29631900e-03, -2.38784000e-03,
                  -1.52008500e-03, -3.00242000e-03, -6.20859740e-02
              ],
              [
                  -5.93533220e-02, -7.89966000e-04, 8.45582028e-01, -4.33457000e-03,
                  -9.59870140e-02, -2.09252400e-03, -2.96625600e-03, -1.48326100e-03,
                  -1.07752610e-02, -3.42603100e-03, -2.24522800e-03, -1.53884700e-03,
                  -1.52992500e-03, -1.29479200e-03, -1.03479700e-03, -2.47167200e-03,
                  -9.60980000e-04, -1.28225500e-03, -1.83122300e-03, -4.56515300e-03,
                  -4.77448800e-03, -1.51746417e-01, -1.68998800e-03, -5.13683500e-03,
                  -3.55751400e-03, -1.81543400e-03, -1.55329800e-03, -6.66602000e-04,
                  -2.77455000e-04, -1.79361000e-03, -7.54766900e-03, -8.37846700e-03,
                  -1.30379270e-02, -6.92779300e-03, -2.98013700e-03
              ],
              [
                  -1.91152900e-03, -9.49837000e-04, -1.48260000e-03, 6.70378120e-01,
                  -5.53173290e-02, -3.34860400e-03, -5.64421300e-03, -4.47171000e-04,
                  -3.39575300e-03, -1.28944430e-02, -3.63370700e-03, -1.68094200e-03,
                  -2.28019600e-03, -1.89392600e-03, -4.96849300e-03, -2.13555380e-02,
                  -7.14140000e-04, -2.45479100e-03, -1.59257200e-03, -2.29040900e-03,
                  -3.28074200e-03, -2.88068000e-03, -1.87744300e-03, -2.63730500e-03,
                  -1.66522000e-03, -1.70100600e-03, -7.24024000e-04, -4.17828000e-04,
                  -3.53352000e-04, -1.35372700e-03, -2.78864700e-03, -9.88379000e-04,
                  -3.34928300e-03, -5.01898300e-03, -9.82303000e-05
              ],
              [
                  -1.34632000e-04, -5.66370000e-05, -1.20508000e-04, -9.52629800e-03,
                  7.95572027e-01, -3.99627000e-04, -6.03808000e-04, -4.06085000e-05,
                  -2.07013000e-04, -8.62661000e-04, -2.34157000e-04, -1.55928000e-04,
                  -1.89402000e-04, -2.55821000e-04, -1.62171400e-03, -4.16672800e-03,
                  -8.59049000e-05, -1.06069000e-04, -4.13266000e-04, -3.33671000e-04,
                  -2.60546000e-04, -1.20863000e-04, -2.17261000e-04, -1.14866000e-04,
                  -1.26583000e-04, -1.34258000e-04, -2.42413000e-04, -2.97885000e-05,
                  -8.53178000e-06, -9.18227000e-05, -4.51424000e-04, -9.75274000e-05,
                  -1.15549000e-04, -4.00131000e-04, -3.81655000e-06
              ],
              [
                  -1.75327300e-03, -1.53749800e-03, -1.57046000e-03, -1.30713300e-03,
                  -1.81278700e-03, 7.61210698e-01, -1.08821510e-02, -3.11857000e-04,
                  -1.45211100e-03, -3.04493300e-03, -7.06020200e-03, -3.28445200e-03,
                  -2.92554000e-03, -1.60589000e-03, -2.72332100e-03, -6.85203980e-02,
                  -8.29455000e-04, -3.17535110e-02, -1.22778800e-03, -1.40497800e-03,
                  -1.25994000e-03, -2.38220800e-03, -1.21233600e-03, -5.74753000e-04,
                  -4.00727000e-04, -2.65719200e-03, -6.21036000e-04, -3.24807000e-04,
                  -2.58561400e-03, -8.98688000e-04, -1.81941100e-03, -2.58663400e-03,
                  -1.28389300e-03, -2.67975100e-03, -2.84157000e-05
              ],
              [
                  -2.48513400e-03, -2.77719900e-03, -2.46400690e-02, -1.17339460e-02,
                  -1.52084910e-02, -1.36807840e-02, 7.58846508e-01, -1.62271700e-03,
                  -1.54984480e-02, -1.64171420e-02, -2.09860160e-02, -5.08901200e-03,
                  -7.47380000e-03, -9.25057500e-03, -4.32310300e-03, -1.90032300e-02,
                  -3.15642300e-03, -4.26417700e-03, -8.21267400e-03, -1.16149580e-02,
                  -1.21378810e-02, -8.44208800e-03, -6.31131400e-03, -3.36299000e-03,
                  -4.93521300e-03, -1.33085840e-02, -1.04247700e-02, -1.30946800e-02,
                  -2.23727900e-03, -2.04456820e-02, -1.88234580e-02, -1.82178110e-02,
                  -9.01597400e-03, -2.45514740e-02, -1.58570000e-04
              ],
              [
                  -1.19587100e-02, -6.85894500e-03, -3.05210200e-03, -5.25028300e-03,
                  -4.22580800e-03, -4.73276700e-03, -4.32947500e-03, 9.33158629e-01,
                  -3.99686080e-02, -8.73692200e-03, -1.80582300e-02, -1.16808310e-02,
                  -3.88183600e-03, -1.99121000e-03, -1.88717900e-03, -3.49931900e-03,
                  -2.11263940e-02, -1.11181510e-02, -4.59370500e-03, -4.83278900e-03,
                  -3.64767400e-03, -3.48167700e-03, -5.02206880e-02, -6.75729620e-02,
                  -8.35631970e-02, -1.95609370e-02, -3.14750800e-03, -1.12848800e-03,
                  -1.07463900e-03, -4.50510000e-03, -8.79931300e-03, -2.95259500e-03,
                  -2.82224400e-03, -5.00833300e-03, -2.64063000e-05
              ],
              [
                  -3.67139870e-02, -9.56834300e-03, -9.23830000e-03, -6.72894770e-02,
                  -3.74788800e-02, -3.21211290e-02, -3.39972790e-02, -1.58569320e-02,
                  7.61785304e-01, -2.08101049e-01, -3.49918160e-02, -1.52188580e-02,
                  -1.05709190e-02, -1.70431930e-02, -1.08401960e-02, -2.40959290e-02,
                  -6.30241800e-03, -1.04436170e-02, -5.78148800e-03, -2.73401200e-03,
                  -2.13785800e-03, -4.38381200e-03, -3.40062300e-03, -4.45714800e-03,
                  -4.09432100e-03, -4.21371200e-03, -1.30113100e-03, -6.95778000e-04,
                  -1.69194600e-03, -4.67863800e-03, -9.80899700e-03, -3.68212600e-03,
                  -6.13150200e-02, -9.55409700e-03, -1.65512000e-04
              ],
              [
                  -4.68061700e-03, -5.65750600e-03, -1.82395210e-02, -1.07109110e-02,
                  -3.74844870e-02, -8.70858700e-03, -1.59148370e-02, -2.53713900e-03,
                  -1.74600220e-02, 8.60400957e-01, -1.06880060e-02, -6.82001600e-03,
                  -2.46354280e-02, -2.34167670e-02, -3.47885630e-02, -3.20439210e-02,
                  -2.32139300e-03, -1.85830040e-02, -1.63663310e-02, -4.29452800e-03,
                  -5.21975200e-03, -4.12488100e-03, -1.06827570e-02, -2.75437200e-03,
                  -3.42456700e-03, -6.28606900e-03, -3.29556500e-03, -6.12400000e-04,
                  -1.32393400e-03, -2.84299000e-03, -3.31631700e-03, -1.17729500e-03,
                  -5.23657000e-03, -4.39089000e-03, -6.19045000e-05
              ],
              [
                  -1.65030000e-03, -4.56207700e-03, -5.48705500e-03, -2.18711500e-03,
                  -1.61026100e-03, -7.21820900e-03, -1.19498400e-03, -1.87315700e-03,
                  -5.59603100e-03, -5.63121800e-03, 8.67189694e-01, -1.02300440e-02,
                  -5.09578100e-03, -1.00794010e-02, -6.81332100e-03, -6.52423500e-03,
                  -1.80005100e-03, -8.65633170e-02, -3.57048500e-03, -1.01478700e-03,
                  -9.93044000e-04, -3.22593700e-03, -1.39243000e-03, -5.05353000e-04,
                  -6.33514000e-04, -1.43352500e-03, -1.14918400e-03, -1.21686000e-04,
                  -1.74206900e-03, -9.57210000e-04, -1.38266400e-03, -1.64552600e-03,
                  -2.02484500e-03, -1.87696000e-03, -3.25150000e-05
              ],
              [
                  -4.21289100e-03, -1.92697360e-02, -1.15961650e-02, -5.27505000e-03,
                  -9.93610400e-03, -2.22018360e-02, -8.34938100e-03, -5.63551900e-03,
                  -1.24252350e-02, -2.31378560e-02, -3.15833910e-02, 6.78946697e-01,
                  -1.58598335e-01, -6.43216450e-02, -8.99552160e-02, -7.32794790e-02,
                  -6.61667300e-03, -8.67899330e-02, -1.55043230e-02, -3.36144400e-03,
                  -3.02494800e-03, -3.93069400e-03, -6.19080000e-03, -4.26811400e-03,
                  -3.71436500e-03, -7.87293200e-03, -3.44129900e-03, -5.53337000e-04,
                  -2.48705900e-03, -3.56077300e-03, -4.23089500e-03, -1.80412100e-03,
                  -2.17170300e-03, -4.38636700e-03, -1.48229000e-04
              ],
              [
                  -7.09731400e-03, -1.44488570e-02, -4.01987300e-03, -8.92137300e-03,
                  -6.94582400e-03, -9.08603400e-03, -6.94780100e-03, -6.99541100e-03,
                  -7.53800400e-03, -1.23596280e-02, -1.92908120e-02, -2.07620910e-02,
                  8.52743007e-01, -1.64887680e-02, -3.65284150e-02, -1.23196170e-02,
                  -8.39813100e-03, -1.82615350e-02, -2.41911780e-02, -2.98565900e-03,
                  -2.74044800e-03, -2.23312500e-03, -5.72427500e-03, -8.88778800e-03,
                  -6.75399200e-03, -7.16273300e-03, -2.90687700e-03, -8.69142000e-04,
                  -1.65643100e-03, -2.85176200e-03, -6.30091900e-03, -2.11250200e-03,
                  -3.31100900e-03, -3.94700900e-03, -2.88290000e-04
              ],
              [
                  -1.93112100e-03, -6.57557100e-03, -3.81891000e-03, -6.62701200e-03,
                  -5.07429500e-03, -7.58110500e-03, -1.05867950e-02, -3.86199600e-03,
                  -1.03793760e-02, -1.40536590e-02, -1.14257920e-02, -1.79305960e-02,
                  -1.00950522e-01, 6.51286268e-01, -6.23567420e-02, -2.64964090e-02,
                  -2.25675430e-02, -3.61001440e-02, -3.27286100e-02, -8.69377400e-03,
                  -8.82298800e-03, -4.95385700e-03, -7.71230600e-03, -3.79703700e-03,
                  -5.28243700e-03, -1.02537640e-02, -4.20606950e-02, -4.00810400e-03,
                  -2.47212200e-03, -1.69193410e-02, -1.65526040e-02, -9.33983200e-03,
                  -2.44490150e-02, -1.26243210e-02, -8.71221000e-04
              ],
              [
                  -4.42621800e-03, -5.34238400e-03, -2.00826000e-03, -2.84951800e-03,
                  -2.54109700e-03, -3.75074300e-03, -2.98671600e-03, -1.18084000e-03,
                  -2.40432200e-03, -4.58664900e-03, -5.18780200e-03, -6.23808300e-03,
                  -1.59569180e-02, -4.72805400e-03, 6.89927280e-01, -6.42771100e-03,
                  -2.91642300e-03, -5.24473300e-03, -8.54633620e-02, -4.27999800e-03,
                  -4.52730600e-03, -1.78110100e-03, -3.67579000e-02, -3.56240650e-02,
                  -5.04491920e-02, -1.43203420e-02, -3.71704400e-03, -1.05187800e-03,
                  -9.83324000e-04, -4.20547900e-03, -1.72873410e-02, -2.11203100e-03,
                  -1.56138400e-03, -7.75663100e-03, -2.24268000e-04
              ],
              [
                  -5.58685000e-04, -7.33802000e-04, -8.76293000e-04, -4.78963300e-03,
                  -2.82577000e-03, -4.11319400e-03, -3.35138600e-03, -5.91640000e-04,
                  -1.72861300e-03, -2.60413100e-03, -2.84245800e-03, -8.37870500e-03,
                  -3.73008600e-03, -2.41991800e-03, -5.03085900e-03, 9.53801849e-01,
                  -1.45909800e-03, -5.14644600e-03, -1.86121700e-03, -1.14455800e-03,
                  -1.47937900e-03, -2.25576000e-03, -2.78017600e-03, -7.11091000e-04,
                  -1.96050100e-03, -1.45360000e-03, -1.05837100e-03, -7.24389000e-04,
                  -1.35911200e-03, -1.67887600e-03, -3.57882800e-03, -3.01056400e-03,
                  -2.91215600e-03, -5.08520800e-03, -2.13757500e-03
              ],
              [
                  -1.11821540e-02, -3.09358540e-02, -1.40824160e-02, -1.85703700e-02,
                  -8.86742100e-03, -1.76808450e-02, -2.33265200e-02, -2.34749050e-02,
                  -2.67821590e-02, -2.11106390e-02, -4.34010520e-02, -3.04971090e-02,
                  -1.22708020e-02, -7.89399900e-03, -8.52912200e-03, -9.46265000e-03,
                  8.78496262e-01, -6.79274600e-03, -1.12279070e-02, -6.41096300e-03,
                  -1.39830720e-02, -2.41646190e-02, -1.59811970e-02, -3.63746300e-03,
                  -5.55629100e-03, -1.54235080e-02, -9.78838900e-03, -4.12463600e-03,
                  -1.03975610e-02, -5.79541300e-03, -1.47499370e-02, -2.13192080e-02,
                  -1.24752320e-02, -1.61022950e-02, -1.86442000e-04
              ],
              [
                  -3.26486100e-03, -6.70227100e-03, -2.16569400e-03, -2.39665400e-03,
                  -1.57174500e-03, -2.92159600e-03, -2.95846600e-03, -3.62124700e-03,
                  -3.05062800e-03, -2.53819900e-03, -6.04943000e-03, -3.83520700e-03,
                  -2.81516100e-03, -1.78502500e-03, -1.67281300e-03, -2.47476200e-03,
                  -1.67365220e-02, 9.50846412e-01, -4.95749200e-03, -3.42729800e-03,
                  -4.32516900e-03, -5.40782000e-03, -9.05683100e-03, -1.99466500e-03,
                  -2.64926100e-03, -1.20233830e-02, -1.02779600e-02, -4.59414000e-03,
                  -3.29100010e-02, -4.45610800e-03, -1.78066670e-02, -1.18490470e-02,
                  -6.24018500e-03, -8.92202600e-03, -6.37504000e-04
              ],
              [
                  -5.07719400e-03, -3.24488900e-03, -6.81239400e-03, -5.10396800e-03,
                  -6.53888000e-03, -6.19164300e-03, -4.85571200e-03, -2.63331700e-03,
                  -5.84696600e-03, -6.20891700e-03, -6.84021700e-03, -5.77684800e-03,
                  -4.84549500e-03, -3.38049600e-03, -4.86111200e-03, -6.45140800e-03,
                  -7.58197400e-03, -7.12209500e-03, 9.88437725e-01, -4.43869400e-03,
                  -4.14537600e-03, -5.21259800e-03, -1.61719800e-02, -2.09189300e-03,
                  -5.09827300e-03, -7.60210200e-03, -3.76376300e-03, -2.83170200e-03,
                  -2.00517800e-03, -5.60188400e-03, -4.41962500e-03, -2.87996600e-03,
                  -3.94092500e-03, -6.28486900e-03, -2.38989000e-05
              ],
              [
                  -3.08519120e-02, -1.79751240e-02, -6.22201430e-02, -4.55181500e-02,
                  -5.48668150e-02, -5.20009570e-02, -4.73366160e-02, -4.59509680e-02,
                  -4.45511900e-02, -4.56071380e-02, -3.71322180e-02, -4.18906230e-02,
                  -4.31869820e-02, -3.33951720e-02, -4.26049760e-02, -4.11796350e-02,
                  -2.02195900e-02, -3.96438320e-02, -3.44516590e-02, 9.75640730e-01,
                  -1.28313190e-02, -4.64877390e-02, -2.21280220e-02, -1.81022980e-02,
                  -2.05559980e-02, -1.88795080e-02, -1.07788540e-02, -3.90607300e-03,
                  -4.13166000e-03, -1.25005730e-02, -2.03458290e-02, -1.10285270e-02,
                  -2.70635080e-02, -1.66801460e-02, -1.74201000e-04
              ],
              [
                  -1.78302260e-02, -7.94090500e-03, -3.10001430e-02, -2.57500750e-02,
                  -3.61797930e-02, -2.10474310e-02, -1.89301280e-02, -1.34137070e-02,
                  -2.20717610e-02, -2.12515280e-02, -1.94475140e-02, -1.72970040e-02,
                  -1.77349830e-02, -1.33018580e-02, -1.90007990e-02, -2.59033410e-02,
                  -7.70022600e-03, -3.28329030e-02, -1.54857170e-02, -6.32032900e-03,
                  9.92759865e-01, -2.50493260e-02, -1.46496770e-02, -7.96667100e-03,
                  -9.99188100e-03, -8.75079200e-03, -8.75057900e-03, -4.56220200e-03,
                  -3.33457800e-03, -8.53000400e-03, -8.31350800e-03, -6.21778600e-03,
                  -1.30762110e-02, -1.13219330e-02, -2.49546000e-04
              ],
              [
                  -1.44417800e-03, -3.15269100e-03, -3.86328600e-03, -4.17612200e-03,
                  -4.64299400e-03, -4.19620500e-03, -5.43371800e-03, -1.09390600e-03,
                  -3.99887300e-03, -4.97360700e-03, -5.17857600e-03, -4.19573900e-03,
                  -5.26005800e-03, -3.93627700e-03, -2.62639800e-03, -3.46277200e-03,
                  -3.52623100e-03, -4.85914000e-03, -5.39746300e-03, -7.59400200e-03,
                  -6.79631000e-03, 9.89630379e-01, -7.95348600e-03, -4.45894800e-03,
                  -1.66479720e-02, -2.11417410e-02, -9.97474700e-03, -1.05362260e-02,
                  -3.03208000e-03, -1.34803710e-02, -1.15871320e-02, -8.65088800e-03,
                  -8.82891600e-03, -1.20543380e-02, -7.08649000e-05
              ],
              [
                  -1.30939330e-02, -1.91585680e-02, -2.40824480e-02, -1.99747620e-02,
                  -2.04309240e-02, -2.38266500e-02, -1.88997100e-02, -3.89884710e-02,
                  -1.81417910e-02, -1.69559310e-02, -3.36482460e-02, -1.76162780e-02,
                  -1.26329470e-02, -8.03909700e-03, -1.08335380e-02, -1.76024900e-02,
                  -1.77922340e-02, -1.87420370e-02, -1.64359060e-02, -2.07393180e-02,
                  -1.29385060e-02, -9.38793600e-03, 9.53643203e-01, -1.83667720e-02,
                  -1.03057540e-02, -5.55209550e-02, -8.69498100e-03, -4.85622400e-03,
                  -1.82682800e-03, -5.62076200e-03, -1.05917610e-02, -9.86981300e-03,
                  -7.38844900e-03, -9.36656500e-03, -3.75522000e-04
              ],
              [
                  -2.83193600e-03, -6.16164800e-03, -4.63601500e-03, -4.52293300e-03,
                  -4.72234500e-03, -6.70143100e-03, -3.55520000e-03, -4.02531900e-03,
                  -3.11251800e-03, -3.37456300e-03, -8.86635200e-03, -5.72516500e-03,
                  -3.28693500e-03, -2.05487600e-03, -2.30521500e-03, -2.47997800e-03,
                  -2.87397800e-03, -3.24491000e-03, -1.84905600e-03, -4.69775000e-03,
                  -3.52184000e-03, -1.59787900e-03, -3.41030600e-03, 8.52031266e-01,
                  -2.66940400e-03, -5.14349200e-03, -1.00465500e-03, -6.18611000e-04,
                  -1.96923900e-03, -1.31391900e-03, -1.21323900e-03, -9.40972000e-04,
                  -5.87853000e-04, -1.27814600e-03, -3.04805000e-05
              ],
              [
                  -7.30591000e-04, -1.46519500e-03, -1.34859600e-03, -1.64284400e-03,
                  -2.36644500e-03, -1.72205800e-03, -2.16497300e-03, -6.02314000e-04,
                  -1.66042700e-03, -1.64675400e-03, -1.55072800e-03, -1.17937900e-03,
                  -2.01117900e-03, -1.66486600e-03, -1.32683300e-03, -1.23025900e-03,
                  -7.16295000e-04, -1.05931200e-03, -1.98424000e-03, -2.77807600e-03,
                  -1.59816300e-03, -1.24783200e-03, -2.45236500e-03, -5.74873100e-03,
                  9.66516804e-01, -1.44920360e-02, -3.81425000e-03, -2.86010600e-03,
                  -5.57478000e-04, -3.70005700e-03, -4.08998100e-03, -2.58964300e-03,
                  -1.19966300e-03, -4.03853700e-03, -1.60473000e-05
              ],
              [
                  -3.37478800e-03, -4.54322900e-03, -6.71862100e-03, -4.02974700e-03,
                  -4.76440100e-03, -7.08258700e-03, -8.99497900e-03, -6.68994000e-03,
                  -4.94354000e-03, -5.29458300e-03, -8.36515400e-03, -5.07826200e-03,
                  -4.33340900e-03, -2.95953200e-03, -3.96170800e-03, -4.41526400e-03,
                  -3.73740900e-03, -8.72927800e-03, -1.20539680e-02, -2.12867850e-02,
                  -1.22453010e-02, -7.71205800e-03, -3.98555240e-02, -1.08508255e-01,
                  -9.19568260e-02, 8.99821487e-01, -4.47932500e-03, -3.46017800e-03,
                  -1.02346100e-03, -5.19085800e-03, -4.88452900e-03, -2.78031100e-03,
                  -3.28720100e-03, -6.21550200e-03, -1.84633000e-05
              ],
              [
                  -3.43404000e-03, -5.24085100e-03, -5.07271400e-03, -6.12626300e-03,
                  -6.61096500e-03, -6.00848100e-03, -1.24047760e-02, -3.01514500e-03,
                  -7.63468700e-03, -5.83526300e-03, -6.56458300e-03, -6.50021100e-03,
                  -6.79714100e-03, -7.22554000e-03, -4.22200000e-03, -9.20250500e-03,
                  -6.56017500e-03, -1.18539210e-02, -1.68463700e-02, -2.00899330e-02,
                  -2.18342290e-02, -1.50094060e-02, -1.72298660e-02, -1.76476140e-02,
                  -2.18089440e-02, -2.31582570e-02, 8.75814328e-01, -2.87635780e-02,
                  -5.90028600e-03, -2.52048050e-02, -2.29283710e-02, -1.10172390e-02,
                  -1.39029880e-02, -2.21182510e-02, -6.27489000e-04
              ],
              [
                  -1.73471310e-02, -2.26303240e-02, -1.45083190e-02, -2.04780150e-02,
                  -1.49888240e-02, -1.51629960e-02, -1.98871030e-02, -1.10176240e-02,
                  -1.67338020e-02, -1.45795190e-02, -2.05717940e-02, -1.67979950e-02,
                  -1.62465810e-02, -1.22721650e-02, -1.21038280e-02, -2.61881870e-02,
                  -2.13324810e-02, -2.07591790e-02, -1.95534360e-02, -3.13400610e-02,
                  -3.46593600e-02, -2.34150870e-02, -4.34195790e-02, -2.67248350e-02,
                  -2.98989730e-02, -3.13590540e-02, -1.97418060e-02, 7.83889766e-01,
                  -8.35569380e-02, -3.49657260e-02, -2.34070480e-02, -1.27676850e-02,
                  -2.20390240e-02, -4.21469290e-02, -5.90765100e-03
              ],
              [
                  -3.49904700e-03, -5.35296600e-03, -4.66014300e-03, -5.05475400e-03,
                  -5.83540200e-03, -5.86563300e-03, -1.00706760e-02, -1.73364200e-03,
                  -4.45020600e-03, -5.97112700e-03, -4.98846200e-03, -4.82579300e-03,
                  -5.38487200e-03, -4.00943700e-03, -4.63398100e-03, -6.64741100e-03,
                  -4.43335600e-03, -1.01945260e-02, -2.26428750e-02, -2.12050730e-02,
                  -4.46184450e-02, -3.07552980e-02, -9.31686200e-03, -1.38448260e-02,
                  -1.03793090e-02, -2.11765070e-02, -1.67890210e-02, -2.59458860e-02,
                  9.70527461e-01, -2.55448850e-02, -1.37029360e-02, -2.02620070e-02,
                  -3.65810150e-02, -2.77583780e-02, -1.08714000e-06
              ],
              [
                  -1.17657590e-02, -2.98272300e-02, -3.83874580e-02, -2.36314220e-02,
                  -2.08202190e-02, -2.54850480e-02, -5.95374400e-02, -1.20549020e-02,
                  -6.39721240e-02, -3.60318480e-02, -3.24874340e-02, -2.81076630e-02,
                  -4.04378500e-02, -4.11924040e-02, -3.87422980e-02, -2.76554760e-02,
                  -3.16215940e-02, -5.39928430e-02, -5.07884750e-02, -5.67647430e-02,
                  -6.12994590e-02, -4.42548100e-02, -4.27485950e-02, -2.69316870e-02,
                  -7.65274580e-02, -6.25291080e-02, -6.49183490e-02, -1.03094220e-01,
                  -4.02085300e-02, 8.56240651e-01, -8.35122640e-02, -3.53434180e-02,
                  -6.23403110e-02, -7.83900970e-02, -2.78826500e-03
              ],
              [
                  -1.50284300e-03, -2.74461100e-03, -1.86603200e-03, -9.64354000e-04,
                  -7.55469000e-04, -3.27083400e-03, -3.29028300e-03, -8.75671000e-04,
                  -2.63327700e-03, -1.87441900e-03, -2.49649800e-03, -2.79226500e-03,
                  -1.15807700e-03, -9.29848000e-04, -1.13044500e-03, -1.94333600e-03,
                  -4.40282000e-03, -1.54376100e-03, -2.73122300e-03, -1.56776200e-03,
                  -2.66917300e-03, -3.69099100e-03, -3.73481400e-03, -4.99296300e-03,
                  -8.94015600e-03, -3.21215300e-03, -2.86957700e-03, -1.60389100e-03,
                  -4.07286900e-03, -3.01024000e-03, 9.92468497e-01, -4.51978300e-03,
                  -4.29902700e-03, -8.69747200e-03, -4.05720000e-06
              ],
              [
                  -7.35356000e-04, -4.10946000e-04, -4.40117000e-04, -3.69504000e-04,
                  -4.45293000e-04, -3.53449000e-04, -5.54251000e-04, -3.11603000e-04,
                  -9.13317000e-04, -5.97087000e-04, -5.45281000e-04, -5.50824000e-04,
                  -7.59887000e-04, -6.48529000e-04, -7.03221000e-04, -4.21326000e-04,
                  -7.12778000e-04, -4.81851000e-04, -7.84288000e-04, -8.44198000e-04,
                  -1.04081100e-03, -6.15682000e-04, -1.08246100e-03, -3.17147000e-04,
                  -1.90674800e-03, -1.17688500e-03, -1.45969500e-03, -1.23601200e-03,
                  -2.96414000e-04, -2.50537600e-03, -4.62074300e-03, 9.86218279e-01,
                  -1.44035400e-03, -1.59984300e-03, -1.20743000e-05
              ],
              [
                  -1.27832700e-03, -4.12609000e-04, -4.79785000e-04, -4.00545000e-04,
                  -9.72120000e-04, -4.70736000e-04, -4.60941000e-04, -1.64704000e-04,
                  -5.23372000e-04, -4.03503000e-04, -6.09777000e-04, -4.26443000e-04,
                  -7.48771000e-04, -3.82807000e-04, -4.21159000e-04, -5.00744000e-04,
                  -3.83126000e-04, -4.02224000e-04, -5.53848000e-04, -5.79074000e-04,
                  -4.41520000e-04, -9.86869000e-04, -6.36852000e-04, -3.07647000e-04,
                  -4.14647000e-04, -5.22371000e-04, -6.71283000e-04, -5.56354000e-04,
                  -9.28391000e-05, -6.37537000e-04, -5.10291300e-03, -1.63061500e-03,
                  9.65080541e-01, -1.29086600e-03, -3.40349000e-07
              ],
              [
                  -2.86094700e-03, -6.29624800e-03, -5.40670300e-03, -4.56465200e-03,
                  -6.56139600e-03, -5.09183000e-03, -1.22856270e-02, -1.97139800e-03,
                  -7.10155700e-03, -5.07267000e-03, -5.72406500e-03, -5.40487900e-03,
                  -4.73855100e-03, -3.41151100e-03, -4.14815100e-03, -4.61282000e-03,
                  -5.59376300e-03, -6.21852200e-03, -7.52703000e-03, -7.57647200e-03,
                  -9.05654400e-03, -1.37627580e-02, -1.19289350e-02, -5.01657100e-03,
                  -7.52232600e-03, -1.27619270e-02, -1.93011460e-02, -1.01776140e-02,
                  -8.35531900e-03, -2.52706320e-02, -1.73660000e-02, -1.23705270e-02,
                  -1.40767320e-02, 9.21761694e-01, -1.97260300e-03
              ],
              [
                  -1.43478000e-05, -2.44395000e-05, -2.37410000e-05, -7.77550000e-05,
                  -2.57450000e-05, -2.88407000e-05, -3.09734000e-05, -1.10871000e-05,
                  -1.95301000e-05, -2.14994000e-05, -2.08148000e-05, -1.65598000e-05,
                  -3.07705000e-05, -1.46546000e-05, -7.64555000e-05, -1.25023000e-05,
                  -6.27270000e-06, -6.72929000e-05, -4.57973000e-05, -1.13875000e-05,
                  -3.80354000e-05, -5.28132000e-05, -1.09889000e-04, -2.57128000e-05,
                  -1.60338000e-05, -1.49606000e-05, -3.75788000e-05, -6.07456000e-05,
                  -2.24378000e-04, -6.42811000e-05, -6.58038000e-05, -4.05495000e-05,
                  -5.21875000e-05, -1.10644000e-04, 9.99883852e-01
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def ia_matrix_2006():
    """
    Real Name: b'ia matrix 2006'
    Original Eqn: b'0.873646392,-0.000578661,-0.259175245,-0.049574397,-0.055531638,-0.127181871,-0.015353242,-0.001613421,-0.006442175,-0.013314001,-0.000579479,-0.00021205,-0.00019473,-0.000101236,-0.000126664,-0.01062746,-0.000540087,-0.004593932,-0.000869679,-0.002499365,-0.002258542,-0.039466377,-0.001760788,-0.000977682,-0.000375788,-0.006138668,-0.000228343,-0.000133382,-0.00038566,-0.000819952,-0.002162223,-0.002705486,-0.002159961,-0.002489017,-0.0250289;-0.002354299,0.92297309,-0.002808492,-0.002783506,-0.002320969,-0.004249805,-0.004827237,-0.471836678,-0.030358879,-0.003719742,-0.070027467,-0.052002984,-0.002911538,-0.001128618,-0.001584064,-0.005099451,-0.109191662,-0.017907317,-0.000577412,-0.000520574,-0.00106199,-0.002062987,-0.004997847,-0.003395164,-0.003148286,-0.002852291,-0.000465793,-0.000266682,-0.001610161,-0.000807234,-0.003065207,-0.001796453,-0.001515867,-0.002702593,-0.063078972;-0.063383379,-0.000859104,0.840702521,-0.004964434,-0.101407016,-0.002528716,-0.003195579,-0.001425139,-0.011520503,-0.003851979,-0.002606184,-0.001848427,-0.001694569,-0.001380885,-0.001119431,-0.002785363,-0.001101275,-0.001486819,-0.00167385,-0.004626085,-0.004745071,-0.153086001,-0.001801392,-0.005774814,-0.00420067,-0.001790164,-0.0014338,-0.000679566,-0.000294701,-0.001861802,-0.007427219,-0.009023462,-0.012685396,-0.007437019,-0.003189991;-0.001856181,-0.000988801,-0.001584207,0.651323876,-0.0584062,-0.003400542,-0.005926682,-0.000424688,-0.003533135,-0.013880935,-0.003906671,-0.001923456,-0.002316114,-0.001851559,-0.004641489,-0.023008788,-0.00082431,-0.002531016,-0.001644294,-0.002420335,-0.003309733,-0.002916812,-0.001975634,-0.00307261,-0.00194817,-0.00184277,-0.000707605,-0.000425935,-0.000392042,-0.001443461,-0.002838944,-0.001039656,-0.003524866,-0.004868624,-0.00010012;-0.000155707,-5.65087e-05,-0.000131264,-0.011271419,0.785526327,-0.000475366,-0.000732601,-3.65431e-05,-0.000231047,-0.000932479,-0.000245296,-0.000150184,-0.000190717,-0.000280806,-0.001761344,-0.004974638,-8.66439e-05,-0.000109017,-0.000388298,-0.000338559,-0.000264887,-0.000130199,-0.000215471,-0.000107699,-0.000128098,-0.000152806,-0.000234722,-3.0259e-05,-9.10679e-06,-9.0971e-05,-0.000576995,-9.75224e-05,-0.000124782,-0.000426651,-1.59646e-06;-0.001732719,-0.001539717,-0.001685894,-0.0014246,-0.001929074,0.747173565,-0.011376995,-0.000327804,-0.001477083,-0.003148788,-0.007663424,-0.003593639,-0.003010579,-0.001597147,-0.002680533,-0.072130628,-0.000867512,-0.031057058,-0.001208337,-0.0013551,-0.001232685,-0.002269838,-0.001238074,-0.000614261,-0.000392538,-0.00246283,-0.000598313,-0.00030345,-0.002666698,-0.000895028,-0.001907578,-0.002708949,-0.001359781,-0.002675287,-2.93231e-05;-0.002445378,-0.002771827,-0.024390171,-0.011672574,-0.014894388,-0.013947968,0.754337124,-0.001536014,-0.015010131,-0.016360368,-0.021076278,-0.004968636,-0.006996969,-0.00844742,-0.004151895,-0.018835228,-0.003150511,-0.004198331,-0.008139855,-0.011292064,-0.011487543,-0.008296405,-0.006376676,-0.003332919,-0.005099926,-0.013357856,-0.00969479,-0.012300274,-0.002147534,-0.019902836,-0.018365682,-0.0182563,-0.008984075,-0.023450349,-0.00017142;-0.012296689,-0.006197514,-0.003189736,-0.005246624,-0.004106444,-0.004728704,-0.004425816,0.88953777,-0.04634872,-0.008888002,-0.019029249,-0.012473151,-0.003615087,-0.001892582,-0.00184719,-0.003787901,-0.024448984,-0.011062565,-0.004656503,-0.005251188,-0.003510072,-0.003518332,-0.053029794,-0.070701164,-0.091970687,-0.020130834,-0.003169807,-0.001126254,-0.001097387,-0.004455482,-0.008233978,-0.003079025,-0.00278392,-0.005078632,-4.14333e-05;-0.03602533,-0.009273487,-0.009188741,-0.067188262,-0.037316062,-0.03356572,-0.034323852,-0.016677758,0.754820444,-0.215229144,-0.036547373,-0.01500592,-0.010218115,-0.017176345,-0.010607278,-0.025662563,-0.006441504,-0.01063748,-0.005501374,-0.002673826,-0.002114347,-0.004450969,-0.003471967,-0.004767379,-0.004103877,-0.004356969,-0.001233569,-0.000646906,-0.001872376,-0.00467927,-0.009912151,-0.003740773,-0.062186174,-0.009771937,-0.000197471;-0.004644235,-0.005480078,-0.018536192,-0.010864814,-0.038709975,-0.00856205,-0.016297988,-0.003067999,-0.017542598,0.85256975,-0.011448123,-0.00691939,-0.023621231,-0.023009403,-0.034019138,-0.03295762,-0.002383339,-0.01865682,-0.015705708,-0.004335611,-0.005003571,-0.004143101,-0.010780879,-0.002977905,-0.003681965,-0.006338039,-0.003175753,-0.000588139,-0.001346187,-0.00283659,-0.0033388,-0.00131373,-0.005312801,-0.004582117,-6.24787e-05;-0.00157033,-0.004404432,-0.005257702,-0.002114211,-0.001609134,-0.00733382,-0.001225667,-0.001662871,-0.005542927,-0.005522422,0.863103446,-0.010126491,-0.004965878,-0.009646621,-0.006521259,-0.006846732,-0.001761509,-0.089645408,-0.0034635,-0.000989584,-0.000993221,-0.003207204,-0.001430171,-0.000467887,-0.000629122,-0.001448196,-0.001107853,-0.000116744,-0.001744046,-0.000973874,-0.00149653,-0.00163641,-0.001938726,-0.001850372,-2.93181e-05;-0.004298805,-0.018532625,-0.011037826,-0.005196941,-0.010001769,-0.02210544,-0.008688894,-0.005449553,-0.012605592,-0.023370394,-0.032989008,0.670935499,-0.156950122,-0.064640228,-0.088379728,-0.075703719,-0.006679437,-0.088129126,-0.014808776,-0.003273522,-0.002921488,-0.003978874,-0.006166259,-0.004621099,-0.003772319,-0.007940782,-0.003207529,-0.00052676,-0.002495091,-0.003567813,-0.004286483,-0.001838006,-0.002175256,-0.004456677,-0.000154051;-0.007342646,-0.015193346,-0.004106389,-0.009878374,-0.007650599,-0.010156154,-0.007532403,-0.006940622,-0.008224958,-0.013489368,-0.021669771,-0.023872946,0.839923845,-0.017544115,-0.038851903,-0.013713839,-0.008695801,-0.019172433,-0.023674846,-0.002897618,-0.002680144,-0.002394384,-0.005923745,-0.01015585,-0.008025963,-0.008009666,-0.002867663,-0.00088181,-0.001673401,-0.002868994,-0.006439316,-0.002229013,-0.003959571,-0.00405124,-0.000348229;-0.002053102,-0.007361563,-0.003973277,-0.007027596,-0.005417426,-0.008147683,-0.010799407,-0.003693025,-0.010790754,-0.014753359,-0.012393513,-0.018687795,-0.106936267,0.627283316,-0.06447194,-0.030904504,-0.025080097,-0.039767809,-0.03262901,-0.008864797,-0.008923722,-0.005509744,-0.008352088,-0.004023282,-0.005734903,-0.010879778,-0.043372302,-0.004023293,-0.002667619,-0.01836518,-0.017894274,-0.011188772,-0.025698506,-0.01379586,-0.001113317;-0.004819752,-0.005134243,-0.002018334,-0.00289466,-0.002652225,-0.004043986,-0.003365276,-0.001149512,-0.002507153,-0.004816006,-0.005934844,-0.007050706,-0.016272446,-0.004626887,0.6864915,-0.007187691,-0.003186131,-0.005573834,-0.080824593,-0.004359528,-0.004482199,-0.001946385,-0.038389081,-0.038811554,-0.05317244,-0.016418411,-0.003469227,-0.001051764,-0.001031971,-0.004225539,-0.017153164,-0.002373263,-0.001573407,-0.00794159,-0.000257602;-0.000631183,-0.000859341,-0.000952911,-0.004404741,-0.00265629,-0.003915351,-0.004148457,-0.000563763,-0.001678165,-0.002850847,-0.00317582,-0.009570334,-0.003644354,-0.002250148,-0.00477563,0.953683887,-0.001378461,-0.004944191,-0.0018085,-0.001129128,-0.001413674,-0.00225629,-0.002510778,-0.000726874,-0.00180856,-0.001538275,-0.000996998,-0.000713683,-0.001414116,-0.001625988,-0.003659498,-0.003442683,-0.002962013,-0.005106365,-0.001797644;-0.010996393,-0.028920677,-0.013430082,-0.017294183,-0.008394988,-0.016795926,-0.022969261,-0.029357197,-0.025382219,-0.0201155,-0.04229779,-0.028819696,-0.011175707,-0.007078915,-0.007956198,-0.009266464,0.868931936,-0.006612782,-0.011193987,-0.00618844,-0.013082027,-0.023179374,-0.015606356,-0.003447795,-0.005744213,-0.016378467,-0.009390932,-0.003752513,-0.009671813,-0.005526464,-0.014153357,-0.020661475,-0.0121669,-0.015732368,-0.000197298;-0.003224017,-0.0065843,-0.00211131,-0.002255046,-0.00143721,-0.002908867,-0.002992306,-0.005059807,-0.003022039,-0.002488718,-0.005962045,-0.00368772,-0.00263285,-0.001603869,-0.001658413,-0.002494621,-0.016096534,0.949535989,-0.00528668,-0.00348044,-0.004319689,-0.005456524,-0.008816144,-0.002371367,-0.002743177,-0.012263442,-0.010091441,-0.004363786,-0.032428437,-0.004395339,-0.017793549,-0.011594343,-0.00663999,-0.008734113,-0.00064014;-0.005109723,-0.003065619,-0.006652342,-0.004662776,-0.006057692,-0.00592349,-0.004891465,-0.002491038,-0.005577527,-0.00599639,-0.006599039,-0.005525325,-0.004547937,-0.003041629,-0.004734044,-0.006270058,-0.007487648,-0.007139005,0.988340268,-0.004417067,-0.004136877,-0.00522445,-0.015617894,-0.002077319,-0.005119586,-0.007925073,-0.003718809,-0.002783021,-0.002052192,-0.005485195,-0.004534937,-0.003086931,-0.004036234,-0.006331891,-4.30297e-05;-0.031361435,-0.017111392,-0.060645971,-0.041044026,-0.049545299,-0.050666132,-0.046795872,-0.05628698,-0.044395024,-0.044618612,-0.037218248,-0.041193581,-0.041391133,-0.031123726,-0.041370889,-0.041488618,-0.021414674,-0.039602397,-0.033361823,0.975168005,-0.012585901,-0.045541027,-0.022499915,-0.017967485,-0.020740013,-0.019802708,-0.010773432,-0.003740184,-0.004399552,-0.012474767,-0.019985627,-0.011323097,-0.026497566,-0.016511191,-0.000308406;-0.017489645,-0.007314404,-0.030157995,-0.02350981,-0.032514527,-0.020234677,-0.018784986,-0.013211113,-0.021543771,-0.020527795,-0.018937572,-0.016531858,-0.017060349,-0.012419254,-0.01854132,-0.026187782,-0.007597318,-0.032488709,-0.014698324,-0.006181922,0.992926206,-0.024792385,-0.014342693,-0.007815009,-0.009718276,-0.008887965,-0.008512434,-0.004393048,-0.003430171,-0.008199643,-0.008273764,-0.006309853,-0.013290386,-0.011360562,-0.000434081;-0.001481562,-0.003256549,-0.00395929,-0.003988257,-0.004605606,-0.004164762,-0.005454509,-0.001035597,-0.004019246,-0.004921571,-0.00530914,-0.004268034,-0.005169252,-0.00371863,-0.00258534,-0.003495401,-0.003255024,-0.005043125,-0.005230877,-0.00758799,-0.006664657,0.989578257,-0.007725276,-0.00426455,-0.016171268,-0.020941349,-0.009594448,-0.010182118,-0.002884409,-0.013322508,-0.011401596,-0.009158963,-0.008974341,-0.012271616,-6.50288e-05;-0.013257914,-0.018495114,-0.023635836,-0.01970764,-0.019294701,-0.023602699,-0.018757135,-0.043683302,-0.018302248,-0.016877316,-0.034204362,-0.017285308,-0.012421717,-0.007597096,-0.010751247,-0.019064381,-0.019337281,-0.019348753,-0.017122833,-0.021026012,-0.012882647,-0.009433152,0.953946883,-0.012743327,-0.00963078,-0.056104046,-0.008640463,-0.004766334,-0.001902888,-0.00547094,-0.010269602,-0.009679115,-0.007341483,-0.009308278,-0.000612149;-0.002588989,-0.005991101,-0.004837445,-0.004330916,-0.004274225,-0.006562853,-0.003391363,-0.003023307,-0.003059925,-0.003252943,-0.008269947,-0.005500133,-0.003006648,-0.001831731,-0.002245794,-0.002673019,-0.002663237,-0.003009831,-0.001962524,-0.004798005,-0.003567612,-0.001576041,-0.003559711,0.846927701,-0.002659155,-0.005014136,-0.001008674,-0.000579947,-0.00216247,-0.001298224,-0.001126343,-0.000887266,-0.00057512,-0.001260979,-4.36263e-05;-0.000780924,-0.001373483,-0.001380056,-0.001581687,-0.002320516,-0.001763463,-0.002218018,-0.000526607,-0.001618008,-0.00162599,-0.001602792,-0.001131232,-0.002008156,-0.00160973,-0.001325819,-0.001324502,-0.000714399,-0.001092643,-0.002055718,-0.002874218,-0.001636877,-0.001294861,-0.002561291,-0.005596515,0.968826709,-0.013879002,-0.003778595,-0.00278904,-0.00053405,-0.003737713,-0.004078987,-0.002861156,-0.001219174,-0.004182051,-2.10266e-05;-0.003458555,-0.00444868,-0.006749557,-0.003837543,-0.004564367,-0.007121573,-0.009488392,-0.006860927,-0.004858666,-0.005208397,-0.008300317,-0.004971479,-0.004210415,-0.002798686,-0.003947773,-0.004307502,-0.003867538,-0.009465547,-0.013154011,-0.021603311,-0.012248606,-0.007612696,-0.03954573,-0.111721654,-0.091732256,0.899194731,-0.004326838,-0.003260327,-0.001069015,-0.005164077,-0.004701212,-0.002794818,-0.003272946,-0.006319297,-3.45637e-05;-0.003728366,-0.004929574,-0.005015694,-0.00602011,-0.006176909,-0.005998608,-0.012721932,-0.003154015,-0.007502961,-0.005576619,-0.0064724,-0.006672132,-0.006370327,-0.006923667,-0.004082264,-0.010443441,-0.006813774,-0.011679325,-0.017054147,-0.020220127,-0.021689835,-0.01514749,-0.01756699,-0.018668709,-0.02152144,-0.023011905,0.879054202,-0.028046004,-0.005692523,-0.024968857,-0.02299641,-0.011384171,-0.013939344,-0.022076509,-0.000734218;-0.017451472,-0.02379366,-0.015045045,-0.02128574,-0.015643892,-0.015845878,-0.021279998,-0.011738292,-0.017025533,-0.014789825,-0.021975425,-0.017227932,-0.016141732,-0.012100409,-0.012596042,-0.026852016,-0.022433158,-0.021310001,-0.019687106,-0.031504701,-0.035092052,-0.024074896,-0.045489405,-0.025020996,-0.031298895,-0.032015168,-0.019925231,0.781798313,-0.082882166,-0.036192309,-0.023210718,-0.013902709,-0.023330954,-0.044453646,-0.006569115;-0.002833145,-0.005253147,-0.004554051,-0.004893906,-0.006103899,-0.005738999,-0.010024356,-0.001752782,-0.004225659,-0.005799811,-0.004920918,-0.004497364,-0.00514329,-0.003655787,-0.004605026,-0.006722693,-0.004430922,-0.010388028,-0.022309652,-0.021951953,-0.042319148,-0.030067754,-0.009103979,-0.013746292,-0.009890012,-0.021067641,-0.015283139,-0.023849948,0.969003338,-0.024586798,-0.0138359,-0.019892438,-0.036113663,-0.027195219,-1.1579e-06;-0.012193135,-0.029070664,-0.037637061,-0.02208352,-0.019745269,-0.025426865,-0.060919331,-0.01296895,-0.060078486,-0.035061071,-0.031854943,-0.026859028,-0.038671882,-0.038241612,-0.037231141,-0.027231223,-0.030746983,-0.053521472,-0.050710686,-0.058523345,-0.061863148,-0.045161392,-0.042771448,-0.025229405,-0.077408878,-0.061887368,-0.063595167,-0.100316901,-0.039395931,0.852462341,-0.085933956,-0.036249566,-0.063846183,-0.079891563,-0.002852615;-0.001389659,-0.002468824,-0.001768633,-0.000834706,-0.000717963,-0.003100964,-0.003302415,-0.001025719,-0.002489143,-0.001847682,-0.00255243,-0.002657181,-0.001149827,-0.000840598,-0.001087887,-0.00202233,-0.004438474,-0.001529819,-0.00267413,-0.001626862,-0.002751407,-0.003648307,-0.003641027,-0.005182592,-0.009223939,-0.003187284,-0.002666186,-0.001509297,-0.003946056,-0.002955589,0.992659688,-0.004545075,-0.004250105,-0.008598609,-1.16376e-05;-0.000523124,-0.000405677,-0.000423461,-0.000327745,-0.000397983,-0.000345694,-0.000556251,-0.0003493,-0.000849717,-0.000564303,-0.000526547,-0.000507992,-0.000743153,-0.000600637,-0.000728553,-0.000404849,-0.000658764,-0.000483712,-0.000803955,-0.00075821,-0.001290035,-0.000601973,-0.001019238,-0.000312864,-0.001986475,-0.001149024,-0.001457711,-0.001200922,-0.000295953,-0.002259999,-0.004259452,0.985893207,-0.001440362,-0.001602184,-8.02746e-06;-0.00126252,-0.000444055,-0.00046472,-0.000385805,-0.000966525,-0.000508451,-0.000483276,-0.000160569,-0.000520592,-0.000390897,-0.000703365,-0.00047864,-0.000836386,-0.000395394,-0.00044869,-0.000480971,-0.000391574,-0.000391191,-0.000525232,-0.000576669,-0.00041377,-0.000969334,-0.000600947,-0.000319742,-0.000414631,-0.000495014,-0.000619392,-0.000556063,-9.32945e-05,-0.000594428,-0.005323035,-0.001642846,0.96577178,-0.001320904,-6.75229e-07;-0.002932232,-0.006217507,-0.005229628,-0.004339667,-0.006204246,-0.00499114,-0.012447215,-0.001889622,-0.006878352,-0.004859957,-0.005637293,-0.005206326,-0.004467287,-0.003049825,-0.004051294,-0.004435933,-0.005535019,-0.006099617,-0.007266226,-0.007522137,-0.009019608,-0.013860493,-0.012471796,-0.004718108,-0.007740699,-0.012895544,-0.017437973,-0.009891738,-0.008364198,-0.024566686,-0.017403866,-0.012489531,-0.014026314,0.921077485,-0.00186571;-1.39759e-05,-2.52242e-05,-2.32951e-05,-8.84825e-05,-2.75316e-05,-3.06553e-05,-3.17017e-05,-1.02875e-05,-1.83767e-05,-2.11395e-05,-2.14217e-05,-1.54637e-05,-3.06786e-05,-1.3416e-05,-4.76845e-05,-1.32694e-05,-6.86315e-06,-6.39855e-05,-3.79468e-05,-1.21205e-05,-3.77271e-05,-5.20396e-05,-0.000112481,-5.17696e-06,-1.29305e-05,-1.21912e-05,-3.39461e-05,-5.8201e-05,-0.000222058,-6.16742e-05,-6.59491e-05,-4.0116e-05,-5.4152e-05,-0.000115509,0.999878026;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            8.73646392e-01, -5.78661000e-04, -2.59175245e-01, -4.95743970e-02, -5.55316380e-02,
            -1.27181871e-01, -1.53532420e-02, -1.61342100e-03, -6.44217500e-03, -1.33140010e-02,
            -5.79479000e-04, -2.12050000e-04, -1.94730000e-04, -1.01236000e-04, -1.26664000e-04,
            -1.06274600e-02, -5.40087000e-04, -4.59393200e-03, -8.69679000e-04, -2.49936500e-03,
            -2.25854200e-03, -3.94663770e-02, -1.76078800e-03, -9.77682000e-04, -3.75788000e-04,
            -6.13866800e-03, -2.28343000e-04, -1.33382000e-04, -3.85660000e-04, -8.19952000e-04,
            -2.16222300e-03, -2.70548600e-03, -2.15996100e-03, -2.48901700e-03, -2.50289000e-02
        ],
              [
                  -2.35429900e-03, 9.22973090e-01, -2.80849200e-03, -2.78350600e-03,
                  -2.32096900e-03, -4.24980500e-03, -4.82723700e-03, -4.71836678e-01,
                  -3.03588790e-02, -3.71974200e-03, -7.00274670e-02, -5.20029840e-02,
                  -2.91153800e-03, -1.12861800e-03, -1.58406400e-03, -5.09945100e-03,
                  -1.09191662e-01, -1.79073170e-02, -5.77412000e-04, -5.20574000e-04,
                  -1.06199000e-03, -2.06298700e-03, -4.99784700e-03, -3.39516400e-03,
                  -3.14828600e-03, -2.85229100e-03, -4.65793000e-04, -2.66682000e-04,
                  -1.61016100e-03, -8.07234000e-04, -3.06520700e-03, -1.79645300e-03,
                  -1.51586700e-03, -2.70259300e-03, -6.30789720e-02
              ],
              [
                  -6.33833790e-02, -8.59104000e-04, 8.40702521e-01, -4.96443400e-03,
                  -1.01407016e-01, -2.52871600e-03, -3.19557900e-03, -1.42513900e-03,
                  -1.15205030e-02, -3.85197900e-03, -2.60618400e-03, -1.84842700e-03,
                  -1.69456900e-03, -1.38088500e-03, -1.11943100e-03, -2.78536300e-03,
                  -1.10127500e-03, -1.48681900e-03, -1.67385000e-03, -4.62608500e-03,
                  -4.74507100e-03, -1.53086001e-01, -1.80139200e-03, -5.77481400e-03,
                  -4.20067000e-03, -1.79016400e-03, -1.43380000e-03, -6.79566000e-04,
                  -2.94701000e-04, -1.86180200e-03, -7.42721900e-03, -9.02346200e-03,
                  -1.26853960e-02, -7.43701900e-03, -3.18999100e-03
              ],
              [
                  -1.85618100e-03, -9.88801000e-04, -1.58420700e-03, 6.51323876e-01,
                  -5.84062000e-02, -3.40054200e-03, -5.92668200e-03, -4.24688000e-04,
                  -3.53313500e-03, -1.38809350e-02, -3.90667100e-03, -1.92345600e-03,
                  -2.31611400e-03, -1.85155900e-03, -4.64148900e-03, -2.30087880e-02,
                  -8.24310000e-04, -2.53101600e-03, -1.64429400e-03, -2.42033500e-03,
                  -3.30973300e-03, -2.91681200e-03, -1.97563400e-03, -3.07261000e-03,
                  -1.94817000e-03, -1.84277000e-03, -7.07605000e-04, -4.25935000e-04,
                  -3.92042000e-04, -1.44346100e-03, -2.83894400e-03, -1.03965600e-03,
                  -3.52486600e-03, -4.86862400e-03, -1.00120000e-04
              ],
              [
                  -1.55707000e-04, -5.65087000e-05, -1.31264000e-04, -1.12714190e-02,
                  7.85526327e-01, -4.75366000e-04, -7.32601000e-04, -3.65431000e-05,
                  -2.31047000e-04, -9.32479000e-04, -2.45296000e-04, -1.50184000e-04,
                  -1.90717000e-04, -2.80806000e-04, -1.76134400e-03, -4.97463800e-03,
                  -8.66439000e-05, -1.09017000e-04, -3.88298000e-04, -3.38559000e-04,
                  -2.64887000e-04, -1.30199000e-04, -2.15471000e-04, -1.07699000e-04,
                  -1.28098000e-04, -1.52806000e-04, -2.34722000e-04, -3.02590000e-05,
                  -9.10679000e-06, -9.09710000e-05, -5.76995000e-04, -9.75224000e-05,
                  -1.24782000e-04, -4.26651000e-04, -1.59646000e-06
              ],
              [
                  -1.73271900e-03, -1.53971700e-03, -1.68589400e-03, -1.42460000e-03,
                  -1.92907400e-03, 7.47173565e-01, -1.13769950e-02, -3.27804000e-04,
                  -1.47708300e-03, -3.14878800e-03, -7.66342400e-03, -3.59363900e-03,
                  -3.01057900e-03, -1.59714700e-03, -2.68053300e-03, -7.21306280e-02,
                  -8.67512000e-04, -3.10570580e-02, -1.20833700e-03, -1.35510000e-03,
                  -1.23268500e-03, -2.26983800e-03, -1.23807400e-03, -6.14261000e-04,
                  -3.92538000e-04, -2.46283000e-03, -5.98313000e-04, -3.03450000e-04,
                  -2.66669800e-03, -8.95028000e-04, -1.90757800e-03, -2.70894900e-03,
                  -1.35978100e-03, -2.67528700e-03, -2.93231000e-05
              ],
              [
                  -2.44537800e-03, -2.77182700e-03, -2.43901710e-02, -1.16725740e-02,
                  -1.48943880e-02, -1.39479680e-02, 7.54337124e-01, -1.53601400e-03,
                  -1.50101310e-02, -1.63603680e-02, -2.10762780e-02, -4.96863600e-03,
                  -6.99696900e-03, -8.44742000e-03, -4.15189500e-03, -1.88352280e-02,
                  -3.15051100e-03, -4.19833100e-03, -8.13985500e-03, -1.12920640e-02,
                  -1.14875430e-02, -8.29640500e-03, -6.37667600e-03, -3.33291900e-03,
                  -5.09992600e-03, -1.33578560e-02, -9.69479000e-03, -1.23002740e-02,
                  -2.14753400e-03, -1.99028360e-02, -1.83656820e-02, -1.82563000e-02,
                  -8.98407500e-03, -2.34503490e-02, -1.71420000e-04
              ],
              [
                  -1.22966890e-02, -6.19751400e-03, -3.18973600e-03, -5.24662400e-03,
                  -4.10644400e-03, -4.72870400e-03, -4.42581600e-03, 8.89537770e-01,
                  -4.63487200e-02, -8.88800200e-03, -1.90292490e-02, -1.24731510e-02,
                  -3.61508700e-03, -1.89258200e-03, -1.84719000e-03, -3.78790100e-03,
                  -2.44489840e-02, -1.10625650e-02, -4.65650300e-03, -5.25118800e-03,
                  -3.51007200e-03, -3.51833200e-03, -5.30297940e-02, -7.07011640e-02,
                  -9.19706870e-02, -2.01308340e-02, -3.16980700e-03, -1.12625400e-03,
                  -1.09738700e-03, -4.45548200e-03, -8.23397800e-03, -3.07902500e-03,
                  -2.78392000e-03, -5.07863200e-03, -4.14333000e-05
              ],
              [
                  -3.60253300e-02, -9.27348700e-03, -9.18874100e-03, -6.71882620e-02,
                  -3.73160620e-02, -3.35657200e-02, -3.43238520e-02, -1.66777580e-02,
                  7.54820444e-01, -2.15229144e-01, -3.65473730e-02, -1.50059200e-02,
                  -1.02181150e-02, -1.71763450e-02, -1.06072780e-02, -2.56625630e-02,
                  -6.44150400e-03, -1.06374800e-02, -5.50137400e-03, -2.67382600e-03,
                  -2.11434700e-03, -4.45096900e-03, -3.47196700e-03, -4.76737900e-03,
                  -4.10387700e-03, -4.35696900e-03, -1.23356900e-03, -6.46906000e-04,
                  -1.87237600e-03, -4.67927000e-03, -9.91215100e-03, -3.74077300e-03,
                  -6.21861740e-02, -9.77193700e-03, -1.97471000e-04
              ],
              [
                  -4.64423500e-03, -5.48007800e-03, -1.85361920e-02, -1.08648140e-02,
                  -3.87099750e-02, -8.56205000e-03, -1.62979880e-02, -3.06799900e-03,
                  -1.75425980e-02, 8.52569750e-01, -1.14481230e-02, -6.91939000e-03,
                  -2.36212310e-02, -2.30094030e-02, -3.40191380e-02, -3.29576200e-02,
                  -2.38333900e-03, -1.86568200e-02, -1.57057080e-02, -4.33561100e-03,
                  -5.00357100e-03, -4.14310100e-03, -1.07808790e-02, -2.97790500e-03,
                  -3.68196500e-03, -6.33803900e-03, -3.17575300e-03, -5.88139000e-04,
                  -1.34618700e-03, -2.83659000e-03, -3.33880000e-03, -1.31373000e-03,
                  -5.31280100e-03, -4.58211700e-03, -6.24787000e-05
              ],
              [
                  -1.57033000e-03, -4.40443200e-03, -5.25770200e-03, -2.11421100e-03,
                  -1.60913400e-03, -7.33382000e-03, -1.22566700e-03, -1.66287100e-03,
                  -5.54292700e-03, -5.52242200e-03, 8.63103446e-01, -1.01264910e-02,
                  -4.96587800e-03, -9.64662100e-03, -6.52125900e-03, -6.84673200e-03,
                  -1.76150900e-03, -8.96454080e-02, -3.46350000e-03, -9.89584000e-04,
                  -9.93221000e-04, -3.20720400e-03, -1.43017100e-03, -4.67887000e-04,
                  -6.29122000e-04, -1.44819600e-03, -1.10785300e-03, -1.16744000e-04,
                  -1.74404600e-03, -9.73874000e-04, -1.49653000e-03, -1.63641000e-03,
                  -1.93872600e-03, -1.85037200e-03, -2.93181000e-05
              ],
              [
                  -4.29880500e-03, -1.85326250e-02, -1.10378260e-02, -5.19694100e-03,
                  -1.00017690e-02, -2.21054400e-02, -8.68889400e-03, -5.44955300e-03,
                  -1.26055920e-02, -2.33703940e-02, -3.29890080e-02, 6.70935499e-01,
                  -1.56950122e-01, -6.46402280e-02, -8.83797280e-02, -7.57037190e-02,
                  -6.67943700e-03, -8.81291260e-02, -1.48087760e-02, -3.27352200e-03,
                  -2.92148800e-03, -3.97887400e-03, -6.16625900e-03, -4.62109900e-03,
                  -3.77231900e-03, -7.94078200e-03, -3.20752900e-03, -5.26760000e-04,
                  -2.49509100e-03, -3.56781300e-03, -4.28648300e-03, -1.83800600e-03,
                  -2.17525600e-03, -4.45667700e-03, -1.54051000e-04
              ],
              [
                  -7.34264600e-03, -1.51933460e-02, -4.10638900e-03, -9.87837400e-03,
                  -7.65059900e-03, -1.01561540e-02, -7.53240300e-03, -6.94062200e-03,
                  -8.22495800e-03, -1.34893680e-02, -2.16697710e-02, -2.38729460e-02,
                  8.39923845e-01, -1.75441150e-02, -3.88519030e-02, -1.37138390e-02,
                  -8.69580100e-03, -1.91724330e-02, -2.36748460e-02, -2.89761800e-03,
                  -2.68014400e-03, -2.39438400e-03, -5.92374500e-03, -1.01558500e-02,
                  -8.02596300e-03, -8.00966600e-03, -2.86766300e-03, -8.81810000e-04,
                  -1.67340100e-03, -2.86899400e-03, -6.43931600e-03, -2.22901300e-03,
                  -3.95957100e-03, -4.05124000e-03, -3.48229000e-04
              ],
              [
                  -2.05310200e-03, -7.36156300e-03, -3.97327700e-03, -7.02759600e-03,
                  -5.41742600e-03, -8.14768300e-03, -1.07994070e-02, -3.69302500e-03,
                  -1.07907540e-02, -1.47533590e-02, -1.23935130e-02, -1.86877950e-02,
                  -1.06936267e-01, 6.27283316e-01, -6.44719400e-02, -3.09045040e-02,
                  -2.50800970e-02, -3.97678090e-02, -3.26290100e-02, -8.86479700e-03,
                  -8.92372200e-03, -5.50974400e-03, -8.35208800e-03, -4.02328200e-03,
                  -5.73490300e-03, -1.08797780e-02, -4.33723020e-02, -4.02329300e-03,
                  -2.66761900e-03, -1.83651800e-02, -1.78942740e-02, -1.11887720e-02,
                  -2.56985060e-02, -1.37958600e-02, -1.11331700e-03
              ],
              [
                  -4.81975200e-03, -5.13424300e-03, -2.01833400e-03, -2.89466000e-03,
                  -2.65222500e-03, -4.04398600e-03, -3.36527600e-03, -1.14951200e-03,
                  -2.50715300e-03, -4.81600600e-03, -5.93484400e-03, -7.05070600e-03,
                  -1.62724460e-02, -4.62688700e-03, 6.86491500e-01, -7.18769100e-03,
                  -3.18613100e-03, -5.57383400e-03, -8.08245930e-02, -4.35952800e-03,
                  -4.48219900e-03, -1.94638500e-03, -3.83890810e-02, -3.88115540e-02,
                  -5.31724400e-02, -1.64184110e-02, -3.46922700e-03, -1.05176400e-03,
                  -1.03197100e-03, -4.22553900e-03, -1.71531640e-02, -2.37326300e-03,
                  -1.57340700e-03, -7.94159000e-03, -2.57602000e-04
              ],
              [
                  -6.31183000e-04, -8.59341000e-04, -9.52911000e-04, -4.40474100e-03,
                  -2.65629000e-03, -3.91535100e-03, -4.14845700e-03, -5.63763000e-04,
                  -1.67816500e-03, -2.85084700e-03, -3.17582000e-03, -9.57033400e-03,
                  -3.64435400e-03, -2.25014800e-03, -4.77563000e-03, 9.53683887e-01,
                  -1.37846100e-03, -4.94419100e-03, -1.80850000e-03, -1.12912800e-03,
                  -1.41367400e-03, -2.25629000e-03, -2.51077800e-03, -7.26874000e-04,
                  -1.80856000e-03, -1.53827500e-03, -9.96998000e-04, -7.13683000e-04,
                  -1.41411600e-03, -1.62598800e-03, -3.65949800e-03, -3.44268300e-03,
                  -2.96201300e-03, -5.10636500e-03, -1.79764400e-03
              ],
              [
                  -1.09963930e-02, -2.89206770e-02, -1.34300820e-02, -1.72941830e-02,
                  -8.39498800e-03, -1.67959260e-02, -2.29692610e-02, -2.93571970e-02,
                  -2.53822190e-02, -2.01155000e-02, -4.22977900e-02, -2.88196960e-02,
                  -1.11757070e-02, -7.07891500e-03, -7.95619800e-03, -9.26646400e-03,
                  8.68931936e-01, -6.61278200e-03, -1.11939870e-02, -6.18844000e-03,
                  -1.30820270e-02, -2.31793740e-02, -1.56063560e-02, -3.44779500e-03,
                  -5.74421300e-03, -1.63784670e-02, -9.39093200e-03, -3.75251300e-03,
                  -9.67181300e-03, -5.52646400e-03, -1.41533570e-02, -2.06614750e-02,
                  -1.21669000e-02, -1.57323680e-02, -1.97298000e-04
              ],
              [
                  -3.22401700e-03, -6.58430000e-03, -2.11131000e-03, -2.25504600e-03,
                  -1.43721000e-03, -2.90886700e-03, -2.99230600e-03, -5.05980700e-03,
                  -3.02203900e-03, -2.48871800e-03, -5.96204500e-03, -3.68772000e-03,
                  -2.63285000e-03, -1.60386900e-03, -1.65841300e-03, -2.49462100e-03,
                  -1.60965340e-02, 9.49535989e-01, -5.28668000e-03, -3.48044000e-03,
                  -4.31968900e-03, -5.45652400e-03, -8.81614400e-03, -2.37136700e-03,
                  -2.74317700e-03, -1.22634420e-02, -1.00914410e-02, -4.36378600e-03,
                  -3.24284370e-02, -4.39533900e-03, -1.77935490e-02, -1.15943430e-02,
                  -6.63999000e-03, -8.73411300e-03, -6.40140000e-04
              ],
              [
                  -5.10972300e-03, -3.06561900e-03, -6.65234200e-03, -4.66277600e-03,
                  -6.05769200e-03, -5.92349000e-03, -4.89146500e-03, -2.49103800e-03,
                  -5.57752700e-03, -5.99639000e-03, -6.59903900e-03, -5.52532500e-03,
                  -4.54793700e-03, -3.04162900e-03, -4.73404400e-03, -6.27005800e-03,
                  -7.48764800e-03, -7.13900500e-03, 9.88340268e-01, -4.41706700e-03,
                  -4.13687700e-03, -5.22445000e-03, -1.56178940e-02, -2.07731900e-03,
                  -5.11958600e-03, -7.92507300e-03, -3.71880900e-03, -2.78302100e-03,
                  -2.05219200e-03, -5.48519500e-03, -4.53493700e-03, -3.08693100e-03,
                  -4.03623400e-03, -6.33189100e-03, -4.30297000e-05
              ],
              [
                  -3.13614350e-02, -1.71113920e-02, -6.06459710e-02, -4.10440260e-02,
                  -4.95452990e-02, -5.06661320e-02, -4.67958720e-02, -5.62869800e-02,
                  -4.43950240e-02, -4.46186120e-02, -3.72182480e-02, -4.11935810e-02,
                  -4.13911330e-02, -3.11237260e-02, -4.13708890e-02, -4.14886180e-02,
                  -2.14146740e-02, -3.96023970e-02, -3.33618230e-02, 9.75168005e-01,
                  -1.25859010e-02, -4.55410270e-02, -2.24999150e-02, -1.79674850e-02,
                  -2.07400130e-02, -1.98027080e-02, -1.07734320e-02, -3.74018400e-03,
                  -4.39955200e-03, -1.24747670e-02, -1.99856270e-02, -1.13230970e-02,
                  -2.64975660e-02, -1.65111910e-02, -3.08406000e-04
              ],
              [
                  -1.74896450e-02, -7.31440400e-03, -3.01579950e-02, -2.35098100e-02,
                  -3.25145270e-02, -2.02346770e-02, -1.87849860e-02, -1.32111130e-02,
                  -2.15437710e-02, -2.05277950e-02, -1.89375720e-02, -1.65318580e-02,
                  -1.70603490e-02, -1.24192540e-02, -1.85413200e-02, -2.61877820e-02,
                  -7.59731800e-03, -3.24887090e-02, -1.46983240e-02, -6.18192200e-03,
                  9.92926206e-01, -2.47923850e-02, -1.43426930e-02, -7.81500900e-03,
                  -9.71827600e-03, -8.88796500e-03, -8.51243400e-03, -4.39304800e-03,
                  -3.43017100e-03, -8.19964300e-03, -8.27376400e-03, -6.30985300e-03,
                  -1.32903860e-02, -1.13605620e-02, -4.34081000e-04
              ],
              [
                  -1.48156200e-03, -3.25654900e-03, -3.95929000e-03, -3.98825700e-03,
                  -4.60560600e-03, -4.16476200e-03, -5.45450900e-03, -1.03559700e-03,
                  -4.01924600e-03, -4.92157100e-03, -5.30914000e-03, -4.26803400e-03,
                  -5.16925200e-03, -3.71863000e-03, -2.58534000e-03, -3.49540100e-03,
                  -3.25502400e-03, -5.04312500e-03, -5.23087700e-03, -7.58799000e-03,
                  -6.66465700e-03, 9.89578257e-01, -7.72527600e-03, -4.26455000e-03,
                  -1.61712680e-02, -2.09413490e-02, -9.59444800e-03, -1.01821180e-02,
                  -2.88440900e-03, -1.33225080e-02, -1.14015960e-02, -9.15896300e-03,
                  -8.97434100e-03, -1.22716160e-02, -6.50288000e-05
              ],
              [
                  -1.32579140e-02, -1.84951140e-02, -2.36358360e-02, -1.97076400e-02,
                  -1.92947010e-02, -2.36026990e-02, -1.87571350e-02, -4.36833020e-02,
                  -1.83022480e-02, -1.68773160e-02, -3.42043620e-02, -1.72853080e-02,
                  -1.24217170e-02, -7.59709600e-03, -1.07512470e-02, -1.90643810e-02,
                  -1.93372810e-02, -1.93487530e-02, -1.71228330e-02, -2.10260120e-02,
                  -1.28826470e-02, -9.43315200e-03, 9.53946883e-01, -1.27433270e-02,
                  -9.63078000e-03, -5.61040460e-02, -8.64046300e-03, -4.76633400e-03,
                  -1.90288800e-03, -5.47094000e-03, -1.02696020e-02, -9.67911500e-03,
                  -7.34148300e-03, -9.30827800e-03, -6.12149000e-04
              ],
              [
                  -2.58898900e-03, -5.99110100e-03, -4.83744500e-03, -4.33091600e-03,
                  -4.27422500e-03, -6.56285300e-03, -3.39136300e-03, -3.02330700e-03,
                  -3.05992500e-03, -3.25294300e-03, -8.26994700e-03, -5.50013300e-03,
                  -3.00664800e-03, -1.83173100e-03, -2.24579400e-03, -2.67301900e-03,
                  -2.66323700e-03, -3.00983100e-03, -1.96252400e-03, -4.79800500e-03,
                  -3.56761200e-03, -1.57604100e-03, -3.55971100e-03, 8.46927701e-01,
                  -2.65915500e-03, -5.01413600e-03, -1.00867400e-03, -5.79947000e-04,
                  -2.16247000e-03, -1.29822400e-03, -1.12634300e-03, -8.87266000e-04,
                  -5.75120000e-04, -1.26097900e-03, -4.36263000e-05
              ],
              [
                  -7.80924000e-04, -1.37348300e-03, -1.38005600e-03, -1.58168700e-03,
                  -2.32051600e-03, -1.76346300e-03, -2.21801800e-03, -5.26607000e-04,
                  -1.61800800e-03, -1.62599000e-03, -1.60279200e-03, -1.13123200e-03,
                  -2.00815600e-03, -1.60973000e-03, -1.32581900e-03, -1.32450200e-03,
                  -7.14399000e-04, -1.09264300e-03, -2.05571800e-03, -2.87421800e-03,
                  -1.63687700e-03, -1.29486100e-03, -2.56129100e-03, -5.59651500e-03,
                  9.68826709e-01, -1.38790020e-02, -3.77859500e-03, -2.78904000e-03,
                  -5.34050000e-04, -3.73771300e-03, -4.07898700e-03, -2.86115600e-03,
                  -1.21917400e-03, -4.18205100e-03, -2.10266000e-05
              ],
              [
                  -3.45855500e-03, -4.44868000e-03, -6.74955700e-03, -3.83754300e-03,
                  -4.56436700e-03, -7.12157300e-03, -9.48839200e-03, -6.86092700e-03,
                  -4.85866600e-03, -5.20839700e-03, -8.30031700e-03, -4.97147900e-03,
                  -4.21041500e-03, -2.79868600e-03, -3.94777300e-03, -4.30750200e-03,
                  -3.86753800e-03, -9.46554700e-03, -1.31540110e-02, -2.16033110e-02,
                  -1.22486060e-02, -7.61269600e-03, -3.95457300e-02, -1.11721654e-01,
                  -9.17322560e-02, 8.99194731e-01, -4.32683800e-03, -3.26032700e-03,
                  -1.06901500e-03, -5.16407700e-03, -4.70121200e-03, -2.79481800e-03,
                  -3.27294600e-03, -6.31929700e-03, -3.45637000e-05
              ],
              [
                  -3.72836600e-03, -4.92957400e-03, -5.01569400e-03, -6.02011000e-03,
                  -6.17690900e-03, -5.99860800e-03, -1.27219320e-02, -3.15401500e-03,
                  -7.50296100e-03, -5.57661900e-03, -6.47240000e-03, -6.67213200e-03,
                  -6.37032700e-03, -6.92366700e-03, -4.08226400e-03, -1.04434410e-02,
                  -6.81377400e-03, -1.16793250e-02, -1.70541470e-02, -2.02201270e-02,
                  -2.16898350e-02, -1.51474900e-02, -1.75669900e-02, -1.86687090e-02,
                  -2.15214400e-02, -2.30119050e-02, 8.79054202e-01, -2.80460040e-02,
                  -5.69252300e-03, -2.49688570e-02, -2.29964100e-02, -1.13841710e-02,
                  -1.39393440e-02, -2.20765090e-02, -7.34218000e-04
              ],
              [
                  -1.74514720e-02, -2.37936600e-02, -1.50450450e-02, -2.12857400e-02,
                  -1.56438920e-02, -1.58458780e-02, -2.12799980e-02, -1.17382920e-02,
                  -1.70255330e-02, -1.47898250e-02, -2.19754250e-02, -1.72279320e-02,
                  -1.61417320e-02, -1.21004090e-02, -1.25960420e-02, -2.68520160e-02,
                  -2.24331580e-02, -2.13100010e-02, -1.96871060e-02, -3.15047010e-02,
                  -3.50920520e-02, -2.40748960e-02, -4.54894050e-02, -2.50209960e-02,
                  -3.12988950e-02, -3.20151680e-02, -1.99252310e-02, 7.81798313e-01,
                  -8.28821660e-02, -3.61923090e-02, -2.32107180e-02, -1.39027090e-02,
                  -2.33309540e-02, -4.44536460e-02, -6.56911500e-03
              ],
              [
                  -2.83314500e-03, -5.25314700e-03, -4.55405100e-03, -4.89390600e-03,
                  -6.10389900e-03, -5.73899900e-03, -1.00243560e-02, -1.75278200e-03,
                  -4.22565900e-03, -5.79981100e-03, -4.92091800e-03, -4.49736400e-03,
                  -5.14329000e-03, -3.65578700e-03, -4.60502600e-03, -6.72269300e-03,
                  -4.43092200e-03, -1.03880280e-02, -2.23096520e-02, -2.19519530e-02,
                  -4.23191480e-02, -3.00677540e-02, -9.10397900e-03, -1.37462920e-02,
                  -9.89001200e-03, -2.10676410e-02, -1.52831390e-02, -2.38499480e-02,
                  9.69003338e-01, -2.45867980e-02, -1.38359000e-02, -1.98924380e-02,
                  -3.61136630e-02, -2.71952190e-02, -1.15790000e-06
              ],
              [
                  -1.21931350e-02, -2.90706640e-02, -3.76370610e-02, -2.20835200e-02,
                  -1.97452690e-02, -2.54268650e-02, -6.09193310e-02, -1.29689500e-02,
                  -6.00784860e-02, -3.50610710e-02, -3.18549430e-02, -2.68590280e-02,
                  -3.86718820e-02, -3.82416120e-02, -3.72311410e-02, -2.72312230e-02,
                  -3.07469830e-02, -5.35214720e-02, -5.07106860e-02, -5.85233450e-02,
                  -6.18631480e-02, -4.51613920e-02, -4.27714480e-02, -2.52294050e-02,
                  -7.74088780e-02, -6.18873680e-02, -6.35951670e-02, -1.00316901e-01,
                  -3.93959310e-02, 8.52462341e-01, -8.59339560e-02, -3.62495660e-02,
                  -6.38461830e-02, -7.98915630e-02, -2.85261500e-03
              ],
              [
                  -1.38965900e-03, -2.46882400e-03, -1.76863300e-03, -8.34706000e-04,
                  -7.17963000e-04, -3.10096400e-03, -3.30241500e-03, -1.02571900e-03,
                  -2.48914300e-03, -1.84768200e-03, -2.55243000e-03, -2.65718100e-03,
                  -1.14982700e-03, -8.40598000e-04, -1.08788700e-03, -2.02233000e-03,
                  -4.43847400e-03, -1.52981900e-03, -2.67413000e-03, -1.62686200e-03,
                  -2.75140700e-03, -3.64830700e-03, -3.64102700e-03, -5.18259200e-03,
                  -9.22393900e-03, -3.18728400e-03, -2.66618600e-03, -1.50929700e-03,
                  -3.94605600e-03, -2.95558900e-03, 9.92659688e-01, -4.54507500e-03,
                  -4.25010500e-03, -8.59860900e-03, -1.16376000e-05
              ],
              [
                  -5.23124000e-04, -4.05677000e-04, -4.23461000e-04, -3.27745000e-04,
                  -3.97983000e-04, -3.45694000e-04, -5.56251000e-04, -3.49300000e-04,
                  -8.49717000e-04, -5.64303000e-04, -5.26547000e-04, -5.07992000e-04,
                  -7.43153000e-04, -6.00637000e-04, -7.28553000e-04, -4.04849000e-04,
                  -6.58764000e-04, -4.83712000e-04, -8.03955000e-04, -7.58210000e-04,
                  -1.29003500e-03, -6.01973000e-04, -1.01923800e-03, -3.12864000e-04,
                  -1.98647500e-03, -1.14902400e-03, -1.45771100e-03, -1.20092200e-03,
                  -2.95953000e-04, -2.25999900e-03, -4.25945200e-03, 9.85893207e-01,
                  -1.44036200e-03, -1.60218400e-03, -8.02746000e-06
              ],
              [
                  -1.26252000e-03, -4.44055000e-04, -4.64720000e-04, -3.85805000e-04,
                  -9.66525000e-04, -5.08451000e-04, -4.83276000e-04, -1.60569000e-04,
                  -5.20592000e-04, -3.90897000e-04, -7.03365000e-04, -4.78640000e-04,
                  -8.36386000e-04, -3.95394000e-04, -4.48690000e-04, -4.80971000e-04,
                  -3.91574000e-04, -3.91191000e-04, -5.25232000e-04, -5.76669000e-04,
                  -4.13770000e-04, -9.69334000e-04, -6.00947000e-04, -3.19742000e-04,
                  -4.14631000e-04, -4.95014000e-04, -6.19392000e-04, -5.56063000e-04,
                  -9.32945000e-05, -5.94428000e-04, -5.32303500e-03, -1.64284600e-03,
                  9.65771780e-01, -1.32090400e-03, -6.75229000e-07
              ],
              [
                  -2.93223200e-03, -6.21750700e-03, -5.22962800e-03, -4.33966700e-03,
                  -6.20424600e-03, -4.99114000e-03, -1.24472150e-02, -1.88962200e-03,
                  -6.87835200e-03, -4.85995700e-03, -5.63729300e-03, -5.20632600e-03,
                  -4.46728700e-03, -3.04982500e-03, -4.05129400e-03, -4.43593300e-03,
                  -5.53501900e-03, -6.09961700e-03, -7.26622600e-03, -7.52213700e-03,
                  -9.01960800e-03, -1.38604930e-02, -1.24717960e-02, -4.71810800e-03,
                  -7.74069900e-03, -1.28955440e-02, -1.74379730e-02, -9.89173800e-03,
                  -8.36419800e-03, -2.45666860e-02, -1.74038660e-02, -1.24895310e-02,
                  -1.40263140e-02, 9.21077485e-01, -1.86571000e-03
              ],
              [
                  -1.39759000e-05, -2.52242000e-05, -2.32951000e-05, -8.84825000e-05,
                  -2.75316000e-05, -3.06553000e-05, -3.17017000e-05, -1.02875000e-05,
                  -1.83767000e-05, -2.11395000e-05, -2.14217000e-05, -1.54637000e-05,
                  -3.06786000e-05, -1.34160000e-05, -4.76845000e-05, -1.32694000e-05,
                  -6.86315000e-06, -6.39855000e-05, -3.79468000e-05, -1.21205000e-05,
                  -3.77271000e-05, -5.20396000e-05, -1.12481000e-04, -5.17696000e-06,
                  -1.29305000e-05, -1.21912000e-05, -3.39461000e-05, -5.82010000e-05,
                  -2.22058000e-04, -6.16742000e-05, -6.59491000e-05, -4.01160000e-05,
                  -5.41520000e-05, -1.15509000e-04, 9.99878026e-01
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def ia_matrix_2007():
    """
    Real Name: b'ia matrix 2007'
    Original Eqn: b'0.880942664,-0.000558434,-0.255589334,-0.049230418,-0.054939699,-0.120320652,-0.015975383,-0.001889974,-0.00655901,-0.012307622,-0.000553514,-0.000193687,-0.000172585,-8.7438e-05,-0.000114068,-0.010462317,-0.000499416,-0.003305317,-0.000896418,-0.002297029,-0.002283445,-0.038487253,-0.001715266,-0.000864287,-0.000361627,-0.006509085,-0.000206132,-0.000147712,-0.000377055,-0.000830846,-0.002106896,-0.0026346,-0.002109457,-0.002476042,-0.028660158;-0.002195204,0.915781723,-0.00278563,-0.002946155,-0.002386478,-0.004165866,-0.004708937,-0.443794268,-0.029621479,-0.003678071,-0.068806616,-0.050207243,-0.002533004,-0.00101534,-0.001484548,-0.005088815,-0.106609079,-0.018722503,-0.000552766,-0.000502553,-0.001020612,-0.002052725,-0.004923196,-0.003156485,-0.003603614,-0.002910779,-0.000440509,-0.000258582,-0.00144268,-0.000758565,-0.003168821,-0.001544114,-0.001587811,-0.002682714,-0.063468852;-0.067025997,-0.000934072,0.835976229,-0.005467563,-0.104246785,-0.002843698,-0.003471727,-0.001790394,-0.012353721,-0.004057437,-0.002823068,-0.00199329,-0.001786182,-0.001438201,-0.001186805,-0.002921176,-0.00117666,-0.001607159,-0.001674205,-0.004702569,-0.00474087,-0.154833857,-0.001849239,-0.005842608,-0.004438143,-0.001814136,-0.00140711,-0.000715459,-0.00030874,-0.00191057,-0.007402537,-0.00901568,-0.012652709,-0.007316499,-0.002849029;-0.001769008,-0.001095153,-0.001649055,0.638283714,-0.060245806,-0.003160779,-0.006388496,-0.000518073,-0.003415939,-0.014586259,-0.004041883,-0.001944882,-0.002300866,-0.001790356,-0.004230988,-0.023680158,-0.000953238,-0.002434633,-0.001615749,-0.002549472,-0.003015608,-0.002843163,-0.002039278,-0.003103408,-0.002122255,-0.001954075,-0.000667888,-0.00045021,-0.000401018,-0.001501775,-0.002891901,-0.001108129,-0.003665785,-0.004500576,-7.05294e-05;-0.000154658,-5.82186e-05,-0.000130786,-0.012323581,0.779528919,-0.000479752,-0.000664946,-4.10119e-05,-0.000241362,-0.000927583,-0.000248218,-0.000144156,-0.000184082,-0.00028486,-0.001892014,-0.005367518,-8.63831e-05,-0.000105979,-0.000371955,-0.00032227,-0.000269953,-0.000123719,-0.000244854,-9.54716e-05,-0.000137984,-0.00016401,-0.000232944,-3.35435e-05,-9.72326e-06,-9.41628e-05,-0.000732372,-0.000107599,-0.000239632,-0.000439559,-1.28632e-06;-0.001672384,-0.001668492,-0.001752618,-0.001542478,-0.002018751,0.737317107,-0.01234069,-0.000366759,-0.001533569,-0.003137585,-0.00827143,-0.003789223,-0.003079825,-0.001613553,-0.00267203,-0.075342943,-0.000812325,-0.030224373,-0.001309344,-0.001300046,-0.001234571,-0.002302044,-0.001258695,-0.000614343,-0.000400009,-0.002293822,-0.000553077,-0.000302388,-0.002252078,-0.000890219,-0.002071847,-0.002915716,-0.001452856,-0.002677121,-2.286e-05;-0.002405062,-0.002944551,-0.024648043,-0.0120444,-0.015124824,-0.014441215,0.749784127,-0.001809326,-0.014852935,-0.015997056,-0.021665426,-0.005068361,-0.006660093,-0.008105658,-0.004091493,-0.01939646,-0.003119925,-0.004203785,-0.008315386,-0.011210954,-0.010929731,-0.008098959,-0.006546251,-0.003326959,-0.004657873,-0.013315976,-0.009415052,-0.012694426,-0.002047419,-0.019983,-0.018117461,-0.018761266,-0.00930171,-0.023538108,-0.000149384;-0.011996286,-0.006272476,-0.00309441,-0.005015804,-0.004073623,-0.004437576,-0.00427055,0.901909306,-0.04275612,-0.00852248,-0.018518099,-0.012249103,-0.003473786,-0.001775192,-0.001734584,-0.00375568,-0.026610578,-0.010249672,-0.005049386,-0.004525894,-0.003489515,-0.003368801,-0.053960519,-0.058361064,-0.091847558,-0.020969707,-0.003220886,-0.001165034,-0.001061316,-0.004426697,-0.008204659,-0.002933321,-0.002678651,-0.00482234,-2.80191e-05;-0.037577704,-0.010466514,-0.009461619,-0.067317109,-0.038327549,-0.035531611,-0.036057025,-0.018543612,0.748776996,-0.221470999,-0.038545379,-0.015513545,-0.010267434,-0.017697861,-0.01060629,-0.026704111,-0.006829969,-0.010900191,-0.005760062,-0.00278443,-0.002190316,-0.00467709,-0.00339193,-0.004543469,-0.003830403,-0.004505024,-0.00122271,-0.000692513,-0.002085608,-0.004851038,-0.009669065,-0.003977429,-0.064078931,-0.010477862,-0.000160148;-0.004670572,-0.005862232,-0.01921605,-0.011109047,-0.039382704,-0.008354608,-0.016948607,-0.003230502,-0.017616236,0.847841302,-0.012113035,-0.006912985,-0.022978318,-0.022951402,-0.03331125,-0.033419047,-0.002441716,-0.01861943,-0.015614811,-0.004341448,-0.004913815,-0.004203323,-0.011373599,-0.002772077,-0.003869552,-0.006490456,-0.003077427,-0.000624394,-0.0013048,-0.002860597,-0.00331687,-0.001464327,-0.005192018,-0.004586962,-5.35151e-05;-0.001514718,-0.004503401,-0.005344907,-0.002123106,-0.001656298,-0.007125934,-0.001255802,-0.002067483,-0.005633043,-0.005427945,0.856049479,-0.010597201,-0.004966021,-0.009790723,-0.006355513,-0.007304057,-0.001794795,-0.094188202,-0.003601868,-0.000985001,-0.001018191,-0.003291457,-0.001473936,-0.000435769,-0.000665638,-0.00147678,-0.001087399,-0.000118165,-0.00171914,-0.000982791,-0.001625162,-0.001704231,-0.001939275,-0.001887088,-2.58891e-05;-0.004373924,-0.019275632,-0.010338281,-0.005099874,-0.009717035,-0.021824164,-0.009084842,-0.005925924,-0.012698204,-0.023184613,-0.03452721,0.665902468,-0.157428779,-0.064043817,-0.085231984,-0.076334156,-0.006976738,-0.089242326,-0.014778995,-0.003201341,-0.002864174,-0.004079796,-0.006366525,-0.004931614,-0.004260231,-0.008317289,-0.003195396,-0.000540176,-0.00244478,-0.003626196,-0.00429447,-0.001853691,-0.002192743,-0.00460348,-0.000121105;-0.007607879,-0.01662017,-0.004271887,-0.010944036,-0.008448391,-0.011147691,-0.008087824,-0.008382081,-0.009117883,-0.014504033,-0.024184046,-0.026327346,0.826632175,-0.018526878,-0.040877859,-0.0153419,-0.009697125,-0.020143518,-0.024554656,-0.00284828,-0.002595083,-0.002479866,-0.006121525,-0.009686411,-0.008628142,-0.009170068,-0.002931513,-0.000997167,-0.00166487,-0.003097736,-0.007019183,-0.00241279,-0.004414478,-0.0042075,-0.000336107;-0.002050758,-0.008569024,-0.00401303,-0.006747605,-0.005400788,-0.007845858,-0.010705379,-0.004226264,-0.011148142,-0.01360452,-0.012311146,-0.018641995,-0.108693092,0.610535522,-0.066302181,-0.032720707,-0.029964276,-0.042753965,-0.033294219,-0.009073931,-0.008392747,-0.005845536,-0.008939044,-0.003915237,-0.006188393,-0.011450689,-0.045407433,-0.004662465,-0.002750035,-0.021107981,-0.020313661,-0.012974529,-0.027801261,-0.01624049,-0.000877418;-0.005327125,-0.005557984,-0.002055866,-0.003148111,-0.00288233,-0.004731999,-0.0041332,-0.001487186,-0.002674144,-0.005265855,-0.007323167,-0.00802768,-0.018088124,-0.004700597,0.6771666,-0.008060157,-0.004023945,-0.006180063,-0.080473383,-0.005244601,-0.004114125,-0.00209946,-0.041071848,-0.040011798,-0.058944702,-0.01863065,-0.003550846,-0.001123172,-0.001208024,-0.004474224,-0.019662989,-0.002766115,-0.001617538,-0.008493442,-0.000182814;-0.000639972,-0.000911154,-0.000980984,-0.004394358,-0.002843523,-0.003880432,-0.004421014,-0.000670311,-0.00168933,-0.002943323,-0.003526369,-0.009897221,-0.003733949,-0.002202029,-0.004734954,0.949567402,-0.001496604,-0.004819844,-0.001696544,-0.001119889,-0.001409504,-0.002332754,-0.002625857,-0.000711492,-0.001924337,-0.001521093,-0.001070804,-0.000829159,-0.001370697,-0.001685984,-0.003617968,-0.003784142,-0.003058047,-0.005249855,-0.00146207;-0.010732026,-0.030828612,-0.013537093,-0.017374586,-0.008010364,-0.017207633,-0.023348993,-0.031387055,-0.026179163,-0.020464094,-0.042609532,-0.029168917,-0.011064229,-0.007139903,-0.007647859,-0.009358165,0.857528691,-0.006982991,-0.01104774,-0.006151616,-0.012918034,-0.023096068,-0.015460861,-0.003320923,-0.005826293,-0.015751179,-0.009439714,-0.003955649,-0.007950912,-0.005477731,-0.014726937,-0.021119519,-0.012040387,-0.015531502,-0.000160901;-0.003009863,-0.00635594,-0.002029623,-0.002112663,-0.001346476,-0.002886683,-0.002974156,-0.004900142,-0.003037809,-0.002343282,-0.005835424,-0.003652734,-0.002476361,-0.00151322,-0.001592041,-0.002405229,-0.01564844,0.950543246,-0.005378161,-0.003285543,-0.004330364,-0.005354527,-0.008475206,-0.00162424,-0.00267512,-0.011965491,-0.010242361,-0.004379269,-0.031699146,-0.004269731,-0.018068934,-0.010767451,-0.006936197,-0.008730331,-0.000507318;-0.005159413,-0.003141148,-0.006596889,-0.004397274,-0.005740736,-0.005871752,-0.004749009,-0.002867762,-0.005357705,-0.00573129,-0.006414211,-0.005373108,-0.004248213,-0.002919055,-0.004401169,-0.00626269,-0.007523175,-0.006945958,0.988423083,-0.004157887,-0.004147927,-0.005178946,-0.015231042,-0.002008476,-0.00501022,-0.007954323,-0.003612479,-0.002794935,-0.002133071,-0.005275521,-0.004361181,-0.002810855,-0.003959693,-0.006131935,-3.86579e-05;-0.034239955,-0.018620157,-0.062922228,-0.040726397,-0.049027192,-0.050668632,-0.046118385,-0.058903088,-0.043738458,-0.044538734,-0.039069222,-0.041162938,-0.041176101,-0.030576156,-0.040066371,-0.04164824,-0.02198545,-0.041299512,-0.032490577,0.975830316,-0.012825342,-0.047147687,-0.022687028,-0.018492185,-0.022590665,-0.020394492,-0.011432304,-0.003947556,-0.004573041,-0.013229581,-0.019326111,-0.012099975,-0.027900376,-0.017341663,-0.000257006;-0.016133125,-0.006713248,-0.027997005,-0.020883189,-0.02775486,-0.018010695,-0.017106066,-0.014761809,-0.02012713,-0.018568453,-0.016515168,-0.015307704,-0.014832494,-0.010625781,-0.016704468,-0.025282368,-0.007204752,-0.0280189,-0.014620505,-0.005786474,0.993120621,-0.023560084,-0.013821276,-0.006411804,-0.009511873,-0.008586153,-0.007894086,-0.004375328,-0.003285971,-0.007895453,-0.008131604,-0.005796185,-0.012392852,-0.01072452,-0.000337962;-0.001486232,-0.003281197,-0.003922423,-0.003817409,-0.004410235,-0.004004632,-0.005194425,-0.001095035,-0.003916902,-0.004471621,-0.005322132,-0.004201729,-0.004872192,-0.003444666,-0.002510409,-0.00342581,-0.003042643,-0.005038773,-0.005066954,-0.007416819,-0.005844249,0.990096959,-0.007545045,-0.004048928,-0.017915333,-0.021727926,-0.008933081,-0.009992374,-0.002562156,-0.012551516,-0.01129675,-0.009313177,-0.008459784,-0.011994694,-5.24579e-05;-0.013066882,-0.018634282,-0.023206649,-0.019226599,-0.01871731,-0.022622925,-0.018546512,-0.044852978,-0.017465782,-0.01619444,-0.033634177,-0.016824736,-0.011839632,-0.007121826,-0.010299719,-0.019081864,-0.018933301,-0.019567261,-0.017107808,-0.021460536,-0.012189862,-0.009392043,0.953847435,-0.008037147,-0.009266696,-0.058073509,-0.008706425,-0.00493827,-0.001765979,-0.005469324,-0.010852094,-0.009617312,-0.007268767,-0.0090875,-0.000504099;-0.002384574,-0.006272222,-0.005111568,-0.0044859949999999996,-0.004050504,-0.006563199,-0.003097904,-0.0032444,-0.003041828,-0.003128733,-0.007908117,-0.005213675,-0.002837513,-0.001683453,-0.002411409,-0.002685204,-0.002664106,-0.002877424,-0.002065685,-0.00580558,-0.003115807,-0.001663845,-0.003823733,0.849383588,-0.002992557,-0.00545203,-0.001129738,-0.000657072,-0.00258329,-0.001409687,-0.001209942,-0.000911299,-0.000586839,-0.001363744,-4.58498e-05;-0.000823373,-0.001524798,-0.00142343,-0.001627393,-0.002361853,-0.001805604,-0.002180073,-0.000580558,-0.001626331,-0.001519908,-0.001630251,-0.001109294,-0.001872585,-0.001454943,-0.001248328,-0.001348897,-0.00073964,-0.001149796,-0.002260213,-0.002972042,-0.001559941,-0.001330349,-0.002596775,-0.005329325,0.96972978,-0.01398012,-0.003765175,-0.00288781,-0.000535426,-0.003717411,-0.004207271,-0.003284026,-0.001226141,-0.004325911,-1.6433e-05;-0.003613751,-0.004554492,-0.0066244,-0.00401275,-0.004357308,-0.006966464,-0.009201204,-0.00719875,-0.004802135,-0.00513572,-0.008239442,-0.004961442,-0.004143515,-0.002693017,-0.003844329,-0.004332556,-0.003813523,-0.01189111,-0.013643601,-0.020720014,-0.012260069,-0.007434578,-0.039283638,-0.114736797,-0.093992166,0.897716326,-0.004267009,-0.003396986,-0.001074324,-0.005240638,-0.004876061,-0.002885642,-0.003256593,-0.006306472,-2.65925e-05;-0.003979242,-0.004930375,-0.005013867,-0.006007658,-0.005704094,-0.005915291,-0.012251242,-0.003677582,-0.007424378,-0.00509162,-0.006436318,-0.00679453,-0.006009702,-0.006692261,-0.004121236,-0.011643854,-0.007068184,-0.01142259,-0.017553887,-0.019193788,-0.021752341,-0.0149751,-0.017955279,-0.017638252,-0.021770093,-0.022844892,0.878616314,-0.029291293,-0.005082404,-0.024772805,-0.023052324,-0.011606363,-0.013901955,-0.022125082,-0.000664909;-0.017901345,-0.024989623,-0.015634674,-0.022320459,-0.016648148,-0.01662907,-0.021888916,-0.013250217,-0.017935121,-0.014448503,-0.023252725,-0.017832903,-0.015975543,-0.011959044,-0.013097047,-0.028249403,-0.023994054,-0.021963972,-0.020487444,-0.031325587,-0.034723953,-0.024673236,-0.048011086,-0.023218139,-0.033359243,-0.035664725,-0.019855899,0.787121095,-0.078084812,-0.03599279,-0.023490742,-0.015407282,-0.024152033,-0.045409322,-0.007728698;-0.002096568,-0.005047989,-0.004463664,-0.004809827,-0.006104338,-0.005855326,-0.009736082,-0.001767392,-0.004083622,-0.005422638,-0.00482709,-0.004467202,-0.004954824,-0.003334403,-0.004591127,-0.006777097,-0.004357405,-0.010191368,-0.022430846,-0.01999581,-0.043054267,-0.027861659,-0.008871093,-0.012816672,-0.010139274,-0.020369796,-0.014891714,-0.023931664,0.965037881,-0.023369544,-0.013726236,-0.020402409,-0.035431763,-0.026627461,-1.02562e-06;-0.012860613,-0.030044324,-0.036730904,-0.020713346,-0.018642208,-0.025495306,-0.06171373,-0.014047344,-0.06123506,-0.033093085,-0.032210698,-0.027221017,-0.037796063,-0.037185652,-0.038444601,-0.027469718,-0.031261359,-0.05418069,-0.051842798,-0.058274048,-0.061240173,-0.044612909,-0.042979536,-0.024765007,-0.06550855,-0.063362632,-0.064147247,-0.105368509,-0.034386968,0.850410496,-0.085321456,-0.037389614,-0.065087895,-0.082174631,-0.002703582;-0.001359427,-0.00252266,-0.001737172,-0.000720481,-0.000616526,-0.002753027,-0.003404703,-0.001105849,-0.002562926,-0.001827679,-0.002440789,-0.002526465,-0.001155061,-0.000839458,-0.001036018,-0.002033649,-0.004352171,-0.001482326,-0.002615237,-0.001527703,-0.002577151,-0.003317276,-0.003666807,-0.005096696,-0.008713054,-0.00309914,-0.002725106,-0.001576497,-0.003671472,-0.002916512,0.992102569,-0.004641136,-0.004196141,-0.008363876,-9.7559e-06;-0.000520827,-0.000388092,-0.000406248,-0.000306738,-0.000356518,-0.000337344,-0.000517489,-0.00036825,-0.000855582,-0.00053344,-0.000488106,-0.000478327,-0.000690522,-0.000543115,-0.000672776,-0.000384285,-0.0006524,-0.00046283,-0.000785045,-0.000728236,-0.001023462,-0.000576307,-0.000965735,-0.00027147,-0.001960902,-0.001186481,-0.001398258,-0.001210821,-0.000310617,-0.002319082,-0.004034179,0.98479919,-0.001405825,-0.001588225,-1.18414e-05;-0.001258267,-0.000444989,-0.000446316,-0.000380262,-0.000832332,-0.000507128,-0.000481664,-0.00017625,-0.000509277,-0.000380639,-0.000729546,-0.000471071,-0.000808864,-0.00038593,-0.000436742,-0.000465957,-0.000412578,-0.000406625,-0.000532685,-0.000505027,-0.000440676,-0.000957922,-0.000577831,-0.0003081,-0.000414969,-0.000480771,-0.000612237,-0.00057797,-9.34326e-05,-0.000581793,-0.005588021,-0.001650708,0.966535455,-0.001336462,-4.97349e-07;-0.002982701,-0.006233054,-0.004965234,-0.004024591,-0.005866752,-0.004817333,-0.012168947,-0.001935913,-0.006613866,-0.004408571,-0.005583885,-0.005052392,-0.004143899,-0.002737262,-0.003931804,-0.004370863,-0.00558076,-0.005853047,-0.007026512,-0.007504968,-0.008499519,-0.013401788,-0.01249137,-0.004779131,-0.006904193,-0.013913267,-0.017725138,-0.01002198,-0.007872466,-0.023771891,-0.017660526,-0.012179327,-0.013631719,0.922099747,-0.001422569;-1.38338e-05,-2.65096e-05,-2.33817e-05,-8.20845e-05,-2.93447e-05,-3.27502e-05,-3.13764e-05,-1.22082e-05,-1.95113e-05,-1.89003e-05,-2.25061e-05,-1.66082e-05,-3.06067e-05,-1.16841e-05,-4.44892e-05,-1.30882e-05,-6.68618e-06,-5.79481e-05,-3.69515e-05,-1.23283e-05,-3.80263e-05,-5.14698e-05,-0.00011366,-4.91111e-06,-1.25213e-05,-1.19771e-05,-3.4846e-05,-6.31349e-05,-0.000213945,-6.39272e-05,-7.2228e-05,-4.11406e-05,-5.56648e-05,-0.000110319,0.999901777;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            8.80942664e-01, -5.58434000e-04, -2.55589334e-01, -4.92304180e-02, -5.49396990e-02,
            -1.20320652e-01, -1.59753830e-02, -1.88997400e-03, -6.55901000e-03, -1.23076220e-02,
            -5.53514000e-04, -1.93687000e-04, -1.72585000e-04, -8.74380000e-05, -1.14068000e-04,
            -1.04623170e-02, -4.99416000e-04, -3.30531700e-03, -8.96418000e-04, -2.29702900e-03,
            -2.28344500e-03, -3.84872530e-02, -1.71526600e-03, -8.64287000e-04, -3.61627000e-04,
            -6.50908500e-03, -2.06132000e-04, -1.47712000e-04, -3.77055000e-04, -8.30846000e-04,
            -2.10689600e-03, -2.63460000e-03, -2.10945700e-03, -2.47604200e-03, -2.86601580e-02
        ],
              [
                  -2.19520400e-03, 9.15781723e-01, -2.78563000e-03, -2.94615500e-03,
                  -2.38647800e-03, -4.16586600e-03, -4.70893700e-03, -4.43794268e-01,
                  -2.96214790e-02, -3.67807100e-03, -6.88066160e-02, -5.02072430e-02,
                  -2.53300400e-03, -1.01534000e-03, -1.48454800e-03, -5.08881500e-03,
                  -1.06609079e-01, -1.87225030e-02, -5.52766000e-04, -5.02553000e-04,
                  -1.02061200e-03, -2.05272500e-03, -4.92319600e-03, -3.15648500e-03,
                  -3.60361400e-03, -2.91077900e-03, -4.40509000e-04, -2.58582000e-04,
                  -1.44268000e-03, -7.58565000e-04, -3.16882100e-03, -1.54411400e-03,
                  -1.58781100e-03, -2.68271400e-03, -6.34688520e-02
              ],
              [
                  -6.70259970e-02, -9.34072000e-04, 8.35976229e-01, -5.46756300e-03,
                  -1.04246785e-01, -2.84369800e-03, -3.47172700e-03, -1.79039400e-03,
                  -1.23537210e-02, -4.05743700e-03, -2.82306800e-03, -1.99329000e-03,
                  -1.78618200e-03, -1.43820100e-03, -1.18680500e-03, -2.92117600e-03,
                  -1.17666000e-03, -1.60715900e-03, -1.67420500e-03, -4.70256900e-03,
                  -4.74087000e-03, -1.54833857e-01, -1.84923900e-03, -5.84260800e-03,
                  -4.43814300e-03, -1.81413600e-03, -1.40711000e-03, -7.15459000e-04,
                  -3.08740000e-04, -1.91057000e-03, -7.40253700e-03, -9.01568000e-03,
                  -1.26527090e-02, -7.31649900e-03, -2.84902900e-03
              ],
              [
                  -1.76900800e-03, -1.09515300e-03, -1.64905500e-03, 6.38283714e-01,
                  -6.02458060e-02, -3.16077900e-03, -6.38849600e-03, -5.18073000e-04,
                  -3.41593900e-03, -1.45862590e-02, -4.04188300e-03, -1.94488200e-03,
                  -2.30086600e-03, -1.79035600e-03, -4.23098800e-03, -2.36801580e-02,
                  -9.53238000e-04, -2.43463300e-03, -1.61574900e-03, -2.54947200e-03,
                  -3.01560800e-03, -2.84316300e-03, -2.03927800e-03, -3.10340800e-03,
                  -2.12225500e-03, -1.95407500e-03, -6.67888000e-04, -4.50210000e-04,
                  -4.01018000e-04, -1.50177500e-03, -2.89190100e-03, -1.10812900e-03,
                  -3.66578500e-03, -4.50057600e-03, -7.05294000e-05
              ],
              [
                  -1.54658000e-04, -5.82186000e-05, -1.30786000e-04, -1.23235810e-02,
                  7.79528919e-01, -4.79752000e-04, -6.64946000e-04, -4.10119000e-05,
                  -2.41362000e-04, -9.27583000e-04, -2.48218000e-04, -1.44156000e-04,
                  -1.84082000e-04, -2.84860000e-04, -1.89201400e-03, -5.36751800e-03,
                  -8.63831000e-05, -1.05979000e-04, -3.71955000e-04, -3.22270000e-04,
                  -2.69953000e-04, -1.23719000e-04, -2.44854000e-04, -9.54716000e-05,
                  -1.37984000e-04, -1.64010000e-04, -2.32944000e-04, -3.35435000e-05,
                  -9.72326000e-06, -9.41628000e-05, -7.32372000e-04, -1.07599000e-04,
                  -2.39632000e-04, -4.39559000e-04, -1.28632000e-06
              ],
              [
                  -1.67238400e-03, -1.66849200e-03, -1.75261800e-03, -1.54247800e-03,
                  -2.01875100e-03, 7.37317107e-01, -1.23406900e-02, -3.66759000e-04,
                  -1.53356900e-03, -3.13758500e-03, -8.27143000e-03, -3.78922300e-03,
                  -3.07982500e-03, -1.61355300e-03, -2.67203000e-03, -7.53429430e-02,
                  -8.12325000e-04, -3.02243730e-02, -1.30934400e-03, -1.30004600e-03,
                  -1.23457100e-03, -2.30204400e-03, -1.25869500e-03, -6.14343000e-04,
                  -4.00009000e-04, -2.29382200e-03, -5.53077000e-04, -3.02388000e-04,
                  -2.25207800e-03, -8.90219000e-04, -2.07184700e-03, -2.91571600e-03,
                  -1.45285600e-03, -2.67712100e-03, -2.28600000e-05
              ],
              [
                  -2.40506200e-03, -2.94455100e-03, -2.46480430e-02, -1.20444000e-02,
                  -1.51248240e-02, -1.44412150e-02, 7.49784127e-01, -1.80932600e-03,
                  -1.48529350e-02, -1.59970560e-02, -2.16654260e-02, -5.06836100e-03,
                  -6.66009300e-03, -8.10565800e-03, -4.09149300e-03, -1.93964600e-02,
                  -3.11992500e-03, -4.20378500e-03, -8.31538600e-03, -1.12109540e-02,
                  -1.09297310e-02, -8.09895900e-03, -6.54625100e-03, -3.32695900e-03,
                  -4.65787300e-03, -1.33159760e-02, -9.41505200e-03, -1.26944260e-02,
                  -2.04741900e-03, -1.99830000e-02, -1.81174610e-02, -1.87612660e-02,
                  -9.30171000e-03, -2.35381080e-02, -1.49384000e-04
              ],
              [
                  -1.19962860e-02, -6.27247600e-03, -3.09441000e-03, -5.01580400e-03,
                  -4.07362300e-03, -4.43757600e-03, -4.27055000e-03, 9.01909306e-01,
                  -4.27561200e-02, -8.52248000e-03, -1.85180990e-02, -1.22491030e-02,
                  -3.47378600e-03, -1.77519200e-03, -1.73458400e-03, -3.75568000e-03,
                  -2.66105780e-02, -1.02496720e-02, -5.04938600e-03, -4.52589400e-03,
                  -3.48951500e-03, -3.36880100e-03, -5.39605190e-02, -5.83610640e-02,
                  -9.18475580e-02, -2.09697070e-02, -3.22088600e-03, -1.16503400e-03,
                  -1.06131600e-03, -4.42669700e-03, -8.20465900e-03, -2.93332100e-03,
                  -2.67865100e-03, -4.82234000e-03, -2.80191000e-05
              ],
              [
                  -3.75777040e-02, -1.04665140e-02, -9.46161900e-03, -6.73171090e-02,
                  -3.83275490e-02, -3.55316110e-02, -3.60570250e-02, -1.85436120e-02,
                  7.48776996e-01, -2.21470999e-01, -3.85453790e-02, -1.55135450e-02,
                  -1.02674340e-02, -1.76978610e-02, -1.06062900e-02, -2.67041110e-02,
                  -6.82996900e-03, -1.09001910e-02, -5.76006200e-03, -2.78443000e-03,
                  -2.19031600e-03, -4.67709000e-03, -3.39193000e-03, -4.54346900e-03,
                  -3.83040300e-03, -4.50502400e-03, -1.22271000e-03, -6.92513000e-04,
                  -2.08560800e-03, -4.85103800e-03, -9.66906500e-03, -3.97742900e-03,
                  -6.40789310e-02, -1.04778620e-02, -1.60148000e-04
              ],
              [
                  -4.67057200e-03, -5.86223200e-03, -1.92160500e-02, -1.11090470e-02,
                  -3.93827040e-02, -8.35460800e-03, -1.69486070e-02, -3.23050200e-03,
                  -1.76162360e-02, 8.47841302e-01, -1.21130350e-02, -6.91298500e-03,
                  -2.29783180e-02, -2.29514020e-02, -3.33112500e-02, -3.34190470e-02,
                  -2.44171600e-03, -1.86194300e-02, -1.56148110e-02, -4.34144800e-03,
                  -4.91381500e-03, -4.20332300e-03, -1.13735990e-02, -2.77207700e-03,
                  -3.86955200e-03, -6.49045600e-03, -3.07742700e-03, -6.24394000e-04,
                  -1.30480000e-03, -2.86059700e-03, -3.31687000e-03, -1.46432700e-03,
                  -5.19201800e-03, -4.58696200e-03, -5.35151000e-05
              ],
              [
                  -1.51471800e-03, -4.50340100e-03, -5.34490700e-03, -2.12310600e-03,
                  -1.65629800e-03, -7.12593400e-03, -1.25580200e-03, -2.06748300e-03,
                  -5.63304300e-03, -5.42794500e-03, 8.56049479e-01, -1.05972010e-02,
                  -4.96602100e-03, -9.79072300e-03, -6.35551300e-03, -7.30405700e-03,
                  -1.79479500e-03, -9.41882020e-02, -3.60186800e-03, -9.85001000e-04,
                  -1.01819100e-03, -3.29145700e-03, -1.47393600e-03, -4.35769000e-04,
                  -6.65638000e-04, -1.47678000e-03, -1.08739900e-03, -1.18165000e-04,
                  -1.71914000e-03, -9.82791000e-04, -1.62516200e-03, -1.70423100e-03,
                  -1.93927500e-03, -1.88708800e-03, -2.58891000e-05
              ],
              [
                  -4.37392400e-03, -1.92756320e-02, -1.03382810e-02, -5.09987400e-03,
                  -9.71703500e-03, -2.18241640e-02, -9.08484200e-03, -5.92592400e-03,
                  -1.26982040e-02, -2.31846130e-02, -3.45272100e-02, 6.65902468e-01,
                  -1.57428779e-01, -6.40438170e-02, -8.52319840e-02, -7.63341560e-02,
                  -6.97673800e-03, -8.92423260e-02, -1.47789950e-02, -3.20134100e-03,
                  -2.86417400e-03, -4.07979600e-03, -6.36652500e-03, -4.93161400e-03,
                  -4.26023100e-03, -8.31728900e-03, -3.19539600e-03, -5.40176000e-04,
                  -2.44478000e-03, -3.62619600e-03, -4.29447000e-03, -1.85369100e-03,
                  -2.19274300e-03, -4.60348000e-03, -1.21105000e-04
              ],
              [
                  -7.60787900e-03, -1.66201700e-02, -4.27188700e-03, -1.09440360e-02,
                  -8.44839100e-03, -1.11476910e-02, -8.08782400e-03, -8.38208100e-03,
                  -9.11788300e-03, -1.45040330e-02, -2.41840460e-02, -2.63273460e-02,
                  8.26632175e-01, -1.85268780e-02, -4.08778590e-02, -1.53419000e-02,
                  -9.69712500e-03, -2.01435180e-02, -2.45546560e-02, -2.84828000e-03,
                  -2.59508300e-03, -2.47986600e-03, -6.12152500e-03, -9.68641100e-03,
                  -8.62814200e-03, -9.17006800e-03, -2.93151300e-03, -9.97167000e-04,
                  -1.66487000e-03, -3.09773600e-03, -7.01918300e-03, -2.41279000e-03,
                  -4.41447800e-03, -4.20750000e-03, -3.36107000e-04
              ],
              [
                  -2.05075800e-03, -8.56902400e-03, -4.01303000e-03, -6.74760500e-03,
                  -5.40078800e-03, -7.84585800e-03, -1.07053790e-02, -4.22626400e-03,
                  -1.11481420e-02, -1.36045200e-02, -1.23111460e-02, -1.86419950e-02,
                  -1.08693092e-01, 6.10535522e-01, -6.63021810e-02, -3.27207070e-02,
                  -2.99642760e-02, -4.27539650e-02, -3.32942190e-02, -9.07393100e-03,
                  -8.39274700e-03, -5.84553600e-03, -8.93904400e-03, -3.91523700e-03,
                  -6.18839300e-03, -1.14506890e-02, -4.54074330e-02, -4.66246500e-03,
                  -2.75003500e-03, -2.11079810e-02, -2.03136610e-02, -1.29745290e-02,
                  -2.78012610e-02, -1.62404900e-02, -8.77418000e-04
              ],
              [
                  -5.32712500e-03, -5.55798400e-03, -2.05586600e-03, -3.14811100e-03,
                  -2.88233000e-03, -4.73199900e-03, -4.13320000e-03, -1.48718600e-03,
                  -2.67414400e-03, -5.26585500e-03, -7.32316700e-03, -8.02768000e-03,
                  -1.80881240e-02, -4.70059700e-03, 6.77166600e-01, -8.06015700e-03,
                  -4.02394500e-03, -6.18006300e-03, -8.04733830e-02, -5.24460100e-03,
                  -4.11412500e-03, -2.09946000e-03, -4.10718480e-02, -4.00117980e-02,
                  -5.89447020e-02, -1.86306500e-02, -3.55084600e-03, -1.12317200e-03,
                  -1.20802400e-03, -4.47422400e-03, -1.96629890e-02, -2.76611500e-03,
                  -1.61753800e-03, -8.49344200e-03, -1.82814000e-04
              ],
              [
                  -6.39972000e-04, -9.11154000e-04, -9.80984000e-04, -4.39435800e-03,
                  -2.84352300e-03, -3.88043200e-03, -4.42101400e-03, -6.70311000e-04,
                  -1.68933000e-03, -2.94332300e-03, -3.52636900e-03, -9.89722100e-03,
                  -3.73394900e-03, -2.20202900e-03, -4.73495400e-03, 9.49567402e-01,
                  -1.49660400e-03, -4.81984400e-03, -1.69654400e-03, -1.11988900e-03,
                  -1.40950400e-03, -2.33275400e-03, -2.62585700e-03, -7.11492000e-04,
                  -1.92433700e-03, -1.52109300e-03, -1.07080400e-03, -8.29159000e-04,
                  -1.37069700e-03, -1.68598400e-03, -3.61796800e-03, -3.78414200e-03,
                  -3.05804700e-03, -5.24985500e-03, -1.46207000e-03
              ],
              [
                  -1.07320260e-02, -3.08286120e-02, -1.35370930e-02, -1.73745860e-02,
                  -8.01036400e-03, -1.72076330e-02, -2.33489930e-02, -3.13870550e-02,
                  -2.61791630e-02, -2.04640940e-02, -4.26095320e-02, -2.91689170e-02,
                  -1.10642290e-02, -7.13990300e-03, -7.64785900e-03, -9.35816500e-03,
                  8.57528691e-01, -6.98299100e-03, -1.10477400e-02, -6.15161600e-03,
                  -1.29180340e-02, -2.30960680e-02, -1.54608610e-02, -3.32092300e-03,
                  -5.82629300e-03, -1.57511790e-02, -9.43971400e-03, -3.95564900e-03,
                  -7.95091200e-03, -5.47773100e-03, -1.47269370e-02, -2.11195190e-02,
                  -1.20403870e-02, -1.55315020e-02, -1.60901000e-04
              ],
              [
                  -3.00986300e-03, -6.35594000e-03, -2.02962300e-03, -2.11266300e-03,
                  -1.34647600e-03, -2.88668300e-03, -2.97415600e-03, -4.90014200e-03,
                  -3.03780900e-03, -2.34328200e-03, -5.83542400e-03, -3.65273400e-03,
                  -2.47636100e-03, -1.51322000e-03, -1.59204100e-03, -2.40522900e-03,
                  -1.56484400e-02, 9.50543246e-01, -5.37816100e-03, -3.28554300e-03,
                  -4.33036400e-03, -5.35452700e-03, -8.47520600e-03, -1.62424000e-03,
                  -2.67512000e-03, -1.19654910e-02, -1.02423610e-02, -4.37926900e-03,
                  -3.16991460e-02, -4.26973100e-03, -1.80689340e-02, -1.07674510e-02,
                  -6.93619700e-03, -8.73033100e-03, -5.07318000e-04
              ],
              [
                  -5.15941300e-03, -3.14114800e-03, -6.59688900e-03, -4.39727400e-03,
                  -5.74073600e-03, -5.87175200e-03, -4.74900900e-03, -2.86776200e-03,
                  -5.35770500e-03, -5.73129000e-03, -6.41421100e-03, -5.37310800e-03,
                  -4.24821300e-03, -2.91905500e-03, -4.40116900e-03, -6.26269000e-03,
                  -7.52317500e-03, -6.94595800e-03, 9.88423083e-01, -4.15788700e-03,
                  -4.14792700e-03, -5.17894600e-03, -1.52310420e-02, -2.00847600e-03,
                  -5.01022000e-03, -7.95432300e-03, -3.61247900e-03, -2.79493500e-03,
                  -2.13307100e-03, -5.27552100e-03, -4.36118100e-03, -2.81085500e-03,
                  -3.95969300e-03, -6.13193500e-03, -3.86579000e-05
              ],
              [
                  -3.42399550e-02, -1.86201570e-02, -6.29222280e-02, -4.07263970e-02,
                  -4.90271920e-02, -5.06686320e-02, -4.61183850e-02, -5.89030880e-02,
                  -4.37384580e-02, -4.45387340e-02, -3.90692220e-02, -4.11629380e-02,
                  -4.11761010e-02, -3.05761560e-02, -4.00663710e-02, -4.16482400e-02,
                  -2.19854500e-02, -4.12995120e-02, -3.24905770e-02, 9.75830316e-01,
                  -1.28253420e-02, -4.71476870e-02, -2.26870280e-02, -1.84921850e-02,
                  -2.25906650e-02, -2.03944920e-02, -1.14323040e-02, -3.94755600e-03,
                  -4.57304100e-03, -1.32295810e-02, -1.93261110e-02, -1.20999750e-02,
                  -2.79003760e-02, -1.73416630e-02, -2.57006000e-04
              ],
              [
                  -1.61331250e-02, -6.71324800e-03, -2.79970050e-02, -2.08831890e-02,
                  -2.77548600e-02, -1.80106950e-02, -1.71060660e-02, -1.47618090e-02,
                  -2.01271300e-02, -1.85684530e-02, -1.65151680e-02, -1.53077040e-02,
                  -1.48324940e-02, -1.06257810e-02, -1.67044680e-02, -2.52823680e-02,
                  -7.20475200e-03, -2.80189000e-02, -1.46205050e-02, -5.78647400e-03,
                  9.93120621e-01, -2.35600840e-02, -1.38212760e-02, -6.41180400e-03,
                  -9.51187300e-03, -8.58615300e-03, -7.89408600e-03, -4.37532800e-03,
                  -3.28597100e-03, -7.89545300e-03, -8.13160400e-03, -5.79618500e-03,
                  -1.23928520e-02, -1.07245200e-02, -3.37962000e-04
              ],
              [
                  -1.48623200e-03, -3.28119700e-03, -3.92242300e-03, -3.81740900e-03,
                  -4.41023500e-03, -4.00463200e-03, -5.19442500e-03, -1.09503500e-03,
                  -3.91690200e-03, -4.47162100e-03, -5.32213200e-03, -4.20172900e-03,
                  -4.87219200e-03, -3.44466600e-03, -2.51040900e-03, -3.42581000e-03,
                  -3.04264300e-03, -5.03877300e-03, -5.06695400e-03, -7.41681900e-03,
                  -5.84424900e-03, 9.90096959e-01, -7.54504500e-03, -4.04892800e-03,
                  -1.79153330e-02, -2.17279260e-02, -8.93308100e-03, -9.99237400e-03,
                  -2.56215600e-03, -1.25515160e-02, -1.12967500e-02, -9.31317700e-03,
                  -8.45978400e-03, -1.19946940e-02, -5.24579000e-05
              ],
              [
                  -1.30668820e-02, -1.86342820e-02, -2.32066490e-02, -1.92265990e-02,
                  -1.87173100e-02, -2.26229250e-02, -1.85465120e-02, -4.48529780e-02,
                  -1.74657820e-02, -1.61944400e-02, -3.36341770e-02, -1.68247360e-02,
                  -1.18396320e-02, -7.12182600e-03, -1.02997190e-02, -1.90818640e-02,
                  -1.89333010e-02, -1.95672610e-02, -1.71078080e-02, -2.14605360e-02,
                  -1.21898620e-02, -9.39204300e-03, 9.53847435e-01, -8.03714700e-03,
                  -9.26669600e-03, -5.80735090e-02, -8.70642500e-03, -4.93827000e-03,
                  -1.76597900e-03, -5.46932400e-03, -1.08520940e-02, -9.61731200e-03,
                  -7.26876700e-03, -9.08750000e-03, -5.04099000e-04
              ],
              [
                  -2.38457400e-03, -6.27222200e-03, -5.11156800e-03, -4.48599500e-03,
                  -4.05050400e-03, -6.56319900e-03, -3.09790400e-03, -3.24440000e-03,
                  -3.04182800e-03, -3.12873300e-03, -7.90811700e-03, -5.21367500e-03,
                  -2.83751300e-03, -1.68345300e-03, -2.41140900e-03, -2.68520400e-03,
                  -2.66410600e-03, -2.87742400e-03, -2.06568500e-03, -5.80558000e-03,
                  -3.11580700e-03, -1.66384500e-03, -3.82373300e-03, 8.49383588e-01,
                  -2.99255700e-03, -5.45203000e-03, -1.12973800e-03, -6.57072000e-04,
                  -2.58329000e-03, -1.40968700e-03, -1.20994200e-03, -9.11299000e-04,
                  -5.86839000e-04, -1.36374400e-03, -4.58498000e-05
              ],
              [
                  -8.23373000e-04, -1.52479800e-03, -1.42343000e-03, -1.62739300e-03,
                  -2.36185300e-03, -1.80560400e-03, -2.18007300e-03, -5.80558000e-04,
                  -1.62633100e-03, -1.51990800e-03, -1.63025100e-03, -1.10929400e-03,
                  -1.87258500e-03, -1.45494300e-03, -1.24832800e-03, -1.34889700e-03,
                  -7.39640000e-04, -1.14979600e-03, -2.26021300e-03, -2.97204200e-03,
                  -1.55994100e-03, -1.33034900e-03, -2.59677500e-03, -5.32932500e-03,
                  9.69729780e-01, -1.39801200e-02, -3.76517500e-03, -2.88781000e-03,
                  -5.35426000e-04, -3.71741100e-03, -4.20727100e-03, -3.28402600e-03,
                  -1.22614100e-03, -4.32591100e-03, -1.64330000e-05
              ],
              [
                  -3.61375100e-03, -4.55449200e-03, -6.62440000e-03, -4.01275000e-03,
                  -4.35730800e-03, -6.96646400e-03, -9.20120400e-03, -7.19875000e-03,
                  -4.80213500e-03, -5.13572000e-03, -8.23944200e-03, -4.96144200e-03,
                  -4.14351500e-03, -2.69301700e-03, -3.84432900e-03, -4.33255600e-03,
                  -3.81352300e-03, -1.18911100e-02, -1.36436010e-02, -2.07200140e-02,
                  -1.22600690e-02, -7.43457800e-03, -3.92836380e-02, -1.14736797e-01,
                  -9.39921660e-02, 8.97716326e-01, -4.26700900e-03, -3.39698600e-03,
                  -1.07432400e-03, -5.24063800e-03, -4.87606100e-03, -2.88564200e-03,
                  -3.25659300e-03, -6.30647200e-03, -2.65925000e-05
              ],
              [
                  -3.97924200e-03, -4.93037500e-03, -5.01386700e-03, -6.00765800e-03,
                  -5.70409400e-03, -5.91529100e-03, -1.22512420e-02, -3.67758200e-03,
                  -7.42437800e-03, -5.09162000e-03, -6.43631800e-03, -6.79453000e-03,
                  -6.00970200e-03, -6.69226100e-03, -4.12123600e-03, -1.16438540e-02,
                  -7.06818400e-03, -1.14225900e-02, -1.75538870e-02, -1.91937880e-02,
                  -2.17523410e-02, -1.49751000e-02, -1.79552790e-02, -1.76382520e-02,
                  -2.17700930e-02, -2.28448920e-02, 8.78616314e-01, -2.92912930e-02,
                  -5.08240400e-03, -2.47728050e-02, -2.30523240e-02, -1.16063630e-02,
                  -1.39019550e-02, -2.21250820e-02, -6.64909000e-04
              ],
              [
                  -1.79013450e-02, -2.49896230e-02, -1.56346740e-02, -2.23204590e-02,
                  -1.66481480e-02, -1.66290700e-02, -2.18889160e-02, -1.32502170e-02,
                  -1.79351210e-02, -1.44485030e-02, -2.32527250e-02, -1.78329030e-02,
                  -1.59755430e-02, -1.19590440e-02, -1.30970470e-02, -2.82494030e-02,
                  -2.39940540e-02, -2.19639720e-02, -2.04874440e-02, -3.13255870e-02,
                  -3.47239530e-02, -2.46732360e-02, -4.80110860e-02, -2.32181390e-02,
                  -3.33592430e-02, -3.56647250e-02, -1.98558990e-02, 7.87121095e-01,
                  -7.80848120e-02, -3.59927900e-02, -2.34907420e-02, -1.54072820e-02,
                  -2.41520330e-02, -4.54093220e-02, -7.72869800e-03
              ],
              [
                  -2.09656800e-03, -5.04798900e-03, -4.46366400e-03, -4.80982700e-03,
                  -6.10433800e-03, -5.85532600e-03, -9.73608200e-03, -1.76739200e-03,
                  -4.08362200e-03, -5.42263800e-03, -4.82709000e-03, -4.46720200e-03,
                  -4.95482400e-03, -3.33440300e-03, -4.59112700e-03, -6.77709700e-03,
                  -4.35740500e-03, -1.01913680e-02, -2.24308460e-02, -1.99958100e-02,
                  -4.30542670e-02, -2.78616590e-02, -8.87109300e-03, -1.28166720e-02,
                  -1.01392740e-02, -2.03697960e-02, -1.48917140e-02, -2.39316640e-02,
                  9.65037881e-01, -2.33695440e-02, -1.37262360e-02, -2.04024090e-02,
                  -3.54317630e-02, -2.66274610e-02, -1.02562000e-06
              ],
              [
                  -1.28606130e-02, -3.00443240e-02, -3.67309040e-02, -2.07133460e-02,
                  -1.86422080e-02, -2.54953060e-02, -6.17137300e-02, -1.40473440e-02,
                  -6.12350600e-02, -3.30930850e-02, -3.22106980e-02, -2.72210170e-02,
                  -3.77960630e-02, -3.71856520e-02, -3.84446010e-02, -2.74697180e-02,
                  -3.12613590e-02, -5.41806900e-02, -5.18427980e-02, -5.82740480e-02,
                  -6.12401730e-02, -4.46129090e-02, -4.29795360e-02, -2.47650070e-02,
                  -6.55085500e-02, -6.33626320e-02, -6.41472470e-02, -1.05368509e-01,
                  -3.43869680e-02, 8.50410496e-01, -8.53214560e-02, -3.73896140e-02,
                  -6.50878950e-02, -8.21746310e-02, -2.70358200e-03
              ],
              [
                  -1.35942700e-03, -2.52266000e-03, -1.73717200e-03, -7.20481000e-04,
                  -6.16526000e-04, -2.75302700e-03, -3.40470300e-03, -1.10584900e-03,
                  -2.56292600e-03, -1.82767900e-03, -2.44078900e-03, -2.52646500e-03,
                  -1.15506100e-03, -8.39458000e-04, -1.03601800e-03, -2.03364900e-03,
                  -4.35217100e-03, -1.48232600e-03, -2.61523700e-03, -1.52770300e-03,
                  -2.57715100e-03, -3.31727600e-03, -3.66680700e-03, -5.09669600e-03,
                  -8.71305400e-03, -3.09914000e-03, -2.72510600e-03, -1.57649700e-03,
                  -3.67147200e-03, -2.91651200e-03, 9.92102569e-01, -4.64113600e-03,
                  -4.19614100e-03, -8.36387600e-03, -9.75590000e-06
              ],
              [
                  -5.20827000e-04, -3.88092000e-04, -4.06248000e-04, -3.06738000e-04,
                  -3.56518000e-04, -3.37344000e-04, -5.17489000e-04, -3.68250000e-04,
                  -8.55582000e-04, -5.33440000e-04, -4.88106000e-04, -4.78327000e-04,
                  -6.90522000e-04, -5.43115000e-04, -6.72776000e-04, -3.84285000e-04,
                  -6.52400000e-04, -4.62830000e-04, -7.85045000e-04, -7.28236000e-04,
                  -1.02346200e-03, -5.76307000e-04, -9.65735000e-04, -2.71470000e-04,
                  -1.96090200e-03, -1.18648100e-03, -1.39825800e-03, -1.21082100e-03,
                  -3.10617000e-04, -2.31908200e-03, -4.03417900e-03, 9.84799190e-01,
                  -1.40582500e-03, -1.58822500e-03, -1.18414000e-05
              ],
              [
                  -1.25826700e-03, -4.44989000e-04, -4.46316000e-04, -3.80262000e-04,
                  -8.32332000e-04, -5.07128000e-04, -4.81664000e-04, -1.76250000e-04,
                  -5.09277000e-04, -3.80639000e-04, -7.29546000e-04, -4.71071000e-04,
                  -8.08864000e-04, -3.85930000e-04, -4.36742000e-04, -4.65957000e-04,
                  -4.12578000e-04, -4.06625000e-04, -5.32685000e-04, -5.05027000e-04,
                  -4.40676000e-04, -9.57922000e-04, -5.77831000e-04, -3.08100000e-04,
                  -4.14969000e-04, -4.80771000e-04, -6.12237000e-04, -5.77970000e-04,
                  -9.34326000e-05, -5.81793000e-04, -5.58802100e-03, -1.65070800e-03,
                  9.66535455e-01, -1.33646200e-03, -4.97349000e-07
              ],
              [
                  -2.98270100e-03, -6.23305400e-03, -4.96523400e-03, -4.02459100e-03,
                  -5.86675200e-03, -4.81733300e-03, -1.21689470e-02, -1.93591300e-03,
                  -6.61386600e-03, -4.40857100e-03, -5.58388500e-03, -5.05239200e-03,
                  -4.14389900e-03, -2.73726200e-03, -3.93180400e-03, -4.37086300e-03,
                  -5.58076000e-03, -5.85304700e-03, -7.02651200e-03, -7.50496800e-03,
                  -8.49951900e-03, -1.34017880e-02, -1.24913700e-02, -4.77913100e-03,
                  -6.90419300e-03, -1.39132670e-02, -1.77251380e-02, -1.00219800e-02,
                  -7.87246600e-03, -2.37718910e-02, -1.76605260e-02, -1.21793270e-02,
                  -1.36317190e-02, 9.22099747e-01, -1.42256900e-03
              ],
              [
                  -1.38338000e-05, -2.65096000e-05, -2.33817000e-05, -8.20845000e-05,
                  -2.93447000e-05, -3.27502000e-05, -3.13764000e-05, -1.22082000e-05,
                  -1.95113000e-05, -1.89003000e-05, -2.25061000e-05, -1.66082000e-05,
                  -3.06067000e-05, -1.16841000e-05, -4.44892000e-05, -1.30882000e-05,
                  -6.68618000e-06, -5.79481000e-05, -3.69515000e-05, -1.23283000e-05,
                  -3.80263000e-05, -5.14698000e-05, -1.13660000e-04, -4.91111000e-06,
                  -1.25213000e-05, -1.19771000e-05, -3.48460000e-05, -6.31349000e-05,
                  -2.13945000e-04, -6.39272000e-05, -7.22280000e-05, -4.11406000e-05,
                  -5.56648000e-05, -1.10319000e-04, 9.99901777e-01
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def ia_matrix_2008():
    """
    Real Name: b'ia matrix 2008'
    Original Eqn: b'0.883066833,-0.000461251,-0.259949765,-0.051115578,-0.05500655,-0.119948473,-0.016662548,-0.001515679,-0.006843401,-0.012539149,-0.000552577,-0.000199458,-0.000175244,-8.86027e-05,-0.000122722,-0.011132714,-0.000506196,-0.003287389,-0.001010253,-0.002327645,-0.002313368,-0.039138607,-0.001609733,-0.00083866,-0.000397172,-0.006874846,-0.00021503,-0.000177389,-0.000376736,-0.000837432,-0.001950958,-0.002649568,-0.002128874,-0.002573434,-0.030064079;-0.002393234,0.923721242,-0.003141118,-0.003898023,-0.00287269,-0.004747886,-0.005270747,-0.474645435,-0.028951097,-0.003886816,-0.070068508,-0.052358049,-0.002923065,-0.001107468,-0.001501986,-0.00559058,-0.114341392,-0.020438471,-0.000539608,-0.000523278,-0.000864394,-0.002324688,-0.005798186,-0.003825665,-0.004143811,-0.003550805,-0.000468452,-0.00027079,-0.001306737,-0.000847985,-0.003116566,-0.001764287,-0.001876974,-0.002836588,-0.065758121;-0.066582893,-0.00074526,0.834572535,-0.005604587,-0.105215897,-0.003089718,-0.00353709,-0.00142654,-0.012415787,-0.004117957,-0.002924866,-0.00206675,-0.001879969,-0.001526012,-0.001279509,-0.003116142,-0.001133208,-0.001655639,-0.001677488,-0.004651168,-0.004694989,-0.151651187,-0.00184416,-0.005720748,-0.004565617,-0.001833292,-0.001344328,-0.0007615,-0.000292801,-0.001916561,-0.007214735,-0.00854507,-0.011985727,-0.007320964,-0.003259645;-0.001707384,-0.000769116,-0.001640265,0.617995742,-0.062694873,-0.003382242,-0.006705502,-0.000527862,-0.003710538,-0.015746745,-0.00443434,-0.002251872,-0.002492484,-0.001923737,-0.004204267,-0.02521907,-0.001035346,-0.002403193,-0.001689941,-0.002578758,-0.002809304,-0.002853182,-0.002048819,-0.003085339,-0.002456519,-0.001969587,-0.000631169,-0.000470528,-0.000406803,-0.001488798,-0.002777961,-0.00112787,-0.003561734,-0.004218842,-6.1595e-05;-0.000157735,-4.92665e-05,-0.000124929,-0.013426817,0.768583886,-0.000525368,-0.000645853,-3.64237e-05,-0.00024683,-0.001057242,-0.000246083,-0.000142569,-0.000181057,-0.000301046,-0.002098825,-0.00582707,-7.62748e-05,-0.000106714,-0.000380078,-0.00029044,-0.000232897,-0.000120488,-0.000224672,-9.09419e-05,-0.000136775,-0.000185752,-0.000191092,-3.5758e-05,-9.94814e-06,-9.28969e-05,-0.000736368,-0.000115953,-0.000277723,-0.000422013,-1.62332e-06;-0.001613114,-0.001294385,-0.001675289,-0.001530329,-0.001954059,0.729938015,-0.012583822,-0.000245325,-0.00149331,-0.003079763,-0.008362719,-0.003849265,-0.003054613,-0.001612431,-0.00249878,-0.077259936,-0.000719147,-0.029051703,-0.001345699,-0.001275474,-0.001221726,-0.002226872,-0.001205438,-0.000595997,-0.000412795,-0.002130288,-0.000525836,-0.000287069,-0.001491699,-0.000932256,-0.002032824,-0.00296074,-0.001446804,-0.002604774,-2.13907e-05;-0.002347897,-0.002402983,-0.02446087,-0.012050243,-0.01493386,-0.014655172,0.747318057,-0.001558614,-0.014603231,-0.016236792,-0.02169169,-0.0049621760000000004,-0.006355081,-0.007990147,-0.003915717,-0.020339282,-0.002825317,-0.004078449,-0.008292997,-0.01122629,-0.010575063,-0.007904987,-0.006562643,-0.003260238,-0.004757781,-0.012848332,-0.009047158,-0.012751039,-0.001783151,-0.01965659,-0.017656725,-0.018951624,-0.008971498,-0.023180985,-0.000105017;-0.012903025,-0.005168669,-0.00338048,-0.005079605,-0.004403037,-0.004703286,-0.004705797,0.82524423,-0.05385856,-0.009521228,-0.021596017,-0.014852987,-0.004046637,-0.002060373,-0.002009099,-0.004162941,-0.035675995,-0.01041413,-0.005569073,-0.004690331,-0.003707433,-0.003558388,-0.055232112,-0.063627507,-0.111863795,-0.023204191,-0.00346552,-0.001219765,-0.001109523,-0.00466339,-0.008406853,-0.003131539,-0.002723827,-0.005253082,-1.9964e-05;-0.038093078,-0.008802879,-0.009420899,-0.061406788,-0.036750124,-0.036041073,-0.036078106,-0.01634648,0.747935176,-0.219871974,-0.038229431,-0.015168373,-0.009850142,-0.017548455,-0.010529052,-0.026733045,-0.006645235,-0.010768078,-0.005699406,-0.002710839,-0.002057522,-0.00463111,-0.003328833,-0.004281792,-0.003931692,-0.004514476,-0.001167984,-0.000696455,-0.001718561,-0.004738503,-0.009046684,-0.003925785,-0.061532646,-0.010279086,-0.000145392;-0.004583817,-0.00473405,-0.019002238,-0.01105915,-0.039783462,-0.007946052,-0.016913454,-0.003124288,-0.017716409,0.844309793,-0.012146958,-0.006778711,-0.021940416,-0.022981666,-0.033163141,-0.034265609,-0.002292744,-0.018162987,-0.014806301,-0.004399474,-0.004790636,-0.004219364,-0.011196807,-0.002715704,-0.003860152,-0.006586714,-0.003092539,-0.000627683,-0.001170567,-0.002804907,-0.003076307,-0.00146913,-0.005079801,-0.004535347,-6.23224e-05;-0.001500662,-0.003515705,-0.005270513,-0.002084452,-0.001618103,-0.006650338,-0.001248417,-0.001648036,-0.005607308,-0.005411849,0.85435455,-0.010795907,-0.004971774,-0.009919456,-0.006440327,-0.007524489,-0.001634151,-0.093740208,-0.003514457,-0.00095072,-0.000988566,-0.003282571,-0.001454533,-0.000414784,-0.000694666,-0.001490907,-0.001062147,-0.000120308,-0.001609551,-0.000983769,-0.001493022,-0.001715711,-0.001921749,-0.00187824,-2.8084e-05;-0.004336521,-0.016485225,-0.010194269,-0.004908737,-0.009173866,-0.021084942,-0.009331124,-0.005249702,-0.01266054,-0.023074626,-0.03442273,0.672902104,-0.152374823,-0.063684382,-0.085307337,-0.075941268,-0.006483766,-0.090265448,-0.014426577,-0.003192677,-0.002865317,-0.004313625,-0.006402572,-0.004120545,-0.0043721,-0.008474436,-0.003293518,-0.000575075,-0.002199501,-0.003771877,-0.00417679,-0.001806352,-0.002215985,-0.004707392,-0.000142877;-0.007963676,-0.013899418,-0.004359889,-0.010970394,-0.008495771,-0.011636156,-0.008233052,-0.007884052,-0.009122631,-0.015203,-0.024850548,-0.026917793,0.824012356,-0.018890287,-0.043751646,-0.016126966,-0.009330079,-0.020846595,-0.025100152,-0.002906527,-0.002611826,-0.002610432,-0.006293045,-0.009629099,-0.009111387,-0.009662975,-0.002950526,-0.001112787,-0.001617582,-0.003167967,-0.007240132,-0.002477907,-0.004785046,-0.004297406,-0.000358567;-0.00214387,-0.00745467,-0.004226065,-0.00702667,-0.005492984,-0.007884248,-0.010960725,-0.003647827,-0.011320183,-0.013874865,-0.012882551,-0.018502715,-0.109169596,0.599170482,-0.069859949,-0.033636588,-0.030322264,-0.044731989,-0.033640675,-0.009551852,-0.008082482,-0.00621385,-0.009651954,-0.003932446,-0.006588793,-0.012161828,-0.044581973,-0.004920693,-0.002598326,-0.022078824,-0.021791146,-0.014094387,-0.029122745,-0.017694174,-0.000953278;-0.005369257,-0.004520617,-0.002031266,-0.003224289,-0.0028152,-0.004921502,-0.004370982,-0.001225644,-0.002675204,-0.005465012,-0.00750656,-0.008288927,-0.017907836,-0.004602134,0.673285039,-0.008498111,-0.003975368,-0.006459087,-0.075061724,-0.005546829,-0.004129093,-0.002166,-0.040858253,-0.039167355,-0.062872625,-0.02154021,-0.003632457,-0.001183082,-0.001387942,-0.004442382,-0.019173956,-0.002800944,-0.001578171,-0.008683282,-0.000175499;-0.000717495,-0.00072647,-0.000971834,-0.004867637,-0.002934769,-0.003735308,-0.004200811,-0.000613319,-0.001716299,-0.00288804,-0.003699271,-0.009633449,-0.003678183,-0.002183246,-0.005004083,0.945162601,-0.00165845,-0.004549565,-0.001556164,-0.001113457,-0.001396111,-0.002385377,-0.003388021,-0.00067984,-0.002017877,-0.001473507,-0.001333957,-0.000825184,-0.001227515,-0.001690549,-0.003409503,-0.003687714,-0.003120203,-0.005170379,-0.001697087;-0.011167819,-0.027944126,-0.014619931,-0.0182518,-0.0080034,-0.018389821,-0.02484546,-0.046623395,-0.027864626,-0.021840589,-0.044984948,-0.030540785,-0.011760523,-0.007689493,-0.008318939,-0.010538893,0.852588953,-0.007664393,-0.011281822,-0.006659617,-0.01363611,-0.025021193,-0.016410701,-0.00335993,-0.00699522,-0.017284492,-0.010078704,-0.004412416,-0.007695805,-0.005845057,-0.014518957,-0.022283432,-0.012545613,-0.016356693,-0.000120179;-0.003034392,-0.005816464,-0.002116221,-0.002116411,-0.001267225,-0.002766644,-0.002937288,-0.005898464,-0.002888708,-0.002191548,-0.005671311,-0.003521057,-0.002379065,-0.001454471,-0.001576298,-0.00246934,-0.013959986,0.948979888,-0.005634533,-0.003319059,-0.004455793,-0.005724391,-0.008730393,-0.001498546,-0.002867782,-0.012127941,-0.010116918,-0.004919834,-0.030962164,-0.004334668,-0.017649077,-0.010836817,-0.007289666,-0.00898154,-0.00041569;-0.005121679,-0.002610618,-0.006453783,-0.003848487,-0.005114499,-0.005566305,-0.004645679,-0.002488477,-0.005222426,-0.005461503,-0.006009024,-0.005158073,-0.004028923,-0.002784147,-0.004427816,-0.006183625,-0.006556208,-0.006642176,0.988496564,-0.004013726,-0.004054795,-0.005023117,-0.014319223,-0.001808211,-0.005028604,-0.008155351,-0.00335508,-0.002879377,-0.002003363,-0.005219068,-0.004010447,-0.002579323,-0.00377922,-0.005822863,-1.81871e-05;-0.032699239,-0.01611326,-0.062247575,-0.037259035,-0.047678878,-0.049309807,-0.046136045,-0.061544515,-0.044498995,-0.043886289,-0.038279378,-0.041960879,-0.040257628,-0.030926399,-0.041369847,-0.04133872,-0.019804685,-0.041298437,-0.031505187,0.976630971,-0.012297876,-0.047573261,-0.021711006,-0.017511424,-0.021996426,-0.020539267,-0.011614428,-0.004164881,-0.004236661,-0.013233617,-0.020134299,-0.012254652,-0.027486097,-0.017319852,-0.000120548;-0.016171249,-0.005937669,-0.028074365,-0.019688226,-0.026027414,-0.017860231,-0.017099409,-0.013022477,-0.020436484,-0.018693695,-0.016434736,-0.015614709,-0.014920342,-0.010721517,-0.017203276,-0.024638087,-0.006945777,-0.025602704,-0.014759319,-0.005843301,0.993122735,-0.023683466,-0.013772966,-0.005891801,-0.009360104,-0.009037396,-0.007782133,-0.004735335,-0.002863558,-0.007844648,-0.007837229,-0.005731264,-0.012403489,-0.010668591,-0.000163198;-0.001487984,-0.002657068,-0.00391283,-0.003789712,-0.00444957,-0.00376272,-0.004944887,-0.000861543,-0.003812219,-0.004258741,-0.005196167,-0.004013493,-0.00471161,-0.003456311,-0.002538247,-0.003465655,-0.002651726,-0.004953341,-0.005073468,-0.007481113,-0.005670227,0.99013669,-0.007283999,-0.003820003,-0.01668363,-0.02227749,-0.0080321,-0.010669167,-0.002013743,-0.012380898,-0.010982929,-0.009412161,-0.008103904,-0.011879683,-3.41955e-05;-0.012814957,-0.015566525,-0.023797197,-0.018463554,-0.018586307,-0.022525977,-0.018584236,-0.051264356,-0.018250525,-0.016505482,-0.033688421,-0.017168289,-0.01201672,-0.007335872,-0.010663124,-0.01840666,-0.018107115,-0.019865211,-0.016791474,-0.02112726,-0.012145439,-0.009545962,0.954043297,-0.007911504,-0.009450786,-0.057433011,-0.008635227,-0.005226879,-0.001583825,-0.005668427,-0.010423137,-0.009625314,-0.007181877,-0.009230232,-0.000297154;-0.002283334,-0.005028394,-0.005125892,-0.004700224,-0.004221084,-0.007282444,-0.003231864,-0.002265431,-0.003126092,-0.003382655,-0.008382742,-0.005332349,-0.00312133,-0.001835573,-0.002561106,-0.00272722,-0.002440771,-0.002978595,-0.001653207,-0.006053763,-0.003106632,-0.001682922,-0.003453609,0.851180069,-0.003073373,-0.00573803,-0.001052656,-0.000637242,-0.002762188,-0.001365665,-0.001141496,-0.000848277,-0.000512857,-0.001240053,-1.43427e-05;-0.000805283,-0.001290366,-0.001420911,-0.001540716,-0.002211534,-0.00181482,-0.002109697,-0.00045717,-0.001591038,-0.001535323,-0.001564642,-0.001069999,-0.001870844,-0.001467328,-0.001219152,-0.001295759,-0.000692783,-0.001170454,-0.002355372,-0.00305556,-0.001624274,-0.001351079,-0.002656529,-0.004916401,0.969574012,-0.013534259,-0.003983541,-0.003156147,-0.000447514,-0.003739759,-0.004039149,-0.003387591,-0.001230895,-0.004426367,-7.86761e-06;-0.003705683,-0.004028341,-0.006702041,-0.003903129,-0.004073977,-0.00667041,-0.00895392,-0.005875314,-0.004842968,-0.005148014,-0.008053937,-0.004956764,-0.00407154,-0.002670861,-0.003860365,-0.004375227,-0.003482785,-0.01256258,-0.014415972,-0.020882714,-0.012306805,-0.007571998,-0.037997432,-0.114025202,-0.100829449,0.899226378,-0.00414388,-0.003390627,-0.001120032,-0.005150012,-0.004689621,-0.002905835,-0.003293637,-0.006368514,-1.22365e-05;-0.004257025,-0.004495071,-0.005440132,-0.006319407,-0.006222708,-0.005972687,-0.012162865,-0.003464361,-0.007636393,-0.00520897,-0.006552771,-0.007107266,-0.005995486,-0.007119543,-0.004156565,-0.011994123,-0.006840191,-0.011983306,-0.018273452,-0.019600403,-0.022015634,-0.015632367,-0.019077348,-0.018763236,-0.022001334,-0.022765869,0.879523226,-0.030227853,-0.004644135,-0.025191472,-0.023451091,-0.01224052,-0.014397699,-0.022506369,-0.000591323;-0.017084669,-0.019870163,-0.016020252,-0.022148976,-0.016690278,-0.016155701,-0.021409887,-0.012556969,-0.017541334,-0.014796726,-0.022992193,-0.01676336,-0.015434116,-0.012134299,-0.013062841,-0.027413706,-0.022155339,-0.021152864,-0.020655551,-0.030893885,-0.033435769,-0.024788005,-0.046262557,-0.021309999,-0.032177106,-0.033759519,-0.019107727,0.797001282,-0.081138403,-0.03455482,-0.022154498,-0.015773684,-0.023008985,-0.041261593,-0.008579669;-0.002547566,-0.004803331,-0.004478148,-0.004569459,-0.005770104,-0.005603393,-0.009143292,-0.001782537,-0.003944811,-0.005230502,-0.004530715,-0.004372559,-0.004763986,-0.003181958,-0.004458053,-0.006798967,-0.004019419,-0.010282345,-0.021893653,-0.019466688,-0.042313321,-0.027359355,-0.008501869,-0.011638082,-0.009278509,-0.020086987,-0.013495662,-0.023066431,0.965962298,-0.021679467,-0.014494773,-0.020400803,-0.033965995,-0.026232158,-9.48375e-07;-0.013130136,-0.026878061,-0.03728047,-0.020058328,-0.017625827,-0.023656721,-0.061809247,-0.01263344,-0.060999989,-0.033539289,-0.030825876,-0.026698988,-0.036531853,-0.037355543,-0.037293526,-0.028122209,-0.029069641,-0.054509579,-0.053377056,-0.061419461,-0.062080334,-0.047855786,-0.042803259,-0.02331633,-0.0660444,-0.062744709,-0.062036701,-0.110465483,-0.029193631,0.845877933,-0.088127442,-0.0381976,-0.068625813,-0.085218175,-0.001879258;-0.001363579,-0.002255038,-0.001880627,-0.000687351,-0.000589046,-0.002657276,-0.003796439,-0.00109176,-0.002681637,-0.001960127,-0.002572166,-0.003260108,-0.001184991,-0.000838597,-0.00102503,-0.002278417,-0.003963637,-0.001477366,-0.002855039,-0.00160049,-0.002712516,-0.003679163,-0.003511789,-0.004661511,-0.008558092,-0.003174156,-0.002673534,-0.001686242,-0.003121738,-0.002895619,0.992543038,-0.004526936,-0.004316554,-0.008148121,-3.79376e-06;-0.00054135,-0.000335151,-0.000401494,-0.000300798,-0.000344699,-0.000328907,-0.000508096,-0.000337824,-0.000844288,-0.000536318,-0.00048254,-0.000472144,-0.000684372,-0.000509286,-0.000676231,-0.000380958,-0.000588282,-0.000457967,-0.000765797,-0.000733248,-0.001095293,-0.000561342,-0.000928639,-0.000263037,-0.002056454,-0.001139964,-0.001257687,-0.001213918,-0.000286844,-0.002172085,-0.004056209,0.984936723,-0.001371115,-0.001658622,-6.70971e-06;-0.001261777,-0.000379093,-0.000450631,-0.00038554,-0.000915347,-0.000546368,-0.000504663,-0.000140682,-0.000506592,-0.000364872,-0.000800419,-0.000495891,-0.000892746,-0.00040652,-0.000486336,-0.000458898,-0.000389192,-0.000385055,-0.000522866,-0.000466226,-0.000427195,-0.000855483,-0.000551576,-0.000297208,-0.00042782,-0.000455112,-0.000538112,-0.000559514,-8.87142e-05,-0.00056777,-0.005709985,-0.001644097,0.967511122,-0.001343209,-2.60735e-07;-0.002983998,-0.005332036,-0.005017302,-0.004018995,-0.005771622,-0.004572854,-0.012087739,-0.001517787,-0.006552142,-0.004357351,-0.005458368,-0.005097927,-0.003946228,-0.002666698,-0.003861679,-0.004390676,-0.005149944,-0.005606704,-0.006992206,-0.007700545,-0.008564416,-0.014206769,-0.012744358,-0.004510437,-0.007086292,-0.014481749,-0.016733324,-0.010568599,-0.006694122,-0.023885932,-0.01729728,-0.012066863,-0.013592285,0.923436988,-0.001047606;-1.31904e-05,-2.25995e-05,-2.36995e-05,-8.45047e-05,-2.70827e-05,-2.88484e-05,-2.97422e-05,-1.11246e-05,-1.73989e-05,-1.79229e-05,-1.98974e-05,-1.43748e-05,-2.90354e-05,-1.13338e-05,-4.37457e-05,-1.18856e-05,-6.18323e-06,-5.23174e-05,-2.98652e-05,-1.34951e-05,-3.75016e-05,-5.31313e-05,-0.000119306,-4.89536e-06,-1.31267e-05,-1.0709e-05,-3.37309e-05,-6.97744e-05,-0.000206878,-6.25151e-05,-6.82776e-05,-4.17579e-05,-5.77957e-05,-0.000103009,0.999926417;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            8.83066833e-01, -4.61251000e-04, -2.59949765e-01, -5.11155780e-02, -5.50065500e-02,
            -1.19948473e-01, -1.66625480e-02, -1.51567900e-03, -6.84340100e-03, -1.25391490e-02,
            -5.52577000e-04, -1.99458000e-04, -1.75244000e-04, -8.86027000e-05, -1.22722000e-04,
            -1.11327140e-02, -5.06196000e-04, -3.28738900e-03, -1.01025300e-03, -2.32764500e-03,
            -2.31336800e-03, -3.91386070e-02, -1.60973300e-03, -8.38660000e-04, -3.97172000e-04,
            -6.87484600e-03, -2.15030000e-04, -1.77389000e-04, -3.76736000e-04, -8.37432000e-04,
            -1.95095800e-03, -2.64956800e-03, -2.12887400e-03, -2.57343400e-03, -3.00640790e-02
        ],
              [
                  -2.39323400e-03, 9.23721242e-01, -3.14111800e-03, -3.89802300e-03,
                  -2.87269000e-03, -4.74788600e-03, -5.27074700e-03, -4.74645435e-01,
                  -2.89510970e-02, -3.88681600e-03, -7.00685080e-02, -5.23580490e-02,
                  -2.92306500e-03, -1.10746800e-03, -1.50198600e-03, -5.59058000e-03,
                  -1.14341392e-01, -2.04384710e-02, -5.39608000e-04, -5.23278000e-04,
                  -8.64394000e-04, -2.32468800e-03, -5.79818600e-03, -3.82566500e-03,
                  -4.14381100e-03, -3.55080500e-03, -4.68452000e-04, -2.70790000e-04,
                  -1.30673700e-03, -8.47985000e-04, -3.11656600e-03, -1.76428700e-03,
                  -1.87697400e-03, -2.83658800e-03, -6.57581210e-02
              ],
              [
                  -6.65828930e-02, -7.45260000e-04, 8.34572535e-01, -5.60458700e-03,
                  -1.05215897e-01, -3.08971800e-03, -3.53709000e-03, -1.42654000e-03,
                  -1.24157870e-02, -4.11795700e-03, -2.92486600e-03, -2.06675000e-03,
                  -1.87996900e-03, -1.52601200e-03, -1.27950900e-03, -3.11614200e-03,
                  -1.13320800e-03, -1.65563900e-03, -1.67748800e-03, -4.65116800e-03,
                  -4.69498900e-03, -1.51651187e-01, -1.84416000e-03, -5.72074800e-03,
                  -4.56561700e-03, -1.83329200e-03, -1.34432800e-03, -7.61500000e-04,
                  -2.92801000e-04, -1.91656100e-03, -7.21473500e-03, -8.54507000e-03,
                  -1.19857270e-02, -7.32096400e-03, -3.25964500e-03
              ],
              [
                  -1.70738400e-03, -7.69116000e-04, -1.64026500e-03, 6.17995742e-01,
                  -6.26948730e-02, -3.38224200e-03, -6.70550200e-03, -5.27862000e-04,
                  -3.71053800e-03, -1.57467450e-02, -4.43434000e-03, -2.25187200e-03,
                  -2.49248400e-03, -1.92373700e-03, -4.20426700e-03, -2.52190700e-02,
                  -1.03534600e-03, -2.40319300e-03, -1.68994100e-03, -2.57875800e-03,
                  -2.80930400e-03, -2.85318200e-03, -2.04881900e-03, -3.08533900e-03,
                  -2.45651900e-03, -1.96958700e-03, -6.31169000e-04, -4.70528000e-04,
                  -4.06803000e-04, -1.48879800e-03, -2.77796100e-03, -1.12787000e-03,
                  -3.56173400e-03, -4.21884200e-03, -6.15950000e-05
              ],
              [
                  -1.57735000e-04, -4.92665000e-05, -1.24929000e-04, -1.34268170e-02,
                  7.68583886e-01, -5.25368000e-04, -6.45853000e-04, -3.64237000e-05,
                  -2.46830000e-04, -1.05724200e-03, -2.46083000e-04, -1.42569000e-04,
                  -1.81057000e-04, -3.01046000e-04, -2.09882500e-03, -5.82707000e-03,
                  -7.62748000e-05, -1.06714000e-04, -3.80078000e-04, -2.90440000e-04,
                  -2.32897000e-04, -1.20488000e-04, -2.24672000e-04, -9.09419000e-05,
                  -1.36775000e-04, -1.85752000e-04, -1.91092000e-04, -3.57580000e-05,
                  -9.94814000e-06, -9.28969000e-05, -7.36368000e-04, -1.15953000e-04,
                  -2.77723000e-04, -4.22013000e-04, -1.62332000e-06
              ],
              [
                  -1.61311400e-03, -1.29438500e-03, -1.67528900e-03, -1.53032900e-03,
                  -1.95405900e-03, 7.29938015e-01, -1.25838220e-02, -2.45325000e-04,
                  -1.49331000e-03, -3.07976300e-03, -8.36271900e-03, -3.84926500e-03,
                  -3.05461300e-03, -1.61243100e-03, -2.49878000e-03, -7.72599360e-02,
                  -7.19147000e-04, -2.90517030e-02, -1.34569900e-03, -1.27547400e-03,
                  -1.22172600e-03, -2.22687200e-03, -1.20543800e-03, -5.95997000e-04,
                  -4.12795000e-04, -2.13028800e-03, -5.25836000e-04, -2.87069000e-04,
                  -1.49169900e-03, -9.32256000e-04, -2.03282400e-03, -2.96074000e-03,
                  -1.44680400e-03, -2.60477400e-03, -2.13907000e-05
              ],
              [
                  -2.34789700e-03, -2.40298300e-03, -2.44608700e-02, -1.20502430e-02,
                  -1.49338600e-02, -1.46551720e-02, 7.47318057e-01, -1.55861400e-03,
                  -1.46032310e-02, -1.62367920e-02, -2.16916900e-02, -4.96217600e-03,
                  -6.35508100e-03, -7.99014700e-03, -3.91571700e-03, -2.03392820e-02,
                  -2.82531700e-03, -4.07844900e-03, -8.29299700e-03, -1.12262900e-02,
                  -1.05750630e-02, -7.90498700e-03, -6.56264300e-03, -3.26023800e-03,
                  -4.75778100e-03, -1.28483320e-02, -9.04715800e-03, -1.27510390e-02,
                  -1.78315100e-03, -1.96565900e-02, -1.76567250e-02, -1.89516240e-02,
                  -8.97149800e-03, -2.31809850e-02, -1.05017000e-04
              ],
              [
                  -1.29030250e-02, -5.16866900e-03, -3.38048000e-03, -5.07960500e-03,
                  -4.40303700e-03, -4.70328600e-03, -4.70579700e-03, 8.25244230e-01,
                  -5.38585600e-02, -9.52122800e-03, -2.15960170e-02, -1.48529870e-02,
                  -4.04663700e-03, -2.06037300e-03, -2.00909900e-03, -4.16294100e-03,
                  -3.56759950e-02, -1.04141300e-02, -5.56907300e-03, -4.69033100e-03,
                  -3.70743300e-03, -3.55838800e-03, -5.52321120e-02, -6.36275070e-02,
                  -1.11863795e-01, -2.32041910e-02, -3.46552000e-03, -1.21976500e-03,
                  -1.10952300e-03, -4.66339000e-03, -8.40685300e-03, -3.13153900e-03,
                  -2.72382700e-03, -5.25308200e-03, -1.99640000e-05
              ],
              [
                  -3.80930780e-02, -8.80287900e-03, -9.42089900e-03, -6.14067880e-02,
                  -3.67501240e-02, -3.60410730e-02, -3.60781060e-02, -1.63464800e-02,
                  7.47935176e-01, -2.19871974e-01, -3.82294310e-02, -1.51683730e-02,
                  -9.85014200e-03, -1.75484550e-02, -1.05290520e-02, -2.67330450e-02,
                  -6.64523500e-03, -1.07680780e-02, -5.69940600e-03, -2.71083900e-03,
                  -2.05752200e-03, -4.63111000e-03, -3.32883300e-03, -4.28179200e-03,
                  -3.93169200e-03, -4.51447600e-03, -1.16798400e-03, -6.96455000e-04,
                  -1.71856100e-03, -4.73850300e-03, -9.04668400e-03, -3.92578500e-03,
                  -6.15326460e-02, -1.02790860e-02, -1.45392000e-04
              ],
              [
                  -4.58381700e-03, -4.73405000e-03, -1.90022380e-02, -1.10591500e-02,
                  -3.97834620e-02, -7.94605200e-03, -1.69134540e-02, -3.12428800e-03,
                  -1.77164090e-02, 8.44309793e-01, -1.21469580e-02, -6.77871100e-03,
                  -2.19404160e-02, -2.29816660e-02, -3.31631410e-02, -3.42656090e-02,
                  -2.29274400e-03, -1.81629870e-02, -1.48063010e-02, -4.39947400e-03,
                  -4.79063600e-03, -4.21936400e-03, -1.11968070e-02, -2.71570400e-03,
                  -3.86015200e-03, -6.58671400e-03, -3.09253900e-03, -6.27683000e-04,
                  -1.17056700e-03, -2.80490700e-03, -3.07630700e-03, -1.46913000e-03,
                  -5.07980100e-03, -4.53534700e-03, -6.23224000e-05
              ],
              [
                  -1.50066200e-03, -3.51570500e-03, -5.27051300e-03, -2.08445200e-03,
                  -1.61810300e-03, -6.65033800e-03, -1.24841700e-03, -1.64803600e-03,
                  -5.60730800e-03, -5.41184900e-03, 8.54354550e-01, -1.07959070e-02,
                  -4.97177400e-03, -9.91945600e-03, -6.44032700e-03, -7.52448900e-03,
                  -1.63415100e-03, -9.37402080e-02, -3.51445700e-03, -9.50720000e-04,
                  -9.88566000e-04, -3.28257100e-03, -1.45453300e-03, -4.14784000e-04,
                  -6.94666000e-04, -1.49090700e-03, -1.06214700e-03, -1.20308000e-04,
                  -1.60955100e-03, -9.83769000e-04, -1.49302200e-03, -1.71571100e-03,
                  -1.92174900e-03, -1.87824000e-03, -2.80840000e-05
              ],
              [
                  -4.33652100e-03, -1.64852250e-02, -1.01942690e-02, -4.90873700e-03,
                  -9.17386600e-03, -2.10849420e-02, -9.33112400e-03, -5.24970200e-03,
                  -1.26605400e-02, -2.30746260e-02, -3.44227300e-02, 6.72902104e-01,
                  -1.52374823e-01, -6.36843820e-02, -8.53073370e-02, -7.59412680e-02,
                  -6.48376600e-03, -9.02654480e-02, -1.44265770e-02, -3.19267700e-03,
                  -2.86531700e-03, -4.31362500e-03, -6.40257200e-03, -4.12054500e-03,
                  -4.37210000e-03, -8.47443600e-03, -3.29351800e-03, -5.75075000e-04,
                  -2.19950100e-03, -3.77187700e-03, -4.17679000e-03, -1.80635200e-03,
                  -2.21598500e-03, -4.70739200e-03, -1.42877000e-04
              ],
              [
                  -7.96367600e-03, -1.38994180e-02, -4.35988900e-03, -1.09703940e-02,
                  -8.49577100e-03, -1.16361560e-02, -8.23305200e-03, -7.88405200e-03,
                  -9.12263100e-03, -1.52030000e-02, -2.48505480e-02, -2.69177930e-02,
                  8.24012356e-01, -1.88902870e-02, -4.37516460e-02, -1.61269660e-02,
                  -9.33007900e-03, -2.08465950e-02, -2.51001520e-02, -2.90652700e-03,
                  -2.61182600e-03, -2.61043200e-03, -6.29304500e-03, -9.62909900e-03,
                  -9.11138700e-03, -9.66297500e-03, -2.95052600e-03, -1.11278700e-03,
                  -1.61758200e-03, -3.16796700e-03, -7.24013200e-03, -2.47790700e-03,
                  -4.78504600e-03, -4.29740600e-03, -3.58567000e-04
              ],
              [
                  -2.14387000e-03, -7.45467000e-03, -4.22606500e-03, -7.02667000e-03,
                  -5.49298400e-03, -7.88424800e-03, -1.09607250e-02, -3.64782700e-03,
                  -1.13201830e-02, -1.38748650e-02, -1.28825510e-02, -1.85027150e-02,
                  -1.09169596e-01, 5.99170482e-01, -6.98599490e-02, -3.36365880e-02,
                  -3.03222640e-02, -4.47319890e-02, -3.36406750e-02, -9.55185200e-03,
                  -8.08248200e-03, -6.21385000e-03, -9.65195400e-03, -3.93244600e-03,
                  -6.58879300e-03, -1.21618280e-02, -4.45819730e-02, -4.92069300e-03,
                  -2.59832600e-03, -2.20788240e-02, -2.17911460e-02, -1.40943870e-02,
                  -2.91227450e-02, -1.76941740e-02, -9.53278000e-04
              ],
              [
                  -5.36925700e-03, -4.52061700e-03, -2.03126600e-03, -3.22428900e-03,
                  -2.81520000e-03, -4.92150200e-03, -4.37098200e-03, -1.22564400e-03,
                  -2.67520400e-03, -5.46501200e-03, -7.50656000e-03, -8.28892700e-03,
                  -1.79078360e-02, -4.60213400e-03, 6.73285039e-01, -8.49811100e-03,
                  -3.97536800e-03, -6.45908700e-03, -7.50617240e-02, -5.54682900e-03,
                  -4.12909300e-03, -2.16600000e-03, -4.08582530e-02, -3.91673550e-02,
                  -6.28726250e-02, -2.15402100e-02, -3.63245700e-03, -1.18308200e-03,
                  -1.38794200e-03, -4.44238200e-03, -1.91739560e-02, -2.80094400e-03,
                  -1.57817100e-03, -8.68328200e-03, -1.75499000e-04
              ],
              [
                  -7.17495000e-04, -7.26470000e-04, -9.71834000e-04, -4.86763700e-03,
                  -2.93476900e-03, -3.73530800e-03, -4.20081100e-03, -6.13319000e-04,
                  -1.71629900e-03, -2.88804000e-03, -3.69927100e-03, -9.63344900e-03,
                  -3.67818300e-03, -2.18324600e-03, -5.00408300e-03, 9.45162601e-01,
                  -1.65845000e-03, -4.54956500e-03, -1.55616400e-03, -1.11345700e-03,
                  -1.39611100e-03, -2.38537700e-03, -3.38802100e-03, -6.79840000e-04,
                  -2.01787700e-03, -1.47350700e-03, -1.33395700e-03, -8.25184000e-04,
                  -1.22751500e-03, -1.69054900e-03, -3.40950300e-03, -3.68771400e-03,
                  -3.12020300e-03, -5.17037900e-03, -1.69708700e-03
              ],
              [
                  -1.11678190e-02, -2.79441260e-02, -1.46199310e-02, -1.82518000e-02,
                  -8.00340000e-03, -1.83898210e-02, -2.48454600e-02, -4.66233950e-02,
                  -2.78646260e-02, -2.18405890e-02, -4.49849480e-02, -3.05407850e-02,
                  -1.17605230e-02, -7.68949300e-03, -8.31893900e-03, -1.05388930e-02,
                  8.52588953e-01, -7.66439300e-03, -1.12818220e-02, -6.65961700e-03,
                  -1.36361100e-02, -2.50211930e-02, -1.64107010e-02, -3.35993000e-03,
                  -6.99522000e-03, -1.72844920e-02, -1.00787040e-02, -4.41241600e-03,
                  -7.69580500e-03, -5.84505700e-03, -1.45189570e-02, -2.22834320e-02,
                  -1.25456130e-02, -1.63566930e-02, -1.20179000e-04
              ],
              [
                  -3.03439200e-03, -5.81646400e-03, -2.11622100e-03, -2.11641100e-03,
                  -1.26722500e-03, -2.76664400e-03, -2.93728800e-03, -5.89846400e-03,
                  -2.88870800e-03, -2.19154800e-03, -5.67131100e-03, -3.52105700e-03,
                  -2.37906500e-03, -1.45447100e-03, -1.57629800e-03, -2.46934000e-03,
                  -1.39599860e-02, 9.48979888e-01, -5.63453300e-03, -3.31905900e-03,
                  -4.45579300e-03, -5.72439100e-03, -8.73039300e-03, -1.49854600e-03,
                  -2.86778200e-03, -1.21279410e-02, -1.01169180e-02, -4.91983400e-03,
                  -3.09621640e-02, -4.33466800e-03, -1.76490770e-02, -1.08368170e-02,
                  -7.28966600e-03, -8.98154000e-03, -4.15690000e-04
              ],
              [
                  -5.12167900e-03, -2.61061800e-03, -6.45378300e-03, -3.84848700e-03,
                  -5.11449900e-03, -5.56630500e-03, -4.64567900e-03, -2.48847700e-03,
                  -5.22242600e-03, -5.46150300e-03, -6.00902400e-03, -5.15807300e-03,
                  -4.02892300e-03, -2.78414700e-03, -4.42781600e-03, -6.18362500e-03,
                  -6.55620800e-03, -6.64217600e-03, 9.88496564e-01, -4.01372600e-03,
                  -4.05479500e-03, -5.02311700e-03, -1.43192230e-02, -1.80821100e-03,
                  -5.02860400e-03, -8.15535100e-03, -3.35508000e-03, -2.87937700e-03,
                  -2.00336300e-03, -5.21906800e-03, -4.01044700e-03, -2.57932300e-03,
                  -3.77922000e-03, -5.82286300e-03, -1.81871000e-05
              ],
              [
                  -3.26992390e-02, -1.61132600e-02, -6.22475750e-02, -3.72590350e-02,
                  -4.76788780e-02, -4.93098070e-02, -4.61360450e-02, -6.15445150e-02,
                  -4.44989950e-02, -4.38862890e-02, -3.82793780e-02, -4.19608790e-02,
                  -4.02576280e-02, -3.09263990e-02, -4.13698470e-02, -4.13387200e-02,
                  -1.98046850e-02, -4.12984370e-02, -3.15051870e-02, 9.76630971e-01,
                  -1.22978760e-02, -4.75732610e-02, -2.17110060e-02, -1.75114240e-02,
                  -2.19964260e-02, -2.05392670e-02, -1.16144280e-02, -4.16488100e-03,
                  -4.23666100e-03, -1.32336170e-02, -2.01342990e-02, -1.22546520e-02,
                  -2.74860970e-02, -1.73198520e-02, -1.20548000e-04
              ],
              [
                  -1.61712490e-02, -5.93766900e-03, -2.80743650e-02, -1.96882260e-02,
                  -2.60274140e-02, -1.78602310e-02, -1.70994090e-02, -1.30224770e-02,
                  -2.04364840e-02, -1.86936950e-02, -1.64347360e-02, -1.56147090e-02,
                  -1.49203420e-02, -1.07215170e-02, -1.72032760e-02, -2.46380870e-02,
                  -6.94577700e-03, -2.56027040e-02, -1.47593190e-02, -5.84330100e-03,
                  9.93122735e-01, -2.36834660e-02, -1.37729660e-02, -5.89180100e-03,
                  -9.36010400e-03, -9.03739600e-03, -7.78213300e-03, -4.73533500e-03,
                  -2.86355800e-03, -7.84464800e-03, -7.83722900e-03, -5.73126400e-03,
                  -1.24034890e-02, -1.06685910e-02, -1.63198000e-04
              ],
              [
                  -1.48798400e-03, -2.65706800e-03, -3.91283000e-03, -3.78971200e-03,
                  -4.44957000e-03, -3.76272000e-03, -4.94488700e-03, -8.61543000e-04,
                  -3.81221900e-03, -4.25874100e-03, -5.19616700e-03, -4.01349300e-03,
                  -4.71161000e-03, -3.45631100e-03, -2.53824700e-03, -3.46565500e-03,
                  -2.65172600e-03, -4.95334100e-03, -5.07346800e-03, -7.48111300e-03,
                  -5.67022700e-03, 9.90136690e-01, -7.28399900e-03, -3.82000300e-03,
                  -1.66836300e-02, -2.22774900e-02, -8.03210000e-03, -1.06691670e-02,
                  -2.01374300e-03, -1.23808980e-02, -1.09829290e-02, -9.41216100e-03,
                  -8.10390400e-03, -1.18796830e-02, -3.41955000e-05
              ],
              [
                  -1.28149570e-02, -1.55665250e-02, -2.37971970e-02, -1.84635540e-02,
                  -1.85863070e-02, -2.25259770e-02, -1.85842360e-02, -5.12643560e-02,
                  -1.82505250e-02, -1.65054820e-02, -3.36884210e-02, -1.71682890e-02,
                  -1.20167200e-02, -7.33587200e-03, -1.06631240e-02, -1.84066600e-02,
                  -1.81071150e-02, -1.98652110e-02, -1.67914740e-02, -2.11272600e-02,
                  -1.21454390e-02, -9.54596200e-03, 9.54043297e-01, -7.91150400e-03,
                  -9.45078600e-03, -5.74330110e-02, -8.63522700e-03, -5.22687900e-03,
                  -1.58382500e-03, -5.66842700e-03, -1.04231370e-02, -9.62531400e-03,
                  -7.18187700e-03, -9.23023200e-03, -2.97154000e-04
              ],
              [
                  -2.28333400e-03, -5.02839400e-03, -5.12589200e-03, -4.70022400e-03,
                  -4.22108400e-03, -7.28244400e-03, -3.23186400e-03, -2.26543100e-03,
                  -3.12609200e-03, -3.38265500e-03, -8.38274200e-03, -5.33234900e-03,
                  -3.12133000e-03, -1.83557300e-03, -2.56110600e-03, -2.72722000e-03,
                  -2.44077100e-03, -2.97859500e-03, -1.65320700e-03, -6.05376300e-03,
                  -3.10663200e-03, -1.68292200e-03, -3.45360900e-03, 8.51180069e-01,
                  -3.07337300e-03, -5.73803000e-03, -1.05265600e-03, -6.37242000e-04,
                  -2.76218800e-03, -1.36566500e-03, -1.14149600e-03, -8.48277000e-04,
                  -5.12857000e-04, -1.24005300e-03, -1.43427000e-05
              ],
              [
                  -8.05283000e-04, -1.29036600e-03, -1.42091100e-03, -1.54071600e-03,
                  -2.21153400e-03, -1.81482000e-03, -2.10969700e-03, -4.57170000e-04,
                  -1.59103800e-03, -1.53532300e-03, -1.56464200e-03, -1.06999900e-03,
                  -1.87084400e-03, -1.46732800e-03, -1.21915200e-03, -1.29575900e-03,
                  -6.92783000e-04, -1.17045400e-03, -2.35537200e-03, -3.05556000e-03,
                  -1.62427400e-03, -1.35107900e-03, -2.65652900e-03, -4.91640100e-03,
                  9.69574012e-01, -1.35342590e-02, -3.98354100e-03, -3.15614700e-03,
                  -4.47514000e-04, -3.73975900e-03, -4.03914900e-03, -3.38759100e-03,
                  -1.23089500e-03, -4.42636700e-03, -7.86761000e-06
              ],
              [
                  -3.70568300e-03, -4.02834100e-03, -6.70204100e-03, -3.90312900e-03,
                  -4.07397700e-03, -6.67041000e-03, -8.95392000e-03, -5.87531400e-03,
                  -4.84296800e-03, -5.14801400e-03, -8.05393700e-03, -4.95676400e-03,
                  -4.07154000e-03, -2.67086100e-03, -3.86036500e-03, -4.37522700e-03,
                  -3.48278500e-03, -1.25625800e-02, -1.44159720e-02, -2.08827140e-02,
                  -1.23068050e-02, -7.57199800e-03, -3.79974320e-02, -1.14025202e-01,
                  -1.00829449e-01, 8.99226378e-01, -4.14388000e-03, -3.39062700e-03,
                  -1.12003200e-03, -5.15001200e-03, -4.68962100e-03, -2.90583500e-03,
                  -3.29363700e-03, -6.36851400e-03, -1.22365000e-05
              ],
              [
                  -4.25702500e-03, -4.49507100e-03, -5.44013200e-03, -6.31940700e-03,
                  -6.22270800e-03, -5.97268700e-03, -1.21628650e-02, -3.46436100e-03,
                  -7.63639300e-03, -5.20897000e-03, -6.55277100e-03, -7.10726600e-03,
                  -5.99548600e-03, -7.11954300e-03, -4.15656500e-03, -1.19941230e-02,
                  -6.84019100e-03, -1.19833060e-02, -1.82734520e-02, -1.96004030e-02,
                  -2.20156340e-02, -1.56323670e-02, -1.90773480e-02, -1.87632360e-02,
                  -2.20013340e-02, -2.27658690e-02, 8.79523226e-01, -3.02278530e-02,
                  -4.64413500e-03, -2.51914720e-02, -2.34510910e-02, -1.22405200e-02,
                  -1.43976990e-02, -2.25063690e-02, -5.91323000e-04
              ],
              [
                  -1.70846690e-02, -1.98701630e-02, -1.60202520e-02, -2.21489760e-02,
                  -1.66902780e-02, -1.61557010e-02, -2.14098870e-02, -1.25569690e-02,
                  -1.75413340e-02, -1.47967260e-02, -2.29921930e-02, -1.67633600e-02,
                  -1.54341160e-02, -1.21342990e-02, -1.30628410e-02, -2.74137060e-02,
                  -2.21553390e-02, -2.11528640e-02, -2.06555510e-02, -3.08938850e-02,
                  -3.34357690e-02, -2.47880050e-02, -4.62625570e-02, -2.13099990e-02,
                  -3.21771060e-02, -3.37595190e-02, -1.91077270e-02, 7.97001282e-01,
                  -8.11384030e-02, -3.45548200e-02, -2.21544980e-02, -1.57736840e-02,
                  -2.30089850e-02, -4.12615930e-02, -8.57966900e-03
              ],
              [
                  -2.54756600e-03, -4.80333100e-03, -4.47814800e-03, -4.56945900e-03,
                  -5.77010400e-03, -5.60339300e-03, -9.14329200e-03, -1.78253700e-03,
                  -3.94481100e-03, -5.23050200e-03, -4.53071500e-03, -4.37255900e-03,
                  -4.76398600e-03, -3.18195800e-03, -4.45805300e-03, -6.79896700e-03,
                  -4.01941900e-03, -1.02823450e-02, -2.18936530e-02, -1.94666880e-02,
                  -4.23133210e-02, -2.73593550e-02, -8.50186900e-03, -1.16380820e-02,
                  -9.27850900e-03, -2.00869870e-02, -1.34956620e-02, -2.30664310e-02,
                  9.65962298e-01, -2.16794670e-02, -1.44947730e-02, -2.04008030e-02,
                  -3.39659950e-02, -2.62321580e-02, -9.48375000e-07
              ],
              [
                  -1.31301360e-02, -2.68780610e-02, -3.72804700e-02, -2.00583280e-02,
                  -1.76258270e-02, -2.36567210e-02, -6.18092470e-02, -1.26334400e-02,
                  -6.09999890e-02, -3.35392890e-02, -3.08258760e-02, -2.66989880e-02,
                  -3.65318530e-02, -3.73555430e-02, -3.72935260e-02, -2.81222090e-02,
                  -2.90696410e-02, -5.45095790e-02, -5.33770560e-02, -6.14194610e-02,
                  -6.20803340e-02, -4.78557860e-02, -4.28032590e-02, -2.33163300e-02,
                  -6.60444000e-02, -6.27447090e-02, -6.20367010e-02, -1.10465483e-01,
                  -2.91936310e-02, 8.45877933e-01, -8.81274420e-02, -3.81976000e-02,
                  -6.86258130e-02, -8.52181750e-02, -1.87925800e-03
              ],
              [
                  -1.36357900e-03, -2.25503800e-03, -1.88062700e-03, -6.87351000e-04,
                  -5.89046000e-04, -2.65727600e-03, -3.79643900e-03, -1.09176000e-03,
                  -2.68163700e-03, -1.96012700e-03, -2.57216600e-03, -3.26010800e-03,
                  -1.18499100e-03, -8.38597000e-04, -1.02503000e-03, -2.27841700e-03,
                  -3.96363700e-03, -1.47736600e-03, -2.85503900e-03, -1.60049000e-03,
                  -2.71251600e-03, -3.67916300e-03, -3.51178900e-03, -4.66151100e-03,
                  -8.55809200e-03, -3.17415600e-03, -2.67353400e-03, -1.68624200e-03,
                  -3.12173800e-03, -2.89561900e-03, 9.92543038e-01, -4.52693600e-03,
                  -4.31655400e-03, -8.14812100e-03, -3.79376000e-06
              ],
              [
                  -5.41350000e-04, -3.35151000e-04, -4.01494000e-04, -3.00798000e-04,
                  -3.44699000e-04, -3.28907000e-04, -5.08096000e-04, -3.37824000e-04,
                  -8.44288000e-04, -5.36318000e-04, -4.82540000e-04, -4.72144000e-04,
                  -6.84372000e-04, -5.09286000e-04, -6.76231000e-04, -3.80958000e-04,
                  -5.88282000e-04, -4.57967000e-04, -7.65797000e-04, -7.33248000e-04,
                  -1.09529300e-03, -5.61342000e-04, -9.28639000e-04, -2.63037000e-04,
                  -2.05645400e-03, -1.13996400e-03, -1.25768700e-03, -1.21391800e-03,
                  -2.86844000e-04, -2.17208500e-03, -4.05620900e-03, 9.84936723e-01,
                  -1.37111500e-03, -1.65862200e-03, -6.70971000e-06
              ],
              [
                  -1.26177700e-03, -3.79093000e-04, -4.50631000e-04, -3.85540000e-04,
                  -9.15347000e-04, -5.46368000e-04, -5.04663000e-04, -1.40682000e-04,
                  -5.06592000e-04, -3.64872000e-04, -8.00419000e-04, -4.95891000e-04,
                  -8.92746000e-04, -4.06520000e-04, -4.86336000e-04, -4.58898000e-04,
                  -3.89192000e-04, -3.85055000e-04, -5.22866000e-04, -4.66226000e-04,
                  -4.27195000e-04, -8.55483000e-04, -5.51576000e-04, -2.97208000e-04,
                  -4.27820000e-04, -4.55112000e-04, -5.38112000e-04, -5.59514000e-04,
                  -8.87142000e-05, -5.67770000e-04, -5.70998500e-03, -1.64409700e-03,
                  9.67511122e-01, -1.34320900e-03, -2.60735000e-07
              ],
              [
                  -2.98399800e-03, -5.33203600e-03, -5.01730200e-03, -4.01899500e-03,
                  -5.77162200e-03, -4.57285400e-03, -1.20877390e-02, -1.51778700e-03,
                  -6.55214200e-03, -4.35735100e-03, -5.45836800e-03, -5.09792700e-03,
                  -3.94622800e-03, -2.66669800e-03, -3.86167900e-03, -4.39067600e-03,
                  -5.14994400e-03, -5.60670400e-03, -6.99220600e-03, -7.70054500e-03,
                  -8.56441600e-03, -1.42067690e-02, -1.27443580e-02, -4.51043700e-03,
                  -7.08629200e-03, -1.44817490e-02, -1.67333240e-02, -1.05685990e-02,
                  -6.69412200e-03, -2.38859320e-02, -1.72972800e-02, -1.20668630e-02,
                  -1.35922850e-02, 9.23436988e-01, -1.04760600e-03
              ],
              [
                  -1.31904000e-05, -2.25995000e-05, -2.36995000e-05, -8.45047000e-05,
                  -2.70827000e-05, -2.88484000e-05, -2.97422000e-05, -1.11246000e-05,
                  -1.73989000e-05, -1.79229000e-05, -1.98974000e-05, -1.43748000e-05,
                  -2.90354000e-05, -1.13338000e-05, -4.37457000e-05, -1.18856000e-05,
                  -6.18323000e-06, -5.23174000e-05, -2.98652000e-05, -1.34951000e-05,
                  -3.75016000e-05, -5.31313000e-05, -1.19306000e-04, -4.89536000e-06,
                  -1.31267000e-05, -1.07090000e-05, -3.37309000e-05, -6.97744000e-05,
                  -2.06878000e-04, -6.25151000e-05, -6.82776000e-05, -4.17579000e-05,
                  -5.77957000e-05, -1.03009000e-04, 9.99926417e-01
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('step')
def ia_matrix_for_python():
    """
    Real Name: b'ia matrix for python'
    Original Eqn: b'if then else(Time<1996, ia matrix 1995[sectors,sectors1], if then else(Time<1997, ia matrix 1996[sectors,sectors1], if then else(Time<1998, ia matrix 1997[sectors,sectors1], if then else(Time <1999, ia matrix 1998[sectors,sectors1], if then else(Time<2000, ia matrix 1999[sectors,sectors1], if then else(Time<2001, ia matrix 2000[sectors,sectors1], if then else(Time<2002, ia matrix 2001[sectors,sectors1], if then else(Time<2003, ia matrix 2002[sectors,sectors1], if then else(Time<2004, ia matrix 2003[sectors,sectors1], if then else (Time<2005, ia matrix 2004[sectors,sectors1], if then else(Time<2006, ia matrix 2005[sectors,sectors1], if then else(Time<2007, ia matrix 2006[sectors,sectors1], if then else (Time<2008, ia matrix 2007[sectors,sectors1], if then else(Time<2009, ia matrix 2008[sectors,sectors1], ia matrix 2009[sectors,sectors1]))))))))))))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 1996, ia_matrix_1995(),
        if_then_else(
            time() < 1997, ia_matrix_1996(),
            if_then_else(
                time() < 1998, ia_matrix_1997(),
                if_then_else(
                    time() < 1999, ia_matrix_1998(),
                    if_then_else(
                        time() < 2000, ia_matrix_1999(),
                        if_then_else(
                            time() < 2001, ia_matrix_2000(),
                            if_then_else(
                                time() < 2002, ia_matrix_2001(),
                                if_then_else(
                                    time() < 2003, ia_matrix_2002(),
                                    if_then_else(
                                        time() < 2004, ia_matrix_2003(),
                                        if_then_else(
                                            time() < 2005, ia_matrix_2004(),
                                            if_then_else(
                                                time() < 2006, ia_matrix_2005(),
                                                if_then_else(
                                                    time() < 2007, ia_matrix_2006(),
                                                    if_then_else(
                                                        time() < 2008, ia_matrix_2007(),
                                                        if_then_else(
                                                            time() < 2009, ia_matrix_2008(),
                                                            ia_matrix_2009()))))))))))))))


@cache('run')
def ia_matrix_1995():
    """
    Real Name: b'ia matrix 1995'
    Original Eqn: b'0.866652148,-0.002994061,-0.269202856,-0.040645879,-0.029550007,-0.140634738,-0.012512885,-0.003105442,-0.006638955,-0.013810624,-0.001215523,-0.000333429,-0.000335808,-0.000265041,-0.000198707,-0.013078404,-0.000500613,-0.003330773,-0.000528276,-0.002336107,-0.002529064,-0.036759151,-0.000712228,-0.00199406,-0.000448338,-0.001104142,-0.000188924,-0.000241248,-0.000534767,-0.001135283,-0.001746518,-0.001856458,-0.002285006,-0.002241517,-0.015596745;-0.003351171,0.917930103,-0.003162907,-0.002161771,-0.001491261,-0.00343566,-0.005067435,-0.426548063,-0.033085251,-0.003346967,-0.080387783,-0.044756116,-0.003369836,-0.002327251,-0.001548245,-0.006607311,-0.09811338,-0.019798052,-0.000712524,-0.001692356,-0.000799184,-0.002077368,-0.006644347,-0.002753419,-0.002789598,-0.003950777,-0.000558722,-0.000671999,-0.002221224,-0.001019724,-0.00256993,-0.002842379,-0.001355669,-0.004444483,-0.065589054;-0.05301342,-0.000822757,0.862749493,-0.002389905,-0.084176065,-0.0011654,-0.002815945,-0.001118286,-0.009819289,-0.002486386,-0.001724154,-0.000981881,-0.001162617,-0.001178837,-0.000819823,-0.00168515,-0.00084638,-0.001064266,-0.001731463,-0.004980866,-0.004542241,-0.165189944,-0.001621234,-0.00553345,-0.004485957,-0.002301173,-0.001325177,-0.000999116,-0.000244173,-0.00264925,-0.008171633,-0.00896135,-0.014609106,-0.005027631,-0.001201309;-0.002520864,-0.001517015,-0.001459438,0.717239641,-0.052193065,-0.00547208,-0.007127388,-0.000543699,-0.003977012,-0.018561753,-0.004741438,-0.001618937,-0.00232742,-0.002247316,-0.006027474,-0.025187307,-0.000702411,-0.002575631,-0.00172704,-0.003187149,-0.003729183,-0.003325705,-0.001706654,-0.002936723,-0.00127145,-0.001735365,-0.002943266,-0.000759909,-0.000267241,-0.001400025,-0.003463281,-0.00074832,-0.003636633,-0.004952687,-0.000523151;-0.000233707,-0.000299946,-0.000196779,-0.006393776,0.813537579,-0.00090658,-0.001397612,-0.000104402,-0.000262644,-0.000931782,-0.000564356,-0.000375085,-0.000410098,-0.000397849,-0.001203648,-0.003732673,-0.000189194,-0.000182299,-0.000418842,-0.000542536,-0.000556168,-0.000221703,-0.000205248,-0.000216585,-0.000146464,-0.000161638,-0.000640394,-7.67576e-05,-1.99478e-05,-0.000159219,-0.000910199,-0.000133144,-0.00016204,-0.000689726,-1.52209e-05;-0.001585412,-0.001937267,-0.001510969,-0.001470413,-0.00226386,0.812337536,-0.011285935,-0.000402701,-0.001526078,-0.002694099,-0.006473,-0.002439937,-0.002869877,-0.00195204,-0.003237308,-0.073104967,-0.00079078,-0.034793219,-0.000831092,-0.001891518,-0.001677709,-0.0024467,-0.001436695,-0.000611308,-0.000425251,-0.004945164,-0.000770322,-0.00066278,-0.002159461,-0.000881898,-0.001422057,-0.001084348,-0.001080988,-0.002905033,-0.000305355;-0.002911216,-0.003411313,-0.023979095,-0.010746901,-0.012843957,-0.012598547,0.759016386,-0.001899342,-0.020172977,-0.018583995,-0.022345174,-0.0059523,-0.01022551,-0.015889058,-0.00602285,-0.022473881,-0.00353113,-0.005270496,-0.00787651,-0.016312639,-0.015569031,-0.011557581,-0.006264402,-0.004725943,-0.008400447,-0.017134527,-0.012269684,-0.016620049,-0.002643433,-0.02276076,-0.016695535,-0.015409039,-0.010080023,-0.025340169,-0.000747692;-0.012888979,-0.013762998,-0.003726943,-0.005117927,-0.003525075,-0.005076612,-0.004589267,0.953904425,-0.02541595,-0.008663735,-0.015680525,-0.008952182,-0.003753396,-0.003260413,-0.002065759,-0.004454121,-0.020977464,-0.01246268,-0.00440259,-0.006470645,-0.005546146,-0.004765646,-0.051308651,-0.049730818,-0.060966438,-0.014707458,-0.003725228,-0.001388466,-0.001190051,-0.00465098,-0.007335931,-0.002963448,-0.003470942,-0.00668675,-8.60444e-05;-0.041441193,-0.013741621,-0.0104493,-0.069953141,-0.035489123,-0.025268363,-0.034205664,-0.015073879,0.769832158,-0.205193359,-0.028911692,-0.015003274,-0.012510929,-0.019132899,-0.01258376,-0.032681715,-0.005776388,-0.009701744,-0.007149789,-0.003388408,-0.002429838,-0.004611147,-0.0031629,-0.002794505,-0.002169833,-0.003394421,-0.001390871,-0.000914331,-0.00149026,-0.004489364,-0.007904692,-0.00333409,-0.06211447,-0.009038951,-0.000140874;-0.004412177,-0.008102499,-0.014321997,-0.00822424,-0.032064839,-0.00951537,-0.013600865,-0.001845946,-0.017849802,0.895866017,-0.009842796,-0.007197463,-0.025960397,-0.025689808,-0.035011553,-0.040115087,-0.002359315,-0.017663283,-0.019871472,-0.004906684,-0.005468816,-0.004347275,-0.010839934,-0.002285759,-0.002521484,-0.006257391,-0.003759938,-0.00078845,-0.000939062,-0.002503527,-0.003010668,-0.000798776,-0.005389462,-0.003791215,-9.239e-05;-0.001999312,-0.005268112,-0.005607437,-0.001869078,-0.001481817,-0.008744957,-0.001330509,-0.002165035,-0.006337518,-0.00597473,0.893761872,-0.008920492,-0.005515605,-0.011861662,-0.00678703,-0.006938045,-0.001934753,-0.079392006,-0.002889658,-0.00165925,-0.001090828,-0.003542703,-0.001666867,-0.000668844,-0.000558392,-0.001597686,-0.001071238,-0.000321869,-0.00208714,-0.000931003,-0.001467126,-0.001514212,-0.002068889,-0.002147849,-6.80936e-05;-0.004978944,-0.024696071,-0.015131154,-0.005473694,-0.010707126,-0.026518803,-0.009096813,-0.006678399,-0.017810027,-0.023668338,-0.031360423,0.68166529,-0.163482217,-0.078759541,-0.100378673,-0.111146266,-0.007507727,-0.083932535,-0.019970524,-0.005326277,-0.004269733,-0.004752142,-0.007864305,-0.011018146,-0.008301511,-0.00685303,-0.00386015,-0.000882027,-0.002562505,-0.003197067,-0.005166809,-0.001777099,-0.002541266,-0.004939988,-0.000341272;-0.007159062,-0.019789372,-0.003930784,-0.006364623,-0.0050476,-0.008810413,-0.007261906,-0.005046781,-0.007725644,-0.010614027,-0.012167068,-0.016049186,0.882344234,-0.016133822,-0.029147291,-0.009521586,-0.00746765,-0.016148045,-0.021855496,-0.003891829,-0.00338663,-0.002333065,-0.006360712,-0.005006228,-0.003946696,-0.004346591,-0.00293233,-0.001237178,-0.001440462,-0.003055873,-0.006251066,-0.002305264,-0.00207539,-0.003548678,-0.000183255;-0.001521142,-0.007118386,-0.002958593,-0.004299439,-0.003459132,-0.005696365,-0.008593064,-0.003034116,-0.008242393,-0.011356089,-0.007727212,-0.014178045,-0.068250934,0.749832343,-0.047661184,-0.018886632,-0.011926089,-0.024755017,-0.023343849,-0.008515586,-0.007507126,-0.003820196,-0.005664323,-0.003027849,-0.003375896,-0.005730915,-0.026054658,-0.003056245,-0.00134764,-0.011517959,-0.011038882,-0.005125374,-0.016906983,-0.006999914,-0.000704334;-0.00363293,-0.005707457,-0.001682498,-0.002479075,-0.002182076,-0.002856222,-0.001824274,-0.00120983,-0.001951592,-0.003157048,-0.003476767,-0.004850754,-0.013438791,-0.00476323,0.711231886,-0.004479062,-0.00145511,-0.003851702,-0.08913319,-0.005505144,-0.004435684,-0.00123027,-0.027101224,-0.035323587,-0.046673994,-0.009472666,-0.003030542,-0.000961046,-0.00047933,-0.003128078,-0.018118091,-0.000952987,-0.001323522,-0.003389285,-0.000149565;-0.000914527,-0.001254225,-0.001037695,-0.005656422,-0.003555405,-0.006029762,-0.003038281,-0.000648539,-0.001831787,-0.002527967,-0.003214511,-0.00687942,-0.003817621,-0.003041233,-0.004940953,0.965669615,-0.000899634,-0.005142408,-0.002194172,-0.001750773,-0.001798092,-0.003140429,-0.001297914,-0.001122601,-0.001168328,-0.001137779,-0.000879809,-0.001223265,-0.000986836,-0.002487224,-0.003884737,-0.003352244,-0.002925107,-0.00599562,-0.004112183;-0.009217599,-0.023330287,-0.011731217,-0.016846113,-0.00787993,-0.015656338,-0.020699571,-0.015130216,-0.028442408,-0.021594053,-0.036862585,-0.026643744,-0.011037302,-0.010097413,-0.009065559,-0.010549761,0.907625091,-0.005097125,-0.010102673,-0.006860541,-0.013897756,-0.0236364,-0.015779659,-0.004498713,-0.004024655,-0.012914092,-0.008285639,-0.004716048,-0.008347197,-0.006382473,-0.014655065,-0.018322379,-0.012915816,-0.016442752,-0.000244617;-0.00367014,-0.008299959,-0.00269237,-0.002645593,-0.00216941,-0.004607808,-0.00406959,-0.003750316,-0.004565105,-0.003867116,-0.007570545,-0.0049534,-0.003546695,-0.003577989,-0.0024623,-0.003546917,-0.026681251,0.963577767,-0.00467155,-0.004464915,-0.005037726,-0.005870339,-0.009753506,-0.003669304,-0.002536949,-0.01408434,-0.012637068,-0.005740893,-0.04380817,-0.005773888,-0.021268423,-0.013505525,-0.006848819,-0.013474952,-0.003149753;-0.00516213,-0.004442358,-0.006289323,-0.005128861,-0.007237688,-0.005944246,-0.004410727,-0.003799484,-0.005990582,-0.006026155,-0.007374344,-0.005888385,-0.005047066,-0.004898098,-0.004642263,-0.006093283,-0.009561681,-0.007827622,0.992072161,-0.005565194,-0.005145376,-0.005333971,-0.018503691,-0.003574527,-0.002841854,-0.007155219,-0.004688793,-0.002437929,-0.001841069,-0.005914035,-0.003871522,-0.003040329,-0.003374765,-0.006422952,-4.56524e-05;-0.031974175,-0.025217604,-0.058265228,-0.052564937,-0.069470325,-0.053855518,-0.047939478,-0.045124369,-0.047782097,-0.048488653,-0.043553831,-0.04236367,-0.04653396,-0.052188975,-0.041118511,-0.04916961,-0.021195102,-0.042788951,-0.03729795,0.966832361,-0.013991331,-0.044271956,-0.023719271,-0.017846567,-0.018125298,-0.021558184,-0.008946241,-0.005718082,-0.00336068,-0.012122767,-0.019027198,-0.009386302,-0.026990522,-0.015001791,-0.000333733;-0.017168074,-0.010441708,-0.029450978,-0.025934335,-0.039862633,-0.021088652,-0.018190105,-0.015786886,-0.022335372,-0.022177467,-0.019526002,-0.016188626,-0.017167447,-0.017295903,-0.018025661,-0.026315077,-0.00863216,-0.027407905,-0.01749944,-0.009727614,0.990968385,-0.02652719,-0.015832043,-0.009399961,-0.008605703,-0.009537785,-0.009804605,-0.004203319,-0.003245725,-0.009588325,-0.007862266,-0.005786237,-0.011732619,-0.012557207,-0.00063707;-0.001354729,-0.003521309,-0.004014537,-0.004295829,-0.003997177,-0.004930179,-0.005688269,-0.002347842,-0.005375778,-0.005729974,-0.006012603,-0.005099619,-0.00616424,-0.006707545,-0.003225026,-0.004622629,-0.004974446,-0.005370422,-0.006803611,-0.009852612,-0.006389633,0.990341747,-0.007766124,-0.00665935,-0.023744876,-0.019341349,-0.004909034,-0.010106225,-0.002353281,-0.013233358,-0.008865266,-0.006078937,-0.008268914,-0.010868643,-0.00011014;-0.015013346,-0.028619864,-0.021879232,-0.017814717,-0.021355013,-0.024763582,-0.018547712,-0.044260726,-0.02008352,-0.017202703,-0.035206394,-0.01824284,-0.012582979,-0.010493793,-0.011947319,-0.018787034,-0.026684866,-0.018504906,-0.013387591,-0.021758678,-0.011594397,-0.01060534,0.958384304,-0.017631452,-0.012113819,-0.031244461,-0.011344005,-0.007018231,-0.001914119,-0.007327376,-0.01185732,-0.00975037,-0.007989693,-0.01103205,-0.000724509;-0.002714565,-0.00443304,-0.003235549,-0.002567415,-0.003360837,-0.006193569,-0.001510039,-0.005810413,-0.002989803,-0.002047615,-0.005374527,-0.003930689,-0.00162025,-0.001329474,-0.001624248,-0.001815074,-0.002433631,-0.00242854,-0.001091555,-0.003036474,-0.001459858,-0.001442538,-0.00344821,0.90156335,-0.002881142,-0.004996921,-0.001549332,-0.000696928,-0.000151062,-0.000954653,-0.001250115,-0.001145841,-0.00059991,-0.001024454,-6.41201e-05;-0.000801535,-0.002175193,-0.00149861,-0.00171061,-0.002866039,-0.001385565,-0.002160402,-0.001119779,-0.001976968,-0.001877297,-0.001500485,-0.001457172,-0.001675004,-0.002132724,-0.001677883,-0.001629079,-0.000837357,-0.00111559,-0.001951979,-0.004512365,-0.001678387,-0.001203168,-0.002039266,-0.004505215,0.969588808,-0.016659574,-0.005267493,-0.003156067,-0.000454596,-0.004302847,-0.00437377,-0.002169488,-0.001307306,-0.003950904,-2.49721e-05;-0.003679386,-0.008346574,-0.006340813,-0.004005496,-0.005020741,-0.006352971,-0.007000116,-0.00699518,-0.005595951,-0.005245015,-0.009662936,-0.005593231,-0.004879594,-0.004345888,-0.004204175,-0.00475323,-0.005037746,-0.003495278,-0.007393265,-0.021112383,-0.0098722,-0.007806847,-0.035918811,-0.137260249,-0.097638604,0.893686791,-0.003465195,-0.003846226,-0.000683581,-0.004759578,-0.003265175,-0.002366209,-0.003014671,-0.005662676,-6.42988e-05;-0.001846168,-0.004818312,-0.003311597,-0.00353185,-0.003565491,-0.003556592,-0.009254447,-0.002294633,-0.005430306,-0.004641414,-0.004180855,-0.004096593,-0.005526469,-0.005694055,-0.003080344,-0.005778211,-0.004311982,-0.006130631,-0.009985015,-0.017744071,-0.017153845,-0.010620077,-0.012756258,-0.018452193,-0.028594519,-0.018715459,0.929335704,-0.020415558,-0.003165123,-0.018607671,-0.015543939,-0.006704324,-0.009401403,-0.018295651,-0.000161843;-0.020134025,-0.033392406,-0.016127439,-0.022414464,-0.019639247,-0.020974024,-0.021216977,-0.015061877,-0.021600799,-0.01926038,-0.02261346,-0.021002261,-0.020102974,-0.018392578,-0.014256886,-0.022349422,-0.022920391,-0.019438775,-0.026058774,-0.045987837,-0.035677655,-0.023882495,-0.041066199,-0.041877908,-0.038340858,-0.028073732,-0.024286915,0.836023118,-0.047113185,-0.035145063,-0.023720506,-0.013063927,-0.021267311,-0.032630254,-0.004238545;-0.007184519,-0.005642618,-0.004212491,-0.005778727,-0.006715496,-0.005292456,-0.008481112,-0.002829833,-0.004995433,-0.006528465,-0.005876424,-0.005457423,-0.006487941,-0.005833624,-0.004038792,-0.009164501,-0.006457893,-0.012535312,-0.02511011,-0.033607611,-0.044620069,-0.03309295,-0.011610724,-0.02858551,-0.017566097,-0.022019362,-0.013045371,-0.026428642,0.970291095,-0.023568542,-0.011124627,-0.018138449,-0.030203817,-0.027770553,-0.000747191;-0.011600035,-0.029660874,-0.034242057,-0.026984689,-0.025116522,-0.021122514,-0.053852474,-0.016565408,-0.058126245,-0.033632447,-0.031519076,-0.026654247,-0.040329016,-0.056234267,-0.035471021,-0.036919872,-0.035813826,-0.051179976,-0.042818161,-0.061676155,-0.063101571,-0.032651439,-0.038029627,-0.054276218,-0.092860957,-0.061661035,-0.061760097,-0.08125575,-0.031595984,0.877539555,-0.053406226,-0.025561353,-0.047682309,-0.062273473,-0.00021864;-0.002494378,-0.003788251,-0.00229677,-0.001771868,-0.001230638,-0.005392863,-0.004083556,-0.001830852,-0.003933964,-0.002711408,-0.003000564,-0.002999021,-0.002156533,-0.002089519,-0.001876432,-0.003259391,-0.00759944,-0.002008365,-0.003250308,-0.003196896,-0.004834993,-0.004076747,-0.003805062,-0.010065801,-0.011596379,-0.004685751,-0.002819225,-0.002360883,-0.004467577,-0.004758735,0.991073301,-0.003912761,-0.005673581,-0.010693085,-8.64271e-06;-0.000826024,-0.000454732,-0.000278524,-0.000298782,-0.000320412,-0.000210336,-0.000540029,-0.000357722,-0.000663323,-0.00037073,-0.000452345,-0.000411344,-0.000695833,-0.000900181,-0.000359644,-0.000274731,-0.000698912,-0.000396204,-0.000352169,-0.000966145,-0.00192897,-0.000370008,-0.000877586,-0.000289613,-0.0015428,-0.000858598,-0.001984948,-0.001046057,-0.000133984,-0.00188756,-0.004353998,0.994572451,-0.0008975,-0.001213415,-7.16322e-07;-0.001855911,-0.000416151,-0.00034455,-0.000396891,-0.000374634,-0.00033575,-0.000372334,-0.000183688,-0.000406592,-0.000357481,-0.000416871,-0.000329254,-0.000459991,-0.000436183,-0.000249237,-0.0004375,-0.000326708,-0.000467006,-0.000458031,-0.00064654,-0.000449927,-0.000971287,-0.000658392,-0.000830341,-0.000502966,-0.000560183,-0.000488003,-0.000535,-8.40707e-05,-0.000614651,-0.006165844,-0.001379857,0.979604544,-0.001393603,-6.53207e-08;-0.002856823,-0.006544769,-0.006782452,-0.00532237,-0.006464885,-0.006189543,-0.012909914,-0.003773928,-0.008795235,-0.00714829,-0.006074222,-0.007356634,-0.00652029,-0.007190238,-0.004452248,-0.007137458,-0.005266932,-0.005889579,-0.009397455,-0.009991303,-0.011455976,-0.013406109,-0.010212682,-0.007988312,-0.009696813,-0.011329832,-0.017865794,-0.010978716,-0.007419254,-0.029323745,-0.017013238,-0.013213901,-0.015717723,0.928542903,-0.00060386;-1.09748e-05,-1.62163e-05,-3.3644e-05,-3.99474e-05,-2.78826e-05,-3.61057e-05,-4.10564e-05,-1.53774e-05,-2.99816e-05,-3.54221e-05,-2.40688e-05,-3.54234e-05,-3.18596e-05,-2.17691e-05,-4.58056e-05,-4.05146e-05,-1.61634e-05,-8.94356e-05,-0.000155791,-5.69875e-05,-7.37625e-05,-7.50137e-05,-0.000173589,-2.76345e-05,-4.22151e-05,-3.28437e-05,-9.18283e-05,-6.75954e-05,-0.000289781,-7.64379e-05,-0.000100741,-5.50673e-05,-0.000126119,-0.000127429,0.999972073;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            8.66652148e-01, -2.99406100e-03, -2.69202856e-01, -4.06458790e-02, -2.95500070e-02,
            -1.40634738e-01, -1.25128850e-02, -3.10544200e-03, -6.63895500e-03, -1.38106240e-02,
            -1.21552300e-03, -3.33429000e-04, -3.35808000e-04, -2.65041000e-04, -1.98707000e-04,
            -1.30784040e-02, -5.00613000e-04, -3.33077300e-03, -5.28276000e-04, -2.33610700e-03,
            -2.52906400e-03, -3.67591510e-02, -7.12228000e-04, -1.99406000e-03, -4.48338000e-04,
            -1.10414200e-03, -1.88924000e-04, -2.41248000e-04, -5.34767000e-04, -1.13528300e-03,
            -1.74651800e-03, -1.85645800e-03, -2.28500600e-03, -2.24151700e-03, -1.55967450e-02
        ],
              [
                  -3.35117100e-03, 9.17930103e-01, -3.16290700e-03, -2.16177100e-03,
                  -1.49126100e-03, -3.43566000e-03, -5.06743500e-03, -4.26548063e-01,
                  -3.30852510e-02, -3.34696700e-03, -8.03877830e-02, -4.47561160e-02,
                  -3.36983600e-03, -2.32725100e-03, -1.54824500e-03, -6.60731100e-03,
                  -9.81133800e-02, -1.97980520e-02, -7.12524000e-04, -1.69235600e-03,
                  -7.99184000e-04, -2.07736800e-03, -6.64434700e-03, -2.75341900e-03,
                  -2.78959800e-03, -3.95077700e-03, -5.58722000e-04, -6.71999000e-04,
                  -2.22122400e-03, -1.01972400e-03, -2.56993000e-03, -2.84237900e-03,
                  -1.35566900e-03, -4.44448300e-03, -6.55890540e-02
              ],
              [
                  -5.30134200e-02, -8.22757000e-04, 8.62749493e-01, -2.38990500e-03,
                  -8.41760650e-02, -1.16540000e-03, -2.81594500e-03, -1.11828600e-03,
                  -9.81928900e-03, -2.48638600e-03, -1.72415400e-03, -9.81881000e-04,
                  -1.16261700e-03, -1.17883700e-03, -8.19823000e-04, -1.68515000e-03,
                  -8.46380000e-04, -1.06426600e-03, -1.73146300e-03, -4.98086600e-03,
                  -4.54224100e-03, -1.65189944e-01, -1.62123400e-03, -5.53345000e-03,
                  -4.48595700e-03, -2.30117300e-03, -1.32517700e-03, -9.99116000e-04,
                  -2.44173000e-04, -2.64925000e-03, -8.17163300e-03, -8.96135000e-03,
                  -1.46091060e-02, -5.02763100e-03, -1.20130900e-03
              ],
              [
                  -2.52086400e-03, -1.51701500e-03, -1.45943800e-03, 7.17239641e-01,
                  -5.21930650e-02, -5.47208000e-03, -7.12738800e-03, -5.43699000e-04,
                  -3.97701200e-03, -1.85617530e-02, -4.74143800e-03, -1.61893700e-03,
                  -2.32742000e-03, -2.24731600e-03, -6.02747400e-03, -2.51873070e-02,
                  -7.02411000e-04, -2.57563100e-03, -1.72704000e-03, -3.18714900e-03,
                  -3.72918300e-03, -3.32570500e-03, -1.70665400e-03, -2.93672300e-03,
                  -1.27145000e-03, -1.73536500e-03, -2.94326600e-03, -7.59909000e-04,
                  -2.67241000e-04, -1.40002500e-03, -3.46328100e-03, -7.48320000e-04,
                  -3.63663300e-03, -4.95268700e-03, -5.23151000e-04
              ],
              [
                  -2.33707000e-04, -2.99946000e-04, -1.96779000e-04, -6.39377600e-03,
                  8.13537579e-01, -9.06580000e-04, -1.39761200e-03, -1.04402000e-04,
                  -2.62644000e-04, -9.31782000e-04, -5.64356000e-04, -3.75085000e-04,
                  -4.10098000e-04, -3.97849000e-04, -1.20364800e-03, -3.73267300e-03,
                  -1.89194000e-04, -1.82299000e-04, -4.18842000e-04, -5.42536000e-04,
                  -5.56168000e-04, -2.21703000e-04, -2.05248000e-04, -2.16585000e-04,
                  -1.46464000e-04, -1.61638000e-04, -6.40394000e-04, -7.67576000e-05,
                  -1.99478000e-05, -1.59219000e-04, -9.10199000e-04, -1.33144000e-04,
                  -1.62040000e-04, -6.89726000e-04, -1.52209000e-05
              ],
              [
                  -1.58541200e-03, -1.93726700e-03, -1.51096900e-03, -1.47041300e-03,
                  -2.26386000e-03, 8.12337536e-01, -1.12859350e-02, -4.02701000e-04,
                  -1.52607800e-03, -2.69409900e-03, -6.47300000e-03, -2.43993700e-03,
                  -2.86987700e-03, -1.95204000e-03, -3.23730800e-03, -7.31049670e-02,
                  -7.90780000e-04, -3.47932190e-02, -8.31092000e-04, -1.89151800e-03,
                  -1.67770900e-03, -2.44670000e-03, -1.43669500e-03, -6.11308000e-04,
                  -4.25251000e-04, -4.94516400e-03, -7.70322000e-04, -6.62780000e-04,
                  -2.15946100e-03, -8.81898000e-04, -1.42205700e-03, -1.08434800e-03,
                  -1.08098800e-03, -2.90503300e-03, -3.05355000e-04
              ],
              [
                  -2.91121600e-03, -3.41131300e-03, -2.39790950e-02, -1.07469010e-02,
                  -1.28439570e-02, -1.25985470e-02, 7.59016386e-01, -1.89934200e-03,
                  -2.01729770e-02, -1.85839950e-02, -2.23451740e-02, -5.95230000e-03,
                  -1.02255100e-02, -1.58890580e-02, -6.02285000e-03, -2.24738810e-02,
                  -3.53113000e-03, -5.27049600e-03, -7.87651000e-03, -1.63126390e-02,
                  -1.55690310e-02, -1.15575810e-02, -6.26440200e-03, -4.72594300e-03,
                  -8.40044700e-03, -1.71345270e-02, -1.22696840e-02, -1.66200490e-02,
                  -2.64343300e-03, -2.27607600e-02, -1.66955350e-02, -1.54090390e-02,
                  -1.00800230e-02, -2.53401690e-02, -7.47692000e-04
              ],
              [
                  -1.28889790e-02, -1.37629980e-02, -3.72694300e-03, -5.11792700e-03,
                  -3.52507500e-03, -5.07661200e-03, -4.58926700e-03, 9.53904425e-01,
                  -2.54159500e-02, -8.66373500e-03, -1.56805250e-02, -8.95218200e-03,
                  -3.75339600e-03, -3.26041300e-03, -2.06575900e-03, -4.45412100e-03,
                  -2.09774640e-02, -1.24626800e-02, -4.40259000e-03, -6.47064500e-03,
                  -5.54614600e-03, -4.76564600e-03, -5.13086510e-02, -4.97308180e-02,
                  -6.09664380e-02, -1.47074580e-02, -3.72522800e-03, -1.38846600e-03,
                  -1.19005100e-03, -4.65098000e-03, -7.33593100e-03, -2.96344800e-03,
                  -3.47094200e-03, -6.68675000e-03, -8.60444000e-05
              ],
              [
                  -4.14411930e-02, -1.37416210e-02, -1.04493000e-02, -6.99531410e-02,
                  -3.54891230e-02, -2.52683630e-02, -3.42056640e-02, -1.50738790e-02,
                  7.69832158e-01, -2.05193359e-01, -2.89116920e-02, -1.50032740e-02,
                  -1.25109290e-02, -1.91328990e-02, -1.25837600e-02, -3.26817150e-02,
                  -5.77638800e-03, -9.70174400e-03, -7.14978900e-03, -3.38840800e-03,
                  -2.42983800e-03, -4.61114700e-03, -3.16290000e-03, -2.79450500e-03,
                  -2.16983300e-03, -3.39442100e-03, -1.39087100e-03, -9.14331000e-04,
                  -1.49026000e-03, -4.48936400e-03, -7.90469200e-03, -3.33409000e-03,
                  -6.21144700e-02, -9.03895100e-03, -1.40874000e-04
              ],
              [
                  -4.41217700e-03, -8.10249900e-03, -1.43219970e-02, -8.22424000e-03,
                  -3.20648390e-02, -9.51537000e-03, -1.36008650e-02, -1.84594600e-03,
                  -1.78498020e-02, 8.95866017e-01, -9.84279600e-03, -7.19746300e-03,
                  -2.59603970e-02, -2.56898080e-02, -3.50115530e-02, -4.01150870e-02,
                  -2.35931500e-03, -1.76632830e-02, -1.98714720e-02, -4.90668400e-03,
                  -5.46881600e-03, -4.34727500e-03, -1.08399340e-02, -2.28575900e-03,
                  -2.52148400e-03, -6.25739100e-03, -3.75993800e-03, -7.88450000e-04,
                  -9.39062000e-04, -2.50352700e-03, -3.01066800e-03, -7.98776000e-04,
                  -5.38946200e-03, -3.79121500e-03, -9.23900000e-05
              ],
              [
                  -1.99931200e-03, -5.26811200e-03, -5.60743700e-03, -1.86907800e-03,
                  -1.48181700e-03, -8.74495700e-03, -1.33050900e-03, -2.16503500e-03,
                  -6.33751800e-03, -5.97473000e-03, 8.93761872e-01, -8.92049200e-03,
                  -5.51560500e-03, -1.18616620e-02, -6.78703000e-03, -6.93804500e-03,
                  -1.93475300e-03, -7.93920060e-02, -2.88965800e-03, -1.65925000e-03,
                  -1.09082800e-03, -3.54270300e-03, -1.66686700e-03, -6.68844000e-04,
                  -5.58392000e-04, -1.59768600e-03, -1.07123800e-03, -3.21869000e-04,
                  -2.08714000e-03, -9.31003000e-04, -1.46712600e-03, -1.51421200e-03,
                  -2.06888900e-03, -2.14784900e-03, -6.80936000e-05
              ],
              [
                  -4.97894400e-03, -2.46960710e-02, -1.51311540e-02, -5.47369400e-03,
                  -1.07071260e-02, -2.65188030e-02, -9.09681300e-03, -6.67839900e-03,
                  -1.78100270e-02, -2.36683380e-02, -3.13604230e-02, 6.81665290e-01,
                  -1.63482217e-01, -7.87595410e-02, -1.00378673e-01, -1.11146266e-01,
                  -7.50772700e-03, -8.39325350e-02, -1.99705240e-02, -5.32627700e-03,
                  -4.26973300e-03, -4.75214200e-03, -7.86430500e-03, -1.10181460e-02,
                  -8.30151100e-03, -6.85303000e-03, -3.86015000e-03, -8.82027000e-04,
                  -2.56250500e-03, -3.19706700e-03, -5.16680900e-03, -1.77709900e-03,
                  -2.54126600e-03, -4.93998800e-03, -3.41272000e-04
              ],
              [
                  -7.15906200e-03, -1.97893720e-02, -3.93078400e-03, -6.36462300e-03,
                  -5.04760000e-03, -8.81041300e-03, -7.26190600e-03, -5.04678100e-03,
                  -7.72564400e-03, -1.06140270e-02, -1.21670680e-02, -1.60491860e-02,
                  8.82344234e-01, -1.61338220e-02, -2.91472910e-02, -9.52158600e-03,
                  -7.46765000e-03, -1.61480450e-02, -2.18554960e-02, -3.89182900e-03,
                  -3.38663000e-03, -2.33306500e-03, -6.36071200e-03, -5.00622800e-03,
                  -3.94669600e-03, -4.34659100e-03, -2.93233000e-03, -1.23717800e-03,
                  -1.44046200e-03, -3.05587300e-03, -6.25106600e-03, -2.30526400e-03,
                  -2.07539000e-03, -3.54867800e-03, -1.83255000e-04
              ],
              [
                  -1.52114200e-03, -7.11838600e-03, -2.95859300e-03, -4.29943900e-03,
                  -3.45913200e-03, -5.69636500e-03, -8.59306400e-03, -3.03411600e-03,
                  -8.24239300e-03, -1.13560890e-02, -7.72721200e-03, -1.41780450e-02,
                  -6.82509340e-02, 7.49832343e-01, -4.76611840e-02, -1.88866320e-02,
                  -1.19260890e-02, -2.47550170e-02, -2.33438490e-02, -8.51558600e-03,
                  -7.50712600e-03, -3.82019600e-03, -5.66432300e-03, -3.02784900e-03,
                  -3.37589600e-03, -5.73091500e-03, -2.60546580e-02, -3.05624500e-03,
                  -1.34764000e-03, -1.15179590e-02, -1.10388820e-02, -5.12537400e-03,
                  -1.69069830e-02, -6.99991400e-03, -7.04334000e-04
              ],
              [
                  -3.63293000e-03, -5.70745700e-03, -1.68249800e-03, -2.47907500e-03,
                  -2.18207600e-03, -2.85622200e-03, -1.82427400e-03, -1.20983000e-03,
                  -1.95159200e-03, -3.15704800e-03, -3.47676700e-03, -4.85075400e-03,
                  -1.34387910e-02, -4.76323000e-03, 7.11231886e-01, -4.47906200e-03,
                  -1.45511000e-03, -3.85170200e-03, -8.91331900e-02, -5.50514400e-03,
                  -4.43568400e-03, -1.23027000e-03, -2.71012240e-02, -3.53235870e-02,
                  -4.66739940e-02, -9.47266600e-03, -3.03054200e-03, -9.61046000e-04,
                  -4.79330000e-04, -3.12807800e-03, -1.81180910e-02, -9.52987000e-04,
                  -1.32352200e-03, -3.38928500e-03, -1.49565000e-04
              ],
              [
                  -9.14527000e-04, -1.25422500e-03, -1.03769500e-03, -5.65642200e-03,
                  -3.55540500e-03, -6.02976200e-03, -3.03828100e-03, -6.48539000e-04,
                  -1.83178700e-03, -2.52796700e-03, -3.21451100e-03, -6.87942000e-03,
                  -3.81762100e-03, -3.04123300e-03, -4.94095300e-03, 9.65669615e-01,
                  -8.99634000e-04, -5.14240800e-03, -2.19417200e-03, -1.75077300e-03,
                  -1.79809200e-03, -3.14042900e-03, -1.29791400e-03, -1.12260100e-03,
                  -1.16832800e-03, -1.13777900e-03, -8.79809000e-04, -1.22326500e-03,
                  -9.86836000e-04, -2.48722400e-03, -3.88473700e-03, -3.35224400e-03,
                  -2.92510700e-03, -5.99562000e-03, -4.11218300e-03
              ],
              [
                  -9.21759900e-03, -2.33302870e-02, -1.17312170e-02, -1.68461130e-02,
                  -7.87993000e-03, -1.56563380e-02, -2.06995710e-02, -1.51302160e-02,
                  -2.84424080e-02, -2.15940530e-02, -3.68625850e-02, -2.66437440e-02,
                  -1.10373020e-02, -1.00974130e-02, -9.06555900e-03, -1.05497610e-02,
                  9.07625091e-01, -5.09712500e-03, -1.01026730e-02, -6.86054100e-03,
                  -1.38977560e-02, -2.36364000e-02, -1.57796590e-02, -4.49871300e-03,
                  -4.02465500e-03, -1.29140920e-02, -8.28563900e-03, -4.71604800e-03,
                  -8.34719700e-03, -6.38247300e-03, -1.46550650e-02, -1.83223790e-02,
                  -1.29158160e-02, -1.64427520e-02, -2.44617000e-04
              ],
              [
                  -3.67014000e-03, -8.29995900e-03, -2.69237000e-03, -2.64559300e-03,
                  -2.16941000e-03, -4.60780800e-03, -4.06959000e-03, -3.75031600e-03,
                  -4.56510500e-03, -3.86711600e-03, -7.57054500e-03, -4.95340000e-03,
                  -3.54669500e-03, -3.57798900e-03, -2.46230000e-03, -3.54691700e-03,
                  -2.66812510e-02, 9.63577767e-01, -4.67155000e-03, -4.46491500e-03,
                  -5.03772600e-03, -5.87033900e-03, -9.75350600e-03, -3.66930400e-03,
                  -2.53694900e-03, -1.40843400e-02, -1.26370680e-02, -5.74089300e-03,
                  -4.38081700e-02, -5.77388800e-03, -2.12684230e-02, -1.35055250e-02,
                  -6.84881900e-03, -1.34749520e-02, -3.14975300e-03
              ],
              [
                  -5.16213000e-03, -4.44235800e-03, -6.28932300e-03, -5.12886100e-03,
                  -7.23768800e-03, -5.94424600e-03, -4.41072700e-03, -3.79948400e-03,
                  -5.99058200e-03, -6.02615500e-03, -7.37434400e-03, -5.88838500e-03,
                  -5.04706600e-03, -4.89809800e-03, -4.64226300e-03, -6.09328300e-03,
                  -9.56168100e-03, -7.82762200e-03, 9.92072161e-01, -5.56519400e-03,
                  -5.14537600e-03, -5.33397100e-03, -1.85036910e-02, -3.57452700e-03,
                  -2.84185400e-03, -7.15521900e-03, -4.68879300e-03, -2.43792900e-03,
                  -1.84106900e-03, -5.91403500e-03, -3.87152200e-03, -3.04032900e-03,
                  -3.37476500e-03, -6.42295200e-03, -4.56524000e-05
              ],
              [
                  -3.19741750e-02, -2.52176040e-02, -5.82652280e-02, -5.25649370e-02,
                  -6.94703250e-02, -5.38555180e-02, -4.79394780e-02, -4.51243690e-02,
                  -4.77820970e-02, -4.84886530e-02, -4.35538310e-02, -4.23636700e-02,
                  -4.65339600e-02, -5.21889750e-02, -4.11185110e-02, -4.91696100e-02,
                  -2.11951020e-02, -4.27889510e-02, -3.72979500e-02, 9.66832361e-01,
                  -1.39913310e-02, -4.42719560e-02, -2.37192710e-02, -1.78465670e-02,
                  -1.81252980e-02, -2.15581840e-02, -8.94624100e-03, -5.71808200e-03,
                  -3.36068000e-03, -1.21227670e-02, -1.90271980e-02, -9.38630200e-03,
                  -2.69905220e-02, -1.50017910e-02, -3.33733000e-04
              ],
              [
                  -1.71680740e-02, -1.04417080e-02, -2.94509780e-02, -2.59343350e-02,
                  -3.98626330e-02, -2.10886520e-02, -1.81901050e-02, -1.57868860e-02,
                  -2.23353720e-02, -2.21774670e-02, -1.95260020e-02, -1.61886260e-02,
                  -1.71674470e-02, -1.72959030e-02, -1.80256610e-02, -2.63150770e-02,
                  -8.63216000e-03, -2.74079050e-02, -1.74994400e-02, -9.72761400e-03,
                  9.90968385e-01, -2.65271900e-02, -1.58320430e-02, -9.39996100e-03,
                  -8.60570300e-03, -9.53778500e-03, -9.80460500e-03, -4.20331900e-03,
                  -3.24572500e-03, -9.58832500e-03, -7.86226600e-03, -5.78623700e-03,
                  -1.17326190e-02, -1.25572070e-02, -6.37070000e-04
              ],
              [
                  -1.35472900e-03, -3.52130900e-03, -4.01453700e-03, -4.29582900e-03,
                  -3.99717700e-03, -4.93017900e-03, -5.68826900e-03, -2.34784200e-03,
                  -5.37577800e-03, -5.72997400e-03, -6.01260300e-03, -5.09961900e-03,
                  -6.16424000e-03, -6.70754500e-03, -3.22502600e-03, -4.62262900e-03,
                  -4.97444600e-03, -5.37042200e-03, -6.80361100e-03, -9.85261200e-03,
                  -6.38963300e-03, 9.90341747e-01, -7.76612400e-03, -6.65935000e-03,
                  -2.37448760e-02, -1.93413490e-02, -4.90903400e-03, -1.01062250e-02,
                  -2.35328100e-03, -1.32333580e-02, -8.86526600e-03, -6.07893700e-03,
                  -8.26891400e-03, -1.08686430e-02, -1.10140000e-04
              ],
              [
                  -1.50133460e-02, -2.86198640e-02, -2.18792320e-02, -1.78147170e-02,
                  -2.13550130e-02, -2.47635820e-02, -1.85477120e-02, -4.42607260e-02,
                  -2.00835200e-02, -1.72027030e-02, -3.52063940e-02, -1.82428400e-02,
                  -1.25829790e-02, -1.04937930e-02, -1.19473190e-02, -1.87870340e-02,
                  -2.66848660e-02, -1.85049060e-02, -1.33875910e-02, -2.17586780e-02,
                  -1.15943970e-02, -1.06053400e-02, 9.58384304e-01, -1.76314520e-02,
                  -1.21138190e-02, -3.12444610e-02, -1.13440050e-02, -7.01823100e-03,
                  -1.91411900e-03, -7.32737600e-03, -1.18573200e-02, -9.75037000e-03,
                  -7.98969300e-03, -1.10320500e-02, -7.24509000e-04
              ],
              [
                  -2.71456500e-03, -4.43304000e-03, -3.23554900e-03, -2.56741500e-03,
                  -3.36083700e-03, -6.19356900e-03, -1.51003900e-03, -5.81041300e-03,
                  -2.98980300e-03, -2.04761500e-03, -5.37452700e-03, -3.93068900e-03,
                  -1.62025000e-03, -1.32947400e-03, -1.62424800e-03, -1.81507400e-03,
                  -2.43363100e-03, -2.42854000e-03, -1.09155500e-03, -3.03647400e-03,
                  -1.45985800e-03, -1.44253800e-03, -3.44821000e-03, 9.01563350e-01,
                  -2.88114200e-03, -4.99692100e-03, -1.54933200e-03, -6.96928000e-04,
                  -1.51062000e-04, -9.54653000e-04, -1.25011500e-03, -1.14584100e-03,
                  -5.99910000e-04, -1.02445400e-03, -6.41201000e-05
              ],
              [
                  -8.01535000e-04, -2.17519300e-03, -1.49861000e-03, -1.71061000e-03,
                  -2.86603900e-03, -1.38556500e-03, -2.16040200e-03, -1.11977900e-03,
                  -1.97696800e-03, -1.87729700e-03, -1.50048500e-03, -1.45717200e-03,
                  -1.67500400e-03, -2.13272400e-03, -1.67788300e-03, -1.62907900e-03,
                  -8.37357000e-04, -1.11559000e-03, -1.95197900e-03, -4.51236500e-03,
                  -1.67838700e-03, -1.20316800e-03, -2.03926600e-03, -4.50521500e-03,
                  9.69588808e-01, -1.66595740e-02, -5.26749300e-03, -3.15606700e-03,
                  -4.54596000e-04, -4.30284700e-03, -4.37377000e-03, -2.16948800e-03,
                  -1.30730600e-03, -3.95090400e-03, -2.49721000e-05
              ],
              [
                  -3.67938600e-03, -8.34657400e-03, -6.34081300e-03, -4.00549600e-03,
                  -5.02074100e-03, -6.35297100e-03, -7.00011600e-03, -6.99518000e-03,
                  -5.59595100e-03, -5.24501500e-03, -9.66293600e-03, -5.59323100e-03,
                  -4.87959400e-03, -4.34588800e-03, -4.20417500e-03, -4.75323000e-03,
                  -5.03774600e-03, -3.49527800e-03, -7.39326500e-03, -2.11123830e-02,
                  -9.87220000e-03, -7.80684700e-03, -3.59188110e-02, -1.37260249e-01,
                  -9.76386040e-02, 8.93686791e-01, -3.46519500e-03, -3.84622600e-03,
                  -6.83581000e-04, -4.75957800e-03, -3.26517500e-03, -2.36620900e-03,
                  -3.01467100e-03, -5.66267600e-03, -6.42988000e-05
              ],
              [
                  -1.84616800e-03, -4.81831200e-03, -3.31159700e-03, -3.53185000e-03,
                  -3.56549100e-03, -3.55659200e-03, -9.25444700e-03, -2.29463300e-03,
                  -5.43030600e-03, -4.64141400e-03, -4.18085500e-03, -4.09659300e-03,
                  -5.52646900e-03, -5.69405500e-03, -3.08034400e-03, -5.77821100e-03,
                  -4.31198200e-03, -6.13063100e-03, -9.98501500e-03, -1.77440710e-02,
                  -1.71538450e-02, -1.06200770e-02, -1.27562580e-02, -1.84521930e-02,
                  -2.85945190e-02, -1.87154590e-02, 9.29335704e-01, -2.04155580e-02,
                  -3.16512300e-03, -1.86076710e-02, -1.55439390e-02, -6.70432400e-03,
                  -9.40140300e-03, -1.82956510e-02, -1.61843000e-04
              ],
              [
                  -2.01340250e-02, -3.33924060e-02, -1.61274390e-02, -2.24144640e-02,
                  -1.96392470e-02, -2.09740240e-02, -2.12169770e-02, -1.50618770e-02,
                  -2.16007990e-02, -1.92603800e-02, -2.26134600e-02, -2.10022610e-02,
                  -2.01029740e-02, -1.83925780e-02, -1.42568860e-02, -2.23494220e-02,
                  -2.29203910e-02, -1.94387750e-02, -2.60587740e-02, -4.59878370e-02,
                  -3.56776550e-02, -2.38824950e-02, -4.10661990e-02, -4.18779080e-02,
                  -3.83408580e-02, -2.80737320e-02, -2.42869150e-02, 8.36023118e-01,
                  -4.71131850e-02, -3.51450630e-02, -2.37205060e-02, -1.30639270e-02,
                  -2.12673110e-02, -3.26302540e-02, -4.23854500e-03
              ],
              [
                  -7.18451900e-03, -5.64261800e-03, -4.21249100e-03, -5.77872700e-03,
                  -6.71549600e-03, -5.29245600e-03, -8.48111200e-03, -2.82983300e-03,
                  -4.99543300e-03, -6.52846500e-03, -5.87642400e-03, -5.45742300e-03,
                  -6.48794100e-03, -5.83362400e-03, -4.03879200e-03, -9.16450100e-03,
                  -6.45789300e-03, -1.25353120e-02, -2.51101100e-02, -3.36076110e-02,
                  -4.46200690e-02, -3.30929500e-02, -1.16107240e-02, -2.85855100e-02,
                  -1.75660970e-02, -2.20193620e-02, -1.30453710e-02, -2.64286420e-02,
                  9.70291095e-01, -2.35685420e-02, -1.11246270e-02, -1.81384490e-02,
                  -3.02038170e-02, -2.77705530e-02, -7.47191000e-04
              ],
              [
                  -1.16000350e-02, -2.96608740e-02, -3.42420570e-02, -2.69846890e-02,
                  -2.51165220e-02, -2.11225140e-02, -5.38524740e-02, -1.65654080e-02,
                  -5.81262450e-02, -3.36324470e-02, -3.15190760e-02, -2.66542470e-02,
                  -4.03290160e-02, -5.62342670e-02, -3.54710210e-02, -3.69198720e-02,
                  -3.58138260e-02, -5.11799760e-02, -4.28181610e-02, -6.16761550e-02,
                  -6.31015710e-02, -3.26514390e-02, -3.80296270e-02, -5.42762180e-02,
                  -9.28609570e-02, -6.16610350e-02, -6.17600970e-02, -8.12557500e-02,
                  -3.15959840e-02, 8.77539555e-01, -5.34062260e-02, -2.55613530e-02,
                  -4.76823090e-02, -6.22734730e-02, -2.18640000e-04
              ],
              [
                  -2.49437800e-03, -3.78825100e-03, -2.29677000e-03, -1.77186800e-03,
                  -1.23063800e-03, -5.39286300e-03, -4.08355600e-03, -1.83085200e-03,
                  -3.93396400e-03, -2.71140800e-03, -3.00056400e-03, -2.99902100e-03,
                  -2.15653300e-03, -2.08951900e-03, -1.87643200e-03, -3.25939100e-03,
                  -7.59944000e-03, -2.00836500e-03, -3.25030800e-03, -3.19689600e-03,
                  -4.83499300e-03, -4.07674700e-03, -3.80506200e-03, -1.00658010e-02,
                  -1.15963790e-02, -4.68575100e-03, -2.81922500e-03, -2.36088300e-03,
                  -4.46757700e-03, -4.75873500e-03, 9.91073301e-01, -3.91276100e-03,
                  -5.67358100e-03, -1.06930850e-02, -8.64271000e-06
              ],
              [
                  -8.26024000e-04, -4.54732000e-04, -2.78524000e-04, -2.98782000e-04,
                  -3.20412000e-04, -2.10336000e-04, -5.40029000e-04, -3.57722000e-04,
                  -6.63323000e-04, -3.70730000e-04, -4.52345000e-04, -4.11344000e-04,
                  -6.95833000e-04, -9.00181000e-04, -3.59644000e-04, -2.74731000e-04,
                  -6.98912000e-04, -3.96204000e-04, -3.52169000e-04, -9.66145000e-04,
                  -1.92897000e-03, -3.70008000e-04, -8.77586000e-04, -2.89613000e-04,
                  -1.54280000e-03, -8.58598000e-04, -1.98494800e-03, -1.04605700e-03,
                  -1.33984000e-04, -1.88756000e-03, -4.35399800e-03, 9.94572451e-01,
                  -8.97500000e-04, -1.21341500e-03, -7.16322000e-07
              ],
              [
                  -1.85591100e-03, -4.16151000e-04, -3.44550000e-04, -3.96891000e-04,
                  -3.74634000e-04, -3.35750000e-04, -3.72334000e-04, -1.83688000e-04,
                  -4.06592000e-04, -3.57481000e-04, -4.16871000e-04, -3.29254000e-04,
                  -4.59991000e-04, -4.36183000e-04, -2.49237000e-04, -4.37500000e-04,
                  -3.26708000e-04, -4.67006000e-04, -4.58031000e-04, -6.46540000e-04,
                  -4.49927000e-04, -9.71287000e-04, -6.58392000e-04, -8.30341000e-04,
                  -5.02966000e-04, -5.60183000e-04, -4.88003000e-04, -5.35000000e-04,
                  -8.40707000e-05, -6.14651000e-04, -6.16584400e-03, -1.37985700e-03,
                  9.79604544e-01, -1.39360300e-03, -6.53207000e-08
              ],
              [
                  -2.85682300e-03, -6.54476900e-03, -6.78245200e-03, -5.32237000e-03,
                  -6.46488500e-03, -6.18954300e-03, -1.29099140e-02, -3.77392800e-03,
                  -8.79523500e-03, -7.14829000e-03, -6.07422200e-03, -7.35663400e-03,
                  -6.52029000e-03, -7.19023800e-03, -4.45224800e-03, -7.13745800e-03,
                  -5.26693200e-03, -5.88957900e-03, -9.39745500e-03, -9.99130300e-03,
                  -1.14559760e-02, -1.34061090e-02, -1.02126820e-02, -7.98831200e-03,
                  -9.69681300e-03, -1.13298320e-02, -1.78657940e-02, -1.09787160e-02,
                  -7.41925400e-03, -2.93237450e-02, -1.70132380e-02, -1.32139010e-02,
                  -1.57177230e-02, 9.28542903e-01, -6.03860000e-04
              ],
              [
                  -1.09748000e-05, -1.62163000e-05, -3.36440000e-05, -3.99474000e-05,
                  -2.78826000e-05, -3.61057000e-05, -4.10564000e-05, -1.53774000e-05,
                  -2.99816000e-05, -3.54221000e-05, -2.40688000e-05, -3.54234000e-05,
                  -3.18596000e-05, -2.17691000e-05, -4.58056000e-05, -4.05146000e-05,
                  -1.61634000e-05, -8.94356000e-05, -1.55791000e-04, -5.69875000e-05,
                  -7.37625000e-05, -7.50137000e-05, -1.73589000e-04, -2.76345000e-05,
                  -4.22151000e-05, -3.28437000e-05, -9.18283000e-05, -6.75954000e-05,
                  -2.89781000e-04, -7.64379000e-05, -1.00741000e-04, -5.50673000e-05,
                  -1.26119000e-04, -1.27429000e-04, 9.99972073e-01
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def ia_matrix_1996():
    """
    Real Name: b'ia matrix 1996'
    Original Eqn: b'0.870340047,-0.002896558,-0.272639635,-0.040355209,-0.029482267,-0.13798054,-0.01174434,-0.002886797,-0.007030273,-0.012918151,-0.001117297,-0.000317862,-0.000317932,-0.000241614,-0.000194006,-0.011710805,-0.000507344,-0.003251737,-0.000554363,-0.002365078,-0.002581156,-0.037733888,-0.000712811,-0.002053852,-0.00043843,-0.001171137,-0.000210216,-0.000172263,-0.000525149,-0.001111424,-0.001837966,-0.001979651,-0.002429268,-0.002357345,-0.01522777;-0.003718556,0.902686674,-0.003589887,-0.002286383,-0.001371051,-0.003845417,-0.005392146,-0.436414845,-0.033047605,-0.003804956,-0.078392589,-0.045200189,-0.003651401,-0.002426435,-0.001587427,-0.007572281,-0.098991993,-0.020119298,-0.000720529,-0.001786557,-0.000808648,-0.002659206,-0.007095667,-0.002996645,-0.002964435,-0.004142248,-0.00054152,-0.000489003,-0.00206372,-0.001091195,-0.002940563,-0.003783993,-0.001558111,-0.003523086,-0.064144424;-0.053373775,-0.000804982,0.860990071,-0.002311541,-0.083437503,-0.001168624,-0.002777428,-0.000953989,-0.009711607,-0.002368331,-0.00185279,-0.000930163,-0.001123387,-0.001103943,-0.00079455,-0.001586519,-0.000736104,-0.001000468,-0.001621667,-0.004618256,-0.004404405,-0.161299227,-0.001606493,-0.006795716,-0.004322816,-0.002453884,-0.001516641,-0.000803836,-0.000219753,-0.002291536,-0.008042272,-0.009032607,-0.01432422,-0.005318456,-0.001260682;-0.002418462,-0.001546426,-0.001485782,0.714668847,-0.054213432,-0.005885993,-0.00726785,-0.000534526,-0.00417253,-0.019840587,-0.005144909,-0.001656997,-0.002464897,-0.002275891,-0.006170536,-0.024927239,-0.000559012,-0.002732464,-0.001804958,-0.003010449,-0.003675476,-0.003251781,-0.001744693,-0.003118092,-0.00128741,-0.001793263,-0.002869942,-0.000665858,-0.000263621,-0.001369937,-0.003295811,-0.000810695,-0.003564451,-0.00493945,-0.000508203;-0.000246407,-0.000328695,-0.000207026,-0.006667822,0.811140039,-0.001129236,-0.00133403,-0.00010904,-0.000291481,-0.001040978,-0.000652049,-0.000435987,-0.0004472,-0.000410281,-0.001229401,-0.003686108,-0.000213053,-0.00018186,-0.000422446,-0.000506424,-0.000535474,-0.000234643,-0.000217696,-0.00021196,-0.0001482,-0.000173049,-0.000677218,-7.91158e-05,-2.14835e-05,-0.000162299,-0.000889472,-0.000150069,-0.000172596,-0.000734594,-1.40127e-05;-0.001626495,-0.001987625,-0.001512154,-0.001534348,-0.002220867,0.812358622,-0.011115458,-0.000421848,-0.001573424,-0.00268443,-0.006665337,-0.002525898,-0.002897142,-0.001873194,-0.003111175,-0.072952191,-0.000831569,-0.035583319,-0.00081667,-0.001716794,-0.001532057,-0.002306702,-0.00137679,-0.000595805,-0.000430067,-0.004343589,-0.000730557,-0.000625581,-0.002238382,-0.000936208,-0.001386559,-0.001144534,-0.000940626,-0.00283003,-0.000302171;-0.002833596,-0.003384351,-0.024069479,-0.010189354,-0.012707345,-0.012676982,0.764873577,-0.001676006,-0.019752092,-0.018432981,-0.023227918,-0.006051781,-0.01004571,-0.01554481,-0.005946846,-0.02228959,-0.003479407,-0.005326579,-0.007975653,-0.015146909,-0.015011443,-0.011058055,-0.006205521,-0.004393825,-0.007654884,-0.01630114,-0.011481405,-0.01622772,-0.002677819,-0.022737593,-0.016393056,-0.016299789,-0.009919717,-0.02477997,-0.000694923;-0.012170818,-0.013557568,-0.003621048,-0.004816411,-0.003239794,-0.004760866,-0.004570627,0.954789826,-0.026259445,-0.00858899,-0.016002131,-0.008929759,-0.003671932,-0.003063619,-0.002048297,-0.004445444,-0.019498404,-0.01277302,-0.00442553,-0.006393718,-0.005409681,-0.003936843,-0.051077611,-0.051253268,-0.056298441,-0.014720402,-0.00345236,-0.001269984,-0.00117175,-0.004488909,-0.007479284,-0.003003096,-0.003410036,-0.006299345,-7.94193e-05;-0.040208979,-0.013823937,-0.010654472,-0.070872245,-0.034149838,-0.026394382,-0.033956304,-0.01417111,0.76951265,-0.199881221,-0.03078287,-0.01541163,-0.012646484,-0.01922002,-0.012851326,-0.033005512,-0.005836453,-0.009844464,-0.007055643,-0.003457274,-0.002537663,-0.004534092,-0.00335039,-0.003060051,-0.002184908,-0.003455218,-0.001420891,-0.000885157,-0.001533712,-0.00441479,-0.008237753,-0.003670525,-0.061457857,-0.009124386,-0.000140615;-0.004386203,-0.008642069,-0.01466963,-0.0082164,-0.033516619,-0.009579604,-0.014228549,-0.001765105,-0.018004024,0.890695569,-0.010713306,-0.007493388,-0.026082133,-0.026243118,-0.035030357,-0.038208723,-0.002278868,-0.017770297,-0.018572637,-0.004720599,-0.005303473,-0.004225894,-0.01150188,-0.002284638,-0.002430127,-0.006217904,-0.003771197,-0.000793289,-0.000977558,-0.002560747,-0.003001298,-0.000863652,-0.005386125,-0.003387666,-9.77402e-05;-0.001879147,-0.005110698,-0.00541338,-0.001935287,-0.001606484,-0.009368053,-0.001397057,-0.001983846,-0.006527225,-0.006064084,0.894245647,-0.00944097,-0.005619356,-0.012020798,-0.006917653,-0.006899962,-0.001806799,-0.079809576,-0.002868988,-0.001554843,-0.00105188,-0.003588981,-0.001441719,-0.000542678,-0.000527728,-0.001364588,-0.001075682,-0.000253746,-0.002121816,-0.000967686,-0.00148335,-0.001640104,-0.002004889,-0.001871838,-7.9846e-05;-0.004941888,-0.025825578,-0.014944872,-0.005586658,-0.010425594,-0.027157616,-0.009127469,-0.006037003,-0.017653091,-0.023560774,-0.032070218,0.685389778,-0.160905187,-0.076686615,-0.100230074,-0.108767456,-0.007478182,-0.085053701,-0.019838284,-0.005090378,-0.004137133,-0.004671204,-0.008009105,-0.01082883,-0.008008196,-0.006763962,-0.003874451,-0.000910141,-0.002586022,-0.003383619,-0.005027124,-0.001886568,-0.00268755,-0.004501,-0.00032462;-0.007029481,-0.01923891,-0.00385439,-0.006365394,-0.004904916,-0.008670165,-0.007058031,-0.004445044,-0.007646384,-0.010558349,-0.01242983,-0.016089831,0.881238648,-0.015214806,-0.028773903,-0.009395459,-0.007472459,-0.016047227,-0.023756651,-0.003927314,-0.00320322,-0.002276602,-0.006623273,-0.005488368,-0.004207802,-0.004652988,-0.002962229,-0.001224105,-0.001425384,-0.003078968,-0.006414735,-0.002142068,-0.002195866,-0.003582416,-0.000179988;-0.001523221,-0.006888726,-0.003171475,-0.004635356,-0.003488842,-0.006302293,-0.009164046,-0.002886191,-0.008765745,-0.011921307,-0.008518083,-0.015551074,-0.074059822,0.746152961,-0.049145,-0.02066588,-0.012282066,-0.025782228,-0.024469191,-0.008971577,-0.007817687,-0.004089424,-0.00620242,-0.003198938,-0.003615492,-0.006552346,-0.027716868,-0.003555386,-0.001493359,-0.012475503,-0.011685467,-0.005544197,-0.018021459,-0.007660016,-0.000658983;-0.003738531,-0.005697815,-0.00173061,-0.002535993,-0.002261395,-0.002880743,-0.00186032,-0.001018175,-0.002045716,-0.003305158,-0.003525109,-0.004730073,-0.013542158,-0.004750981,0.708610081,-0.004349003,-0.001487442,-0.003842435,-0.089299966,-0.005340474,-0.004423612,-0.001262065,-0.029036697,-0.039742167,-0.044933338,-0.01019274,-0.002944393,-0.000866372,-0.000463256,-0.003055301,-0.017995727,-0.000989197,-0.001364836,-0.003260064,-0.000126873;-0.00090564,-0.001433162,-0.00113957,-0.005557363,-0.003549243,-0.006302017,-0.003144455,-0.00055826,-0.001829998,-0.00247004,-0.003452535,-0.007022994,-0.003884864,-0.003182882,-0.005116658,0.964310556,-0.001037762,-0.004973725,-0.002236005,-0.001605519,-0.001677469,-0.002876154,-0.001430335,-0.001037038,-0.001173157,-0.00140445,-0.000935553,-0.001213167,-0.001065742,-0.002290995,-0.003929907,-0.003630153,-0.002904066,-0.005956575,-0.003628516;-0.00935334,-0.024953287,-0.011624547,-0.016508077,-0.007632128,-0.015739575,-0.0216684,-0.014253046,-0.029109013,-0.021731954,-0.03689868,-0.027440574,-0.011296118,-0.010399644,-0.009009223,-0.01123895,0.906563328,-0.005134802,-0.010553314,-0.006873082,-0.014128567,-0.023480476,-0.015731208,-0.004175145,-0.004301106,-0.013618374,-0.008289305,-0.004641714,-0.008356713,-0.006563709,-0.01517517,-0.019492222,-0.013391149,-0.016075851,-0.000236234;-0.003630175,-0.008060589,-0.002530738,-0.002583948,-0.001981903,-0.004494708,-0.004020089,-0.003187252,-0.004487882,-0.003787548,-0.00781841,-0.005081449,-0.003445833,-0.00353371,-0.002371838,-0.003320686,-0.026504201,0.964834982,-0.004340221,-0.004394033,-0.005008878,-0.005562734,-0.009900164,-0.003539277,-0.002337233,-0.015323027,-0.011790893,-0.005623986,-0.04499341,-0.005621917,-0.020800632,-0.014486971,-0.007044238,-0.013082205,-0.002656123;-0.005015224,-0.004214347,-0.006316257,-0.005154449,-0.007230774,-0.006159215,-0.00448428,-0.003141375,-0.006204552,-0.006244127,-0.007700042,-0.006287001,-0.005280846,-0.005287031,-0.004660051,-0.006191913,-0.009150275,-0.00771991,0.991635823,-0.004524282,-0.004626992,-0.00539558,-0.018330724,-0.003618616,-0.002822565,-0.007495218,-0.00468928,-0.002495579,-0.001865348,-0.006160049,-0.003999537,-0.003272766,-0.003328324,-0.006596827,-4.79614e-05;-0.032807845,-0.026458446,-0.06011085,-0.051595512,-0.069941101,-0.053173717,-0.048084546,-0.038012049,-0.048184347,-0.049985769,-0.04400818,-0.0423373,-0.048040301,-0.052282962,-0.042145573,-0.051592844,-0.022715486,-0.043379664,-0.038860774,0.966101321,-0.013853401,-0.04419724,-0.022708819,-0.017850577,-0.017863763,-0.01953925,-0.009205329,-0.004962998,-0.00323827,-0.01196931,-0.020059066,-0.009908768,-0.027434745,-0.014133438,-0.000324585;-0.016765728,-0.010786513,-0.030014655,-0.025958016,-0.039747264,-0.021160773,-0.018054319,-0.013671897,-0.022463456,-0.022035253,-0.019525414,-0.016026579,-0.017320541,-0.016811105,-0.018478044,-0.026278659,-0.008201988,-0.028008878,-0.017672923,-0.009210181,0.991301399,-0.027856995,-0.015342132,-0.009091474,-0.007966631,-0.009620698,-0.010077705,-0.004104142,-0.003332258,-0.009555507,-0.007923946,-0.005917002,-0.011729119,-0.012660572,-0.000634183;-0.001322761,-0.003604137,-0.003742064,-0.004210668,-0.003967247,-0.005193135,-0.005535949,-0.001694249,-0.005161368,-0.00577181,-0.005938872,-0.005128625,-0.006272458,-0.006654445,-0.003168711,-0.004616917,-0.00460066,-0.005089127,-0.006542828,-0.009533433,-0.006237207,0.990132968,-0.007967218,-0.006224255,-0.022643732,-0.020280492,-0.007926118,-0.010205138,-0.00234562,-0.013618902,-0.009220855,-0.006854413,-0.008199615,-0.011087529,-0.00010152;-0.014085238,-0.028348268,-0.021751976,-0.018012995,-0.0207858,-0.024492694,-0.018201743,-0.034511489,-0.019670382,-0.017302614,-0.035508517,-0.018200429,-0.012442895,-0.010059933,-0.011796501,-0.018467947,-0.025318441,-0.017791995,-0.013866345,-0.019203814,-0.010743422,-0.010300668,0.958088681,-0.018771251,-0.011453667,-0.030931305,-0.009788831,-0.006445852,-0.001747833,-0.006969296,-0.011683431,-0.010080719,-0.007733085,-0.009962734,-0.000734395;-0.002671329,-0.004154138,-0.003630672,-0.002870637,-0.003643534,-0.006989385,-0.001611896,-0.004468169,-0.002941716,-0.002182204,-0.005132709,-0.003981254,-0.001568304,-0.001429265,-0.001619189,-0.002121944,-0.00202299,-0.002463304,-0.001113541,-0.00255951,-0.001368675,-0.001590588,-0.003327489,0.899123637,-0.002905321,-0.005738249,-0.001169673,-0.000655583,-0.000128525,-0.001003928,-0.00142711,-0.001523248,-0.000569985,-0.000918254,-6.69162e-05;-0.000826701,-0.002495197,-0.001582592,-0.001769715,-0.002837799,-0.001436944,-0.00221276,-0.000896282,-0.00206443,-0.001918824,-0.001583501,-0.001532236,-0.001881227,-0.002256744,-0.001842026,-0.001697241,-0.000843277,-0.001230614,-0.002154012,-0.004372731,-0.001748113,-0.001249445,-0.002159687,-0.00460322,0.967727476,-0.019285552,-0.00525849,-0.003452573,-0.000505297,-0.004480612,-0.004660763,-0.002212813,-0.001352623,-0.004043798,-2.17695e-05;-0.003354935,-0.007001744,-0.006026764,-0.003899478,-0.004751476,-0.00648427,-0.006958103,-0.006685782,-0.005436352,-0.005323635,-0.009480709,-0.005732585,-0.004785506,-0.004183739,-0.004169435,-0.004917823,-0.005024451,-0.003428707,-0.007523643,-0.019635319,-0.009595464,-0.008149735,-0.036993556,-0.140839805,-0.096491224,0.887023623,-0.003485176,-0.00381434,-0.00065391,-0.004896482,-0.004473183,-0.002428982,-0.002996075,-0.005205421,-6.89827e-05;-0.001915898,-0.005293483,-0.003278108,-0.003613865,-0.003716905,-0.003802884,-0.009604827,-0.002089672,-0.005729468,-0.004725244,-0.004604787,-0.004498042,-0.005882693,-0.005891715,-0.003179963,-0.006031274,-0.004463411,-0.007515475,-0.010699817,-0.017751845,-0.017613017,-0.010729429,-0.013328643,-0.0194581,-0.028162341,-0.020787732,0.919776804,-0.021313619,-0.00349919,-0.019326475,-0.016187518,-0.007357376,-0.009702709,-0.019581197,-0.000143597;-0.018827924,-0.032038634,-0.015649731,-0.021425027,-0.018448076,-0.021638854,-0.021134303,-0.012432975,-0.021298681,-0.019013375,-0.023621409,-0.021374434,-0.020074517,-0.018188244,-0.014049433,-0.021410756,-0.022699886,-0.019833826,-0.026059769,-0.043039273,-0.035727943,-0.023355066,-0.0412109,-0.040356106,-0.037151368,-0.027369063,-0.022981751,0.829972362,-0.04894328,-0.035220222,-0.022848493,-0.01302161,-0.021476878,-0.031677141,-0.00365031;-0.006684765,-0.005490927,-0.004102099,-0.005428336,-0.005779265,-0.00530694,-0.008283073,-0.002479349,-0.004783331,-0.006184813,-0.005427958,-0.005272766,-0.006281318,-0.005440651,-0.003947825,-0.008744539,-0.005701008,-0.0126676,-0.024642928,-0.02917499,-0.042942112,-0.028748869,-0.010698391,-0.027688521,-0.016390828,-0.021282013,-0.012024102,-0.025073302,0.969908969,-0.023699282,-0.010945195,-0.017505179,-0.029367114,-0.027820913,-0.000625306;-0.011785102,-0.029876139,-0.035117301,-0.02658489,-0.024916627,-0.022550123,-0.055070342,-0.015113738,-0.058179342,-0.033619318,-0.032456389,-0.027255963,-0.041876573,-0.05822971,-0.035528359,-0.036525502,-0.034643397,-0.051082826,-0.042972511,-0.058696763,-0.063159265,-0.032679028,-0.038765315,-0.053489901,-0.091549879,-0.063705287,-0.062943137,-0.084957975,-0.033375472,0.873411255,-0.054343021,-0.025619829,-0.049482031,-0.063367569,-0.000214075;-0.001713452,-0.003661173,-0.001852937,-0.001228964,-0.000933599,-0.003181617,-0.003200312,-0.001154109,-0.003146554,-0.002207286,-0.002448835,-0.00246777,-0.001376364,-0.00163094,-0.001210223,-0.002480236,-0.005460999,-0.00149161,-0.002349584,-0.001993061,-0.003737264,-0.003668003,-0.003249963,-0.008844854,-0.009023738,-0.003893647,-0.002655547,-0.001683987,-0.003626269,-0.002828651,0.992225223,-0.003906226,-0.005287227,-0.007794869,-2.87498e-06;-0.000807044,-0.000475993,-0.000340113,-0.00036319,-0.000366291,-0.000259773,-0.000621323,-0.000425021,-0.000817771,-0.000466198,-0.000503941,-0.000476328,-0.000783265,-0.000951313,-0.000469793,-0.000341829,-0.001018193,-0.000481609,-0.000427017,-0.000960798,-0.00193564,-0.00041641,-0.0010732,-0.00034602,-0.001747993,-0.001103616,-0.001616266,-0.001259784,-0.000172764,-0.002141622,-0.004438646,0.993594615,-0.001053067,-0.001402682,-8.32451e-07;-0.002028694,-0.000393451,-0.000387978,-0.000427931,-0.000393002,-0.000370815,-0.000421959,-0.00019374,-0.000433264,-0.000385758,-0.000435331,-0.000362063,-0.00051512,-0.000451149,-0.00029597,-0.000508409,-0.000411754,-0.000520905,-0.000521361,-0.00066402,-0.000471231,-0.0010167,-0.000688203,-0.000910047,-0.000562589,-0.0006852,-0.000775819,-0.000604241,-0.000100222,-0.00078511,-0.006170869,-0.001425334,0.97770953,-0.001643834,-1.02927e-07;-0.002415733,-0.006081182,-0.006286526,-0.005388501,-0.006305516,-0.005573682,-0.013008788,-0.003527436,-0.008283769,-0.006000501,-0.006050614,-0.007119907,-0.006642093,-0.006250376,-0.004253276,-0.006803615,-0.006245322,-0.0064516,-0.010099807,-0.009901243,-0.011146824,-0.013951506,-0.009815249,-0.00706116,-0.009623645,-0.011473728,-0.017902088,-0.011089716,-0.007686089,-0.029408526,-0.015523231,-0.010390065,-0.015551125,0.921347411,-0.000493677;-1.06019e-05,-1.51742e-05,-3.21763e-05,-3.9354e-05,-2.83863e-05,-3.55654e-05,-3.7168e-05,-1.39332e-05,-3.03032e-05,-3.47757e-05,-2.49402e-05,-3.42023e-05,-3.1417e-05,-2.10951e-05,-4.03277e-05,-3.57644e-05,-1.65735e-05,-8.50735e-05,-0.000138434,-4.47814e-05,-6.21993e-05,-6.92429e-05,-0.000165706,-2.85625e-05,-3.80083e-05,-3.43312e-05,-8.41192e-05,-6.59996e-05,-0.000283537,-7.4358e-05,-9.01757e-05,-5.44688e-05,-0.000128192,-0.000123181,0.999974904;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            8.70340047e-01, -2.89655800e-03, -2.72639635e-01, -4.03552090e-02, -2.94822670e-02,
            -1.37980540e-01, -1.17443400e-02, -2.88679700e-03, -7.03027300e-03, -1.29181510e-02,
            -1.11729700e-03, -3.17862000e-04, -3.17932000e-04, -2.41614000e-04, -1.94006000e-04,
            -1.17108050e-02, -5.07344000e-04, -3.25173700e-03, -5.54363000e-04, -2.36507800e-03,
            -2.58115600e-03, -3.77338880e-02, -7.12811000e-04, -2.05385200e-03, -4.38430000e-04,
            -1.17113700e-03, -2.10216000e-04, -1.72263000e-04, -5.25149000e-04, -1.11142400e-03,
            -1.83796600e-03, -1.97965100e-03, -2.42926800e-03, -2.35734500e-03, -1.52277700e-02
        ],
              [
                  -3.71855600e-03, 9.02686674e-01, -3.58988700e-03, -2.28638300e-03,
                  -1.37105100e-03, -3.84541700e-03, -5.39214600e-03, -4.36414845e-01,
                  -3.30476050e-02, -3.80495600e-03, -7.83925890e-02, -4.52001890e-02,
                  -3.65140100e-03, -2.42643500e-03, -1.58742700e-03, -7.57228100e-03,
                  -9.89919930e-02, -2.01192980e-02, -7.20529000e-04, -1.78655700e-03,
                  -8.08648000e-04, -2.65920600e-03, -7.09566700e-03, -2.99664500e-03,
                  -2.96443500e-03, -4.14224800e-03, -5.41520000e-04, -4.89003000e-04,
                  -2.06372000e-03, -1.09119500e-03, -2.94056300e-03, -3.78399300e-03,
                  -1.55811100e-03, -3.52308600e-03, -6.41444240e-02
              ],
              [
                  -5.33737750e-02, -8.04982000e-04, 8.60990071e-01, -2.31154100e-03,
                  -8.34375030e-02, -1.16862400e-03, -2.77742800e-03, -9.53989000e-04,
                  -9.71160700e-03, -2.36833100e-03, -1.85279000e-03, -9.30163000e-04,
                  -1.12338700e-03, -1.10394300e-03, -7.94550000e-04, -1.58651900e-03,
                  -7.36104000e-04, -1.00046800e-03, -1.62166700e-03, -4.61825600e-03,
                  -4.40440500e-03, -1.61299227e-01, -1.60649300e-03, -6.79571600e-03,
                  -4.32281600e-03, -2.45388400e-03, -1.51664100e-03, -8.03836000e-04,
                  -2.19753000e-04, -2.29153600e-03, -8.04227200e-03, -9.03260700e-03,
                  -1.43242200e-02, -5.31845600e-03, -1.26068200e-03
              ],
              [
                  -2.41846200e-03, -1.54642600e-03, -1.48578200e-03, 7.14668847e-01,
                  -5.42134320e-02, -5.88599300e-03, -7.26785000e-03, -5.34526000e-04,
                  -4.17253000e-03, -1.98405870e-02, -5.14490900e-03, -1.65699700e-03,
                  -2.46489700e-03, -2.27589100e-03, -6.17053600e-03, -2.49272390e-02,
                  -5.59012000e-04, -2.73246400e-03, -1.80495800e-03, -3.01044900e-03,
                  -3.67547600e-03, -3.25178100e-03, -1.74469300e-03, -3.11809200e-03,
                  -1.28741000e-03, -1.79326300e-03, -2.86994200e-03, -6.65858000e-04,
                  -2.63621000e-04, -1.36993700e-03, -3.29581100e-03, -8.10695000e-04,
                  -3.56445100e-03, -4.93945000e-03, -5.08203000e-04
              ],
              [
                  -2.46407000e-04, -3.28695000e-04, -2.07026000e-04, -6.66782200e-03,
                  8.11140039e-01, -1.12923600e-03, -1.33403000e-03, -1.09040000e-04,
                  -2.91481000e-04, -1.04097800e-03, -6.52049000e-04, -4.35987000e-04,
                  -4.47200000e-04, -4.10281000e-04, -1.22940100e-03, -3.68610800e-03,
                  -2.13053000e-04, -1.81860000e-04, -4.22446000e-04, -5.06424000e-04,
                  -5.35474000e-04, -2.34643000e-04, -2.17696000e-04, -2.11960000e-04,
                  -1.48200000e-04, -1.73049000e-04, -6.77218000e-04, -7.91158000e-05,
                  -2.14835000e-05, -1.62299000e-04, -8.89472000e-04, -1.50069000e-04,
                  -1.72596000e-04, -7.34594000e-04, -1.40127000e-05
              ],
              [
                  -1.62649500e-03, -1.98762500e-03, -1.51215400e-03, -1.53434800e-03,
                  -2.22086700e-03, 8.12358622e-01, -1.11154580e-02, -4.21848000e-04,
                  -1.57342400e-03, -2.68443000e-03, -6.66533700e-03, -2.52589800e-03,
                  -2.89714200e-03, -1.87319400e-03, -3.11117500e-03, -7.29521910e-02,
                  -8.31569000e-04, -3.55833190e-02, -8.16670000e-04, -1.71679400e-03,
                  -1.53205700e-03, -2.30670200e-03, -1.37679000e-03, -5.95805000e-04,
                  -4.30067000e-04, -4.34358900e-03, -7.30557000e-04, -6.25581000e-04,
                  -2.23838200e-03, -9.36208000e-04, -1.38655900e-03, -1.14453400e-03,
                  -9.40626000e-04, -2.83003000e-03, -3.02171000e-04
              ],
              [
                  -2.83359600e-03, -3.38435100e-03, -2.40694790e-02, -1.01893540e-02,
                  -1.27073450e-02, -1.26769820e-02, 7.64873577e-01, -1.67600600e-03,
                  -1.97520920e-02, -1.84329810e-02, -2.32279180e-02, -6.05178100e-03,
                  -1.00457100e-02, -1.55448100e-02, -5.94684600e-03, -2.22895900e-02,
                  -3.47940700e-03, -5.32657900e-03, -7.97565300e-03, -1.51469090e-02,
                  -1.50114430e-02, -1.10580550e-02, -6.20552100e-03, -4.39382500e-03,
                  -7.65488400e-03, -1.63011400e-02, -1.14814050e-02, -1.62277200e-02,
                  -2.67781900e-03, -2.27375930e-02, -1.63930560e-02, -1.62997890e-02,
                  -9.91971700e-03, -2.47799700e-02, -6.94923000e-04
              ],
              [
                  -1.21708180e-02, -1.35575680e-02, -3.62104800e-03, -4.81641100e-03,
                  -3.23979400e-03, -4.76086600e-03, -4.57062700e-03, 9.54789826e-01,
                  -2.62594450e-02, -8.58899000e-03, -1.60021310e-02, -8.92975900e-03,
                  -3.67193200e-03, -3.06361900e-03, -2.04829700e-03, -4.44544400e-03,
                  -1.94984040e-02, -1.27730200e-02, -4.42553000e-03, -6.39371800e-03,
                  -5.40968100e-03, -3.93684300e-03, -5.10776110e-02, -5.12532680e-02,
                  -5.62984410e-02, -1.47204020e-02, -3.45236000e-03, -1.26998400e-03,
                  -1.17175000e-03, -4.48890900e-03, -7.47928400e-03, -3.00309600e-03,
                  -3.41003600e-03, -6.29934500e-03, -7.94193000e-05
              ],
              [
                  -4.02089790e-02, -1.38239370e-02, -1.06544720e-02, -7.08722450e-02,
                  -3.41498380e-02, -2.63943820e-02, -3.39563040e-02, -1.41711100e-02,
                  7.69512650e-01, -1.99881221e-01, -3.07828700e-02, -1.54116300e-02,
                  -1.26464840e-02, -1.92200200e-02, -1.28513260e-02, -3.30055120e-02,
                  -5.83645300e-03, -9.84446400e-03, -7.05564300e-03, -3.45727400e-03,
                  -2.53766300e-03, -4.53409200e-03, -3.35039000e-03, -3.06005100e-03,
                  -2.18490800e-03, -3.45521800e-03, -1.42089100e-03, -8.85157000e-04,
                  -1.53371200e-03, -4.41479000e-03, -8.23775300e-03, -3.67052500e-03,
                  -6.14578570e-02, -9.12438600e-03, -1.40615000e-04
              ],
              [
                  -4.38620300e-03, -8.64206900e-03, -1.46696300e-02, -8.21640000e-03,
                  -3.35166190e-02, -9.57960400e-03, -1.42285490e-02, -1.76510500e-03,
                  -1.80040240e-02, 8.90695569e-01, -1.07133060e-02, -7.49338800e-03,
                  -2.60821330e-02, -2.62431180e-02, -3.50303570e-02, -3.82087230e-02,
                  -2.27886800e-03, -1.77702970e-02, -1.85726370e-02, -4.72059900e-03,
                  -5.30347300e-03, -4.22589400e-03, -1.15018800e-02, -2.28463800e-03,
                  -2.43012700e-03, -6.21790400e-03, -3.77119700e-03, -7.93289000e-04,
                  -9.77558000e-04, -2.56074700e-03, -3.00129800e-03, -8.63652000e-04,
                  -5.38612500e-03, -3.38766600e-03, -9.77402000e-05
              ],
              [
                  -1.87914700e-03, -5.11069800e-03, -5.41338000e-03, -1.93528700e-03,
                  -1.60648400e-03, -9.36805300e-03, -1.39705700e-03, -1.98384600e-03,
                  -6.52722500e-03, -6.06408400e-03, 8.94245647e-01, -9.44097000e-03,
                  -5.61935600e-03, -1.20207980e-02, -6.91765300e-03, -6.89996200e-03,
                  -1.80679900e-03, -7.98095760e-02, -2.86898800e-03, -1.55484300e-03,
                  -1.05188000e-03, -3.58898100e-03, -1.44171900e-03, -5.42678000e-04,
                  -5.27728000e-04, -1.36458800e-03, -1.07568200e-03, -2.53746000e-04,
                  -2.12181600e-03, -9.67686000e-04, -1.48335000e-03, -1.64010400e-03,
                  -2.00488900e-03, -1.87183800e-03, -7.98460000e-05
              ],
              [
                  -4.94188800e-03, -2.58255780e-02, -1.49448720e-02, -5.58665800e-03,
                  -1.04255940e-02, -2.71576160e-02, -9.12746900e-03, -6.03700300e-03,
                  -1.76530910e-02, -2.35607740e-02, -3.20702180e-02, 6.85389778e-01,
                  -1.60905187e-01, -7.66866150e-02, -1.00230074e-01, -1.08767456e-01,
                  -7.47818200e-03, -8.50537010e-02, -1.98382840e-02, -5.09037800e-03,
                  -4.13713300e-03, -4.67120400e-03, -8.00910500e-03, -1.08288300e-02,
                  -8.00819600e-03, -6.76396200e-03, -3.87445100e-03, -9.10141000e-04,
                  -2.58602200e-03, -3.38361900e-03, -5.02712400e-03, -1.88656800e-03,
                  -2.68755000e-03, -4.50100000e-03, -3.24620000e-04
              ],
              [
                  -7.02948100e-03, -1.92389100e-02, -3.85439000e-03, -6.36539400e-03,
                  -4.90491600e-03, -8.67016500e-03, -7.05803100e-03, -4.44504400e-03,
                  -7.64638400e-03, -1.05583490e-02, -1.24298300e-02, -1.60898310e-02,
                  8.81238648e-01, -1.52148060e-02, -2.87739030e-02, -9.39545900e-03,
                  -7.47245900e-03, -1.60472270e-02, -2.37566510e-02, -3.92731400e-03,
                  -3.20322000e-03, -2.27660200e-03, -6.62327300e-03, -5.48836800e-03,
                  -4.20780200e-03, -4.65298800e-03, -2.96222900e-03, -1.22410500e-03,
                  -1.42538400e-03, -3.07896800e-03, -6.41473500e-03, -2.14206800e-03,
                  -2.19586600e-03, -3.58241600e-03, -1.79988000e-04
              ],
              [
                  -1.52322100e-03, -6.88872600e-03, -3.17147500e-03, -4.63535600e-03,
                  -3.48884200e-03, -6.30229300e-03, -9.16404600e-03, -2.88619100e-03,
                  -8.76574500e-03, -1.19213070e-02, -8.51808300e-03, -1.55510740e-02,
                  -7.40598220e-02, 7.46152961e-01, -4.91450000e-02, -2.06658800e-02,
                  -1.22820660e-02, -2.57822280e-02, -2.44691910e-02, -8.97157700e-03,
                  -7.81768700e-03, -4.08942400e-03, -6.20242000e-03, -3.19893800e-03,
                  -3.61549200e-03, -6.55234600e-03, -2.77168680e-02, -3.55538600e-03,
                  -1.49335900e-03, -1.24755030e-02, -1.16854670e-02, -5.54419700e-03,
                  -1.80214590e-02, -7.66001600e-03, -6.58983000e-04
              ],
              [
                  -3.73853100e-03, -5.69781500e-03, -1.73061000e-03, -2.53599300e-03,
                  -2.26139500e-03, -2.88074300e-03, -1.86032000e-03, -1.01817500e-03,
                  -2.04571600e-03, -3.30515800e-03, -3.52510900e-03, -4.73007300e-03,
                  -1.35421580e-02, -4.75098100e-03, 7.08610081e-01, -4.34900300e-03,
                  -1.48744200e-03, -3.84243500e-03, -8.92999660e-02, -5.34047400e-03,
                  -4.42361200e-03, -1.26206500e-03, -2.90366970e-02, -3.97421670e-02,
                  -4.49333380e-02, -1.01927400e-02, -2.94439300e-03, -8.66372000e-04,
                  -4.63256000e-04, -3.05530100e-03, -1.79957270e-02, -9.89197000e-04,
                  -1.36483600e-03, -3.26006400e-03, -1.26873000e-04
              ],
              [
                  -9.05640000e-04, -1.43316200e-03, -1.13957000e-03, -5.55736300e-03,
                  -3.54924300e-03, -6.30201700e-03, -3.14445500e-03, -5.58260000e-04,
                  -1.82999800e-03, -2.47004000e-03, -3.45253500e-03, -7.02299400e-03,
                  -3.88486400e-03, -3.18288200e-03, -5.11665800e-03, 9.64310556e-01,
                  -1.03776200e-03, -4.97372500e-03, -2.23600500e-03, -1.60551900e-03,
                  -1.67746900e-03, -2.87615400e-03, -1.43033500e-03, -1.03703800e-03,
                  -1.17315700e-03, -1.40445000e-03, -9.35553000e-04, -1.21316700e-03,
                  -1.06574200e-03, -2.29099500e-03, -3.92990700e-03, -3.63015300e-03,
                  -2.90406600e-03, -5.95657500e-03, -3.62851600e-03
              ],
              [
                  -9.35334000e-03, -2.49532870e-02, -1.16245470e-02, -1.65080770e-02,
                  -7.63212800e-03, -1.57395750e-02, -2.16684000e-02, -1.42530460e-02,
                  -2.91090130e-02, -2.17319540e-02, -3.68986800e-02, -2.74405740e-02,
                  -1.12961180e-02, -1.03996440e-02, -9.00922300e-03, -1.12389500e-02,
                  9.06563328e-01, -5.13480200e-03, -1.05533140e-02, -6.87308200e-03,
                  -1.41285670e-02, -2.34804760e-02, -1.57312080e-02, -4.17514500e-03,
                  -4.30110600e-03, -1.36183740e-02, -8.28930500e-03, -4.64171400e-03,
                  -8.35671300e-03, -6.56370900e-03, -1.51751700e-02, -1.94922220e-02,
                  -1.33911490e-02, -1.60758510e-02, -2.36234000e-04
              ],
              [
                  -3.63017500e-03, -8.06058900e-03, -2.53073800e-03, -2.58394800e-03,
                  -1.98190300e-03, -4.49470800e-03, -4.02008900e-03, -3.18725200e-03,
                  -4.48788200e-03, -3.78754800e-03, -7.81841000e-03, -5.08144900e-03,
                  -3.44583300e-03, -3.53371000e-03, -2.37183800e-03, -3.32068600e-03,
                  -2.65042010e-02, 9.64834982e-01, -4.34022100e-03, -4.39403300e-03,
                  -5.00887800e-03, -5.56273400e-03, -9.90016400e-03, -3.53927700e-03,
                  -2.33723300e-03, -1.53230270e-02, -1.17908930e-02, -5.62398600e-03,
                  -4.49934100e-02, -5.62191700e-03, -2.08006320e-02, -1.44869710e-02,
                  -7.04423800e-03, -1.30822050e-02, -2.65612300e-03
              ],
              [
                  -5.01522400e-03, -4.21434700e-03, -6.31625700e-03, -5.15444900e-03,
                  -7.23077400e-03, -6.15921500e-03, -4.48428000e-03, -3.14137500e-03,
                  -6.20455200e-03, -6.24412700e-03, -7.70004200e-03, -6.28700100e-03,
                  -5.28084600e-03, -5.28703100e-03, -4.66005100e-03, -6.19191300e-03,
                  -9.15027500e-03, -7.71991000e-03, 9.91635823e-01, -4.52428200e-03,
                  -4.62699200e-03, -5.39558000e-03, -1.83307240e-02, -3.61861600e-03,
                  -2.82256500e-03, -7.49521800e-03, -4.68928000e-03, -2.49557900e-03,
                  -1.86534800e-03, -6.16004900e-03, -3.99953700e-03, -3.27276600e-03,
                  -3.32832400e-03, -6.59682700e-03, -4.79614000e-05
              ],
              [
                  -3.28078450e-02, -2.64584460e-02, -6.01108500e-02, -5.15955120e-02,
                  -6.99411010e-02, -5.31737170e-02, -4.80845460e-02, -3.80120490e-02,
                  -4.81843470e-02, -4.99857690e-02, -4.40081800e-02, -4.23373000e-02,
                  -4.80403010e-02, -5.22829620e-02, -4.21455730e-02, -5.15928440e-02,
                  -2.27154860e-02, -4.33796640e-02, -3.88607740e-02, 9.66101321e-01,
                  -1.38534010e-02, -4.41972400e-02, -2.27088190e-02, -1.78505770e-02,
                  -1.78637630e-02, -1.95392500e-02, -9.20532900e-03, -4.96299800e-03,
                  -3.23827000e-03, -1.19693100e-02, -2.00590660e-02, -9.90876800e-03,
                  -2.74347450e-02, -1.41334380e-02, -3.24585000e-04
              ],
              [
                  -1.67657280e-02, -1.07865130e-02, -3.00146550e-02, -2.59580160e-02,
                  -3.97472640e-02, -2.11607730e-02, -1.80543190e-02, -1.36718970e-02,
                  -2.24634560e-02, -2.20352530e-02, -1.95254140e-02, -1.60265790e-02,
                  -1.73205410e-02, -1.68111050e-02, -1.84780440e-02, -2.62786590e-02,
                  -8.20198800e-03, -2.80088780e-02, -1.76729230e-02, -9.21018100e-03,
                  9.91301399e-01, -2.78569950e-02, -1.53421320e-02, -9.09147400e-03,
                  -7.96663100e-03, -9.62069800e-03, -1.00777050e-02, -4.10414200e-03,
                  -3.33225800e-03, -9.55550700e-03, -7.92394600e-03, -5.91700200e-03,
                  -1.17291190e-02, -1.26605720e-02, -6.34183000e-04
              ],
              [
                  -1.32276100e-03, -3.60413700e-03, -3.74206400e-03, -4.21066800e-03,
                  -3.96724700e-03, -5.19313500e-03, -5.53594900e-03, -1.69424900e-03,
                  -5.16136800e-03, -5.77181000e-03, -5.93887200e-03, -5.12862500e-03,
                  -6.27245800e-03, -6.65444500e-03, -3.16871100e-03, -4.61691700e-03,
                  -4.60066000e-03, -5.08912700e-03, -6.54282800e-03, -9.53343300e-03,
                  -6.23720700e-03, 9.90132968e-01, -7.96721800e-03, -6.22425500e-03,
                  -2.26437320e-02, -2.02804920e-02, -7.92611800e-03, -1.02051380e-02,
                  -2.34562000e-03, -1.36189020e-02, -9.22085500e-03, -6.85441300e-03,
                  -8.19961500e-03, -1.10875290e-02, -1.01520000e-04
              ],
              [
                  -1.40852380e-02, -2.83482680e-02, -2.17519760e-02, -1.80129950e-02,
                  -2.07858000e-02, -2.44926940e-02, -1.82017430e-02, -3.45114890e-02,
                  -1.96703820e-02, -1.73026140e-02, -3.55085170e-02, -1.82004290e-02,
                  -1.24428950e-02, -1.00599330e-02, -1.17965010e-02, -1.84679470e-02,
                  -2.53184410e-02, -1.77919950e-02, -1.38663450e-02, -1.92038140e-02,
                  -1.07434220e-02, -1.03006680e-02, 9.58088681e-01, -1.87712510e-02,
                  -1.14536670e-02, -3.09313050e-02, -9.78883100e-03, -6.44585200e-03,
                  -1.74783300e-03, -6.96929600e-03, -1.16834310e-02, -1.00807190e-02,
                  -7.73308500e-03, -9.96273400e-03, -7.34395000e-04
              ],
              [
                  -2.67132900e-03, -4.15413800e-03, -3.63067200e-03, -2.87063700e-03,
                  -3.64353400e-03, -6.98938500e-03, -1.61189600e-03, -4.46816900e-03,
                  -2.94171600e-03, -2.18220400e-03, -5.13270900e-03, -3.98125400e-03,
                  -1.56830400e-03, -1.42926500e-03, -1.61918900e-03, -2.12194400e-03,
                  -2.02299000e-03, -2.46330400e-03, -1.11354100e-03, -2.55951000e-03,
                  -1.36867500e-03, -1.59058800e-03, -3.32748900e-03, 8.99123637e-01,
                  -2.90532100e-03, -5.73824900e-03, -1.16967300e-03, -6.55583000e-04,
                  -1.28525000e-04, -1.00392800e-03, -1.42711000e-03, -1.52324800e-03,
                  -5.69985000e-04, -9.18254000e-04, -6.69162000e-05
              ],
              [
                  -8.26701000e-04, -2.49519700e-03, -1.58259200e-03, -1.76971500e-03,
                  -2.83779900e-03, -1.43694400e-03, -2.21276000e-03, -8.96282000e-04,
                  -2.06443000e-03, -1.91882400e-03, -1.58350100e-03, -1.53223600e-03,
                  -1.88122700e-03, -2.25674400e-03, -1.84202600e-03, -1.69724100e-03,
                  -8.43277000e-04, -1.23061400e-03, -2.15401200e-03, -4.37273100e-03,
                  -1.74811300e-03, -1.24944500e-03, -2.15968700e-03, -4.60322000e-03,
                  9.67727476e-01, -1.92855520e-02, -5.25849000e-03, -3.45257300e-03,
                  -5.05297000e-04, -4.48061200e-03, -4.66076300e-03, -2.21281300e-03,
                  -1.35262300e-03, -4.04379800e-03, -2.17695000e-05
              ],
              [
                  -3.35493500e-03, -7.00174400e-03, -6.02676400e-03, -3.89947800e-03,
                  -4.75147600e-03, -6.48427000e-03, -6.95810300e-03, -6.68578200e-03,
                  -5.43635200e-03, -5.32363500e-03, -9.48070900e-03, -5.73258500e-03,
                  -4.78550600e-03, -4.18373900e-03, -4.16943500e-03, -4.91782300e-03,
                  -5.02445100e-03, -3.42870700e-03, -7.52364300e-03, -1.96353190e-02,
                  -9.59546400e-03, -8.14973500e-03, -3.69935560e-02, -1.40839805e-01,
                  -9.64912240e-02, 8.87023623e-01, -3.48517600e-03, -3.81434000e-03,
                  -6.53910000e-04, -4.89648200e-03, -4.47318300e-03, -2.42898200e-03,
                  -2.99607500e-03, -5.20542100e-03, -6.89827000e-05
              ],
              [
                  -1.91589800e-03, -5.29348300e-03, -3.27810800e-03, -3.61386500e-03,
                  -3.71690500e-03, -3.80288400e-03, -9.60482700e-03, -2.08967200e-03,
                  -5.72946800e-03, -4.72524400e-03, -4.60478700e-03, -4.49804200e-03,
                  -5.88269300e-03, -5.89171500e-03, -3.17996300e-03, -6.03127400e-03,
                  -4.46341100e-03, -7.51547500e-03, -1.06998170e-02, -1.77518450e-02,
                  -1.76130170e-02, -1.07294290e-02, -1.33286430e-02, -1.94581000e-02,
                  -2.81623410e-02, -2.07877320e-02, 9.19776804e-01, -2.13136190e-02,
                  -3.49919000e-03, -1.93264750e-02, -1.61875180e-02, -7.35737600e-03,
                  -9.70270900e-03, -1.95811970e-02, -1.43597000e-04
              ],
              [
                  -1.88279240e-02, -3.20386340e-02, -1.56497310e-02, -2.14250270e-02,
                  -1.84480760e-02, -2.16388540e-02, -2.11343030e-02, -1.24329750e-02,
                  -2.12986810e-02, -1.90133750e-02, -2.36214090e-02, -2.13744340e-02,
                  -2.00745170e-02, -1.81882440e-02, -1.40494330e-02, -2.14107560e-02,
                  -2.26998860e-02, -1.98338260e-02, -2.60597690e-02, -4.30392730e-02,
                  -3.57279430e-02, -2.33550660e-02, -4.12109000e-02, -4.03561060e-02,
                  -3.71513680e-02, -2.73690630e-02, -2.29817510e-02, 8.29972362e-01,
                  -4.89432800e-02, -3.52202220e-02, -2.28484930e-02, -1.30216100e-02,
                  -2.14768780e-02, -3.16771410e-02, -3.65031000e-03
              ],
              [
                  -6.68476500e-03, -5.49092700e-03, -4.10209900e-03, -5.42833600e-03,
                  -5.77926500e-03, -5.30694000e-03, -8.28307300e-03, -2.47934900e-03,
                  -4.78333100e-03, -6.18481300e-03, -5.42795800e-03, -5.27276600e-03,
                  -6.28131800e-03, -5.44065100e-03, -3.94782500e-03, -8.74453900e-03,
                  -5.70100800e-03, -1.26676000e-02, -2.46429280e-02, -2.91749900e-02,
                  -4.29421120e-02, -2.87488690e-02, -1.06983910e-02, -2.76885210e-02,
                  -1.63908280e-02, -2.12820130e-02, -1.20241020e-02, -2.50733020e-02,
                  9.69908969e-01, -2.36992820e-02, -1.09451950e-02, -1.75051790e-02,
                  -2.93671140e-02, -2.78209130e-02, -6.25306000e-04
              ],
              [
                  -1.17851020e-02, -2.98761390e-02, -3.51173010e-02, -2.65848900e-02,
                  -2.49166270e-02, -2.25501230e-02, -5.50703420e-02, -1.51137380e-02,
                  -5.81793420e-02, -3.36193180e-02, -3.24563890e-02, -2.72559630e-02,
                  -4.18765730e-02, -5.82297100e-02, -3.55283590e-02, -3.65255020e-02,
                  -3.46433970e-02, -5.10828260e-02, -4.29725110e-02, -5.86967630e-02,
                  -6.31592650e-02, -3.26790280e-02, -3.87653150e-02, -5.34899010e-02,
                  -9.15498790e-02, -6.37052870e-02, -6.29431370e-02, -8.49579750e-02,
                  -3.33754720e-02, 8.73411255e-01, -5.43430210e-02, -2.56198290e-02,
                  -4.94820310e-02, -6.33675690e-02, -2.14075000e-04
              ],
              [
                  -1.71345200e-03, -3.66117300e-03, -1.85293700e-03, -1.22896400e-03,
                  -9.33599000e-04, -3.18161700e-03, -3.20031200e-03, -1.15410900e-03,
                  -3.14655400e-03, -2.20728600e-03, -2.44883500e-03, -2.46777000e-03,
                  -1.37636400e-03, -1.63094000e-03, -1.21022300e-03, -2.48023600e-03,
                  -5.46099900e-03, -1.49161000e-03, -2.34958400e-03, -1.99306100e-03,
                  -3.73726400e-03, -3.66800300e-03, -3.24996300e-03, -8.84485400e-03,
                  -9.02373800e-03, -3.89364700e-03, -2.65554700e-03, -1.68398700e-03,
                  -3.62626900e-03, -2.82865100e-03, 9.92225223e-01, -3.90622600e-03,
                  -5.28722700e-03, -7.79486900e-03, -2.87498000e-06
              ],
              [
                  -8.07044000e-04, -4.75993000e-04, -3.40113000e-04, -3.63190000e-04,
                  -3.66291000e-04, -2.59773000e-04, -6.21323000e-04, -4.25021000e-04,
                  -8.17771000e-04, -4.66198000e-04, -5.03941000e-04, -4.76328000e-04,
                  -7.83265000e-04, -9.51313000e-04, -4.69793000e-04, -3.41829000e-04,
                  -1.01819300e-03, -4.81609000e-04, -4.27017000e-04, -9.60798000e-04,
                  -1.93564000e-03, -4.16410000e-04, -1.07320000e-03, -3.46020000e-04,
                  -1.74799300e-03, -1.10361600e-03, -1.61626600e-03, -1.25978400e-03,
                  -1.72764000e-04, -2.14162200e-03, -4.43864600e-03, 9.93594615e-01,
                  -1.05306700e-03, -1.40268200e-03, -8.32451000e-07
              ],
              [
                  -2.02869400e-03, -3.93451000e-04, -3.87978000e-04, -4.27931000e-04,
                  -3.93002000e-04, -3.70815000e-04, -4.21959000e-04, -1.93740000e-04,
                  -4.33264000e-04, -3.85758000e-04, -4.35331000e-04, -3.62063000e-04,
                  -5.15120000e-04, -4.51149000e-04, -2.95970000e-04, -5.08409000e-04,
                  -4.11754000e-04, -5.20905000e-04, -5.21361000e-04, -6.64020000e-04,
                  -4.71231000e-04, -1.01670000e-03, -6.88203000e-04, -9.10047000e-04,
                  -5.62589000e-04, -6.85200000e-04, -7.75819000e-04, -6.04241000e-04,
                  -1.00222000e-04, -7.85110000e-04, -6.17086900e-03, -1.42533400e-03,
                  9.77709530e-01, -1.64383400e-03, -1.02927000e-07
              ],
              [
                  -2.41573300e-03, -6.08118200e-03, -6.28652600e-03, -5.38850100e-03,
                  -6.30551600e-03, -5.57368200e-03, -1.30087880e-02, -3.52743600e-03,
                  -8.28376900e-03, -6.00050100e-03, -6.05061400e-03, -7.11990700e-03,
                  -6.64209300e-03, -6.25037600e-03, -4.25327600e-03, -6.80361500e-03,
                  -6.24532200e-03, -6.45160000e-03, -1.00998070e-02, -9.90124300e-03,
                  -1.11468240e-02, -1.39515060e-02, -9.81524900e-03, -7.06116000e-03,
                  -9.62364500e-03, -1.14737280e-02, -1.79020880e-02, -1.10897160e-02,
                  -7.68608900e-03, -2.94085260e-02, -1.55232310e-02, -1.03900650e-02,
                  -1.55511250e-02, 9.21347411e-01, -4.93677000e-04
              ],
              [
                  -1.06019000e-05, -1.51742000e-05, -3.21763000e-05, -3.93540000e-05,
                  -2.83863000e-05, -3.55654000e-05, -3.71680000e-05, -1.39332000e-05,
                  -3.03032000e-05, -3.47757000e-05, -2.49402000e-05, -3.42023000e-05,
                  -3.14170000e-05, -2.10951000e-05, -4.03277000e-05, -3.57644000e-05,
                  -1.65735000e-05, -8.50735000e-05, -1.38434000e-04, -4.47814000e-05,
                  -6.21993000e-05, -6.92429000e-05, -1.65706000e-04, -2.85625000e-05,
                  -3.80083000e-05, -3.43312000e-05, -8.41192000e-05, -6.59996000e-05,
                  -2.83537000e-04, -7.43580000e-05, -9.01757000e-05, -5.44688000e-05,
                  -1.28192000e-04, -1.23181000e-04, 9.99974904e-01
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def ia_matrix_1997():
    """
    Real Name: b'ia matrix 1997'
    Original Eqn: b'0.871602101,-0.00288089,-0.268910601,-0.038690202,-0.029829602,-0.132857977,-0.01160687,-0.003129731,-0.007089067,-0.012891835,-0.001018114,-0.000303137,-0.000303133,-0.000228253,-0.000181488,-0.01197033,-0.000478186,-0.00304915,-0.000493111,-0.002196271,-0.002381494,-0.037065143,-0.000682396,-0.001976864,-0.000442483,-0.001157398,-0.000199273,-0.000176779,-0.000518675,-0.001105391,-0.001787072,-0.001899819,-0.00234746,-0.002342852,-0.013028469;-0.003445926,0.913546916,-0.003434352,-0.002065805,-0.001316679,-0.003564083,-0.005243907,-0.426213558,-0.032364468,-0.003544437,-0.077534427,-0.041681288,-0.003370927,-0.002036728,-0.001482677,-0.006823633,-0.095104284,-0.018098265,-0.000635543,-0.001486543,-0.000857415,-0.00224075,-0.006121246,-0.00291212,-0.00273783,-0.00356269,-0.000509548,-0.000410769,-0.001963592,-0.001037098,-0.002720399,-0.003802139,-0.001501783,-0.003096856,-0.054880235;-0.054333335,-0.00080214,0.861354218,-0.002306033,-0.085071037,-0.001262288,-0.002790004,-0.001019496,-0.009663612,-0.002459512,-0.001908523,-0.000967204,-0.001171888,-0.001158918,-0.000817001,-0.001553905,-0.000782009,-0.001051083,-0.001693718,-0.00455339,-0.004337245,-0.159100006,-0.001613403,-0.007337838,-0.004585508,-0.002442863,-0.001399848,-0.000830922,-0.000238143,-0.002145204,-0.007870599,-0.008911694,-0.014155102,-0.005673216,-0.001078606;-0.002473605,-0.001420914,-0.001499851,0.719721144,-0.055668182,-0.005816545,-0.007126467,-0.000533107,-0.004204301,-0.019874235,-0.004939412,-0.001582393,-0.002345834,-0.002130142,-0.006278643,-0.024187483,-0.00061174,-0.00257056,-0.001770152,-0.002845096,-0.00347016,-0.003061283,-0.001703161,-0.003111789,-0.001134529,-0.001703517,-0.00304825,-0.000666469,-0.000263628,-0.001279284,-0.003354706,-0.00086113,-0.003570367,-0.00494858,-0.000434805;-0.00023783,-0.000296835,-0.000223715,-0.00725957,0.807483255,-0.001144255,-0.001365843,-0.000120687,-0.00028856,-0.001095371,-0.000648439,-0.000436689,-0.000439169,-0.000398534,-0.001287995,-0.003431772,-0.00019162,-0.000177943,-0.000451412,-0.000561101,-0.000551029,-0.00022863,-0.000218574,-0.000215384,-0.000147444,-0.000166611,-0.000715269,-7.04103e-05,-2.16715e-05,-0.000160175,-0.00092219,-0.000151426,-0.000169642,-0.000727576,-1.19889e-05;-0.001627333,-0.00205764,-0.001540806,-0.001571586,-0.002224155,0.807390959,-0.010919704,-0.000444378,-0.00158412,-0.002700988,-0.006705705,-0.002618593,-0.002862238,-0.001855208,-0.003046499,-0.071301105,-0.000795723,-0.034417352,-0.000783804,-0.00161832,-0.001487162,-0.002255255,-0.001311397,-0.000528664,-0.000385784,-0.004200154,-0.000761861,-0.000603439,-0.002170557,-0.000915428,-0.001407477,-0.001169798,-0.001016073,-0.002793157,-0.000258529;-0.002838087,-0.003396032,-0.024574465,-0.010577829,-0.01280794,-0.012407544,0.763693789,-0.001706744,-0.019419192,-0.018586357,-0.02285275,-0.005956292,-0.010096435,-0.015177124,-0.006093516,-0.021515879,-0.003577087,-0.005355286,-0.007873129,-0.014750322,-0.01437704,-0.010696779,-0.00605459,-0.004151066,-0.007162355,-0.016119069,-0.012007772,-0.015756354,-0.0027113,-0.022619183,-0.016547894,-0.016716418,-0.010063716,-0.025448184,-0.000594557;-0.01244241,-0.013149222,-0.003560142,-0.004637733,-0.003136847,-0.004619719,-0.004457872,0.955350204,-0.02702986,-0.008805529,-0.016214626,-0.009012176,-0.003704907,-0.002940384,-0.001987779,-0.004287006,-0.019851968,-0.012765196,-0.004378675,-0.005936027,-0.005073976,-0.003729197,-0.050632972,-0.050735036,-0.055367906,-0.013851237,-0.00354921,-0.001252782,-0.001213375,-0.004464067,-0.007579684,-0.002972122,-0.003537552,-0.006629857,-6.7949e-05;-0.04076455,-0.014035824,-0.010941392,-0.070927562,-0.033314252,-0.0259778,-0.034081478,-0.014377292,0.767144994,-0.20156022,-0.03022867,-0.015575275,-0.01277011,-0.019134101,-0.012837534,-0.032099737,-0.005876455,-0.010093958,-0.006929657,-0.003429806,-0.00252187,-0.004386534,-0.003251196,-0.002620751,-0.002154963,-0.003478068,-0.001472106,-0.000906522,-0.001544161,-0.004309803,-0.008234431,-0.003759918,-0.06395785,-0.009267209,-0.000120306;-0.004535885,-0.009081804,-0.014974628,-0.008371675,-0.034825962,-0.009533684,-0.014009274,-0.001899495,-0.018186269,0.889249681,-0.01084037,-0.007539671,-0.026360725,-0.025993118,-0.036109617,-0.038337318,-0.002287962,-0.018123184,-0.018976729,-0.004604474,-0.005157652,-0.004175149,-0.011206529,-0.002245139,-0.002443335,-0.006133873,-0.003775129,-0.000741477,-0.000987898,-0.002514711,-0.003045665,-0.000914915,-0.005555565,-0.003587204,-8.36239e-05;-0.001894733,-0.005025044,-0.005549772,-0.002005759,-0.001720439,-0.009155057,-0.001413417,-0.002161185,-0.006470184,-0.006102992,0.890835862,-0.00964538,-0.005608354,-0.011773615,-0.007125075,-0.006699374,-0.001899667,-0.080091904,-0.002923031,-0.001479653,-0.001011819,-0.003627024,-0.001323619,-0.00050546,-0.000481673,-0.001338526,-0.001124919,-0.00017339,-0.002232675,-0.001003708,-0.001512774,-0.001694997,-0.002042592,-0.001856075,-6.83141e-05;-0.004987218,-0.026546575,-0.015063825,-0.005737678,-0.010202629,-0.026921353,-0.009161499,-0.006249603,-0.017486699,-0.023621302,-0.031861546,0.682249547,-0.1614944,-0.075218629,-0.100445259,-0.111083954,-0.007567227,-0.084790318,-0.019729037,-0.004785278,-0.003944033,-0.004447344,-0.007770311,-0.010434269,-0.00775112,-0.006544628,-0.004046097,-0.000801088,-0.002532247,-0.003342702,-0.005238668,-0.002022584,-0.002752956,-0.00460606,-0.000277736;-0.007245221,-0.019524401,-0.003838685,-0.006380607,-0.004843375,-0.008619064,-0.007044935,-0.004768416,-0.007593853,-0.01035345,-0.012985006,-0.016108925,0.881968817,-0.014966191,-0.028692186,-0.008895094,-0.007682139,-0.015899787,-0.022930146,-0.00395428,-0.003043654,-0.00216301,-0.00646984,-0.005914392,-0.004144648,-0.004744429,-0.003228868,-0.001188217,-0.001433416,-0.003020028,-0.00652847,-0.002462522,-0.002434378,-0.003673577,-0.000153993;-0.001624521,-0.007541803,-0.003275378,-0.004795688,-0.003534703,-0.006509492,-0.009411145,-0.003076498,-0.008897523,-0.012197487,-0.008340076,-0.0154988,-0.073373935,0.744680266,-0.050641062,-0.019680936,-0.012659562,-0.026380252,-0.024824281,-0.009016472,-0.00772095,-0.004034077,-0.006138558,-0.003157992,-0.003615904,-0.006433764,-0.029225892,-0.003469164,-0.001605106,-0.013030849,-0.012094828,-0.005997799,-0.018637749,-0.007832027,-0.000563808;-0.00410204,-0.005685969,-0.001781085,-0.002564258,-0.002246405,-0.002932554,-0.001908562,-0.001001334,-0.002079093,-0.00330905,-0.003469826,-0.004907434,-0.013748013,-0.004934165,0.707913617,-0.004519906,-0.001567387,-0.004124969,-0.085582923,-0.00506541,-0.004265398,-0.001240564,-0.030257955,-0.040978322,-0.045861866,-0.01030899,-0.003038009,-0.000834248,-0.000506621,-0.002975456,-0.018382085,-0.001002617,-0.001431781,-0.003274886,-0.000108549;-0.00087132,-0.001374437,-0.001146736,-0.005600694,-0.003318185,-0.006306254,-0.003235269,-0.000600324,-0.001911196,-0.002536373,-0.003464874,-0.00708407,-0.003853859,-0.002976786,-0.005140121,0.964869694,-0.001062125,-0.005211929,-0.002254064,-0.001546394,-0.001747089,-0.002784495,-0.001482724,-0.00104417,-0.001046911,-0.001347194,-0.000934863,-0.001208574,-0.001145707,-0.002453572,-0.004021484,-0.003529101,-0.003033489,-0.005775989,-0.00310446;-0.009081911,-0.022670392,-0.011478242,-0.017089786,-0.007334252,-0.01534235,-0.020543639,-0.013318101,-0.027812875,-0.020993118,-0.034978898,-0.026428447,-0.010666821,-0.00961521,-0.008915457,-0.010478783,0.904717144,-0.005058031,-0.01010572,-0.006155833,-0.013097701,-0.022755283,-0.014858419,-0.003903552,-0.003902925,-0.012160405,-0.008326691,-0.004490955,-0.008137596,-0.006163745,-0.014610227,-0.018664248,-0.012785158,-0.015524624,-0.000202115;-0.003522435,-0.008076591,-0.002493561,-0.002580586,-0.002004588,-0.004263754,-0.00390482,-0.003026737,-0.004213893,-0.003552174,-0.00711151,-0.004786255,-0.003328099,-0.003215595,-0.002377941,-0.003207739,-0.025819233,0.963686693,-0.004288705,-0.003948899,-0.004708541,-0.005168582,-0.009545882,-0.003223335,-0.00223004,-0.014653895,-0.011819248,-0.00524021,-0.04270701,-0.005441151,-0.019319997,-0.013172837,-0.00664315,-0.012191179,-0.002272507;-0.004999214,-0.004314665,-0.006290482,-0.005361151,-0.007526875,-0.006009924,-0.004442567,-0.003208364,-0.006064364,-0.006050055,-0.007328912,-0.006000279,-0.005246263,-0.004886112,-0.004684286,-0.006072456,-0.009050393,-0.007751687,0.991295215,-0.005041349,-0.00475228,-0.005282938,-0.01830954,-0.003365995,-0.003095348,-0.007273249,-0.004702153,-0.002445483,-0.001938898,-0.006049782,-0.003957759,-0.003168133,-0.003344806,-0.006572041,-4.10344e-05;-0.033274109,-0.025437731,-0.06083138,-0.052412422,-0.07063672,-0.054182547,-0.048007081,-0.037857409,-0.048440358,-0.048659518,-0.042084866,-0.041921086,-0.046935042,-0.050923297,-0.042809042,-0.050211865,-0.022335918,-0.042745532,-0.03849672,0.96825965,-0.013770085,-0.044347796,-0.022478296,-0.017795362,-0.017897362,-0.019237705,-0.00949573,-0.004901321,-0.00338654,-0.012210227,-0.020413977,-0.010137603,-0.027901013,-0.014408255,-0.000277706;-0.016866456,-0.010363615,-0.029730564,-0.026418014,-0.039812136,-0.020983239,-0.017683634,-0.012941699,-0.022572319,-0.021459859,-0.018936085,-0.015885551,-0.016805312,-0.015968788,-0.018183019,-0.025595169,-0.008175453,-0.02774605,-0.017307877,-0.008626256,0.991593793,-0.026550852,-0.015287208,-0.008963839,-0.008172032,-0.009182348,-0.010189648,-0.003987212,-0.003309402,-0.009465008,-0.007833328,-0.00579732,-0.011636146,-0.012499261,-0.00054259;-0.001393313,-0.003668845,-0.004107609,-0.004443766,-0.004055101,-0.005295087,-0.005667479,-0.001818609,-0.005202447,-0.005778724,-0.006172649,-0.005146335,-0.006480891,-0.006734341,-0.003392431,-0.004549126,-0.004802814,-0.00532428,-0.006680327,-0.009499701,-0.006312435,0.98982731,-0.007916998,-0.006566557,-0.022888783,-0.021706419,-0.006753897,-0.010056031,-0.00244553,-0.013811902,-0.009623849,-0.007192433,-0.008105535,-0.011381746,-8.68578e-05;-0.014278562,-0.026867795,-0.021946654,-0.018822604,-0.020670428,-0.024645721,-0.018275756,-0.033057328,-0.019756661,-0.01722616,-0.035024281,-0.018104643,-0.012171856,-0.009749733,-0.011806681,-0.018251597,-0.025850311,-0.017263857,-0.013871964,-0.018282187,-0.010509661,-0.009953625,0.958640654,-0.018809557,-0.010495543,-0.030631601,-0.010356497,-0.006308048,-0.001776255,-0.006802003,-0.01147471,-0.010367814,-0.007684637,-0.009794841,-0.000628328;-0.002883333,-0.004189358,-0.003979834,-0.003057905,-0.003934542,-0.007419927,-0.001713474,-0.004444114,-0.003136824,-0.00224653,-0.005909739,-0.004022565,-0.001599061,-0.001507568,-0.001652038,-0.002293199,-0.002184121,-0.002649169,-0.001197928,-0.002145616,-0.001271663,-0.001730743,-0.0039945,0.900864963,-0.003089098,-0.006081809,-0.001138594,-0.000684809,-0.000137419,-0.001071062,-0.001481332,-0.001904858,-0.000618081,-0.001039925,-5.72517e-05;-0.000827348,-0.002377983,-0.001600487,-0.001790211,-0.002842036,-0.001386863,-0.00220556,-0.000876691,-0.002058567,-0.001911665,-0.001499468,-0.001485093,-0.001949874,-0.002264823,-0.00177818,-0.001651479,-0.000851503,-0.001254234,-0.002175293,-0.004139558,-0.001730284,-0.001251201,-0.002128905,-0.004231082,0.966735768,-0.020289123,-0.005642899,-0.003480932,-0.00052436,-0.004609185,-0.004776945,-0.002203612,-0.001350245,-0.004166,-1.86254e-05;-0.003326416,-0.006454247,-0.006221039,-0.003887793,-0.004678195,-0.006761236,-0.007003225,-0.00638065,-0.005359105,-0.005077236,-0.00915084,-0.0054031,-0.004541723,-0.003988224,-0.00412748,-0.004691563,-0.004862287,-0.003303466,-0.00769254,-0.019023196,-0.009816826,-0.008199347,-0.038802566,-0.145834168,-0.096861729,0.885141795,-0.003534392,-0.003824913,-0.000700313,-0.004921654,-0.003814497,-0.002490025,-0.003039649,-0.005548926,-5.90197e-05;-0.001987285,-0.005530397,-0.003545457,-0.003993172,-0.004071984,-0.004018786,-0.00996192,-0.002290319,-0.00587807,-0.005061083,-0.004813647,-0.004856203,-0.006219177,-0.006102185,-0.003413534,-0.006233362,-0.005033002,-0.00760662,-0.011328117,-0.017865638,-0.017775498,-0.011042391,-0.014058638,-0.020099096,-0.028673402,-0.021670755,0.911312061,-0.022680563,-0.003693534,-0.020539613,-0.016996708,-0.00811023,-0.010152895,-0.021007572,-0.000122858;-0.018406954,-0.032599027,-0.015680715,-0.021906494,-0.017901536,-0.022088079,-0.021089324,-0.013449048,-0.021183596,-0.01852471,-0.02300697,-0.021175464,-0.01972351,-0.017521746,-0.014241936,-0.021525524,-0.023097485,-0.02036015,-0.026317889,-0.041569572,-0.034394057,-0.023251401,-0.041686042,-0.039651655,-0.038262683,-0.025837524,-0.02295942,0.826583954,-0.050208355,-0.036231189,-0.023216783,-0.013666533,-0.021762876,-0.032639848,-0.003123107;-0.006686241,-0.005457159,-0.004030942,-0.005626681,-0.005620819,-0.00513275,-0.008233864,-0.002364425,-0.004722252,-0.006057503,-0.005572079,-0.005247938,-0.006222115,-0.005338876,-0.003931709,-0.00850786,-0.005912998,-0.012161981,-0.024304526,-0.028650961,-0.041987186,-0.027777052,-0.010571172,-0.026519595,-0.016025324,-0.021236661,-0.012711779,-0.023855012,0.970519393,-0.023604575,-0.010910272,-0.017507472,-0.029537078,-0.028324816,-0.000534995;-0.012445677,-0.031603851,-0.036338496,-0.027974801,-0.025554967,-0.022390712,-0.056988383,-0.015142399,-0.059664451,-0.034056444,-0.031632838,-0.027880791,-0.042974998,-0.059493691,-0.037081434,-0.036528935,-0.036938806,-0.054802151,-0.044494748,-0.056207701,-0.062690773,-0.033720448,-0.040031105,-0.051890466,-0.093765158,-0.066087373,-0.068654391,-0.086551613,-0.033273918,0.867931639,-0.055921887,-0.026620288,-0.050590639,-0.066227706,-0.000183157;-0.001686115,-0.003374494,-0.001798045,-0.001256502,-0.000886649,-0.003119748,-0.003033108,-0.001086152,-0.003083207,-0.002136673,-0.002248369,-0.002184622,-0.0012899,-0.001570612,-0.001206398,-0.002380187,-0.005708817,-0.00141947,-0.002184772,-0.001725663,-0.003472243,-0.00354475,-0.003141373,-0.009411979,-0.010320488,-0.003511018,-0.00277585,-0.001600838,-0.003374508,-0.002778785,0.992443596,-0.0038514,-0.005132847,-0.007587826,-2.45976e-06;-0.000837405,-0.000521545,-0.000334798,-0.000359483,-0.000378462,-0.000261623,-0.000596198,-0.000439618,-0.000791672,-0.000472913,-0.000512544,-0.000475034,-0.000787729,-0.000956195,-0.000460961,-0.000304941,-0.001043432,-0.000455238,-0.000453062,-0.000877146,-0.001812122,-0.000399979,-0.001086015,-0.000350085,-0.001638162,-0.001071646,-0.001721341,-0.001246139,-0.000173368,-0.0020601,-0.004451031,0.993410539,-0.001029746,-0.001391578,-7.12222e-07;-0.002061076,-0.000413464,-0.000402877,-0.000441949,-0.000412586,-0.000364425,-0.000442435,-0.000211542,-0.000444978,-0.000389162,-0.00043821,-0.000369547,-0.00055914,-0.000453355,-0.000299884,-0.000488012,-0.000434559,-0.000544137,-0.000587822,-0.000697499,-0.00049138,-0.001038035,-0.000778636,-0.000593938,-0.000567302,-0.000752563,-0.00075713,-0.000621843,-0.000110096,-0.000794063,-0.00632777,-0.001499277,0.977619242,-0.001676006,-8.80619e-08;-0.002581933,-0.005951961,-0.006306084,-0.00528491,-0.006158931,-0.005984194,-0.013368338,-0.003506261,-0.008385579,-0.006427541,-0.006054525,-0.00721608,-0.006575539,-0.00654436,-0.004254584,-0.006902248,-0.006359514,-0.0062187,-0.009622925,-0.00892464,-0.010530982,-0.013329119,-0.009399214,-0.007334549,-0.008970976,-0.011576019,-0.018476624,-0.010530984,-0.007737447,-0.028776904,-0.015829437,-0.011552978,-0.014960421,0.920789655,-0.000422377;-1.12306e-05,-1.357e-05,-3.13485e-05,-4.09308e-05,-2.699e-05,-3.45605e-05,-3.58591e-05,-1.16021e-05,-3.16394e-05,-3.45246e-05,-2.3004e-05,-3.24389e-05,-2.75784e-05,-2.02194e-05,-3.70828e-05,-3.63046e-05,-1.58638e-05,-8.57338e-05,-0.000126296,-3.62699e-05,-5.40855e-05,-6.78024e-05,-0.000157967,-2.62135e-05,-3.57885e-05,-3.18437e-05,-8.5624e-05,-6.33893e-05,-0.000268572,-7.47766e-05,-8.93421e-05,-5.27179e-05,-0.000132325,-0.000119849,0.999978528;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            8.71602101e-01, -2.88089000e-03, -2.68910601e-01, -3.86902020e-02, -2.98296020e-02,
            -1.32857977e-01, -1.16068700e-02, -3.12973100e-03, -7.08906700e-03, -1.28918350e-02,
            -1.01811400e-03, -3.03137000e-04, -3.03133000e-04, -2.28253000e-04, -1.81488000e-04,
            -1.19703300e-02, -4.78186000e-04, -3.04915000e-03, -4.93111000e-04, -2.19627100e-03,
            -2.38149400e-03, -3.70651430e-02, -6.82396000e-04, -1.97686400e-03, -4.42483000e-04,
            -1.15739800e-03, -1.99273000e-04, -1.76779000e-04, -5.18675000e-04, -1.10539100e-03,
            -1.78707200e-03, -1.89981900e-03, -2.34746000e-03, -2.34285200e-03, -1.30284690e-02
        ],
              [
                  -3.44592600e-03, 9.13546916e-01, -3.43435200e-03, -2.06580500e-03,
                  -1.31667900e-03, -3.56408300e-03, -5.24390700e-03, -4.26213558e-01,
                  -3.23644680e-02, -3.54443700e-03, -7.75344270e-02, -4.16812880e-02,
                  -3.37092700e-03, -2.03672800e-03, -1.48267700e-03, -6.82363300e-03,
                  -9.51042840e-02, -1.80982650e-02, -6.35543000e-04, -1.48654300e-03,
                  -8.57415000e-04, -2.24075000e-03, -6.12124600e-03, -2.91212000e-03,
                  -2.73783000e-03, -3.56269000e-03, -5.09548000e-04, -4.10769000e-04,
                  -1.96359200e-03, -1.03709800e-03, -2.72039900e-03, -3.80213900e-03,
                  -1.50178300e-03, -3.09685600e-03, -5.48802350e-02
              ],
              [
                  -5.43333350e-02, -8.02140000e-04, 8.61354218e-01, -2.30603300e-03,
                  -8.50710370e-02, -1.26228800e-03, -2.79000400e-03, -1.01949600e-03,
                  -9.66361200e-03, -2.45951200e-03, -1.90852300e-03, -9.67204000e-04,
                  -1.17188800e-03, -1.15891800e-03, -8.17001000e-04, -1.55390500e-03,
                  -7.82009000e-04, -1.05108300e-03, -1.69371800e-03, -4.55339000e-03,
                  -4.33724500e-03, -1.59100006e-01, -1.61340300e-03, -7.33783800e-03,
                  -4.58550800e-03, -2.44286300e-03, -1.39984800e-03, -8.30922000e-04,
                  -2.38143000e-04, -2.14520400e-03, -7.87059900e-03, -8.91169400e-03,
                  -1.41551020e-02, -5.67321600e-03, -1.07860600e-03
              ],
              [
                  -2.47360500e-03, -1.42091400e-03, -1.49985100e-03, 7.19721144e-01,
                  -5.56681820e-02, -5.81654500e-03, -7.12646700e-03, -5.33107000e-04,
                  -4.20430100e-03, -1.98742350e-02, -4.93941200e-03, -1.58239300e-03,
                  -2.34583400e-03, -2.13014200e-03, -6.27864300e-03, -2.41874830e-02,
                  -6.11740000e-04, -2.57056000e-03, -1.77015200e-03, -2.84509600e-03,
                  -3.47016000e-03, -3.06128300e-03, -1.70316100e-03, -3.11178900e-03,
                  -1.13452900e-03, -1.70351700e-03, -3.04825000e-03, -6.66469000e-04,
                  -2.63628000e-04, -1.27928400e-03, -3.35470600e-03, -8.61130000e-04,
                  -3.57036700e-03, -4.94858000e-03, -4.34805000e-04
              ],
              [
                  -2.37830000e-04, -2.96835000e-04, -2.23715000e-04, -7.25957000e-03,
                  8.07483255e-01, -1.14425500e-03, -1.36584300e-03, -1.20687000e-04,
                  -2.88560000e-04, -1.09537100e-03, -6.48439000e-04, -4.36689000e-04,
                  -4.39169000e-04, -3.98534000e-04, -1.28799500e-03, -3.43177200e-03,
                  -1.91620000e-04, -1.77943000e-04, -4.51412000e-04, -5.61101000e-04,
                  -5.51029000e-04, -2.28630000e-04, -2.18574000e-04, -2.15384000e-04,
                  -1.47444000e-04, -1.66611000e-04, -7.15269000e-04, -7.04103000e-05,
                  -2.16715000e-05, -1.60175000e-04, -9.22190000e-04, -1.51426000e-04,
                  -1.69642000e-04, -7.27576000e-04, -1.19889000e-05
              ],
              [
                  -1.62733300e-03, -2.05764000e-03, -1.54080600e-03, -1.57158600e-03,
                  -2.22415500e-03, 8.07390959e-01, -1.09197040e-02, -4.44378000e-04,
                  -1.58412000e-03, -2.70098800e-03, -6.70570500e-03, -2.61859300e-03,
                  -2.86223800e-03, -1.85520800e-03, -3.04649900e-03, -7.13011050e-02,
                  -7.95723000e-04, -3.44173520e-02, -7.83804000e-04, -1.61832000e-03,
                  -1.48716200e-03, -2.25525500e-03, -1.31139700e-03, -5.28664000e-04,
                  -3.85784000e-04, -4.20015400e-03, -7.61861000e-04, -6.03439000e-04,
                  -2.17055700e-03, -9.15428000e-04, -1.40747700e-03, -1.16979800e-03,
                  -1.01607300e-03, -2.79315700e-03, -2.58529000e-04
              ],
              [
                  -2.83808700e-03, -3.39603200e-03, -2.45744650e-02, -1.05778290e-02,
                  -1.28079400e-02, -1.24075440e-02, 7.63693789e-01, -1.70674400e-03,
                  -1.94191920e-02, -1.85863570e-02, -2.28527500e-02, -5.95629200e-03,
                  -1.00964350e-02, -1.51771240e-02, -6.09351600e-03, -2.15158790e-02,
                  -3.57708700e-03, -5.35528600e-03, -7.87312900e-03, -1.47503220e-02,
                  -1.43770400e-02, -1.06967790e-02, -6.05459000e-03, -4.15106600e-03,
                  -7.16235500e-03, -1.61190690e-02, -1.20077720e-02, -1.57563540e-02,
                  -2.71130000e-03, -2.26191830e-02, -1.65478940e-02, -1.67164180e-02,
                  -1.00637160e-02, -2.54481840e-02, -5.94557000e-04
              ],
              [
                  -1.24424100e-02, -1.31492220e-02, -3.56014200e-03, -4.63773300e-03,
                  -3.13684700e-03, -4.61971900e-03, -4.45787200e-03, 9.55350204e-01,
                  -2.70298600e-02, -8.80552900e-03, -1.62146260e-02, -9.01217600e-03,
                  -3.70490700e-03, -2.94038400e-03, -1.98777900e-03, -4.28700600e-03,
                  -1.98519680e-02, -1.27651960e-02, -4.37867500e-03, -5.93602700e-03,
                  -5.07397600e-03, -3.72919700e-03, -5.06329720e-02, -5.07350360e-02,
                  -5.53679060e-02, -1.38512370e-02, -3.54921000e-03, -1.25278200e-03,
                  -1.21337500e-03, -4.46406700e-03, -7.57968400e-03, -2.97212200e-03,
                  -3.53755200e-03, -6.62985700e-03, -6.79490000e-05
              ],
              [
                  -4.07645500e-02, -1.40358240e-02, -1.09413920e-02, -7.09275620e-02,
                  -3.33142520e-02, -2.59778000e-02, -3.40814780e-02, -1.43772920e-02,
                  7.67144994e-01, -2.01560220e-01, -3.02286700e-02, -1.55752750e-02,
                  -1.27701100e-02, -1.91341010e-02, -1.28375340e-02, -3.20997370e-02,
                  -5.87645500e-03, -1.00939580e-02, -6.92965700e-03, -3.42980600e-03,
                  -2.52187000e-03, -4.38653400e-03, -3.25119600e-03, -2.62075100e-03,
                  -2.15496300e-03, -3.47806800e-03, -1.47210600e-03, -9.06522000e-04,
                  -1.54416100e-03, -4.30980300e-03, -8.23443100e-03, -3.75991800e-03,
                  -6.39578500e-02, -9.26720900e-03, -1.20306000e-04
              ],
              [
                  -4.53588500e-03, -9.08180400e-03, -1.49746280e-02, -8.37167500e-03,
                  -3.48259620e-02, -9.53368400e-03, -1.40092740e-02, -1.89949500e-03,
                  -1.81862690e-02, 8.89249681e-01, -1.08403700e-02, -7.53967100e-03,
                  -2.63607250e-02, -2.59931180e-02, -3.61096170e-02, -3.83373180e-02,
                  -2.28796200e-03, -1.81231840e-02, -1.89767290e-02, -4.60447400e-03,
                  -5.15765200e-03, -4.17514900e-03, -1.12065290e-02, -2.24513900e-03,
                  -2.44333500e-03, -6.13387300e-03, -3.77512900e-03, -7.41477000e-04,
                  -9.87898000e-04, -2.51471100e-03, -3.04566500e-03, -9.14915000e-04,
                  -5.55556500e-03, -3.58720400e-03, -8.36239000e-05
              ],
              [
                  -1.89473300e-03, -5.02504400e-03, -5.54977200e-03, -2.00575900e-03,
                  -1.72043900e-03, -9.15505700e-03, -1.41341700e-03, -2.16118500e-03,
                  -6.47018400e-03, -6.10299200e-03, 8.90835862e-01, -9.64538000e-03,
                  -5.60835400e-03, -1.17736150e-02, -7.12507500e-03, -6.69937400e-03,
                  -1.89966700e-03, -8.00919040e-02, -2.92303100e-03, -1.47965300e-03,
                  -1.01181900e-03, -3.62702400e-03, -1.32361900e-03, -5.05460000e-04,
                  -4.81673000e-04, -1.33852600e-03, -1.12491900e-03, -1.73390000e-04,
                  -2.23267500e-03, -1.00370800e-03, -1.51277400e-03, -1.69499700e-03,
                  -2.04259200e-03, -1.85607500e-03, -6.83141000e-05
              ],
              [
                  -4.98721800e-03, -2.65465750e-02, -1.50638250e-02, -5.73767800e-03,
                  -1.02026290e-02, -2.69213530e-02, -9.16149900e-03, -6.24960300e-03,
                  -1.74866990e-02, -2.36213020e-02, -3.18615460e-02, 6.82249547e-01,
                  -1.61494400e-01, -7.52186290e-02, -1.00445259e-01, -1.11083954e-01,
                  -7.56722700e-03, -8.47903180e-02, -1.97290370e-02, -4.78527800e-03,
                  -3.94403300e-03, -4.44734400e-03, -7.77031100e-03, -1.04342690e-02,
                  -7.75112000e-03, -6.54462800e-03, -4.04609700e-03, -8.01088000e-04,
                  -2.53224700e-03, -3.34270200e-03, -5.23866800e-03, -2.02258400e-03,
                  -2.75295600e-03, -4.60606000e-03, -2.77736000e-04
              ],
              [
                  -7.24522100e-03, -1.95244010e-02, -3.83868500e-03, -6.38060700e-03,
                  -4.84337500e-03, -8.61906400e-03, -7.04493500e-03, -4.76841600e-03,
                  -7.59385300e-03, -1.03534500e-02, -1.29850060e-02, -1.61089250e-02,
                  8.81968817e-01, -1.49661910e-02, -2.86921860e-02, -8.89509400e-03,
                  -7.68213900e-03, -1.58997870e-02, -2.29301460e-02, -3.95428000e-03,
                  -3.04365400e-03, -2.16301000e-03, -6.46984000e-03, -5.91439200e-03,
                  -4.14464800e-03, -4.74442900e-03, -3.22886800e-03, -1.18821700e-03,
                  -1.43341600e-03, -3.02002800e-03, -6.52847000e-03, -2.46252200e-03,
                  -2.43437800e-03, -3.67357700e-03, -1.53993000e-04
              ],
              [
                  -1.62452100e-03, -7.54180300e-03, -3.27537800e-03, -4.79568800e-03,
                  -3.53470300e-03, -6.50949200e-03, -9.41114500e-03, -3.07649800e-03,
                  -8.89752300e-03, -1.21974870e-02, -8.34007600e-03, -1.54988000e-02,
                  -7.33739350e-02, 7.44680266e-01, -5.06410620e-02, -1.96809360e-02,
                  -1.26595620e-02, -2.63802520e-02, -2.48242810e-02, -9.01647200e-03,
                  -7.72095000e-03, -4.03407700e-03, -6.13855800e-03, -3.15799200e-03,
                  -3.61590400e-03, -6.43376400e-03, -2.92258920e-02, -3.46916400e-03,
                  -1.60510600e-03, -1.30308490e-02, -1.20948280e-02, -5.99779900e-03,
                  -1.86377490e-02, -7.83202700e-03, -5.63808000e-04
              ],
              [
                  -4.10204000e-03, -5.68596900e-03, -1.78108500e-03, -2.56425800e-03,
                  -2.24640500e-03, -2.93255400e-03, -1.90856200e-03, -1.00133400e-03,
                  -2.07909300e-03, -3.30905000e-03, -3.46982600e-03, -4.90743400e-03,
                  -1.37480130e-02, -4.93416500e-03, 7.07913617e-01, -4.51990600e-03,
                  -1.56738700e-03, -4.12496900e-03, -8.55829230e-02, -5.06541000e-03,
                  -4.26539800e-03, -1.24056400e-03, -3.02579550e-02, -4.09783220e-02,
                  -4.58618660e-02, -1.03089900e-02, -3.03800900e-03, -8.34248000e-04,
                  -5.06621000e-04, -2.97545600e-03, -1.83820850e-02, -1.00261700e-03,
                  -1.43178100e-03, -3.27488600e-03, -1.08549000e-04
              ],
              [
                  -8.71320000e-04, -1.37443700e-03, -1.14673600e-03, -5.60069400e-03,
                  -3.31818500e-03, -6.30625400e-03, -3.23526900e-03, -6.00324000e-04,
                  -1.91119600e-03, -2.53637300e-03, -3.46487400e-03, -7.08407000e-03,
                  -3.85385900e-03, -2.97678600e-03, -5.14012100e-03, 9.64869694e-01,
                  -1.06212500e-03, -5.21192900e-03, -2.25406400e-03, -1.54639400e-03,
                  -1.74708900e-03, -2.78449500e-03, -1.48272400e-03, -1.04417000e-03,
                  -1.04691100e-03, -1.34719400e-03, -9.34863000e-04, -1.20857400e-03,
                  -1.14570700e-03, -2.45357200e-03, -4.02148400e-03, -3.52910100e-03,
                  -3.03348900e-03, -5.77598900e-03, -3.10446000e-03
              ],
              [
                  -9.08191100e-03, -2.26703920e-02, -1.14782420e-02, -1.70897860e-02,
                  -7.33425200e-03, -1.53423500e-02, -2.05436390e-02, -1.33181010e-02,
                  -2.78128750e-02, -2.09931180e-02, -3.49788980e-02, -2.64284470e-02,
                  -1.06668210e-02, -9.61521000e-03, -8.91545700e-03, -1.04787830e-02,
                  9.04717144e-01, -5.05803100e-03, -1.01057200e-02, -6.15583300e-03,
                  -1.30977010e-02, -2.27552830e-02, -1.48584190e-02, -3.90355200e-03,
                  -3.90292500e-03, -1.21604050e-02, -8.32669100e-03, -4.49095500e-03,
                  -8.13759600e-03, -6.16374500e-03, -1.46102270e-02, -1.86642480e-02,
                  -1.27851580e-02, -1.55246240e-02, -2.02115000e-04
              ],
              [
                  -3.52243500e-03, -8.07659100e-03, -2.49356100e-03, -2.58058600e-03,
                  -2.00458800e-03, -4.26375400e-03, -3.90482000e-03, -3.02673700e-03,
                  -4.21389300e-03, -3.55217400e-03, -7.11151000e-03, -4.78625500e-03,
                  -3.32809900e-03, -3.21559500e-03, -2.37794100e-03, -3.20773900e-03,
                  -2.58192330e-02, 9.63686693e-01, -4.28870500e-03, -3.94889900e-03,
                  -4.70854100e-03, -5.16858200e-03, -9.54588200e-03, -3.22333500e-03,
                  -2.23004000e-03, -1.46538950e-02, -1.18192480e-02, -5.24021000e-03,
                  -4.27070100e-02, -5.44115100e-03, -1.93199970e-02, -1.31728370e-02,
                  -6.64315000e-03, -1.21911790e-02, -2.27250700e-03
              ],
              [
                  -4.99921400e-03, -4.31466500e-03, -6.29048200e-03, -5.36115100e-03,
                  -7.52687500e-03, -6.00992400e-03, -4.44256700e-03, -3.20836400e-03,
                  -6.06436400e-03, -6.05005500e-03, -7.32891200e-03, -6.00027900e-03,
                  -5.24626300e-03, -4.88611200e-03, -4.68428600e-03, -6.07245600e-03,
                  -9.05039300e-03, -7.75168700e-03, 9.91295215e-01, -5.04134900e-03,
                  -4.75228000e-03, -5.28293800e-03, -1.83095400e-02, -3.36599500e-03,
                  -3.09534800e-03, -7.27324900e-03, -4.70215300e-03, -2.44548300e-03,
                  -1.93889800e-03, -6.04978200e-03, -3.95775900e-03, -3.16813300e-03,
                  -3.34480600e-03, -6.57204100e-03, -4.10344000e-05
              ],
              [
                  -3.32741090e-02, -2.54377310e-02, -6.08313800e-02, -5.24124220e-02,
                  -7.06367200e-02, -5.41825470e-02, -4.80070810e-02, -3.78574090e-02,
                  -4.84403580e-02, -4.86595180e-02, -4.20848660e-02, -4.19210860e-02,
                  -4.69350420e-02, -5.09232970e-02, -4.28090420e-02, -5.02118650e-02,
                  -2.23359180e-02, -4.27455320e-02, -3.84967200e-02, 9.68259650e-01,
                  -1.37700850e-02, -4.43477960e-02, -2.24782960e-02, -1.77953620e-02,
                  -1.78973620e-02, -1.92377050e-02, -9.49573000e-03, -4.90132100e-03,
                  -3.38654000e-03, -1.22102270e-02, -2.04139770e-02, -1.01376030e-02,
                  -2.79010130e-02, -1.44082550e-02, -2.77706000e-04
              ],
              [
                  -1.68664560e-02, -1.03636150e-02, -2.97305640e-02, -2.64180140e-02,
                  -3.98121360e-02, -2.09832390e-02, -1.76836340e-02, -1.29416990e-02,
                  -2.25723190e-02, -2.14598590e-02, -1.89360850e-02, -1.58855510e-02,
                  -1.68053120e-02, -1.59687880e-02, -1.81830190e-02, -2.55951690e-02,
                  -8.17545300e-03, -2.77460500e-02, -1.73078770e-02, -8.62625600e-03,
                  9.91593793e-01, -2.65508520e-02, -1.52872080e-02, -8.96383900e-03,
                  -8.17203200e-03, -9.18234800e-03, -1.01896480e-02, -3.98721200e-03,
                  -3.30940200e-03, -9.46500800e-03, -7.83332800e-03, -5.79732000e-03,
                  -1.16361460e-02, -1.24992610e-02, -5.42590000e-04
              ],
              [
                  -1.39331300e-03, -3.66884500e-03, -4.10760900e-03, -4.44376600e-03,
                  -4.05510100e-03, -5.29508700e-03, -5.66747900e-03, -1.81860900e-03,
                  -5.20244700e-03, -5.77872400e-03, -6.17264900e-03, -5.14633500e-03,
                  -6.48089100e-03, -6.73434100e-03, -3.39243100e-03, -4.54912600e-03,
                  -4.80281400e-03, -5.32428000e-03, -6.68032700e-03, -9.49970100e-03,
                  -6.31243500e-03, 9.89827310e-01, -7.91699800e-03, -6.56655700e-03,
                  -2.28887830e-02, -2.17064190e-02, -6.75389700e-03, -1.00560310e-02,
                  -2.44553000e-03, -1.38119020e-02, -9.62384900e-03, -7.19243300e-03,
                  -8.10553500e-03, -1.13817460e-02, -8.68578000e-05
              ],
              [
                  -1.42785620e-02, -2.68677950e-02, -2.19466540e-02, -1.88226040e-02,
                  -2.06704280e-02, -2.46457210e-02, -1.82757560e-02, -3.30573280e-02,
                  -1.97566610e-02, -1.72261600e-02, -3.50242810e-02, -1.81046430e-02,
                  -1.21718560e-02, -9.74973300e-03, -1.18066810e-02, -1.82515970e-02,
                  -2.58503110e-02, -1.72638570e-02, -1.38719640e-02, -1.82821870e-02,
                  -1.05096610e-02, -9.95362500e-03, 9.58640654e-01, -1.88095570e-02,
                  -1.04955430e-02, -3.06316010e-02, -1.03564970e-02, -6.30804800e-03,
                  -1.77625500e-03, -6.80200300e-03, -1.14747100e-02, -1.03678140e-02,
                  -7.68463700e-03, -9.79484100e-03, -6.28328000e-04
              ],
              [
                  -2.88333300e-03, -4.18935800e-03, -3.97983400e-03, -3.05790500e-03,
                  -3.93454200e-03, -7.41992700e-03, -1.71347400e-03, -4.44411400e-03,
                  -3.13682400e-03, -2.24653000e-03, -5.90973900e-03, -4.02256500e-03,
                  -1.59906100e-03, -1.50756800e-03, -1.65203800e-03, -2.29319900e-03,
                  -2.18412100e-03, -2.64916900e-03, -1.19792800e-03, -2.14561600e-03,
                  -1.27166300e-03, -1.73074300e-03, -3.99450000e-03, 9.00864963e-01,
                  -3.08909800e-03, -6.08180900e-03, -1.13859400e-03, -6.84809000e-04,
                  -1.37419000e-04, -1.07106200e-03, -1.48133200e-03, -1.90485800e-03,
                  -6.18081000e-04, -1.03992500e-03, -5.72517000e-05
              ],
              [
                  -8.27348000e-04, -2.37798300e-03, -1.60048700e-03, -1.79021100e-03,
                  -2.84203600e-03, -1.38686300e-03, -2.20556000e-03, -8.76691000e-04,
                  -2.05856700e-03, -1.91166500e-03, -1.49946800e-03, -1.48509300e-03,
                  -1.94987400e-03, -2.26482300e-03, -1.77818000e-03, -1.65147900e-03,
                  -8.51503000e-04, -1.25423400e-03, -2.17529300e-03, -4.13955800e-03,
                  -1.73028400e-03, -1.25120100e-03, -2.12890500e-03, -4.23108200e-03,
                  9.66735768e-01, -2.02891230e-02, -5.64289900e-03, -3.48093200e-03,
                  -5.24360000e-04, -4.60918500e-03, -4.77694500e-03, -2.20361200e-03,
                  -1.35024500e-03, -4.16600000e-03, -1.86254000e-05
              ],
              [
                  -3.32641600e-03, -6.45424700e-03, -6.22103900e-03, -3.88779300e-03,
                  -4.67819500e-03, -6.76123600e-03, -7.00322500e-03, -6.38065000e-03,
                  -5.35910500e-03, -5.07723600e-03, -9.15084000e-03, -5.40310000e-03,
                  -4.54172300e-03, -3.98822400e-03, -4.12748000e-03, -4.69156300e-03,
                  -4.86228700e-03, -3.30346600e-03, -7.69254000e-03, -1.90231960e-02,
                  -9.81682600e-03, -8.19934700e-03, -3.88025660e-02, -1.45834168e-01,
                  -9.68617290e-02, 8.85141795e-01, -3.53439200e-03, -3.82491300e-03,
                  -7.00313000e-04, -4.92165400e-03, -3.81449700e-03, -2.49002500e-03,
                  -3.03964900e-03, -5.54892600e-03, -5.90197000e-05
              ],
              [
                  -1.98728500e-03, -5.53039700e-03, -3.54545700e-03, -3.99317200e-03,
                  -4.07198400e-03, -4.01878600e-03, -9.96192000e-03, -2.29031900e-03,
                  -5.87807000e-03, -5.06108300e-03, -4.81364700e-03, -4.85620300e-03,
                  -6.21917700e-03, -6.10218500e-03, -3.41353400e-03, -6.23336200e-03,
                  -5.03300200e-03, -7.60662000e-03, -1.13281170e-02, -1.78656380e-02,
                  -1.77754980e-02, -1.10423910e-02, -1.40586380e-02, -2.00990960e-02,
                  -2.86734020e-02, -2.16707550e-02, 9.11312061e-01, -2.26805630e-02,
                  -3.69353400e-03, -2.05396130e-02, -1.69967080e-02, -8.11023000e-03,
                  -1.01528950e-02, -2.10075720e-02, -1.22858000e-04
              ],
              [
                  -1.84069540e-02, -3.25990270e-02, -1.56807150e-02, -2.19064940e-02,
                  -1.79015360e-02, -2.20880790e-02, -2.10893240e-02, -1.34490480e-02,
                  -2.11835960e-02, -1.85247100e-02, -2.30069700e-02, -2.11754640e-02,
                  -1.97235100e-02, -1.75217460e-02, -1.42419360e-02, -2.15255240e-02,
                  -2.30974850e-02, -2.03601500e-02, -2.63178890e-02, -4.15695720e-02,
                  -3.43940570e-02, -2.32514010e-02, -4.16860420e-02, -3.96516550e-02,
                  -3.82626830e-02, -2.58375240e-02, -2.29594200e-02, 8.26583954e-01,
                  -5.02083550e-02, -3.62311890e-02, -2.32167830e-02, -1.36665330e-02,
                  -2.17628760e-02, -3.26398480e-02, -3.12310700e-03
              ],
              [
                  -6.68624100e-03, -5.45715900e-03, -4.03094200e-03, -5.62668100e-03,
                  -5.62081900e-03, -5.13275000e-03, -8.23386400e-03, -2.36442500e-03,
                  -4.72225200e-03, -6.05750300e-03, -5.57207900e-03, -5.24793800e-03,
                  -6.22211500e-03, -5.33887600e-03, -3.93170900e-03, -8.50786000e-03,
                  -5.91299800e-03, -1.21619810e-02, -2.43045260e-02, -2.86509610e-02,
                  -4.19871860e-02, -2.77770520e-02, -1.05711720e-02, -2.65195950e-02,
                  -1.60253240e-02, -2.12366610e-02, -1.27117790e-02, -2.38550120e-02,
                  9.70519393e-01, -2.36045750e-02, -1.09102720e-02, -1.75074720e-02,
                  -2.95370780e-02, -2.83248160e-02, -5.34995000e-04
              ],
              [
                  -1.24456770e-02, -3.16038510e-02, -3.63384960e-02, -2.79748010e-02,
                  -2.55549670e-02, -2.23907120e-02, -5.69883830e-02, -1.51423990e-02,
                  -5.96644510e-02, -3.40564440e-02, -3.16328380e-02, -2.78807910e-02,
                  -4.29749980e-02, -5.94936910e-02, -3.70814340e-02, -3.65289350e-02,
                  -3.69388060e-02, -5.48021510e-02, -4.44947480e-02, -5.62077010e-02,
                  -6.26907730e-02, -3.37204480e-02, -4.00311050e-02, -5.18904660e-02,
                  -9.37651580e-02, -6.60873730e-02, -6.86543910e-02, -8.65516130e-02,
                  -3.32739180e-02, 8.67931639e-01, -5.59218870e-02, -2.66202880e-02,
                  -5.05906390e-02, -6.62277060e-02, -1.83157000e-04
              ],
              [
                  -1.68611500e-03, -3.37449400e-03, -1.79804500e-03, -1.25650200e-03,
                  -8.86649000e-04, -3.11974800e-03, -3.03310800e-03, -1.08615200e-03,
                  -3.08320700e-03, -2.13667300e-03, -2.24836900e-03, -2.18462200e-03,
                  -1.28990000e-03, -1.57061200e-03, -1.20639800e-03, -2.38018700e-03,
                  -5.70881700e-03, -1.41947000e-03, -2.18477200e-03, -1.72566300e-03,
                  -3.47224300e-03, -3.54475000e-03, -3.14137300e-03, -9.41197900e-03,
                  -1.03204880e-02, -3.51101800e-03, -2.77585000e-03, -1.60083800e-03,
                  -3.37450800e-03, -2.77878500e-03, 9.92443596e-01, -3.85140000e-03,
                  -5.13284700e-03, -7.58782600e-03, -2.45976000e-06
              ],
              [
                  -8.37405000e-04, -5.21545000e-04, -3.34798000e-04, -3.59483000e-04,
                  -3.78462000e-04, -2.61623000e-04, -5.96198000e-04, -4.39618000e-04,
                  -7.91672000e-04, -4.72913000e-04, -5.12544000e-04, -4.75034000e-04,
                  -7.87729000e-04, -9.56195000e-04, -4.60961000e-04, -3.04941000e-04,
                  -1.04343200e-03, -4.55238000e-04, -4.53062000e-04, -8.77146000e-04,
                  -1.81212200e-03, -3.99979000e-04, -1.08601500e-03, -3.50085000e-04,
                  -1.63816200e-03, -1.07164600e-03, -1.72134100e-03, -1.24613900e-03,
                  -1.73368000e-04, -2.06010000e-03, -4.45103100e-03, 9.93410539e-01,
                  -1.02974600e-03, -1.39157800e-03, -7.12222000e-07
              ],
              [
                  -2.06107600e-03, -4.13464000e-04, -4.02877000e-04, -4.41949000e-04,
                  -4.12586000e-04, -3.64425000e-04, -4.42435000e-04, -2.11542000e-04,
                  -4.44978000e-04, -3.89162000e-04, -4.38210000e-04, -3.69547000e-04,
                  -5.59140000e-04, -4.53355000e-04, -2.99884000e-04, -4.88012000e-04,
                  -4.34559000e-04, -5.44137000e-04, -5.87822000e-04, -6.97499000e-04,
                  -4.91380000e-04, -1.03803500e-03, -7.78636000e-04, -5.93938000e-04,
                  -5.67302000e-04, -7.52563000e-04, -7.57130000e-04, -6.21843000e-04,
                  -1.10096000e-04, -7.94063000e-04, -6.32777000e-03, -1.49927700e-03,
                  9.77619242e-01, -1.67600600e-03, -8.80619000e-08
              ],
              [
                  -2.58193300e-03, -5.95196100e-03, -6.30608400e-03, -5.28491000e-03,
                  -6.15893100e-03, -5.98419400e-03, -1.33683380e-02, -3.50626100e-03,
                  -8.38557900e-03, -6.42754100e-03, -6.05452500e-03, -7.21608000e-03,
                  -6.57553900e-03, -6.54436000e-03, -4.25458400e-03, -6.90224800e-03,
                  -6.35951400e-03, -6.21870000e-03, -9.62292500e-03, -8.92464000e-03,
                  -1.05309820e-02, -1.33291190e-02, -9.39921400e-03, -7.33454900e-03,
                  -8.97097600e-03, -1.15760190e-02, -1.84766240e-02, -1.05309840e-02,
                  -7.73744700e-03, -2.87769040e-02, -1.58294370e-02, -1.15529780e-02,
                  -1.49604210e-02, 9.20789655e-01, -4.22377000e-04
              ],
              [
                  -1.12306000e-05, -1.35700000e-05, -3.13485000e-05, -4.09308000e-05,
                  -2.69900000e-05, -3.45605000e-05, -3.58591000e-05, -1.16021000e-05,
                  -3.16394000e-05, -3.45246000e-05, -2.30040000e-05, -3.24389000e-05,
                  -2.75784000e-05, -2.02194000e-05, -3.70828000e-05, -3.63046000e-05,
                  -1.58638000e-05, -8.57338000e-05, -1.26296000e-04, -3.62699000e-05,
                  -5.40855000e-05, -6.78024000e-05, -1.57967000e-04, -2.62135000e-05,
                  -3.57885000e-05, -3.18437000e-05, -8.56240000e-05, -6.33893000e-05,
                  -2.68572000e-04, -7.47766000e-05, -8.93421000e-05, -5.27179000e-05,
                  -1.32325000e-04, -1.19849000e-04, 9.99978528e-01
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def ia_matrix_1998():
    """
    Real Name: b'ia matrix 1998'
    Original Eqn: b'0.8700358,-0.002804855,-0.267820482,-0.039799397,-0.030843153,-0.135661811,-0.011784677,-0.003481402,-0.007091672,-0.014106851,-0.001043886,-0.000303774,-0.00031383,-0.000221246,-0.000181211,-0.011167844,-0.00053267,-0.00480767,-0.000492935,-0.00236285,-0.002495076,-0.038593368,-0.000725217,-0.001927537,-0.000466472,-0.002139816,-0.000215559,-0.000180183,-0.000536462,-0.000978037,-0.001876873,-0.002030631,-0.002400363,-0.002396953,-0.015968863;-0.003201955,0.917243041,-0.003023835,-0.001926037,-0.001159831,-0.003509954,-0.004949395,-0.408844307,-0.037420344,-0.003585594,-0.076021532,-0.041252505,-0.00311976,-0.001795111,-0.001436004,-0.006305932,-0.094836026,-0.019218167,-0.000568977,-0.00128875,-0.000882285,-0.001992548,-0.005291007,-0.003446641,-0.00249122,-0.002961295,-0.000482434,-0.00034738,-0.00225567,-0.000899979,-0.002405409,-0.003282405,-0.001277066,-0.002454793,-0.067266147;-0.053945559,-0.000780719,0.859733397,-0.002283975,-0.083867797,-0.001240097,-0.002730816,-0.00116458,-0.009708145,-0.002454855,-0.00188054,-0.000962687,-0.001185194,-0.001108984,-0.00082807,-0.001579964,-0.000786752,-0.001051018,-0.001683322,-0.004611152,-0.004259451,-0.157726913,-0.001640345,-0.007861478,-0.004674062,-0.002416126,-0.001425036,-0.000841402,-0.000240109,-0.001940329,-0.007981599,-0.009073252,-0.014269226,-0.005840659,-0.001322036;-0.002364778,-0.001626461,-0.001484416,0.724373891,-0.054897349,-0.005470347,-0.007047931,-0.000635456,-0.004163119,-0.019222342,-0.00510942,-0.001605478,-0.00247594,-0.002051176,-0.006177075,-0.026137879,-0.000598463,-0.002603699,-0.001757203,-0.00284516,-0.003474486,-0.002910035,-0.001690845,-0.002772505,-0.001180663,-0.001767312,-0.003123462,-0.000652776,-0.000286592,-0.001252896,-0.003593158,-0.000912808,-0.003600436,-0.005037282,-0.000532936;-0.000226326,-0.000269802,-0.000212412,-0.006609095,0.809717565,-0.000968683,-0.001313351,-0.000127019,-0.000285108,-0.001170884,-0.000655225,-0.000423792,-0.000448146,-0.000372801,-0.001303479,-0.003367539,-0.000181817,-0.000181278,-0.000442559,-0.000507054,-0.000529929,-0.00021716,-0.000202074,-0.000195974,-0.000141969,-0.00016946,-0.000681859,-6.66719e-05,-1.7912e-05,-0.000146136,-0.0009385,-0.000150543,-0.000175482,-0.000705979,-1.46947e-05;-0.001691278,-0.002149282,-0.001589249,-0.001486382,-0.002014724,0.803664081,-0.010755123,-0.000431923,-0.001516646,-0.002752336,-0.006416038,-0.002703648,-0.002958343,-0.00180006,-0.002879603,-0.073616692,-0.00081001,-0.03311746,-0.000790533,-0.001638322,-0.001556927,-0.002149602,-0.001312851,-0.000536127,-0.000401538,-0.003944241,-0.000734393,-0.000552113,-0.002342862,-0.000893368,-0.001426014,-0.00153421,-0.001026749,-0.002673,-0.000316876;-0.002852114,-0.003319801,-0.024340169,-0.010439175,-0.012900988,-0.012538151,0.766939573,-0.002085919,-0.019116589,-0.018659144,-0.022974273,-0.006101402,-0.009841157,-0.014602322,-0.006116385,-0.02279696,-0.003618252,-0.005322291,-0.007891466,-0.014571169,-0.0141591,-0.010211865,-0.006250729,-0.003894828,-0.007127261,-0.015800665,-0.012176193,-0.015358073,-0.002852131,-0.02227272,-0.017035994,-0.017291088,-0.010153875,-0.025819484,-0.000728743;-0.011861662,-0.013558624,-0.003598825,-0.004237167,-0.00299286,-0.004568395,-0.004364292,0.953570708,-0.026103148,-0.007969418,-0.01566838,-0.00915013,-0.003605183,-0.002744819,-0.001932136,-0.004287694,-0.018666843,-0.012973967,-0.004338122,-0.005732043,-0.004850306,-0.0034919,-0.05074551,-0.053976846,-0.054147507,-0.014539026,-0.003562089,-0.001271854,-0.001434467,-0.004397017,-0.007545161,-0.002917094,-0.003334198,-0.006371888,-8.32844e-05;-0.040480086,-0.013988896,-0.011109749,-0.06989172,-0.034040612,-0.026885318,-0.03450225,-0.015756109,0.771435562,-0.199015311,-0.030525524,-0.01575755,-0.012816435,-0.018672579,-0.013089615,-0.03370671,-0.006256753,-0.010582359,-0.006987183,-0.003563942,-0.002602077,-0.004406673,-0.003415609,-0.00280186,-0.002311384,-0.003779357,-0.001495084,-0.000954481,-0.001805514,-0.004461218,-0.008578153,-0.00368278,-0.064307353,-0.009427967,-0.000147458;-0.004679359,-0.008991199,-0.015223745,-0.008568781,-0.033845041,-0.009730358,-0.014457338,-0.002134146,-0.018497946,0.887675834,-0.01118561,-0.00770515,-0.026642186,-0.026184421,-0.035878184,-0.041267397,-0.002378119,-0.018287715,-0.018149361,-0.004628435,-0.005236266,-0.004174329,-0.011229933,-0.002701384,-0.002599334,-0.006350341,-0.003775668,-0.000728513,-0.001132509,-0.002542562,-0.003138204,-0.000924553,-0.005831525,-0.00340814,-0.000102497;-0.00192553,-0.005132844,-0.005403305,-0.001972581,-0.001678155,-0.008977378,-0.001374487,-0.002092161,-0.00637819,-0.006069414,0.890309276,-0.00980534,-0.005624362,-0.011363228,-0.006866145,-0.006952334,-0.001984199,-0.078074119,-0.002878311,-0.001443852,-0.001013216,-0.003555375,-0.0012834,-0.000574259,-0.000516091,-0.001385454,-0.001087272,-0.000176631,-0.002299052,-0.000958448,-0.001466184,-0.001635488,-0.002034832,-0.001803794,-8.37319e-05;-0.004814641,-0.025156514,-0.014837982,-0.005617969,-0.009700872,-0.026866734,-0.009263716,-0.006672975,-0.017580003,-0.023900599,-0.032233052,0.68557401,-0.159608119,-0.072836617,-0.100655544,-0.118647079,-0.00785064,-0.085121908,-0.019392239,-0.004654537,-0.003973162,-0.004412057,-0.007712548,-0.009144893,-0.007968593,-0.006643226,-0.004125657,-0.000788282,-0.002933552,-0.003300922,-0.005252349,-0.001908137,-0.002725887,-0.004474591,-0.000340419;-0.007019778,-0.018800052,-0.003744205,-0.006266292,-0.004775775,-0.008481583,-0.006860367,-0.004676099,-0.007477688,-0.010071357,-0.012843856,-0.016006902,0.887482423,-0.014377997,-0.027951035,-0.009431845,-0.008047205,-0.015831558,-0.021962933,-0.004016728,-0.003094056,-0.002088713,-0.006630286,-0.00570243,-0.004071114,-0.004915082,-0.003081131,-0.001263958,-0.001623854,-0.002866813,-0.006417023,-0.002349612,-0.002476192,-0.003455461,-0.000188747;-0.001645612,-0.007751086,-0.003391781,-0.00488126,-0.003641823,-0.00712488,-0.00949439,-0.003414719,-0.009395332,-0.012805782,-0.008776859,-0.016064279,-0.074276367,0.744046596,-0.050897917,-0.021563467,-0.012873267,-0.027448286,-0.024128029,-0.009013368,-0.00810441,-0.004116885,-0.006319876,-0.003415003,-0.003790219,-0.00667178,-0.031504144,-0.003554979,-0.001819348,-0.013365909,-0.012654495,-0.006048213,-0.019621682,-0.008062308,-0.000691054;-0.004106505,-0.006341971,-0.001884375,-0.002684828,-0.002346626,-0.003274587,-0.002093531,-0.001039615,-0.002095928,-0.003376296,-0.003495854,-0.005236786,-0.013669909,-0.005093164,0.717537383,-0.004908932,-0.001776241,-0.004477804,-0.086666917,-0.005230151,-0.004181105,-0.001396871,-0.031956189,-0.037112735,-0.046472379,-0.012697813,-0.003437436,-0.000936111,-0.000921986,-0.003290989,-0.017927172,-0.001133408,-0.001540408,-0.003501512,-0.000133047;-0.000717457,-0.001349366,-0.001124023,-0.005401247,-0.003075696,-0.006401692,-0.003375367,-0.000575076,-0.001896573,-0.002528754,-0.003460181,-0.007542789,-0.003882614,-0.002878118,-0.005169254,0.962063117,-0.001061449,-0.005211098,-0.002354643,-0.001445557,-0.001731891,-0.002628993,-0.001567281,-0.000917782,-0.001004072,-0.001420088,-0.00091274,-0.001198153,-0.001436634,-0.002436826,-0.003996186,-0.003480916,-0.003191566,-0.005634699,-0.003805105;-0.008986002,-0.021608463,-0.011429073,-0.017070929,-0.007326413,-0.015671104,-0.0204239,-0.014007392,-0.028031147,-0.020980006,-0.035227004,-0.026928819,-0.01099356,-0.009350879,-0.008593652,-0.010988203,0.901575594,-0.005053512,-0.010013889,-0.006076087,-0.013232452,-0.02238681,-0.01481631,-0.003606868,-0.003902109,-0.012077517,-0.008106637,-0.004533004,-0.00933474,-0.006127708,-0.015012196,-0.018517444,-0.012743084,-0.015213833,-0.000247731;-0.00343829,-0.007141151,-0.002478985,-0.00249837,-0.001973516,-0.004166198,-0.003752261,-0.002908727,-0.004123667,-0.003473593,-0.006971659,-0.004773349,-0.003279453,-0.003082369,-0.002305134,-0.003276412,-0.025936663,0.963657156,-0.00423831,-0.003822657,-0.004635304,-0.005187773,-0.009887249,-0.002988445,-0.002306958,-0.014976557,-0.011832172,-0.005343001,-0.043783265,-0.005320877,-0.01944321,-0.013908146,-0.00670216,-0.011719273,-0.002785389;-0.004900998,-0.004307471,-0.006399251,-0.005608109,-0.00776566,-0.005921491,-0.00461606,-0.003723017,-0.006149924,-0.006005636,-0.007435852,-0.006017545,-0.005340648,-0.004720388,-0.004706182,-0.006355302,-0.008901061,-0.007492413,0.99111625,-0.004805877,-0.004580912,-0.005211366,-0.018285127,-0.003255221,-0.003375898,-0.007383064,-0.004685574,-0.002463544,-0.002142891,-0.005953411,-0.004064743,-0.003193238,-0.003394498,-0.006418447,-5.02955e-05;-0.033766808,-0.026668891,-0.061314818,-0.054844562,-0.071254826,-0.054829951,-0.050022259,-0.039127233,-0.049674804,-0.049048759,-0.043474094,-0.043797577,-0.047105215,-0.049990448,-0.043523676,-0.054160549,-0.022567489,-0.042705813,-0.037692937,0.969187236,-0.013960754,-0.044362981,-0.023185256,-0.019099299,-0.020016042,-0.020581673,-0.010254926,-0.004914923,-0.004092284,-0.012686319,-0.021229762,-0.010326216,-0.028915814,-0.015010834,-0.000340382;-0.016625475,-0.010600615,-0.02960988,-0.027290798,-0.040154723,-0.021311575,-0.018166249,-0.014527106,-0.022301445,-0.021322466,-0.019455418,-0.016375654,-0.017111605,-0.015793118,-0.018744023,-0.027064019,-0.008377069,-0.02871964,-0.017276623,-0.008465406,0.991574203,-0.025796807,-0.015622377,-0.009095491,-0.009111555,-0.009789275,-0.010413508,-0.004000889,-0.00365569,-0.009354347,-0.007989901,-0.005849618,-0.011920946,-0.01248297,-0.000665047;-0.00136628,-0.003890129,-0.00401894,-0.004433961,-0.004078326,-0.004836694,-0.005730589,-0.001845298,-0.005139008,-0.005646684,-0.005984413,-0.005079814,-0.006468767,-0.006389675,-0.003162416,-0.004731216,-0.004960001,-0.005097605,-0.006428552,-0.009421452,-0.006358219,0.989723024,-0.008100681,-0.005892554,-0.023136761,-0.022437641,-0.007216054,-0.010275618,-0.002778201,-0.013808084,-0.010082382,-0.007542413,-0.008526324,-0.011531445,-0.000106461;-0.0141143,-0.026584943,-0.022092062,-0.019609881,-0.021015049,-0.024845087,-0.018394117,-0.03092132,-0.019550125,-0.017704736,-0.033908696,-0.018309214,-0.012472325,-0.009419447,-0.01179078,-0.020086075,-0.027062816,-0.017339328,-0.01441384,-0.01801726,-0.01073407,-0.009879213,0.956062763,-0.0313193,-0.012133258,-0.03226129,-0.010379195,-0.006278793,-0.0021543,-0.006649145,-0.011766732,-0.010648033,-0.007958936,-0.00972868,-0.000770135;-0.003032121,-0.004905033,-0.004055243,-0.003910839,-0.00508746,-0.007741398,-0.00245684,-0.005982009,-0.003183714,-0.002701202,-0.005846614,-0.005261714,-0.001994133,-0.00171764,-0.001850297,-0.002226551,-0.002624781,-0.00313362,-0.001241362,-0.00236542,-0.001380916,-0.001678118,-0.003937502,0.882894138,-0.003262737,-0.005062485,-0.001090347,-0.000589197,-0.00019972,-0.000952526,-0.001294617,-0.001472462,-0.000643155,-0.001129217,-7.01728e-05;-0.00079111,-0.002192545,-0.001587017,-0.001807129,-0.002747396,-0.001455693,-0.002149955,-0.000864679,-0.002009765,-0.001955237,-0.001499301,-0.001490366,-0.001890553,-0.002126256,-0.001842143,-0.001796502,-0.000865702,-0.001215176,-0.002211901,-0.003840422,-0.001690828,-0.001218822,-0.002165843,-0.003757161,0.965248457,-0.020261022,-0.005304338,-0.003422258,-0.000595722,-0.004449607,-0.004652291,-0.00223972,-0.001365929,-0.004129967,-2.2829e-05;-0.00349483,-0.006590472,-0.00629611,-0.004228593,-0.004933253,-0.006787764,-0.00707649,-0.00715555,-0.005280985,-0.005035066,-0.008503691,-0.005238443,-0.00453043,-0.003813695,-0.004375781,-0.004934576,-0.004821624,-0.003626529,-0.008076051,-0.018469164,-0.010424402,-0.008253714,-0.038243859,-0.130828902,-0.098778579,0.881539292,-0.003590375,-0.004010771,-0.000825356,-0.005022458,-0.004294475,-0.002591938,-0.003240342,-0.005653393,-7.23399e-05;-0.002065095,-0.005655112,-0.003677656,-0.004189877,-0.004423665,-0.004382725,-0.010411482,-0.00286913,-0.006167171,-0.005240273,-0.005024633,-0.005138874,-0.006532945,-0.006275775,-0.003544833,-0.007036077,-0.00538801,-0.008623587,-0.011575557,-0.018121975,-0.018534498,-0.011226504,-0.014625376,-0.017985289,-0.029783804,-0.022790111,0.901407634,-0.024017228,-0.004072194,-0.02091191,-0.017773896,-0.008530833,-0.010570785,-0.021570449,-0.000150585;-0.018664974,-0.031264259,-0.015958882,-0.02211903,-0.017349108,-0.020786449,-0.021366716,-0.014031802,-0.020558102,-0.018571757,-0.022955544,-0.020561485,-0.020026377,-0.016849073,-0.014135529,-0.022071444,-0.023607666,-0.02034212,-0.026675236,-0.040187171,-0.035353172,-0.023770488,-0.043750763,-0.03930639,-0.040091146,-0.026537479,-0.023295876,0.818408126,-0.054759001,-0.036558903,-0.02444581,-0.014064538,-0.022635416,-0.033079775,-0.003827961;-0.006651146,-0.005359352,-0.004027504,-0.005540728,-0.005557145,-0.005320393,-0.008191602,-0.003373304,-0.004677726,-0.005923463,-0.005363063,-0.005282835,-0.006229759,-0.005149701,-0.004085059,-0.008709417,-0.006023288,-0.01199449,-0.024422923,-0.02718411,-0.042301436,-0.026680548,-0.010682719,-0.02213804,-0.015980158,-0.021316481,-0.012847677,-0.023765228,0.969009295,-0.023189384,-0.01211294,-0.017836663,-0.030567088,-0.028403724,-0.000655738;-0.011948467,-0.031434385,-0.03739083,-0.027801674,-0.024726126,-0.024020162,-0.058452463,-0.017984434,-0.062204618,-0.035062471,-0.032734556,-0.029162407,-0.043475857,-0.0594115,-0.038082399,-0.039760778,-0.039068001,-0.055710949,-0.046409551,-0.055469492,-0.064891542,-0.034918342,-0.041652566,-0.046205885,-0.09968995,-0.068490323,-0.072343932,-0.09093698,-0.036535689,0.864371828,-0.060090354,-0.027963799,-0.054293631,-0.067979011,-0.000224493;-0.001661477,-0.003225474,-0.001760607,-0.001144862,-0.000822183,-0.003247578,-0.003026699,-0.001134418,-0.003079891,-0.002112096,-0.002247238,-0.002456452,-0.001236789,-0.001462977,-0.00118826,-0.002281431,-0.00608338,-0.001383944,-0.002179857,-0.001608627,-0.003439525,-0.003453042,-0.003038069,-0.007854674,-0.009952492,-0.00346351,-0.002828672,-0.001600068,-0.003308115,-0.002672866,0.992286019,-0.003843752,-0.005136953,-0.007495475,-3.0149e-06;-0.000820751,-0.000532727,-0.00033998,-0.000358169,-0.000387841,-0.000252363,-0.000596689,-0.000474332,-0.000788635,-0.000483537,-0.000493862,-0.000467633,-0.000749497,-0.00094067,-0.0004717,-0.00031621,-0.001097649,-0.00043932,-0.000488801,-0.000839621,-0.001868357,-0.000414147,-0.001089087,-0.000326702,-0.001680031,-0.001046009,-0.001565753,-0.001271178,-0.000178569,-0.002071902,-0.004411678,0.99357797,-0.001014187,-0.001366186,-8.72964e-07;-0.001942051,-0.000429249,-0.000415162,-0.000437552,-0.000689506,-0.000379451,-0.000436995,-0.000245603,-0.000449492,-0.000372917,-0.000426141,-0.000379665,-0.000549105,-0.000435666,-0.000308307,-0.000481052,-0.000424076,-0.000521606,-0.000572193,-0.000656224,-0.000472679,-0.001024809,-0.000777496,-0.000468097,-0.000548396,-0.000706767,-0.000679086,-0.000616829,-0.000105267,-0.000784117,-0.00628859,-0.001465961,0.977467038,-0.00162432,-1.07937e-07;-0.0025481,-0.006360264,-0.006191316,-0.005249262,-0.006394617,-0.005884263,-0.013752537,-0.004199323,-0.008497514,-0.006133368,-0.006088919,-0.007343559,-0.006650614,-0.006070977,-0.004161207,-0.00695932,-0.006587944,-0.00645767,-0.009689125,-0.00886167,-0.010507227,-0.013125444,-0.009302436,-0.006557816,-0.009322574,-0.01154705,-0.019442463,-0.010722838,-0.008163929,-0.028298134,-0.015941843,-0.011323799,-0.015349652,0.921316829,-0.000517703;-1.27881e-05,-1.30555e-05,-3.35149e-05,-4.02804e-05,-2.82574e-05,-4.02956e-05,-3.99982e-05,-1.18184e-05,-3.64898e-05,-4.02854e-05,-2.55138e-05,-3.3757e-05,-3.18059e-05,-2.05234e-05,-3.75568e-05,-4.47019e-05,-1.65868e-05,-0.000102034,-0.000133615,-3.5009e-05,-5.74162e-05,-7.38739e-05,-0.00016912,-2.45854e-05,-3.62652e-05,-3.53916e-05,-9.24426e-05,-7.23952e-05,-0.00029994,-8.41283e-05,-0.000102276,-5.30281e-05,-0.000156425,-0.000131215,0.999973682;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            8.70035800e-01, -2.80485500e-03, -2.67820482e-01, -3.97993970e-02, -3.08431530e-02,
            -1.35661811e-01, -1.17846770e-02, -3.48140200e-03, -7.09167200e-03, -1.41068510e-02,
            -1.04388600e-03, -3.03774000e-04, -3.13830000e-04, -2.21246000e-04, -1.81211000e-04,
            -1.11678440e-02, -5.32670000e-04, -4.80767000e-03, -4.92935000e-04, -2.36285000e-03,
            -2.49507600e-03, -3.85933680e-02, -7.25217000e-04, -1.92753700e-03, -4.66472000e-04,
            -2.13981600e-03, -2.15559000e-04, -1.80183000e-04, -5.36462000e-04, -9.78037000e-04,
            -1.87687300e-03, -2.03063100e-03, -2.40036300e-03, -2.39695300e-03, -1.59688630e-02
        ],
              [
                  -3.20195500e-03, 9.17243041e-01, -3.02383500e-03, -1.92603700e-03,
                  -1.15983100e-03, -3.50995400e-03, -4.94939500e-03, -4.08844307e-01,
                  -3.74203440e-02, -3.58559400e-03, -7.60215320e-02, -4.12525050e-02,
                  -3.11976000e-03, -1.79511100e-03, -1.43600400e-03, -6.30593200e-03,
                  -9.48360260e-02, -1.92181670e-02, -5.68977000e-04, -1.28875000e-03,
                  -8.82285000e-04, -1.99254800e-03, -5.29100700e-03, -3.44664100e-03,
                  -2.49122000e-03, -2.96129500e-03, -4.82434000e-04, -3.47380000e-04,
                  -2.25567000e-03, -8.99979000e-04, -2.40540900e-03, -3.28240500e-03,
                  -1.27706600e-03, -2.45479300e-03, -6.72661470e-02
              ],
              [
                  -5.39455590e-02, -7.80719000e-04, 8.59733397e-01, -2.28397500e-03,
                  -8.38677970e-02, -1.24009700e-03, -2.73081600e-03, -1.16458000e-03,
                  -9.70814500e-03, -2.45485500e-03, -1.88054000e-03, -9.62687000e-04,
                  -1.18519400e-03, -1.10898400e-03, -8.28070000e-04, -1.57996400e-03,
                  -7.86752000e-04, -1.05101800e-03, -1.68332200e-03, -4.61115200e-03,
                  -4.25945100e-03, -1.57726913e-01, -1.64034500e-03, -7.86147800e-03,
                  -4.67406200e-03, -2.41612600e-03, -1.42503600e-03, -8.41402000e-04,
                  -2.40109000e-04, -1.94032900e-03, -7.98159900e-03, -9.07325200e-03,
                  -1.42692260e-02, -5.84065900e-03, -1.32203600e-03
              ],
              [
                  -2.36477800e-03, -1.62646100e-03, -1.48441600e-03, 7.24373891e-01,
                  -5.48973490e-02, -5.47034700e-03, -7.04793100e-03, -6.35456000e-04,
                  -4.16311900e-03, -1.92223420e-02, -5.10942000e-03, -1.60547800e-03,
                  -2.47594000e-03, -2.05117600e-03, -6.17707500e-03, -2.61378790e-02,
                  -5.98463000e-04, -2.60369900e-03, -1.75720300e-03, -2.84516000e-03,
                  -3.47448600e-03, -2.91003500e-03, -1.69084500e-03, -2.77250500e-03,
                  -1.18066300e-03, -1.76731200e-03, -3.12346200e-03, -6.52776000e-04,
                  -2.86592000e-04, -1.25289600e-03, -3.59315800e-03, -9.12808000e-04,
                  -3.60043600e-03, -5.03728200e-03, -5.32936000e-04
              ],
              [
                  -2.26326000e-04, -2.69802000e-04, -2.12412000e-04, -6.60909500e-03,
                  8.09717565e-01, -9.68683000e-04, -1.31335100e-03, -1.27019000e-04,
                  -2.85108000e-04, -1.17088400e-03, -6.55225000e-04, -4.23792000e-04,
                  -4.48146000e-04, -3.72801000e-04, -1.30347900e-03, -3.36753900e-03,
                  -1.81817000e-04, -1.81278000e-04, -4.42559000e-04, -5.07054000e-04,
                  -5.29929000e-04, -2.17160000e-04, -2.02074000e-04, -1.95974000e-04,
                  -1.41969000e-04, -1.69460000e-04, -6.81859000e-04, -6.66719000e-05,
                  -1.79120000e-05, -1.46136000e-04, -9.38500000e-04, -1.50543000e-04,
                  -1.75482000e-04, -7.05979000e-04, -1.46947000e-05
              ],
              [
                  -1.69127800e-03, -2.14928200e-03, -1.58924900e-03, -1.48638200e-03,
                  -2.01472400e-03, 8.03664081e-01, -1.07551230e-02, -4.31923000e-04,
                  -1.51664600e-03, -2.75233600e-03, -6.41603800e-03, -2.70364800e-03,
                  -2.95834300e-03, -1.80006000e-03, -2.87960300e-03, -7.36166920e-02,
                  -8.10010000e-04, -3.31174600e-02, -7.90533000e-04, -1.63832200e-03,
                  -1.55692700e-03, -2.14960200e-03, -1.31285100e-03, -5.36127000e-04,
                  -4.01538000e-04, -3.94424100e-03, -7.34393000e-04, -5.52113000e-04,
                  -2.34286200e-03, -8.93368000e-04, -1.42601400e-03, -1.53421000e-03,
                  -1.02674900e-03, -2.67300000e-03, -3.16876000e-04
              ],
              [
                  -2.85211400e-03, -3.31980100e-03, -2.43401690e-02, -1.04391750e-02,
                  -1.29009880e-02, -1.25381510e-02, 7.66939573e-01, -2.08591900e-03,
                  -1.91165890e-02, -1.86591440e-02, -2.29742730e-02, -6.10140200e-03,
                  -9.84115700e-03, -1.46023220e-02, -6.11638500e-03, -2.27969600e-02,
                  -3.61825200e-03, -5.32229100e-03, -7.89146600e-03, -1.45711690e-02,
                  -1.41591000e-02, -1.02118650e-02, -6.25072900e-03, -3.89482800e-03,
                  -7.12726100e-03, -1.58006650e-02, -1.21761930e-02, -1.53580730e-02,
                  -2.85213100e-03, -2.22727200e-02, -1.70359940e-02, -1.72910880e-02,
                  -1.01538750e-02, -2.58194840e-02, -7.28743000e-04
              ],
              [
                  -1.18616620e-02, -1.35586240e-02, -3.59882500e-03, -4.23716700e-03,
                  -2.99286000e-03, -4.56839500e-03, -4.36429200e-03, 9.53570708e-01,
                  -2.61031480e-02, -7.96941800e-03, -1.56683800e-02, -9.15013000e-03,
                  -3.60518300e-03, -2.74481900e-03, -1.93213600e-03, -4.28769400e-03,
                  -1.86668430e-02, -1.29739670e-02, -4.33812200e-03, -5.73204300e-03,
                  -4.85030600e-03, -3.49190000e-03, -5.07455100e-02, -5.39768460e-02,
                  -5.41475070e-02, -1.45390260e-02, -3.56208900e-03, -1.27185400e-03,
                  -1.43446700e-03, -4.39701700e-03, -7.54516100e-03, -2.91709400e-03,
                  -3.33419800e-03, -6.37188800e-03, -8.32844000e-05
              ],
              [
                  -4.04800860e-02, -1.39888960e-02, -1.11097490e-02, -6.98917200e-02,
                  -3.40406120e-02, -2.68853180e-02, -3.45022500e-02, -1.57561090e-02,
                  7.71435562e-01, -1.99015311e-01, -3.05255240e-02, -1.57575500e-02,
                  -1.28164350e-02, -1.86725790e-02, -1.30896150e-02, -3.37067100e-02,
                  -6.25675300e-03, -1.05823590e-02, -6.98718300e-03, -3.56394200e-03,
                  -2.60207700e-03, -4.40667300e-03, -3.41560900e-03, -2.80186000e-03,
                  -2.31138400e-03, -3.77935700e-03, -1.49508400e-03, -9.54481000e-04,
                  -1.80551400e-03, -4.46121800e-03, -8.57815300e-03, -3.68278000e-03,
                  -6.43073530e-02, -9.42796700e-03, -1.47458000e-04
              ],
              [
                  -4.67935900e-03, -8.99119900e-03, -1.52237450e-02, -8.56878100e-03,
                  -3.38450410e-02, -9.73035800e-03, -1.44573380e-02, -2.13414600e-03,
                  -1.84979460e-02, 8.87675834e-01, -1.11856100e-02, -7.70515000e-03,
                  -2.66421860e-02, -2.61844210e-02, -3.58781840e-02, -4.12673970e-02,
                  -2.37811900e-03, -1.82877150e-02, -1.81493610e-02, -4.62843500e-03,
                  -5.23626600e-03, -4.17432900e-03, -1.12299330e-02, -2.70138400e-03,
                  -2.59933400e-03, -6.35034100e-03, -3.77566800e-03, -7.28513000e-04,
                  -1.13250900e-03, -2.54256200e-03, -3.13820400e-03, -9.24553000e-04,
                  -5.83152500e-03, -3.40814000e-03, -1.02497000e-04
              ],
              [
                  -1.92553000e-03, -5.13284400e-03, -5.40330500e-03, -1.97258100e-03,
                  -1.67815500e-03, -8.97737800e-03, -1.37448700e-03, -2.09216100e-03,
                  -6.37819000e-03, -6.06941400e-03, 8.90309276e-01, -9.80534000e-03,
                  -5.62436200e-03, -1.13632280e-02, -6.86614500e-03, -6.95233400e-03,
                  -1.98419900e-03, -7.80741190e-02, -2.87831100e-03, -1.44385200e-03,
                  -1.01321600e-03, -3.55537500e-03, -1.28340000e-03, -5.74259000e-04,
                  -5.16091000e-04, -1.38545400e-03, -1.08727200e-03, -1.76631000e-04,
                  -2.29905200e-03, -9.58448000e-04, -1.46618400e-03, -1.63548800e-03,
                  -2.03483200e-03, -1.80379400e-03, -8.37319000e-05
              ],
              [
                  -4.81464100e-03, -2.51565140e-02, -1.48379820e-02, -5.61796900e-03,
                  -9.70087200e-03, -2.68667340e-02, -9.26371600e-03, -6.67297500e-03,
                  -1.75800030e-02, -2.39005990e-02, -3.22330520e-02, 6.85574010e-01,
                  -1.59608119e-01, -7.28366170e-02, -1.00655544e-01, -1.18647079e-01,
                  -7.85064000e-03, -8.51219080e-02, -1.93922390e-02, -4.65453700e-03,
                  -3.97316200e-03, -4.41205700e-03, -7.71254800e-03, -9.14489300e-03,
                  -7.96859300e-03, -6.64322600e-03, -4.12565700e-03, -7.88282000e-04,
                  -2.93355200e-03, -3.30092200e-03, -5.25234900e-03, -1.90813700e-03,
                  -2.72588700e-03, -4.47459100e-03, -3.40419000e-04
              ],
              [
                  -7.01977800e-03, -1.88000520e-02, -3.74420500e-03, -6.26629200e-03,
                  -4.77577500e-03, -8.48158300e-03, -6.86036700e-03, -4.67609900e-03,
                  -7.47768800e-03, -1.00713570e-02, -1.28438560e-02, -1.60069020e-02,
                  8.87482423e-01, -1.43779970e-02, -2.79510350e-02, -9.43184500e-03,
                  -8.04720500e-03, -1.58315580e-02, -2.19629330e-02, -4.01672800e-03,
                  -3.09405600e-03, -2.08871300e-03, -6.63028600e-03, -5.70243000e-03,
                  -4.07111400e-03, -4.91508200e-03, -3.08113100e-03, -1.26395800e-03,
                  -1.62385400e-03, -2.86681300e-03, -6.41702300e-03, -2.34961200e-03,
                  -2.47619200e-03, -3.45546100e-03, -1.88747000e-04
              ],
              [
                  -1.64561200e-03, -7.75108600e-03, -3.39178100e-03, -4.88126000e-03,
                  -3.64182300e-03, -7.12488000e-03, -9.49439000e-03, -3.41471900e-03,
                  -9.39533200e-03, -1.28057820e-02, -8.77685900e-03, -1.60642790e-02,
                  -7.42763670e-02, 7.44046596e-01, -5.08979170e-02, -2.15634670e-02,
                  -1.28732670e-02, -2.74482860e-02, -2.41280290e-02, -9.01336800e-03,
                  -8.10441000e-03, -4.11688500e-03, -6.31987600e-03, -3.41500300e-03,
                  -3.79021900e-03, -6.67178000e-03, -3.15041440e-02, -3.55497900e-03,
                  -1.81934800e-03, -1.33659090e-02, -1.26544950e-02, -6.04821300e-03,
                  -1.96216820e-02, -8.06230800e-03, -6.91054000e-04
              ],
              [
                  -4.10650500e-03, -6.34197100e-03, -1.88437500e-03, -2.68482800e-03,
                  -2.34662600e-03, -3.27458700e-03, -2.09353100e-03, -1.03961500e-03,
                  -2.09592800e-03, -3.37629600e-03, -3.49585400e-03, -5.23678600e-03,
                  -1.36699090e-02, -5.09316400e-03, 7.17537383e-01, -4.90893200e-03,
                  -1.77624100e-03, -4.47780400e-03, -8.66669170e-02, -5.23015100e-03,
                  -4.18110500e-03, -1.39687100e-03, -3.19561890e-02, -3.71127350e-02,
                  -4.64723790e-02, -1.26978130e-02, -3.43743600e-03, -9.36111000e-04,
                  -9.21986000e-04, -3.29098900e-03, -1.79271720e-02, -1.13340800e-03,
                  -1.54040800e-03, -3.50151200e-03, -1.33047000e-04
              ],
              [
                  -7.17457000e-04, -1.34936600e-03, -1.12402300e-03, -5.40124700e-03,
                  -3.07569600e-03, -6.40169200e-03, -3.37536700e-03, -5.75076000e-04,
                  -1.89657300e-03, -2.52875400e-03, -3.46018100e-03, -7.54278900e-03,
                  -3.88261400e-03, -2.87811800e-03, -5.16925400e-03, 9.62063117e-01,
                  -1.06144900e-03, -5.21109800e-03, -2.35464300e-03, -1.44555700e-03,
                  -1.73189100e-03, -2.62899300e-03, -1.56728100e-03, -9.17782000e-04,
                  -1.00407200e-03, -1.42008800e-03, -9.12740000e-04, -1.19815300e-03,
                  -1.43663400e-03, -2.43682600e-03, -3.99618600e-03, -3.48091600e-03,
                  -3.19156600e-03, -5.63469900e-03, -3.80510500e-03
              ],
              [
                  -8.98600200e-03, -2.16084630e-02, -1.14290730e-02, -1.70709290e-02,
                  -7.32641300e-03, -1.56711040e-02, -2.04239000e-02, -1.40073920e-02,
                  -2.80311470e-02, -2.09800060e-02, -3.52270040e-02, -2.69288190e-02,
                  -1.09935600e-02, -9.35087900e-03, -8.59365200e-03, -1.09882030e-02,
                  9.01575594e-01, -5.05351200e-03, -1.00138890e-02, -6.07608700e-03,
                  -1.32324520e-02, -2.23868100e-02, -1.48163100e-02, -3.60686800e-03,
                  -3.90210900e-03, -1.20775170e-02, -8.10663700e-03, -4.53300400e-03,
                  -9.33474000e-03, -6.12770800e-03, -1.50121960e-02, -1.85174440e-02,
                  -1.27430840e-02, -1.52138330e-02, -2.47731000e-04
              ],
              [
                  -3.43829000e-03, -7.14115100e-03, -2.47898500e-03, -2.49837000e-03,
                  -1.97351600e-03, -4.16619800e-03, -3.75226100e-03, -2.90872700e-03,
                  -4.12366700e-03, -3.47359300e-03, -6.97165900e-03, -4.77334900e-03,
                  -3.27945300e-03, -3.08236900e-03, -2.30513400e-03, -3.27641200e-03,
                  -2.59366630e-02, 9.63657156e-01, -4.23831000e-03, -3.82265700e-03,
                  -4.63530400e-03, -5.18777300e-03, -9.88724900e-03, -2.98844500e-03,
                  -2.30695800e-03, -1.49765570e-02, -1.18321720e-02, -5.34300100e-03,
                  -4.37832650e-02, -5.32087700e-03, -1.94432100e-02, -1.39081460e-02,
                  -6.70216000e-03, -1.17192730e-02, -2.78538900e-03
              ],
              [
                  -4.90099800e-03, -4.30747100e-03, -6.39925100e-03, -5.60810900e-03,
                  -7.76566000e-03, -5.92149100e-03, -4.61606000e-03, -3.72301700e-03,
                  -6.14992400e-03, -6.00563600e-03, -7.43585200e-03, -6.01754500e-03,
                  -5.34064800e-03, -4.72038800e-03, -4.70618200e-03, -6.35530200e-03,
                  -8.90106100e-03, -7.49241300e-03, 9.91116250e-01, -4.80587700e-03,
                  -4.58091200e-03, -5.21136600e-03, -1.82851270e-02, -3.25522100e-03,
                  -3.37589800e-03, -7.38306400e-03, -4.68557400e-03, -2.46354400e-03,
                  -2.14289100e-03, -5.95341100e-03, -4.06474300e-03, -3.19323800e-03,
                  -3.39449800e-03, -6.41844700e-03, -5.02955000e-05
              ],
              [
                  -3.37668080e-02, -2.66688910e-02, -6.13148180e-02, -5.48445620e-02,
                  -7.12548260e-02, -5.48299510e-02, -5.00222590e-02, -3.91272330e-02,
                  -4.96748040e-02, -4.90487590e-02, -4.34740940e-02, -4.37975770e-02,
                  -4.71052150e-02, -4.99904480e-02, -4.35236760e-02, -5.41605490e-02,
                  -2.25674890e-02, -4.27058130e-02, -3.76929370e-02, 9.69187236e-01,
                  -1.39607540e-02, -4.43629810e-02, -2.31852560e-02, -1.90992990e-02,
                  -2.00160420e-02, -2.05816730e-02, -1.02549260e-02, -4.91492300e-03,
                  -4.09228400e-03, -1.26863190e-02, -2.12297620e-02, -1.03262160e-02,
                  -2.89158140e-02, -1.50108340e-02, -3.40382000e-04
              ],
              [
                  -1.66254750e-02, -1.06006150e-02, -2.96098800e-02, -2.72907980e-02,
                  -4.01547230e-02, -2.13115750e-02, -1.81662490e-02, -1.45271060e-02,
                  -2.23014450e-02, -2.13224660e-02, -1.94554180e-02, -1.63756540e-02,
                  -1.71116050e-02, -1.57931180e-02, -1.87440230e-02, -2.70640190e-02,
                  -8.37706900e-03, -2.87196400e-02, -1.72766230e-02, -8.46540600e-03,
                  9.91574203e-01, -2.57968070e-02, -1.56223770e-02, -9.09549100e-03,
                  -9.11155500e-03, -9.78927500e-03, -1.04135080e-02, -4.00088900e-03,
                  -3.65569000e-03, -9.35434700e-03, -7.98990100e-03, -5.84961800e-03,
                  -1.19209460e-02, -1.24829700e-02, -6.65047000e-04
              ],
              [
                  -1.36628000e-03, -3.89012900e-03, -4.01894000e-03, -4.43396100e-03,
                  -4.07832600e-03, -4.83669400e-03, -5.73058900e-03, -1.84529800e-03,
                  -5.13900800e-03, -5.64668400e-03, -5.98441300e-03, -5.07981400e-03,
                  -6.46876700e-03, -6.38967500e-03, -3.16241600e-03, -4.73121600e-03,
                  -4.96000100e-03, -5.09760500e-03, -6.42855200e-03, -9.42145200e-03,
                  -6.35821900e-03, 9.89723024e-01, -8.10068100e-03, -5.89255400e-03,
                  -2.31367610e-02, -2.24376410e-02, -7.21605400e-03, -1.02756180e-02,
                  -2.77820100e-03, -1.38080840e-02, -1.00823820e-02, -7.54241300e-03,
                  -8.52632400e-03, -1.15314450e-02, -1.06461000e-04
              ],
              [
                  -1.41143000e-02, -2.65849430e-02, -2.20920620e-02, -1.96098810e-02,
                  -2.10150490e-02, -2.48450870e-02, -1.83941170e-02, -3.09213200e-02,
                  -1.95501250e-02, -1.77047360e-02, -3.39086960e-02, -1.83092140e-02,
                  -1.24723250e-02, -9.41944700e-03, -1.17907800e-02, -2.00860750e-02,
                  -2.70628160e-02, -1.73393280e-02, -1.44138400e-02, -1.80172600e-02,
                  -1.07340700e-02, -9.87921300e-03, 9.56062763e-01, -3.13193000e-02,
                  -1.21332580e-02, -3.22612900e-02, -1.03791950e-02, -6.27879300e-03,
                  -2.15430000e-03, -6.64914500e-03, -1.17667320e-02, -1.06480330e-02,
                  -7.95893600e-03, -9.72868000e-03, -7.70135000e-04
              ],
              [
                  -3.03212100e-03, -4.90503300e-03, -4.05524300e-03, -3.91083900e-03,
                  -5.08746000e-03, -7.74139800e-03, -2.45684000e-03, -5.98200900e-03,
                  -3.18371400e-03, -2.70120200e-03, -5.84661400e-03, -5.26171400e-03,
                  -1.99413300e-03, -1.71764000e-03, -1.85029700e-03, -2.22655100e-03,
                  -2.62478100e-03, -3.13362000e-03, -1.24136200e-03, -2.36542000e-03,
                  -1.38091600e-03, -1.67811800e-03, -3.93750200e-03, 8.82894138e-01,
                  -3.26273700e-03, -5.06248500e-03, -1.09034700e-03, -5.89197000e-04,
                  -1.99720000e-04, -9.52526000e-04, -1.29461700e-03, -1.47246200e-03,
                  -6.43155000e-04, -1.12921700e-03, -7.01728000e-05
              ],
              [
                  -7.91110000e-04, -2.19254500e-03, -1.58701700e-03, -1.80712900e-03,
                  -2.74739600e-03, -1.45569300e-03, -2.14995500e-03, -8.64679000e-04,
                  -2.00976500e-03, -1.95523700e-03, -1.49930100e-03, -1.49036600e-03,
                  -1.89055300e-03, -2.12625600e-03, -1.84214300e-03, -1.79650200e-03,
                  -8.65702000e-04, -1.21517600e-03, -2.21190100e-03, -3.84042200e-03,
                  -1.69082800e-03, -1.21882200e-03, -2.16584300e-03, -3.75716100e-03,
                  9.65248457e-01, -2.02610220e-02, -5.30433800e-03, -3.42225800e-03,
                  -5.95722000e-04, -4.44960700e-03, -4.65229100e-03, -2.23972000e-03,
                  -1.36592900e-03, -4.12996700e-03, -2.28290000e-05
              ],
              [
                  -3.49483000e-03, -6.59047200e-03, -6.29611000e-03, -4.22859300e-03,
                  -4.93325300e-03, -6.78776400e-03, -7.07649000e-03, -7.15555000e-03,
                  -5.28098500e-03, -5.03506600e-03, -8.50369100e-03, -5.23844300e-03,
                  -4.53043000e-03, -3.81369500e-03, -4.37578100e-03, -4.93457600e-03,
                  -4.82162400e-03, -3.62652900e-03, -8.07605100e-03, -1.84691640e-02,
                  -1.04244020e-02, -8.25371400e-03, -3.82438590e-02, -1.30828902e-01,
                  -9.87785790e-02, 8.81539292e-01, -3.59037500e-03, -4.01077100e-03,
                  -8.25356000e-04, -5.02245800e-03, -4.29447500e-03, -2.59193800e-03,
                  -3.24034200e-03, -5.65339300e-03, -7.23399000e-05
              ],
              [
                  -2.06509500e-03, -5.65511200e-03, -3.67765600e-03, -4.18987700e-03,
                  -4.42366500e-03, -4.38272500e-03, -1.04114820e-02, -2.86913000e-03,
                  -6.16717100e-03, -5.24027300e-03, -5.02463300e-03, -5.13887400e-03,
                  -6.53294500e-03, -6.27577500e-03, -3.54483300e-03, -7.03607700e-03,
                  -5.38801000e-03, -8.62358700e-03, -1.15755570e-02, -1.81219750e-02,
                  -1.85344980e-02, -1.12265040e-02, -1.46253760e-02, -1.79852890e-02,
                  -2.97838040e-02, -2.27901110e-02, 9.01407634e-01, -2.40172280e-02,
                  -4.07219400e-03, -2.09119100e-02, -1.77738960e-02, -8.53083300e-03,
                  -1.05707850e-02, -2.15704490e-02, -1.50585000e-04
              ],
              [
                  -1.86649740e-02, -3.12642590e-02, -1.59588820e-02, -2.21190300e-02,
                  -1.73491080e-02, -2.07864490e-02, -2.13667160e-02, -1.40318020e-02,
                  -2.05581020e-02, -1.85717570e-02, -2.29555440e-02, -2.05614850e-02,
                  -2.00263770e-02, -1.68490730e-02, -1.41355290e-02, -2.20714440e-02,
                  -2.36076660e-02, -2.03421200e-02, -2.66752360e-02, -4.01871710e-02,
                  -3.53531720e-02, -2.37704880e-02, -4.37507630e-02, -3.93063900e-02,
                  -4.00911460e-02, -2.65374790e-02, -2.32958760e-02, 8.18408126e-01,
                  -5.47590010e-02, -3.65589030e-02, -2.44458100e-02, -1.40645380e-02,
                  -2.26354160e-02, -3.30797750e-02, -3.82796100e-03
              ],
              [
                  -6.65114600e-03, -5.35935200e-03, -4.02750400e-03, -5.54072800e-03,
                  -5.55714500e-03, -5.32039300e-03, -8.19160200e-03, -3.37330400e-03,
                  -4.67772600e-03, -5.92346300e-03, -5.36306300e-03, -5.28283500e-03,
                  -6.22975900e-03, -5.14970100e-03, -4.08505900e-03, -8.70941700e-03,
                  -6.02328800e-03, -1.19944900e-02, -2.44229230e-02, -2.71841100e-02,
                  -4.23014360e-02, -2.66805480e-02, -1.06827190e-02, -2.21380400e-02,
                  -1.59801580e-02, -2.13164810e-02, -1.28476770e-02, -2.37652280e-02,
                  9.69009295e-01, -2.31893840e-02, -1.21129400e-02, -1.78366630e-02,
                  -3.05670880e-02, -2.84037240e-02, -6.55738000e-04
              ],
              [
                  -1.19484670e-02, -3.14343850e-02, -3.73908300e-02, -2.78016740e-02,
                  -2.47261260e-02, -2.40201620e-02, -5.84524630e-02, -1.79844340e-02,
                  -6.22046180e-02, -3.50624710e-02, -3.27345560e-02, -2.91624070e-02,
                  -4.34758570e-02, -5.94115000e-02, -3.80823990e-02, -3.97607780e-02,
                  -3.90680010e-02, -5.57109490e-02, -4.64095510e-02, -5.54694920e-02,
                  -6.48915420e-02, -3.49183420e-02, -4.16525660e-02, -4.62058850e-02,
                  -9.96899500e-02, -6.84903230e-02, -7.23439320e-02, -9.09369800e-02,
                  -3.65356890e-02, 8.64371828e-01, -6.00903540e-02, -2.79637990e-02,
                  -5.42936310e-02, -6.79790110e-02, -2.24493000e-04
              ],
              [
                  -1.66147700e-03, -3.22547400e-03, -1.76060700e-03, -1.14486200e-03,
                  -8.22183000e-04, -3.24757800e-03, -3.02669900e-03, -1.13441800e-03,
                  -3.07989100e-03, -2.11209600e-03, -2.24723800e-03, -2.45645200e-03,
                  -1.23678900e-03, -1.46297700e-03, -1.18826000e-03, -2.28143100e-03,
                  -6.08338000e-03, -1.38394400e-03, -2.17985700e-03, -1.60862700e-03,
                  -3.43952500e-03, -3.45304200e-03, -3.03806900e-03, -7.85467400e-03,
                  -9.95249200e-03, -3.46351000e-03, -2.82867200e-03, -1.60006800e-03,
                  -3.30811500e-03, -2.67286600e-03, 9.92286019e-01, -3.84375200e-03,
                  -5.13695300e-03, -7.49547500e-03, -3.01490000e-06
              ],
              [
                  -8.20751000e-04, -5.32727000e-04, -3.39980000e-04, -3.58169000e-04,
                  -3.87841000e-04, -2.52363000e-04, -5.96689000e-04, -4.74332000e-04,
                  -7.88635000e-04, -4.83537000e-04, -4.93862000e-04, -4.67633000e-04,
                  -7.49497000e-04, -9.40670000e-04, -4.71700000e-04, -3.16210000e-04,
                  -1.09764900e-03, -4.39320000e-04, -4.88801000e-04, -8.39621000e-04,
                  -1.86835700e-03, -4.14147000e-04, -1.08908700e-03, -3.26702000e-04,
                  -1.68003100e-03, -1.04600900e-03, -1.56575300e-03, -1.27117800e-03,
                  -1.78569000e-04, -2.07190200e-03, -4.41167800e-03, 9.93577970e-01,
                  -1.01418700e-03, -1.36618600e-03, -8.72964000e-07
              ],
              [
                  -1.94205100e-03, -4.29249000e-04, -4.15162000e-04, -4.37552000e-04,
                  -6.89506000e-04, -3.79451000e-04, -4.36995000e-04, -2.45603000e-04,
                  -4.49492000e-04, -3.72917000e-04, -4.26141000e-04, -3.79665000e-04,
                  -5.49105000e-04, -4.35666000e-04, -3.08307000e-04, -4.81052000e-04,
                  -4.24076000e-04, -5.21606000e-04, -5.72193000e-04, -6.56224000e-04,
                  -4.72679000e-04, -1.02480900e-03, -7.77496000e-04, -4.68097000e-04,
                  -5.48396000e-04, -7.06767000e-04, -6.79086000e-04, -6.16829000e-04,
                  -1.05267000e-04, -7.84117000e-04, -6.28859000e-03, -1.46596100e-03,
                  9.77467038e-01, -1.62432000e-03, -1.07937000e-07
              ],
              [
                  -2.54810000e-03, -6.36026400e-03, -6.19131600e-03, -5.24926200e-03,
                  -6.39461700e-03, -5.88426300e-03, -1.37525370e-02, -4.19932300e-03,
                  -8.49751400e-03, -6.13336800e-03, -6.08891900e-03, -7.34355900e-03,
                  -6.65061400e-03, -6.07097700e-03, -4.16120700e-03, -6.95932000e-03,
                  -6.58794400e-03, -6.45767000e-03, -9.68912500e-03, -8.86167000e-03,
                  -1.05072270e-02, -1.31254440e-02, -9.30243600e-03, -6.55781600e-03,
                  -9.32257400e-03, -1.15470500e-02, -1.94424630e-02, -1.07228380e-02,
                  -8.16392900e-03, -2.82981340e-02, -1.59418430e-02, -1.13237990e-02,
                  -1.53496520e-02, 9.21316829e-01, -5.17703000e-04
              ],
              [
                  -1.27881000e-05, -1.30555000e-05, -3.35149000e-05, -4.02804000e-05,
                  -2.82574000e-05, -4.02956000e-05, -3.99982000e-05, -1.18184000e-05,
                  -3.64898000e-05, -4.02854000e-05, -2.55138000e-05, -3.37570000e-05,
                  -3.18059000e-05, -2.05234000e-05, -3.75568000e-05, -4.47019000e-05,
                  -1.65868000e-05, -1.02034000e-04, -1.33615000e-04, -3.50090000e-05,
                  -5.74162000e-05, -7.38739000e-05, -1.69120000e-04, -2.45854000e-05,
                  -3.62652000e-05, -3.53916000e-05, -9.24426000e-05, -7.23952000e-05,
                  -2.99940000e-04, -8.41283000e-05, -1.02276000e-04, -5.30281000e-05,
                  -1.56425000e-04, -1.31215000e-04, 9.99973682e-01
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def ia_matrix_1999():
    """
    Real Name: b'ia matrix 1999'
    Original Eqn: b'0.86868424,-0.002422978,-0.266148851,-0.039706639,-0.032568493,-0.145684008,-0.011879775,-0.003177235,-0.006468798,-0.013628408,-0.000920189,-0.000294182,-0.000315697,-0.000207127,-0.000176158,-0.010425039,-0.000449511,-0.006336493,-0.000485853,-0.002308301,-0.002397182,-0.039736853,-0.001014055,-0.001726476,-0.000411803,-0.003039494,-0.00024328,-0.000172042,-0.000524739,-0.000853588,-0.002015882,-0.002114409,-0.002470741,-0.002499208,-0.016852826;-0.003151141,0.917525593,-0.002854371,-0.001992512,-0.001056922,-0.003647769,-0.00483207,-0.43158197,-0.038782292,-0.003643518,-0.073128155,-0.042690499,-0.003248186,-0.001530718,-0.001357677,-0.005119018,-0.102404978,-0.019390701,-0.000497901,-0.001409056,-0.000946596,-0.001629574,-0.004579222,-0.003555351,-0.002382606,-0.002237031,-0.000461939,-0.000275993,-0.001792877,-0.000931225,-0.002083802,-0.003827771,-0.001280763,-0.002135247,-0.070989699;-0.052496142,-0.000765765,0.859592227,-0.002350521,-0.082344181,-0.001176139,-0.002574647,-0.000939005,-0.00963344,-0.002404445,-0.001678376,-0.000917534,-0.001151476,-0.0009884,-0.000790248,-0.001742233,-0.000741705,-0.00100416,-0.001602155,-0.004317486,-0.004175175,-0.152825653,-0.001375524,-0.008526348,-0.004196389,-0.002262066,-0.001427074,-0.000778865,-0.000244373,-0.001782684,-0.007463952,-0.008678963,-0.013763415,-0.006171733,-0.001395218;-0.002240573,-0.001511685,-0.00136223,0.717894293,-0.055637578,-0.004422546,-0.006868879,-0.00058343,-0.003868531,-0.016878723,-0.004743302,-0.001500796,-0.002478095,-0.001889546,-0.006254817,-0.022019348,-0.000544414,-0.002349946,-0.001651987,-0.002652549,-0.003312372,-0.00278305,-0.001598742,-0.002380586,-0.001124309,-0.001680342,-0.002732023,-0.000562164,-0.000273708,-0.001183355,-0.003800907,-0.000939315,-0.003396957,-0.005478776,-0.000562437;-0.000193652,-0.000201338,-0.000175272,-0.006932976,0.810879529,-0.000721434,-0.001250283,-8.83567e-05,-0.000248687,-0.001079023,-0.000550777,-0.000338904,-0.000374978,-0.000293151,-0.001293671,-0.003292928,-0.00015953,-0.000156532,-0.000420527,-0.000435189,-0.000450351,-0.000187716,-0.000192788,-0.000185642,-0.00012995,-0.000160444,-0.000573804,-5.53705e-05,-1.63002e-05,-0.000130733,-0.000890536,-0.000141477,-0.000156025,-0.000642795,-1.55081e-05;-0.001801437,-0.001974031,-0.001544593,-0.001330357,-0.001822094,0.803053341,-0.010764676,-0.000306143,-0.001459382,-0.002917515,-0.005943131,-0.002704111,-0.002901966,-0.001635572,-0.002886607,-0.070537413,-0.000815221,-0.032803897,-0.000720681,-0.001555564,-0.001457956,-0.002128871,-0.001291496,-0.000510364,-0.000370179,-0.003737864,-0.000786722,-0.000479013,-0.002251869,-0.000875686,-0.00143104,-0.001809739,-0.000987688,-0.002729736,-0.000334417;-0.002729565,-0.00302382,-0.024118618,-0.010808795,-0.013283147,-0.011708403,0.766105199,-0.002008949,-0.018596276,-0.017948586,-0.022200372,-0.00585038,-0.009731894,-0.013791709,-0.005826223,-0.020144277,-0.003911737,-0.00491548,-0.00777845,-0.014563766,-0.013989259,-0.009610934,-0.006058,-0.003509662,-0.006652435,-0.015101433,-0.01218922,-0.015043167,-0.002748101,-0.022372112,-0.017166638,-0.018504204,-0.009921667,-0.025114867,-0.000769083;-0.012371484,-0.012807208,-0.003576585,-0.004989592,-0.003549025,-0.004502047,-0.00432534,0.950765947,-0.026409005,-0.007610298,-0.016105739,-0.008943101,-0.003551042,-0.002371305,-0.001870106,-0.003932683,-0.019089047,-0.012645191,-0.004365997,-0.005804893,-0.004774766,-0.003567283,-0.051810653,-0.061323142,-0.061649505,-0.014807648,-0.003689611,-0.001278657,-0.001361884,-0.004489228,-0.007817202,-0.002892583,-0.003195387,-0.006003905,-8.78946e-05;-0.039345205,-0.012600573,-0.010674637,-0.070592943,-0.035429934,-0.026377276,-0.034172807,-0.01442869,0.772314425,-0.199714635,-0.030490888,-0.015388657,-0.012974845,-0.017871988,-0.013212768,-0.028578264,-0.006468231,-0.010241988,-0.006817072,-0.003507506,-0.002596857,-0.004358491,-0.003290473,-0.003213826,-0.002611982,-0.003766281,-0.001494363,-0.000965085,-0.001693054,-0.004637513,-0.008496446,-0.00368394,-0.064482402,-0.009751292,-0.000155621;-0.004696511,-0.008568353,-0.015902069,-0.009180297,-0.03655397,-0.009015713,-0.014611494,-0.002078699,-0.018889754,0.88493504,-0.010744919,-0.007433717,-0.027270611,-0.024831733,-0.036476198,-0.035583807,-0.002554477,-0.018051293,-0.018162192,-0.004772815,-0.005352052,-0.004158337,-0.010595833,-0.002764626,-0.002801545,-0.006164515,-0.003496706,-0.000703611,-0.001192181,-0.00261796,-0.003261037,-0.000943673,-0.005812426,-0.003440856,-0.000108171;-0.001993716,-0.004859017,-0.005661397,-0.002108459,-0.001806252,-0.008552701,-0.001361031,-0.002201018,-0.006465772,-0.006213993,0.887758557,-0.009893374,-0.005942293,-0.010795697,-0.007022764,-0.00640301,-0.002082493,-0.077337405,-0.002928238,-0.001375823,-0.001046925,-0.003509472,-0.001305908,-0.0006048,-0.000534368,-0.001409119,-0.001147686,-0.000183189,-0.002368646,-0.001019165,-0.00143148,-0.001784455,-0.002075791,-0.001883763,-8.8367e-05;-0.004615596,-0.024719109,-0.013961172,-0.005633374,-0.009968187,-0.024902919,-0.008870446,-0.006528964,-0.017164329,-0.023810264,-0.031237036,0.691470299,-0.161601634,-0.067462708,-0.099836065,-0.093984101,-0.007693571,-0.085401307,-0.019215387,-0.004413279,-0.003854611,-0.004355447,-0.007409121,-0.008136299,-0.006875439,-0.006400083,-0.004134878,-0.000767182,-0.002823487,-0.003484078,-0.005154646,-0.001906868,-0.002616662,-0.004535119,-0.000359263;-0.006568706,-0.016706603,-0.003781086,-0.006704226,-0.005061306,-0.007758745,-0.006432132,-0.004778204,-0.007225077,-0.010412543,-0.013476782,-0.015837436,0.886598365,-0.013648291,-0.028901697,-0.008592006,-0.007542953,-0.015928959,-0.020948511,-0.003913829,-0.002906871,-0.002010524,-0.005943313,-0.006392967,-0.003870062,-0.004312362,-0.002948073,-0.001038308,-0.001443528,-0.00289074,-0.00604026,-0.002207974,-0.002497342,-0.003423049,-0.000199195;-0.001712738,-0.007157825,-0.003416146,-0.005416592,-0.004056317,-0.006971136,-0.009856869,-0.003663594,-0.009793276,-0.013745159,-0.009319777,-0.016628937,-0.081220795,0.728344852,-0.05327892,-0.020554866,-0.013841979,-0.028017087,-0.025350844,-0.009243499,-0.008567782,-0.004260198,-0.006409645,-0.003595688,-0.003883919,-0.006765666,-0.036543225,-0.003761541,-0.001870468,-0.014293018,-0.012760494,-0.006138881,-0.019908418,-0.00889766,-0.000729307;-0.003928664,-0.00642433,-0.001911735,-0.002518168,-0.002558642,-0.003073153,-0.00209243,-0.00098064,-0.002057822,-0.003516483,-0.003354182,-0.004957052,-0.013376785,-0.004805795,0.713787961,-0.004512759,-0.001686097,-0.004133972,-0.090151692,-0.005370127,-0.004301236,-0.001306301,-0.032056586,-0.038413526,-0.046818153,-0.010898697,-0.00354497,-0.000986397,-0.000985704,-0.003645954,-0.016982616,-0.001269725,-0.001473078,-0.00342693,-0.000140412;-0.000726135,-0.001364259,-0.001161013,-0.005167087,-0.003078674,-0.005732523,-0.003457143,-0.000538794,-0.001816359,-0.002565755,-0.003239782,-0.007876947,-0.003915406,-0.00279741,-0.005132058,0.962293456,-0.001145094,-0.005114432,-0.002367421,-0.001379769,-0.001646856,-0.002625083,-0.001637601,-0.000833065,-0.001053812,-0.001475851,-0.00095476,-0.001120562,-0.001681743,-0.0021013,-0.003910385,-0.003447664,-0.002931543,-0.005342124,-0.004015738;-0.009491348,-0.023568488,-0.011478601,-0.017359866,-0.00751317,-0.015585394,-0.021156927,-0.01416287,-0.027870169,-0.021677368,-0.0347626,-0.026874914,-0.011230629,-0.009277203,-0.008399548,-0.009514847,0.91397604,-0.005346391,-0.009985061,-0.006309141,-0.014253167,-0.023705661,-0.014531924,-0.003683507,-0.003899524,-0.012241688,-0.008537407,-0.004731248,-0.01064226,-0.00667372,-0.01581509,-0.018739583,-0.012973433,-0.015033122,-0.000261444;-0.003660979,-0.007435305,-0.002355501,-0.00261207,-0.002018871,-0.003694621,-0.003592571,-0.002540474,-0.00392684,-0.003339557,-0.007294906,-0.004651405,-0.003571973,-0.00306693,-0.002334854,-0.002849619,-0.025930049,0.962284823,-0.004178476,-0.003900724,-0.004629644,-0.005290658,-0.009556152,-0.002791392,-0.002078897,-0.014613154,-0.011600899,-0.005319802,-0.042927675,-0.005173722,-0.019329046,-0.015132102,-0.006615422,-0.01113384,-0.002939576;-0.004816068,-0.004350688,-0.006406809,-0.005590272,-0.00761905,-0.005774123,-0.004704957,-0.003300909,-0.006075868,-0.006037701,-0.007499543,-0.005930264,-0.005406508,-0.00443041,-0.004757859,-0.006234524,-0.009137427,-0.007348919,0.990878223,-0.004687047,-0.004488962,-0.005062069,-0.018365111,-0.003025759,-0.003196792,-0.007456742,-0.00478761,-0.002602046,-0.00218551,-0.006018211,-0.004390192,-0.003222954,-0.00347045,-0.006530263,-5.30796e-05;-0.033008384,-0.028119342,-0.062827403,-0.0574064,-0.072746854,-0.053660228,-0.050007541,-0.037451666,-0.049274407,-0.049191457,-0.043758661,-0.045162817,-0.048644267,-0.047578898,-0.04464188,-0.048451247,-0.022332322,-0.042533633,-0.037712706,0.970112405,-0.013618365,-0.04481227,-0.022728488,-0.019617032,-0.020915875,-0.020316892,-0.010719887,-0.004719168,-0.00412515,-0.012807038,-0.019712963,-0.010593118,-0.028355743,-0.015686446,-0.000359224;-0.016454583,-0.010904076,-0.030223659,-0.027513185,-0.039587829,-0.021241008,-0.018344726,-0.012098251,-0.022163668,-0.020921467,-0.019515112,-0.016469928,-0.017393444,-0.015068486,-0.019240771,-0.025742859,-0.008217516,-0.028322319,-0.017103443,-0.008010862,0.991687115,-0.02549122,-0.015393549,-0.008846898,-0.009088035,-0.009516722,-0.00975149,-0.003972931,-0.00345884,-0.009518497,-0.008073788,-0.005919688,-0.011818399,-0.01214297,-0.000701861;-0.001359145,-0.00393028,-0.003895884,-0.004368525,-0.004124031,-0.00451956,-0.005664363,-0.001802222,-0.004916472,-0.005590188,-0.005583551,-0.004772362,-0.006434444,-0.005676242,-0.00294055,-0.004144802,-0.006309574,-0.004846661,-0.006047598,-0.009449051,-0.006371545,0.989648484,-0.008199259,-0.005335943,-0.021096262,-0.020130373,-0.008478637,-0.01003116,-0.002653704,-0.014195948,-0.010841255,-0.007292983,-0.008336877,-0.011750373,-0.000112354;-0.0143204,-0.024507223,-0.022921547,-0.020287825,-0.021545998,-0.024148004,-0.018591644,-0.028617656,-0.019152104,-0.017587813,-0.033249624,-0.017865267,-0.012873924,-0.009150998,-0.012079075,-0.018108536,-0.027066753,-0.017323951,-0.01375531,-0.017404751,-0.010864394,-0.010018431,0.954270511,-0.040201435,-0.013545024,-0.033764134,-0.01006233,-0.005910716,-0.002060157,-0.006545321,-0.011593616,-0.011310636,-0.007945808,-0.009577027,-0.000812767;-0.0031918,-0.005607059,-0.004545108,-0.003836537,-0.005093193,-0.007398435,-0.003023906,-0.006322837,-0.003391956,-0.003123076,-0.006657385,-0.005791585,-0.002552188,-0.001985498,-0.001990975,-0.002045315,-0.00297546,-0.003737831,-0.00121579,-0.002600289,-0.001548628,-0.001871034,-0.003195004,0.892025812,-0.003320837,-0.005201481,-0.000977011,-0.000520044,-0.000239504,-0.000976758,-0.001381021,-0.001475263,-0.000603755,-0.001207352,-7.40572e-05;-0.000702038,-0.001990969,-0.001508115,-0.00187596,-0.002847466,-0.00146425,-0.002144736,-0.000820355,-0.001975233,-0.001991429,-0.001546291,-0.001530388,-0.002117579,-0.002117836,-0.001825891,-0.001453972,-0.001095555,-0.001162288,-0.002045051,-0.003844891,-0.001719966,-0.001169289,-0.001993198,-0.003688218,0.965462191,-0.019361991,-0.00482251,-0.003395662,-0.000596694,-0.004600292,-0.004765726,-0.002322534,-0.001287957,-0.004354714,-2.40927e-05;-0.003586651,-0.006109723,-0.006327773,-0.004129042,-0.004927502,-0.006438424,-0.007274459,-0.00647336,-0.00517715,-0.004992206,-0.008322965,-0.005084897,-0.004638852,-0.003553461,-0.004516221,-0.004534569,-0.004364414,-0.003956684,-0.008201585,-0.018181297,-0.010689847,-0.007930214,-0.038143028,-0.127819027,-0.101403199,0.877032968,-0.003383804,-0.004061705,-0.000943906,-0.005077667,-0.00477306,-0.002639118,-0.003160926,-0.00577943,-7.63443e-05;-0.002160598,-0.006018339,-0.003917687,-0.004680217,-0.00514034,-0.004568754,-0.011345453,-0.003000651,-0.006812751,-0.005706122,-0.005571173,-0.005586704,-0.007371669,-0.00693209,-0.003824731,-0.006477515,-0.006004849,-0.009703254,-0.012087888,-0.01949354,-0.019824558,-0.011774804,-0.014801536,-0.017582503,-0.028651731,-0.023887064,0.887701448,-0.026024727,-0.004358079,-0.022580771,-0.019392052,-0.008834888,-0.011087668,-0.022671191,-0.000158921;-0.019959783,-0.032125031,-0.016444095,-0.022302706,-0.017907511,-0.019541581,-0.022115725,-0.012654113,-0.020417381,-0.018930988,-0.023483577,-0.0200652,-0.020659417,-0.016399991,-0.014348462,-0.021785228,-0.0263697,-0.021177924,-0.026118988,-0.041034942,-0.037125637,-0.024728272,-0.046209961,-0.041881685,-0.039249089,-0.027440257,-0.024444017,0.808920548,-0.05689964,-0.038968484,-0.02570234,-0.014822548,-0.023199123,-0.036088737,-0.004039859;-0.005348257,-0.005018313,-0.00403606,-0.005164903,-0.005067002,-0.005232004,-0.007991484,-0.002871217,-0.00456021,-0.005907667,-0.005088801,-0.005184892,-0.006142828,-0.00473146,-0.003985968,-0.00777913,-0.006122333,-0.011220728,-0.023392409,-0.026334285,-0.041257724,-0.025856815,-0.010358001,-0.020345521,-0.013968908,-0.020962879,-0.013357677,-0.023745804,0.968498771,-0.022943518,-0.013529371,-0.018050098,-0.031940505,-0.026500544,-0.000692036;-0.01179411,-0.030452205,-0.037587864,-0.028657173,-0.025671714,-0.024434601,-0.057898585,-0.017390344,-0.063500237,-0.035617036,-0.033238995,-0.029526561,-0.044398403,-0.057622263,-0.037788266,-0.034203261,-0.040816242,-0.053176001,-0.046874442,-0.055413293,-0.065262435,-0.035786941,-0.041588892,-0.042344057,-0.094353129,-0.066517901,-0.072653539,-0.093879512,-0.035541318,0.862156236,-0.06342829,-0.028187556,-0.054368675,-0.070260036,-0.00023692;-0.001602263,-0.003182718,-0.001719201,-0.001156496,-0.000860151,-0.003154856,-0.002965288,-0.001250087,-0.002945492,-0.0021180080000000002,-0.002173675,-0.002517976,-0.00125847,-0.001409948,-0.001162291,-0.001917157,-0.006330303,-0.001383409,-0.002266494,-0.001544169,-0.00337966,-0.00345991,-0.002953074,-0.006991875,-0.009382534,-0.003425019,-0.002927728,-0.001655485,-0.003416012,-0.002808392,0.992645962,-0.004035221,-0.005167385,-0.007623932,-3.18179e-06;-0.000751384,-0.000562102,-0.000379733,-0.000390997,-0.000453497,-0.000269972,-0.000649448,-0.000480915,-0.000870227,-0.000540525,-0.000541719,-0.000490996,-0.000808118,-0.000955307,-0.00050819,-0.000358058,-0.000943264,-0.000425663,-0.000507651,-0.000818727,-0.001766404,-0.000461574,-0.001125791,-0.000323779,-0.001697908,-0.001070289,-0.001590221,-0.001240917,-0.000194457,-0.00218891,-0.004403239,0.993369454,-0.001083332,-0.001466106,-9.21287e-07;-0.002275739,-0.000506621,-0.000464903,-0.000443249,-0.000905399,-0.000379965,-0.000444153,-0.000217847,-0.000472835,-0.00037232,-0.000431527,-0.000386659,-0.000552906,-0.000411579,-0.000307064,-0.000485693,-0.000377709,-0.000534072,-0.000532213,-0.000660599,-0.000467571,-0.001070501,-0.0007859,-0.000421653,-0.000522167,-0.000677184,-0.000680221,-0.000581831,-0.000101037,-0.000793382,-0.005808533,-0.001492574,0.977119573,-0.001527685,-1.13911e-07;-0.002551096,-0.006431627,-0.00603766,-0.005464629,-0.006734415,-0.005417083,-0.01347034,-0.003785317,-0.008311885,-0.005880101,-0.005967347,-0.006972883,-0.006564173,-0.005516132,-0.004089948,-0.00618577,-0.00651725,-0.006162777,-0.009387989,-0.008941165,-0.01031438,-0.01306448,-0.008833695,-0.00606707,-0.008738931,-0.011290936,-0.019481998,-0.010851542,-0.007704902,-0.027874952,-0.016065024,-0.010920029,-0.015187165,0.919985749,-0.000546361;-1.41814e-05,-1.80947e-05,-2.88465e-05,-4.4699e-05,-2.71306e-05,-3.28999e-05,-3.63865e-05,-1.28306e-05,-3.22773e-05,-3.68142e-05,-2.2339e-05,-2.6635e-05,-2.92626e-05,-2.18194e-05,-4.24215e-05,-2.4948e-05,-1.76084e-05,-7.91595e-05,-0.000104801,-2.43351e-05,-5.63432e-05,-6.02808e-05,-0.000131893,-1.94472e-05,-3.33877e-05,-2.9561e-05,-7.32409e-05,-6.91712e-05,-0.000289134,-7.74291e-05,-8.90481e-05,-4.60337e-05,-0.000140025,-0.000128978,0.999972225;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            8.68684240e-01, -2.42297800e-03, -2.66148851e-01, -3.97066390e-02, -3.25684930e-02,
            -1.45684008e-01, -1.18797750e-02, -3.17723500e-03, -6.46879800e-03, -1.36284080e-02,
            -9.20189000e-04, -2.94182000e-04, -3.15697000e-04, -2.07127000e-04, -1.76158000e-04,
            -1.04250390e-02, -4.49511000e-04, -6.33649300e-03, -4.85853000e-04, -2.30830100e-03,
            -2.39718200e-03, -3.97368530e-02, -1.01405500e-03, -1.72647600e-03, -4.11803000e-04,
            -3.03949400e-03, -2.43280000e-04, -1.72042000e-04, -5.24739000e-04, -8.53588000e-04,
            -2.01588200e-03, -2.11440900e-03, -2.47074100e-03, -2.49920800e-03, -1.68528260e-02
        ],
              [
                  -3.15114100e-03, 9.17525593e-01, -2.85437100e-03, -1.99251200e-03,
                  -1.05692200e-03, -3.64776900e-03, -4.83207000e-03, -4.31581970e-01,
                  -3.87822920e-02, -3.64351800e-03, -7.31281550e-02, -4.26904990e-02,
                  -3.24818600e-03, -1.53071800e-03, -1.35767700e-03, -5.11901800e-03,
                  -1.02404978e-01, -1.93907010e-02, -4.97901000e-04, -1.40905600e-03,
                  -9.46596000e-04, -1.62957400e-03, -4.57922200e-03, -3.55535100e-03,
                  -2.38260600e-03, -2.23703100e-03, -4.61939000e-04, -2.75993000e-04,
                  -1.79287700e-03, -9.31225000e-04, -2.08380200e-03, -3.82777100e-03,
                  -1.28076300e-03, -2.13524700e-03, -7.09896990e-02
              ],
              [
                  -5.24961420e-02, -7.65765000e-04, 8.59592227e-01, -2.35052100e-03,
                  -8.23441810e-02, -1.17613900e-03, -2.57464700e-03, -9.39005000e-04,
                  -9.63344000e-03, -2.40444500e-03, -1.67837600e-03, -9.17534000e-04,
                  -1.15147600e-03, -9.88400000e-04, -7.90248000e-04, -1.74223300e-03,
                  -7.41705000e-04, -1.00416000e-03, -1.60215500e-03, -4.31748600e-03,
                  -4.17517500e-03, -1.52825653e-01, -1.37552400e-03, -8.52634800e-03,
                  -4.19638900e-03, -2.26206600e-03, -1.42707400e-03, -7.78865000e-04,
                  -2.44373000e-04, -1.78268400e-03, -7.46395200e-03, -8.67896300e-03,
                  -1.37634150e-02, -6.17173300e-03, -1.39521800e-03
              ],
              [
                  -2.24057300e-03, -1.51168500e-03, -1.36223000e-03, 7.17894293e-01,
                  -5.56375780e-02, -4.42254600e-03, -6.86887900e-03, -5.83430000e-04,
                  -3.86853100e-03, -1.68787230e-02, -4.74330200e-03, -1.50079600e-03,
                  -2.47809500e-03, -1.88954600e-03, -6.25481700e-03, -2.20193480e-02,
                  -5.44414000e-04, -2.34994600e-03, -1.65198700e-03, -2.65254900e-03,
                  -3.31237200e-03, -2.78305000e-03, -1.59874200e-03, -2.38058600e-03,
                  -1.12430900e-03, -1.68034200e-03, -2.73202300e-03, -5.62164000e-04,
                  -2.73708000e-04, -1.18335500e-03, -3.80090700e-03, -9.39315000e-04,
                  -3.39695700e-03, -5.47877600e-03, -5.62437000e-04
              ],
              [
                  -1.93652000e-04, -2.01338000e-04, -1.75272000e-04, -6.93297600e-03,
                  8.10879529e-01, -7.21434000e-04, -1.25028300e-03, -8.83567000e-05,
                  -2.48687000e-04, -1.07902300e-03, -5.50777000e-04, -3.38904000e-04,
                  -3.74978000e-04, -2.93151000e-04, -1.29367100e-03, -3.29292800e-03,
                  -1.59530000e-04, -1.56532000e-04, -4.20527000e-04, -4.35189000e-04,
                  -4.50351000e-04, -1.87716000e-04, -1.92788000e-04, -1.85642000e-04,
                  -1.29950000e-04, -1.60444000e-04, -5.73804000e-04, -5.53705000e-05,
                  -1.63002000e-05, -1.30733000e-04, -8.90536000e-04, -1.41477000e-04,
                  -1.56025000e-04, -6.42795000e-04, -1.55081000e-05
              ],
              [
                  -1.80143700e-03, -1.97403100e-03, -1.54459300e-03, -1.33035700e-03,
                  -1.82209400e-03, 8.03053341e-01, -1.07646760e-02, -3.06143000e-04,
                  -1.45938200e-03, -2.91751500e-03, -5.94313100e-03, -2.70411100e-03,
                  -2.90196600e-03, -1.63557200e-03, -2.88660700e-03, -7.05374130e-02,
                  -8.15221000e-04, -3.28038970e-02, -7.20681000e-04, -1.55556400e-03,
                  -1.45795600e-03, -2.12887100e-03, -1.29149600e-03, -5.10364000e-04,
                  -3.70179000e-04, -3.73786400e-03, -7.86722000e-04, -4.79013000e-04,
                  -2.25186900e-03, -8.75686000e-04, -1.43104000e-03, -1.80973900e-03,
                  -9.87688000e-04, -2.72973600e-03, -3.34417000e-04
              ],
              [
                  -2.72956500e-03, -3.02382000e-03, -2.41186180e-02, -1.08087950e-02,
                  -1.32831470e-02, -1.17084030e-02, 7.66105199e-01, -2.00894900e-03,
                  -1.85962760e-02, -1.79485860e-02, -2.22003720e-02, -5.85038000e-03,
                  -9.73189400e-03, -1.37917090e-02, -5.82622300e-03, -2.01442770e-02,
                  -3.91173700e-03, -4.91548000e-03, -7.77845000e-03, -1.45637660e-02,
                  -1.39892590e-02, -9.61093400e-03, -6.05800000e-03, -3.50966200e-03,
                  -6.65243500e-03, -1.51014330e-02, -1.21892200e-02, -1.50431670e-02,
                  -2.74810100e-03, -2.23721120e-02, -1.71666380e-02, -1.85042040e-02,
                  -9.92166700e-03, -2.51148670e-02, -7.69083000e-04
              ],
              [
                  -1.23714840e-02, -1.28072080e-02, -3.57658500e-03, -4.98959200e-03,
                  -3.54902500e-03, -4.50204700e-03, -4.32534000e-03, 9.50765947e-01,
                  -2.64090050e-02, -7.61029800e-03, -1.61057390e-02, -8.94310100e-03,
                  -3.55104200e-03, -2.37130500e-03, -1.87010600e-03, -3.93268300e-03,
                  -1.90890470e-02, -1.26451910e-02, -4.36599700e-03, -5.80489300e-03,
                  -4.77476600e-03, -3.56728300e-03, -5.18106530e-02, -6.13231420e-02,
                  -6.16495050e-02, -1.48076480e-02, -3.68961100e-03, -1.27865700e-03,
                  -1.36188400e-03, -4.48922800e-03, -7.81720200e-03, -2.89258300e-03,
                  -3.19538700e-03, -6.00390500e-03, -8.78946000e-05
              ],
              [
                  -3.93452050e-02, -1.26005730e-02, -1.06746370e-02, -7.05929430e-02,
                  -3.54299340e-02, -2.63772760e-02, -3.41728070e-02, -1.44286900e-02,
                  7.72314425e-01, -1.99714635e-01, -3.04908880e-02, -1.53886570e-02,
                  -1.29748450e-02, -1.78719880e-02, -1.32127680e-02, -2.85782640e-02,
                  -6.46823100e-03, -1.02419880e-02, -6.81707200e-03, -3.50750600e-03,
                  -2.59685700e-03, -4.35849100e-03, -3.29047300e-03, -3.21382600e-03,
                  -2.61198200e-03, -3.76628100e-03, -1.49436300e-03, -9.65085000e-04,
                  -1.69305400e-03, -4.63751300e-03, -8.49644600e-03, -3.68394000e-03,
                  -6.44824020e-02, -9.75129200e-03, -1.55621000e-04
              ],
              [
                  -4.69651100e-03, -8.56835300e-03, -1.59020690e-02, -9.18029700e-03,
                  -3.65539700e-02, -9.01571300e-03, -1.46114940e-02, -2.07869900e-03,
                  -1.88897540e-02, 8.84935040e-01, -1.07449190e-02, -7.43371700e-03,
                  -2.72706110e-02, -2.48317330e-02, -3.64761980e-02, -3.55838070e-02,
                  -2.55447700e-03, -1.80512930e-02, -1.81621920e-02, -4.77281500e-03,
                  -5.35205200e-03, -4.15833700e-03, -1.05958330e-02, -2.76462600e-03,
                  -2.80154500e-03, -6.16451500e-03, -3.49670600e-03, -7.03611000e-04,
                  -1.19218100e-03, -2.61796000e-03, -3.26103700e-03, -9.43673000e-04,
                  -5.81242600e-03, -3.44085600e-03, -1.08171000e-04
              ],
              [
                  -1.99371600e-03, -4.85901700e-03, -5.66139700e-03, -2.10845900e-03,
                  -1.80625200e-03, -8.55270100e-03, -1.36103100e-03, -2.20101800e-03,
                  -6.46577200e-03, -6.21399300e-03, 8.87758557e-01, -9.89337400e-03,
                  -5.94229300e-03, -1.07956970e-02, -7.02276400e-03, -6.40301000e-03,
                  -2.08249300e-03, -7.73374050e-02, -2.92823800e-03, -1.37582300e-03,
                  -1.04692500e-03, -3.50947200e-03, -1.30590800e-03, -6.04800000e-04,
                  -5.34368000e-04, -1.40911900e-03, -1.14768600e-03, -1.83189000e-04,
                  -2.36864600e-03, -1.01916500e-03, -1.43148000e-03, -1.78445500e-03,
                  -2.07579100e-03, -1.88376300e-03, -8.83670000e-05
              ],
              [
                  -4.61559600e-03, -2.47191090e-02, -1.39611720e-02, -5.63337400e-03,
                  -9.96818700e-03, -2.49029190e-02, -8.87044600e-03, -6.52896400e-03,
                  -1.71643290e-02, -2.38102640e-02, -3.12370360e-02, 6.91470299e-01,
                  -1.61601634e-01, -6.74627080e-02, -9.98360650e-02, -9.39841010e-02,
                  -7.69357100e-03, -8.54013070e-02, -1.92153870e-02, -4.41327900e-03,
                  -3.85461100e-03, -4.35544700e-03, -7.40912100e-03, -8.13629900e-03,
                  -6.87543900e-03, -6.40008300e-03, -4.13487800e-03, -7.67182000e-04,
                  -2.82348700e-03, -3.48407800e-03, -5.15464600e-03, -1.90686800e-03,
                  -2.61666200e-03, -4.53511900e-03, -3.59263000e-04
              ],
              [
                  -6.56870600e-03, -1.67066030e-02, -3.78108600e-03, -6.70422600e-03,
                  -5.06130600e-03, -7.75874500e-03, -6.43213200e-03, -4.77820400e-03,
                  -7.22507700e-03, -1.04125430e-02, -1.34767820e-02, -1.58374360e-02,
                  8.86598365e-01, -1.36482910e-02, -2.89016970e-02, -8.59200600e-03,
                  -7.54295300e-03, -1.59289590e-02, -2.09485110e-02, -3.91382900e-03,
                  -2.90687100e-03, -2.01052400e-03, -5.94331300e-03, -6.39296700e-03,
                  -3.87006200e-03, -4.31236200e-03, -2.94807300e-03, -1.03830800e-03,
                  -1.44352800e-03, -2.89074000e-03, -6.04026000e-03, -2.20797400e-03,
                  -2.49734200e-03, -3.42304900e-03, -1.99195000e-04
              ],
              [
                  -1.71273800e-03, -7.15782500e-03, -3.41614600e-03, -5.41659200e-03,
                  -4.05631700e-03, -6.97113600e-03, -9.85686900e-03, -3.66359400e-03,
                  -9.79327600e-03, -1.37451590e-02, -9.31977700e-03, -1.66289370e-02,
                  -8.12207950e-02, 7.28344852e-01, -5.32789200e-02, -2.05548660e-02,
                  -1.38419790e-02, -2.80170870e-02, -2.53508440e-02, -9.24349900e-03,
                  -8.56778200e-03, -4.26019800e-03, -6.40964500e-03, -3.59568800e-03,
                  -3.88391900e-03, -6.76566600e-03, -3.65432250e-02, -3.76154100e-03,
                  -1.87046800e-03, -1.42930180e-02, -1.27604940e-02, -6.13888100e-03,
                  -1.99084180e-02, -8.89766000e-03, -7.29307000e-04
              ],
              [
                  -3.92866400e-03, -6.42433000e-03, -1.91173500e-03, -2.51816800e-03,
                  -2.55864200e-03, -3.07315300e-03, -2.09243000e-03, -9.80640000e-04,
                  -2.05782200e-03, -3.51648300e-03, -3.35418200e-03, -4.95705200e-03,
                  -1.33767850e-02, -4.80579500e-03, 7.13787961e-01, -4.51275900e-03,
                  -1.68609700e-03, -4.13397200e-03, -9.01516920e-02, -5.37012700e-03,
                  -4.30123600e-03, -1.30630100e-03, -3.20565860e-02, -3.84135260e-02,
                  -4.68181530e-02, -1.08986970e-02, -3.54497000e-03, -9.86397000e-04,
                  -9.85704000e-04, -3.64595400e-03, -1.69826160e-02, -1.26972500e-03,
                  -1.47307800e-03, -3.42693000e-03, -1.40412000e-04
              ],
              [
                  -7.26135000e-04, -1.36425900e-03, -1.16101300e-03, -5.16708700e-03,
                  -3.07867400e-03, -5.73252300e-03, -3.45714300e-03, -5.38794000e-04,
                  -1.81635900e-03, -2.56575500e-03, -3.23978200e-03, -7.87694700e-03,
                  -3.91540600e-03, -2.79741000e-03, -5.13205800e-03, 9.62293456e-01,
                  -1.14509400e-03, -5.11443200e-03, -2.36742100e-03, -1.37976900e-03,
                  -1.64685600e-03, -2.62508300e-03, -1.63760100e-03, -8.33065000e-04,
                  -1.05381200e-03, -1.47585100e-03, -9.54760000e-04, -1.12056200e-03,
                  -1.68174300e-03, -2.10130000e-03, -3.91038500e-03, -3.44766400e-03,
                  -2.93154300e-03, -5.34212400e-03, -4.01573800e-03
              ],
              [
                  -9.49134800e-03, -2.35684880e-02, -1.14786010e-02, -1.73598660e-02,
                  -7.51317000e-03, -1.55853940e-02, -2.11569270e-02, -1.41628700e-02,
                  -2.78701690e-02, -2.16773680e-02, -3.47626000e-02, -2.68749140e-02,
                  -1.12306290e-02, -9.27720300e-03, -8.39954800e-03, -9.51484700e-03,
                  9.13976040e-01, -5.34639100e-03, -9.98506100e-03, -6.30914100e-03,
                  -1.42531670e-02, -2.37056610e-02, -1.45319240e-02, -3.68350700e-03,
                  -3.89952400e-03, -1.22416880e-02, -8.53740700e-03, -4.73124800e-03,
                  -1.06422600e-02, -6.67372000e-03, -1.58150900e-02, -1.87395830e-02,
                  -1.29734330e-02, -1.50331220e-02, -2.61444000e-04
              ],
              [
                  -3.66097900e-03, -7.43530500e-03, -2.35550100e-03, -2.61207000e-03,
                  -2.01887100e-03, -3.69462100e-03, -3.59257100e-03, -2.54047400e-03,
                  -3.92684000e-03, -3.33955700e-03, -7.29490600e-03, -4.65140500e-03,
                  -3.57197300e-03, -3.06693000e-03, -2.33485400e-03, -2.84961900e-03,
                  -2.59300490e-02, 9.62284823e-01, -4.17847600e-03, -3.90072400e-03,
                  -4.62964400e-03, -5.29065800e-03, -9.55615200e-03, -2.79139200e-03,
                  -2.07889700e-03, -1.46131540e-02, -1.16008990e-02, -5.31980200e-03,
                  -4.29276750e-02, -5.17372200e-03, -1.93290460e-02, -1.51321020e-02,
                  -6.61542200e-03, -1.11338400e-02, -2.93957600e-03
              ],
              [
                  -4.81606800e-03, -4.35068800e-03, -6.40680900e-03, -5.59027200e-03,
                  -7.61905000e-03, -5.77412300e-03, -4.70495700e-03, -3.30090900e-03,
                  -6.07586800e-03, -6.03770100e-03, -7.49954300e-03, -5.93026400e-03,
                  -5.40650800e-03, -4.43041000e-03, -4.75785900e-03, -6.23452400e-03,
                  -9.13742700e-03, -7.34891900e-03, 9.90878223e-01, -4.68704700e-03,
                  -4.48896200e-03, -5.06206900e-03, -1.83651110e-02, -3.02575900e-03,
                  -3.19679200e-03, -7.45674200e-03, -4.78761000e-03, -2.60204600e-03,
                  -2.18551000e-03, -6.01821100e-03, -4.39019200e-03, -3.22295400e-03,
                  -3.47045000e-03, -6.53026300e-03, -5.30796000e-05
              ],
              [
                  -3.30083840e-02, -2.81193420e-02, -6.28274030e-02, -5.74064000e-02,
                  -7.27468540e-02, -5.36602280e-02, -5.00075410e-02, -3.74516660e-02,
                  -4.92744070e-02, -4.91914570e-02, -4.37586610e-02, -4.51628170e-02,
                  -4.86442670e-02, -4.75788980e-02, -4.46418800e-02, -4.84512470e-02,
                  -2.23323220e-02, -4.25336330e-02, -3.77127060e-02, 9.70112405e-01,
                  -1.36183650e-02, -4.48122700e-02, -2.27284880e-02, -1.96170320e-02,
                  -2.09158750e-02, -2.03168920e-02, -1.07198870e-02, -4.71916800e-03,
                  -4.12515000e-03, -1.28070380e-02, -1.97129630e-02, -1.05931180e-02,
                  -2.83557430e-02, -1.56864460e-02, -3.59224000e-04
              ],
              [
                  -1.64545830e-02, -1.09040760e-02, -3.02236590e-02, -2.75131850e-02,
                  -3.95878290e-02, -2.12410080e-02, -1.83447260e-02, -1.20982510e-02,
                  -2.21636680e-02, -2.09214670e-02, -1.95151120e-02, -1.64699280e-02,
                  -1.73934440e-02, -1.50684860e-02, -1.92407710e-02, -2.57428590e-02,
                  -8.21751600e-03, -2.83223190e-02, -1.71034430e-02, -8.01086200e-03,
                  9.91687115e-01, -2.54912200e-02, -1.53935490e-02, -8.84689800e-03,
                  -9.08803500e-03, -9.51672200e-03, -9.75149000e-03, -3.97293100e-03,
                  -3.45884000e-03, -9.51849700e-03, -8.07378800e-03, -5.91968800e-03,
                  -1.18183990e-02, -1.21429700e-02, -7.01861000e-04
              ],
              [
                  -1.35914500e-03, -3.93028000e-03, -3.89588400e-03, -4.36852500e-03,
                  -4.12403100e-03, -4.51956000e-03, -5.66436300e-03, -1.80222200e-03,
                  -4.91647200e-03, -5.59018800e-03, -5.58355100e-03, -4.77236200e-03,
                  -6.43444400e-03, -5.67624200e-03, -2.94055000e-03, -4.14480200e-03,
                  -6.30957400e-03, -4.84666100e-03, -6.04759800e-03, -9.44905100e-03,
                  -6.37154500e-03, 9.89648484e-01, -8.19925900e-03, -5.33594300e-03,
                  -2.10962620e-02, -2.01303730e-02, -8.47863700e-03, -1.00311600e-02,
                  -2.65370400e-03, -1.41959480e-02, -1.08412550e-02, -7.29298300e-03,
                  -8.33687700e-03, -1.17503730e-02, -1.12354000e-04
              ],
              [
                  -1.43204000e-02, -2.45072230e-02, -2.29215470e-02, -2.02878250e-02,
                  -2.15459980e-02, -2.41480040e-02, -1.85916440e-02, -2.86176560e-02,
                  -1.91521040e-02, -1.75878130e-02, -3.32496240e-02, -1.78652670e-02,
                  -1.28739240e-02, -9.15099800e-03, -1.20790750e-02, -1.81085360e-02,
                  -2.70667530e-02, -1.73239510e-02, -1.37553100e-02, -1.74047510e-02,
                  -1.08643940e-02, -1.00184310e-02, 9.54270511e-01, -4.02014350e-02,
                  -1.35450240e-02, -3.37641340e-02, -1.00623300e-02, -5.91071600e-03,
                  -2.06015700e-03, -6.54532100e-03, -1.15936160e-02, -1.13106360e-02,
                  -7.94580800e-03, -9.57702700e-03, -8.12767000e-04
              ],
              [
                  -3.19180000e-03, -5.60705900e-03, -4.54510800e-03, -3.83653700e-03,
                  -5.09319300e-03, -7.39843500e-03, -3.02390600e-03, -6.32283700e-03,
                  -3.39195600e-03, -3.12307600e-03, -6.65738500e-03, -5.79158500e-03,
                  -2.55218800e-03, -1.98549800e-03, -1.99097500e-03, -2.04531500e-03,
                  -2.97546000e-03, -3.73783100e-03, -1.21579000e-03, -2.60028900e-03,
                  -1.54862800e-03, -1.87103400e-03, -3.19500400e-03, 8.92025812e-01,
                  -3.32083700e-03, -5.20148100e-03, -9.77011000e-04, -5.20044000e-04,
                  -2.39504000e-04, -9.76758000e-04, -1.38102100e-03, -1.47526300e-03,
                  -6.03755000e-04, -1.20735200e-03, -7.40572000e-05
              ],
              [
                  -7.02038000e-04, -1.99096900e-03, -1.50811500e-03, -1.87596000e-03,
                  -2.84746600e-03, -1.46425000e-03, -2.14473600e-03, -8.20355000e-04,
                  -1.97523300e-03, -1.99142900e-03, -1.54629100e-03, -1.53038800e-03,
                  -2.11757900e-03, -2.11783600e-03, -1.82589100e-03, -1.45397200e-03,
                  -1.09555500e-03, -1.16228800e-03, -2.04505100e-03, -3.84489100e-03,
                  -1.71996600e-03, -1.16928900e-03, -1.99319800e-03, -3.68821800e-03,
                  9.65462191e-01, -1.93619910e-02, -4.82251000e-03, -3.39566200e-03,
                  -5.96694000e-04, -4.60029200e-03, -4.76572600e-03, -2.32253400e-03,
                  -1.28795700e-03, -4.35471400e-03, -2.40927000e-05
              ],
              [
                  -3.58665100e-03, -6.10972300e-03, -6.32777300e-03, -4.12904200e-03,
                  -4.92750200e-03, -6.43842400e-03, -7.27445900e-03, -6.47336000e-03,
                  -5.17715000e-03, -4.99220600e-03, -8.32296500e-03, -5.08489700e-03,
                  -4.63885200e-03, -3.55346100e-03, -4.51622100e-03, -4.53456900e-03,
                  -4.36441400e-03, -3.95668400e-03, -8.20158500e-03, -1.81812970e-02,
                  -1.06898470e-02, -7.93021400e-03, -3.81430280e-02, -1.27819027e-01,
                  -1.01403199e-01, 8.77032968e-01, -3.38380400e-03, -4.06170500e-03,
                  -9.43906000e-04, -5.07766700e-03, -4.77306000e-03, -2.63911800e-03,
                  -3.16092600e-03, -5.77943000e-03, -7.63443000e-05
              ],
              [
                  -2.16059800e-03, -6.01833900e-03, -3.91768700e-03, -4.68021700e-03,
                  -5.14034000e-03, -4.56875400e-03, -1.13454530e-02, -3.00065100e-03,
                  -6.81275100e-03, -5.70612200e-03, -5.57117300e-03, -5.58670400e-03,
                  -7.37166900e-03, -6.93209000e-03, -3.82473100e-03, -6.47751500e-03,
                  -6.00484900e-03, -9.70325400e-03, -1.20878880e-02, -1.94935400e-02,
                  -1.98245580e-02, -1.17748040e-02, -1.48015360e-02, -1.75825030e-02,
                  -2.86517310e-02, -2.38870640e-02, 8.87701448e-01, -2.60247270e-02,
                  -4.35807900e-03, -2.25807710e-02, -1.93920520e-02, -8.83488800e-03,
                  -1.10876680e-02, -2.26711910e-02, -1.58921000e-04
              ],
              [
                  -1.99597830e-02, -3.21250310e-02, -1.64440950e-02, -2.23027060e-02,
                  -1.79075110e-02, -1.95415810e-02, -2.21157250e-02, -1.26541130e-02,
                  -2.04173810e-02, -1.89309880e-02, -2.34835770e-02, -2.00652000e-02,
                  -2.06594170e-02, -1.63999910e-02, -1.43484620e-02, -2.17852280e-02,
                  -2.63697000e-02, -2.11779240e-02, -2.61189880e-02, -4.10349420e-02,
                  -3.71256370e-02, -2.47282720e-02, -4.62099610e-02, -4.18816850e-02,
                  -3.92490890e-02, -2.74402570e-02, -2.44440170e-02, 8.08920548e-01,
                  -5.68996400e-02, -3.89684840e-02, -2.57023400e-02, -1.48225480e-02,
                  -2.31991230e-02, -3.60887370e-02, -4.03985900e-03
              ],
              [
                  -5.34825700e-03, -5.01831300e-03, -4.03606000e-03, -5.16490300e-03,
                  -5.06700200e-03, -5.23200400e-03, -7.99148400e-03, -2.87121700e-03,
                  -4.56021000e-03, -5.90766700e-03, -5.08880100e-03, -5.18489200e-03,
                  -6.14282800e-03, -4.73146000e-03, -3.98596800e-03, -7.77913000e-03,
                  -6.12233300e-03, -1.12207280e-02, -2.33924090e-02, -2.63342850e-02,
                  -4.12577240e-02, -2.58568150e-02, -1.03580010e-02, -2.03455210e-02,
                  -1.39689080e-02, -2.09628790e-02, -1.33576770e-02, -2.37458040e-02,
                  9.68498771e-01, -2.29435180e-02, -1.35293710e-02, -1.80500980e-02,
                  -3.19405050e-02, -2.65005440e-02, -6.92036000e-04
              ],
              [
                  -1.17941100e-02, -3.04522050e-02, -3.75878640e-02, -2.86571730e-02,
                  -2.56717140e-02, -2.44346010e-02, -5.78985850e-02, -1.73903440e-02,
                  -6.35002370e-02, -3.56170360e-02, -3.32389950e-02, -2.95265610e-02,
                  -4.43984030e-02, -5.76222630e-02, -3.77882660e-02, -3.42032610e-02,
                  -4.08162420e-02, -5.31760010e-02, -4.68744420e-02, -5.54132930e-02,
                  -6.52624350e-02, -3.57869410e-02, -4.15888920e-02, -4.23440570e-02,
                  -9.43531290e-02, -6.65179010e-02, -7.26535390e-02, -9.38795120e-02,
                  -3.55413180e-02, 8.62156236e-01, -6.34282900e-02, -2.81875560e-02,
                  -5.43686750e-02, -7.02600360e-02, -2.36920000e-04
              ],
              [
                  -1.60226300e-03, -3.18271800e-03, -1.71920100e-03, -1.15649600e-03,
                  -8.60151000e-04, -3.15485600e-03, -2.96528800e-03, -1.25008700e-03,
                  -2.94549200e-03, -2.11800800e-03, -2.17367500e-03, -2.51797600e-03,
                  -1.25847000e-03, -1.40994800e-03, -1.16229100e-03, -1.91715700e-03,
                  -6.33030300e-03, -1.38340900e-03, -2.26649400e-03, -1.54416900e-03,
                  -3.37966000e-03, -3.45991000e-03, -2.95307400e-03, -6.99187500e-03,
                  -9.38253400e-03, -3.42501900e-03, -2.92772800e-03, -1.65548500e-03,
                  -3.41601200e-03, -2.80839200e-03, 9.92645962e-01, -4.03522100e-03,
                  -5.16738500e-03, -7.62393200e-03, -3.18179000e-06
              ],
              [
                  -7.51384000e-04, -5.62102000e-04, -3.79733000e-04, -3.90997000e-04,
                  -4.53497000e-04, -2.69972000e-04, -6.49448000e-04, -4.80915000e-04,
                  -8.70227000e-04, -5.40525000e-04, -5.41719000e-04, -4.90996000e-04,
                  -8.08118000e-04, -9.55307000e-04, -5.08190000e-04, -3.58058000e-04,
                  -9.43264000e-04, -4.25663000e-04, -5.07651000e-04, -8.18727000e-04,
                  -1.76640400e-03, -4.61574000e-04, -1.12579100e-03, -3.23779000e-04,
                  -1.69790800e-03, -1.07028900e-03, -1.59022100e-03, -1.24091700e-03,
                  -1.94457000e-04, -2.18891000e-03, -4.40323900e-03, 9.93369454e-01,
                  -1.08333200e-03, -1.46610600e-03, -9.21287000e-07
              ],
              [
                  -2.27573900e-03, -5.06621000e-04, -4.64903000e-04, -4.43249000e-04,
                  -9.05399000e-04, -3.79965000e-04, -4.44153000e-04, -2.17847000e-04,
                  -4.72835000e-04, -3.72320000e-04, -4.31527000e-04, -3.86659000e-04,
                  -5.52906000e-04, -4.11579000e-04, -3.07064000e-04, -4.85693000e-04,
                  -3.77709000e-04, -5.34072000e-04, -5.32213000e-04, -6.60599000e-04,
                  -4.67571000e-04, -1.07050100e-03, -7.85900000e-04, -4.21653000e-04,
                  -5.22167000e-04, -6.77184000e-04, -6.80221000e-04, -5.81831000e-04,
                  -1.01037000e-04, -7.93382000e-04, -5.80853300e-03, -1.49257400e-03,
                  9.77119573e-01, -1.52768500e-03, -1.13911000e-07
              ],
              [
                  -2.55109600e-03, -6.43162700e-03, -6.03766000e-03, -5.46462900e-03,
                  -6.73441500e-03, -5.41708300e-03, -1.34703400e-02, -3.78531700e-03,
                  -8.31188500e-03, -5.88010100e-03, -5.96734700e-03, -6.97288300e-03,
                  -6.56417300e-03, -5.51613200e-03, -4.08994800e-03, -6.18577000e-03,
                  -6.51725000e-03, -6.16277700e-03, -9.38798900e-03, -8.94116500e-03,
                  -1.03143800e-02, -1.30644800e-02, -8.83369500e-03, -6.06707000e-03,
                  -8.73893100e-03, -1.12909360e-02, -1.94819980e-02, -1.08515420e-02,
                  -7.70490200e-03, -2.78749520e-02, -1.60650240e-02, -1.09200290e-02,
                  -1.51871650e-02, 9.19985749e-01, -5.46361000e-04
              ],
              [
                  -1.41814000e-05, -1.80947000e-05, -2.88465000e-05, -4.46990000e-05,
                  -2.71306000e-05, -3.28999000e-05, -3.63865000e-05, -1.28306000e-05,
                  -3.22773000e-05, -3.68142000e-05, -2.23390000e-05, -2.66350000e-05,
                  -2.92626000e-05, -2.18194000e-05, -4.24215000e-05, -2.49480000e-05,
                  -1.76084000e-05, -7.91595000e-05, -1.04801000e-04, -2.43351000e-05,
                  -5.63432000e-05, -6.02808000e-05, -1.31893000e-04, -1.94472000e-05,
                  -3.33877000e-05, -2.95610000e-05, -7.32409000e-05, -6.91712000e-05,
                  -2.89134000e-04, -7.74291000e-05, -8.90481000e-05, -4.60337000e-05,
                  -1.40025000e-04, -1.28978000e-04, 9.99972225e-01
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def ia_matrix_2000():
    """
    Real Name: b'ia matrix 2000'
    Original Eqn: b'0.869645917,-0.001710566,-0.259683952,-0.037935074,-0.0339944,-0.128116338,-0.011511103,-0.002606412,-0.005224617,-0.012848384,-0.000809544,-0.000273754,-0.000269196,-0.000175765,-0.000162405,-0.00967625,-0.000433682,-0.007131263,-0.000490607,-0.00261283,-0.002208166,-0.037614687,-0.001115813,-0.001695555,-0.000334468,-0.003548096,-0.000222814,-0.000125807,-0.000426838,-0.000680882,-0.001932798,-0.002023288,-0.002364005,-0.002478442,-0.014964669;-0.00373729,0.910538311,-0.003095401,-0.0021825,-0.001077691,-0.004330272,-0.004769322,-0.453979031,-0.035082082,-0.003827989,-0.074070919,-0.046599797,-0.003570269,-0.001371692,-0.00137701,-0.005648079,-0.117370365,-0.020445783,-0.000426999,-0.000804239,-0.000935464,-0.001677337,-0.00485951,-0.003700759,-0.002023982,-0.001749564,-0.000482607,-0.000261793,-0.001660307,-0.000966788,-0.002132421,-0.004479643,-0.001322639,-0.002484215,-0.063987774;-0.053852889,-0.000755421,0.857434718,-0.002667858,-0.084065723,-0.001315534,-0.002720479,-0.000866592,-0.008977142,-0.002686442,-0.00158525,-0.000924906,-0.001095139,-0.000955136,-0.000901956,-0.002049197,-0.000697721,-0.000955748,-0.001632768,-0.004329347,-0.004057413,-0.148954922,-0.001263898,-0.009680501,-0.003172434,-0.002039819,-0.001452069,-0.000683158,-0.000250011,-0.001559082,-0.007972772,-0.008413354,-0.013846687,-0.006510515,-0.002705627;-0.002161473,-0.001260192,-0.001337143,0.711380499,-0.053837594,-0.004143529,-0.005682837,-0.000508027,-0.003516958,-0.014552355,-0.004323005,-0.00141732,-0.002416476,-0.001756945,-0.006035756,-0.023839323,-0.000456864,-0.002332106,-0.001475507,-0.002442292,-0.003018926,-0.002783323,-0.001556526,-0.002113379,-0.001078091,-0.001560803,-0.001053248,-0.000488914,-0.000266701,-0.001085641,-0.003503572,-0.000969164,-0.003374199,-0.00542066,-0.000285036;-0.00017007,-0.000138642,-0.000153691,-0.006195601,0.807849138,-0.000623692,-0.000807469,-7.29396e-05,-0.000217703,-0.001113181,-0.000461377,-0.000279405,-0.000321979,-0.000246887,-0.001393561,-0.003529967,-0.000137971,-0.000150238,-0.000410145,-0.0004375,-0.000365036,-0.000155886,-0.000191843,-0.000170271,-0.000124055,-0.000169529,-0.000332256,-4.48662e-05,-1.44184e-05,-0.000113028,-0.000708735,-0.000133359,-0.000160926,-0.000484902,-1.40049e-05;-0.001931524,-0.001767253,-0.001668896,-0.001350035,-0.001896109,0.793425863,-0.010207595,-0.000292846,-0.001436947,-0.002961098,-0.005887819,-0.002686429,-0.002740301,-0.001454992,-0.002703221,-0.074100754,-0.000764796,-0.032144207,-0.00068001,-0.001561822,-0.001393849,-0.002202813,-0.00122546,-0.000514211,-0.000346707,-0.003279456,-0.000739832,-0.000404184,-0.00216931,-0.000852307,-0.001412658,-0.001923043,-0.000976874,-0.00279566,-0.000168483;-0.002652525,-0.002990064,-0.024842481,-0.010766974,-0.01304137,-0.012676652,0.768076982,-0.001400261,-0.017722309,-0.017682564,-0.021436504,-0.005596549,-0.009098881,-0.012312621,-0.00520278,-0.022237714,-0.003958866,-0.00482237,-0.007789539,-0.013979286,-0.013618728,-0.009602441,-0.005971786,-0.003127268,-0.006187022,-0.013971999,-0.01186725,-0.014241495,-0.00256564,-0.022525117,-0.016729541,-0.018203663,-0.009521897,-0.025080444,-0.000307766;-0.012511611,-0.011247901,-0.00334331,-0.005175636,-0.003647384,-0.00484613,-0.004170003,0.956887892,-0.02854164,-0.007586741,-0.01568427,-0.008296985,-0.003396971,-0.002062294,-0.00178102,-0.003841028,-0.018576713,-0.012001053,-0.004156988,-0.00569818,-0.004436052,-0.003579157,-0.051071578,-0.067531526,-0.064627684,-0.014017344,-0.003282895,-0.00122427,-0.001092856,-0.004408282,-0.007565186,-0.002804597,-0.003061705,-0.005377341,-5.83827e-05;-0.038559691,-0.011291836,-0.010590941,-0.069946446,-0.035516251,-0.030424706,-0.033662153,-0.013380215,0.768574499,-0.200300407,-0.0308316,-0.014989968,-0.011476786,-0.016690757,-0.01190117,-0.029492529,-0.006392355,-0.010236565,-0.006069428,-0.003273622,-0.00242368,-0.004675139,-0.003418116,-0.003705959,-0.003788388,-0.003728467,-0.001496481,-0.000922535,-0.001705073,-0.004741424,-0.008982179,-0.003703134,-0.062229314,-0.009771838,-0.000148825;-0.004891556,-0.007681575,-0.0165467,-0.009475001,-0.036322914,-0.009511043,-0.014633932,-0.0022543,-0.018479949,0.882905812,-0.01059319,-0.007311853,-0.026680166,-0.023187933,-0.034912694,-0.037332995,-0.00258391,-0.018335766,-0.017311777,-0.004726564,-0.005226466,-0.004164549,-0.010168908,-0.002647842,-0.002759092,-0.006079389,-0.003421307,-0.000648649,-0.001147123,-0.002603758,-0.003185038,-0.000891421,-0.005569823,-0.003424423,-6.04898e-05;-0.002175633,-0.004542201,-0.005982077,-0.00221567,-0.001961104,-0.008599315,-0.001327389,-0.00180754,-0.00616592,-0.006381092,0.886568736,-0.009962176,-0.005841215,-0.010454864,-0.006943089,-0.006668347,-0.001933931,-0.076670624,-0.002903773,-0.001550683,-0.001091269,-0.003700671,-0.001256959,-0.00064365,-0.000560002,-0.001481047,-0.001226429,-0.000189855,-0.002125649,-0.001040873,-0.001424876,-0.001800086,-0.002155609,-0.002028004,-5.40018e-05;-0.004530422,-0.022981485,-0.013930755,-0.005607246,-0.010105973,-0.025847623,-0.008924888,-0.006145159,-0.01519096,-0.024631467,-0.031226399,0.689684971,-0.158319387,-0.061867274,-0.097137198,-0.096694242,-0.007084852,-0.085623633,-0.017579105,-0.004411011,-0.00380714,-0.004441831,-0.006785961,-0.006617637,-0.006200916,-0.00653812,-0.004056447,-0.000693859,-0.002626683,-0.003444324,-0.004800619,-0.001771161,-0.002498964,-0.004576573,-0.000226787;-0.006770139,-0.015228868,-0.004101776,-0.007178651,-0.005072661,-0.00793243,-0.006550496,-0.005374559,-0.006614667,-0.010675713,-0.014243506,-0.015547565,0.882442825,-0.013287773,-0.029770886,-0.009347867,-0.007705637,-0.016465053,-0.021897203,-0.00416853,-0.002810715,-0.002137144,-0.005947953,-0.007673243,-0.004031112,-0.004274141,-0.002971856,-0.000987612,-0.001413801,-0.002960047,-0.006384187,-0.002099925,-0.002546695,-0.00351346,-0.00012437;-0.001877252,-0.006076424,-0.003706754,-0.006358592,-0.004586636,-0.007353623,-0.01074961,-0.003734394,-0.010083569,-0.014827704,-0.01047172,-0.017888631,-0.085214763,0.70734161,-0.055096687,-0.025504389,-0.014943852,-0.030257737,-0.027280743,-0.010188717,-0.00884022,-0.004794633,-0.006549079,-0.004025573,-0.004239013,-0.007422991,-0.04263863,-0.003895946,-0.001930147,-0.015042948,-0.013892476,-0.00600073,-0.020233699,-0.009756028,-0.0006211;-0.004067005,-0.006144199,-0.002116347,-0.002708408,-0.002406845,-0.003274945,-0.002223282,-0.000863733,-0.002357585,-0.003913269,-0.003479215,-0.004936387,-0.012961113,-0.004516312,0.707387894,-0.004519661,-0.001765435,-0.004228487,-0.09103741,-0.00583836,-0.004694295,-0.001334352,-0.032625608,-0.039038355,-0.048760152,-0.011957665,-0.00352842,-0.001027053,-0.000926581,-0.003934431,-0.017176931,-0.001385645,-0.00142901,-0.003526462,-0.000202191;-0.000719088,-0.001272131,-0.001164121,-0.005356125,-0.003078926,-0.005052377,-0.003733073,-0.000672229,-0.001801208,-0.002619195,-0.003045773,-0.009556453,-0.004006144,-0.002670032,-0.004661016,0.957886563,-0.001218219,-0.005058078,-0.002415312,-0.001352641,-0.001572537,-0.002800749,-0.00174379,-0.000825923,-0.001241566,-0.001654145,-0.001042422,-0.001013849,-0.001470048,-0.001995508,-0.003876465,-0.003416249,-0.002719726,-0.00556783,-0.00231479;-0.010182541,-0.025605561,-0.012554344,-0.018064911,-0.007987338,-0.017941501,-0.022614451,-0.012216401,-0.027999478,-0.022380194,-0.036899269,-0.027256711,-0.01119504,-0.008692746,-0.008808072,-0.010087798,0.911034092,-0.00564666,-0.010141297,-0.006447736,-0.014587111,-0.024406125,-0.014870307,-0.003633548,-0.003954712,-0.012684053,-0.009007322,-0.00469853,-0.011770873,-0.006789635,-0.015999379,-0.019802042,-0.013741095,-0.015776519,-0.000201186;-0.003746011,-0.006600872,-0.002330476,-0.002612773,-0.001895578,-0.003673591,-0.003355228,-0.00211629,-0.003455754,-0.003037489,-0.006904626,-0.004277681,-0.003280628,-0.002612049,-0.002104804,-0.002743673,-0.025246062,0.958006506,-0.004328582,-0.003855376,-0.004825718,-0.00553301,-0.009369909,-0.002734772,-0.002132635,-0.012641295,-0.011288527,-0.004903124,-0.041814623,-0.004863535,-0.019098485,-0.015213399,-0.006612658,-0.010437507,-0.001471134;-0.004980271,-0.004060675,-0.006695835,-0.005879624,-0.007940115,-0.006076214,-0.0048461,-0.002982445,-0.006191139,-0.006244668,-0.007371836,-0.006008975,-0.005155484,-0.004188691,-0.004935259,-0.006347288,-0.00840825,-0.007238473,0.989417105,-0.004120539,-0.004202268,-0.005031161,-0.016906179,-0.002403559,-0.003155224,-0.007087273,-0.004195686,-0.002457513,-0.002014727,-0.005814215,-0.004423591,-0.003050251,-0.003543111,-0.00661314,-3.38226e-05;-0.033477839,-0.027795683,-0.063976181,-0.055181872,-0.071628159,-0.055462827,-0.049491752,-0.037753232,-0.049172392,-0.048807107,-0.043640044,-0.045403617,-0.047541282,-0.044491178,-0.044456142,-0.053641216,-0.022820516,-0.041387853,-0.037104292,0.971214496,-0.013911796,-0.04384858,-0.022427352,-0.019699368,-0.020825315,-0.020236305,-0.010684611,-0.004288078,-0.003642399,-0.013126225,-0.020215756,-0.010527525,-0.027138191,-0.015578475,-0.000226252;-0.016690894,-0.01003831,-0.030352023,-0.027175415,-0.038807741,-0.020954413,-0.018682167,-0.01079575,-0.022262255,-0.020663066,-0.018622712,-0.01584945,-0.016629768,-0.013939002,-0.018888521,-0.025657343,-0.007952335,-0.028305094,-0.016316014,-0.007482293,0.992026384,-0.025554227,-0.014222415,-0.008408913,-0.008867199,-0.009134812,-0.009025147,-0.004013412,-0.003138078,-0.009154337,-0.00817889,-0.005755753,-0.011628861,-0.011802339,-0.000421444;-0.001305091,-0.003256478,-0.003741488,-0.004122006,-0.004010067,-0.0047156,-0.005683949,-0.001169449,-0.004362403,-0.005428348,-0.005233311,-0.004451451,-0.005971618,-0.005039096,-0.002844322,-0.004190111,-0.006698402,-0.004467125,-0.005890576,-0.008700015,-0.006007868,0.989898438,-0.007908036,-0.004197747,-0.021369964,-0.018732512,-0.008645393,-0.009373842,-0.002603457,-0.014047896,-0.01053255,-0.006713616,-0.00826005,-0.011826296,-7.63822e-05;-0.013385862,-0.021335017,-0.023331604,-0.020032494,-0.021770772,-0.024124636,-0.019023047,-0.025764294,-0.01834256,-0.01721626,-0.033540468,-0.017288961,-0.012507672,-0.00840373,-0.012120768,-0.018921462,-0.023719163,-0.016084619,-0.013885095,-0.01922384,-0.011487702,-0.00966068,0.954184625,-0.042854073,-0.013112192,-0.05982024,-0.009461706,-0.005473052,-0.001801417,-0.006185105,-0.011210005,-0.010284256,-0.007418487,-0.009456373,-0.000461871;-0.003575216,-0.005600322,-0.004924941,-0.004381176,-0.006067157,-0.008201228,-0.003557715,-0.005397178,-0.003357095,-0.003402873,-0.007779025,-0.006121833,-0.002829897,-0.002138638,-0.002123352,-0.002576855,-0.002846827,-0.004025485,-0.001175938,-0.002747787,-0.001531758,-0.002084885,-0.003212101,0.901025364,-0.00316431,-0.006181132,-0.000879505,-0.000472539,-0.000240324,-0.000927105,-0.001242932,-0.001405737,-0.000597107,-0.001223642,-1.89214e-05;-0.000702209,-0.001892338,-0.001452776,-0.001865935,-0.002914277,-0.001594124,-0.002390709,-0.000628888,-0.001899828,-0.002027349,-0.001601236,-0.001477255,-0.002264893,-0.002139342,-0.001855418,-0.00160814,-0.001154649,-0.001175167,-0.001850003,-0.003572363,-0.001617629,-0.001202962,-0.001863003,-0.003804682,0.964949174,-0.019796979,-0.004322481,-0.003313822,-0.000600806,-0.004586532,-0.004361269,-0.002213337,-0.00126459,-0.004512733,-1.2495e-05;-0.003565293,-0.005463372,-0.006195394,-0.004107239,-0.00524867,-0.007225893,-0.008637692,-0.005642941,-0.005080597,-0.005101675,-0.008389127,-0.005069496,-0.004698726,-0.003522482,-0.00452169,-0.004730621,-0.004303488,-0.003952386,-0.009404336,-0.021794413,-0.010705285,-0.007896693,-0.041190755,-0.132571599,-0.095729739,0.893633613,-0.004654205,-0.003832873,-0.000852613,-0.00509527,-0.004810028,-0.002584075,-0.002997603,-0.005943505,-4.06301e-05;-0.002292364,-0.00581364,-0.004267257,-0.00498984,-0.005686138,-0.005231434,-0.012292466,-0.00239728,-0.007363241,-0.006035842,-0.006145348,-0.005656996,-0.007565538,-0.006894407,-0.004378927,-0.007150076,-0.006308346,-0.010717943,-0.01330199,-0.020391589,-0.020911212,-0.012710047,-0.015020946,-0.017260208,-0.026345901,-0.023581968,0.878383098,-0.027800764,-0.004808089,-0.024334157,-0.020451809,-0.009411391,-0.011850026,-0.023661875,-0.000315848;-0.020382194,-0.03051973,-0.015691093,-0.021686111,-0.016930213,-0.019964525,-0.023575404,-0.010900605,-0.01869441,-0.018041057,-0.022844961,-0.018561136,-0.018742333,-0.014737489,-0.014185445,-0.022449677,-0.025749384,-0.021091221,-0.02422489,-0.038647808,-0.035705398,-0.025320368,-0.047156083,-0.040962899,-0.038152371,-0.025781445,-0.023061477,0.802261867,-0.059710253,-0.038291845,-0.024981871,-0.012693254,-0.022641284,-0.037334106,-0.005609512;-0.005290936,-0.005088943,-0.004378207,-0.005042622,-0.004709688,-0.005670214,-0.008963877,-0.002054618,-0.004523163,-0.006089763,-0.004885097,-0.005145961,-0.005977954,-0.004429928,-0.004464422,-0.007459804,-0.005732214,-0.009335729,-0.023381951,-0.024435617,-0.042301232,-0.027979734,-0.009588686,-0.019855621,-0.013647265,-0.020761801,-0.016321755,-0.024040298,0.965290311,-0.024000106,-0.013964443,-0.018454958,-0.032902579,-0.026122185,-0.000217713;-0.01172017,-0.030233301,-0.038736256,-0.02816326,-0.024547287,-0.025414171,-0.063485129,-0.012877257,-0.064507881,-0.036892835,-0.032998453,-0.029476982,-0.043874547,-0.052407853,-0.039344521,-0.036305761,-0.042380547,-0.05523486,-0.048160813,-0.056139333,-0.064143593,-0.038911902,-0.042538881,-0.037724226,-0.094575123,-0.066092046,-0.074016694,-0.096786024,-0.033130665,0.860112142,-0.064797592,-0.029342806,-0.054936933,-0.074979245,-0.001732383;-0.001533296,-0.003523526,-0.001808982,-0.001161812,-0.000859841,-0.003389197,-0.002910064,-0.000780683,-0.002691586,-0.002081909,-0.002166236,-0.002173236,-0.001179778,-0.001242269,-0.001198618,-0.002031523,-0.004793115,-0.001612837,-0.002196556,-0.001582075,-0.003201191,-0.003581103,-0.002828429,-0.006526755,-0.008136968,-0.003134306,-0.002964324,-0.001567508,-0.003063478,-0.002654689,0.992754556,-0.004050034,-0.004473014,-0.007726968,-7.21756e-06;-0.000649592,-0.000473713,-0.000453634,-0.000420937,-0.000430526,-0.000348009,-0.00071703,-0.000352765,-0.000942392,-0.000621962,-0.000599509,-0.000616173,-0.000807938,-0.000847838,-0.00076192,-0.000442849,-0.000982237,-0.000488133,-0.000727229,-0.00083637,-0.001756277,-0.000533268,-0.001185197,-0.000371192,-0.001659058,-0.001148242,-0.001531557,-0.001248114,-0.00028927,-0.002347225,-0.004462656,0.990436,-0.001092856,-0.001595629,-3.04567e-06;-0.001543175,-0.000408586,-0.000474207,-0.000422906,-0.000898024,-0.000397119,-0.000423144,-0.000162654,-0.000494802,-0.000397268,-0.000406935,-0.000360302,-0.000525006,-0.000377479,-0.000343459,-0.000467281,-0.000349448,-0.000479681,-0.000590122,-0.000627712,-0.00048499,-0.001132345,-0.000744808,-0.000384915,-0.000487678,-0.000613436,-0.000719737,-0.000564745,-9.9939e-05,-0.000792345,-0.005594708,-0.00147453,0.974990608,-0.001310793,-1.56567e-07;-0.00249435,-0.006251734,-0.005872977,-0.005276953,-0.006265161,-0.005465523,-0.013335568,-0.002720734,-0.007801795,-0.005577944,-0.005567367,-0.006402912,-0.006033137,-0.004834256,-0.004360008,-0.006431063,-0.006317696,-0.006186282,-0.008975105,-0.008451136,-0.009339259,-0.013645916,-0.008046869,-0.005486954,-0.008599329,-0.011223575,-0.019853825,-0.010630322,-0.007664937,-0.027810753,-0.015539418,-0.010569588,-0.015153115,0.920320471,-0.001331396;-1.6336e-05,-1.97956e-05,-2.85695e-05,-5.32798e-05,-2.79486e-05,-3.83786e-05,-4.07698e-05,-1.24051e-05,-3.46268e-05,-4.08863e-05,-2.2841e-05,-2.36591e-05,-2.75941e-05,-2.03107e-05,-3.96587e-05,-2.71574e-05,-1.66392e-05,-7.72898e-05,-0.000105669,-2.16105e-05,-5.31545e-05,-6.02959e-05,-0.000104877,-1.55566e-05,-2.71625e-05,-2.45078e-05,-6.14635e-05,-6.45951e-05,-0.000285292,-7.3198e-05,-8.2384e-05,-4.19294e-05,-0.000112235,-0.000135981,0.99992415;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            8.69645917e-01, -1.71056600e-03, -2.59683952e-01, -3.79350740e-02, -3.39944000e-02,
            -1.28116338e-01, -1.15111030e-02, -2.60641200e-03, -5.22461700e-03, -1.28483840e-02,
            -8.09544000e-04, -2.73754000e-04, -2.69196000e-04, -1.75765000e-04, -1.62405000e-04,
            -9.67625000e-03, -4.33682000e-04, -7.13126300e-03, -4.90607000e-04, -2.61283000e-03,
            -2.20816600e-03, -3.76146870e-02, -1.11581300e-03, -1.69555500e-03, -3.34468000e-04,
            -3.54809600e-03, -2.22814000e-04, -1.25807000e-04, -4.26838000e-04, -6.80882000e-04,
            -1.93279800e-03, -2.02328800e-03, -2.36400500e-03, -2.47844200e-03, -1.49646690e-02
        ],
              [
                  -3.73729000e-03, 9.10538311e-01, -3.09540100e-03, -2.18250000e-03,
                  -1.07769100e-03, -4.33027200e-03, -4.76932200e-03, -4.53979031e-01,
                  -3.50820820e-02, -3.82798900e-03, -7.40709190e-02, -4.65997970e-02,
                  -3.57026900e-03, -1.37169200e-03, -1.37701000e-03, -5.64807900e-03,
                  -1.17370365e-01, -2.04457830e-02, -4.26999000e-04, -8.04239000e-04,
                  -9.35464000e-04, -1.67733700e-03, -4.85951000e-03, -3.70075900e-03,
                  -2.02398200e-03, -1.74956400e-03, -4.82607000e-04, -2.61793000e-04,
                  -1.66030700e-03, -9.66788000e-04, -2.13242100e-03, -4.47964300e-03,
                  -1.32263900e-03, -2.48421500e-03, -6.39877740e-02
              ],
              [
                  -5.38528890e-02, -7.55421000e-04, 8.57434718e-01, -2.66785800e-03,
                  -8.40657230e-02, -1.31553400e-03, -2.72047900e-03, -8.66592000e-04,
                  -8.97714200e-03, -2.68644200e-03, -1.58525000e-03, -9.24906000e-04,
                  -1.09513900e-03, -9.55136000e-04, -9.01956000e-04, -2.04919700e-03,
                  -6.97721000e-04, -9.55748000e-04, -1.63276800e-03, -4.32934700e-03,
                  -4.05741300e-03, -1.48954922e-01, -1.26389800e-03, -9.68050100e-03,
                  -3.17243400e-03, -2.03981900e-03, -1.45206900e-03, -6.83158000e-04,
                  -2.50011000e-04, -1.55908200e-03, -7.97277200e-03, -8.41335400e-03,
                  -1.38466870e-02, -6.51051500e-03, -2.70562700e-03
              ],
              [
                  -2.16147300e-03, -1.26019200e-03, -1.33714300e-03, 7.11380499e-01,
                  -5.38375940e-02, -4.14352900e-03, -5.68283700e-03, -5.08027000e-04,
                  -3.51695800e-03, -1.45523550e-02, -4.32300500e-03, -1.41732000e-03,
                  -2.41647600e-03, -1.75694500e-03, -6.03575600e-03, -2.38393230e-02,
                  -4.56864000e-04, -2.33210600e-03, -1.47550700e-03, -2.44229200e-03,
                  -3.01892600e-03, -2.78332300e-03, -1.55652600e-03, -2.11337900e-03,
                  -1.07809100e-03, -1.56080300e-03, -1.05324800e-03, -4.88914000e-04,
                  -2.66701000e-04, -1.08564100e-03, -3.50357200e-03, -9.69164000e-04,
                  -3.37419900e-03, -5.42066000e-03, -2.85036000e-04
              ],
              [
                  -1.70070000e-04, -1.38642000e-04, -1.53691000e-04, -6.19560100e-03,
                  8.07849138e-01, -6.23692000e-04, -8.07469000e-04, -7.29396000e-05,
                  -2.17703000e-04, -1.11318100e-03, -4.61377000e-04, -2.79405000e-04,
                  -3.21979000e-04, -2.46887000e-04, -1.39356100e-03, -3.52996700e-03,
                  -1.37971000e-04, -1.50238000e-04, -4.10145000e-04, -4.37500000e-04,
                  -3.65036000e-04, -1.55886000e-04, -1.91843000e-04, -1.70271000e-04,
                  -1.24055000e-04, -1.69529000e-04, -3.32256000e-04, -4.48662000e-05,
                  -1.44184000e-05, -1.13028000e-04, -7.08735000e-04, -1.33359000e-04,
                  -1.60926000e-04, -4.84902000e-04, -1.40049000e-05
              ],
              [
                  -1.93152400e-03, -1.76725300e-03, -1.66889600e-03, -1.35003500e-03,
                  -1.89610900e-03, 7.93425863e-01, -1.02075950e-02, -2.92846000e-04,
                  -1.43694700e-03, -2.96109800e-03, -5.88781900e-03, -2.68642900e-03,
                  -2.74030100e-03, -1.45499200e-03, -2.70322100e-03, -7.41007540e-02,
                  -7.64796000e-04, -3.21442070e-02, -6.80010000e-04, -1.56182200e-03,
                  -1.39384900e-03, -2.20281300e-03, -1.22546000e-03, -5.14211000e-04,
                  -3.46707000e-04, -3.27945600e-03, -7.39832000e-04, -4.04184000e-04,
                  -2.16931000e-03, -8.52307000e-04, -1.41265800e-03, -1.92304300e-03,
                  -9.76874000e-04, -2.79566000e-03, -1.68483000e-04
              ],
              [
                  -2.65252500e-03, -2.99006400e-03, -2.48424810e-02, -1.07669740e-02,
                  -1.30413700e-02, -1.26766520e-02, 7.68076982e-01, -1.40026100e-03,
                  -1.77223090e-02, -1.76825640e-02, -2.14365040e-02, -5.59654900e-03,
                  -9.09888100e-03, -1.23126210e-02, -5.20278000e-03, -2.22377140e-02,
                  -3.95886600e-03, -4.82237000e-03, -7.78953900e-03, -1.39792860e-02,
                  -1.36187280e-02, -9.60244100e-03, -5.97178600e-03, -3.12726800e-03,
                  -6.18702200e-03, -1.39719990e-02, -1.18672500e-02, -1.42414950e-02,
                  -2.56564000e-03, -2.25251170e-02, -1.67295410e-02, -1.82036630e-02,
                  -9.52189700e-03, -2.50804440e-02, -3.07766000e-04
              ],
              [
                  -1.25116110e-02, -1.12479010e-02, -3.34331000e-03, -5.17563600e-03,
                  -3.64738400e-03, -4.84613000e-03, -4.17000300e-03, 9.56887892e-01,
                  -2.85416400e-02, -7.58674100e-03, -1.56842700e-02, -8.29698500e-03,
                  -3.39697100e-03, -2.06229400e-03, -1.78102000e-03, -3.84102800e-03,
                  -1.85767130e-02, -1.20010530e-02, -4.15698800e-03, -5.69818000e-03,
                  -4.43605200e-03, -3.57915700e-03, -5.10715780e-02, -6.75315260e-02,
                  -6.46276840e-02, -1.40173440e-02, -3.28289500e-03, -1.22427000e-03,
                  -1.09285600e-03, -4.40828200e-03, -7.56518600e-03, -2.80459700e-03,
                  -3.06170500e-03, -5.37734100e-03, -5.83827000e-05
              ],
              [
                  -3.85596910e-02, -1.12918360e-02, -1.05909410e-02, -6.99464460e-02,
                  -3.55162510e-02, -3.04247060e-02, -3.36621530e-02, -1.33802150e-02,
                  7.68574499e-01, -2.00300407e-01, -3.08316000e-02, -1.49899680e-02,
                  -1.14767860e-02, -1.66907570e-02, -1.19011700e-02, -2.94925290e-02,
                  -6.39235500e-03, -1.02365650e-02, -6.06942800e-03, -3.27362200e-03,
                  -2.42368000e-03, -4.67513900e-03, -3.41811600e-03, -3.70595900e-03,
                  -3.78838800e-03, -3.72846700e-03, -1.49648100e-03, -9.22535000e-04,
                  -1.70507300e-03, -4.74142400e-03, -8.98217900e-03, -3.70313400e-03,
                  -6.22293140e-02, -9.77183800e-03, -1.48825000e-04
              ],
              [
                  -4.89155600e-03, -7.68157500e-03, -1.65467000e-02, -9.47500100e-03,
                  -3.63229140e-02, -9.51104300e-03, -1.46339320e-02, -2.25430000e-03,
                  -1.84799490e-02, 8.82905812e-01, -1.05931900e-02, -7.31185300e-03,
                  -2.66801660e-02, -2.31879330e-02, -3.49126940e-02, -3.73329950e-02,
                  -2.58391000e-03, -1.83357660e-02, -1.73117770e-02, -4.72656400e-03,
                  -5.22646600e-03, -4.16454900e-03, -1.01689080e-02, -2.64784200e-03,
                  -2.75909200e-03, -6.07938900e-03, -3.42130700e-03, -6.48649000e-04,
                  -1.14712300e-03, -2.60375800e-03, -3.18503800e-03, -8.91421000e-04,
                  -5.56982300e-03, -3.42442300e-03, -6.04898000e-05
              ],
              [
                  -2.17563300e-03, -4.54220100e-03, -5.98207700e-03, -2.21567000e-03,
                  -1.96110400e-03, -8.59931500e-03, -1.32738900e-03, -1.80754000e-03,
                  -6.16592000e-03, -6.38109200e-03, 8.86568736e-01, -9.96217600e-03,
                  -5.84121500e-03, -1.04548640e-02, -6.94308900e-03, -6.66834700e-03,
                  -1.93393100e-03, -7.66706240e-02, -2.90377300e-03, -1.55068300e-03,
                  -1.09126900e-03, -3.70067100e-03, -1.25695900e-03, -6.43650000e-04,
                  -5.60002000e-04, -1.48104700e-03, -1.22642900e-03, -1.89855000e-04,
                  -2.12564900e-03, -1.04087300e-03, -1.42487600e-03, -1.80008600e-03,
                  -2.15560900e-03, -2.02800400e-03, -5.40018000e-05
              ],
              [
                  -4.53042200e-03, -2.29814850e-02, -1.39307550e-02, -5.60724600e-03,
                  -1.01059730e-02, -2.58476230e-02, -8.92488800e-03, -6.14515900e-03,
                  -1.51909600e-02, -2.46314670e-02, -3.12263990e-02, 6.89684971e-01,
                  -1.58319387e-01, -6.18672740e-02, -9.71371980e-02, -9.66942420e-02,
                  -7.08485200e-03, -8.56236330e-02, -1.75791050e-02, -4.41101100e-03,
                  -3.80714000e-03, -4.44183100e-03, -6.78596100e-03, -6.61763700e-03,
                  -6.20091600e-03, -6.53812000e-03, -4.05644700e-03, -6.93859000e-04,
                  -2.62668300e-03, -3.44432400e-03, -4.80061900e-03, -1.77116100e-03,
                  -2.49896400e-03, -4.57657300e-03, -2.26787000e-04
              ],
              [
                  -6.77013900e-03, -1.52288680e-02, -4.10177600e-03, -7.17865100e-03,
                  -5.07266100e-03, -7.93243000e-03, -6.55049600e-03, -5.37455900e-03,
                  -6.61466700e-03, -1.06757130e-02, -1.42435060e-02, -1.55475650e-02,
                  8.82442825e-01, -1.32877730e-02, -2.97708860e-02, -9.34786700e-03,
                  -7.70563700e-03, -1.64650530e-02, -2.18972030e-02, -4.16853000e-03,
                  -2.81071500e-03, -2.13714400e-03, -5.94795300e-03, -7.67324300e-03,
                  -4.03111200e-03, -4.27414100e-03, -2.97185600e-03, -9.87612000e-04,
                  -1.41380100e-03, -2.96004700e-03, -6.38418700e-03, -2.09992500e-03,
                  -2.54669500e-03, -3.51346000e-03, -1.24370000e-04
              ],
              [
                  -1.87725200e-03, -6.07642400e-03, -3.70675400e-03, -6.35859200e-03,
                  -4.58663600e-03, -7.35362300e-03, -1.07496100e-02, -3.73439400e-03,
                  -1.00835690e-02, -1.48277040e-02, -1.04717200e-02, -1.78886310e-02,
                  -8.52147630e-02, 7.07341610e-01, -5.50966870e-02, -2.55043890e-02,
                  -1.49438520e-02, -3.02577370e-02, -2.72807430e-02, -1.01887170e-02,
                  -8.84022000e-03, -4.79463300e-03, -6.54907900e-03, -4.02557300e-03,
                  -4.23901300e-03, -7.42299100e-03, -4.26386300e-02, -3.89594600e-03,
                  -1.93014700e-03, -1.50429480e-02, -1.38924760e-02, -6.00073000e-03,
                  -2.02336990e-02, -9.75602800e-03, -6.21100000e-04
              ],
              [
                  -4.06700500e-03, -6.14419900e-03, -2.11634700e-03, -2.70840800e-03,
                  -2.40684500e-03, -3.27494500e-03, -2.22328200e-03, -8.63733000e-04,
                  -2.35758500e-03, -3.91326900e-03, -3.47921500e-03, -4.93638700e-03,
                  -1.29611130e-02, -4.51631200e-03, 7.07387894e-01, -4.51966100e-03,
                  -1.76543500e-03, -4.22848700e-03, -9.10374100e-02, -5.83836000e-03,
                  -4.69429500e-03, -1.33435200e-03, -3.26256080e-02, -3.90383550e-02,
                  -4.87601520e-02, -1.19576650e-02, -3.52842000e-03, -1.02705300e-03,
                  -9.26581000e-04, -3.93443100e-03, -1.71769310e-02, -1.38564500e-03,
                  -1.42901000e-03, -3.52646200e-03, -2.02191000e-04
              ],
              [
                  -7.19088000e-04, -1.27213100e-03, -1.16412100e-03, -5.35612500e-03,
                  -3.07892600e-03, -5.05237700e-03, -3.73307300e-03, -6.72229000e-04,
                  -1.80120800e-03, -2.61919500e-03, -3.04577300e-03, -9.55645300e-03,
                  -4.00614400e-03, -2.67003200e-03, -4.66101600e-03, 9.57886563e-01,
                  -1.21821900e-03, -5.05807800e-03, -2.41531200e-03, -1.35264100e-03,
                  -1.57253700e-03, -2.80074900e-03, -1.74379000e-03, -8.25923000e-04,
                  -1.24156600e-03, -1.65414500e-03, -1.04242200e-03, -1.01384900e-03,
                  -1.47004800e-03, -1.99550800e-03, -3.87646500e-03, -3.41624900e-03,
                  -2.71972600e-03, -5.56783000e-03, -2.31479000e-03
              ],
              [
                  -1.01825410e-02, -2.56055610e-02, -1.25543440e-02, -1.80649110e-02,
                  -7.98733800e-03, -1.79415010e-02, -2.26144510e-02, -1.22164010e-02,
                  -2.79994780e-02, -2.23801940e-02, -3.68992690e-02, -2.72567110e-02,
                  -1.11950400e-02, -8.69274600e-03, -8.80807200e-03, -1.00877980e-02,
                  9.11034092e-01, -5.64666000e-03, -1.01412970e-02, -6.44773600e-03,
                  -1.45871110e-02, -2.44061250e-02, -1.48703070e-02, -3.63354800e-03,
                  -3.95471200e-03, -1.26840530e-02, -9.00732200e-03, -4.69853000e-03,
                  -1.17708730e-02, -6.78963500e-03, -1.59993790e-02, -1.98020420e-02,
                  -1.37410950e-02, -1.57765190e-02, -2.01186000e-04
              ],
              [
                  -3.74601100e-03, -6.60087200e-03, -2.33047600e-03, -2.61277300e-03,
                  -1.89557800e-03, -3.67359100e-03, -3.35522800e-03, -2.11629000e-03,
                  -3.45575400e-03, -3.03748900e-03, -6.90462600e-03, -4.27768100e-03,
                  -3.28062800e-03, -2.61204900e-03, -2.10480400e-03, -2.74367300e-03,
                  -2.52460620e-02, 9.58006506e-01, -4.32858200e-03, -3.85537600e-03,
                  -4.82571800e-03, -5.53301000e-03, -9.36990900e-03, -2.73477200e-03,
                  -2.13263500e-03, -1.26412950e-02, -1.12885270e-02, -4.90312400e-03,
                  -4.18146230e-02, -4.86353500e-03, -1.90984850e-02, -1.52133990e-02,
                  -6.61265800e-03, -1.04375070e-02, -1.47113400e-03
              ],
              [
                  -4.98027100e-03, -4.06067500e-03, -6.69583500e-03, -5.87962400e-03,
                  -7.94011500e-03, -6.07621400e-03, -4.84610000e-03, -2.98244500e-03,
                  -6.19113900e-03, -6.24466800e-03, -7.37183600e-03, -6.00897500e-03,
                  -5.15548400e-03, -4.18869100e-03, -4.93525900e-03, -6.34728800e-03,
                  -8.40825000e-03, -7.23847300e-03, 9.89417105e-01, -4.12053900e-03,
                  -4.20226800e-03, -5.03116100e-03, -1.69061790e-02, -2.40355900e-03,
                  -3.15522400e-03, -7.08727300e-03, -4.19568600e-03, -2.45751300e-03,
                  -2.01472700e-03, -5.81421500e-03, -4.42359100e-03, -3.05025100e-03,
                  -3.54311100e-03, -6.61314000e-03, -3.38226000e-05
              ],
              [
                  -3.34778390e-02, -2.77956830e-02, -6.39761810e-02, -5.51818720e-02,
                  -7.16281590e-02, -5.54628270e-02, -4.94917520e-02, -3.77532320e-02,
                  -4.91723920e-02, -4.88071070e-02, -4.36400440e-02, -4.54036170e-02,
                  -4.75412820e-02, -4.44911780e-02, -4.44561420e-02, -5.36412160e-02,
                  -2.28205160e-02, -4.13878530e-02, -3.71042920e-02, 9.71214496e-01,
                  -1.39117960e-02, -4.38485800e-02, -2.24273520e-02, -1.96993680e-02,
                  -2.08253150e-02, -2.02363050e-02, -1.06846110e-02, -4.28807800e-03,
                  -3.64239900e-03, -1.31262250e-02, -2.02157560e-02, -1.05275250e-02,
                  -2.71381910e-02, -1.55784750e-02, -2.26252000e-04
              ],
              [
                  -1.66908940e-02, -1.00383100e-02, -3.03520230e-02, -2.71754150e-02,
                  -3.88077410e-02, -2.09544130e-02, -1.86821670e-02, -1.07957500e-02,
                  -2.22622550e-02, -2.06630660e-02, -1.86227120e-02, -1.58494500e-02,
                  -1.66297680e-02, -1.39390020e-02, -1.88885210e-02, -2.56573430e-02,
                  -7.95233500e-03, -2.83050940e-02, -1.63160140e-02, -7.48229300e-03,
                  9.92026384e-01, -2.55542270e-02, -1.42224150e-02, -8.40891300e-03,
                  -8.86719900e-03, -9.13481200e-03, -9.02514700e-03, -4.01341200e-03,
                  -3.13807800e-03, -9.15433700e-03, -8.17889000e-03, -5.75575300e-03,
                  -1.16288610e-02, -1.18023390e-02, -4.21444000e-04
              ],
              [
                  -1.30509100e-03, -3.25647800e-03, -3.74148800e-03, -4.12200600e-03,
                  -4.01006700e-03, -4.71560000e-03, -5.68394900e-03, -1.16944900e-03,
                  -4.36240300e-03, -5.42834800e-03, -5.23331100e-03, -4.45145100e-03,
                  -5.97161800e-03, -5.03909600e-03, -2.84432200e-03, -4.19011100e-03,
                  -6.69840200e-03, -4.46712500e-03, -5.89057600e-03, -8.70001500e-03,
                  -6.00786800e-03, 9.89898438e-01, -7.90803600e-03, -4.19774700e-03,
                  -2.13699640e-02, -1.87325120e-02, -8.64539300e-03, -9.37384200e-03,
                  -2.60345700e-03, -1.40478960e-02, -1.05325500e-02, -6.71361600e-03,
                  -8.26005000e-03, -1.18262960e-02, -7.63822000e-05
              ],
              [
                  -1.33858620e-02, -2.13350170e-02, -2.33316040e-02, -2.00324940e-02,
                  -2.17707720e-02, -2.41246360e-02, -1.90230470e-02, -2.57642940e-02,
                  -1.83425600e-02, -1.72162600e-02, -3.35404680e-02, -1.72889610e-02,
                  -1.25076720e-02, -8.40373000e-03, -1.21207680e-02, -1.89214620e-02,
                  -2.37191630e-02, -1.60846190e-02, -1.38850950e-02, -1.92238400e-02,
                  -1.14877020e-02, -9.66068000e-03, 9.54184625e-01, -4.28540730e-02,
                  -1.31121920e-02, -5.98202400e-02, -9.46170600e-03, -5.47305200e-03,
                  -1.80141700e-03, -6.18510500e-03, -1.12100050e-02, -1.02842560e-02,
                  -7.41848700e-03, -9.45637300e-03, -4.61871000e-04
              ],
              [
                  -3.57521600e-03, -5.60032200e-03, -4.92494100e-03, -4.38117600e-03,
                  -6.06715700e-03, -8.20122800e-03, -3.55771500e-03, -5.39717800e-03,
                  -3.35709500e-03, -3.40287300e-03, -7.77902500e-03, -6.12183300e-03,
                  -2.82989700e-03, -2.13863800e-03, -2.12335200e-03, -2.57685500e-03,
                  -2.84682700e-03, -4.02548500e-03, -1.17593800e-03, -2.74778700e-03,
                  -1.53175800e-03, -2.08488500e-03, -3.21210100e-03, 9.01025364e-01,
                  -3.16431000e-03, -6.18113200e-03, -8.79505000e-04, -4.72539000e-04,
                  -2.40324000e-04, -9.27105000e-04, -1.24293200e-03, -1.40573700e-03,
                  -5.97107000e-04, -1.22364200e-03, -1.89214000e-05
              ],
              [
                  -7.02209000e-04, -1.89233800e-03, -1.45277600e-03, -1.86593500e-03,
                  -2.91427700e-03, -1.59412400e-03, -2.39070900e-03, -6.28888000e-04,
                  -1.89982800e-03, -2.02734900e-03, -1.60123600e-03, -1.47725500e-03,
                  -2.26489300e-03, -2.13934200e-03, -1.85541800e-03, -1.60814000e-03,
                  -1.15464900e-03, -1.17516700e-03, -1.85000300e-03, -3.57236300e-03,
                  -1.61762900e-03, -1.20296200e-03, -1.86300300e-03, -3.80468200e-03,
                  9.64949174e-01, -1.97969790e-02, -4.32248100e-03, -3.31382200e-03,
                  -6.00806000e-04, -4.58653200e-03, -4.36126900e-03, -2.21333700e-03,
                  -1.26459000e-03, -4.51273300e-03, -1.24950000e-05
              ],
              [
                  -3.56529300e-03, -5.46337200e-03, -6.19539400e-03, -4.10723900e-03,
                  -5.24867000e-03, -7.22589300e-03, -8.63769200e-03, -5.64294100e-03,
                  -5.08059700e-03, -5.10167500e-03, -8.38912700e-03, -5.06949600e-03,
                  -4.69872600e-03, -3.52248200e-03, -4.52169000e-03, -4.73062100e-03,
                  -4.30348800e-03, -3.95238600e-03, -9.40433600e-03, -2.17944130e-02,
                  -1.07052850e-02, -7.89669300e-03, -4.11907550e-02, -1.32571599e-01,
                  -9.57297390e-02, 8.93633613e-01, -4.65420500e-03, -3.83287300e-03,
                  -8.52613000e-04, -5.09527000e-03, -4.81002800e-03, -2.58407500e-03,
                  -2.99760300e-03, -5.94350500e-03, -4.06301000e-05
              ],
              [
                  -2.29236400e-03, -5.81364000e-03, -4.26725700e-03, -4.98984000e-03,
                  -5.68613800e-03, -5.23143400e-03, -1.22924660e-02, -2.39728000e-03,
                  -7.36324100e-03, -6.03584200e-03, -6.14534800e-03, -5.65699600e-03,
                  -7.56553800e-03, -6.89440700e-03, -4.37892700e-03, -7.15007600e-03,
                  -6.30834600e-03, -1.07179430e-02, -1.33019900e-02, -2.03915890e-02,
                  -2.09112120e-02, -1.27100470e-02, -1.50209460e-02, -1.72602080e-02,
                  -2.63459010e-02, -2.35819680e-02, 8.78383098e-01, -2.78007640e-02,
                  -4.80808900e-03, -2.43341570e-02, -2.04518090e-02, -9.41139100e-03,
                  -1.18500260e-02, -2.36618750e-02, -3.15848000e-04
              ],
              [
                  -2.03821940e-02, -3.05197300e-02, -1.56910930e-02, -2.16861110e-02,
                  -1.69302130e-02, -1.99645250e-02, -2.35754040e-02, -1.09006050e-02,
                  -1.86944100e-02, -1.80410570e-02, -2.28449610e-02, -1.85611360e-02,
                  -1.87423330e-02, -1.47374890e-02, -1.41854450e-02, -2.24496770e-02,
                  -2.57493840e-02, -2.10912210e-02, -2.42248900e-02, -3.86478080e-02,
                  -3.57053980e-02, -2.53203680e-02, -4.71560830e-02, -4.09628990e-02,
                  -3.81523710e-02, -2.57814450e-02, -2.30614770e-02, 8.02261867e-01,
                  -5.97102530e-02, -3.82918450e-02, -2.49818710e-02, -1.26932540e-02,
                  -2.26412840e-02, -3.73341060e-02, -5.60951200e-03
              ],
              [
                  -5.29093600e-03, -5.08894300e-03, -4.37820700e-03, -5.04262200e-03,
                  -4.70968800e-03, -5.67021400e-03, -8.96387700e-03, -2.05461800e-03,
                  -4.52316300e-03, -6.08976300e-03, -4.88509700e-03, -5.14596100e-03,
                  -5.97795400e-03, -4.42992800e-03, -4.46442200e-03, -7.45980400e-03,
                  -5.73221400e-03, -9.33572900e-03, -2.33819510e-02, -2.44356170e-02,
                  -4.23012320e-02, -2.79797340e-02, -9.58868600e-03, -1.98556210e-02,
                  -1.36472650e-02, -2.07618010e-02, -1.63217550e-02, -2.40402980e-02,
                  9.65290311e-01, -2.40001060e-02, -1.39644430e-02, -1.84549580e-02,
                  -3.29025790e-02, -2.61221850e-02, -2.17713000e-04
              ],
              [
                  -1.17201700e-02, -3.02333010e-02, -3.87362560e-02, -2.81632600e-02,
                  -2.45472870e-02, -2.54141710e-02, -6.34851290e-02, -1.28772570e-02,
                  -6.45078810e-02, -3.68928350e-02, -3.29984530e-02, -2.94769820e-02,
                  -4.38745470e-02, -5.24078530e-02, -3.93445210e-02, -3.63057610e-02,
                  -4.23805470e-02, -5.52348600e-02, -4.81608130e-02, -5.61393330e-02,
                  -6.41435930e-02, -3.89119020e-02, -4.25388810e-02, -3.77242260e-02,
                  -9.45751230e-02, -6.60920460e-02, -7.40166940e-02, -9.67860240e-02,
                  -3.31306650e-02, 8.60112142e-01, -6.47975920e-02, -2.93428060e-02,
                  -5.49369330e-02, -7.49792450e-02, -1.73238300e-03
              ],
              [
                  -1.53329600e-03, -3.52352600e-03, -1.80898200e-03, -1.16181200e-03,
                  -8.59841000e-04, -3.38919700e-03, -2.91006400e-03, -7.80683000e-04,
                  -2.69158600e-03, -2.08190900e-03, -2.16623600e-03, -2.17323600e-03,
                  -1.17977800e-03, -1.24226900e-03, -1.19861800e-03, -2.03152300e-03,
                  -4.79311500e-03, -1.61283700e-03, -2.19655600e-03, -1.58207500e-03,
                  -3.20119100e-03, -3.58110300e-03, -2.82842900e-03, -6.52675500e-03,
                  -8.13696800e-03, -3.13430600e-03, -2.96432400e-03, -1.56750800e-03,
                  -3.06347800e-03, -2.65468900e-03, 9.92754556e-01, -4.05003400e-03,
                  -4.47301400e-03, -7.72696800e-03, -7.21756000e-06
              ],
              [
                  -6.49592000e-04, -4.73713000e-04, -4.53634000e-04, -4.20937000e-04,
                  -4.30526000e-04, -3.48009000e-04, -7.17030000e-04, -3.52765000e-04,
                  -9.42392000e-04, -6.21962000e-04, -5.99509000e-04, -6.16173000e-04,
                  -8.07938000e-04, -8.47838000e-04, -7.61920000e-04, -4.42849000e-04,
                  -9.82237000e-04, -4.88133000e-04, -7.27229000e-04, -8.36370000e-04,
                  -1.75627700e-03, -5.33268000e-04, -1.18519700e-03, -3.71192000e-04,
                  -1.65905800e-03, -1.14824200e-03, -1.53155700e-03, -1.24811400e-03,
                  -2.89270000e-04, -2.34722500e-03, -4.46265600e-03, 9.90436000e-01,
                  -1.09285600e-03, -1.59562900e-03, -3.04567000e-06
              ],
              [
                  -1.54317500e-03, -4.08586000e-04, -4.74207000e-04, -4.22906000e-04,
                  -8.98024000e-04, -3.97119000e-04, -4.23144000e-04, -1.62654000e-04,
                  -4.94802000e-04, -3.97268000e-04, -4.06935000e-04, -3.60302000e-04,
                  -5.25006000e-04, -3.77479000e-04, -3.43459000e-04, -4.67281000e-04,
                  -3.49448000e-04, -4.79681000e-04, -5.90122000e-04, -6.27712000e-04,
                  -4.84990000e-04, -1.13234500e-03, -7.44808000e-04, -3.84915000e-04,
                  -4.87678000e-04, -6.13436000e-04, -7.19737000e-04, -5.64745000e-04,
                  -9.99390000e-05, -7.92345000e-04, -5.59470800e-03, -1.47453000e-03,
                  9.74990608e-01, -1.31079300e-03, -1.56567000e-07
              ],
              [
                  -2.49435000e-03, -6.25173400e-03, -5.87297700e-03, -5.27695300e-03,
                  -6.26516100e-03, -5.46552300e-03, -1.33355680e-02, -2.72073400e-03,
                  -7.80179500e-03, -5.57794400e-03, -5.56736700e-03, -6.40291200e-03,
                  -6.03313700e-03, -4.83425600e-03, -4.36000800e-03, -6.43106300e-03,
                  -6.31769600e-03, -6.18628200e-03, -8.97510500e-03, -8.45113600e-03,
                  -9.33925900e-03, -1.36459160e-02, -8.04686900e-03, -5.48695400e-03,
                  -8.59932900e-03, -1.12235750e-02, -1.98538250e-02, -1.06303220e-02,
                  -7.66493700e-03, -2.78107530e-02, -1.55394180e-02, -1.05695880e-02,
                  -1.51531150e-02, 9.20320471e-01, -1.33139600e-03
              ],
              [
                  -1.63360000e-05, -1.97956000e-05, -2.85695000e-05, -5.32798000e-05,
                  -2.79486000e-05, -3.83786000e-05, -4.07698000e-05, -1.24051000e-05,
                  -3.46268000e-05, -4.08863000e-05, -2.28410000e-05, -2.36591000e-05,
                  -2.75941000e-05, -2.03107000e-05, -3.96587000e-05, -2.71574000e-05,
                  -1.66392000e-05, -7.72898000e-05, -1.05669000e-04, -2.16105000e-05,
                  -5.31545000e-05, -6.02959000e-05, -1.04877000e-04, -1.55566000e-05,
                  -2.71625000e-05, -2.45078000e-05, -6.14635000e-05, -6.45951000e-05,
                  -2.85292000e-04, -7.31980000e-05, -8.23840000e-05, -4.19294000e-05,
                  -1.12235000e-04, -1.35981000e-04, 9.99924150e-01
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def ia_matrix_2001():
    """
    Real Name: b'ia matrix 2001'
    Original Eqn: b'0.871009342,-0.00130797,-0.25641065,-0.038414818,-0.035569611,-0.125822581,-0.011695,-0.001741439,-0.005024294,-0.013502866,-0.000705558,-0.000257418,-0.000264066,-0.000188959,-0.000153783,-0.009660785,-0.000437962,-0.008648063,-0.000472555,-0.002897472,-0.002372607,-0.037817046,-0.001314873,-0.001505526,-0.000314297,-0.003890489,-0.000245394,-0.00013934,-0.000385154,-0.000650331,-0.002018589,-0.002140676,-0.002236508,-0.002391716,-0.015891051;-0.003231349,0.924562415,-0.002580875,-0.001943225,-0.000849562,-0.003703303,-0.004120634,-0.434928026,-0.033294368,-0.003054123,-0.066567454,-0.043787224,-0.002981953,-0.001250254,-0.001194567,-0.005644336,-0.109148246,-0.017724304,-0.000443248,-0.000717295,-0.000985758,-0.001530257,-0.003946111,-0.002658342,-0.001992056,-0.001564707,-0.000484474,-0.000261638,-0.001803935,-0.000828771,-0.001859956,-0.003390831,-0.001008301,-0.002454635,-0.062407836;-0.054453981,-0.000718921,0.853886462,-0.002782729,-0.082932958,-0.001301409,-0.002673998,-0.000820696,-0.009605069,-0.002854879,-0.001513816,-0.00094353,-0.001111951,-0.000990502,-0.000899276,-0.002083445,-0.000701955,-0.0009584,-0.001700753,-0.004591647,-0.004390947,-0.14828038,-0.001262997,-0.008076718,-0.003228536,-0.001855182,-0.001612447,-0.000716764,-0.000241357,-0.00155686,-0.008261021,-0.007722549,-0.013391848,-0.006250972,-0.003162994;-0.002041249,-0.001135117,-0.001320705,0.707021092,-0.05022159,-0.003530146,-0.005291103,-0.000569802,-0.003260532,-0.012262637,-0.004198338,-0.001436498,-0.002520761,-0.001842111,-0.005650828,-0.023325841,-0.000463625,-0.00218027,-0.001442481,-0.002375882,-0.002802589,-0.002587306,-0.001487502,-0.001982298,-0.001090993,-0.001493909,-0.000938267,-0.000479772,-0.000252415,-0.001030985,-0.003420472,-0.000920227,-0.002922983,-0.00564666,-0.0002047;-0.000154005,-0.000106551,-0.000148194,-0.006257462,0.796680666,-0.000551543,-0.000668556,-7.02552e-05,-0.000230984,-0.001285762,-0.000400703,-0.000246287,-0.000296748,-0.000256744,-0.001356302,-0.003835132,-0.000133012,-0.000141174,-0.000426617,-0.000426954,-0.000336744,-0.000144461,-0.000195533,-0.000152498,-0.0001287,-0.000176916,-0.000318897,-4.09079e-05,-1.21218e-05,-0.000109059,-0.000617432,-0.000121628,-0.000136797,-0.0004378,-7.87636e-06;-0.002015468,-0.001644085,-0.001614212,-0.001315027,-0.001832574,0.788789098,-0.010044516,-0.000325046,-0.001534897,-0.003184429,-0.006009824,-0.002815463,-0.002761252,-0.001511309,-0.00270877,-0.073157591,-0.000883134,-0.031852038,-0.00069188,-0.001494847,-0.001317321,-0.002158079,-0.00117419,-0.000496645,-0.00035487,-0.003106756,-0.000703157,-0.000385638,-0.001975221,-0.000855742,-0.001390893,-0.002004033,-0.000945602,-0.002752617,-0.000143899;-0.002617515,-0.002920667,-0.02445819,-0.010694158,-0.012831759,-0.012486336,0.773680179,-0.00140137,-0.017177409,-0.017323386,-0.020378345,-0.005493695,-0.008797141,-0.012112747,-0.005014773,-0.021523677,-0.004552866,-0.00458042,-0.007734807,-0.013196077,-0.012673072,-0.008694611,-0.005864279,-0.002826302,-0.005923661,-0.013767352,-0.011884616,-0.01341445,-0.002355962,-0.02165984,-0.017252852,-0.018151513,-0.00901752,-0.025211722,-0.000237953;-0.012669351,-0.010987213,-0.003339118,-0.005388715,-0.003696622,-0.005024828,-0.004327241,0.954259563,-0.029946909,-0.00801612,-0.0168267,-0.008958074,-0.003618318,-0.002252943,-0.001906525,-0.004032913,-0.020358186,-0.01248846,-0.004226546,-0.005776087,-0.004304134,-0.003541385,-0.051205819,-0.069479216,-0.063962234,-0.0139503,-0.003297682,-0.001210981,-0.001122056,-0.004381679,-0.007887059,-0.002787956,-0.002991292,-0.005263668,-5.23389e-05;-0.038459614,-0.011203503,-0.010411666,-0.068915471,-0.03562473,-0.031295855,-0.034100637,-0.014178596,0.772548756,-0.198434015,-0.031565318,-0.015238937,-0.01153714,-0.01687117,-0.011963407,-0.028616763,-0.006203985,-0.010302071,-0.006258106,-0.00319812,-0.002416044,-0.004736017,-0.003155974,-0.003483663,-0.003218783,-0.003613624,-0.001479944,-0.00089555,-0.00193523,-0.004718596,-0.009238611,-0.003765227,-0.062981982,-0.010024668,-0.000144636;-0.004956749,-0.007209875,-0.016514787,-0.00967522,-0.034941631,-0.009250782,-0.014906878,-0.002835085,-0.018275062,0.876839599,-0.010618957,-0.007275059,-0.026960095,-0.02424074,-0.034731551,-0.035530798,-0.002756742,-0.017779925,-0.016513829,-0.004562698,-0.004987632,-0.004046385,-0.009867926,-0.002875949,-0.002935882,-0.005868081,-0.003412718,-0.00061019,-0.00106058,-0.002647119,-0.00311271,-0.000905112,-0.005225996,-0.003588339,-4.32137e-05;-0.002268991,-0.004554566,-0.005881846,-0.002318836,-0.001922327,-0.008129758,-0.001315945,-0.001968636,-0.006145996,-0.006580131,0.884510384,-0.010290057,-0.005774869,-0.01112299,-0.006990083,-0.006568663,-0.002096595,-0.075855209,-0.002903729,-0.001381507,-0.001056544,-0.003535551,-0.001276583,-0.000639461,-0.000555258,-0.001380776,-0.001182812,-0.000187299,-0.002023066,-0.00101768,-0.001342169,-0.001726747,-0.002079469,-0.002017692,-4.08388e-05;-0.004560348,-0.022994076,-0.013797071,-0.005747364,-0.010377935,-0.025243831,-0.008708123,-0.006965946,-0.014639147,-0.025015051,-0.031797343,0.687799304,-0.159792443,-0.062791749,-0.094599653,-0.092904061,-0.007781144,-0.087054428,-0.017926084,-0.004203362,-0.003714246,-0.004303335,-0.006633184,-0.006496566,-0.005373179,-0.006385152,-0.003955828,-0.000668918,-0.002523664,-0.003536043,-0.004591198,-0.001771378,-0.002351261,-0.004521007,-0.000205571;-0.006858738,-0.01553685,-0.00394727,-0.007892632,-0.005240528,-0.008051417,-0.006450906,-0.00583449,-0.006562553,-0.010853824,-0.016140286,-0.016048995,0.878015708,-0.014158786,-0.030117702,-0.009683159,-0.008087413,-0.016935004,-0.021623769,-0.003958743,-0.002672284,-0.002106767,-0.005580365,-0.008448155,-0.00431436,-0.004673684,-0.002891118,-0.001004686,-0.001412352,-0.00298392,-0.005897205,-0.002156878,-0.002391337,-0.003432937,-8.52735e-05;-0.001867645,-0.00657285,-0.003507978,-0.00614547,-0.005030507,-0.006562771,-0.00974451,-0.004499262,-0.009369238,-0.013849262,-0.010280152,-0.016554866,-0.084004925,0.705977916,-0.053506997,-0.023279233,-0.016017206,-0.030917238,-0.025719113,-0.009313879,-0.007648534,-0.004394613,-0.006602659,-0.004253671,-0.004388795,-0.007728219,-0.039748179,-0.003812155,-0.00186657,-0.015239965,-0.01362345,-0.006284856,-0.02091665,-0.009784784,-0.00053865;-0.004278625,-0.006144322,-0.002198183,-0.002773068,-0.00240931,-0.003314516,-0.002297476,-0.001059345,-0.002183232,-0.004071458,-0.003574817,-0.005082676,-0.013197038,-0.004919513,0.705141366,-0.00471445,-0.001948236,-0.004235539,-0.085669022,-0.005766233,-0.004051716,-0.001328201,-0.033411681,-0.043136662,-0.051092603,-0.011604336,-0.003556572,-0.001128144,-0.001008316,-0.004002709,-0.015814335,-0.001518775,-0.001327068,-0.00474632,-0.000183717;-0.000717957,-0.001253746,-0.001148122,-0.0052736,-0.002989318,-0.004743271,-0.003743364,-0.000624477,-0.00178747,-0.00262821,-0.002992023,-0.00912002,-0.003897169,-0.002773255,-0.004834615,0.956186959,-0.00126427,-0.005009716,-0.002184313,-0.00131782,-0.001494333,-0.002573135,-0.001848784,-0.000782346,-0.00133153,-0.001642549,-0.001018666,-0.000948025,-0.001496562,-0.001935589,-0.003915362,-0.003136449,-0.002656246,-0.00575861,-0.002329361;-0.011000135,-0.027532869,-0.013701964,-0.018661715,-0.008252857,-0.018541218,-0.024418589,-0.013883548,-0.028595763,-0.024092667,-0.03949536,-0.029021346,-0.011775532,-0.009269415,-0.009295448,-0.010418221,0.911737396,-0.006181439,-0.010732033,-0.006412796,-0.014873492,-0.026121091,-0.014980133,-0.003672851,-0.004459509,-0.013761068,-0.009511722,-0.004627057,-0.012798428,-0.00696837,-0.016530515,-0.020589404,-0.014291573,-0.016783858,-0.000180232;-0.003818489,-0.007547106,-0.002377358,-0.002798649,-0.001852211,-0.003327174,-0.00339003,-0.002610824,-0.003455132,-0.003027493,-0.007099156,-0.004236684,-0.003406525,-0.002887474,-0.002198511,-0.002683431,-0.026705733,0.95588528,-0.004394135,-0.003919606,-0.004776192,-0.005762955,-0.009717779,-0.002737014,-0.002630356,-0.012772098,-0.011419782,-0.004950035,-0.040841201,-0.004888769,-0.018191884,-0.015665138,-0.006219454,-0.010334447,-0.00100998;-0.00488606,-0.004035789,-0.006771006,-0.005777508,-0.00781704,-0.005922209,-0.004866756,-0.002755547,-0.006091522,-0.006284694,-0.007314218,-0.005946675,-0.00521299,-0.004313447,-0.004953229,-0.006276774,-0.008016673,-0.00697247,0.989932764,-0.003944703,-0.004015245,-0.004940304,-0.016346618,-0.002216962,-0.003518303,-0.007151101,-0.003923619,-0.002426467,-0.001872301,-0.005698243,-0.004129509,-0.002872279,-0.003492647,-0.006279551,-2.75203e-05;-0.033217712,-0.026920957,-0.063965487,-0.055941554,-0.069249969,-0.056024676,-0.049631063,-0.040472308,-0.050728747,-0.05022076,-0.043771528,-0.045512924,-0.048248241,-0.045448777,-0.044336958,-0.052371773,-0.022731923,-0.0417049,-0.036274084,0.973368856,-0.013136843,-0.043912674,-0.021627687,-0.018903908,-0.021003149,-0.019618638,-0.010369469,-0.004200014,-0.003943586,-0.013035198,-0.020673158,-0.010364842,-0.026794661,-0.016154055,-0.000191677;-0.016671194,-0.010188135,-0.030911461,-0.027663071,-0.041245561,-0.02122943,-0.019003239,-0.011653281,-0.022347813,-0.020832584,-0.01952484,-0.016450141,-0.017307127,-0.014753783,-0.01920413,-0.025915665,-0.008488605,-0.029312039,-0.016164845,-0.007130474,0.992255281,-0.025788904,-0.013898824,-0.008059791,-0.009710794,-0.009092784,-0.00864205,-0.004174081,-0.002900749,-0.009227787,-0.008382634,-0.005816368,-0.011624605,-0.011486389,-0.000340523;-0.001297634,-0.003271942,-0.003674186,-0.004237697,-0.004017872,-0.004701979,-0.005963943,-0.001222989,-0.004428825,-0.005636089,-0.005383845,-0.004554,-0.006075621,-0.005193398,-0.002857179,-0.004174748,-0.009265071,-0.004432048,-0.005870148,-0.008468236,-0.005787023,0.990039037,-0.007934149,-0.004007511,-0.023574098,-0.017835499,-0.008941468,-0.009271043,-0.002481592,-0.013541387,-0.010473248,-0.006310026,-0.008002183,-0.011776789,-7.13389e-05;-0.012872262,-0.021730778,-0.022924055,-0.019599751,-0.020638618,-0.023960135,-0.018905482,-0.031313919,-0.018182196,-0.01747746,-0.033386871,-0.017427055,-0.012502847,-0.00877581,-0.011895779,-0.018699511,-0.023524757,-0.015971631,-0.014110145,-0.019051755,-0.011506397,-0.009416907,0.954110944,-0.044153199,-0.014305955,-0.059293136,-0.009043701,-0.00531541,-0.00189793,-0.005900498,-0.010911821,-0.010219689,-0.007144718,-0.009391508,-0.000333653;-0.003599337,-0.005843252,-0.004829616,-0.004727485,-0.006019853,-0.008645347,-0.003968466,-0.006698786,-0.003635877,-0.003890319,-0.009207763,-0.006676939,-0.003215691,-0.002428396,-0.002173755,-0.002854894,-0.003074334,-0.004449843,-0.001140895,-0.002969041,-0.001521159,-0.00185321,-0.003190298,0.894894468,-0.002973596,-0.006341478,-0.000808859,-0.000486273,-0.000420691,-0.001019307,-0.001443195,-0.00127214,-0.000577043,-0.001332256,-2.24734e-05;-0.000649311,-0.001905043,-0.001328073,-0.001788344,-0.002730879,-0.001678943,-0.00232686,-0.000608131,-0.001755267,-0.001941992,-0.001612535,-0.001409866,-0.002195247,-0.002075415,-0.001686393,-0.001489919,-0.001402897,-0.001076876,-0.001687527,-0.003142944,-0.001412355,-0.001088181,-0.002090981,-0.005279876,0.964872796,-0.019060553,-0.003652741,-0.00293696,-0.000536496,-0.004141851,-0.003888861,-0.001944755,-0.001175904,-0.00404695,-1.0273e-05;-0.00358025,-0.005514369,-0.006155069,-0.00403627,-0.004963675,-0.006740132,-0.009241314,-0.00674967,-0.005097918,-0.005244281,-0.008312919,-0.005165765,-0.00467059,-0.003570018,-0.004535437,-0.004723412,-0.004459775,-0.00413622,-0.009934307,-0.02082621,-0.010195508,-0.007717457,-0.040462594,-0.121261142,-0.099458321,0.892817943,-0.004622185,-0.003444688,-0.000937338,-0.005022814,-0.004755739,-0.002483856,-0.003033936,-0.006055191,-2.93923e-05;-0.002501192,-0.006238801,-0.004635441,-0.005619544,-0.006463389,-0.005670015,-0.01333907,-0.002725458,-0.008024302,-0.006608753,-0.006836475,-0.006319596,-0.00809418,-0.007795981,-0.004471182,-0.007922836,-0.007605216,-0.012044321,-0.014583751,-0.020324131,-0.020989635,-0.01321183,-0.015966607,-0.017811116,-0.027333583,-0.024326234,0.87297088,-0.027671626,-0.004866399,-0.025813582,-0.021648923,-0.009743622,-0.012511801,-0.023565825,-0.000364199;-0.020507185,-0.030739745,-0.015348359,-0.02188145,-0.015917441,-0.019120217,-0.024089633,-0.011654149,-0.018309943,-0.018080649,-0.023585442,-0.019086412,-0.018399199,-0.014969609,-0.013843343,-0.023471227,-0.030179119,-0.021032647,-0.023124205,-0.037068132,-0.034613194,-0.02553761,-0.046851617,-0.040307429,-0.03928175,-0.025865198,-0.022263501,0.795524057,-0.065695935,-0.037758961,-0.024038483,-0.011837414,-0.022749981,-0.040923532,-0.00776897;-0.005455381,-0.005794982,-0.004645068,-0.005095725,-0.004584883,-0.006138845,-0.009714716,-0.002312515,-0.004725053,-0.006333867,-0.005084079,-0.00549077,-0.006174181,-0.00486759,-0.004657973,-0.007554123,-0.007233132,-0.010053168,-0.02258489,-0.02358628,-0.039505593,-0.028892637,-0.009595417,-0.019239737,-0.013468972,-0.021572838,-0.017040141,-0.022706529,0.964696522,-0.024073015,-0.015383105,-0.01948701,-0.033300887,-0.026569553,-0.000122766;-0.011385567,-0.031026575,-0.039002404,-0.02811605,-0.022887243,-0.025436226,-0.065060116,-0.014034772,-0.066761793,-0.038681927,-0.033894253,-0.031011171,-0.045131509,-0.054874694,-0.04098146,-0.036600057,-0.054175754,-0.055242258,-0.050444485,-0.053548775,-0.059930856,-0.039931347,-0.043200087,-0.034189465,-0.093284807,-0.06652978,-0.072877445,-0.093595103,-0.032515704,0.857281314,-0.070404848,-0.030903932,-0.056149609,-0.075894201,-0.002219784;-0.001502947,-0.003851298,-0.001863446,-0.00114776,-0.000784077,-0.003257023,-0.003094049,-0.000910514,-0.002750791,-0.002189272,-0.002185744,-0.002354933,-0.001192293,-0.001248479,-0.001235067,-0.002039017,-0.005079163,-0.001672876,-0.002299865,-0.001479129,-0.002909189,-0.003647175,-0.00297314,-0.00619151,-0.009039992,-0.003292474,-0.002914486,-0.001490543,-0.003207629,-0.002733989,0.992681121,-0.004221287,-0.004510136,-0.008061367,-5.96045e-06;-0.000587064,-0.000470894,-0.000473913,-0.000456108,-0.000480337,-0.000386598,-0.000772204,-0.000400876,-0.00091005,-0.000670137,-0.000620913,-0.000642119,-0.00085499,-0.000886816,-0.000715297,-0.000477143,-0.001090799,-0.000509598,-0.000800971,-0.000778768,-0.001465193,-0.000566704,-0.001143238,-0.00043978,-0.001882858,-0.001171412,-0.001616978,-0.001277496,-0.000296894,-0.002288518,-0.004383454,0.989324308,-0.001135985,-0.00158405,-4.00135e-06;-0.001491814,-0.000415041,-0.000508749,-0.000422707,-0.001028419,-0.000410861,-0.00043634,-0.000189798,-0.000518675,-0.000412513,-0.000421351,-0.000381125,-0.00054704,-0.000405702,-0.000361286,-0.000493901,-0.000342344,-0.000461085,-0.000578658,-0.000616261,-0.000467646,-0.001114325,-0.00071247,-0.000360557,-0.000462823,-0.000643993,-0.00069855,-0.000539821,-9.42046e-05,-0.000770266,-0.005254157,-0.001527145,0.975007213,-0.001226622,-9.29981e-08;-0.002548267,-0.00674309,-0.005729933,-0.005379013,-0.006544487,-0.005392896,-0.013777546,-0.002794296,-0.007765519,-0.005746772,-0.005738315,-0.006320995,-0.005831657,-0.004862391,-0.004345819,-0.00613716,-0.007118284,-0.006161883,-0.008620044,-0.008139943,-0.008672772,-0.013131125,-0.009187843,-0.005288448,-0.008492492,-0.010658929,-0.019788541,-0.009888818,-0.007264161,-0.027075469,-0.015566205,-0.010378109,-0.014274135,0.920004935,-0.001688324;-1.7347e-05,-2.28642e-05,-2.6553e-05,-5.6109e-05,-2.62342e-05,-3.41391e-05,-4.1307e-05,-1.33692e-05,-3.36486e-05,-4.08335e-05,-2.24359e-05,-2.30104e-05,-2.61862e-05,-1.94134e-05,-4.09892e-05,-2.43773e-05,-1.94098e-05,-7.32694e-05,-6.68004e-05,-1.56339e-05,-4.1984e-05,-5.36295e-05,-8.86582e-05,-1.30926e-05,-2.73819e-05,-2.13976e-05,-5.13832e-05,-5.63822e-05,-0.000261832,-6.71376e-05,-7.32823e-05,-4.11591e-05,-8.69702e-05,-0.000124841,0.999910943;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            8.71009342e-01, -1.30797000e-03, -2.56410650e-01, -3.84148180e-02, -3.55696110e-02,
            -1.25822581e-01, -1.16950000e-02, -1.74143900e-03, -5.02429400e-03, -1.35028660e-02,
            -7.05558000e-04, -2.57418000e-04, -2.64066000e-04, -1.88959000e-04, -1.53783000e-04,
            -9.66078500e-03, -4.37962000e-04, -8.64806300e-03, -4.72555000e-04, -2.89747200e-03,
            -2.37260700e-03, -3.78170460e-02, -1.31487300e-03, -1.50552600e-03, -3.14297000e-04,
            -3.89048900e-03, -2.45394000e-04, -1.39340000e-04, -3.85154000e-04, -6.50331000e-04,
            -2.01858900e-03, -2.14067600e-03, -2.23650800e-03, -2.39171600e-03, -1.58910510e-02
        ],
              [
                  -3.23134900e-03, 9.24562415e-01, -2.58087500e-03, -1.94322500e-03,
                  -8.49562000e-04, -3.70330300e-03, -4.12063400e-03, -4.34928026e-01,
                  -3.32943680e-02, -3.05412300e-03, -6.65674540e-02, -4.37872240e-02,
                  -2.98195300e-03, -1.25025400e-03, -1.19456700e-03, -5.64433600e-03,
                  -1.09148246e-01, -1.77243040e-02, -4.43248000e-04, -7.17295000e-04,
                  -9.85758000e-04, -1.53025700e-03, -3.94611100e-03, -2.65834200e-03,
                  -1.99205600e-03, -1.56470700e-03, -4.84474000e-04, -2.61638000e-04,
                  -1.80393500e-03, -8.28771000e-04, -1.85995600e-03, -3.39083100e-03,
                  -1.00830100e-03, -2.45463500e-03, -6.24078360e-02
              ],
              [
                  -5.44539810e-02, -7.18921000e-04, 8.53886462e-01, -2.78272900e-03,
                  -8.29329580e-02, -1.30140900e-03, -2.67399800e-03, -8.20696000e-04,
                  -9.60506900e-03, -2.85487900e-03, -1.51381600e-03, -9.43530000e-04,
                  -1.11195100e-03, -9.90502000e-04, -8.99276000e-04, -2.08344500e-03,
                  -7.01955000e-04, -9.58400000e-04, -1.70075300e-03, -4.59164700e-03,
                  -4.39094700e-03, -1.48280380e-01, -1.26299700e-03, -8.07671800e-03,
                  -3.22853600e-03, -1.85518200e-03, -1.61244700e-03, -7.16764000e-04,
                  -2.41357000e-04, -1.55686000e-03, -8.26102100e-03, -7.72254900e-03,
                  -1.33918480e-02, -6.25097200e-03, -3.16299400e-03
              ],
              [
                  -2.04124900e-03, -1.13511700e-03, -1.32070500e-03, 7.07021092e-01,
                  -5.02215900e-02, -3.53014600e-03, -5.29110300e-03, -5.69802000e-04,
                  -3.26053200e-03, -1.22626370e-02, -4.19833800e-03, -1.43649800e-03,
                  -2.52076100e-03, -1.84211100e-03, -5.65082800e-03, -2.33258410e-02,
                  -4.63625000e-04, -2.18027000e-03, -1.44248100e-03, -2.37588200e-03,
                  -2.80258900e-03, -2.58730600e-03, -1.48750200e-03, -1.98229800e-03,
                  -1.09099300e-03, -1.49390900e-03, -9.38267000e-04, -4.79772000e-04,
                  -2.52415000e-04, -1.03098500e-03, -3.42047200e-03, -9.20227000e-04,
                  -2.92298300e-03, -5.64666000e-03, -2.04700000e-04
              ],
              [
                  -1.54005000e-04, -1.06551000e-04, -1.48194000e-04, -6.25746200e-03,
                  7.96680666e-01, -5.51543000e-04, -6.68556000e-04, -7.02552000e-05,
                  -2.30984000e-04, -1.28576200e-03, -4.00703000e-04, -2.46287000e-04,
                  -2.96748000e-04, -2.56744000e-04, -1.35630200e-03, -3.83513200e-03,
                  -1.33012000e-04, -1.41174000e-04, -4.26617000e-04, -4.26954000e-04,
                  -3.36744000e-04, -1.44461000e-04, -1.95533000e-04, -1.52498000e-04,
                  -1.28700000e-04, -1.76916000e-04, -3.18897000e-04, -4.09079000e-05,
                  -1.21218000e-05, -1.09059000e-04, -6.17432000e-04, -1.21628000e-04,
                  -1.36797000e-04, -4.37800000e-04, -7.87636000e-06
              ],
              [
                  -2.01546800e-03, -1.64408500e-03, -1.61421200e-03, -1.31502700e-03,
                  -1.83257400e-03, 7.88789098e-01, -1.00445160e-02, -3.25046000e-04,
                  -1.53489700e-03, -3.18442900e-03, -6.00982400e-03, -2.81546300e-03,
                  -2.76125200e-03, -1.51130900e-03, -2.70877000e-03, -7.31575910e-02,
                  -8.83134000e-04, -3.18520380e-02, -6.91880000e-04, -1.49484700e-03,
                  -1.31732100e-03, -2.15807900e-03, -1.17419000e-03, -4.96645000e-04,
                  -3.54870000e-04, -3.10675600e-03, -7.03157000e-04, -3.85638000e-04,
                  -1.97522100e-03, -8.55742000e-04, -1.39089300e-03, -2.00403300e-03,
                  -9.45602000e-04, -2.75261700e-03, -1.43899000e-04
              ],
              [
                  -2.61751500e-03, -2.92066700e-03, -2.44581900e-02, -1.06941580e-02,
                  -1.28317590e-02, -1.24863360e-02, 7.73680179e-01, -1.40137000e-03,
                  -1.71774090e-02, -1.73233860e-02, -2.03783450e-02, -5.49369500e-03,
                  -8.79714100e-03, -1.21127470e-02, -5.01477300e-03, -2.15236770e-02,
                  -4.55286600e-03, -4.58042000e-03, -7.73480700e-03, -1.31960770e-02,
                  -1.26730720e-02, -8.69461100e-03, -5.86427900e-03, -2.82630200e-03,
                  -5.92366100e-03, -1.37673520e-02, -1.18846160e-02, -1.34144500e-02,
                  -2.35596200e-03, -2.16598400e-02, -1.72528520e-02, -1.81515130e-02,
                  -9.01752000e-03, -2.52117220e-02, -2.37953000e-04
              ],
              [
                  -1.26693510e-02, -1.09872130e-02, -3.33911800e-03, -5.38871500e-03,
                  -3.69662200e-03, -5.02482800e-03, -4.32724100e-03, 9.54259563e-01,
                  -2.99469090e-02, -8.01612000e-03, -1.68267000e-02, -8.95807400e-03,
                  -3.61831800e-03, -2.25294300e-03, -1.90652500e-03, -4.03291300e-03,
                  -2.03581860e-02, -1.24884600e-02, -4.22654600e-03, -5.77608700e-03,
                  -4.30413400e-03, -3.54138500e-03, -5.12058190e-02, -6.94792160e-02,
                  -6.39622340e-02, -1.39503000e-02, -3.29768200e-03, -1.21098100e-03,
                  -1.12205600e-03, -4.38167900e-03, -7.88705900e-03, -2.78795600e-03,
                  -2.99129200e-03, -5.26366800e-03, -5.23389000e-05
              ],
              [
                  -3.84596140e-02, -1.12035030e-02, -1.04116660e-02, -6.89154710e-02,
                  -3.56247300e-02, -3.12958550e-02, -3.41006370e-02, -1.41785960e-02,
                  7.72548756e-01, -1.98434015e-01, -3.15653180e-02, -1.52389370e-02,
                  -1.15371400e-02, -1.68711700e-02, -1.19634070e-02, -2.86167630e-02,
                  -6.20398500e-03, -1.03020710e-02, -6.25810600e-03, -3.19812000e-03,
                  -2.41604400e-03, -4.73601700e-03, -3.15597400e-03, -3.48366300e-03,
                  -3.21878300e-03, -3.61362400e-03, -1.47994400e-03, -8.95550000e-04,
                  -1.93523000e-03, -4.71859600e-03, -9.23861100e-03, -3.76522700e-03,
                  -6.29819820e-02, -1.00246680e-02, -1.44636000e-04
              ],
              [
                  -4.95674900e-03, -7.20987500e-03, -1.65147870e-02, -9.67522000e-03,
                  -3.49416310e-02, -9.25078200e-03, -1.49068780e-02, -2.83508500e-03,
                  -1.82750620e-02, 8.76839599e-01, -1.06189570e-02, -7.27505900e-03,
                  -2.69600950e-02, -2.42407400e-02, -3.47315510e-02, -3.55307980e-02,
                  -2.75674200e-03, -1.77799250e-02, -1.65138290e-02, -4.56269800e-03,
                  -4.98763200e-03, -4.04638500e-03, -9.86792600e-03, -2.87594900e-03,
                  -2.93588200e-03, -5.86808100e-03, -3.41271800e-03, -6.10190000e-04,
                  -1.06058000e-03, -2.64711900e-03, -3.11271000e-03, -9.05112000e-04,
                  -5.22599600e-03, -3.58833900e-03, -4.32137000e-05
              ],
              [
                  -2.26899100e-03, -4.55456600e-03, -5.88184600e-03, -2.31883600e-03,
                  -1.92232700e-03, -8.12975800e-03, -1.31594500e-03, -1.96863600e-03,
                  -6.14599600e-03, -6.58013100e-03, 8.84510384e-01, -1.02900570e-02,
                  -5.77486900e-03, -1.11229900e-02, -6.99008300e-03, -6.56866300e-03,
                  -2.09659500e-03, -7.58552090e-02, -2.90372900e-03, -1.38150700e-03,
                  -1.05654400e-03, -3.53555100e-03, -1.27658300e-03, -6.39461000e-04,
                  -5.55258000e-04, -1.38077600e-03, -1.18281200e-03, -1.87299000e-04,
                  -2.02306600e-03, -1.01768000e-03, -1.34216900e-03, -1.72674700e-03,
                  -2.07946900e-03, -2.01769200e-03, -4.08388000e-05
              ],
              [
                  -4.56034800e-03, -2.29940760e-02, -1.37970710e-02, -5.74736400e-03,
                  -1.03779350e-02, -2.52438310e-02, -8.70812300e-03, -6.96594600e-03,
                  -1.46391470e-02, -2.50150510e-02, -3.17973430e-02, 6.87799304e-01,
                  -1.59792443e-01, -6.27917490e-02, -9.45996530e-02, -9.29040610e-02,
                  -7.78114400e-03, -8.70544280e-02, -1.79260840e-02, -4.20336200e-03,
                  -3.71424600e-03, -4.30333500e-03, -6.63318400e-03, -6.49656600e-03,
                  -5.37317900e-03, -6.38515200e-03, -3.95582800e-03, -6.68918000e-04,
                  -2.52366400e-03, -3.53604300e-03, -4.59119800e-03, -1.77137800e-03,
                  -2.35126100e-03, -4.52100700e-03, -2.05571000e-04
              ],
              [
                  -6.85873800e-03, -1.55368500e-02, -3.94727000e-03, -7.89263200e-03,
                  -5.24052800e-03, -8.05141700e-03, -6.45090600e-03, -5.83449000e-03,
                  -6.56255300e-03, -1.08538240e-02, -1.61402860e-02, -1.60489950e-02,
                  8.78015708e-01, -1.41587860e-02, -3.01177020e-02, -9.68315900e-03,
                  -8.08741300e-03, -1.69350040e-02, -2.16237690e-02, -3.95874300e-03,
                  -2.67228400e-03, -2.10676700e-03, -5.58036500e-03, -8.44815500e-03,
                  -4.31436000e-03, -4.67368400e-03, -2.89111800e-03, -1.00468600e-03,
                  -1.41235200e-03, -2.98392000e-03, -5.89720500e-03, -2.15687800e-03,
                  -2.39133700e-03, -3.43293700e-03, -8.52735000e-05
              ],
              [
                  -1.86764500e-03, -6.57285000e-03, -3.50797800e-03, -6.14547000e-03,
                  -5.03050700e-03, -6.56277100e-03, -9.74451000e-03, -4.49926200e-03,
                  -9.36923800e-03, -1.38492620e-02, -1.02801520e-02, -1.65548660e-02,
                  -8.40049250e-02, 7.05977916e-01, -5.35069970e-02, -2.32792330e-02,
                  -1.60172060e-02, -3.09172380e-02, -2.57191130e-02, -9.31387900e-03,
                  -7.64853400e-03, -4.39461300e-03, -6.60265900e-03, -4.25367100e-03,
                  -4.38879500e-03, -7.72821900e-03, -3.97481790e-02, -3.81215500e-03,
                  -1.86657000e-03, -1.52399650e-02, -1.36234500e-02, -6.28485600e-03,
                  -2.09166500e-02, -9.78478400e-03, -5.38650000e-04
              ],
              [
                  -4.27862500e-03, -6.14432200e-03, -2.19818300e-03, -2.77306800e-03,
                  -2.40931000e-03, -3.31451600e-03, -2.29747600e-03, -1.05934500e-03,
                  -2.18323200e-03, -4.07145800e-03, -3.57481700e-03, -5.08267600e-03,
                  -1.31970380e-02, -4.91951300e-03, 7.05141366e-01, -4.71445000e-03,
                  -1.94823600e-03, -4.23553900e-03, -8.56690220e-02, -5.76623300e-03,
                  -4.05171600e-03, -1.32820100e-03, -3.34116810e-02, -4.31366620e-02,
                  -5.10926030e-02, -1.16043360e-02, -3.55657200e-03, -1.12814400e-03,
                  -1.00831600e-03, -4.00270900e-03, -1.58143350e-02, -1.51877500e-03,
                  -1.32706800e-03, -4.74632000e-03, -1.83717000e-04
              ],
              [
                  -7.17957000e-04, -1.25374600e-03, -1.14812200e-03, -5.27360000e-03,
                  -2.98931800e-03, -4.74327100e-03, -3.74336400e-03, -6.24477000e-04,
                  -1.78747000e-03, -2.62821000e-03, -2.99202300e-03, -9.12002000e-03,
                  -3.89716900e-03, -2.77325500e-03, -4.83461500e-03, 9.56186959e-01,
                  -1.26427000e-03, -5.00971600e-03, -2.18431300e-03, -1.31782000e-03,
                  -1.49433300e-03, -2.57313500e-03, -1.84878400e-03, -7.82346000e-04,
                  -1.33153000e-03, -1.64254900e-03, -1.01866600e-03, -9.48025000e-04,
                  -1.49656200e-03, -1.93558900e-03, -3.91536200e-03, -3.13644900e-03,
                  -2.65624600e-03, -5.75861000e-03, -2.32936100e-03
              ],
              [
                  -1.10001350e-02, -2.75328690e-02, -1.37019640e-02, -1.86617150e-02,
                  -8.25285700e-03, -1.85412180e-02, -2.44185890e-02, -1.38835480e-02,
                  -2.85957630e-02, -2.40926670e-02, -3.94953600e-02, -2.90213460e-02,
                  -1.17755320e-02, -9.26941500e-03, -9.29544800e-03, -1.04182210e-02,
                  9.11737396e-01, -6.18143900e-03, -1.07320330e-02, -6.41279600e-03,
                  -1.48734920e-02, -2.61210910e-02, -1.49801330e-02, -3.67285100e-03,
                  -4.45950900e-03, -1.37610680e-02, -9.51172200e-03, -4.62705700e-03,
                  -1.27984280e-02, -6.96837000e-03, -1.65305150e-02, -2.05894040e-02,
                  -1.42915730e-02, -1.67838580e-02, -1.80232000e-04
              ],
              [
                  -3.81848900e-03, -7.54710600e-03, -2.37735800e-03, -2.79864900e-03,
                  -1.85221100e-03, -3.32717400e-03, -3.39003000e-03, -2.61082400e-03,
                  -3.45513200e-03, -3.02749300e-03, -7.09915600e-03, -4.23668400e-03,
                  -3.40652500e-03, -2.88747400e-03, -2.19851100e-03, -2.68343100e-03,
                  -2.67057330e-02, 9.55885280e-01, -4.39413500e-03, -3.91960600e-03,
                  -4.77619200e-03, -5.76295500e-03, -9.71777900e-03, -2.73701400e-03,
                  -2.63035600e-03, -1.27720980e-02, -1.14197820e-02, -4.95003500e-03,
                  -4.08412010e-02, -4.88876900e-03, -1.81918840e-02, -1.56651380e-02,
                  -6.21945400e-03, -1.03344470e-02, -1.00998000e-03
              ],
              [
                  -4.88606000e-03, -4.03578900e-03, -6.77100600e-03, -5.77750800e-03,
                  -7.81704000e-03, -5.92220900e-03, -4.86675600e-03, -2.75554700e-03,
                  -6.09152200e-03, -6.28469400e-03, -7.31421800e-03, -5.94667500e-03,
                  -5.21299000e-03, -4.31344700e-03, -4.95322900e-03, -6.27677400e-03,
                  -8.01667300e-03, -6.97247000e-03, 9.89932764e-01, -3.94470300e-03,
                  -4.01524500e-03, -4.94030400e-03, -1.63466180e-02, -2.21696200e-03,
                  -3.51830300e-03, -7.15110100e-03, -3.92361900e-03, -2.42646700e-03,
                  -1.87230100e-03, -5.69824300e-03, -4.12950900e-03, -2.87227900e-03,
                  -3.49264700e-03, -6.27955100e-03, -2.75203000e-05
              ],
              [
                  -3.32177120e-02, -2.69209570e-02, -6.39654870e-02, -5.59415540e-02,
                  -6.92499690e-02, -5.60246760e-02, -4.96310630e-02, -4.04723080e-02,
                  -5.07287470e-02, -5.02207600e-02, -4.37715280e-02, -4.55129240e-02,
                  -4.82482410e-02, -4.54487770e-02, -4.43369580e-02, -5.23717730e-02,
                  -2.27319230e-02, -4.17049000e-02, -3.62740840e-02, 9.73368856e-01,
                  -1.31368430e-02, -4.39126740e-02, -2.16276870e-02, -1.89039080e-02,
                  -2.10031490e-02, -1.96186380e-02, -1.03694690e-02, -4.20001400e-03,
                  -3.94358600e-03, -1.30351980e-02, -2.06731580e-02, -1.03648420e-02,
                  -2.67946610e-02, -1.61540550e-02, -1.91677000e-04
              ],
              [
                  -1.66711940e-02, -1.01881350e-02, -3.09114610e-02, -2.76630710e-02,
                  -4.12455610e-02, -2.12294300e-02, -1.90032390e-02, -1.16532810e-02,
                  -2.23478130e-02, -2.08325840e-02, -1.95248400e-02, -1.64501410e-02,
                  -1.73071270e-02, -1.47537830e-02, -1.92041300e-02, -2.59156650e-02,
                  -8.48860500e-03, -2.93120390e-02, -1.61648450e-02, -7.13047400e-03,
                  9.92255281e-01, -2.57889040e-02, -1.38988240e-02, -8.05979100e-03,
                  -9.71079400e-03, -9.09278400e-03, -8.64205000e-03, -4.17408100e-03,
                  -2.90074900e-03, -9.22778700e-03, -8.38263400e-03, -5.81636800e-03,
                  -1.16246050e-02, -1.14863890e-02, -3.40523000e-04
              ],
              [
                  -1.29763400e-03, -3.27194200e-03, -3.67418600e-03, -4.23769700e-03,
                  -4.01787200e-03, -4.70197900e-03, -5.96394300e-03, -1.22298900e-03,
                  -4.42882500e-03, -5.63608900e-03, -5.38384500e-03, -4.55400000e-03,
                  -6.07562100e-03, -5.19339800e-03, -2.85717900e-03, -4.17474800e-03,
                  -9.26507100e-03, -4.43204800e-03, -5.87014800e-03, -8.46823600e-03,
                  -5.78702300e-03, 9.90039037e-01, -7.93414900e-03, -4.00751100e-03,
                  -2.35740980e-02, -1.78354990e-02, -8.94146800e-03, -9.27104300e-03,
                  -2.48159200e-03, -1.35413870e-02, -1.04732480e-02, -6.31002600e-03,
                  -8.00218300e-03, -1.17767890e-02, -7.13389000e-05
              ],
              [
                  -1.28722620e-02, -2.17307780e-02, -2.29240550e-02, -1.95997510e-02,
                  -2.06386180e-02, -2.39601350e-02, -1.89054820e-02, -3.13139190e-02,
                  -1.81821960e-02, -1.74774600e-02, -3.33868710e-02, -1.74270550e-02,
                  -1.25028470e-02, -8.77581000e-03, -1.18957790e-02, -1.86995110e-02,
                  -2.35247570e-02, -1.59716310e-02, -1.41101450e-02, -1.90517550e-02,
                  -1.15063970e-02, -9.41690700e-03, 9.54110944e-01, -4.41531990e-02,
                  -1.43059550e-02, -5.92931360e-02, -9.04370100e-03, -5.31541000e-03,
                  -1.89793000e-03, -5.90049800e-03, -1.09118210e-02, -1.02196890e-02,
                  -7.14471800e-03, -9.39150800e-03, -3.33653000e-04
              ],
              [
                  -3.59933700e-03, -5.84325200e-03, -4.82961600e-03, -4.72748500e-03,
                  -6.01985300e-03, -8.64534700e-03, -3.96846600e-03, -6.69878600e-03,
                  -3.63587700e-03, -3.89031900e-03, -9.20776300e-03, -6.67693900e-03,
                  -3.21569100e-03, -2.42839600e-03, -2.17375500e-03, -2.85489400e-03,
                  -3.07433400e-03, -4.44984300e-03, -1.14089500e-03, -2.96904100e-03,
                  -1.52115900e-03, -1.85321000e-03, -3.19029800e-03, 8.94894468e-01,
                  -2.97359600e-03, -6.34147800e-03, -8.08859000e-04, -4.86273000e-04,
                  -4.20691000e-04, -1.01930700e-03, -1.44319500e-03, -1.27214000e-03,
                  -5.77043000e-04, -1.33225600e-03, -2.24734000e-05
              ],
              [
                  -6.49311000e-04, -1.90504300e-03, -1.32807300e-03, -1.78834400e-03,
                  -2.73087900e-03, -1.67894300e-03, -2.32686000e-03, -6.08131000e-04,
                  -1.75526700e-03, -1.94199200e-03, -1.61253500e-03, -1.40986600e-03,
                  -2.19524700e-03, -2.07541500e-03, -1.68639300e-03, -1.48991900e-03,
                  -1.40289700e-03, -1.07687600e-03, -1.68752700e-03, -3.14294400e-03,
                  -1.41235500e-03, -1.08818100e-03, -2.09098100e-03, -5.27987600e-03,
                  9.64872796e-01, -1.90605530e-02, -3.65274100e-03, -2.93696000e-03,
                  -5.36496000e-04, -4.14185100e-03, -3.88886100e-03, -1.94475500e-03,
                  -1.17590400e-03, -4.04695000e-03, -1.02730000e-05
              ],
              [
                  -3.58025000e-03, -5.51436900e-03, -6.15506900e-03, -4.03627000e-03,
                  -4.96367500e-03, -6.74013200e-03, -9.24131400e-03, -6.74967000e-03,
                  -5.09791800e-03, -5.24428100e-03, -8.31291900e-03, -5.16576500e-03,
                  -4.67059000e-03, -3.57001800e-03, -4.53543700e-03, -4.72341200e-03,
                  -4.45977500e-03, -4.13622000e-03, -9.93430700e-03, -2.08262100e-02,
                  -1.01955080e-02, -7.71745700e-03, -4.04625940e-02, -1.21261142e-01,
                  -9.94583210e-02, 8.92817943e-01, -4.62218500e-03, -3.44468800e-03,
                  -9.37338000e-04, -5.02281400e-03, -4.75573900e-03, -2.48385600e-03,
                  -3.03393600e-03, -6.05519100e-03, -2.93923000e-05
              ],
              [
                  -2.50119200e-03, -6.23880100e-03, -4.63544100e-03, -5.61954400e-03,
                  -6.46338900e-03, -5.67001500e-03, -1.33390700e-02, -2.72545800e-03,
                  -8.02430200e-03, -6.60875300e-03, -6.83647500e-03, -6.31959600e-03,
                  -8.09418000e-03, -7.79598100e-03, -4.47118200e-03, -7.92283600e-03,
                  -7.60521600e-03, -1.20443210e-02, -1.45837510e-02, -2.03241310e-02,
                  -2.09896350e-02, -1.32118300e-02, -1.59666070e-02, -1.78111160e-02,
                  -2.73335830e-02, -2.43262340e-02, 8.72970880e-01, -2.76716260e-02,
                  -4.86639900e-03, -2.58135820e-02, -2.16489230e-02, -9.74362200e-03,
                  -1.25118010e-02, -2.35658250e-02, -3.64199000e-04
              ],
              [
                  -2.05071850e-02, -3.07397450e-02, -1.53483590e-02, -2.18814500e-02,
                  -1.59174410e-02, -1.91202170e-02, -2.40896330e-02, -1.16541490e-02,
                  -1.83099430e-02, -1.80806490e-02, -2.35854420e-02, -1.90864120e-02,
                  -1.83991990e-02, -1.49696090e-02, -1.38433430e-02, -2.34712270e-02,
                  -3.01791190e-02, -2.10326470e-02, -2.31242050e-02, -3.70681320e-02,
                  -3.46131940e-02, -2.55376100e-02, -4.68516170e-02, -4.03074290e-02,
                  -3.92817500e-02, -2.58651980e-02, -2.22635010e-02, 7.95524057e-01,
                  -6.56959350e-02, -3.77589610e-02, -2.40384830e-02, -1.18374140e-02,
                  -2.27499810e-02, -4.09235320e-02, -7.76897000e-03
              ],
              [
                  -5.45538100e-03, -5.79498200e-03, -4.64506800e-03, -5.09572500e-03,
                  -4.58488300e-03, -6.13884500e-03, -9.71471600e-03, -2.31251500e-03,
                  -4.72505300e-03, -6.33386700e-03, -5.08407900e-03, -5.49077000e-03,
                  -6.17418100e-03, -4.86759000e-03, -4.65797300e-03, -7.55412300e-03,
                  -7.23313200e-03, -1.00531680e-02, -2.25848900e-02, -2.35862800e-02,
                  -3.95055930e-02, -2.88926370e-02, -9.59541700e-03, -1.92397370e-02,
                  -1.34689720e-02, -2.15728380e-02, -1.70401410e-02, -2.27065290e-02,
                  9.64696522e-01, -2.40730150e-02, -1.53831050e-02, -1.94870100e-02,
                  -3.33008870e-02, -2.65695530e-02, -1.22766000e-04
              ],
              [
                  -1.13855670e-02, -3.10265750e-02, -3.90024040e-02, -2.81160500e-02,
                  -2.28872430e-02, -2.54362260e-02, -6.50601160e-02, -1.40347720e-02,
                  -6.67617930e-02, -3.86819270e-02, -3.38942530e-02, -3.10111710e-02,
                  -4.51315090e-02, -5.48746940e-02, -4.09814600e-02, -3.66000570e-02,
                  -5.41757540e-02, -5.52422580e-02, -5.04444850e-02, -5.35487750e-02,
                  -5.99308560e-02, -3.99313470e-02, -4.32000870e-02, -3.41894650e-02,
                  -9.32848070e-02, -6.65297800e-02, -7.28774450e-02, -9.35951030e-02,
                  -3.25157040e-02, 8.57281314e-01, -7.04048480e-02, -3.09039320e-02,
                  -5.61496090e-02, -7.58942010e-02, -2.21978400e-03
              ],
              [
                  -1.50294700e-03, -3.85129800e-03, -1.86344600e-03, -1.14776000e-03,
                  -7.84077000e-04, -3.25702300e-03, -3.09404900e-03, -9.10514000e-04,
                  -2.75079100e-03, -2.18927200e-03, -2.18574400e-03, -2.35493300e-03,
                  -1.19229300e-03, -1.24847900e-03, -1.23506700e-03, -2.03901700e-03,
                  -5.07916300e-03, -1.67287600e-03, -2.29986500e-03, -1.47912900e-03,
                  -2.90918900e-03, -3.64717500e-03, -2.97314000e-03, -6.19151000e-03,
                  -9.03999200e-03, -3.29247400e-03, -2.91448600e-03, -1.49054300e-03,
                  -3.20762900e-03, -2.73398900e-03, 9.92681121e-01, -4.22128700e-03,
                  -4.51013600e-03, -8.06136700e-03, -5.96045000e-06
              ],
              [
                  -5.87064000e-04, -4.70894000e-04, -4.73913000e-04, -4.56108000e-04,
                  -4.80337000e-04, -3.86598000e-04, -7.72204000e-04, -4.00876000e-04,
                  -9.10050000e-04, -6.70137000e-04, -6.20913000e-04, -6.42119000e-04,
                  -8.54990000e-04, -8.86816000e-04, -7.15297000e-04, -4.77143000e-04,
                  -1.09079900e-03, -5.09598000e-04, -8.00971000e-04, -7.78768000e-04,
                  -1.46519300e-03, -5.66704000e-04, -1.14323800e-03, -4.39780000e-04,
                  -1.88285800e-03, -1.17141200e-03, -1.61697800e-03, -1.27749600e-03,
                  -2.96894000e-04, -2.28851800e-03, -4.38345400e-03, 9.89324308e-01,
                  -1.13598500e-03, -1.58405000e-03, -4.00135000e-06
              ],
              [
                  -1.49181400e-03, -4.15041000e-04, -5.08749000e-04, -4.22707000e-04,
                  -1.02841900e-03, -4.10861000e-04, -4.36340000e-04, -1.89798000e-04,
                  -5.18675000e-04, -4.12513000e-04, -4.21351000e-04, -3.81125000e-04,
                  -5.47040000e-04, -4.05702000e-04, -3.61286000e-04, -4.93901000e-04,
                  -3.42344000e-04, -4.61085000e-04, -5.78658000e-04, -6.16261000e-04,
                  -4.67646000e-04, -1.11432500e-03, -7.12470000e-04, -3.60557000e-04,
                  -4.62823000e-04, -6.43993000e-04, -6.98550000e-04, -5.39821000e-04,
                  -9.42046000e-05, -7.70266000e-04, -5.25415700e-03, -1.52714500e-03,
                  9.75007213e-01, -1.22662200e-03, -9.29981000e-08
              ],
              [
                  -2.54826700e-03, -6.74309000e-03, -5.72993300e-03, -5.37901300e-03,
                  -6.54448700e-03, -5.39289600e-03, -1.37775460e-02, -2.79429600e-03,
                  -7.76551900e-03, -5.74677200e-03, -5.73831500e-03, -6.32099500e-03,
                  -5.83165700e-03, -4.86239100e-03, -4.34581900e-03, -6.13716000e-03,
                  -7.11828400e-03, -6.16188300e-03, -8.62004400e-03, -8.13994300e-03,
                  -8.67277200e-03, -1.31311250e-02, -9.18784300e-03, -5.28844800e-03,
                  -8.49249200e-03, -1.06589290e-02, -1.97885410e-02, -9.88881800e-03,
                  -7.26416100e-03, -2.70754690e-02, -1.55662050e-02, -1.03781090e-02,
                  -1.42741350e-02, 9.20004935e-01, -1.68832400e-03
              ],
              [
                  -1.73470000e-05, -2.28642000e-05, -2.65530000e-05, -5.61090000e-05,
                  -2.62342000e-05, -3.41391000e-05, -4.13070000e-05, -1.33692000e-05,
                  -3.36486000e-05, -4.08335000e-05, -2.24359000e-05, -2.30104000e-05,
                  -2.61862000e-05, -1.94134000e-05, -4.09892000e-05, -2.43773000e-05,
                  -1.94098000e-05, -7.32694000e-05, -6.68004000e-05, -1.56339000e-05,
                  -4.19840000e-05, -5.36295000e-05, -8.86582000e-05, -1.30926000e-05,
                  -2.73819000e-05, -2.13976000e-05, -5.13832000e-05, -5.63822000e-05,
                  -2.61832000e-04, -6.71376000e-05, -7.32823000e-05, -4.11591000e-05,
                  -8.69702000e-05, -1.24841000e-04, 9.99910943e-01
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def ia_matrix_2009():
    """
    Real Name: b'ia matrix 2009'
    Original Eqn: b'0.879111299,-0.000581938,-0.266267579,-0.051740741,-0.057534653,-0.136416322,-0.018138489,-0.002408409,-0.007666947,-0.012876032,-0.000557553,-0.000185118,-0.000182636,-8.44346e-05,-0.000127455,-0.011699683,-0.000594999,-0.003503522,-0.000875825,-0.002442128,-0.002277436,-0.041516933,-0.001679149,-0.000842528,-0.000434503,-0.007513973,-0.000193071,-0.000174063,-0.000390308,-0.000868088,-0.001744895,-0.002794591,-0.002242827,-0.002671932,-0.026632933;-0.002516134,0.904573142,-0.003344696,-0.004224709,-0.003166993,-0.005463546,-0.005890823,-0.38890673,-0.032171439,-0.004587065,-0.076014821,-0.060129665,-0.003958356,-0.001213883,-0.001646343,-0.006248299,-0.106990704,-0.023242137,-0.00052141,-0.000570472,-0.001222553,-0.002777597,-0.006370548,-0.004653555,-0.004644945,-0.004577285,-0.000493351,-0.000285769,-0.001880296,-0.000886143,-0.00331124,-0.001957449,-0.001965331,-0.003133667,-0.060101324;-0.065542748,-0.000830643,0.835170015,-0.005417614,-0.103532923,-0.003221501,-0.003573617,-0.002030333,-0.012756078,-0.004105474,-0.003052673,-0.002321784,-0.00210338,-0.001587049,-0.00139888,-0.003118466,-0.00116346,-0.001763652,-0.001636915,-0.004908239,-0.004767341,-0.150665483,-0.001945067,-0.005958816,-0.004868597,-0.001824221,-0.001245711,-0.000724307,-0.000291239,-0.001943444,-0.006214673,-0.007735489,-0.010854932,-0.00722962,-0.003456451;-0.001643387,-0.000962437,-0.001610717,0.607609988,-0.06630692,-0.003395911,-0.006730605,-0.000695214,-0.003896811,-0.016245994,-0.004858499,-0.002634979,-0.002799783,-0.002041497,-0.004152301,-0.025793647,-0.001151146,-0.002452531,-0.001500945,-0.002712389,-0.002713542,-0.002748356,-0.002193889,-0.003389504,-0.002737699,-0.002118105,-0.00059748,-0.000465139,-0.000424981,-0.001608053,-0.002498953,-0.001105698,-0.003182434,-0.00423507,-7.63043e-05;-0.000155303,-5.53333e-05,-0.000120728,-0.0140659,0.7628079,-0.000558476,-0.000705806,-4.68754e-05,-0.000276589,-0.001172357,-0.000257708,-0.000129412,-0.000189738,-0.000320787,-0.002487057,-0.005966764,-7.1953e-05,-0.000105511,-0.000346567,-0.000265196,-0.000214776,-0.000108468,-0.000247034,-9.28678e-05,-0.000142616,-0.000192127,-0.000156027,-3.18536e-05,-9.49538e-06,-9.33202e-05,-0.000622743,-0.000110526,-0.000253237,-0.00038771,-1.91532e-06;-0.00167302,-0.001476841,-0.001590974,-0.001506566,-0.001855102,0.727318525,-0.013010751,-0.000313161,-0.001507165,-0.003046165,-0.008591048,-0.004187618,-0.003261763,-0.001658191,-0.00266532,-0.073463463,-0.000759106,-0.028324087,-0.001008915,-0.00109799,-0.001145331,-0.002240422,-0.001226123,-0.000607341,-0.000396911,-0.002164099,-0.000463643,-0.000257006,-0.001352525,-0.000975165,-0.001992096,-0.003018019,-0.001422382,-0.00254386,-2.41936e-05;-0.002271173,-0.002033861,-0.023955809,-0.011521887,-0.014846848,-0.014362371,0.749837484,-0.002110678,-0.014283708,-0.015885531,-0.022236487,-0.004897852,-0.006162193,-0.007827576,-0.003900227,-0.018865842,-0.002845496,-0.00383846,-0.007431204,-0.010693051,-0.009968063,-0.007523698,-0.006557358,-0.003512257,-0.004772941,-0.012646187,-0.008464967,-0.011292242,-0.001681255,-0.019197002,-0.016856023,-0.018197035,-0.007977775,-0.022097123,-0.000108888;-0.012816824,-0.006037935,-0.003430349,-0.004838133,-0.004155043,-0.004619381,-0.004569765,0.89489315,-0.04352231,-0.009232793,-0.019742004,-0.013998609,-0.003972585,-0.001950279,-0.002089922,-0.004133269,-0.025513918,-0.010766549,-0.005505045,-0.004912679,-0.003701262,-0.003532218,-0.056491763,-0.065836371,-0.090560827,-0.025468383,-0.003304255,-0.001233687,-0.001161405,-0.004773583,-0.008851635,-0.003166728,-0.002660227,-0.005290161,-2.18733e-05;-0.036903224,-0.008494161,-0.009320295,-0.059667027,-0.036023876,-0.036887746,-0.036539066,-0.019519659,0.756217871,-0.221976294,-0.039574174,-0.015313869,-0.010066712,-0.018262833,-0.010760263,-0.026779904,-0.006394529,-0.011257586,-0.005578649,-0.002627866,-0.001890423,-0.004367338,-0.003445508,-0.004738474,-0.004034261,-0.005026175,-0.001086994,-0.00065948,-0.001604313,-0.004716661,-0.00759195,-0.003844708,-0.059385415,-0.01013981,-0.000150674;-0.004586781,-0.004801018,-0.019109114,-0.010798407,-0.039539044,-0.007530765,-0.01718239,-0.006099653,-0.018241933,0.833874804,-0.01269518,-0.006999667,-0.022803574,-0.024334942,-0.034033008,-0.033804263,-0.00243792,-0.017601911,-0.014606404,-0.004109645,-0.004503645,-0.004165213,-0.011512129,-0.00304469,-0.003969331,-0.006868594,-0.002927619,-0.000575032,-0.001127375,-0.002817948,-0.002825145,-0.001421755,-0.004678495,-0.004667707,-7.38282e-05;-0.001367181,-0.003532917,-0.004719499,-0.001843963,-0.00149634,-0.005586625,-0.001167129,-0.002119255,-0.005293097,-0.004891491,0.860238172,-0.010589933,-0.004860504,-0.009475931,-0.00591678,-0.007393483,-0.001527621,-0.090156819,-0.003083961,-0.000845736,-0.000858787,-0.002930787,-0.001362391,-0.000389106,-0.000622785,-0.001346365,-0.000865694,-0.000101145,-0.001409438,-0.000881753,-0.001287628,-0.00158889,-0.001653393,-0.001667731,-2.97486e-05;-0.00419571,-0.01654448,-0.010277129,-0.004852253,-0.009182844,-0.020163865,-0.009463752,-0.007053585,-0.012741075,-0.023001731,-0.036531268,0.66098406,-0.162989368,-0.067501377,-0.089442777,-0.073888841,-0.006638796,-0.096896995,-0.013674036,-0.002850876,-0.002634208,-0.004171701,-0.006389847,-0.004340424,-0.003876954,-0.009422913,-0.00283683,-0.000488432,-0.002189806,-0.00372264,-0.004097113,-0.00188014,-0.00208447,-0.004507807,-0.000151494;-0.006985887,-0.014421577,-0.003867992,-0.009943277,-0.007724057,-0.010314999,-0.007571775,-0.00793316,-0.008592427,-0.0137906,-0.023366594,-0.026605983,0.832732887,-0.01724183,-0.042802494,-0.016601788,-0.007852326,-0.018857925,-0.021131806,-0.002434577,-0.002194756,-0.002263226,-0.00542435,-0.009465864,-0.007460831,-0.00826833,-0.002457226,-0.000777152,-0.001243092,-0.002850838,-0.006222059,-0.002193488,-0.004390029,-0.003654881,-0.000366523;-0.002076254,-0.008607423,-0.004157373,-0.006986534,-0.005350386,-0.007641833,-0.010797926,-0.005646377,-0.011493637,-0.013464256,-0.012848553,-0.018963135,-0.112463223,0.589879915,-0.073587762,-0.039961627,-0.031271109,-0.044916505,-0.032677075,-0.008905444,-0.008038353,-0.006086614,-0.009667943,-0.004077445,-0.006685305,-0.011861367,-0.043522874,-0.004237932,-0.00251306,-0.022895611,-0.020959558,-0.013882705,-0.027666056,-0.017874436,-0.00108315;-0.004053406,-0.004229143,-0.001847293,-0.003069773,-0.002564866,-0.004309366,-0.004549726,-0.001654116,-0.002602849,-0.005193957,-0.007001474,-0.008373815,-0.017135723,-0.004237159,0.68468552,-0.009837426,-0.003804162,-0.005231898,-0.068974527,-0.004894827,-0.00359654,-0.002116657,-0.039337586,-0.041770377,-0.05826115,-0.014674402,-0.003348504,-0.001029631,-0.000896676,-0.004364901,-0.018523581,-0.002733143,-0.001418298,-0.008441612,-0.000273222;-0.000620695,-0.00071955,-0.000967854,-0.005285527,-0.003257754,-0.003538314,-0.004427354,-0.000941862,-0.001784646,-0.00283243,-0.003681335,-0.008376299,-0.003945532,-0.002140651,-0.005569767,0.933388188,-0.001965872,-0.004189325,-0.001377658,-0.000998719,-0.00132995,-0.002310054,-0.004081826,-0.000686082,-0.002305388,-0.001457625,-0.00155272,-0.000830639,-0.00115312,-0.001697734,-0.003084815,-0.003539207,-0.002787596,-0.004824092,-0.001900479;-0.010536546,-0.027720116,-0.01389976,-0.017513145,-0.007439277,-0.017472857,-0.023211699,-0.027016877,-0.026456895,-0.021033585,-0.043981387,-0.030518698,-0.012147684,-0.007192453,-0.008420487,-0.009539437,0.854311151,-0.007451522,-0.01052203,-0.00634622,-0.012605662,-0.023391663,-0.016570829,-0.003307458,-0.006899956,-0.018085514,-0.009572582,-0.004028663,-0.008220846,-0.00576708,-0.014454138,-0.020677628,-0.011712985,-0.015464777,-0.000134556;-0.003284402,-0.006243117,-0.002238115,-0.002245176,-0.00122265,-0.002794405,-0.00294276,-0.005220382,-0.002879404,-0.002266691,-0.005886103,-0.003399518,-0.002493677,-0.00143435,-0.001730842,-0.002730649,-0.015887261,0.94728065,-0.005246605,-0.003341565,-0.004647027,-0.006126866,-0.009643094,-0.00155895,-0.00334374,-0.012715452,-0.010298021,-0.005047622,-0.031831582,-0.004709722,-0.018772899,-0.011707454,-0.007529419,-0.009262424,-0.000529321;-0.004661299,-0.002611811,-0.005853969,-0.00346753,-0.004656699,-0.004778564,-0.004297519,-0.0035358,-0.004810483,-0.005156134,-0.005520048,-0.004569508,-0.003804168,-0.002447495,-0.004329164,-0.005758454,-0.00636979,-0.005940684,0.988925242,-0.003591167,-0.003745981,-0.00478142,-0.013966782,-0.001789563,-0.004889592,-0.007562288,-0.003041772,-0.002508543,-0.001841165,-0.005291228,-0.004003688,-0.002463013,-0.003544851,-0.005421874,-1.63446e-05;-0.032385705,-0.015560077,-0.062376655,-0.036605304,-0.044916502,-0.047616101,-0.045050886,-0.058517782,-0.044043666,-0.043283113,-0.037531726,-0.038255333,-0.03881281,-0.031148402,-0.041179804,-0.039443214,-0.018633716,-0.03990171,-0.03061926,0.978205901,-0.012738413,-0.045422008,-0.022083264,-0.017596152,-0.023168866,-0.022459183,-0.011924235,-0.003923637,-0.003979559,-0.013444606,-0.01864345,-0.011209958,-0.025957599,-0.016607425,-0.000102972;-0.016027539,-0.00613409,-0.027178162,-0.018723791,-0.024238537,-0.017564029,-0.017439356,-0.019087152,-0.019734299,-0.01855704,-0.01659739,-0.015801628,-0.015570651,-0.011188319,-0.018384411,-0.024130112,-0.007528115,-0.024035867,-0.015075497,-0.005574273,0.993243009,-0.02324804,-0.014256953,-0.006649544,-0.010164347,-0.009789237,-0.00786404,-0.004412306,-0.002727395,-0.008075477,-0.008017691,-0.005727689,-0.012315184,-0.010605491,-0.000127396;-0.001469052,-0.003101963,-0.003894186,-0.003739392,-0.004314738,-0.003653675,-0.004640373,-0.001101323,-0.003753093,-0.004220695,-0.005350753,-0.003994775,-0.004712508,-0.003297883,-0.002498412,-0.00332137,-0.00288861,-0.005058,-0.00458188,-0.007218638,-0.005394406,0.990187525,-0.007591032,-0.003927349,-0.015571168,-0.022699421,-0.006871309,-0.010044071,-0.00192382,-0.012362754,-0.010701779,-0.0093195,-0.007781858,-0.011192181,-3.80526e-05;-0.012242553,-0.016374229,-0.02258429,-0.017755532,-0.017434512,-0.021034705,-0.017866967,-0.043651822,-0.017565233,-0.016017448,-0.03241889,-0.016709448,-0.012322748,-0.007279222,-0.010819275,-0.018573651,-0.018312104,-0.019750916,-0.015998232,-0.021462293,-0.012339042,-0.009127237,0.953779788,-0.007575869,-0.009477216,-0.056406597,-0.008597819,-0.005138129,-0.001612239,-0.005793638,-0.00988756,-0.009275825,-0.006725135,-0.009094088,-0.00027994;-0.002193438,-0.006069633,-0.004981452,-0.004506297,-0.004041947,-0.006986484,-0.003434382,-0.003417472,-0.003410069,-0.003507934,-0.009126311,-0.006187933,-0.003532993,-0.001985228,-0.002724187,-0.002696377,-0.002707484,-0.003016066,-0.001649856,-0.006284285,-0.002922504,-0.001507135,-0.00293385,0.843272123,-0.002919115,-0.005412028,-0.000909763,-0.000524271,-0.001738181,-0.001174336,-0.001096204,-0.000766948,-0.000505851,-0.00113478,-1.26804e-05;-0.00074432,-0.001301232,-0.001336568,-0.001445579,-0.002076667,-0.001581792,-0.001905431,-0.000720588,-0.0015054,-0.001415125,-0.001497593,-0.000986284,-0.001823306,-0.001407448,-0.001226949,-0.001236609,-0.000721091,-0.001112405,-0.001955805,-0.002893464,-0.001584309,-0.001403258,-0.002410063,-0.004291434,0.968672815,-0.012506033,-0.003633111,-0.002915912,-0.000421928,-0.003648055,-0.003631351,-0.003554034,-0.001122089,-0.004235387,-7.30692e-06;-0.003772519,-0.004429411,-0.006621263,-0.003653301,-0.00382203,-0.006588179,-0.008683254,-0.009488712,-0.004676526,-0.005135828,-0.007812329,-0.004778929,-0.003893505,-0.002603338,-0.003800707,-0.004045541,-0.00382904,-0.013501268,-0.013878233,-0.019633701,-0.012896749,-0.007593553,-0.037161657,-0.113707308,-0.102474447,0.902400846,-0.004008962,-0.003467267,-0.001137746,-0.005170474,-0.004898505,-0.002831283,-0.003375436,-0.0062951,-9.73793e-06;-0.004463967,-0.004240239,-0.005744442,-0.006862455,-0.006101215,-0.006536256,-0.012070503,-0.004444499,-0.007856529,-0.005403036,-0.006894629,-0.00778954,-0.006098697,-0.007862385,-0.004760726,-0.016394232,-0.007787672,-0.012637345,-0.017245795,-0.018315466,-0.022191358,-0.016440301,-0.021328135,-0.020081345,-0.023905376,-0.02446745,0.880024485,-0.029791255,-0.004709601,-0.025799657,-0.023963141,-0.012410648,-0.01442908,-0.022420202,-0.000736682;-0.018861197,-0.019865506,-0.017098438,-0.022453566,-0.017239811,-0.01657294,-0.022817505,-0.01502997,-0.018729197,-0.015503224,-0.024854271,-0.018033014,-0.016257468,-0.013214217,-0.014860692,-0.030604933,-0.024631939,-0.021446218,-0.021458849,-0.029726579,-0.034583679,-0.028164597,-0.050257549,-0.022862106,-0.033156531,-0.036385442,-0.019360401,0.789311681,-0.081711046,-0.038806342,-0.024621158,-0.017092974,-0.025150996,-0.044576053,-0.01025043;-0.002643269,-0.005282047,-0.004394853,-0.00448442,-0.005664317,-0.005354039,-0.008880479,-0.002057561,-0.003743045,-0.005053642,-0.004425126,-0.004066567,-0.004572572,-0.003201016,-0.004366973,-0.006462553,-0.004468598,-0.010359687,-0.021685975,-0.018811996,-0.041548949,-0.028601815,-0.008657137,-0.011726885,-0.008684949,-0.021509266,-0.01291889,-0.021855438,0.967253836,-0.021876848,-0.014137156,-0.021178032,-0.033477006,-0.02590052,-1.06513e-06;-0.01351312,-0.022230347,-0.039075584,-0.019547625,-0.017381564,-0.023968257,-0.061889045,-0.020030073,-0.063345625,-0.034615764,-0.030884869,-0.02678479,-0.036446852,-0.037989992,-0.039338319,-0.027602531,-0.033605461,-0.054509417,-0.054771051,-0.057991,-0.062618174,-0.050864757,-0.044632029,-0.024778681,-0.070304599,-0.066050742,-0.058506804,-0.105897677,-0.029086824,0.837983117,-0.090850799,-0.038606316,-0.069687667,-0.086237134,-0.002250642;-0.001356968,-0.001830687,-0.001959396,-0.000639838,-0.000541984,-0.002741022,-0.003811216,-0.001132107,-0.002623977,-0.001940376,-0.002474912,-0.003168719,-0.00118331,-0.000822726,-0.001077832,-0.001987481,-0.004346593,-0.001438077,-0.00261513,-0.001440683,-0.002838534,-0.003869299,-0.003660466,-0.005015839,-0.010468846,-0.003541833,-0.002546227,-0.001626767,-0.003282131,-0.002946671,0.992273126,-0.004648745,-0.004566067,-0.00872816,-4.61683e-06;-0.000547815,-0.00040566,-0.00038745,-0.000281477,-0.000321371,-0.000310157,-0.000516227,-0.000436186,-0.000787919,-0.000498952,-0.00046994,-0.000446195,-0.00070943,-0.000495287,-0.000622777,-0.000353625,-0.000598958,-0.000473916,-0.000778217,-0.00073707,-0.001244991,-0.000570168,-0.000918027,-0.000281241,-0.002102718,-0.001078897,-0.001180857,-0.001193541,-0.000271294,-0.002193221,-0.004295471,0.983911679,-0.001298496,-0.001593386,-9.54745e-06;-0.001266497,-0.000492357,-0.000468988,-0.000387123,-0.000996002,-0.000590477,-0.000543451,-0.000220118,-0.000536451,-0.000380023,-0.000916234,-0.00058674,-0.001091166,-0.000446769,-0.000564677,-0.000481039,-0.000427029,-0.000398325,-0.000567782,-0.000469579,-0.000438077,-0.00089232,-0.000601365,-0.00032889,-0.000450356,-0.000455659,-0.000517206,-0.000549961,-8.36447e-05,-0.000617285,-0.005883929,-0.001703813,0.966582568,-0.00147311,-4.13318e-07;-0.003036903,-0.005453801,-0.005182608,-0.004214113,-0.005712603,-0.004635995,-0.012095707,-0.002292434,-0.006621708,-0.004554864,-0.00570093,-0.005022149,-0.004044902,-0.002749303,-0.004232972,-0.004323051,-0.00561415,-0.005705004,-0.006916814,-0.007656581,-0.008825032,-0.014488451,-0.014030592,-0.004779447,-0.007674732,-0.015471682,-0.015524187,-0.010356837,-0.006910271,-0.026061011,-0.017430804,-0.011789667,-0.013719849,0.92319411,-0.001263074;-1.42671e-05,-2.40286e-05,-2.47281e-05,-0.000100001,-3.23713e-05,-3.04051e-05,-2.71023e-05,-1.27161e-05,-1.66471e-05,-1.8645e-05,-1.94115e-05,-1.32096e-05,-3.37777e-05,-1.22646e-05,-6.18991e-05,-1.52228e-05,-7.79118e-06,-4.4963e-05,-2.5485e-05,-8.75894e-06,-3.42579e-05,-5.08565e-05,-0.000134128,-5.77412e-06,-1.45253e-05,-1.28275e-05,-2.9525e-05,-5.80156e-05,-0.000161812,-5.93361e-05,-6.40354e-05,-4.01316e-05,-5.07878e-05,-9.4449e-05,0.999909811;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            8.79111299e-01, -5.81938000e-04, -2.66267579e-01, -5.17407410e-02, -5.75346530e-02,
            -1.36416322e-01, -1.81384890e-02, -2.40840900e-03, -7.66694700e-03, -1.28760320e-02,
            -5.57553000e-04, -1.85118000e-04, -1.82636000e-04, -8.44346000e-05, -1.27455000e-04,
            -1.16996830e-02, -5.94999000e-04, -3.50352200e-03, -8.75825000e-04, -2.44212800e-03,
            -2.27743600e-03, -4.15169330e-02, -1.67914900e-03, -8.42528000e-04, -4.34503000e-04,
            -7.51397300e-03, -1.93071000e-04, -1.74063000e-04, -3.90308000e-04, -8.68088000e-04,
            -1.74489500e-03, -2.79459100e-03, -2.24282700e-03, -2.67193200e-03, -2.66329330e-02
        ],
              [
                  -2.51613400e-03, 9.04573142e-01, -3.34469600e-03, -4.22470900e-03,
                  -3.16699300e-03, -5.46354600e-03, -5.89082300e-03, -3.88906730e-01,
                  -3.21714390e-02, -4.58706500e-03, -7.60148210e-02, -6.01296650e-02,
                  -3.95835600e-03, -1.21388300e-03, -1.64634300e-03, -6.24829900e-03,
                  -1.06990704e-01, -2.32421370e-02, -5.21410000e-04, -5.70472000e-04,
                  -1.22255300e-03, -2.77759700e-03, -6.37054800e-03, -4.65355500e-03,
                  -4.64494500e-03, -4.57728500e-03, -4.93351000e-04, -2.85769000e-04,
                  -1.88029600e-03, -8.86143000e-04, -3.31124000e-03, -1.95744900e-03,
                  -1.96533100e-03, -3.13366700e-03, -6.01013240e-02
              ],
              [
                  -6.55427480e-02, -8.30643000e-04, 8.35170015e-01, -5.41761400e-03,
                  -1.03532923e-01, -3.22150100e-03, -3.57361700e-03, -2.03033300e-03,
                  -1.27560780e-02, -4.10547400e-03, -3.05267300e-03, -2.32178400e-03,
                  -2.10338000e-03, -1.58704900e-03, -1.39888000e-03, -3.11846600e-03,
                  -1.16346000e-03, -1.76365200e-03, -1.63691500e-03, -4.90823900e-03,
                  -4.76734100e-03, -1.50665483e-01, -1.94506700e-03, -5.95881600e-03,
                  -4.86859700e-03, -1.82422100e-03, -1.24571100e-03, -7.24307000e-04,
                  -2.91239000e-04, -1.94344400e-03, -6.21467300e-03, -7.73548900e-03,
                  -1.08549320e-02, -7.22962000e-03, -3.45645100e-03
              ],
              [
                  -1.64338700e-03, -9.62437000e-04, -1.61071700e-03, 6.07609988e-01,
                  -6.63069200e-02, -3.39591100e-03, -6.73060500e-03, -6.95214000e-04,
                  -3.89681100e-03, -1.62459940e-02, -4.85849900e-03, -2.63497900e-03,
                  -2.79978300e-03, -2.04149700e-03, -4.15230100e-03, -2.57936470e-02,
                  -1.15114600e-03, -2.45253100e-03, -1.50094500e-03, -2.71238900e-03,
                  -2.71354200e-03, -2.74835600e-03, -2.19388900e-03, -3.38950400e-03,
                  -2.73769900e-03, -2.11810500e-03, -5.97480000e-04, -4.65139000e-04,
                  -4.24981000e-04, -1.60805300e-03, -2.49895300e-03, -1.10569800e-03,
                  -3.18243400e-03, -4.23507000e-03, -7.63043000e-05
              ],
              [
                  -1.55303000e-04, -5.53333000e-05, -1.20728000e-04, -1.40659000e-02,
                  7.62807900e-01, -5.58476000e-04, -7.05806000e-04, -4.68754000e-05,
                  -2.76589000e-04, -1.17235700e-03, -2.57708000e-04, -1.29412000e-04,
                  -1.89738000e-04, -3.20787000e-04, -2.48705700e-03, -5.96676400e-03,
                  -7.19530000e-05, -1.05511000e-04, -3.46567000e-04, -2.65196000e-04,
                  -2.14776000e-04, -1.08468000e-04, -2.47034000e-04, -9.28678000e-05,
                  -1.42616000e-04, -1.92127000e-04, -1.56027000e-04, -3.18536000e-05,
                  -9.49538000e-06, -9.33202000e-05, -6.22743000e-04, -1.10526000e-04,
                  -2.53237000e-04, -3.87710000e-04, -1.91532000e-06
              ],
              [
                  -1.67302000e-03, -1.47684100e-03, -1.59097400e-03, -1.50656600e-03,
                  -1.85510200e-03, 7.27318525e-01, -1.30107510e-02, -3.13161000e-04,
                  -1.50716500e-03, -3.04616500e-03, -8.59104800e-03, -4.18761800e-03,
                  -3.26176300e-03, -1.65819100e-03, -2.66532000e-03, -7.34634630e-02,
                  -7.59106000e-04, -2.83240870e-02, -1.00891500e-03, -1.09799000e-03,
                  -1.14533100e-03, -2.24042200e-03, -1.22612300e-03, -6.07341000e-04,
                  -3.96911000e-04, -2.16409900e-03, -4.63643000e-04, -2.57006000e-04,
                  -1.35252500e-03, -9.75165000e-04, -1.99209600e-03, -3.01801900e-03,
                  -1.42238200e-03, -2.54386000e-03, -2.41936000e-05
              ],
              [
                  -2.27117300e-03, -2.03386100e-03, -2.39558090e-02, -1.15218870e-02,
                  -1.48468480e-02, -1.43623710e-02, 7.49837484e-01, -2.11067800e-03,
                  -1.42837080e-02, -1.58855310e-02, -2.22364870e-02, -4.89785200e-03,
                  -6.16219300e-03, -7.82757600e-03, -3.90022700e-03, -1.88658420e-02,
                  -2.84549600e-03, -3.83846000e-03, -7.43120400e-03, -1.06930510e-02,
                  -9.96806300e-03, -7.52369800e-03, -6.55735800e-03, -3.51225700e-03,
                  -4.77294100e-03, -1.26461870e-02, -8.46496700e-03, -1.12922420e-02,
                  -1.68125500e-03, -1.91970020e-02, -1.68560230e-02, -1.81970350e-02,
                  -7.97777500e-03, -2.20971230e-02, -1.08888000e-04
              ],
              [
                  -1.28168240e-02, -6.03793500e-03, -3.43034900e-03, -4.83813300e-03,
                  -4.15504300e-03, -4.61938100e-03, -4.56976500e-03, 8.94893150e-01,
                  -4.35223100e-02, -9.23279300e-03, -1.97420040e-02, -1.39986090e-02,
                  -3.97258500e-03, -1.95027900e-03, -2.08992200e-03, -4.13326900e-03,
                  -2.55139180e-02, -1.07665490e-02, -5.50504500e-03, -4.91267900e-03,
                  -3.70126200e-03, -3.53221800e-03, -5.64917630e-02, -6.58363710e-02,
                  -9.05608270e-02, -2.54683830e-02, -3.30425500e-03, -1.23368700e-03,
                  -1.16140500e-03, -4.77358300e-03, -8.85163500e-03, -3.16672800e-03,
                  -2.66022700e-03, -5.29016100e-03, -2.18733000e-05
              ],
              [
                  -3.69032240e-02, -8.49416100e-03, -9.32029500e-03, -5.96670270e-02,
                  -3.60238760e-02, -3.68877460e-02, -3.65390660e-02, -1.95196590e-02,
                  7.56217871e-01, -2.21976294e-01, -3.95741740e-02, -1.53138690e-02,
                  -1.00667120e-02, -1.82628330e-02, -1.07602630e-02, -2.67799040e-02,
                  -6.39452900e-03, -1.12575860e-02, -5.57864900e-03, -2.62786600e-03,
                  -1.89042300e-03, -4.36733800e-03, -3.44550800e-03, -4.73847400e-03,
                  -4.03426100e-03, -5.02617500e-03, -1.08699400e-03, -6.59480000e-04,
                  -1.60431300e-03, -4.71666100e-03, -7.59195000e-03, -3.84470800e-03,
                  -5.93854150e-02, -1.01398100e-02, -1.50674000e-04
              ],
              [
                  -4.58678100e-03, -4.80101800e-03, -1.91091140e-02, -1.07984070e-02,
                  -3.95390440e-02, -7.53076500e-03, -1.71823900e-02, -6.09965300e-03,
                  -1.82419330e-02, 8.33874804e-01, -1.26951800e-02, -6.99966700e-03,
                  -2.28035740e-02, -2.43349420e-02, -3.40330080e-02, -3.38042630e-02,
                  -2.43792000e-03, -1.76019110e-02, -1.46064040e-02, -4.10964500e-03,
                  -4.50364500e-03, -4.16521300e-03, -1.15121290e-02, -3.04469000e-03,
                  -3.96933100e-03, -6.86859400e-03, -2.92761900e-03, -5.75032000e-04,
                  -1.12737500e-03, -2.81794800e-03, -2.82514500e-03, -1.42175500e-03,
                  -4.67849500e-03, -4.66770700e-03, -7.38282000e-05
              ],
              [
                  -1.36718100e-03, -3.53291700e-03, -4.71949900e-03, -1.84396300e-03,
                  -1.49634000e-03, -5.58662500e-03, -1.16712900e-03, -2.11925500e-03,
                  -5.29309700e-03, -4.89149100e-03, 8.60238172e-01, -1.05899330e-02,
                  -4.86050400e-03, -9.47593100e-03, -5.91678000e-03, -7.39348300e-03,
                  -1.52762100e-03, -9.01568190e-02, -3.08396100e-03, -8.45736000e-04,
                  -8.58787000e-04, -2.93078700e-03, -1.36239100e-03, -3.89106000e-04,
                  -6.22785000e-04, -1.34636500e-03, -8.65694000e-04, -1.01145000e-04,
                  -1.40943800e-03, -8.81753000e-04, -1.28762800e-03, -1.58889000e-03,
                  -1.65339300e-03, -1.66773100e-03, -2.97486000e-05
              ],
              [
                  -4.19571000e-03, -1.65444800e-02, -1.02771290e-02, -4.85225300e-03,
                  -9.18284400e-03, -2.01638650e-02, -9.46375200e-03, -7.05358500e-03,
                  -1.27410750e-02, -2.30017310e-02, -3.65312680e-02, 6.60984060e-01,
                  -1.62989368e-01, -6.75013770e-02, -8.94427770e-02, -7.38888410e-02,
                  -6.63879600e-03, -9.68969950e-02, -1.36740360e-02, -2.85087600e-03,
                  -2.63420800e-03, -4.17170100e-03, -6.38984700e-03, -4.34042400e-03,
                  -3.87695400e-03, -9.42291300e-03, -2.83683000e-03, -4.88432000e-04,
                  -2.18980600e-03, -3.72264000e-03, -4.09711300e-03, -1.88014000e-03,
                  -2.08447000e-03, -4.50780700e-03, -1.51494000e-04
              ],
              [
                  -6.98588700e-03, -1.44215770e-02, -3.86799200e-03, -9.94327700e-03,
                  -7.72405700e-03, -1.03149990e-02, -7.57177500e-03, -7.93316000e-03,
                  -8.59242700e-03, -1.37906000e-02, -2.33665940e-02, -2.66059830e-02,
                  8.32732887e-01, -1.72418300e-02, -4.28024940e-02, -1.66017880e-02,
                  -7.85232600e-03, -1.88579250e-02, -2.11318060e-02, -2.43457700e-03,
                  -2.19475600e-03, -2.26322600e-03, -5.42435000e-03, -9.46586400e-03,
                  -7.46083100e-03, -8.26833000e-03, -2.45722600e-03, -7.77152000e-04,
                  -1.24309200e-03, -2.85083800e-03, -6.22205900e-03, -2.19348800e-03,
                  -4.39002900e-03, -3.65488100e-03, -3.66523000e-04
              ],
              [
                  -2.07625400e-03, -8.60742300e-03, -4.15737300e-03, -6.98653400e-03,
                  -5.35038600e-03, -7.64183300e-03, -1.07979260e-02, -5.64637700e-03,
                  -1.14936370e-02, -1.34642560e-02, -1.28485530e-02, -1.89631350e-02,
                  -1.12463223e-01, 5.89879915e-01, -7.35877620e-02, -3.99616270e-02,
                  -3.12711090e-02, -4.49165050e-02, -3.26770750e-02, -8.90544400e-03,
                  -8.03835300e-03, -6.08661400e-03, -9.66794300e-03, -4.07744500e-03,
                  -6.68530500e-03, -1.18613670e-02, -4.35228740e-02, -4.23793200e-03,
                  -2.51306000e-03, -2.28956110e-02, -2.09595580e-02, -1.38827050e-02,
                  -2.76660560e-02, -1.78744360e-02, -1.08315000e-03
              ],
              [
                  -4.05340600e-03, -4.22914300e-03, -1.84729300e-03, -3.06977300e-03,
                  -2.56486600e-03, -4.30936600e-03, -4.54972600e-03, -1.65411600e-03,
                  -2.60284900e-03, -5.19395700e-03, -7.00147400e-03, -8.37381500e-03,
                  -1.71357230e-02, -4.23715900e-03, 6.84685520e-01, -9.83742600e-03,
                  -3.80416200e-03, -5.23189800e-03, -6.89745270e-02, -4.89482700e-03,
                  -3.59654000e-03, -2.11665700e-03, -3.93375860e-02, -4.17703770e-02,
                  -5.82611500e-02, -1.46744020e-02, -3.34850400e-03, -1.02963100e-03,
                  -8.96676000e-04, -4.36490100e-03, -1.85235810e-02, -2.73314300e-03,
                  -1.41829800e-03, -8.44161200e-03, -2.73222000e-04
              ],
              [
                  -6.20695000e-04, -7.19550000e-04, -9.67854000e-04, -5.28552700e-03,
                  -3.25775400e-03, -3.53831400e-03, -4.42735400e-03, -9.41862000e-04,
                  -1.78464600e-03, -2.83243000e-03, -3.68133500e-03, -8.37629900e-03,
                  -3.94553200e-03, -2.14065100e-03, -5.56976700e-03, 9.33388188e-01,
                  -1.96587200e-03, -4.18932500e-03, -1.37765800e-03, -9.98719000e-04,
                  -1.32995000e-03, -2.31005400e-03, -4.08182600e-03, -6.86082000e-04,
                  -2.30538800e-03, -1.45762500e-03, -1.55272000e-03, -8.30639000e-04,
                  -1.15312000e-03, -1.69773400e-03, -3.08481500e-03, -3.53920700e-03,
                  -2.78759600e-03, -4.82409200e-03, -1.90047900e-03
              ],
              [
                  -1.05365460e-02, -2.77201160e-02, -1.38997600e-02, -1.75131450e-02,
                  -7.43927700e-03, -1.74728570e-02, -2.32116990e-02, -2.70168770e-02,
                  -2.64568950e-02, -2.10335850e-02, -4.39813870e-02, -3.05186980e-02,
                  -1.21476840e-02, -7.19245300e-03, -8.42048700e-03, -9.53943700e-03,
                  8.54311151e-01, -7.45152200e-03, -1.05220300e-02, -6.34622000e-03,
                  -1.26056620e-02, -2.33916630e-02, -1.65708290e-02, -3.30745800e-03,
                  -6.89995600e-03, -1.80855140e-02, -9.57258200e-03, -4.02866300e-03,
                  -8.22084600e-03, -5.76708000e-03, -1.44541380e-02, -2.06776280e-02,
                  -1.17129850e-02, -1.54647770e-02, -1.34556000e-04
              ],
              [
                  -3.28440200e-03, -6.24311700e-03, -2.23811500e-03, -2.24517600e-03,
                  -1.22265000e-03, -2.79440500e-03, -2.94276000e-03, -5.22038200e-03,
                  -2.87940400e-03, -2.26669100e-03, -5.88610300e-03, -3.39951800e-03,
                  -2.49367700e-03, -1.43435000e-03, -1.73084200e-03, -2.73064900e-03,
                  -1.58872610e-02, 9.47280650e-01, -5.24660500e-03, -3.34156500e-03,
                  -4.64702700e-03, -6.12686600e-03, -9.64309400e-03, -1.55895000e-03,
                  -3.34374000e-03, -1.27154520e-02, -1.02980210e-02, -5.04762200e-03,
                  -3.18315820e-02, -4.70972200e-03, -1.87728990e-02, -1.17074540e-02,
                  -7.52941900e-03, -9.26242400e-03, -5.29321000e-04
              ],
              [
                  -4.66129900e-03, -2.61181100e-03, -5.85396900e-03, -3.46753000e-03,
                  -4.65669900e-03, -4.77856400e-03, -4.29751900e-03, -3.53580000e-03,
                  -4.81048300e-03, -5.15613400e-03, -5.52004800e-03, -4.56950800e-03,
                  -3.80416800e-03, -2.44749500e-03, -4.32916400e-03, -5.75845400e-03,
                  -6.36979000e-03, -5.94068400e-03, 9.88925242e-01, -3.59116700e-03,
                  -3.74598100e-03, -4.78142000e-03, -1.39667820e-02, -1.78956300e-03,
                  -4.88959200e-03, -7.56228800e-03, -3.04177200e-03, -2.50854300e-03,
                  -1.84116500e-03, -5.29122800e-03, -4.00368800e-03, -2.46301300e-03,
                  -3.54485100e-03, -5.42187400e-03, -1.63446000e-05
              ],
              [
                  -3.23857050e-02, -1.55600770e-02, -6.23766550e-02, -3.66053040e-02,
                  -4.49165020e-02, -4.76161010e-02, -4.50508860e-02, -5.85177820e-02,
                  -4.40436660e-02, -4.32831130e-02, -3.75317260e-02, -3.82553330e-02,
                  -3.88128100e-02, -3.11484020e-02, -4.11798040e-02, -3.94432140e-02,
                  -1.86337160e-02, -3.99017100e-02, -3.06192600e-02, 9.78205901e-01,
                  -1.27384130e-02, -4.54220080e-02, -2.20832640e-02, -1.75961520e-02,
                  -2.31688660e-02, -2.24591830e-02, -1.19242350e-02, -3.92363700e-03,
                  -3.97955900e-03, -1.34446060e-02, -1.86434500e-02, -1.12099580e-02,
                  -2.59575990e-02, -1.66074250e-02, -1.02972000e-04
              ],
              [
                  -1.60275390e-02, -6.13409000e-03, -2.71781620e-02, -1.87237910e-02,
                  -2.42385370e-02, -1.75640290e-02, -1.74393560e-02, -1.90871520e-02,
                  -1.97342990e-02, -1.85570400e-02, -1.65973900e-02, -1.58016280e-02,
                  -1.55706510e-02, -1.11883190e-02, -1.83844110e-02, -2.41301120e-02,
                  -7.52811500e-03, -2.40358670e-02, -1.50754970e-02, -5.57427300e-03,
                  9.93243009e-01, -2.32480400e-02, -1.42569530e-02, -6.64954400e-03,
                  -1.01643470e-02, -9.78923700e-03, -7.86404000e-03, -4.41230600e-03,
                  -2.72739500e-03, -8.07547700e-03, -8.01769100e-03, -5.72768900e-03,
                  -1.23151840e-02, -1.06054910e-02, -1.27396000e-04
              ],
              [
                  -1.46905200e-03, -3.10196300e-03, -3.89418600e-03, -3.73939200e-03,
                  -4.31473800e-03, -3.65367500e-03, -4.64037300e-03, -1.10132300e-03,
                  -3.75309300e-03, -4.22069500e-03, -5.35075300e-03, -3.99477500e-03,
                  -4.71250800e-03, -3.29788300e-03, -2.49841200e-03, -3.32137000e-03,
                  -2.88861000e-03, -5.05800000e-03, -4.58188000e-03, -7.21863800e-03,
                  -5.39440600e-03, 9.90187525e-01, -7.59103200e-03, -3.92734900e-03,
                  -1.55711680e-02, -2.26994210e-02, -6.87130900e-03, -1.00440710e-02,
                  -1.92382000e-03, -1.23627540e-02, -1.07017790e-02, -9.31950000e-03,
                  -7.78185800e-03, -1.11921810e-02, -3.80526000e-05
              ],
              [
                  -1.22425530e-02, -1.63742290e-02, -2.25842900e-02, -1.77555320e-02,
                  -1.74345120e-02, -2.10347050e-02, -1.78669670e-02, -4.36518220e-02,
                  -1.75652330e-02, -1.60174480e-02, -3.24188900e-02, -1.67094480e-02,
                  -1.23227480e-02, -7.27922200e-03, -1.08192750e-02, -1.85736510e-02,
                  -1.83121040e-02, -1.97509160e-02, -1.59982320e-02, -2.14622930e-02,
                  -1.23390420e-02, -9.12723700e-03, 9.53779788e-01, -7.57586900e-03,
                  -9.47721600e-03, -5.64065970e-02, -8.59781900e-03, -5.13812900e-03,
                  -1.61223900e-03, -5.79363800e-03, -9.88756000e-03, -9.27582500e-03,
                  -6.72513500e-03, -9.09408800e-03, -2.79940000e-04
              ],
              [
                  -2.19343800e-03, -6.06963300e-03, -4.98145200e-03, -4.50629700e-03,
                  -4.04194700e-03, -6.98648400e-03, -3.43438200e-03, -3.41747200e-03,
                  -3.41006900e-03, -3.50793400e-03, -9.12631100e-03, -6.18793300e-03,
                  -3.53299300e-03, -1.98522800e-03, -2.72418700e-03, -2.69637700e-03,
                  -2.70748400e-03, -3.01606600e-03, -1.64985600e-03, -6.28428500e-03,
                  -2.92250400e-03, -1.50713500e-03, -2.93385000e-03, 8.43272123e-01,
                  -2.91911500e-03, -5.41202800e-03, -9.09763000e-04, -5.24271000e-04,
                  -1.73818100e-03, -1.17433600e-03, -1.09620400e-03, -7.66948000e-04,
                  -5.05851000e-04, -1.13478000e-03, -1.26804000e-05
              ],
              [
                  -7.44320000e-04, -1.30123200e-03, -1.33656800e-03, -1.44557900e-03,
                  -2.07666700e-03, -1.58179200e-03, -1.90543100e-03, -7.20588000e-04,
                  -1.50540000e-03, -1.41512500e-03, -1.49759300e-03, -9.86284000e-04,
                  -1.82330600e-03, -1.40744800e-03, -1.22694900e-03, -1.23660900e-03,
                  -7.21091000e-04, -1.11240500e-03, -1.95580500e-03, -2.89346400e-03,
                  -1.58430900e-03, -1.40325800e-03, -2.41006300e-03, -4.29143400e-03,
                  9.68672815e-01, -1.25060330e-02, -3.63311100e-03, -2.91591200e-03,
                  -4.21928000e-04, -3.64805500e-03, -3.63135100e-03, -3.55403400e-03,
                  -1.12208900e-03, -4.23538700e-03, -7.30692000e-06
              ],
              [
                  -3.77251900e-03, -4.42941100e-03, -6.62126300e-03, -3.65330100e-03,
                  -3.82203000e-03, -6.58817900e-03, -8.68325400e-03, -9.48871200e-03,
                  -4.67652600e-03, -5.13582800e-03, -7.81232900e-03, -4.77892900e-03,
                  -3.89350500e-03, -2.60333800e-03, -3.80070700e-03, -4.04554100e-03,
                  -3.82904000e-03, -1.35012680e-02, -1.38782330e-02, -1.96337010e-02,
                  -1.28967490e-02, -7.59355300e-03, -3.71616570e-02, -1.13707308e-01,
                  -1.02474447e-01, 9.02400846e-01, -4.00896200e-03, -3.46726700e-03,
                  -1.13774600e-03, -5.17047400e-03, -4.89850500e-03, -2.83128300e-03,
                  -3.37543600e-03, -6.29510000e-03, -9.73793000e-06
              ],
              [
                  -4.46396700e-03, -4.24023900e-03, -5.74444200e-03, -6.86245500e-03,
                  -6.10121500e-03, -6.53625600e-03, -1.20705030e-02, -4.44449900e-03,
                  -7.85652900e-03, -5.40303600e-03, -6.89462900e-03, -7.78954000e-03,
                  -6.09869700e-03, -7.86238500e-03, -4.76072600e-03, -1.63942320e-02,
                  -7.78767200e-03, -1.26373450e-02, -1.72457950e-02, -1.83154660e-02,
                  -2.21913580e-02, -1.64403010e-02, -2.13281350e-02, -2.00813450e-02,
                  -2.39053760e-02, -2.44674500e-02, 8.80024485e-01, -2.97912550e-02,
                  -4.70960100e-03, -2.57996570e-02, -2.39631410e-02, -1.24106480e-02,
                  -1.44290800e-02, -2.24202020e-02, -7.36682000e-04
              ],
              [
                  -1.88611970e-02, -1.98655060e-02, -1.70984380e-02, -2.24535660e-02,
                  -1.72398110e-02, -1.65729400e-02, -2.28175050e-02, -1.50299700e-02,
                  -1.87291970e-02, -1.55032240e-02, -2.48542710e-02, -1.80330140e-02,
                  -1.62574680e-02, -1.32142170e-02, -1.48606920e-02, -3.06049330e-02,
                  -2.46319390e-02, -2.14462180e-02, -2.14588490e-02, -2.97265790e-02,
                  -3.45836790e-02, -2.81645970e-02, -5.02575490e-02, -2.28621060e-02,
                  -3.31565310e-02, -3.63854420e-02, -1.93604010e-02, 7.89311681e-01,
                  -8.17110460e-02, -3.88063420e-02, -2.46211580e-02, -1.70929740e-02,
                  -2.51509960e-02, -4.45760530e-02, -1.02504300e-02
              ],
              [
                  -2.64326900e-03, -5.28204700e-03, -4.39485300e-03, -4.48442000e-03,
                  -5.66431700e-03, -5.35403900e-03, -8.88047900e-03, -2.05756100e-03,
                  -3.74304500e-03, -5.05364200e-03, -4.42512600e-03, -4.06656700e-03,
                  -4.57257200e-03, -3.20101600e-03, -4.36697300e-03, -6.46255300e-03,
                  -4.46859800e-03, -1.03596870e-02, -2.16859750e-02, -1.88119960e-02,
                  -4.15489490e-02, -2.86018150e-02, -8.65713700e-03, -1.17268850e-02,
                  -8.68494900e-03, -2.15092660e-02, -1.29188900e-02, -2.18554380e-02,
                  9.67253836e-01, -2.18768480e-02, -1.41371560e-02, -2.11780320e-02,
                  -3.34770060e-02, -2.59005200e-02, -1.06513000e-06
              ],
              [
                  -1.35131200e-02, -2.22303470e-02, -3.90755840e-02, -1.95476250e-02,
                  -1.73815640e-02, -2.39682570e-02, -6.18890450e-02, -2.00300730e-02,
                  -6.33456250e-02, -3.46157640e-02, -3.08848690e-02, -2.67847900e-02,
                  -3.64468520e-02, -3.79899920e-02, -3.93383190e-02, -2.76025310e-02,
                  -3.36054610e-02, -5.45094170e-02, -5.47710510e-02, -5.79910000e-02,
                  -6.26181740e-02, -5.08647570e-02, -4.46320290e-02, -2.47786810e-02,
                  -7.03045990e-02, -6.60507420e-02, -5.85068040e-02, -1.05897677e-01,
                  -2.90868240e-02, 8.37983117e-01, -9.08507990e-02, -3.86063160e-02,
                  -6.96876670e-02, -8.62371340e-02, -2.25064200e-03
              ],
              [
                  -1.35696800e-03, -1.83068700e-03, -1.95939600e-03, -6.39838000e-04,
                  -5.41984000e-04, -2.74102200e-03, -3.81121600e-03, -1.13210700e-03,
                  -2.62397700e-03, -1.94037600e-03, -2.47491200e-03, -3.16871900e-03,
                  -1.18331000e-03, -8.22726000e-04, -1.07783200e-03, -1.98748100e-03,
                  -4.34659300e-03, -1.43807700e-03, -2.61513000e-03, -1.44068300e-03,
                  -2.83853400e-03, -3.86929900e-03, -3.66046600e-03, -5.01583900e-03,
                  -1.04688460e-02, -3.54183300e-03, -2.54622700e-03, -1.62676700e-03,
                  -3.28213100e-03, -2.94667100e-03, 9.92273126e-01, -4.64874500e-03,
                  -4.56606700e-03, -8.72816000e-03, -4.61683000e-06
              ],
              [
                  -5.47815000e-04, -4.05660000e-04, -3.87450000e-04, -2.81477000e-04,
                  -3.21371000e-04, -3.10157000e-04, -5.16227000e-04, -4.36186000e-04,
                  -7.87919000e-04, -4.98952000e-04, -4.69940000e-04, -4.46195000e-04,
                  -7.09430000e-04, -4.95287000e-04, -6.22777000e-04, -3.53625000e-04,
                  -5.98958000e-04, -4.73916000e-04, -7.78217000e-04, -7.37070000e-04,
                  -1.24499100e-03, -5.70168000e-04, -9.18027000e-04, -2.81241000e-04,
                  -2.10271800e-03, -1.07889700e-03, -1.18085700e-03, -1.19354100e-03,
                  -2.71294000e-04, -2.19322100e-03, -4.29547100e-03, 9.83911679e-01,
                  -1.29849600e-03, -1.59338600e-03, -9.54745000e-06
              ],
              [
                  -1.26649700e-03, -4.92357000e-04, -4.68988000e-04, -3.87123000e-04,
                  -9.96002000e-04, -5.90477000e-04, -5.43451000e-04, -2.20118000e-04,
                  -5.36451000e-04, -3.80023000e-04, -9.16234000e-04, -5.86740000e-04,
                  -1.09116600e-03, -4.46769000e-04, -5.64677000e-04, -4.81039000e-04,
                  -4.27029000e-04, -3.98325000e-04, -5.67782000e-04, -4.69579000e-04,
                  -4.38077000e-04, -8.92320000e-04, -6.01365000e-04, -3.28890000e-04,
                  -4.50356000e-04, -4.55659000e-04, -5.17206000e-04, -5.49961000e-04,
                  -8.36447000e-05, -6.17285000e-04, -5.88392900e-03, -1.70381300e-03,
                  9.66582568e-01, -1.47311000e-03, -4.13318000e-07
              ],
              [
                  -3.03690300e-03, -5.45380100e-03, -5.18260800e-03, -4.21411300e-03,
                  -5.71260300e-03, -4.63599500e-03, -1.20957070e-02, -2.29243400e-03,
                  -6.62170800e-03, -4.55486400e-03, -5.70093000e-03, -5.02214900e-03,
                  -4.04490200e-03, -2.74930300e-03, -4.23297200e-03, -4.32305100e-03,
                  -5.61415000e-03, -5.70500400e-03, -6.91681400e-03, -7.65658100e-03,
                  -8.82503200e-03, -1.44884510e-02, -1.40305920e-02, -4.77944700e-03,
                  -7.67473200e-03, -1.54716820e-02, -1.55241870e-02, -1.03568370e-02,
                  -6.91027100e-03, -2.60610110e-02, -1.74308040e-02, -1.17896670e-02,
                  -1.37198490e-02, 9.23194110e-01, -1.26307400e-03
              ],
              [
                  -1.42671000e-05, -2.40286000e-05, -2.47281000e-05, -1.00001000e-04,
                  -3.23713000e-05, -3.04051000e-05, -2.71023000e-05, -1.27161000e-05,
                  -1.66471000e-05, -1.86450000e-05, -1.94115000e-05, -1.32096000e-05,
                  -3.37777000e-05, -1.22646000e-05, -6.18991000e-05, -1.52228000e-05,
                  -7.79118000e-06, -4.49630000e-05, -2.54850000e-05, -8.75894000e-06,
                  -3.42579000e-05, -5.08565000e-05, -1.34128000e-04, -5.77412000e-06,
                  -1.45253000e-05, -1.28275000e-05, -2.95250000e-05, -5.80156000e-05,
                  -1.61812000e-04, -5.93361000e-05, -6.40354000e-05, -4.01316000e-05,
                  -5.07878000e-05, -9.44490000e-05, 9.99909811e-01
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('step')
def leontief_matrix_for_python():
    """
    Real Name: b'leontief matrix for python'
    Original Eqn: b'if then else(Time<1996, leontief matrix 1995[sectors,sectors1], if then else(Time<1997 , leontief matrix 1996[sectors,sectors1], if then else(Time<1998, leontief matrix 1997[sectors,sectors1], if then else (Time<1999, leontief matrix 1998[sectors,sectors1], if then else(Time<2000, leontief matrix 1999[sectors,sectors1], if then else(Time<2001, leontief matrix 2000[sectors,sectors1], if then else(Time<2002, leontief matrix 2001[sectors,sectors1], if then else(Time <2003, leontief matrix 2002[sectors,sectors1], if then else(Time<2004, leontief matrix 2003[sectors,sectors1], if then else(Time<2005, leontief matrix 2004[sectors,sectors1], if then else(Time<2006, leontief matrix 2005[sectors,sectors1], if then else(Time< 2007, leontief matrix 2006[sectors,sectors1], if then else(Time<2008, leontief matrix 2007[sectors,sectors1], if then else(Time<2009, leontief matrix 2008[sectors,sectors1], leontief matrix 2009[sectors,sectors1]))))))))))))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 1996, leontief_matrix_1995(),
        if_then_else(
            time() < 1997, leontief_matrix_1996(),
            if_then_else(
                time() < 1998, leontief_matrix_1997(),
                if_then_else(
                    time() < 1999, leontief_matrix_1998(),
                    if_then_else(
                        time() < 2000, leontief_matrix_1999(),
                        if_then_else(
                            time() < 2001, leontief_matrix_2000(),
                            if_then_else(
                                time() < 2002, leontief_matrix_2001(),
                                if_then_else(
                                    time() < 2003, leontief_matrix_2002(),
                                    if_then_else(
                                        time() < 2004, leontief_matrix_2003(),
                                        if_then_else(
                                            time() < 2005, leontief_matrix_2004(),
                                            if_then_else(
                                                time() < 2006, leontief_matrix_2005(),
                                                if_then_else(
                                                    time() < 2007, leontief_matrix_2006(),
                                                    if_then_else(
                                                        time() < 2008, leontief_matrix_2007(),
                                                        if_then_else(
                                                            time() < 2009, leontief_matrix_2008(),
                                                            leontief_matrix_2009()))))))))))))))


@cache('run')
def leontief_matrix_1996():
    """
    Real Name: b'leontief matrix 1996'
    Original Eqn: b'1.1757530487304666,0.008326592022026416,0.3772212378384209,0.07521607162225874,0.09285783816400976,0.2060529680014836,0.028552595802320172,0.009944155580775434,0.022173480592687367,0.02923956541778378,0.01049665115989807,0.0077853790554149715,0.008365148932691337,0.008445496198369776,0.009243548038270906,0.03891218156966871,0.00530670319919045,0.017744800543740377,0.006408710569104784,0.009074017798876628,0.008594560555633929,0.10966717105827614,0.006566186361623342,0.01141477463373261,0.009275846620411267,0.009958941832718001,0.004848322430792803,0.004515266816203032,0.00337078235110573,0.007289503365418085,0.010082291566671786,0.00890046873121361,0.013637110126030392,0.011071200089920512,0.0192964893774875;0.023652172536457412,1.1306355470881646,0.026105106862015958,0.027762029902731182,0.023279882020983654,0.029610852571264397,0.02805833134336169,0.5251490734696818,0.08351265250076995,0.042072258171483246,0.12865809065328895,0.09861016413657575,0.037118836508130075,0.02978184056495855,0.03280150294060187,0.0382664185825097,0.14245799689022828,0.05884674863275381,0.016824464681583242,0.013408184203446156,0.011591243491712288,0.019438908964984184,0.04652533733151936,0.04631193796623033,0.04453910501980691,0.02618175269616956,0.010174776867687458,0.006992502836565885,0.00935709612833336,0.0113304048418267,0.017504979108443085,0.013524325233708988,0.016467317719517913,0.018277887657749133,0.07351976973480041;0.07610048827061215,0.005167556767195894,1.1898447955960196,0.015726380527190015,0.1316159725263417,0.020104137919630408,0.011857072426990613,0.006073409184473999,0.02142083101055596,0.013715338525807941,0.00875045786268681,0.007541159054205086,0.00821245720897472,0.00861502384912716,0.008018079035954577,0.010949297956382836,0.004953334590515041,0.007749528790850814,0.006997876947708022,0.010429031422429376,0.009161602984906125,0.19930445250280265,0.007061441574682714,0.01536297267393843,0.014290422205141862,0.011432852781114363,0.006190363502749868,0.00576495921052728,0.002309483263177211,0.008687661899436969,0.01461742877174604,0.014019747950407767,0.022884954331042425,0.012547288840622972,0.0031607600575244035;0.00648889337681418,0.00514168534239203,0.00770022571184413,1.404732606767281,0.09941551581890738,0.015056388757771762,0.017472247173233778,0.004617353331069701,0.01196299408252479,0.03673059618103088,0.01242726406959206,0.007582749647377585,0.00953959702811803,0.009461190749110284,0.018550181661982575,0.042852132113784296,0.0034370473759196495,0.009298260097974582,0.007170119216836278,0.006651854648991639,0.007319870155024411,0.008232008724892078,0.005805516488332922,0.008736187687338325,0.005604717264695366,0.006023715000836117,0.006530234276711282,0.0029380114704387625,0.0016779072028048107,0.004559773261695415,0.007483527084816288,0.0028173337269583616,0.008011860403870348,0.010374192452231106,0.0014029357644896108;0.0006947364981022314,0.0008213903337279693,0.0009409733586757457,0.012055807767473881,1.2342563938008408,0.0023875811949798176,0.002745937562234771,0.0007133393935662595,0.0010863240920481,0.0023362230490930618,0.0015422712721860296,0.001357721215859952,0.0014086672158010551,0.0013514580458493365,0.0030014027180630684,0.00581959429672255,0.0006479162316229543,0.0009739645656047512,0.0011727171226661062,0.0009779992352284609,0.00098656631813913,0.0007969405116540514,0.000732499772906681,0.0008628052366181129,0.0007243311386944183,0.0006869404367393779,0.0012188690827156206,0.000376052121524162,0.00019402290732414,0.0005720288295425805,0.0015161819832521246,0.0004230870771271875,0.0006106276307402988,0.001425328916723033,0.00012113007594714816;0.004366840118310894,0.005260384515300457,0.006103514127573133,0.006445364377616151,0.007557083639786984,1.2352596685489612,0.02098933851742885,0.004246547432827068,0.006205862275587058,0.00791826524172127,0.013246844320535864,0.00867674670628257,0.00872228658698044,0.0072540557165607245,0.010283314010623941,0.09728167930973905,0.004587149885961488,0.04980555561636171,0.0043954110323326375,0.0044631863180268115,0.004093050835880874,0.006218655913533097,0.004751416399513905,0.004776503139089938,0.0040049220595278,0.009347491788013453,0.0033078011853652314,0.002955852769795506,0.0059255457659594425,0.0037912822926140116,0.005044554855406206,0.0037598894787462616,0.0038427301524697746,0.007226127850334575,0.0013315454569581388;0.015810675232432205,0.01563869813221294,0.05256276635979216,0.035690444738781565,0.04284869566498076,0.036264550627997126,1.3235545066425238,0.015724535015200807,0.0494643251692356,0.049334337575440104,0.049030567945201206,0.02666058052334763,0.03434106744144594,0.044800090796977395,0.03144059490166996,0.050088167382148455,0.015297923328491256,0.02631674330627154,0.024460209218757353,0.030571414816191782,0.02916457041579909,0.032458283644542035,0.020676763572816975,0.02382977636017853,0.026890036958943674,0.03668696672652001,0.025919512961100257,0.03410808353848659,0.009851956474382311,0.04257834491563402,0.03224511561367575,0.027722736330082112,0.025827628651996525,0.046247315180584364,0.00279947967298054;0.022011231471802537,0.023786426131684968,0.018700065470993874,0.01979871692626806,0.017479969108217294,0.01952593925521023,0.01641644513397902,1.0639030458211414,0.04629124395728898,0.027742661936596122,0.03174207289891985,0.024502956142331375,0.016299906425746406,0.015029807785722328,0.015368265312482596,0.017941690923527424,0.030868126597126084,0.025743928493134536,0.012088386939502947,0.01262369685299997,0.010439473684916543,0.013013306415731571,0.06258475059278702,0.07046750527087482,0.06971172492034328,0.02660937977999978,0.008712818881687248,0.005487742238311334,0.004340041909629214,0.009988008629727997,0.013912515065490504,0.007266366700285028,0.01101090368233385,0.01328237701303736,0.00227134903648692;0.07127815409294425,0.03234060889512671,0.052951828233121966,0.14796133079780155,0.09413423292866778,0.06994989458090611,0.07631470224421816,0.03924687873768806,1.3222705226643339,0.3109624920321331,0.06470970929401429,0.04680697196561187,0.04894836953590559,0.05971747393311057,0.05963074813152384,0.08147680127112761,0.020157001053502648,0.04008339853650623,0.029202964578592953,0.01420625158975739,0.012508176859230065,0.0254264939660394,0.019331297352160336,0.01953819910114997,0.01706974302767343,0.018152254543109873,0.011363813833583997,0.007912699774101096,0.007098624131063092,0.0155582564064853,0.022179216203198772,0.01144519195689184,0.09264438360157883,0.024439187324998297,0.004163905481592072;0.01243701122490992,0.017288549147926758,0.028837653693458688,0.023271221543628404,0.05851169543322391,0.023236916185176617,0.02905172260103195,0.013503828865548885,0.03489880695533051,1.137333546418997,0.02367094736581359,0.02205703353532387,0.046900834604099856,0.04913546670411645,0.06925552929842907,0.05688468500906129,0.009967933650529125,0.03197872705764363,0.03340884598682231,0.010416976068134519,0.010390704184110908,0.014043782898227828,0.021177707187245643,0.012979821030884986,0.012166358638964538,0.014898871686521264,0.009706435740651642,0.004596496644344588,0.004221877358576431,0.008126507445020224,0.010082960955424868,0.0046886817102074615,0.012994989593775258,0.01015271538323478,0.00190242474545258;0.005664890008527408,0.010194471109927957,0.011650445980111241,0.0076134370849323795,0.007660389771137859,0.01787427608192694,0.0064242862842763294,0.008762879564405532,0.014213146160702204,0.014202884839856397,1.1239787533987402,0.02033910569965235,0.015564022702989165,0.023662905081154588,0.018892592209398075,0.015477857669421637,0.008142241429189638,0.09837826878379413,0.008406589171554598,0.004473037873230762,0.0038052515904302563,0.008632049368792576,0.005933728449829184,0.005352178714169763,0.00478226772955225,0.006355361575342931,0.0047556812273919094,0.002602731630581874,0.007811963339558595,0.00400500061637222,0.0062414135806196465,0.0047669724360512025,0.0060665939758982705,0.006178521080994544,0.0012387564718714236;0.024220923623485036,0.06244462387354073,0.04691925828971058,0.0349102103185956,0.044820425034531305,0.07338196940611959,0.039032085633132374,0.04657374619037412,0.05777117305339478,0.06974928310820543,0.08077154252112881,1.4910144517011634,0.3021196573816687,0.17570311905633593,0.24924740731798348,0.1956024511112455,0.035778081322324115,0.16190874714496145,0.0723544772579719,0.02089356598546392,0.018055316317918423,0.02621206821097585,0.036323266964995445,0.04648225509094441,0.03916979891857104,0.03128080127992945,0.021506561639909622,0.010557499085752195,0.015676919578919996,0.01864188767941091,0.027753058826868644,0.013285907344576848,0.020524855162003985,0.02342787781831592,0.006484660938011106;0.01412127392881266,0.03000146011261056,0.014740343142819495,0.017887993744365553,0.016232714720013336,0.02131321876751614,0.017449317331408094,0.02192363723386083,0.02006371269032907,0.023952000080696947,0.02605021001783665,0.035394127419889516,1.1489924886239453,0.032827060508551005,0.0588493490646011,0.02333354324865678,0.01722709027674191,0.030344813680190777,0.03742343165427646,0.008803924973316928,0.007515834747092301,0.009263510981878218,0.015386922312109806,0.016172876928013762,0.013526053029101648,0.012293604358613059,0.007890196746520292,0.0046462392823846095,0.0046159212574464915,0.007922421699793042,0.012862808513609231,0.005586341846444659,0.007652387694379961,0.00944516541473349,0.002662972867038682;0.011175214609225844,0.02227837839351606,0.018263679895930432,0.022484920375984936,0.02120284289034908,0.02477025190926799,0.029345640795189344,0.019919328202648075,0.030120981178012818,0.035765475342690846,0.028833100360414272,0.04594206210524843,0.13217331569378177,1.3587430360506436,0.11515143028069366,0.04755022150190881,0.029195199079563628,0.05365800340999653,0.054399576149033825,0.021064966834470213,0.01866891227644221,0.016439846030611462,0.02252526723196825,0.022488019818317474,0.022185476997529104,0.02246643421396138,0.04787205745747339,0.01309682605884562,0.00800896403955276,0.026709071129430387,0.027025438243372533,0.013367741877464048,0.033798547981840135,0.02138109428607242,0.003063273502070445;0.011678171868245045,0.015857869667156525,0.013209513653985231,0.013665859156541829,0.014410063827240523,0.01517603442634832,0.011352623710579013,0.013519630820540723,0.012994107316647189,0.014963485517500463,0.015961243331026834,0.01914660136592742,0.031963274686776344,0.0180526935965204,1.4224003734874713,0.016777269545086262,0.010173362033205619,0.015638457777377688,0.1333816928323532,0.01316751010605474,0.010722519088713498,0.008981128784306769,0.050700959560571024,0.0724831266496643,0.07369432008608716,0.02509596295038345,0.009278033688271231,0.005194258157717758,0.003180864388509877,0.009609181070665936,0.030784425472693246,0.004891342729836592,0.006934020739953466,0.01073226282503378,0.0016396601083926454;0.002494872831714931,0.0034974189496704534,0.003849716621923177,0.0103106097543015,0.00762020548094507,0.01060924185606908,0.006554417832117605,0.0030992338815977807,0.0049681867933583914,0.006002744239788528,0.006696803415982896,0.012905412440606832,0.009076137621401723,0.007765629107420313,0.011773284777733156,1.0413670252855636,0.002986301087302661,0.009012956988769808,0.005159486745441637,0.0031667301725300133,0.003114026379996507,0.004997814518403845,0.0035380350823392185,0.003780856850375622,0.0037195476276286406,0.003662904478559142,0.002530021301019947,0.002704977383075782,0.0021741700672092625,0.004134471769188923,0.0058647014338662085,0.004797574010940112,0.004729953501548179,0.008365607457481059,0.004121732687164426;0.021721190409356873,0.0405202320149604,0.03167306744594762,0.041158657196630734,0.029493152742916504,0.03771647416445349,0.04438160688179537,0.040333244903744014,0.05683572414885088,0.050109667768911216,0.06274745632385285,0.058472143391135864,0.03632961861525437,0.03343083594928903,0.03593458552696592,0.03513891061163916,1.1149170427670714,0.02698110628542594,0.024299881539032342,0.015692303681456715,0.022746413901689473,0.03890420137505663,0.029204093506022936,0.02016757248903059,0.018734179814652252,0.027682699989394238,0.01692439810673436,0.012116639416005128,0.013729033831965647,0.015852403478637006,0.025562989101279018,0.02702537770984213,0.025563507120061175,0.028347553134298924,0.003691744238135897;0.008971913077219697,0.014917716268721404,0.011073319493839284,0.011183683638921919,0.010664050141968279,0.0135483281313689,0.012912133419889293,0.013570910556196879,0.014293172694985607,0.013356446038380897,0.017716464810323893,0.015670678733761413,0.012738109412431782,0.012684233621046911,0.012075627172036689,0.012391093732776892,0.03587504103363613,1.0449925227091352,0.011400714077010887,0.010606394695785549,0.01146551071396506,0.013611337227524764,0.017251351852448787,0.014703301969731526,0.011424550859173441,0.024882024845959194,0.017738409059175862,0.011970559430112725,0.05062624696278398,0.012010396890368195,0.026903583790972286,0.01909938938657613,0.013725421908423385,0.021121505052019547,0.00409787073551788;0.009581154871159932,0.008916507299372763,0.014370127668523575,0.013176426769432838,0.016319904847125297,0.014110663359556524,0.011322226482694875,0.010001690331560795,0.01406924646858898,0.014461808852428449,0.015016067984341908,0.014838356921398175,0.01336978772548949,0.013330479646294798,0.014051091971837156,0.01397377449549871,0.014354137100715309,0.014855500783258462,1.0134136339784319,0.00809532670695596,0.007753539797135644,0.011135680529159165,0.02345387366009753,0.010322052859061771,0.00858302024022855,0.013203930218034926,0.008175012570765182,0.005702360496383072,0.003954854122133875,0.009927161520268294,0.0077431255831530875,0.005676482029210275,0.007296206244490477,0.010957415347351033,0.000980087544069967;0.05936659273007223,0.04925521987933315,0.1079206935500185,0.1038702068429312,0.13037715354248072,0.10016114430182607,0.08948431560579027,0.07298711264150397,0.09237597480247545,0.09894085618107672,0.08105813374132853,0.09002160492148,0.0973270881229945,0.10340512162400455,0.10298421248156961,0.0978036123513215,0.04575667165722611,0.08240621109515436,0.0673699235482289,1.0497548078114236,0.027601474815190676,0.07765859570187944,0.04611486142117468,0.04803130603322825,0.04482921309028216,0.043543705867633974,0.02461391140290637,0.016985016912913507,0.01249312151323472,0.028121904944499673,0.03878377080742869,0.021336369893374042,0.048453615134241415,0.03367873291593884,0.005600719502742718;0.029367730787798155,0.021088631205153464,0.052898210089060274,0.05106533826152709,0.06977978256454455,0.042176523924215184,0.03613188220539442,0.028947127661077265,0.042731328369841386,0.04430923479217586,0.03612702535906833,0.036068912349042706,0.037670361774136525,0.037397905562474985,0.044516522334255626,0.046672211820499264,0.018694903659386457,0.04544831327155659,0.030410541247792452,0.01700822218609125,1.0156195535992676,0.04412558958547797,0.026383336999374854,0.02359202980284922,0.02105517477849525,0.02152614394695881,0.018029271320442387,0.0108763937617678,0.008331535754551436,0.017979826154932318,0.016984286981642987,0.011507525597497315,0.02174655521728792,0.022747840704009613,0.0030313433519682303;0.005870065171382615,0.009194115720748483,0.011509734555698216,0.012993925646302527,0.013306923480389083,0.013473643195337294,0.014356747259494313,0.009078948067327671,0.0143221543391917,0.015116671289414966,0.014086124249819244,0.014525943004279191,0.016035648125197012,0.016989574074697235,0.013568778216608754,0.013503611359632664,0.01024912956675842,0.013348386178118307,0.012955930872084232,0.014962426050545012,0.010877322749813902,1.016257862792318,0.01454668459264994,0.017161011846535314,0.03245764524591088,0.02945401397401474,0.013156373401512747,0.016545247783151258,0.0053887412026773565,0.019743092980570056,0.01431441303794839,0.009908854422427168,0.01353270414999311,0.017404978202820918,0.00103588424879417;0.0278268224601518,0.04342585919471562,0.045441735930828585,0.04240621029826144,0.04751878948627186,0.04910200834959419,0.03883188943795109,0.06322683516823832,0.04382969825588676,0.041617791756384075,0.05976440354557756,0.04384377360373702,0.03463038560398993,0.03108950270439862,0.03740849871703413,0.04153774510496231,0.0418240526319121,0.03959892303022489,0.027261796887954402,0.028711732099927105,0.018683407264651553,0.02701843506259406,1.057440165626381,0.04103215824021294,0.02924951940377898,0.04759300984219894,0.018167563361956587,0.013856943747467241,0.006940280733384284,0.015720827332397963,0.021644816090257667,0.016595988396406407,0.018420475289693206,0.0208862412483285,0.004541959261234709;0.0051911704574442675,0.006872175920219385,0.00795585015030796,0.007042636921011175,0.008409968910919406,0.012532352296596215,0.004628674228633741,0.009326179525486693,0.006919308743128285,0.00612384052538232,0.009349658857638426,0.008953546342716888,0.005462184790625358,0.004956634961850642,0.0059731912606014355,0.006408274658648509,0.004554315703791206,0.006385346509367133,0.0032737922329538344,0.004238904833819948,0.0026655006876453815,0.004435095546719558,0.005952825735143504,1.1154788335655557,0.00610082166452364,0.009020019979551703,0.0025107293330006745,0.001752035636817192,0.0009169216403307848,0.002378809252432604,0.003048664786884762,0.002615825735198118,0.0022154020932219653,0.002576630268243586,0.0006854360385124276;0.00276958664586557,0.004920625772172122,0.00492796835112917,0.005440528959036246,0.007054458565136044,0.004779980390260936,0.005841650025572784,0.004518827498262205,0.0058401045403121314,0.005701765122526479,0.0049419853440632105,0.005205723669076823,0.005622197741106403,0.0062411442140070045,0.006160086907127939,0.00520165681864228,0.0031548624214283102,0.004403023151867618,0.004826596309784715,0.006836546386226726,0.0036761946891528887,0.003933830899788468,0.0052949543128913285,0.011385654225757132,1.0382475689946964,0.024819893140695132,0.0075727136577213834,0.005921776492937923,0.0016117044345990525,0.006937370468016827,0.0067926422575870435,0.0034513082649972235,0.003434018513536159,0.006615085401423701,0.00047607135017367294;0.011237447589810538,0.01659800307513535,0.019640299226753883,0.016872385245576594,0.01984491380071692,0.020984265131605364,0.019633964046200755,0.02124702844318311,0.0189038414673458,0.01881742601332243,0.023760115482341422,0.020109567334214533,0.017767797546902345,0.016913364968593754,0.018672017820878736,0.018024759944860722,0.013938995098904502,0.015492483818462464,0.01652990766624901,0.02867870527846136,0.01570203480502894,0.018228303664120468,0.05068365828229633,0.18565654659807723,0.12077656582135654,1.138297691076147,0.009476687967988293,0.009391798313688231,0.003469106505046741,0.011386295349820334,0.011252028463698828,0.006718593423168056,0.009445408562669877,0.012530461112797271,0.0016297804962556697;0.009336910975962075,0.014526145319129508,0.01591610673287991,0.017014021028259954,0.018306252054828297,0.01647646055993679,0.024808043071346104,0.014153580785577491,0.020255355925657505,0.01897909477906808,0.017330679585238363,0.018315031106776784,0.020148081194215857,0.02090925052738328,0.018100890517868062,0.019653046405051455,0.013633111280215429,0.020351543909038178,0.021294062636419864,0.027837789875254402,0.02641745981773762,0.021661807296176446,0.02463448080016401,0.03793301101549082,0.0446292775474836,0.03569043702078324,1.0944206068553595,0.03422231229294091,0.008912799339539534,0.030660161847094854,0.02542648264184,0.012777964096553202,0.01879704074653579,0.031444067966310746,0.0016495221701479101;0.04538599589995294,0.06356744340220312,0.05865773779729684,0.0675338041493339,0.0659375285379977,0.06564679929004986,0.06265323422331995,0.057903862828760255,0.06614165614389891,0.06378733802588274,0.06549574659192967,0.0682078619422699,0.0648297434411244,0.06282112318353049,0.06199550600644293,0.06523698765257499,0.05367327422871288,0.0602577729575199,0.05806074291530769,0.07211424371727053,0.061415131837342415,0.05761654175006435,0.07499135401840994,0.08721870579960919,0.07673715337534634,0.0630327414280138,0.04689141485536711,1.2216750043653732,0.07029052842656262,0.06457289914190316,0.04739521427924756,0.02853477429087327,0.04816682407998282,0.06270314932648617,0.010152371660711661;0.017010585232501416,0.016400201697152787,0.022012191757621483,0.023083239228249675,0.025590283793249697,0.022329879424102844,0.02568881423262278,0.01675923894619086,0.022114888209814353,0.02358535890493793,0.020924547314857385,0.022242889359045594,0.023649815100407263,0.023402849678541386,0.022552112372901386,0.025980936451258103,0.016756877565927652,0.028893219761377268,0.03777178968434242,0.040748314074066254,0.05331498578755706,0.043375717349495545,0.0237105813721667,0.04859249425054404,0.03344423238537421,0.03747724236781208,0.022392262346905927,0.03917599740282276,1.0373068843627447,0.036589362118447544,0.021351337349037366,0.024150654466985923,0.04102443485735231,0.041711512451418166,0.0024892637728627623;0.047370749945172576,0.07115642145594235,0.09517805149831161,0.09261422636974263,0.09445457090207617,0.08043539667021425,0.12573917257708592,0.07043204049116869,0.1329691882315556,0.10754426107893898,0.09150015201346712,0.09228983997710212,0.11250245131483713,0.13767337125058712,0.11629576702208282,0.1006633683494987,0.07724697604989238,0.11116222605109521,0.09226751632760526,0.09879355198486527,0.09936597432754504,0.08207987412351377,0.08491520773722393,0.12253765969175126,0.1552058700018854,0.12051668747674417,0.10356255551617516,0.13629997671371735,0.05829547260779796,1.175269545094954,0.09332618723513249,0.04891129106426299,0.09195203475575389,0.11098436120349381,0.007488113861450184;0.0037560901658046475,0.006055675498749333,0.005330748703553177,0.004616253645417508,0.004480706579799979,0.006931858572287488,0.006905030992749007,0.0051532144882589425,0.007118699630010921,0.006144154296965427,0.00594662001270361,0.006474561649945022,0.004945592959729438,0.0051965363172457365,0.0050926470695359235,0.006125812705005995,0.008164583910095679,0.004738286781893027,0.004693533270056927,0.0038699026341366834,0.005468410013984643,0.006382743700014586,0.005647293047967336,0.013060008886000767,0.012256366789160348,0.00691786444643025,0.004517964849605844,0.003555398837595693,0.0047270647226286865,0.004972487028568826,1.0097272087885025,0.005204122334519205,0.00748232304970335,0.010479496138039496,0.000545051935869089;0.001530961233621186,0.0012284726250805407,0.0015946764013899941,0.0015304260203077057,0.0016037555424123946,0.0013834399348427897,0.0018003493165323849,0.0014218757718099898,0.0021193502117862204,0.00173657003921225,0.0015604240904354488,0.0016475092776992064,0.002035494437179995,0.002331872071579989,0.00183637929684196,0.001471237126676942,0.0018275277850741036,0.0015393094962688231,0.0012836775991071148,0.0016669673851905412,0.0025827939858934306,0.001325845753909678,0.0019161218190798426,0.0015299829104803364,0.002913549152071803,0.00212428978540201,0.0023849799768232843,0.0021246618072155257,0.0005863397789994472,0.003007673555093674,0.005171867047283763,1.0068628467567682,0.0018095001281827998,0.00228675933233728,0.00013501630059703878;0.0027917779922397284,0.0008812478673736469,0.0017669741420976485,0.001321337611639803,0.0013525023295820591,0.0014446759886876713,0.0011898878535532755,0.00086519802191211,0.0012303246610464672,0.0011968722412610286,0.001121820627222522,0.0011292416019322168,0.0012959706495280748,0.001255017650337186,0.0011407650264733573,0.0013002895046313103,0.0009238514043346492,0.0012133206036735096,0.0010498922280121911,0.0010999006835943237,0.0008653022676630682,0.0017919199260694413,0.0012202554918064304,0.0017507185040683004,0.0012769261970403427,0.0013300926440188326,0.0012319666680142406,0.001083216979844914,0.0003608445783192748,0.0012981615505285177,0.006772300388446005,0.001745882658794042,1.023260551632149,0.0022920158331179896,0.00012156636173456939;0.00974263657767637,0.015078504594628235,0.019244100420819612,0.019241721759855168,0.021334973759328472,0.018218649195166258,0.029491214983141476,0.015407562324809276,0.023812819410078744,0.02100693090767462,0.018809892561936964,0.0218577733648489,0.021570889671950495,0.0218557870651493,0.020083517082628437,0.0208659664981743,0.015558060785395976,0.019545827626136724,0.0207285715657101,0.019167606243849965,0.01981203865864695,0.025288114542659838,0.02016208661433695,0.0216205070700624,0.023827760265275052,0.02438736522059359,0.02825990780366548,0.022285708495664084,0.013245674742267656,0.04237286854176891,0.024974042842033133,0.01616631261430859,0.025594034785781986,1.094577665231256,0.0020273283900673184;4.8098524757961984e-05,5.830622386968548e-05,9.415350103536849e-05,0.000110374700165938,0.00010233378465598714,9.989307149405182e-05,0.00010419924871036388,6.736973214305594e-05,9.727895402237405e-05,0.000103461984659678,8.575598699780344e-05,0.00010357404492126442,9.997454575989966e-05,8.813125002209183e-05,0.00012166153233335523,0.00010380248930038516,6.090551966303626e-05,0.00014970313253818344,0.00019392592356576077,9.183458298553713e-05,0.00010828500369441244,0.00012671216207249238,0.0002194691694012559,9.980653857134692e-05,0.00010085782886053979,9.605866342557817e-05,0.00012829461344052804,0.00011902924524940077,0.0003164458495520744,0.0001257585845466516,0.00013273492047006393,8.342280951298928e-05,0.00017719318618855166,0.000182126670264194,1.000031863643497;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            1.17575305e+00, 8.32659202e-03, 3.77221238e-01, 7.52160716e-02, 9.28578382e-02,
            2.06052968e-01, 2.85525958e-02, 9.94415558e-03, 2.21734806e-02, 2.92395654e-02,
            1.04966512e-02, 7.78537906e-03, 8.36514893e-03, 8.44549620e-03, 9.24354804e-03,
            3.89121816e-02, 5.30670320e-03, 1.77448005e-02, 6.40871057e-03, 9.07401780e-03,
            8.59456056e-03, 1.09667171e-01, 6.56618636e-03, 1.14147746e-02, 9.27584662e-03,
            9.95894183e-03, 4.84832243e-03, 4.51526682e-03, 3.37078235e-03, 7.28950337e-03,
            1.00822916e-02, 8.90046873e-03, 1.36371101e-02, 1.10712001e-02, 1.92964894e-02
        ],
              [
                  2.36521725e-02, 1.13063555e+00, 2.61051069e-02, 2.77620299e-02, 2.32798820e-02,
                  2.96108526e-02, 2.80583313e-02, 5.25149073e-01, 8.35126525e-02, 4.20722582e-02,
                  1.28658091e-01, 9.86101641e-02, 3.71188365e-02, 2.97818406e-02, 3.28015029e-02,
                  3.82664186e-02, 1.42457997e-01, 5.88467486e-02, 1.68244647e-02, 1.34081842e-02,
                  1.15912435e-02, 1.94389090e-02, 4.65253373e-02, 4.63119380e-02, 4.45391050e-02,
                  2.61817527e-02, 1.01747769e-02, 6.99250284e-03, 9.35709613e-03, 1.13304048e-02,
                  1.75049791e-02, 1.35243252e-02, 1.64673177e-02, 1.82778877e-02, 7.35197697e-02
              ],
              [
                  7.61004883e-02, 5.16755677e-03, 1.18984480e+00, 1.57263805e-02, 1.31615973e-01,
                  2.01041379e-02, 1.18570724e-02, 6.07340918e-03, 2.14208310e-02, 1.37153385e-02,
                  8.75045786e-03, 7.54115905e-03, 8.21245721e-03, 8.61502385e-03, 8.01807904e-03,
                  1.09492980e-02, 4.95333459e-03, 7.74952879e-03, 6.99787695e-03, 1.04290314e-02,
                  9.16160298e-03, 1.99304453e-01, 7.06144157e-03, 1.53629727e-02, 1.42904222e-02,
                  1.14328528e-02, 6.19036350e-03, 5.76495921e-03, 2.30948326e-03, 8.68766190e-03,
                  1.46174288e-02, 1.40197480e-02, 2.28849543e-02, 1.25472888e-02, 3.16076006e-03
              ],
              [
                  6.48889338e-03, 5.14168534e-03, 7.70022571e-03, 1.40473261e+00, 9.94155158e-02,
                  1.50563888e-02, 1.74722472e-02, 4.61735333e-03, 1.19629941e-02, 3.67305962e-02,
                  1.24272641e-02, 7.58274965e-03, 9.53959703e-03, 9.46119075e-03, 1.85501817e-02,
                  4.28521321e-02, 3.43704738e-03, 9.29826010e-03, 7.17011922e-03, 6.65185465e-03,
                  7.31987016e-03, 8.23200872e-03, 5.80551649e-03, 8.73618769e-03, 5.60471726e-03,
                  6.02371500e-03, 6.53023428e-03, 2.93801147e-03, 1.67790720e-03, 4.55977326e-03,
                  7.48352708e-03, 2.81733373e-03, 8.01186040e-03, 1.03741925e-02, 1.40293576e-03
              ],
              [
                  6.94736498e-04, 8.21390334e-04, 9.40973359e-04, 1.20558078e-02, 1.23425639e+00,
                  2.38758119e-03, 2.74593756e-03, 7.13339394e-04, 1.08632409e-03, 2.33622305e-03,
                  1.54227127e-03, 1.35772122e-03, 1.40866722e-03, 1.35145805e-03, 3.00140272e-03,
                  5.81959430e-03, 6.47916232e-04, 9.73964566e-04, 1.17271712e-03, 9.77999235e-04,
                  9.86566318e-04, 7.96940512e-04, 7.32499773e-04, 8.62805237e-04, 7.24331139e-04,
                  6.86940437e-04, 1.21886908e-03, 3.76052122e-04, 1.94022907e-04, 5.72028830e-04,
                  1.51618198e-03, 4.23087077e-04, 6.10627631e-04, 1.42532892e-03, 1.21130076e-04
              ],
              [
                  4.36684012e-03, 5.26038452e-03, 6.10351413e-03, 6.44536438e-03, 7.55708364e-03,
                  1.23525967e+00, 2.09893385e-02, 4.24654743e-03, 6.20586228e-03, 7.91826524e-03,
                  1.32468443e-02, 8.67674671e-03, 8.72228659e-03, 7.25405572e-03, 1.02833140e-02,
                  9.72816793e-02, 4.58714989e-03, 4.98055556e-02, 4.39541103e-03, 4.46318632e-03,
                  4.09305084e-03, 6.21865591e-03, 4.75141640e-03, 4.77650314e-03, 4.00492206e-03,
                  9.34749179e-03, 3.30780119e-03, 2.95585277e-03, 5.92554577e-03, 3.79128229e-03,
                  5.04455486e-03, 3.75988948e-03, 3.84273015e-03, 7.22612785e-03, 1.33154546e-03
              ],
              [
                  1.58106752e-02, 1.56386981e-02, 5.25627664e-02, 3.56904447e-02, 4.28486957e-02,
                  3.62645506e-02, 1.32355451e+00, 1.57245350e-02, 4.94643252e-02, 4.93343376e-02,
                  4.90305679e-02, 2.66605805e-02, 3.43410674e-02, 4.48000908e-02, 3.14405949e-02,
                  5.00881674e-02, 1.52979233e-02, 2.63167433e-02, 2.44602092e-02, 3.05714148e-02,
                  2.91645704e-02, 3.24582836e-02, 2.06767636e-02, 2.38297764e-02, 2.68900370e-02,
                  3.66869667e-02, 2.59195130e-02, 3.41080835e-02, 9.85195647e-03, 4.25783449e-02,
                  3.22451156e-02, 2.77227363e-02, 2.58276287e-02, 4.62473152e-02, 2.79947967e-03
              ],
              [
                  2.20112315e-02, 2.37864261e-02, 1.87000655e-02, 1.97987169e-02, 1.74799691e-02,
                  1.95259393e-02, 1.64164451e-02, 1.06390305e+00, 4.62912440e-02, 2.77426619e-02,
                  3.17420729e-02, 2.45029561e-02, 1.62999064e-02, 1.50298078e-02, 1.53682653e-02,
                  1.79416909e-02, 3.08681266e-02, 2.57439285e-02, 1.20883869e-02, 1.26236969e-02,
                  1.04394737e-02, 1.30133064e-02, 6.25847506e-02, 7.04675053e-02, 6.97117249e-02,
                  2.66093798e-02, 8.71281888e-03, 5.48774224e-03, 4.34004191e-03, 9.98800863e-03,
                  1.39125151e-02, 7.26636670e-03, 1.10109037e-02, 1.32823770e-02, 2.27134904e-03
              ],
              [
                  7.12781541e-02, 3.23406089e-02, 5.29518282e-02, 1.47961331e-01, 9.41342329e-02,
                  6.99498946e-02, 7.63147022e-02, 3.92468787e-02, 1.32227052e+00, 3.10962492e-01,
                  6.47097093e-02, 4.68069720e-02, 4.89483695e-02, 5.97174739e-02, 5.96307481e-02,
                  8.14768013e-02, 2.01570011e-02, 4.00833985e-02, 2.92029646e-02, 1.42062516e-02,
                  1.25081769e-02, 2.54264940e-02, 1.93312974e-02, 1.95381991e-02, 1.70697430e-02,
                  1.81522545e-02, 1.13638138e-02, 7.91269977e-03, 7.09862413e-03, 1.55582564e-02,
                  2.21792162e-02, 1.14451920e-02, 9.26443836e-02, 2.44391873e-02, 4.16390548e-03
              ],
              [
                  1.24370112e-02, 1.72885491e-02, 2.88376537e-02, 2.32712215e-02, 5.85116954e-02,
                  2.32369162e-02, 2.90517226e-02, 1.35038289e-02, 3.48988070e-02, 1.13733355e+00,
                  2.36709474e-02, 2.20570335e-02, 4.69008346e-02, 4.91354667e-02, 6.92555293e-02,
                  5.68846850e-02, 9.96793365e-03, 3.19787271e-02, 3.34088460e-02, 1.04169761e-02,
                  1.03907042e-02, 1.40437829e-02, 2.11777072e-02, 1.29798210e-02, 1.21663586e-02,
                  1.48988717e-02, 9.70643574e-03, 4.59649664e-03, 4.22187736e-03, 8.12650745e-03,
                  1.00829610e-02, 4.68868171e-03, 1.29949896e-02, 1.01527154e-02, 1.90242475e-03
              ],
              [
                  5.66489001e-03, 1.01944711e-02, 1.16504460e-02, 7.61343708e-03, 7.66038977e-03,
                  1.78742761e-02, 6.42428628e-03, 8.76287956e-03, 1.42131462e-02, 1.42028848e-02,
                  1.12397875e+00, 2.03391057e-02, 1.55640227e-02, 2.36629051e-02, 1.88925922e-02,
                  1.54778577e-02, 8.14224143e-03, 9.83782688e-02, 8.40658917e-03, 4.47303787e-03,
                  3.80525159e-03, 8.63204937e-03, 5.93372845e-03, 5.35217871e-03, 4.78226773e-03,
                  6.35536158e-03, 4.75568123e-03, 2.60273163e-03, 7.81196334e-03, 4.00500062e-03,
                  6.24141358e-03, 4.76697244e-03, 6.06659398e-03, 6.17852108e-03, 1.23875647e-03
              ],
              [
                  2.42209236e-02, 6.24446239e-02, 4.69192583e-02, 3.49102103e-02, 4.48204250e-02,
                  7.33819694e-02, 3.90320856e-02, 4.65737462e-02, 5.77711731e-02, 6.97492831e-02,
                  8.07715425e-02, 1.49101445e+00, 3.02119657e-01, 1.75703119e-01, 2.49247407e-01,
                  1.95602451e-01, 3.57780813e-02, 1.61908747e-01, 7.23544773e-02, 2.08935660e-02,
                  1.80553163e-02, 2.62120682e-02, 3.63232670e-02, 4.64822551e-02, 3.91697989e-02,
                  3.12808013e-02, 2.15065616e-02, 1.05574991e-02, 1.56769196e-02, 1.86418877e-02,
                  2.77530588e-02, 1.32859073e-02, 2.05248552e-02, 2.34278778e-02, 6.48466094e-03
              ],
              [
                  1.41212739e-02, 3.00014601e-02, 1.47403431e-02, 1.78879937e-02, 1.62327147e-02,
                  2.13132188e-02, 1.74493173e-02, 2.19236372e-02, 2.00637127e-02, 2.39520001e-02,
                  2.60502100e-02, 3.53941274e-02, 1.14899249e+00, 3.28270605e-02, 5.88493491e-02,
                  2.33335432e-02, 1.72270903e-02, 3.03448137e-02, 3.74234317e-02, 8.80392497e-03,
                  7.51583475e-03, 9.26351098e-03, 1.53869223e-02, 1.61728769e-02, 1.35260530e-02,
                  1.22936044e-02, 7.89019675e-03, 4.64623928e-03, 4.61592126e-03, 7.92242170e-03,
                  1.28628085e-02, 5.58634185e-03, 7.65238769e-03, 9.44516541e-03, 2.66297287e-03
              ],
              [
                  1.11752146e-02, 2.22783784e-02, 1.82636799e-02, 2.24849204e-02, 2.12028429e-02,
                  2.47702519e-02, 2.93456408e-02, 1.99193282e-02, 3.01209812e-02, 3.57654753e-02,
                  2.88331004e-02, 4.59420621e-02, 1.32173316e-01, 1.35874304e+00, 1.15151430e-01,
                  4.75502215e-02, 2.91951991e-02, 5.36580034e-02, 5.43995761e-02, 2.10649668e-02,
                  1.86689123e-02, 1.64398460e-02, 2.25252672e-02, 2.24880198e-02, 2.21854770e-02,
                  2.24664342e-02, 4.78720575e-02, 1.30968261e-02, 8.00896404e-03, 2.67090711e-02,
                  2.70254382e-02, 1.33677419e-02, 3.37985480e-02, 2.13810943e-02, 3.06327350e-03
              ],
              [
                  1.16781719e-02, 1.58578697e-02, 1.32095137e-02, 1.36658592e-02, 1.44100638e-02,
                  1.51760344e-02, 1.13526237e-02, 1.35196308e-02, 1.29941073e-02, 1.49634855e-02,
                  1.59612433e-02, 1.91466014e-02, 3.19632747e-02, 1.80526936e-02, 1.42240037e+00,
                  1.67772695e-02, 1.01733620e-02, 1.56384578e-02, 1.33381693e-01, 1.31675101e-02,
                  1.07225191e-02, 8.98112878e-03, 5.07009596e-02, 7.24831266e-02, 7.36943201e-02,
                  2.50959630e-02, 9.27803369e-03, 5.19425816e-03, 3.18086439e-03, 9.60918107e-03,
                  3.07844255e-02, 4.89134273e-03, 6.93402074e-03, 1.07322628e-02, 1.63966011e-03
              ],
              [
                  2.49487283e-03, 3.49741895e-03, 3.84971662e-03, 1.03106098e-02, 7.62020548e-03,
                  1.06092419e-02, 6.55441783e-03, 3.09923388e-03, 4.96818679e-03, 6.00274424e-03,
                  6.69680342e-03, 1.29054124e-02, 9.07613762e-03, 7.76562911e-03, 1.17732848e-02,
                  1.04136703e+00, 2.98630109e-03, 9.01295699e-03, 5.15948675e-03, 3.16673017e-03,
                  3.11402638e-03, 4.99781452e-03, 3.53803508e-03, 3.78085685e-03, 3.71954763e-03,
                  3.66290448e-03, 2.53002130e-03, 2.70497738e-03, 2.17417007e-03, 4.13447177e-03,
                  5.86470143e-03, 4.79757401e-03, 4.72995350e-03, 8.36560746e-03, 4.12173269e-03
              ],
              [
                  2.17211904e-02, 4.05202320e-02, 3.16730674e-02, 4.11586572e-02, 2.94931527e-02,
                  3.77164742e-02, 4.43816069e-02, 4.03332449e-02, 5.68357241e-02, 5.01096678e-02,
                  6.27474563e-02, 5.84721434e-02, 3.63296186e-02, 3.34308359e-02, 3.59345855e-02,
                  3.51389106e-02, 1.11491704e+00, 2.69811063e-02, 2.42998815e-02, 1.56923037e-02,
                  2.27464139e-02, 3.89042014e-02, 2.92040935e-02, 2.01675725e-02, 1.87341798e-02,
                  2.76827000e-02, 1.69243981e-02, 1.21166394e-02, 1.37290338e-02, 1.58524035e-02,
                  2.55629891e-02, 2.70253777e-02, 2.55635071e-02, 2.83475531e-02, 3.69174424e-03
              ],
              [
                  8.97191308e-03, 1.49177163e-02, 1.10733195e-02, 1.11836836e-02, 1.06640501e-02,
                  1.35483281e-02, 1.29121334e-02, 1.35709106e-02, 1.42931727e-02, 1.33564460e-02,
                  1.77164648e-02, 1.56706787e-02, 1.27381094e-02, 1.26842336e-02, 1.20756272e-02,
                  1.23910937e-02, 3.58750410e-02, 1.04499252e+00, 1.14007141e-02, 1.06063947e-02,
                  1.14655107e-02, 1.36113372e-02, 1.72513519e-02, 1.47033020e-02, 1.14245509e-02,
                  2.48820248e-02, 1.77384091e-02, 1.19705594e-02, 5.06262470e-02, 1.20103969e-02,
                  2.69035838e-02, 1.90993894e-02, 1.37254219e-02, 2.11215051e-02, 4.09787074e-03
              ],
              [
                  9.58115487e-03, 8.91650730e-03, 1.43701277e-02, 1.31764268e-02, 1.63199048e-02,
                  1.41106634e-02, 1.13222265e-02, 1.00016903e-02, 1.40692465e-02, 1.44618089e-02,
                  1.50160680e-02, 1.48383569e-02, 1.33697877e-02, 1.33304796e-02, 1.40510920e-02,
                  1.39737745e-02, 1.43541371e-02, 1.48555008e-02, 1.01341363e+00, 8.09532671e-03,
                  7.75353980e-03, 1.11356805e-02, 2.34538737e-02, 1.03220529e-02, 8.58302024e-03,
                  1.32039302e-02, 8.17501257e-03, 5.70236050e-03, 3.95485412e-03, 9.92716152e-03,
                  7.74312558e-03, 5.67648203e-03, 7.29620624e-03, 1.09574153e-02, 9.80087544e-04
              ],
              [
                  5.93665927e-02, 4.92552199e-02, 1.07920694e-01, 1.03870207e-01, 1.30377154e-01,
                  1.00161144e-01, 8.94843156e-02, 7.29871126e-02, 9.23759748e-02, 9.89408562e-02,
                  8.10581337e-02, 9.00216049e-02, 9.73270881e-02, 1.03405122e-01, 1.02984212e-01,
                  9.78036124e-02, 4.57566717e-02, 8.24062111e-02, 6.73699235e-02, 1.04975481e+00,
                  2.76014748e-02, 7.76585957e-02, 4.61148614e-02, 4.80313060e-02, 4.48292131e-02,
                  4.35437059e-02, 2.46139114e-02, 1.69850169e-02, 1.24931215e-02, 2.81219049e-02,
                  3.87837708e-02, 2.13363699e-02, 4.84536151e-02, 3.36787329e-02, 5.60071950e-03
              ],
              [
                  2.93677308e-02, 2.10886312e-02, 5.28982101e-02, 5.10653383e-02, 6.97797826e-02,
                  4.21765239e-02, 3.61318822e-02, 2.89471277e-02, 4.27313284e-02, 4.43092348e-02,
                  3.61270254e-02, 3.60689123e-02, 3.76703618e-02, 3.73979056e-02, 4.45165223e-02,
                  4.66722118e-02, 1.86949037e-02, 4.54483133e-02, 3.04105412e-02, 1.70082222e-02,
                  1.01561955e+00, 4.41255896e-02, 2.63833370e-02, 2.35920298e-02, 2.10551748e-02,
                  2.15261439e-02, 1.80292713e-02, 1.08763938e-02, 8.33153575e-03, 1.79798262e-02,
                  1.69842870e-02, 1.15075256e-02, 2.17465552e-02, 2.27478407e-02, 3.03134335e-03
              ],
              [
                  5.87006517e-03, 9.19411572e-03, 1.15097346e-02, 1.29939256e-02, 1.33069235e-02,
                  1.34736432e-02, 1.43567473e-02, 9.07894807e-03, 1.43221543e-02, 1.51166713e-02,
                  1.40861242e-02, 1.45259430e-02, 1.60356481e-02, 1.69895741e-02, 1.35687782e-02,
                  1.35036114e-02, 1.02491296e-02, 1.33483862e-02, 1.29559309e-02, 1.49624261e-02,
                  1.08773227e-02, 1.01625786e+00, 1.45466846e-02, 1.71610118e-02, 3.24576452e-02,
                  2.94540140e-02, 1.31563734e-02, 1.65452478e-02, 5.38874120e-03, 1.97430930e-02,
                  1.43144130e-02, 9.90885442e-03, 1.35327041e-02, 1.74049782e-02, 1.03588425e-03
              ],
              [
                  2.78268225e-02, 4.34258592e-02, 4.54417359e-02, 4.24062103e-02, 4.75187895e-02,
                  4.91020083e-02, 3.88318894e-02, 6.32268352e-02, 4.38296983e-02, 4.16177918e-02,
                  5.97644035e-02, 4.38437736e-02, 3.46303856e-02, 3.10895027e-02, 3.74084987e-02,
                  4.15377451e-02, 4.18240526e-02, 3.95989230e-02, 2.72617969e-02, 2.87117321e-02,
                  1.86834073e-02, 2.70184351e-02, 1.05744017e+00, 4.10321582e-02, 2.92495194e-02,
                  4.75930098e-02, 1.81675634e-02, 1.38569437e-02, 6.94028073e-03, 1.57208273e-02,
                  2.16448161e-02, 1.65959884e-02, 1.84204753e-02, 2.08862412e-02, 4.54195926e-03
              ],
              [
                  5.19117046e-03, 6.87217592e-03, 7.95585015e-03, 7.04263692e-03, 8.40996891e-03,
                  1.25323523e-02, 4.62867423e-03, 9.32617953e-03, 6.91930874e-03, 6.12384053e-03,
                  9.34965886e-03, 8.95354634e-03, 5.46218479e-03, 4.95663496e-03, 5.97319126e-03,
                  6.40827466e-03, 4.55431570e-03, 6.38534651e-03, 3.27379223e-03, 4.23890483e-03,
                  2.66550069e-03, 4.43509555e-03, 5.95282574e-03, 1.11547883e+00, 6.10082166e-03,
                  9.02001998e-03, 2.51072933e-03, 1.75203564e-03, 9.16921640e-04, 2.37880925e-03,
                  3.04866479e-03, 2.61582574e-03, 2.21540209e-03, 2.57663027e-03, 6.85436039e-04
              ],
              [
                  2.76958665e-03, 4.92062577e-03, 4.92796835e-03, 5.44052896e-03, 7.05445857e-03,
                  4.77998039e-03, 5.84165003e-03, 4.51882750e-03, 5.84010454e-03, 5.70176512e-03,
                  4.94198534e-03, 5.20572367e-03, 5.62219774e-03, 6.24114421e-03, 6.16008691e-03,
                  5.20165682e-03, 3.15486242e-03, 4.40302315e-03, 4.82659631e-03, 6.83654639e-03,
                  3.67619469e-03, 3.93383090e-03, 5.29495431e-03, 1.13856542e-02, 1.03824757e+00,
                  2.48198931e-02, 7.57271366e-03, 5.92177649e-03, 1.61170443e-03, 6.93737047e-03,
                  6.79264226e-03, 3.45130826e-03, 3.43401851e-03, 6.61508540e-03, 4.76071350e-04
              ],
              [
                  1.12374476e-02, 1.65980031e-02, 1.96402992e-02, 1.68723852e-02, 1.98449138e-02,
                  2.09842651e-02, 1.96339640e-02, 2.12470284e-02, 1.89038415e-02, 1.88174260e-02,
                  2.37601155e-02, 2.01095673e-02, 1.77677975e-02, 1.69133650e-02, 1.86720178e-02,
                  1.80247599e-02, 1.39389951e-02, 1.54924838e-02, 1.65299077e-02, 2.86787053e-02,
                  1.57020348e-02, 1.82283037e-02, 5.06836583e-02, 1.85656547e-01, 1.20776566e-01,
                  1.13829769e+00, 9.47668797e-03, 9.39179831e-03, 3.46910651e-03, 1.13862953e-02,
                  1.12520285e-02, 6.71859342e-03, 9.44540856e-03, 1.25304611e-02, 1.62978050e-03
              ],
              [
                  9.33691098e-03, 1.45261453e-02, 1.59161067e-02, 1.70140210e-02, 1.83062521e-02,
                  1.64764606e-02, 2.48080431e-02, 1.41535808e-02, 2.02553559e-02, 1.89790948e-02,
                  1.73306796e-02, 1.83150311e-02, 2.01480812e-02, 2.09092505e-02, 1.81008905e-02,
                  1.96530464e-02, 1.36331113e-02, 2.03515439e-02, 2.12940626e-02, 2.78377899e-02,
                  2.64174598e-02, 2.16618073e-02, 2.46344808e-02, 3.79330110e-02, 4.46292775e-02,
                  3.56904370e-02, 1.09442061e+00, 3.42223123e-02, 8.91279934e-03, 3.06601618e-02,
                  2.54264826e-02, 1.27779641e-02, 1.87970407e-02, 3.14440680e-02, 1.64952217e-03
              ],
              [
                  4.53859959e-02, 6.35674434e-02, 5.86577378e-02, 6.75338041e-02, 6.59375285e-02,
                  6.56467993e-02, 6.26532342e-02, 5.79038628e-02, 6.61416561e-02, 6.37873380e-02,
                  6.54957466e-02, 6.82078619e-02, 6.48297434e-02, 6.28211232e-02, 6.19955060e-02,
                  6.52369877e-02, 5.36732742e-02, 6.02577730e-02, 5.80607429e-02, 7.21142437e-02,
                  6.14151318e-02, 5.76165418e-02, 7.49913540e-02, 8.72187058e-02, 7.67371534e-02,
                  6.30327414e-02, 4.68914149e-02, 1.22167500e+00, 7.02905284e-02, 6.45728991e-02,
                  4.73952143e-02, 2.85347743e-02, 4.81668241e-02, 6.27031493e-02, 1.01523717e-02
              ],
              [
                  1.70105852e-02, 1.64002017e-02, 2.20121918e-02, 2.30832392e-02, 2.55902838e-02,
                  2.23298794e-02, 2.56888142e-02, 1.67592389e-02, 2.21148882e-02, 2.35853589e-02,
                  2.09245473e-02, 2.22428894e-02, 2.36498151e-02, 2.34028497e-02, 2.25521124e-02,
                  2.59809365e-02, 1.67568776e-02, 2.88932198e-02, 3.77717897e-02, 4.07483141e-02,
                  5.33149858e-02, 4.33757173e-02, 2.37105814e-02, 4.85924943e-02, 3.34442324e-02,
                  3.74772424e-02, 2.23922623e-02, 3.91759974e-02, 1.03730688e+00, 3.65893621e-02,
                  2.13513373e-02, 2.41506545e-02, 4.10244349e-02, 4.17115125e-02, 2.48926377e-03
              ],
              [
                  4.73707499e-02, 7.11564215e-02, 9.51780515e-02, 9.26142264e-02, 9.44545709e-02,
                  8.04353967e-02, 1.25739173e-01, 7.04320405e-02, 1.32969188e-01, 1.07544261e-01,
                  9.15001520e-02, 9.22898400e-02, 1.12502451e-01, 1.37673371e-01, 1.16295767e-01,
                  1.00663368e-01, 7.72469760e-02, 1.11162226e-01, 9.22675163e-02, 9.87935520e-02,
                  9.93659743e-02, 8.20798741e-02, 8.49152077e-02, 1.22537660e-01, 1.55205870e-01,
                  1.20516687e-01, 1.03562556e-01, 1.36299977e-01, 5.82954726e-02, 1.17526955e+00,
                  9.33261872e-02, 4.89112911e-02, 9.19520348e-02, 1.10984361e-01, 7.48811386e-03
              ],
              [
                  3.75609017e-03, 6.05567550e-03, 5.33074870e-03, 4.61625365e-03, 4.48070658e-03,
                  6.93185857e-03, 6.90503099e-03, 5.15321449e-03, 7.11869963e-03, 6.14415430e-03,
                  5.94662001e-03, 6.47456165e-03, 4.94559296e-03, 5.19653632e-03, 5.09264707e-03,
                  6.12581271e-03, 8.16458391e-03, 4.73828678e-03, 4.69353327e-03, 3.86990263e-03,
                  5.46841001e-03, 6.38274370e-03, 5.64729305e-03, 1.30600089e-02, 1.22563668e-02,
                  6.91786445e-03, 4.51796485e-03, 3.55539884e-03, 4.72706472e-03, 4.97248703e-03,
                  1.00972721e+00, 5.20412233e-03, 7.48232305e-03, 1.04794961e-02, 5.45051936e-04
              ],
              [
                  1.53096123e-03, 1.22847263e-03, 1.59467640e-03, 1.53042602e-03, 1.60375554e-03,
                  1.38343993e-03, 1.80034932e-03, 1.42187577e-03, 2.11935021e-03, 1.73657004e-03,
                  1.56042409e-03, 1.64750928e-03, 2.03549444e-03, 2.33187207e-03, 1.83637930e-03,
                  1.47123713e-03, 1.82752779e-03, 1.53930950e-03, 1.28367760e-03, 1.66696739e-03,
                  2.58279399e-03, 1.32584575e-03, 1.91612182e-03, 1.52998291e-03, 2.91354915e-03,
                  2.12428979e-03, 2.38497998e-03, 2.12466181e-03, 5.86339779e-04, 3.00767356e-03,
                  5.17186705e-03, 1.00686285e+00, 1.80950013e-03, 2.28675933e-03, 1.35016301e-04
              ],
              [
                  2.79177799e-03, 8.81247867e-04, 1.76697414e-03, 1.32133761e-03, 1.35250233e-03,
                  1.44467599e-03, 1.18988785e-03, 8.65198022e-04, 1.23032466e-03, 1.19687224e-03,
                  1.12182063e-03, 1.12924160e-03, 1.29597065e-03, 1.25501765e-03, 1.14076503e-03,
                  1.30028950e-03, 9.23851404e-04, 1.21332060e-03, 1.04989223e-03, 1.09990068e-03,
                  8.65302268e-04, 1.79191993e-03, 1.22025549e-03, 1.75071850e-03, 1.27692620e-03,
                  1.33009264e-03, 1.23196667e-03, 1.08321698e-03, 3.60844578e-04, 1.29816155e-03,
                  6.77230039e-03, 1.74588266e-03, 1.02326055e+00, 2.29201583e-03, 1.21566362e-04
              ],
              [
                  9.74263658e-03, 1.50785046e-02, 1.92441004e-02, 1.92417218e-02, 2.13349738e-02,
                  1.82186492e-02, 2.94912150e-02, 1.54075623e-02, 2.38128194e-02, 2.10069309e-02,
                  1.88098926e-02, 2.18577734e-02, 2.15708897e-02, 2.18557871e-02, 2.00835171e-02,
                  2.08659665e-02, 1.55580608e-02, 1.95458276e-02, 2.07285716e-02, 1.91676062e-02,
                  1.98120387e-02, 2.52881145e-02, 2.01620866e-02, 2.16205071e-02, 2.38277603e-02,
                  2.43873652e-02, 2.82599078e-02, 2.22857085e-02, 1.32456747e-02, 4.23728685e-02,
                  2.49740428e-02, 1.61663126e-02, 2.55940348e-02, 1.09457767e+00, 2.02732839e-03
              ],
              [
                  4.80985248e-05, 5.83062239e-05, 9.41535010e-05, 1.10374700e-04, 1.02333785e-04,
                  9.98930715e-05, 1.04199249e-04, 6.73697321e-05, 9.72789540e-05, 1.03461985e-04,
                  8.57559870e-05, 1.03574045e-04, 9.99745458e-05, 8.81312500e-05, 1.21661532e-04,
                  1.03802489e-04, 6.09055197e-05, 1.49703133e-04, 1.93925924e-04, 9.18345830e-05,
                  1.08285004e-04, 1.26712162e-04, 2.19469169e-04, 9.98065386e-05, 1.00857829e-04,
                  9.60586634e-05, 1.28294613e-04, 1.19029245e-04, 3.16445850e-04, 1.25758585e-04,
                  1.32734920e-04, 8.34228095e-05, 1.77193186e-04, 1.82126670e-04, 1.00003186e+00
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def leontief_matrix_1997():
    """
    Real Name: b'leontief matrix 1997'
    Original Eqn: b'1.1740732783625472,0.008103852325244555,0.37143273276621624,0.07192228260552558,0.09367654024189002,0.19946937573677534,0.028071622860976368,0.010018143602410105,0.022070023720333027,0.029068918065735888,0.010144874022754376,0.007601873552889319,0.00816722562370506,0.008180651155061603,0.009154183338658774,0.03795845740451945,0.005192538181004515,0.016937170763477827,0.0062179401622983604,0.008557910497566974,0.008132379366900845,0.10690010624003238,0.006394115347297077,0.011403369329514712,0.009236296718545969,0.009859144008645557,0.0047171968030985225,0.0044046590763792606,0.003251526577477705,0.0071476550706494,0.00985025929701977,0.008699694378943728,0.013360705570556965,0.011085920207048634,0.016459422187916427;0.022562818034288303,1.1154586289002455,0.024649456751684708,0.02611507221058211,0.022046042550512752,0.027608613008473133,0.026436139398157425,0.5053525905787308,0.08065636361904076,0.040177381028802965,0.12481237267167622,0.09092066762016436,0.03434150114479903,0.026996533891159233,0.030713491023485574,0.035140562058447455,0.13559455884713034,0.05442210069089137,0.015512002845698156,0.01177369777036421,0.01058782930113873,0.0176229757123896,0.043193367273814565,0.043692043399796626,0.04179922949638287,0.023605644069068836,0.009908908101516135,0.006417984631299231,0.008655370743263474,0.010653796535768808,0.016394519651814737,0.012904945839795803,0.01586062470106817,0.01712363408325264,0.062016301164856055;0.07732701430393286,0.005100968304652894,1.1895122399425735,0.015744763270739173,0.1347021438938404,0.020099722571625584,0.01192622826283114,0.006102518968212965,0.021424372387343703,0.013886429804969846,0.008806284120539652,0.007582529791311859,0.008287304037896645,0.00863621606692782,0.008203324978822212,0.010785825179889763,0.0050618463380163944,0.007842740024943659,0.007080801993306205,0.01019177821434872,0.00901134342849611,0.1966194545576916,0.007071426566302665,0.01616893179984924,0.014661676511402778,0.011697021697782152,0.0059472430948676715,0.0057453384555815725,0.0023375317037746647,0.008562467708371121,0.014493377733594522,0.0139682305652457,0.02270363684502164,0.013088660433059935,0.0027159318478060263;0.006525890246163253,0.004807050782808013,0.007645972956273499,1.3949239895050496,0.10167300681812011,0.014817747361784745,0.0170651919463651,0.0043636530159834415,0.011887275607751224,0.0365414815894479,0.01191719208833143,0.0072848931707993935,0.009150192175898178,0.008964623327653728,0.018628221137403998,0.04128172862134457,0.003424373090537468,0.008896315911895368,0.006973574142814287,0.0062458359206437365,0.006904094136141357,0.007804060603322449,0.005662241824935935,0.008621662854629746,0.005310805876443225,0.005787992193029995,0.006840549783444767,0.002883150017097636,0.0016250979716304634,0.004382916845830951,0.007497161406551187,0.0028675558820087533,0.00797349487883843,0.010311724440297678,0.0011708239918763839;0.0007003930117448732,0.0007760531703527609,0.0009843979241827225,0.013060866702383215,1.2399619084901858,0.002444399807382168,0.0028298322382768297,0.0007050685536030099,0.0011035401263099584,0.0024576817715327467,0.001547734891544429,0.001369348958779641,0.0014122904761819407,0.0013420313996136263,0.003150130372078516,0.00553675074890353,0.0006238313911643181,0.0009823147208084919,0.0012218021822171573,0.0010445894972040558,0.0010091683770641709,0.0007969951574853498,0.0007485142984846091,0.00088901102312114,0.0007407176915503114,0.0006893526449071232,0.0013061633057760542,0.00037013867596591486,0.0001951387232504661,0.0005818022636574758,0.0015776815580147185,0.00043483121803488897,0.0006240025860614989,0.001438948709451955,0.00010104561356383303;0.0043616560870153795,0.005255315238965916,0.006121277409918517,0.006466658849401101,0.0075740412092664185,1.2427530085197918,0.02076673808734238,0.004182970505386471,0.006184721329324865,0.007924383477500092,0.013267429706062615,0.00879066883011427,0.008639626020417658,0.007109984419678034,0.010220366755899006,0.09558847297516143,0.004465637711210784,0.04863395782248415,0.0042693942830759,0.004209236149950106,0.00395415601618257,0.006052122328823206,0.004620209534607407,0.004627824694525037,0.0038821568121956665,0.009092846552605487,0.003407134870668475,0.0028627363532520655,0.005685700442385605,0.003754851366274401,0.004977543755723335,0.0037178942085641167,0.003921587563608309,0.007124693193003931,0.0011319697477985456;0.015950456641356373,0.015451405684026767,0.05340994588907764,0.03630425617011708,0.04346529337617723,0.035911652118272915,1.3256215530992628,0.015466870872985906,0.04909089586799507,0.049571612691223225,0.04835920588374588,0.026398177433153338,0.034206365163236774,0.04396763739641658,0.0319079142580955,0.048671587193354425,0.015530528469276765,0.026350295932432728,0.02425273998901934,0.029630627249379142,0.02817606026317826,0.0318744151091455,0.02052839271882151,0.02356137291355267,0.026431912502804748,0.0365484901897747,0.027338299835472486,0.033612061919828726,0.009882530496813258,0.04277183701175279,0.03259735678105572,0.02847553032140317,0.026214331916264082,0.04751799846319587,0.0023823762821300973;0.022361680432254286,0.02281066926982648,0.01863821075083323,0.019545049445635423,0.01742240049781881,0.019280150835083967,0.016211455313534122,1.0624293804843654,0.04727457010593606,0.02818873529502725,0.03175123811609978,0.024399635545953063,0.016171853335765714,0.014612489662429413,0.015305060191676167,0.017515260547430318,0.03113216686407437,0.02560448610337329,0.011904647850619723,0.011779703694149978,0.009917270533768525,0.012575810842126984,0.061927277575301566,0.06949778432301723,0.06851228001672095,0.02552077185919361,0.009037739557888207,0.005429635082078687,0.00431673156324823,0.009967512350390917,0.013947478568450185,0.007254563849607746,0.011284311420032826,0.013667563519431804,0.0018910143012201208;0.0724890007150286,0.03251428580725367,0.05379378243086767,0.14771476593739563,0.09454706302020154,0.06956639379058145,0.07682552781589962,0.039373474111232064,1.3265421946073224,0.31495532289407624,0.06418607236101244,0.04729329338485391,0.04939246130693284,0.05957343586190482,0.060707252724701614,0.08019849241805002,0.02031947635718027,0.04061524796197141,0.029134269355327955,0.013874830989224306,0.012285712869718251,0.025112084363454724,0.019215784891529766,0.019032958471663565,0.01714062976557161,0.018179953782012887,0.011911786568533086,0.00791549704813164,0.007087916504460805,0.015553501929299003,0.022378747310969744,0.011724950392481734,0.09646913382101703,0.02494099743334531,0.003587103702510454;0.012801516582153448,0.017676896355355996,0.029391277911916307,0.023599479378294035,0.060872415046253917,0.023320501592156432,0.028868975886637876,0.013646251853240997,0.03533844665290439,1.139343840764297,0.02386196636261301,0.022197627095454368,0.04727187392660702,0.0487914452444276,0.07132619581737147,0.05693362298542926,0.010062046169651636,0.032522108276072714,0.0338174656974916,0.01013835139244377,0.010155317242514757,0.01393758172505814,0.020991885608891925,0.01314817649572049,0.012360103406384531,0.014840460224419498,0.010022209933636724,0.004521633263291067,0.0042108843210777935,0.008157243680965917,0.010236886594316824,0.0048141757405255736,0.013383286977649725,0.010498036565929788,0.0016558236421537389;0.00572049347495317,0.010005364575510859,0.011857119216993022,0.007707563883898091,0.007913634455186173,0.01766180329249592,0.006434682350877558,0.008757072808218278,0.014157542210966498,0.014277826192769974,1.1281258995198893,0.020689615196201723,0.015569679769167412,0.02330033237043074,0.01938288959066926,0.015197074719370799,0.00819573418576083,0.09915203788284063,0.008432175016680926,0.004262405069935199,0.0036819063085129075,0.008604504749027183,0.005776593805085368,0.005297655687208638,0.004749000167624016,0.006257804171728894,0.004952202247242288,0.002450433465930782,0.007745948208241129,0.004060183832328713,0.006181940469818309,0.004748845413696965,0.006130595835946076,0.006123950246806433,0.0010507989981478226;0.024602110738034113,0.06313477540727921,0.047332783947015754,0.03525978758028518,0.044898493084654385,0.07342525977478608,0.039214260380298245,0.04658092657165378,0.05771052525036159,0.07007846072546117,0.08073095712813308,1.4975151502010144,0.30370676437645905,0.1733632731402738,0.2512724693700358,0.19905073631290046,0.03598820000855766,0.1622664318881587,0.07135914987663541,0.019980609183644887,0.017472719885234817,0.02555604502649757,0.03615486551629481,0.046301357386846674,0.03909493484067149,0.0308578479092677,0.022553948436194224,0.01027719850316559,0.015300095091854938,0.01873493513679211,0.02814725307941372,0.013556499420768652,0.020923955972739734,0.023687776456755995,0.0056025405721377665;0.014420688515580983,0.029937841454492426,0.014764032164568765,0.01782772902759012,0.016250546678449124,0.021247842512590452,0.017396427520355147,0.021909607367725722,0.019967170083982,0.023671353133797687,0.02662845914859541,0.03532738973531642,1.1479287494077366,0.03226224454375292,0.05878743968598858,0.022558496327922704,0.017395209584884483,0.03014927613523536,0.036203814516061666,0.008638583913642006,0.007214512199326081,0.00899567364280997,0.015172142667771088,0.016730255936993774,0.013486972414264817,0.012323064723689265,0.008410129310359548,0.004569672049003653,0.004546884771198695,0.00787014160378434,0.012974810342525626,0.005955372529167488,0.007973183261623253,0.009569588950269103,0.0022748460663309412;0.011648225849876487,0.023189673683025686,0.018840401898239996,0.023134311146367468,0.02183637686454402,0.02545049837741843,0.03018646824810994,0.020454801397604028,0.030790116978921103,0.03659464300957825,0.028821682305324593,0.04623157086285182,0.1315498654892008,1.3614356528606475,0.11869526362634483,0.04635163391495607,0.03017116828610681,0.05491202771601751,0.054938810891016814,0.021057680799848346,0.018613280403936745,0.01648710027091594,0.022909465660582905,0.023063770491540864,0.022882669891779856,0.022695577618665665,0.05114012095562262,0.01332759289865657,0.008223523649155328,0.02799311134047624,0.027992203206146263,0.014245381325962468,0.035086397364921786,0.022129476444889846,0.0026820933665674114;0.012348704540014578,0.015632458952777168,0.013528520721183247,0.013843748132076379,0.014633058931106412,0.015441417429309535,0.011494446058574555,0.013200600947431577,0.013090166939428407,0.014993742440761253,0.015838028446140157,0.019431452213921493,0.03229790882488213,0.01824048011142077,1.423949517361233,0.016959611254798748,0.010320601361482287,0.01606058084195482,0.12825533795358862,0.012637033666165686,0.010444139804617288,0.008901677131605203,0.052491111651083756,0.0745036804419382,0.07528925061260439,0.02544895042823817,0.009717876964114486,0.005162191373956079,0.003239782739402612,0.009552998391951477,0.0313914522442086,0.005001483251983742,0.007109284296092919,0.010845916166475086,0.0014025301175584642;0.0024869078119811837,0.003411929600546126,0.0038824670074202004,0.010354149704389722,0.007412199035547301,0.010669830269188198,0.006711953990828902,0.0030754996971119235,0.005110370724263701,0.006134958415549411,0.006711004148970197,0.013030982681983171,0.009045383354771815,0.007477107310815671,0.01187595533998549,1.0407642788346279,0.0030331298926407225,0.00929599950466523,0.005148829030684823,0.003058329672397246,0.0031694143934787337,0.004881386559008998,0.0036117551690398784,0.0038149867894405995,0.0036242694151175465,0.0036197218815062055,0.002623931240744304,0.002725262736732486,0.0022621465803732053,0.004351882310280455,0.005987988688980549,0.004722906184257866,0.00490671920935783,0.008215840304719786,0.0035206154694015874;0.021033892459647218,0.03684086652601424,0.030795567030802076,0.041202980609746975,0.028653555651501583,0.03649677335499156,0.042257125692688954,0.036898074639534206,0.05436015195299357,0.04833032233351776,0.059476643547971976,0.056113824525016884,0.034489446067086614,0.031224621403580077,0.035038159661903864,0.0331204630408523,1.1163530838152618,0.02584118301293836,0.023144046587884094,0.014214778547509426,0.02114341760164439,0.03740363156415042,0.027585169772102104,0.018999710345037123,0.017540576562699743,0.025390489117211267,0.017028793834015763,0.011656968336189052,0.01326947788910639,0.015117936562542211,0.024618829128120433,0.02600220142852234,0.024614041520460716,0.02745987244528022,0.0029285154567956382;0.008650666627131234,0.014409646966553042,0.010675640782994347,0.010865940494070941,0.010389303200115432,0.012896222305684013,0.012408355301573972,0.012799353057813557,0.013552787784920696,0.012641802601014617,0.016430707076674676,0.014790976669457794,0.012081338682249145,0.011736058733106033,0.011717359496434026,0.011699968399457627,0.034962429228418274,1.045741304612248,0.010968547420908643,0.009653225897880655,0.01072893434501405,0.012717161626955424,0.016581582510922902,0.013894236963408512,0.01095504976311781,0.02380728634561723,0.017901241260454018,0.011279723502036024,0.048079356593245685,0.011621515173541302,0.02516449486732893,0.017621230687493966,0.01305365965101718,0.019966530442038,0.00346570686779619;0.009595184972080504,0.008844106030874295,0.014349623552508704,0.013457626157981949,0.016847253301799925,0.01392863589998952,0.01127364799053741,0.009904408440659785,0.013901339658776473,0.014222244434188298,0.014510389533462897,0.014384691674648706,0.013161334013490365,0.012656785157515357,0.014065501144846516,0.013674483432168219,0.014265966757410724,0.014801133275819833,1.0136807018686722,0.00845873092509484,0.007793145972179744,0.010931725572555956,0.02340975885564159,0.01002106647218356,0.008840083841841526,0.012944486467482266,0.008357853096936095,0.005644392547074693,0.0039928936319098916,0.009850314624897404,0.007694832156503256,0.005594901461776318,0.0073411839950252205,0.010976390816392864,0.0008330006254846271;0.0599879630310012,0.04724386684267799,0.10859115387835896,0.10434723899404352,0.13205794525841372,0.10129111928864261,0.08920717296402375,0.07118579774890138,0.09248211309589625,0.09740540160270067,0.07822506547678337,0.08892106053285502,0.09524756754709064,0.10071447184202527,0.10382801334586908,0.09537269492228216,0.044980037701878105,0.08118045668665674,0.0663740134617584,1.0468362928363972,0.027078510216865824,0.07720092631478628,0.045585321045808376,0.04784662271880041,0.0447779115920693,0.04299798929242826,0.025496966692257213,0.016843755013428854,0.012412396857964593,0.028457287682124376,0.0390741797114634,0.02160705075596974,0.0491249289380085,0.03411000538254187,0.004675939695593949;0.029434220795740214,0.020182007296089766,0.05237237851790513,0.051320647415532834,0.0701555896762479,0.04178599258986587,0.03550315884001181,0.02743164603270581,0.042685836049856415,0.04357286780093143,0.03508336361506219,0.03556752281468449,0.036644931243209666,0.03582074645148463,0.04397751934159286,0.04539518347735589,0.018457672177826845,0.04487193079235325,0.029645725858582793,0.015982691313648417,1.0150469101977206,0.04233949660771544,0.026074476626581994,0.02318761364709837,0.021028259468830305,0.02085718790454212,0.018401865897127896,0.010651508531479675,0.00815366035953082,0.017850740964184816,0.016769215039929623,0.01135808448219926,0.0216548551220077,0.02256293645552003,0.0025350070788124133;0.00608516207975517,0.00921543889256868,0.012121027615716621,0.013452437271565074,0.013714582652062351,0.013778665445832882,0.014688861425315882,0.009145264639250968,0.01454751534121946,0.015270738379294931,0.01437392406614355,0.014633285861426792,0.016332776114558186,0.01711856655701704,0.014128566820770442,0.013434496748631784,0.010604371433886019,0.013756168327062697,0.01317767454421442,0.014792035033093951,0.010929379356481299,1.0166534763642001,0.014689815945937646,0.017981217378955985,0.03307357765405516,0.03124909821435444,0.012280209362099182,0.01650464093063855,0.005528925954906762,0.020163889456504967,0.0148381056206494,0.010379778430132757,0.01359077417595308,0.017935690590456355,0.0008928632487104657;0.027984364127070883,0.04090352858364119,0.045493635200433286,0.04320507798808608,0.04759792702836684,0.04915525162583394,0.03871432717629542,0.05986625656083175,0.043614040213395606,0.04134073347266919,0.0586523452606905,0.04316859719295647,0.03383954392234996,0.0300787501715373,0.0372922646948927,0.04071809220232407,0.04194695245592916,0.03860077171652214,0.026919287738793297,0.02722711027447552,0.018141801768662622,0.02625755238903662,1.0565149107240046,0.04079171640139107,0.027897547413325192,0.04697592543460492,0.019076707200013962,0.013627168878322448,0.006810899250616854,0.01550910324074682,0.02127994069088347,0.016864149958997824,0.01837752381855774,0.020701437083406566,0.0037416659871062617;0.005538480010644983,0.006867032530840476,0.008532179672220216,0.007383839059127932,0.008998226741113903,0.013257556803433618,0.004844835292011668,0.00923611368872791,0.007272583982458456,0.00633695051030776,0.010370941966937832,0.009066460087962774,0.005550303493955783,0.0050847823923117945,0.006131430078567956,0.006674839620714251,0.0047902425517984395,0.006730281705654842,0.0033924353044310837,0.0037625181444468823,0.0025732667937012448,0.004673689298413085,0.006763886331766743,1.1134879590158622,0.006401962048254771,0.0095158462172106,0.0025811932919967313,0.001831663450739217,0.0009515416186100365,0.002519812345394775,0.003161246382128416,0.003089879650430601,0.002354289574205835,0.0028012626544476576,0.0005943626487434206;0.002801677860285421,0.004741408429127461,0.004995332787264271,0.005500101507415528,0.0071452358955894635,0.004761760117870608,0.005895233135054876,0.0043666266587638735,0.0058778874708204105,0.005721837604881254,0.004821138001695207,0.005128330178035035,0.005689489603434402,0.006238252194690271,0.006131043241974675,0.005113825438338782,0.0031843710324545456,0.0044444677627627684,0.004864753945499492,0.006561853512858131,0.003675617532491509,0.003945498266014557,0.005384054386106001,0.011305270531686432,1.039514425312687,0.026114312735802073,0.008192230692717323,0.006048629814642438,0.0016540612422197203,0.007189005447045018,0.006960341646946888,0.003498781469530917,0.0034942552636919536,0.006861820916700492,0.00039854377265637905;0.01135638700400942,0.015668121111942258,0.020076472085287993,0.016988369917623532,0.02007896307384343,0.02160721974877828,0.019798834397601633,0.02029575926647958,0.018879957232772127,0.018527674177715118,0.023390727955756925,0.0195161768199461,0.017266617396247918,0.01641393459058882,0.01862821433648188,0.017607340953681622,0.013756783290950562,0.01529995195642772,0.016665444260582633,0.027742729263930274,0.015892984716765528,0.018278962818615352,0.0529624245811478,0.19196188525997296,0.12161673156883569,1.1409835942902709,0.009875383293019598,0.009498928680061957,0.003515661804748463,0.011576654738831772,0.01059054357456896,0.006955187838125317,0.00959916226832132,0.013117285690694532,0.0013457851188970814;0.009911579400557088,0.01515555460610051,0.017017581808143722,0.018356853693744086,0.01975090703203827,0.0175260268315823,0.02619954397009734,0.014774873095426978,0.02134473359838196,0.020175692981296466,0.018145730971819683,0.019523004189295465,0.02130648522796077,0.021863232892165522,0.01945742635894536,0.020503383361318437,0.014937862627361883,0.021299112712189778,0.02263242155025564,0.028286812653856554,0.027086196585713117,0.022580361034569372,0.02626965377035802,0.039857379356472926,0.0464955935316142,0.03774270026400593,1.1053858523457445,0.03686412117586277,0.00950576863487712,0.033059877271987344,0.027036084409750687,0.014112046163879524,0.019996233053050132,0.03409923414536294,0.0014761816808700416;0.04512818653088623,0.06364093217307489,0.05874796594164679,0.06846791950389244,0.06584000170091585,0.06647723901937072,0.06300251577868782,0.05842757860521137,0.06644080717250533,0.06337698582252001,0.06456336605549563,0.06789037457165614,0.0641725335618989,0.0614751937962543,0.06278809728585817,0.06496089150201989,0.05458563411757205,0.061030064226123414,0.05838973468300611,0.06986968424591133,0.05982464803217359,0.05722416495557581,0.07593694889136543,0.08650909574626116,0.07867949741066617,0.06155658801914939,0.04836856795576909,1.226935913293549,0.07212053366405452,0.0667343715106005,0.048281349893106826,0.029755628726609817,0.04909155272573636,0.06480694082429998,0.008705730567830866;0.016951451441302896,0.01597782817472416,0.021792447534512392,0.02323635625789755,0.025397753450192538,0.021971967202173134,0.025541753046743196,0.016125908754424004,0.02192544233011566,0.02320886457468368,0.020671542666586978,0.0219259282122059,0.023240957701383406,0.022841655347746844,0.02249968261384906,0.02525429677808751,0.016928613429488756,0.028225691839890377,0.037203537957479334,0.0396191266678502,0.052027331184976766,0.042013909725384595,0.023483624752833814,0.047097526307810424,0.03307081632459672,0.03736933272659534,0.02360120007792329,0.037796762283266026,1.036544480764583,0.036637060514137745,0.021300374039055915,0.024234600794019644,0.041191205442119676,0.042387013394963764,0.002095441257997613;0.0494170352186133,0.07341416739685083,0.09853926230743308,0.09634782793551379,0.09783724410900509,0.08187795257848904,0.13043553805372,0.07117658196175115,0.13719570696332595,0.11026864484795532,0.0915219210254594,0.0945260258814225,0.11521696235431934,0.14054499398293327,0.12126179968229749,0.10139296208620688,0.0816185896328138,0.11701143240956195,0.09510437625583962,0.09604218010462438,0.09948207407851915,0.08404606162066207,0.08806004177847063,0.12309065106090752,0.16060881124383147,0.12541242395245872,0.11382404693528128,0.1404677724883612,0.05908385575293422,1.1839656994475445,0.09675583989137544,0.05133826554060662,0.09513535556151603,0.11678436548166032,0.006606790804173666;0.003672538895362949,0.005578405773625255,0.005161986095762632,0.004560328795481538,0.004342563881461266,0.00676169016560935,0.006606661026698078,0.0047470693484732394,0.006929663848729197,0.005949669412420405,0.00555771970469615,0.00592778255489753,0.004647872171363426,0.004935444908266402,0.00494975644212327,0.0058129886804753235,0.0083440119771982,0.004499530176146313,0.004416752211190503,0.0034584413717695605,0.0051056245581107525,0.006121543508880157,0.005445134999831161,0.013532696263016898,0.013499131806109949,0.006457395744096905,0.004705972566193028,0.0034254698102384545,0.004426925866212577,0.004892488427775911,1.0094632993570738,0.005140018954383591,0.0072774706576334575,0.010234043092688865,0.0004355762450716298;0.0015600692642785184,0.0012520350839992996,0.0015809524088145224,0.0015101645697080325,0.001609775167160627,0.001372392892370126,0.0017563625279543166,0.0014229320434533928,0.0020767378694357295,0.0017225385615194627,0.0015442593874317781,0.0016280214275423313,0.0020161114741650585,0.0023073767592175225,0.0018197661511877392,0.0013983746015658576,0.001861318326242166,0.0015028227731700599,0.0012917492779074451,0.0015438391162029524,0.0024372346194961696,0.001284457659626119,0.0019240490377712182,0.0015242923736844905,0.002802764739397849,0.002081359348004221,0.002541029311805559,0.0021122554592103017,0.0005800259223403404,0.002931999454637694,0.005181828259340136,1.0070538992064677,0.001783175763270283,0.0022825541841932123,0.00011664726197053288;0.0028438621177650754,0.0009036361799585305,0.001807328209182122,0.0013573303810598403,0.0014153141672313214,0.0014515908633682257,0.0012384165024792375,0.0008925288906354084,0.0012701138012416603,0.001226096511929861,0.0011379952505489504,0.0011542351328244157,0.0013610870638071425,0.001269576347371795,0.0011766160431981101,0.001287445420383851,0.0009706730683721555,0.0012562228375625113,0.0011294261182443642,0.0011283974624385206,0.0008872052849732958,0.001822152090695404,0.0013335240398393467,0.0014286739925944527,0.0013184145820667203,0.0014246013032593408,0.001247843303474049,0.0011178274417112401,0.0003762483861936012,0.0013286519175810137,0.006948659014229855,0.0018368619231892594,1.023372171856881,0.0023506344038804225,0.00010634664110322277;0.009936944915681162,0.014671193532971121,0.0192680422578005,0.01902158663702595,0.021178779613920853,0.01870190457366515,0.02999367109744178,0.014927803761935953,0.023902653623982403,0.021457103551255945,0.0185368282771797,0.021845210529816753,0.02137294058409289,0.022035125700501614,0.02019542290132338,0.020736602931903513,0.015688818750109138,0.019291066228419113,0.020112718056183258,0.017703534035888698,0.018949274694248876,0.02442185826273263,0.01967180427742013,0.021871600421608618,0.023167793836688183,0.024519444198252957,0.029498434954941342,0.021666369595874337,0.013227160853649248,0.04189443988529914,0.02534159947755893,0.017518251262281716,0.025019856666592465,1.0954035983039803,0.0017113706994978453;4.746157459718702e-05,5.375393490427902e-05,9.096816831783428e-05,0.00011033331543034841,9.849663085149493e-05,9.636680859488116e-05,0.00010055931090349716,6.058356346318719e-05,9.655727482594072e-05,0.000100966203766763,8.008941292959365e-05,9.814312294367056e-05,9.224015426609431e-05,8.34860139324313e-05,0.00011471238786280521,0.00010053514786665593,5.861911332352842e-05,0.00014745967284200115,0.00017867678891062138,7.979452752558333e-05,9.7489507798111e-05,0.00012182789534184835,0.00020925155933863667,9.389297235638912e-05,9.650458516194258e-05,9.126721765274554e-05,0.00013130528851693597,0.00011493494806203095,0.00030007126468838287,0.000125449383126264,0.00013069395663034924,8.112778638450973e-05,0.00018020345177592137,0.00017780108952827103,1.0000269335016068;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            1.17407328e+00, 8.10385233e-03, 3.71432733e-01, 7.19222826e-02, 9.36765402e-02,
            1.99469376e-01, 2.80716229e-02, 1.00181436e-02, 2.20700237e-02, 2.90689181e-02,
            1.01448740e-02, 7.60187355e-03, 8.16722562e-03, 8.18065116e-03, 9.15418334e-03,
            3.79584574e-02, 5.19253818e-03, 1.69371708e-02, 6.21794016e-03, 8.55791050e-03,
            8.13237937e-03, 1.06900106e-01, 6.39411535e-03, 1.14033693e-02, 9.23629672e-03,
            9.85914401e-03, 4.71719680e-03, 4.40465908e-03, 3.25152658e-03, 7.14765507e-03,
            9.85025930e-03, 8.69969438e-03, 1.33607056e-02, 1.10859202e-02, 1.64594222e-02
        ],
              [
                  2.25628180e-02, 1.11545863e+00, 2.46494568e-02, 2.61150722e-02, 2.20460426e-02,
                  2.76086130e-02, 2.64361394e-02, 5.05352591e-01, 8.06563636e-02, 4.01773810e-02,
                  1.24812373e-01, 9.09206676e-02, 3.43415011e-02, 2.69965339e-02, 3.07134910e-02,
                  3.51405621e-02, 1.35594559e-01, 5.44221007e-02, 1.55120028e-02, 1.17736978e-02,
                  1.05878293e-02, 1.76229757e-02, 4.31933673e-02, 4.36920434e-02, 4.17992295e-02,
                  2.36056441e-02, 9.90890810e-03, 6.41798463e-03, 8.65537074e-03, 1.06537965e-02,
                  1.63945197e-02, 1.29049458e-02, 1.58606247e-02, 1.71236341e-02, 6.20163012e-02
              ],
              [
                  7.73270143e-02, 5.10096830e-03, 1.18951224e+00, 1.57447633e-02, 1.34702144e-01,
                  2.00997226e-02, 1.19262283e-02, 6.10251897e-03, 2.14243724e-02, 1.38864298e-02,
                  8.80628412e-03, 7.58252979e-03, 8.28730404e-03, 8.63621607e-03, 8.20332498e-03,
                  1.07858252e-02, 5.06184634e-03, 7.84274002e-03, 7.08080199e-03, 1.01917782e-02,
                  9.01134343e-03, 1.96619455e-01, 7.07142657e-03, 1.61689318e-02, 1.46616765e-02,
                  1.16970217e-02, 5.94724309e-03, 5.74533846e-03, 2.33753170e-03, 8.56246771e-03,
                  1.44933777e-02, 1.39682306e-02, 2.27036368e-02, 1.30886604e-02, 2.71593185e-03
              ],
              [
                  6.52589025e-03, 4.80705078e-03, 7.64597296e-03, 1.39492399e+00, 1.01673007e-01,
                  1.48177474e-02, 1.70651919e-02, 4.36365302e-03, 1.18872756e-02, 3.65414816e-02,
                  1.19171921e-02, 7.28489317e-03, 9.15019218e-03, 8.96462333e-03, 1.86282211e-02,
                  4.12817286e-02, 3.42437309e-03, 8.89631591e-03, 6.97357414e-03, 6.24583592e-03,
                  6.90409414e-03, 7.80406060e-03, 5.66224182e-03, 8.62166285e-03, 5.31080588e-03,
                  5.78799219e-03, 6.84054978e-03, 2.88315002e-03, 1.62509797e-03, 4.38291685e-03,
                  7.49716141e-03, 2.86755588e-03, 7.97349488e-03, 1.03117244e-02, 1.17082399e-03
              ],
              [
                  7.00393012e-04, 7.76053170e-04, 9.84397924e-04, 1.30608667e-02, 1.23996191e+00,
                  2.44439981e-03, 2.82983224e-03, 7.05068554e-04, 1.10354013e-03, 2.45768177e-03,
                  1.54773489e-03, 1.36934896e-03, 1.41229048e-03, 1.34203140e-03, 3.15013037e-03,
                  5.53675075e-03, 6.23831391e-04, 9.82314721e-04, 1.22180218e-03, 1.04458950e-03,
                  1.00916838e-03, 7.96995157e-04, 7.48514298e-04, 8.89011023e-04, 7.40717692e-04,
                  6.89352645e-04, 1.30616331e-03, 3.70138676e-04, 1.95138723e-04, 5.81802264e-04,
                  1.57768156e-03, 4.34831218e-04, 6.24002586e-04, 1.43894871e-03, 1.01045614e-04
              ],
              [
                  4.36165609e-03, 5.25531524e-03, 6.12127741e-03, 6.46665885e-03, 7.57404121e-03,
                  1.24275301e+00, 2.07667381e-02, 4.18297051e-03, 6.18472133e-03, 7.92438348e-03,
                  1.32674297e-02, 8.79066883e-03, 8.63962602e-03, 7.10998442e-03, 1.02203668e-02,
                  9.55884730e-02, 4.46563771e-03, 4.86339578e-02, 4.26939428e-03, 4.20923615e-03,
                  3.95415602e-03, 6.05212233e-03, 4.62020953e-03, 4.62782469e-03, 3.88215681e-03,
                  9.09284655e-03, 3.40713487e-03, 2.86273635e-03, 5.68570044e-03, 3.75485137e-03,
                  4.97754376e-03, 3.71789421e-03, 3.92158756e-03, 7.12469319e-03, 1.13196975e-03
              ],
              [
                  1.59504566e-02, 1.54514057e-02, 5.34099459e-02, 3.63042562e-02, 4.34652934e-02,
                  3.59116521e-02, 1.32562155e+00, 1.54668709e-02, 4.90908959e-02, 4.95716127e-02,
                  4.83592059e-02, 2.63981774e-02, 3.42063652e-02, 4.39676374e-02, 3.19079143e-02,
                  4.86715872e-02, 1.55305285e-02, 2.63502959e-02, 2.42527400e-02, 2.96306272e-02,
                  2.81760603e-02, 3.18744151e-02, 2.05283927e-02, 2.35613729e-02, 2.64319125e-02,
                  3.65484902e-02, 2.73382998e-02, 3.36120619e-02, 9.88253050e-03, 4.27718370e-02,
                  3.25973568e-02, 2.84755303e-02, 2.62143319e-02, 4.75179985e-02, 2.38237628e-03
              ],
              [
                  2.23616804e-02, 2.28106693e-02, 1.86382108e-02, 1.95450494e-02, 1.74224005e-02,
                  1.92801508e-02, 1.62114553e-02, 1.06242938e+00, 4.72745701e-02, 2.81887353e-02,
                  3.17512381e-02, 2.43996355e-02, 1.61718533e-02, 1.46124897e-02, 1.53050602e-02,
                  1.75152605e-02, 3.11321669e-02, 2.56044861e-02, 1.19046479e-02, 1.17797037e-02,
                  9.91727053e-03, 1.25758108e-02, 6.19272776e-02, 6.94977843e-02, 6.85122800e-02,
                  2.55207719e-02, 9.03773956e-03, 5.42963508e-03, 4.31673156e-03, 9.96751235e-03,
                  1.39474786e-02, 7.25456385e-03, 1.12843114e-02, 1.36675635e-02, 1.89101430e-03
              ],
              [
                  7.24890007e-02, 3.25142858e-02, 5.37937824e-02, 1.47714766e-01, 9.45470630e-02,
                  6.95663938e-02, 7.68255278e-02, 3.93734741e-02, 1.32654219e+00, 3.14955323e-01,
                  6.41860724e-02, 4.72932934e-02, 4.93924613e-02, 5.95734359e-02, 6.07072527e-02,
                  8.01984924e-02, 2.03194764e-02, 4.06152480e-02, 2.91342694e-02, 1.38748310e-02,
                  1.22857129e-02, 2.51120844e-02, 1.92157849e-02, 1.90329585e-02, 1.71406298e-02,
                  1.81799538e-02, 1.19117866e-02, 7.91549705e-03, 7.08791650e-03, 1.55535019e-02,
                  2.23787473e-02, 1.17249504e-02, 9.64691338e-02, 2.49409974e-02, 3.58710370e-03
              ],
              [
                  1.28015166e-02, 1.76768964e-02, 2.93912779e-02, 2.35994794e-02, 6.08724150e-02,
                  2.33205016e-02, 2.88689759e-02, 1.36462519e-02, 3.53384467e-02, 1.13934384e+00,
                  2.38619664e-02, 2.21976271e-02, 4.72718739e-02, 4.87914452e-02, 7.13261958e-02,
                  5.69336230e-02, 1.00620462e-02, 3.25221083e-02, 3.38174657e-02, 1.01383514e-02,
                  1.01553172e-02, 1.39375817e-02, 2.09918856e-02, 1.31481765e-02, 1.23601034e-02,
                  1.48404602e-02, 1.00222099e-02, 4.52163326e-03, 4.21088432e-03, 8.15724368e-03,
                  1.02368866e-02, 4.81417574e-03, 1.33832870e-02, 1.04980366e-02, 1.65582364e-03
              ],
              [
                  5.72049347e-03, 1.00053646e-02, 1.18571192e-02, 7.70756388e-03, 7.91363446e-03,
                  1.76618033e-02, 6.43468235e-03, 8.75707281e-03, 1.41575422e-02, 1.42778262e-02,
                  1.12812590e+00, 2.06896152e-02, 1.55696798e-02, 2.33003324e-02, 1.93828896e-02,
                  1.51970747e-02, 8.19573419e-03, 9.91520379e-02, 8.43217502e-03, 4.26240507e-03,
                  3.68190631e-03, 8.60450475e-03, 5.77659381e-03, 5.29765569e-03, 4.74900017e-03,
                  6.25780417e-03, 4.95220225e-03, 2.45043347e-03, 7.74594821e-03, 4.06018383e-03,
                  6.18194047e-03, 4.74884541e-03, 6.13059584e-03, 6.12395025e-03, 1.05079900e-03
              ],
              [
                  2.46021107e-02, 6.31347754e-02, 4.73327839e-02, 3.52597876e-02, 4.48984931e-02,
                  7.34252598e-02, 3.92142604e-02, 4.65809266e-02, 5.77105253e-02, 7.00784607e-02,
                  8.07309571e-02, 1.49751515e+00, 3.03706764e-01, 1.73363273e-01, 2.51272469e-01,
                  1.99050736e-01, 3.59882000e-02, 1.62266432e-01, 7.13591499e-02, 1.99806092e-02,
                  1.74727199e-02, 2.55560450e-02, 3.61548655e-02, 4.63013574e-02, 3.90949348e-02,
                  3.08578479e-02, 2.25539484e-02, 1.02771985e-02, 1.53000951e-02, 1.87349351e-02,
                  2.81472531e-02, 1.35564994e-02, 2.09239560e-02, 2.36877765e-02, 5.60254057e-03
              ],
              [
                  1.44206885e-02, 2.99378415e-02, 1.47640322e-02, 1.78277290e-02, 1.62505467e-02,
                  2.12478425e-02, 1.73964275e-02, 2.19096074e-02, 1.99671701e-02, 2.36713531e-02,
                  2.66284591e-02, 3.53273897e-02, 1.14792875e+00, 3.22622445e-02, 5.87874397e-02,
                  2.25584963e-02, 1.73952096e-02, 3.01492761e-02, 3.62038145e-02, 8.63858391e-03,
                  7.21451220e-03, 8.99567364e-03, 1.51721427e-02, 1.67302559e-02, 1.34869724e-02,
                  1.23230647e-02, 8.41012931e-03, 4.56967205e-03, 4.54688477e-03, 7.87014160e-03,
                  1.29748103e-02, 5.95537253e-03, 7.97318326e-03, 9.56958895e-03, 2.27484607e-03
              ],
              [
                  1.16482258e-02, 2.31896737e-02, 1.88404019e-02, 2.31343111e-02, 2.18363769e-02,
                  2.54504984e-02, 3.01864682e-02, 2.04548014e-02, 3.07901170e-02, 3.65946430e-02,
                  2.88216823e-02, 4.62315709e-02, 1.31549865e-01, 1.36143565e+00, 1.18695264e-01,
                  4.63516339e-02, 3.01711683e-02, 5.49120277e-02, 5.49388109e-02, 2.10576808e-02,
                  1.86132804e-02, 1.64871003e-02, 2.29094657e-02, 2.30637705e-02, 2.28826699e-02,
                  2.26955776e-02, 5.11401210e-02, 1.33275929e-02, 8.22352365e-03, 2.79931113e-02,
                  2.79922032e-02, 1.42453813e-02, 3.50863974e-02, 2.21294764e-02, 2.68209337e-03
              ],
              [
                  1.23487045e-02, 1.56324590e-02, 1.35285207e-02, 1.38437481e-02, 1.46330589e-02,
                  1.54414174e-02, 1.14944461e-02, 1.32006009e-02, 1.30901669e-02, 1.49937424e-02,
                  1.58380284e-02, 1.94314522e-02, 3.22979088e-02, 1.82404801e-02, 1.42394952e+00,
                  1.69596113e-02, 1.03206014e-02, 1.60605808e-02, 1.28255338e-01, 1.26370337e-02,
                  1.04441398e-02, 8.90167713e-03, 5.24911117e-02, 7.45036804e-02, 7.52892506e-02,
                  2.54489504e-02, 9.71787696e-03, 5.16219137e-03, 3.23978274e-03, 9.55299839e-03,
                  3.13914522e-02, 5.00148325e-03, 7.10928430e-03, 1.08459162e-02, 1.40253012e-03
              ],
              [
                  2.48690781e-03, 3.41192960e-03, 3.88246701e-03, 1.03541497e-02, 7.41219904e-03,
                  1.06698303e-02, 6.71195399e-03, 3.07549970e-03, 5.11037072e-03, 6.13495842e-03,
                  6.71100415e-03, 1.30309827e-02, 9.04538335e-03, 7.47710731e-03, 1.18759553e-02,
                  1.04076428e+00, 3.03312989e-03, 9.29599950e-03, 5.14882903e-03, 3.05832967e-03,
                  3.16941439e-03, 4.88138656e-03, 3.61175517e-03, 3.81498679e-03, 3.62426942e-03,
                  3.61972188e-03, 2.62393124e-03, 2.72526274e-03, 2.26214658e-03, 4.35188231e-03,
                  5.98798869e-03, 4.72290618e-03, 4.90671921e-03, 8.21584030e-03, 3.52061547e-03
              ],
              [
                  2.10338925e-02, 3.68408665e-02, 3.07955670e-02, 4.12029806e-02, 2.86535557e-02,
                  3.64967734e-02, 4.22571257e-02, 3.68980746e-02, 5.43601520e-02, 4.83303223e-02,
                  5.94766435e-02, 5.61138245e-02, 3.44894461e-02, 3.12246214e-02, 3.50381597e-02,
                  3.31204630e-02, 1.11635308e+00, 2.58411830e-02, 2.31440466e-02, 1.42147785e-02,
                  2.11434176e-02, 3.74036316e-02, 2.75851698e-02, 1.89997103e-02, 1.75405766e-02,
                  2.53904891e-02, 1.70287938e-02, 1.16569683e-02, 1.32694779e-02, 1.51179366e-02,
                  2.46188291e-02, 2.60022014e-02, 2.46140415e-02, 2.74598724e-02, 2.92851546e-03
              ],
              [
                  8.65066663e-03, 1.44096470e-02, 1.06756408e-02, 1.08659405e-02, 1.03893032e-02,
                  1.28962223e-02, 1.24083553e-02, 1.27993531e-02, 1.35527878e-02, 1.26418026e-02,
                  1.64307071e-02, 1.47909767e-02, 1.20813387e-02, 1.17360587e-02, 1.17173595e-02,
                  1.16999684e-02, 3.49624292e-02, 1.04574130e+00, 1.09685474e-02, 9.65322590e-03,
                  1.07289343e-02, 1.27171616e-02, 1.65815825e-02, 1.38942370e-02, 1.09550498e-02,
                  2.38072863e-02, 1.79012413e-02, 1.12797235e-02, 4.80793566e-02, 1.16215152e-02,
                  2.51644949e-02, 1.76212307e-02, 1.30536597e-02, 1.99665304e-02, 3.46570687e-03
              ],
              [
                  9.59518497e-03, 8.84410603e-03, 1.43496236e-02, 1.34576262e-02, 1.68472533e-02,
                  1.39286359e-02, 1.12736480e-02, 9.90440844e-03, 1.39013397e-02, 1.42222444e-02,
                  1.45103895e-02, 1.43846917e-02, 1.31613340e-02, 1.26567852e-02, 1.40655011e-02,
                  1.36744834e-02, 1.42659668e-02, 1.48011333e-02, 1.01368070e+00, 8.45873093e-03,
                  7.79314597e-03, 1.09317256e-02, 2.34097589e-02, 1.00210665e-02, 8.84008384e-03,
                  1.29444865e-02, 8.35785310e-03, 5.64439255e-03, 3.99289363e-03, 9.85031462e-03,
                  7.69483216e-03, 5.59490146e-03, 7.34118400e-03, 1.09763908e-02, 8.33000625e-04
              ],
              [
                  5.99879630e-02, 4.72438668e-02, 1.08591154e-01, 1.04347239e-01, 1.32057945e-01,
                  1.01291119e-01, 8.92071730e-02, 7.11857977e-02, 9.24821131e-02, 9.74054016e-02,
                  7.82250655e-02, 8.89210605e-02, 9.52475675e-02, 1.00714472e-01, 1.03828013e-01,
                  9.53726949e-02, 4.49800377e-02, 8.11804567e-02, 6.63740135e-02, 1.04683629e+00,
                  2.70785102e-02, 7.72009263e-02, 4.55853210e-02, 4.78466227e-02, 4.47779116e-02,
                  4.29979893e-02, 2.54969667e-02, 1.68437550e-02, 1.24123969e-02, 2.84572877e-02,
                  3.90741797e-02, 2.16070508e-02, 4.91249289e-02, 3.41100054e-02, 4.67593970e-03
              ],
              [
                  2.94342208e-02, 2.01820073e-02, 5.23723785e-02, 5.13206474e-02, 7.01555897e-02,
                  4.17859926e-02, 3.55031588e-02, 2.74316460e-02, 4.26858360e-02, 4.35728678e-02,
                  3.50833636e-02, 3.55675228e-02, 3.66449312e-02, 3.58207465e-02, 4.39775193e-02,
                  4.53951835e-02, 1.84576722e-02, 4.48719308e-02, 2.96457259e-02, 1.59826913e-02,
                  1.01504691e+00, 4.23394966e-02, 2.60744766e-02, 2.31876136e-02, 2.10282595e-02,
                  2.08571879e-02, 1.84018659e-02, 1.06515085e-02, 8.15366036e-03, 1.78507410e-02,
                  1.67692150e-02, 1.13580845e-02, 2.16548551e-02, 2.25629365e-02, 2.53500708e-03
              ],
              [
                  6.08516208e-03, 9.21543889e-03, 1.21210276e-02, 1.34524373e-02, 1.37145827e-02,
                  1.37786654e-02, 1.46888614e-02, 9.14526464e-03, 1.45475153e-02, 1.52707384e-02,
                  1.43739241e-02, 1.46332859e-02, 1.63327761e-02, 1.71185666e-02, 1.41285668e-02,
                  1.34344967e-02, 1.06043714e-02, 1.37561683e-02, 1.31776745e-02, 1.47920350e-02,
                  1.09293794e-02, 1.01665348e+00, 1.46898159e-02, 1.79812174e-02, 3.30735777e-02,
                  3.12490982e-02, 1.22802094e-02, 1.65046409e-02, 5.52892595e-03, 2.01638895e-02,
                  1.48381056e-02, 1.03797784e-02, 1.35907742e-02, 1.79356906e-02, 8.92863249e-04
              ],
              [
                  2.79843641e-02, 4.09035286e-02, 4.54936352e-02, 4.32050780e-02, 4.75979270e-02,
                  4.91552516e-02, 3.87143272e-02, 5.98662566e-02, 4.36140402e-02, 4.13407335e-02,
                  5.86523453e-02, 4.31685972e-02, 3.38395439e-02, 3.00787502e-02, 3.72922647e-02,
                  4.07180922e-02, 4.19469525e-02, 3.86007717e-02, 2.69192877e-02, 2.72271103e-02,
                  1.81418018e-02, 2.62575524e-02, 1.05651491e+00, 4.07917164e-02, 2.78975474e-02,
                  4.69759254e-02, 1.90767072e-02, 1.36271689e-02, 6.81089925e-03, 1.55091032e-02,
                  2.12799407e-02, 1.68641500e-02, 1.83775238e-02, 2.07014371e-02, 3.74166599e-03
              ],
              [
                  5.53848001e-03, 6.86703253e-03, 8.53217967e-03, 7.38383906e-03, 8.99822674e-03,
                  1.32575568e-02, 4.84483529e-03, 9.23611369e-03, 7.27258398e-03, 6.33695051e-03,
                  1.03709420e-02, 9.06646009e-03, 5.55030349e-03, 5.08478239e-03, 6.13143008e-03,
                  6.67483962e-03, 4.79024255e-03, 6.73028171e-03, 3.39243530e-03, 3.76251814e-03,
                  2.57326679e-03, 4.67368930e-03, 6.76388633e-03, 1.11348796e+00, 6.40196205e-03,
                  9.51584622e-03, 2.58119329e-03, 1.83166345e-03, 9.51541619e-04, 2.51981235e-03,
                  3.16124638e-03, 3.08987965e-03, 2.35428957e-03, 2.80126265e-03, 5.94362649e-04
              ],
              [
                  2.80167786e-03, 4.74140843e-03, 4.99533279e-03, 5.50010151e-03, 7.14523590e-03,
                  4.76176012e-03, 5.89523314e-03, 4.36662666e-03, 5.87788747e-03, 5.72183760e-03,
                  4.82113800e-03, 5.12833018e-03, 5.68948960e-03, 6.23825219e-03, 6.13104324e-03,
                  5.11382544e-03, 3.18437103e-03, 4.44446776e-03, 4.86475395e-03, 6.56185351e-03,
                  3.67561753e-03, 3.94549827e-03, 5.38405439e-03, 1.13052705e-02, 1.03951443e+00,
                  2.61143127e-02, 8.19223069e-03, 6.04862981e-03, 1.65406124e-03, 7.18900545e-03,
                  6.96034165e-03, 3.49878147e-03, 3.49425526e-03, 6.86182092e-03, 3.98543773e-04
              ],
              [
                  1.13563870e-02, 1.56681211e-02, 2.00764721e-02, 1.69883699e-02, 2.00789631e-02,
                  2.16072197e-02, 1.97988344e-02, 2.02957593e-02, 1.88799572e-02, 1.85276742e-02,
                  2.33907280e-02, 1.95161768e-02, 1.72666174e-02, 1.64139346e-02, 1.86282143e-02,
                  1.76073410e-02, 1.37567833e-02, 1.52999520e-02, 1.66654443e-02, 2.77427293e-02,
                  1.58929847e-02, 1.82789628e-02, 5.29624246e-02, 1.91961885e-01, 1.21616732e-01,
                  1.14098359e+00, 9.87538329e-03, 9.49892868e-03, 3.51566180e-03, 1.15766547e-02,
                  1.05905436e-02, 6.95518784e-03, 9.59916227e-03, 1.31172857e-02, 1.34578512e-03
              ],
              [
                  9.91157940e-03, 1.51555546e-02, 1.70175818e-02, 1.83568537e-02, 1.97509070e-02,
                  1.75260268e-02, 2.61995440e-02, 1.47748731e-02, 2.13447336e-02, 2.01756930e-02,
                  1.81457310e-02, 1.95230042e-02, 2.13064852e-02, 2.18632329e-02, 1.94574264e-02,
                  2.05033834e-02, 1.49378626e-02, 2.12991127e-02, 2.26324216e-02, 2.82868127e-02,
                  2.70861966e-02, 2.25803610e-02, 2.62696538e-02, 3.98573794e-02, 4.64955935e-02,
                  3.77427003e-02, 1.10538585e+00, 3.68641212e-02, 9.50576863e-03, 3.30598773e-02,
                  2.70360844e-02, 1.41120462e-02, 1.99962331e-02, 3.40992341e-02, 1.47618168e-03
              ],
              [
                  4.51281865e-02, 6.36409322e-02, 5.87479659e-02, 6.84679195e-02, 6.58400017e-02,
                  6.64772390e-02, 6.30025158e-02, 5.84275786e-02, 6.64408072e-02, 6.33769858e-02,
                  6.45633661e-02, 6.78903746e-02, 6.41725336e-02, 6.14751938e-02, 6.27880973e-02,
                  6.49608915e-02, 5.45856341e-02, 6.10300642e-02, 5.83897347e-02, 6.98696842e-02,
                  5.98246480e-02, 5.72241650e-02, 7.59369489e-02, 8.65090957e-02, 7.86794974e-02,
                  6.15565880e-02, 4.83685680e-02, 1.22693591e+00, 7.21205337e-02, 6.67343715e-02,
                  4.82813499e-02, 2.97556287e-02, 4.90915527e-02, 6.48069408e-02, 8.70573057e-03
              ],
              [
                  1.69514514e-02, 1.59778282e-02, 2.17924475e-02, 2.32363563e-02, 2.53977535e-02,
                  2.19719672e-02, 2.55417530e-02, 1.61259088e-02, 2.19254423e-02, 2.32088646e-02,
                  2.06715427e-02, 2.19259282e-02, 2.32409577e-02, 2.28416553e-02, 2.24996826e-02,
                  2.52542968e-02, 1.69286134e-02, 2.82256918e-02, 3.72035380e-02, 3.96191267e-02,
                  5.20273312e-02, 4.20139097e-02, 2.34836248e-02, 4.70975263e-02, 3.30708163e-02,
                  3.73693327e-02, 2.36012001e-02, 3.77967623e-02, 1.03654448e+00, 3.66370605e-02,
                  2.13003740e-02, 2.42346008e-02, 4.11912054e-02, 4.23870134e-02, 2.09544126e-03
              ],
              [
                  4.94170352e-02, 7.34141674e-02, 9.85392623e-02, 9.63478279e-02, 9.78372441e-02,
                  8.18779526e-02, 1.30435538e-01, 7.11765820e-02, 1.37195707e-01, 1.10268645e-01,
                  9.15219210e-02, 9.45260259e-02, 1.15216962e-01, 1.40544994e-01, 1.21261800e-01,
                  1.01392962e-01, 8.16185896e-02, 1.17011432e-01, 9.51043763e-02, 9.60421801e-02,
                  9.94820741e-02, 8.40460616e-02, 8.80600418e-02, 1.23090651e-01, 1.60608811e-01,
                  1.25412424e-01, 1.13824047e-01, 1.40467772e-01, 5.90838558e-02, 1.18396570e+00,
                  9.67558399e-02, 5.13382655e-02, 9.51353556e-02, 1.16784365e-01, 6.60679080e-03
              ],
              [
                  3.67253890e-03, 5.57840577e-03, 5.16198610e-03, 4.56032880e-03, 4.34256388e-03,
                  6.76169017e-03, 6.60666103e-03, 4.74706935e-03, 6.92966385e-03, 5.94966941e-03,
                  5.55771970e-03, 5.92778255e-03, 4.64787217e-03, 4.93544491e-03, 4.94975644e-03,
                  5.81298868e-03, 8.34401198e-03, 4.49953018e-03, 4.41675221e-03, 3.45844137e-03,
                  5.10562456e-03, 6.12154351e-03, 5.44513500e-03, 1.35326963e-02, 1.34991318e-02,
                  6.45739574e-03, 4.70597257e-03, 3.42546981e-03, 4.42692587e-03, 4.89248843e-03,
                  1.00946330e+00, 5.14001895e-03, 7.27747066e-03, 1.02340431e-02, 4.35576245e-04
              ],
              [
                  1.56006926e-03, 1.25203508e-03, 1.58095241e-03, 1.51016457e-03, 1.60977517e-03,
                  1.37239289e-03, 1.75636253e-03, 1.42293204e-03, 2.07673787e-03, 1.72253856e-03,
                  1.54425939e-03, 1.62802143e-03, 2.01611147e-03, 2.30737676e-03, 1.81976615e-03,
                  1.39837460e-03, 1.86131833e-03, 1.50282277e-03, 1.29174928e-03, 1.54383912e-03,
                  2.43723462e-03, 1.28445766e-03, 1.92404904e-03, 1.52429237e-03, 2.80276474e-03,
                  2.08135935e-03, 2.54102931e-03, 2.11225546e-03, 5.80025922e-04, 2.93199945e-03,
                  5.18182826e-03, 1.00705390e+00, 1.78317576e-03, 2.28255418e-03, 1.16647262e-04
              ],
              [
                  2.84386212e-03, 9.03636180e-04, 1.80732821e-03, 1.35733038e-03, 1.41531417e-03,
                  1.45159086e-03, 1.23841650e-03, 8.92528891e-04, 1.27011380e-03, 1.22609651e-03,
                  1.13799525e-03, 1.15423513e-03, 1.36108706e-03, 1.26957635e-03, 1.17661604e-03,
                  1.28744542e-03, 9.70673068e-04, 1.25622284e-03, 1.12942612e-03, 1.12839746e-03,
                  8.87205285e-04, 1.82215209e-03, 1.33352404e-03, 1.42867399e-03, 1.31841458e-03,
                  1.42460130e-03, 1.24784330e-03, 1.11782744e-03, 3.76248386e-04, 1.32865192e-03,
                  6.94865901e-03, 1.83686192e-03, 1.02337217e+00, 2.35063440e-03, 1.06346641e-04
              ],
              [
                  9.93694492e-03, 1.46711935e-02, 1.92680423e-02, 1.90215866e-02, 2.11787796e-02,
                  1.87019046e-02, 2.99936711e-02, 1.49278038e-02, 2.39026536e-02, 2.14571036e-02,
                  1.85368283e-02, 2.18452105e-02, 2.13729406e-02, 2.20351257e-02, 2.01954229e-02,
                  2.07366029e-02, 1.56888188e-02, 1.92910662e-02, 2.01127181e-02, 1.77035340e-02,
                  1.89492747e-02, 2.44218583e-02, 1.96718043e-02, 2.18716004e-02, 2.31677938e-02,
                  2.45194442e-02, 2.94984350e-02, 2.16663696e-02, 1.32271609e-02, 4.18944399e-02,
                  2.53415995e-02, 1.75182513e-02, 2.50198567e-02, 1.09540360e+00, 1.71137070e-03
              ],
              [
                  4.74615746e-05, 5.37539349e-05, 9.09681683e-05, 1.10333315e-04, 9.84966309e-05,
                  9.63668086e-05, 1.00559311e-04, 6.05835635e-05, 9.65572748e-05, 1.00966204e-04,
                  8.00894129e-05, 9.81431229e-05, 9.22401543e-05, 8.34860139e-05, 1.14712388e-04,
                  1.00535148e-04, 5.86191133e-05, 1.47459673e-04, 1.78676789e-04, 7.97945275e-05,
                  9.74895078e-05, 1.21827895e-04, 2.09251559e-04, 9.38929724e-05, 9.65045852e-05,
                  9.12672177e-05, 1.31305289e-04, 1.14934948e-04, 3.00071265e-04, 1.25449383e-04,
                  1.30693957e-04, 8.11277864e-05, 1.80203452e-04, 1.77801090e-04, 1.00002693e+00
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def leontief_matrix_1998():
    """
    Real Name: b'leontief matrix 1998'
    Original Eqn: b'1.176102877461038,0.008155803960280586,0.3714390053251029,0.0734348506116927,0.09460301561207071,0.20495163695417745,0.028518447117339283,0.010633514500687351,0.022239579682139403,0.03085408703279777,0.010347655885878548,0.007891886445485476,0.008392768595468907,0.00817743569015826,0.009227739818426244,0.0387795393191157,0.00551588010929442,0.019193674674954978,0.006324141500807391,0.008859577785444507,0.008408837746934416,0.1083457006364825,0.0067711807392675195,0.011883493145310862,0.009772855209615829,0.011534986915978838,0.005033507737272361,0.0045973993126056135,0.0036365469533604085,0.007032114755729782,0.010302386322960655,0.009168302083430254,0.013734717306803725,0.011385941958596827,0.020225029647358207;0.021611343948154598,1.110400903468312,0.023589946160557124,0.025547600096118128,0.021429901764741514,0.027481116325211188,0.025805146458448544,0.4841110685632697,0.0856942499128243,0.04032134700518046,0.12182389666509204,0.08948564127715473,0.0331349533522832,0.025604333138224963,0.02965379046160531,0.03577621462885274,0.13421981163632485,0.05485937399963474,0.015020649706681514,0.011085785960438577,0.01038752745220294,0.016726397271938757,0.0412172194799935,0.04522220333497092,0.03981788350899124,0.023009093899021615,0.00984389233487881,0.0063532111059488834,0.00950619698941218,0.010210614347042409,0.015917907973350437,0.012170571616657085,0.015789417878678304,0.01590166753643141,0.07565328033540561;0.07705650131343694,0.005112485518956437,1.1915808076243442,0.015634249304711773,0.13289643900552434,0.020330444627792616,0.011912647806697482,0.006406076910945174,0.021461774875691262,0.013955110715353554,0.00878414541907806,0.007657638058068555,0.008270881295734677,0.008372081363309119,0.00807547537591215,0.01120885010918799,0.00520771030418715,0.007974767488837527,0.00701956088214944,0.010224655547317626,0.008995466333908192,0.19543231516674106,0.007250810617958652,0.016902444156163533,0.015025553858195434,0.012046580757666302,0.0062120964005588485,0.005911448145680967,0.0025504639212604275,0.008316190016617068,0.014829722594982353,0.01429130244294194,0.02305626812372822,0.013364035141048579,0.003330944560931817;0.006303860334269231,0.005072757819202828,0.007528385628751712,1.3858602018302193,0.09934757622609515,0.014242902639270574,0.016814400222966926,0.0046373232538869935,0.011745548853422454,0.03534853575164585,0.012165722922045449,0.007410777200964788,0.00925205952586342,0.00868236654686421,0.018058037993216872,0.04422118272206171,0.0034928277204644615,0.008945432622489289,0.0068619289445114385,0.006184466199047264,0.006903263795016817,0.007522519117387409,0.00570115221575342,0.008106641305915482,0.005485982941216639,0.005999165473381024,0.007051232070647863,0.002918285031146429,0.0017728157236212262,0.0043408446963005744,0.007851539823782129,0.0029680723989118788,0.008051299565681617,0.010402824168386378,0.0014553054864939285;0.0006638176157991502,0.0007240227437891083,0.0009384159867144172,0.011813674403148122,1.2364180133204878,0.0021522495634865605,0.002702919844316453,0.0006822919562471941,0.0010686318759515199,0.002500737865137917,0.0015284231210873208,0.001328386739351644,0.0013866021138877046,0.0012599220177742768,0.0030918959234983597,0.0054528311723661144,0.0006019631527194794,0.0009564350225718375,0.0011899953663782607,0.0009562883188636348,0.0009699859997502388,0.0007525074276864349,0.0007231937175717977,0.0008322765639914407,0.0007322867226379435,0.0006941490629318296,0.001266444921261041,0.00036103044665933276,0.00019909567632006684,0.0005483646251660812,0.0015868240627408792,0.0004279191605354599,0.0006223394217178171,0.0013879033857745339,0.00011816218099091496;0.004441127032189853,0.0053114667077100945,0.006227874853336298,0.006296609955543247,0.007228963482819075,1.2485966967387963,0.020550424579706846,0.0041717990338599065,0.006094399644072873,0.008000441565076802,0.012920539883674857,0.00906714441625185,0.008776413075863578,0.006956929479973216,0.009874119901588808,0.09954691644289736,0.004516566090240244,0.047197233533595756,0.004270244444370219,0.004194053612361869,0.00407210357099995,0.005924634099636845,0.004677264003511693,0.004465263658518563,0.00395330306952718,0.008869564310338968,0.0034414494610628646,0.002840934490165562,0.006017161702069117,0.003722250254888574,0.005047993245659001,0.004227384964839254,0.004012912428560124,0.00696058665979486,0.0014053673794530053;0.01583032234690703,0.015197720909471815,0.05297528052150435,0.035732740074966345,0.04315199313532402,0.03635776351511679,1.3202386218962299,0.016057391927901926,0.04838837139587805,0.04938319439144784,0.04846079910673673,0.026777833605402025,0.033547206373607544,0.04249421200219813,0.03142274246207759,0.05154673547251497,0.015835482487119985,0.026367142260623224,0.02416633896980146,0.029129744194879053,0.028014276610650375,0.031049525844108326,0.02105333580191027,0.02275488477907988,0.026973002566006897,0.03655547994441375,0.02813301620882069,0.03350222083890799,0.010600483194820197,0.042291315051557796,0.033498828414392764,0.02926870207217992,0.02659995543566512,0.04797223797532779,0.002906630722044535;0.021602494873111076,0.023145596913695044,0.01845291534023847,0.018805826611348504,0.017097028665297956,0.019374360349227873,0.016082672712822255,1.06435517868665,0.04593850479169074,0.02688579195067457,0.03106965987622747,0.02474692276701488,0.015943428332539908,0.014035566031796702,0.014948664465878104,0.01821624962972734,0.030141137099536457,0.02589532242002156,0.011818452762873235,0.011509619805787378,0.009775462761438952,0.012217926580516313,0.06239861985763124,0.07527317363755692,0.06780872617432346,0.026668921335445944,0.009211820995350896,0.005575738377622596,0.004821716038811095,0.009879931591004538,0.01402064528698909,0.007222136122059518,0.011102790880004796,0.013359564779751608,0.0023314848659147743;0.0718350620988223,0.03220293410779872,0.05386545554033582,0.14439215247228523,0.09436289659484941,0.07146205047485826,0.07722641261241713,0.040928705044613455,1.3195494693317338,0.31021342853088796,0.06460940562096312,0.047703610978311814,0.04906462600616804,0.05826240014949509,0.05990819541469956,0.08457362132786586,0.021118175257096146,0.04146608463507544,0.028822964299927905,0.014019804634997668,0.012558996446568488,0.025123295347399325,0.019787303953935517,0.019608603522020512,0.01793080118120148,0.01927754373581873,0.012387589808545435,0.008256638980788869,0.007941867145983095,0.015838887454781365,0.023105539860220813,0.01181939103156062,0.09685887534969691,0.025176774965633815,0.0043843751331535015;0.0130643488241087,0.01759018787293028,0.029999338757122785,0.02394599358143903,0.059637530061965316,0.024089762694380568,0.029704088032633025,0.01384639090780382,0.03594057908034782,1.141564558982365,0.024496996290738246,0.022757822525702517,0.04763537530736395,0.04913496599968966,0.07033898388947896,0.06157115021622594,0.01041315185059839,0.033079455203251805,0.03295906867819952,0.010217580312760668,0.010405590022376652,0.01408790721196941,0.021363635366727897,0.013810406103644967,0.01293081405682224,0.015658155771961675,0.01043389151289544,0.004714007648452615,0.004702079748580961,0.008329132628362356,0.010562520671130405,0.004984443260968167,0.014020173323589576,0.01044152799244025,0.0020514634814286143;0.005692356627541239,0.009941827182482512,0.011655787506404981,0.007559932699593749,0.007740910901212734,0.017527329547708023,0.0063372815049474035,0.00855480589020772,0.013981669253488923,0.014166315628672673,1.1287367201069773,0.020887837722543934,0.01542644121688751,0.022547174598770193,0.01866162992123876,0.01591989322391499,0.008294690866786993,0.0968763309948168,0.008266052074231818,0.004154478589425632,0.003688645467498053,0.00844903788773675,0.005771232436153738,0.00524594285050909,0.0048428180571904785,0.006425444363697414,0.004989651360610003,0.0024999849090465353,0.007937289532529753,0.00397236722337122,0.0061273153047038485,0.004732388391804279,0.006158202660157828,0.005971396100841794,0.0012788038715683644;0.02394331283702415,0.06004616665891537,0.046636604505223375,0.03465799240408909,0.04350014489114085,0.07362543074786729,0.039250601431137365,0.04514588881867425,0.0575733837604057,0.07014978161817455,0.08065763959620326,1.4904647706712315,0.29706953311771106,0.1673885820520023,0.24648479766660467,0.21179018396851526,0.03637955064850857,0.16208135702806262,0.069940460776157,0.019587618636935727,0.017627001134802388,0.025237235638733774,0.036464972828290726,0.04355190696775797,0.03971972326328213,0.03202384741245713,0.02328410890880737,0.010592146775444608,0.01668132426788316,0.01866404746501998,0.028172431775170988,0.013539885468127169,0.0212317423359546,0.023364008190509666,0.006689099967294054;0.013951995846569509,0.028650473757703757,0.014403008220808958,0.017401943087843097,0.015877691611307716,0.021041940903856252,0.016977242541574816,0.020855885264396457,0.019646084760864,0.023082738683488375,0.026128769234366758,0.034811044475155054,1.1404787321962266,0.03087616210883264,0.05631040605909743,0.023668505100693665,0.017703165372910612,0.029815979552224484,0.034672208764694464,0.008566061709443212,0.0072465412560974605,0.00876007931814789,0.015292373375165926,0.016271556106861207,0.013380002098277876,0.012702189454035786,0.008344351202743851,0.004723893619036326,0.004956160515693785,0.007610231856406571,0.012774453194899603,0.005814609510869156,0.008040307317744709,0.009191656843337389,0.0026939445940643725;0.011903846132502444,0.023649595853331644,0.01951414854276836,0.023756517470015007,0.02248885931621299,0.027300685543994944,0.030964724258189122,0.02131040954631881,0.03225967567126639,0.038217116114709244,0.030059630478783426,0.04794489696872356,0.13283083520550373,1.3627812936443862,0.11828855959886553,0.051066537631793474,0.0312294640721492,0.05724305341043522,0.05439663369997804,0.021326773951467856,0.019637143975644634,0.01700024865683219,0.024006392673050513,0.023546710641272738,0.024265211504730932,0.024290198395912024,0.055659565029234276,0.014249069495119584,0.00930143831139863,0.02899068100985543,0.029381620728643178,0.01469738083576359,0.03714884070124856,0.02296461478966972,0.003359192680774432;0.012408990037657504,0.016652252155150756,0.013948749755613297,0.014404616197853876,0.015143876320605688,0.016429875714793846,0.01222082082062239,0.013799864244641451,0.013491045568782558,0.01541912693820606,0.01616645716213876,0.020442726537214136,0.03213325808714282,0.018530643029264653,1.4052470184492545,0.01853361292016934,0.011114153162872053,0.016908954101940776,0.12841408539790442,0.01293496883941063,0.010537983894707476,0.009322488535817335,0.054895099543113925,0.07000378600771473,0.0763450236715133,0.029571477136028795,0.010658857722609914,0.005644363559925642,0.004181517556832777,0.010174909160523974,0.030746820582762,0.005346421073869164,0.007586338814104141,0.011359973439985946,0.0018021803076449497;0.002307477093510789,0.00338884156512838,0.0038377253906163554,0.010043019291073926,0.007066836226514479,0.010901601593610978,0.00693834042756135,0.003057944545435496,0.00513663185711842,0.006167018739308364,0.006774348028080726,0.013760278327216154,0.009159458182412362,0.0073604971783273136,0.011890079495486207,1.0441669569731014,0.0031029212604149546,0.00941181983237775,0.005294472702040334,0.0029623943392605503,0.003209719939013104,0.004725254206863741,0.00378702426067817,0.003668879017775429,0.0036991442797110934,0.003828388213888661,0.0027004869390767285,0.002797292563509394,0.002673384567695092,0.004374524782485977,0.006037445571175471,0.004722360732095463,0.0051523182865914705,0.008110346045191645,0.004324917397201644;0.020960504819412237,0.0355220666397086,0.030866905812704782,0.04113535758204852,0.028630575271544355,0.037468323898462164,0.042281508596899234,0.036946172281379044,0.05479707292195095,0.04852579165091323,0.05995379090703591,0.057041139556558804,0.03486049415335951,0.030645967798795862,0.0343057698341245,0.035309701504790764,1.1203173748247475,0.026117922460173183,0.02308790552290922,0.014126152215865679,0.02154975788176567,0.03710161844266539,0.027866052551803508,0.018773540405833254,0.017982165604561045,0.025865995308459438,0.017244788918817824,0.012045626093348272,0.015080125370639146,0.01520116623820255,0.02538879311492906,0.026046899656252086,0.024950795973538012,0.027269332026671637,0.003513148151996375;0.008531189053007308,0.013256369376038692,0.01064495464449632,0.010731953998422403,0.010307579677908235,0.012919907083033061,0.012252792652793153,0.012184003188653146,0.013423442783023213,0.012523463780841706,0.0161761323963329,0.014785392535484256,0.011945046714512008,0.01137564601554355,0.011447522821549106,0.012252257628694576,0.03521016043459723,1.0457917269509318,0.010946984733969378,0.00944378948555192,0.010820020177777384,0.012696611389294487,0.01707716885333496,0.013398063745270973,0.011338225645218646,0.024491229876854568,0.018240452583860253,0.01166193912221402,0.049549964665233495,0.011536008291834826,0.025504670701306596,0.018466466291157058,0.013319335753850794,0.019507716467475778,0.004172698567706569;0.009488225563125336,0.00878421761227927,0.014479223040846862,0.013775260761624785,0.01711941940684342,0.013969103060705333,0.011541630635360905,0.010387898761259893,0.014040873884680314,0.014230882261611932,0.014651052941458015,0.014465660270739505,0.013192867172733347,0.012317547873134091,0.013914417380223781,0.014468825885976366,0.014243316193680093,0.014599195118771382,1.013867807041512,0.008195821558416189,0.007703341429277549,0.010864415893143794,0.023560716894916883,0.010142587354590081,0.0094032567039095,0.013322043420341849,0.008533164016248155,0.005812392752937167,0.004377671753304054,0.009793173726848384,0.007922382477500153,0.0056787269149778915,0.007518858794681417,0.010853469451566207,0.0010189926270572826;0.0608727074137821,0.04873032175715489,0.11003503199082901,0.10776158412107899,0.1331583016453109,0.10375913264309714,0.09240505833748236,0.07330459426563456,0.09466911825169234,0.09883515721347548,0.0806632293239565,0.09241383023279853,0.09576744056186874,0.09957789061008528,0.10427895724043064,0.10336585787662442,0.04617457334700273,0.08227936075609295,0.06589276394465043,1.0461221397689269,0.027852256652132177,0.0776399098250625,0.04737092693158019,0.05049106742003673,0.048497413413025325,0.04607395679021036,0.02746007064785653,0.017637246475807403,0.014113168871167326,0.029467114692560716,0.040760778781251575,0.02232586982413983,0.051121049958530014,0.0353397532929564,0.005894920304917456;0.029213738489129875,0.02047007743856634,0.052385153134639484,0.05234338458984309,0.07048236304779874,0.04273868431497336,0.03630834324577259,0.029281655123112555,0.04252249556516027,0.043555750360001,0.035945359580622394,0.036578185263885905,0.03704423838945981,0.03549793961743119,0.04441702125161291,0.048445745811080874,0.01909692388921097,0.04628957290888538,0.029769453607431724,0.015869702928222037,1.015304636688849,0.04162756426166015,0.026943641186547167,0.0238865088914449,0.022725113771155544,0.02223027637781701,0.01919686299105217,0.01102471292980659,0.009006842466421439,0.01790283284628902,0.017309121913979125,0.0116370337164047,0.022284461401096637,0.022747182022227246,0.0031437670745873385;0.006087000693940425,0.009463137791800904,0.012136444237451322,0.013519429165449473,0.013771842593063636,0.013440056732659949,0.014940278478166369,0.009393233422857791,0.014621902953683161,0.015230836225345016,0.014295750419542105,0.014718193259315008,0.016275374241596967,0.016572379223394898,0.013693740458200774,0.014232380472713461,0.011022490126525328,0.013638043627225285,0.012986511943298026,0.014724946836718761,0.011186170609711707,1.0168362499792116,0.015149567657738993,0.01726397563413516,0.03392940631165178,0.03251991445658882,0.013150296920145185,0.017167167848780834,0.006198602965844657,0.020334370368166564,0.015560058425222994,0.010856477917869704,0.014280693501020866,0.01825666773590444,0.0011175040303883466;0.027918624395443282,0.04064212726368046,0.04598353040739739,0.04445038304344214,0.048312895061001684,0.05024331656879346,0.03920778795390817,0.05746352262688491,0.043624585758672355,0.04212310421327546,0.05772617101437048,0.04392389170203379,0.034258269841639745,0.02950586840308067,0.037097083564030034,0.04438096588072518,0.04373410046382461,0.03896525105889123,0.02763564073062516,0.02704879851735908,0.01867729818326804,0.026354830667619813,1.0596692459823633,0.056051101268347336,0.030365134455671714,0.04975623685412723,0.019653594380295212,0.01398970323032125,0.007719313357630088,0.015524285257695059,0.021981192037136367,0.01739799007569639,0.019033326949397834,0.020840598974936567,0.004590899004707104;0.005991627094456882,0.008050187358442774,0.009099293417906782,0.00905912929964388,0.011099512219413509,0.014374323141822194,0.006248491128653164,0.011712055289823681,0.0078410056997118,0.007376618366437807,0.010876578182464234,0.01156128734005629,0.006722571887386706,0.005827742048211583,0.007038313223081711,0.007551740885896435,0.005737759773766384,0.007863448683972084,0.003743278754430848,0.0041563446809157086,0.002864196068195783,0.0048747675284371685,0.007090658937901788,1.1362315886700005,0.0069451114097338045,0.008694702929284995,0.002751168238451474,0.0018410610227029374,0.0011942289409200275,0.0025400282678140537,0.003204514331589602,0.002777846275662913,0.0026034951669423453,0.003114714994523929,0.0008298091351834117;0.002729600733984015,0.0044909713593097225,0.0049399678579508015,0.005482568778630601,0.006965063347044617,0.004860048784628444,0.005812917440060029,0.004248052637369731,0.0057786456887419695,0.00572651469699707,0.004762673054657628,0.005122192912576524,0.005545802048635041,0.005943621938504035,0.006108376748536216,0.005448768625064769,0.003207014667293332,0.004399919849519935,0.00488976745286845,0.00619350599894016,0.0036683103282028843,0.003875729027345046,0.005448450346423763,0.010507958884370287,1.041236987227053,0.02626429570706417,0.007939806734169602,0.006072863524607899,0.0018205389741305167,0.00702122863700672,0.006884639734699641,0.0035487102975410426,0.003550042127058408,0.006822891111726704,0.0004712866143705065;0.011614861943311752,0.01590597025330113,0.02034760227009317,0.01781245941349963,0.02072667656622786,0.021957417967848454,0.02023381952931514,0.021435702642809567,0.018918711131158415,0.01867801403876983,0.02262279622734583,0.01969395311387817,0.017298473149189624,0.016036041592692077,0.0189120733735512,0.018773465663141784,0.014068519233902184,0.01582951049926982,0.017230710645095255,0.027174484781383762,0.016794180534836,0.018427543604690053,0.05284218487509261,0.17790488611771074,0.12499368746563261,1.145833434835114,0.010241660422468072,0.010010089295817952,0.004009595579919098,0.011815421188752371,0.011351341178745526,0.007126225904502382,0.010081078428654118,0.013425995667319614,0.001679120929749613;0.010443312899397256,0.01578490951459918,0.017985629546364453,0.019470879173537813,0.021021480981820967,0.018978639121173202,0.027812506703735827,0.01617727531613617,0.022652809682821233,0.02131884649668709,0.019215147757945323,0.02090690649810343,0.022469946299277378,0.022659205844540453,0.020318842015881557,0.023216998607639948,0.016220904401021752,0.02341956952879684,0.02366329495513805,0.02912687193721614,0.02878441616758127,0.023506215089205865,0.028025713883076765,0.03861361689903481,0.04961749196312268,0.040555729351740004,1.1182725367228146,0.039958039789946845,0.010875633872295582,0.03440347175649574,0.02891151359891023,0.015103750281965369,0.021411435713194316,0.03569348044869698,0.0019010484763394857;0.04607706100199506,0.06248246671288326,0.06029500755876519,0.0697239532169646,0.06592230398832248,0.06636381868446366,0.06470168916297533,0.05900015461109749,0.06671700738063512,0.06432845545355609,0.06540336140433319,0.06812530462209083,0.064943288291136,0.060539370216977945,0.06262957290404166,0.06889772611475661,0.056549978944493845,0.062124266024071034,0.05974713344214427,0.06898532849421717,0.06247123983202399,0.058833680900193,0.0802571443396589,0.08838821667530754,0.08360536626248283,0.06482054611838509,0.050784059681111805,1.2403261052337822,0.07971247236680275,0.06848783502221947,0.05129087144488139,0.031090453181068633,0.05173869538616772,0.06669161357593904,0.010693536821074514;0.016888363512748764,0.01581252281623477,0.021790438436882813,0.023164087115227834,0.02520335873948858,0.022417988667149162,0.025673789994055184,0.017325480126005266,0.021958770214191906,0.02308714200603288,0.02050464099589484,0.022177759401629017,0.02313829736920142,0.02222863868811711,0.02245903886916402,0.026513333480027036,0.017353975446762884,0.02821546196096494,0.03738898616872377,0.03797810817865386,0.052640853381032277,0.04088789630150324,0.024007887966985133,0.04242978685831787,0.03384678886761575,0.03805764948765382,0.0243574535915071,0.038373962802499995,1.0387271508860516,0.03637083844585398,0.022928092824964243,0.024741286250269372,0.042673193083208535,0.04265573500440056,0.0025647455607859665;0.05007917668897819,0.07431682691153661,0.10194194482230234,0.09817109296989877,0.09872535650661549,0.08702289262103348,0.13512451962737176,0.0760300808863698,0.14310897625044358,0.11441598828041297,0.09522358235246185,0.09920310959900047,0.11776589555672357,0.14169460114760196,0.12380435912297699,0.11164950706593925,0.08676193860176445,0.12104924347476545,0.0991554938115109,0.09639507870245889,0.10429127665122657,0.08719863353424843,0.09316673452790554,0.11904400819388603,0.1724352367247316,0.13262058826838186,0.12216319065076267,0.15008210687291665,0.06595459951185191,1.1903905575029168,0.10422411545714527,0.05436466339052218,0.10231278876191614,0.12122252670492899,0.008291137439201846;0.003623104379616985,0.005385432343360328,0.005098722841981224,0.004384583697926499,0.004217577668670121,0.006973241474542157,0.006605079990711031,0.004697862571633753,0.0069206808371490396,0.005918171302059665,0.005546204955337233,0.006338320698246574,0.004611932211630953,0.0047475052696947925,0.004892595652025841,0.005951987375473289,0.008795701097392028,0.004505327683782769,0.004405309912744067,0.0032978041359832864,0.0050949410596423704,0.005998496631604401,0.005369914457836693,0.011892318222367125,0.01320185476198734,0.006456642658871051,0.004845125579007167,0.003480992025300269,0.004450354918064755,0.004773573222935437,1.0096659505475922,0.005144796125672195,0.00732552624420857,0.01013319266514294,0.0005205584330067945;0.0015441602828131827,0.0012606639970201663,0.0015933702398407473,0.0015155421510044196,0.0016239642773796148,0.0013875402405035407,0.0017742237843822225,0.0014748205729067509,0.0020895421744090838,0.0017461588659542506,0.0015381611750371316,0.0016390683472177873,0.001969821630018431,0.002273852587139517,0.0018200157225905502,0.0014861579776690181,0.0019514059797719027,0.0015054268615927826,0.001336063631388961,0.001500402227899838,0.002513463587023473,0.0013053145974444358,0.0019575472716705337,0.0014874249274007985,0.002897816462251305,0.0020975141848019367,0.0024248652116213728,0.0021877074375386183,0.0006270167246764661,0.0029600906725650794,0.00517126161231315,1.0068973235891876,0.0017967124656536656,0.002268346690159915,0.0001440492273308065;0.0027004818292040685,0.0009099667237679788,0.00177150554609279,0.0013377845643786285,0.0017423654269218547,0.0014613334640583694,0.0012266807539051527,0.0009291637920598744,0.0012706770111995096,0.0012029568293345778,0.001120151741406524,0.0011706464200975568,0.0013360566646365359,0.0012240575614341632,0.001166042032381291,0.0013171899139352466,0.0009704161269068791,0.0012343328857444854,0.001107291590976699,0.0010733598918462658,0.0008700300424767521,0.001792029949764657,0.0013383587598905003,0.001266929747287679,0.0013111804751735252,0.0013877928759540145,0.0011812213393486582,0.0011271528166080205,0.0003889795718524722,0.001313664756947185,0.006917498391895148,0.00180368707448179,1.0235385637846994,0.0022896971791204613,0.00012839983614664423;0.00993781122868783,0.015140282280686285,0.019284809266022697,0.01905444882673419,0.021491825140179326,0.018928152399337136,0.030714886843157513,0.01606439173981445,0.024298092680355078,0.02131528283682041,0.018812984697729237,0.022316806808506194,0.021453529925953906,0.021236487601638068,0.01992647411653753,0.02180085555965929,0.016348775698477633,0.019809534820619035,0.020300148659722076,0.01761025838575726,0.01920551639590431,0.02428755425998947,0.0199686616484295,0.020942555435582728,0.024282372450377444,0.025057859009875477,0.03128366730721081,0.02248704855111742,0.014210869600517127,0.041588820375108845,0.025881129917198018,0.01746473279714905,0.02584751605336649,1.0950294387218207,0.0021393933600058366;5.248617162548418e-05,5.6649356340356994e-05,9.925610964339342e-05,0.00011474571710546642,0.0001056290291563504,0.00010993176151662983,0.00011207239963871995,6.509331724310954e-05,0.0001084698060873786,0.00011401773711853855,8.811730322111876e-05,0.00010568644897407411,0.00010210365838291791,8.818924150149871e-05,0.00011987300596360631,0.00011986850153941982,6.487321167751188e-05,0.00017063224865747088,0.00019125981569753352,8.22296070084952e-05,0.0001065930763706504,0.000132987373867023,0.0002271162442859364,9.880174223501576e-05,0.00010593271296619216,0.000103438127274289,0.00014572566020203332,0.00013257692443254408,0.0003381330283978037,0.00014087495576183237,0.00014986844185943592,8.52774376011469e-05,0.0002115103279664666,0.00019588292523935673,1.000033597019623;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            1.17610288e+00, 8.15580396e-03, 3.71439005e-01, 7.34348506e-02, 9.46030156e-02,
            2.04951637e-01, 2.85184471e-02, 1.06335145e-02, 2.22395797e-02, 3.08540870e-02,
            1.03476559e-02, 7.89188645e-03, 8.39276860e-03, 8.17743569e-03, 9.22773982e-03,
            3.87795393e-02, 5.51588011e-03, 1.91936747e-02, 6.32414150e-03, 8.85957779e-03,
            8.40883775e-03, 1.08345701e-01, 6.77118074e-03, 1.18834931e-02, 9.77285521e-03,
            1.15349869e-02, 5.03350774e-03, 4.59739931e-03, 3.63654695e-03, 7.03211476e-03,
            1.03023863e-02, 9.16830208e-03, 1.37347173e-02, 1.13859420e-02, 2.02250296e-02
        ],
              [
                  2.16113439e-02, 1.11040090e+00, 2.35899462e-02, 2.55476001e-02, 2.14299018e-02,
                  2.74811163e-02, 2.58051465e-02, 4.84111069e-01, 8.56942499e-02, 4.03213470e-02,
                  1.21823897e-01, 8.94856413e-02, 3.31349534e-02, 2.56043331e-02, 2.96537905e-02,
                  3.57762146e-02, 1.34219812e-01, 5.48593740e-02, 1.50206497e-02, 1.10857860e-02,
                  1.03875275e-02, 1.67263973e-02, 4.12172195e-02, 4.52222033e-02, 3.98178835e-02,
                  2.30090939e-02, 9.84389233e-03, 6.35321111e-03, 9.50619699e-03, 1.02106143e-02,
                  1.59179080e-02, 1.21705716e-02, 1.57894179e-02, 1.59016675e-02, 7.56532803e-02
              ],
              [
                  7.70565013e-02, 5.11248552e-03, 1.19158081e+00, 1.56342493e-02, 1.32896439e-01,
                  2.03304446e-02, 1.19126478e-02, 6.40607691e-03, 2.14617749e-02, 1.39551107e-02,
                  8.78414542e-03, 7.65763806e-03, 8.27088130e-03, 8.37208136e-03, 8.07547538e-03,
                  1.12088501e-02, 5.20771030e-03, 7.97476749e-03, 7.01956088e-03, 1.02246555e-02,
                  8.99546633e-03, 1.95432315e-01, 7.25081062e-03, 1.69024442e-02, 1.50255539e-02,
                  1.20465808e-02, 6.21209640e-03, 5.91144815e-03, 2.55046392e-03, 8.31619002e-03,
                  1.48297226e-02, 1.42913024e-02, 2.30562681e-02, 1.33640351e-02, 3.33094456e-03
              ],
              [
                  6.30386033e-03, 5.07275782e-03, 7.52838563e-03, 1.38586020e+00, 9.93475762e-02,
                  1.42429026e-02, 1.68144002e-02, 4.63732325e-03, 1.17455489e-02, 3.53485358e-02,
                  1.21657229e-02, 7.41077720e-03, 9.25205953e-03, 8.68236655e-03, 1.80580380e-02,
                  4.42211827e-02, 3.49282772e-03, 8.94543262e-03, 6.86192894e-03, 6.18446620e-03,
                  6.90326380e-03, 7.52251912e-03, 5.70115222e-03, 8.10664131e-03, 5.48598294e-03,
                  5.99916547e-03, 7.05123207e-03, 2.91828503e-03, 1.77281572e-03, 4.34084470e-03,
                  7.85153982e-03, 2.96807240e-03, 8.05129957e-03, 1.04028242e-02, 1.45530549e-03
              ],
              [
                  6.63817616e-04, 7.24022744e-04, 9.38415987e-04, 1.18136744e-02, 1.23641801e+00,
                  2.15224956e-03, 2.70291984e-03, 6.82291956e-04, 1.06863188e-03, 2.50073787e-03,
                  1.52842312e-03, 1.32838674e-03, 1.38660211e-03, 1.25992202e-03, 3.09189592e-03,
                  5.45283117e-03, 6.01963153e-04, 9.56435023e-04, 1.18999537e-03, 9.56288319e-04,
                  9.69986000e-04, 7.52507428e-04, 7.23193718e-04, 8.32276564e-04, 7.32286723e-04,
                  6.94149063e-04, 1.26644492e-03, 3.61030447e-04, 1.99095676e-04, 5.48364625e-04,
                  1.58682406e-03, 4.27919161e-04, 6.22339422e-04, 1.38790339e-03, 1.18162181e-04
              ],
              [
                  4.44112703e-03, 5.31146671e-03, 6.22787485e-03, 6.29660996e-03, 7.22896348e-03,
                  1.24859670e+00, 2.05504246e-02, 4.17179903e-03, 6.09439964e-03, 8.00044157e-03,
                  1.29205399e-02, 9.06714442e-03, 8.77641308e-03, 6.95692948e-03, 9.87411990e-03,
                  9.95469164e-02, 4.51656609e-03, 4.71972335e-02, 4.27024444e-03, 4.19405361e-03,
                  4.07210357e-03, 5.92463410e-03, 4.67726400e-03, 4.46526366e-03, 3.95330307e-03,
                  8.86956431e-03, 3.44144946e-03, 2.84093449e-03, 6.01716170e-03, 3.72225025e-03,
                  5.04799325e-03, 4.22738496e-03, 4.01291243e-03, 6.96058666e-03, 1.40536738e-03
              ],
              [
                  1.58303223e-02, 1.51977209e-02, 5.29752805e-02, 3.57327401e-02, 4.31519931e-02,
                  3.63577635e-02, 1.32023862e+00, 1.60573919e-02, 4.83883714e-02, 4.93831944e-02,
                  4.84607991e-02, 2.67778336e-02, 3.35472064e-02, 4.24942120e-02, 3.14227425e-02,
                  5.15467355e-02, 1.58354825e-02, 2.63671423e-02, 2.41663390e-02, 2.91297442e-02,
                  2.80142766e-02, 3.10495258e-02, 2.10533358e-02, 2.27548848e-02, 2.69730026e-02,
                  3.65554799e-02, 2.81330162e-02, 3.35022208e-02, 1.06004832e-02, 4.22913151e-02,
                  3.34988284e-02, 2.92687021e-02, 2.65999554e-02, 4.79722380e-02, 2.90663072e-03
              ],
              [
                  2.16024949e-02, 2.31455969e-02, 1.84529153e-02, 1.88058266e-02, 1.70970287e-02,
                  1.93743603e-02, 1.60826727e-02, 1.06435518e+00, 4.59385048e-02, 2.68857920e-02,
                  3.10696599e-02, 2.47469228e-02, 1.59434283e-02, 1.40355660e-02, 1.49486645e-02,
                  1.82162496e-02, 3.01411371e-02, 2.58953224e-02, 1.18184528e-02, 1.15096198e-02,
                  9.77546276e-03, 1.22179266e-02, 6.23986199e-02, 7.52731736e-02, 6.78087262e-02,
                  2.66689213e-02, 9.21182100e-03, 5.57573838e-03, 4.82171604e-03, 9.87993159e-03,
                  1.40206453e-02, 7.22213612e-03, 1.11027909e-02, 1.33595648e-02, 2.33148487e-03
              ],
              [
                  7.18350621e-02, 3.22029341e-02, 5.38654555e-02, 1.44392152e-01, 9.43628966e-02,
                  7.14620505e-02, 7.72264126e-02, 4.09287050e-02, 1.31954947e+00, 3.10213429e-01,
                  6.46094056e-02, 4.77036110e-02, 4.90646260e-02, 5.82624001e-02, 5.99081954e-02,
                  8.45736213e-02, 2.11181753e-02, 4.14660846e-02, 2.88229643e-02, 1.40198046e-02,
                  1.25589964e-02, 2.51232953e-02, 1.97873040e-02, 1.96086035e-02, 1.79308012e-02,
                  1.92775437e-02, 1.23875898e-02, 8.25663898e-03, 7.94186715e-03, 1.58388875e-02,
                  2.31055399e-02, 1.18193910e-02, 9.68588753e-02, 2.51767750e-02, 4.38437513e-03
              ],
              [
                  1.30643488e-02, 1.75901879e-02, 2.99993388e-02, 2.39459936e-02, 5.96375301e-02,
                  2.40897627e-02, 2.97040880e-02, 1.38463909e-02, 3.59405791e-02, 1.14156456e+00,
                  2.44969963e-02, 2.27578225e-02, 4.76353753e-02, 4.91349660e-02, 7.03389839e-02,
                  6.15711502e-02, 1.04131519e-02, 3.30794552e-02, 3.29590687e-02, 1.02175803e-02,
                  1.04055900e-02, 1.40879072e-02, 2.13636354e-02, 1.38104061e-02, 1.29308141e-02,
                  1.56581558e-02, 1.04338915e-02, 4.71400765e-03, 4.70207975e-03, 8.32913263e-03,
                  1.05625207e-02, 4.98444326e-03, 1.40201733e-02, 1.04415280e-02, 2.05146348e-03
              ],
              [
                  5.69235663e-03, 9.94182718e-03, 1.16557875e-02, 7.55993270e-03, 7.74091090e-03,
                  1.75273295e-02, 6.33728150e-03, 8.55480589e-03, 1.39816693e-02, 1.41663156e-02,
                  1.12873672e+00, 2.08878377e-02, 1.54264412e-02, 2.25471746e-02, 1.86616299e-02,
                  1.59198932e-02, 8.29469087e-03, 9.68763310e-02, 8.26605207e-03, 4.15447859e-03,
                  3.68864547e-03, 8.44903789e-03, 5.77123244e-03, 5.24594285e-03, 4.84281806e-03,
                  6.42544436e-03, 4.98965136e-03, 2.49998491e-03, 7.93728953e-03, 3.97236722e-03,
                  6.12731530e-03, 4.73238839e-03, 6.15820266e-03, 5.97139610e-03, 1.27880387e-03
              ],
              [
                  2.39433128e-02, 6.00461667e-02, 4.66366045e-02, 3.46579924e-02, 4.35001449e-02,
                  7.36254307e-02, 3.92506014e-02, 4.51458888e-02, 5.75733838e-02, 7.01497816e-02,
                  8.06576396e-02, 1.49046477e+00, 2.97069533e-01, 1.67388582e-01, 2.46484798e-01,
                  2.11790184e-01, 3.63795506e-02, 1.62081357e-01, 6.99404608e-02, 1.95876186e-02,
                  1.76270011e-02, 2.52372356e-02, 3.64649728e-02, 4.35519070e-02, 3.97197233e-02,
                  3.20238474e-02, 2.32841089e-02, 1.05921468e-02, 1.66813243e-02, 1.86640475e-02,
                  2.81724318e-02, 1.35398855e-02, 2.12317423e-02, 2.33640082e-02, 6.68909997e-03
              ],
              [
                  1.39519958e-02, 2.86504738e-02, 1.44030082e-02, 1.74019431e-02, 1.58776916e-02,
                  2.10419409e-02, 1.69772425e-02, 2.08558853e-02, 1.96460848e-02, 2.30827387e-02,
                  2.61287692e-02, 3.48110445e-02, 1.14047873e+00, 3.08761621e-02, 5.63104061e-02,
                  2.36685051e-02, 1.77031654e-02, 2.98159796e-02, 3.46722088e-02, 8.56606171e-03,
                  7.24654126e-03, 8.76007932e-03, 1.52923734e-02, 1.62715561e-02, 1.33800021e-02,
                  1.27021895e-02, 8.34435120e-03, 4.72389362e-03, 4.95616052e-03, 7.61023186e-03,
                  1.27744532e-02, 5.81460951e-03, 8.04030732e-03, 9.19165684e-03, 2.69394459e-03
              ],
              [
                  1.19038461e-02, 2.36495959e-02, 1.95141485e-02, 2.37565175e-02, 2.24888593e-02,
                  2.73006855e-02, 3.09647243e-02, 2.13104095e-02, 3.22596757e-02, 3.82171161e-02,
                  3.00596305e-02, 4.79448970e-02, 1.32830835e-01, 1.36278129e+00, 1.18288560e-01,
                  5.10665376e-02, 3.12294641e-02, 5.72430534e-02, 5.43966337e-02, 2.13267740e-02,
                  1.96371440e-02, 1.70002487e-02, 2.40063927e-02, 2.35467106e-02, 2.42652115e-02,
                  2.42901984e-02, 5.56595650e-02, 1.42490695e-02, 9.30143831e-03, 2.89906810e-02,
                  2.93816207e-02, 1.46973808e-02, 3.71488407e-02, 2.29646148e-02, 3.35919268e-03
              ],
              [
                  1.24089900e-02, 1.66522522e-02, 1.39487498e-02, 1.44046162e-02, 1.51438763e-02,
                  1.64298757e-02, 1.22208208e-02, 1.37998642e-02, 1.34910456e-02, 1.54191269e-02,
                  1.61664572e-02, 2.04427265e-02, 3.21332581e-02, 1.85306430e-02, 1.40524702e+00,
                  1.85336129e-02, 1.11141532e-02, 1.69089541e-02, 1.28414085e-01, 1.29349688e-02,
                  1.05379839e-02, 9.32248854e-03, 5.48950995e-02, 7.00037860e-02, 7.63450237e-02,
                  2.95714771e-02, 1.06588577e-02, 5.64436356e-03, 4.18151756e-03, 1.01749092e-02,
                  3.07468206e-02, 5.34642107e-03, 7.58633881e-03, 1.13599734e-02, 1.80218031e-03
              ],
              [
                  2.30747709e-03, 3.38884157e-03, 3.83772539e-03, 1.00430193e-02, 7.06683623e-03,
                  1.09016016e-02, 6.93834043e-03, 3.05794455e-03, 5.13663186e-03, 6.16701874e-03,
                  6.77434803e-03, 1.37602783e-02, 9.15945818e-03, 7.36049718e-03, 1.18900795e-02,
                  1.04416696e+00, 3.10292126e-03, 9.41181983e-03, 5.29447270e-03, 2.96239434e-03,
                  3.20971994e-03, 4.72525421e-03, 3.78702426e-03, 3.66887902e-03, 3.69914428e-03,
                  3.82838821e-03, 2.70048694e-03, 2.79729256e-03, 2.67338457e-03, 4.37452478e-03,
                  6.03744557e-03, 4.72236073e-03, 5.15231829e-03, 8.11034605e-03, 4.32491740e-03
              ],
              [
                  2.09605048e-02, 3.55220666e-02, 3.08669058e-02, 4.11353576e-02, 2.86305753e-02,
                  3.74683239e-02, 4.22815086e-02, 3.69461723e-02, 5.47970729e-02, 4.85257917e-02,
                  5.99537909e-02, 5.70411396e-02, 3.48604942e-02, 3.06459678e-02, 3.43057698e-02,
                  3.53097015e-02, 1.12031737e+00, 2.61179225e-02, 2.30879055e-02, 1.41261522e-02,
                  2.15497579e-02, 3.71016184e-02, 2.78660526e-02, 1.87735404e-02, 1.79821656e-02,
                  2.58659953e-02, 1.72447889e-02, 1.20456261e-02, 1.50801254e-02, 1.52011662e-02,
                  2.53887931e-02, 2.60468997e-02, 2.49507960e-02, 2.72693320e-02, 3.51314815e-03
              ],
              [
                  8.53118905e-03, 1.32563694e-02, 1.06449546e-02, 1.07319540e-02, 1.03075797e-02,
                  1.29199071e-02, 1.22527927e-02, 1.21840032e-02, 1.34234428e-02, 1.25234638e-02,
                  1.61761324e-02, 1.47853925e-02, 1.19450467e-02, 1.13756460e-02, 1.14475228e-02,
                  1.22522576e-02, 3.52101604e-02, 1.04579173e+00, 1.09469847e-02, 9.44378949e-03,
                  1.08200202e-02, 1.26966114e-02, 1.70771689e-02, 1.33980637e-02, 1.13382256e-02,
                  2.44912299e-02, 1.82404526e-02, 1.16619391e-02, 4.95499647e-02, 1.15360083e-02,
                  2.55046707e-02, 1.84664663e-02, 1.33193358e-02, 1.95077165e-02, 4.17269857e-03
              ],
              [
                  9.48822556e-03, 8.78421761e-03, 1.44792230e-02, 1.37752608e-02, 1.71194194e-02,
                  1.39691031e-02, 1.15416306e-02, 1.03878988e-02, 1.40408739e-02, 1.42308823e-02,
                  1.46510529e-02, 1.44656603e-02, 1.31928672e-02, 1.23175479e-02, 1.39144174e-02,
                  1.44688259e-02, 1.42433162e-02, 1.45991951e-02, 1.01386781e+00, 8.19582156e-03,
                  7.70334143e-03, 1.08644159e-02, 2.35607169e-02, 1.01425874e-02, 9.40325670e-03,
                  1.33220434e-02, 8.53316402e-03, 5.81239275e-03, 4.37767175e-03, 9.79317373e-03,
                  7.92238248e-03, 5.67872691e-03, 7.51885879e-03, 1.08534695e-02, 1.01899263e-03
              ],
              [
                  6.08727074e-02, 4.87303218e-02, 1.10035032e-01, 1.07761584e-01, 1.33158302e-01,
                  1.03759133e-01, 9.24050583e-02, 7.33045943e-02, 9.46691183e-02, 9.88351572e-02,
                  8.06632293e-02, 9.24138302e-02, 9.57674406e-02, 9.95778906e-02, 1.04278957e-01,
                  1.03365858e-01, 4.61745733e-02, 8.22793608e-02, 6.58927639e-02, 1.04612214e+00,
                  2.78522567e-02, 7.76399098e-02, 4.73709269e-02, 5.04910674e-02, 4.84974134e-02,
                  4.60739568e-02, 2.74600706e-02, 1.76372465e-02, 1.41131689e-02, 2.94671147e-02,
                  4.07607788e-02, 2.23258698e-02, 5.11210500e-02, 3.53397533e-02, 5.89492030e-03
              ],
              [
                  2.92137385e-02, 2.04700774e-02, 5.23851531e-02, 5.23433846e-02, 7.04823630e-02,
                  4.27386843e-02, 3.63083432e-02, 2.92816551e-02, 4.25224956e-02, 4.35557504e-02,
                  3.59453596e-02, 3.65781853e-02, 3.70442384e-02, 3.54979396e-02, 4.44170213e-02,
                  4.84457458e-02, 1.90969239e-02, 4.62895729e-02, 2.97694536e-02, 1.58697029e-02,
                  1.01530464e+00, 4.16275643e-02, 2.69436412e-02, 2.38865089e-02, 2.27251138e-02,
                  2.22302764e-02, 1.91968630e-02, 1.10247129e-02, 9.00684247e-03, 1.79028328e-02,
                  1.73091219e-02, 1.16370337e-02, 2.22844614e-02, 2.27471820e-02, 3.14376707e-03
              ],
              [
                  6.08700069e-03, 9.46313779e-03, 1.21364442e-02, 1.35194292e-02, 1.37718426e-02,
                  1.34400567e-02, 1.49402785e-02, 9.39323342e-03, 1.46219030e-02, 1.52308362e-02,
                  1.42957504e-02, 1.47181933e-02, 1.62753742e-02, 1.65723792e-02, 1.36937405e-02,
                  1.42323805e-02, 1.10224901e-02, 1.36380436e-02, 1.29865119e-02, 1.47249468e-02,
                  1.11861706e-02, 1.01683625e+00, 1.51495677e-02, 1.72639756e-02, 3.39294063e-02,
                  3.25199145e-02, 1.31502969e-02, 1.71671678e-02, 6.19860297e-03, 2.03343704e-02,
                  1.55600584e-02, 1.08564779e-02, 1.42806935e-02, 1.82566677e-02, 1.11750403e-03
              ],
              [
                  2.79186244e-02, 4.06421273e-02, 4.59835304e-02, 4.44503830e-02, 4.83128951e-02,
                  5.02433166e-02, 3.92077880e-02, 5.74635226e-02, 4.36245858e-02, 4.21231042e-02,
                  5.77261710e-02, 4.39238917e-02, 3.42582698e-02, 2.95058684e-02, 3.70970836e-02,
                  4.43809659e-02, 4.37341005e-02, 3.89652511e-02, 2.76356407e-02, 2.70487985e-02,
                  1.86772982e-02, 2.63548307e-02, 1.05966925e+00, 5.60511013e-02, 3.03651345e-02,
                  4.97562369e-02, 1.96535944e-02, 1.39897032e-02, 7.71931336e-03, 1.55242853e-02,
                  2.19811920e-02, 1.73979901e-02, 1.90333269e-02, 2.08405990e-02, 4.59089900e-03
              ],
              [
                  5.99162709e-03, 8.05018736e-03, 9.09929342e-03, 9.05912930e-03, 1.10995122e-02,
                  1.43743231e-02, 6.24849113e-03, 1.17120553e-02, 7.84100570e-03, 7.37661837e-03,
                  1.08765782e-02, 1.15612873e-02, 6.72257189e-03, 5.82774205e-03, 7.03831322e-03,
                  7.55174089e-03, 5.73775977e-03, 7.86344868e-03, 3.74327875e-03, 4.15634468e-03,
                  2.86419607e-03, 4.87476753e-03, 7.09065894e-03, 1.13623159e+00, 6.94511141e-03,
                  8.69470293e-03, 2.75116824e-03, 1.84106102e-03, 1.19422894e-03, 2.54002827e-03,
                  3.20451433e-03, 2.77784628e-03, 2.60349517e-03, 3.11471499e-03, 8.29809135e-04
              ],
              [
                  2.72960073e-03, 4.49097136e-03, 4.93996786e-03, 5.48256878e-03, 6.96506335e-03,
                  4.86004878e-03, 5.81291744e-03, 4.24805264e-03, 5.77864569e-03, 5.72651470e-03,
                  4.76267305e-03, 5.12219291e-03, 5.54580205e-03, 5.94362194e-03, 6.10837675e-03,
                  5.44876863e-03, 3.20701467e-03, 4.39991985e-03, 4.88976745e-03, 6.19350600e-03,
                  3.66831033e-03, 3.87572903e-03, 5.44845035e-03, 1.05079589e-02, 1.04123699e+00,
                  2.62642957e-02, 7.93980673e-03, 6.07286352e-03, 1.82053897e-03, 7.02122864e-03,
                  6.88463973e-03, 3.54871030e-03, 3.55004213e-03, 6.82289111e-03, 4.71286614e-04
              ],
              [
                  1.16148619e-02, 1.59059703e-02, 2.03476023e-02, 1.78124594e-02, 2.07266766e-02,
                  2.19574180e-02, 2.02338195e-02, 2.14357026e-02, 1.89187111e-02, 1.86780140e-02,
                  2.26227962e-02, 1.96939531e-02, 1.72984731e-02, 1.60360416e-02, 1.89120734e-02,
                  1.87734657e-02, 1.40685192e-02, 1.58295105e-02, 1.72307106e-02, 2.71744848e-02,
                  1.67941805e-02, 1.84275436e-02, 5.28421849e-02, 1.77904886e-01, 1.24993687e-01,
                  1.14583343e+00, 1.02416604e-02, 1.00100893e-02, 4.00959558e-03, 1.18154212e-02,
                  1.13513412e-02, 7.12622590e-03, 1.00810784e-02, 1.34259957e-02, 1.67912093e-03
              ],
              [
                  1.04433129e-02, 1.57849095e-02, 1.79856295e-02, 1.94708792e-02, 2.10214810e-02,
                  1.89786391e-02, 2.78125067e-02, 1.61772753e-02, 2.26528097e-02, 2.13188465e-02,
                  1.92151478e-02, 2.09069065e-02, 2.24699463e-02, 2.26592058e-02, 2.03188420e-02,
                  2.32169986e-02, 1.62209044e-02, 2.34195695e-02, 2.36632950e-02, 2.91268719e-02,
                  2.87844162e-02, 2.35062151e-02, 2.80257139e-02, 3.86136169e-02, 4.96174920e-02,
                  4.05557294e-02, 1.11827254e+00, 3.99580398e-02, 1.08756339e-02, 3.44034718e-02,
                  2.89115136e-02, 1.51037503e-02, 2.14114357e-02, 3.56934804e-02, 1.90104848e-03
              ],
              [
                  4.60770610e-02, 6.24824667e-02, 6.02950076e-02, 6.97239532e-02, 6.59223040e-02,
                  6.63638187e-02, 6.47016892e-02, 5.90001546e-02, 6.67170074e-02, 6.43284555e-02,
                  6.54033614e-02, 6.81253046e-02, 6.49432883e-02, 6.05393702e-02, 6.26295729e-02,
                  6.88977261e-02, 5.65499789e-02, 6.21242660e-02, 5.97471334e-02, 6.89853285e-02,
                  6.24712398e-02, 5.88336809e-02, 8.02571443e-02, 8.83882167e-02, 8.36053663e-02,
                  6.48205461e-02, 5.07840597e-02, 1.24032611e+00, 7.97124724e-02, 6.84878350e-02,
                  5.12908714e-02, 3.10904532e-02, 5.17386954e-02, 6.66916136e-02, 1.06935368e-02
              ],
              [
                  1.68883635e-02, 1.58125228e-02, 2.17904384e-02, 2.31640871e-02, 2.52033587e-02,
                  2.24179887e-02, 2.56737900e-02, 1.73254801e-02, 2.19587702e-02, 2.30871420e-02,
                  2.05046410e-02, 2.21777594e-02, 2.31382974e-02, 2.22286387e-02, 2.24590389e-02,
                  2.65133335e-02, 1.73539754e-02, 2.82154620e-02, 3.73889862e-02, 3.79781082e-02,
                  5.26408534e-02, 4.08878963e-02, 2.40078880e-02, 4.24297869e-02, 3.38467889e-02,
                  3.80576495e-02, 2.43574536e-02, 3.83739628e-02, 1.03872715e+00, 3.63708384e-02,
                  2.29280928e-02, 2.47412863e-02, 4.26731931e-02, 4.26557350e-02, 2.56474556e-03
              ],
              [
                  5.00791767e-02, 7.43168269e-02, 1.01941945e-01, 9.81710930e-02, 9.87253565e-02,
                  8.70228926e-02, 1.35124520e-01, 7.60300809e-02, 1.43108976e-01, 1.14415988e-01,
                  9.52235824e-02, 9.92031096e-02, 1.17765896e-01, 1.41694601e-01, 1.23804359e-01,
                  1.11649507e-01, 8.67619386e-02, 1.21049243e-01, 9.91554938e-02, 9.63950787e-02,
                  1.04291277e-01, 8.71986335e-02, 9.31667345e-02, 1.19044008e-01, 1.72435237e-01,
                  1.32620588e-01, 1.22163191e-01, 1.50082107e-01, 6.59545995e-02, 1.19039056e+00,
                  1.04224115e-01, 5.43646634e-02, 1.02312789e-01, 1.21222527e-01, 8.29113744e-03
              ],
              [
                  3.62310438e-03, 5.38543234e-03, 5.09872284e-03, 4.38458370e-03, 4.21757767e-03,
                  6.97324147e-03, 6.60507999e-03, 4.69786257e-03, 6.92068084e-03, 5.91817130e-03,
                  5.54620496e-03, 6.33832070e-03, 4.61193221e-03, 4.74750527e-03, 4.89259565e-03,
                  5.95198738e-03, 8.79570110e-03, 4.50532768e-03, 4.40530991e-03, 3.29780414e-03,
                  5.09494106e-03, 5.99849663e-03, 5.36991446e-03, 1.18923182e-02, 1.32018548e-02,
                  6.45664266e-03, 4.84512558e-03, 3.48099203e-03, 4.45035492e-03, 4.77357322e-03,
                  1.00966595e+00, 5.14479613e-03, 7.32552624e-03, 1.01331927e-02, 5.20558433e-04
              ],
              [
                  1.54416028e-03, 1.26066400e-03, 1.59337024e-03, 1.51554215e-03, 1.62396428e-03,
                  1.38754024e-03, 1.77422378e-03, 1.47482057e-03, 2.08954217e-03, 1.74615887e-03,
                  1.53816118e-03, 1.63906835e-03, 1.96982163e-03, 2.27385259e-03, 1.82001572e-03,
                  1.48615798e-03, 1.95140598e-03, 1.50542686e-03, 1.33606363e-03, 1.50040223e-03,
                  2.51346359e-03, 1.30531460e-03, 1.95754727e-03, 1.48742493e-03, 2.89781646e-03,
                  2.09751418e-03, 2.42486521e-03, 2.18770744e-03, 6.27016725e-04, 2.96009067e-03,
                  5.17126161e-03, 1.00689732e+00, 1.79671247e-03, 2.26834669e-03, 1.44049227e-04
              ],
              [
                  2.70048183e-03, 9.09966724e-04, 1.77150555e-03, 1.33778456e-03, 1.74236543e-03,
                  1.46133346e-03, 1.22668075e-03, 9.29163792e-04, 1.27067701e-03, 1.20295683e-03,
                  1.12015174e-03, 1.17064642e-03, 1.33605666e-03, 1.22405756e-03, 1.16604203e-03,
                  1.31718991e-03, 9.70416127e-04, 1.23433289e-03, 1.10729159e-03, 1.07335989e-03,
                  8.70030042e-04, 1.79202995e-03, 1.33835876e-03, 1.26692975e-03, 1.31118048e-03,
                  1.38779288e-03, 1.18122134e-03, 1.12715282e-03, 3.88979572e-04, 1.31366476e-03,
                  6.91749839e-03, 1.80368707e-03, 1.02353856e+00, 2.28969718e-03, 1.28399836e-04
              ],
              [
                  9.93781123e-03, 1.51402823e-02, 1.92848093e-02, 1.90544488e-02, 2.14918251e-02,
                  1.89281524e-02, 3.07148868e-02, 1.60643917e-02, 2.42980927e-02, 2.13152828e-02,
                  1.88129847e-02, 2.23168068e-02, 2.14535299e-02, 2.12364876e-02, 1.99264741e-02,
                  2.18008556e-02, 1.63487757e-02, 1.98095348e-02, 2.03001487e-02, 1.76102584e-02,
                  1.92055164e-02, 2.42875543e-02, 1.99686616e-02, 2.09425554e-02, 2.42823725e-02,
                  2.50578590e-02, 3.12836673e-02, 2.24870486e-02, 1.42108696e-02, 4.15888204e-02,
                  2.58811299e-02, 1.74647328e-02, 2.58475161e-02, 1.09502944e+00, 2.13939336e-03
              ],
              [
                  5.24861716e-05, 5.66493563e-05, 9.92561096e-05, 1.14745717e-04, 1.05629029e-04,
                  1.09931762e-04, 1.12072400e-04, 6.50933172e-05, 1.08469806e-04, 1.14017737e-04,
                  8.81173032e-05, 1.05686449e-04, 1.02103658e-04, 8.81892415e-05, 1.19873006e-04,
                  1.19868502e-04, 6.48732117e-05, 1.70632249e-04, 1.91259816e-04, 8.22296070e-05,
                  1.06593076e-04, 1.32987374e-04, 2.27116244e-04, 9.88017422e-05, 1.05932713e-04,
                  1.03438127e-04, 1.45725660e-04, 1.32576924e-04, 3.38133028e-04, 1.40874956e-04,
                  1.49868442e-04, 8.52774376e-05, 2.11510328e-04, 1.95882925e-04, 1.00003360e+00
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def leontief_matrix_1999():
    """
    Real Name: b'leontief matrix 1999'
    Original Eqn: b'1.17714228912472,0.007533590260444917,0.3695082680609464,0.07403678609657886,0.09630992836121983,0.21950626604432402,0.02872815124705875,0.009943426277557755,0.021075307896081995,0.02991651620347397,0.00986152203679108,0.007671122517881011,0.008428261059379927,0.007740646123323831,0.009201298367187508,0.03707716715212925,0.005561073164122386,0.021267645916396762,0.006201046172019203,0.00865934694068913,0.00825433360590394,0.10762211259440066,0.006982782873480286,0.011802553252827953,0.009344582621546301,0.0123639109742682,0.00531136907880548,0.004579263516853514,0.0036953058291218544,0.0068978293218072435,0.01040576808782975,0.009260270788290522,0.013474939858985971,0.011755518098195179,0.02131929581093772;0.022613645495775235,1.1104949944364924,0.024203745813664745,0.027791795464029587,0.02303674327423704,0.028167576137038748,0.02658122377139424,0.5121776067840496,0.08924313793494297,0.04201173729212966,0.11993068338060338,0.09181891008431804,0.034791269333422616,0.02511135585502409,0.030579293341364604,0.03114195240995883,0.14276084965078806,0.055644527596870885,0.015508460267879089,0.01164971534634112,0.011000641647755167,0.017025056566017487,0.04269811390271838,0.05140332265223938,0.04544452954646928,0.02322447609883986,0.01059169194366866,0.006648932513921311,0.009308726874230091,0.010892610779207721,0.016407573608040744,0.013326772291020894,0.016314633099145093,0.015970744805563968,0.07986155339827801;0.07501358494659731,0.0048626940408764115,1.1908392298059982,0.01568722333300044,0.13046678561286965,0.020387700353516086,0.011456320188914714,0.005904730384400484,0.020971560548830755,0.013563864508081785,0.008187110763313056,0.0072245065287531276,0.008082843948948766,0.007697253523240298,0.007794531708086735,0.010222867634397824,0.005285838443547824,0.0077128678122674104,0.006684787237849775,0.009698298325081884,0.008777573349779693,0.1893681420838567,0.006744136215576221,0.017215009519973425,0.013685787426707625,0.01112834404706101,0.006456809099325413,0.00572677996124831,0.0024638316302080738,0.008078590903578714,0.014218698951391532,0.01372188149468679,0.022235203428856938,0.013721842798784772,0.0034539864411893616;0.005968202452195627,0.004698647469818721,0.0070854308978897575,1.398231354885304,0.10112849448647228,0.012106799871939876,0.016368687420541806,0.004364741430239256,0.011004200416355196,0.03173056400504573,0.011370353406398541,0.0068866899690885955,0.009056252219583609,0.008026340687299622,0.01802982040461556,0.03739001217678416,0.003312948903514311,0.008201359676300478,0.006606306119097458,0.005830500302765526,0.006622263316995593,0.007158447651081865,0.005399820384808105,0.0073526862664577836,0.005265117054745971,0.005670195414571617,0.0065296567459764325,0.002744122255786635,0.0016770005407742328,0.004193099057061804,0.00806014820543483,0.0029725598442759253,0.00762598551295607,0.010998009751046447,0.0014767117432844905;0.0005795041111160888,0.0005870499054474831,0.0008195836978226851,0.012414573113431658,1.2346492700175056,0.001684227392771265,0.0025515842161854658,0.0005577609887316419,0.0009454517727975646,0.0022914217046683463,0.001313932525087586,0.0011077704936742474,0.001212202989879031,0.0010533816806444739,0.0030086314967509116,0.005122808989170704,0.0005309429016902242,0.0008275132517119522,0.0011250490000946122,0.000837182111046405,0.0008465333270668286,0.0006619549328414373,0.0006679614026026494,0.0007681951958259336,0.0006696843336385658,0.0006318321215017221,0.0011084025148287886,0.00032645635806516804,0.00017885678617365734,0.0005019538319169496,0.0014963240017076805,0.0004017561434842544,0.0005577874102018354,0.0012789749559676102,0.00011091071975129399;0.00453845397773413,0.004980754181896204,0.006139271500406656,0.006026911978535634,0.006919335848463654,1.2493011213903884,0.02051892612774601,0.0038818700071497183,0.00587105658074908,0.008125030593621295,0.012138554147191874,0.008888689569886867,0.008705219966546543,0.006543799614146366,0.009841872817630744,0.0949594469697974,0.004456391987475386,0.046695665445676715,0.00413787587153855,0.0040303981104020635,0.0039024510090418406,0.005807992025699482,0.004552382432050745,0.004276368165980581,0.0038012032241350985,0.008487464336102101,0.003553914126300512,0.002729459446424391,0.005841100770938117,0.0036501099791237035,0.005001997574597078,0.004620691796173637,0.003865529150356318,0.006926322854798686,0.0014399090059701305;0.015410776496727603,0.014451482211742693,0.05253960843530889,0.036908290560076,0.044017532838112425,0.03448826116255292,1.3215325305940524,0.015572683623574975,0.04736407157368414,0.048236002353161125,0.047190434936347204,0.025884979589033016,0.03365909487081607,0.040974233724907466,0.0309667251619251,0.04526513627332101,0.016275911516367886,0.025350610674879013,0.02394318526039969,0.02905048667946497,0.02787063793943593,0.029960006027806782,0.020631673896607056,0.02180301568449234,0.025955677041128333,0.03535441882545179,0.02879781332695582,0.03360257897309138,0.010421534530106503,0.04269906144905471,0.03378495717472366,0.030938467433092608,0.02615154112863982,0.04730454126102878,0.002977242427320223;0.02239073734859669,0.022296852566478162,0.018912438628283207,0.020627463631077425,0.018550274865412008,0.01958305430090464,0.016349117444170686,1.067519328222314,0.046551265785322656,0.02692429217374059,0.03177312303015038,0.024454220170102868,0.016294140488663334,0.013467193623504922,0.015151771255143944,0.016264859012328863,0.03061984910424624,0.02576343740816835,0.011950742554319,0.011722689857534241,0.009887618423129083,0.012488707874486735,0.06386148955315102,0.08424864873715757,0.07650917463522985,0.027483039591754303,0.009658661297524336,0.005786676936116125,0.0047887022387177736,0.010228975049540434,0.0145267114630119,0.007426185663210822,0.011070702371667367,0.013200004649779955,0.0024106780030829994;0.06992330731375955,0.029658654814744563,0.05261170790038994,0.147121324234867,0.09778316500936807,0.07001324557386303,0.07658076683606646,0.0385089219289034,1.317767816804394,0.31130783362406117,0.06386538447071273,0.04611786174559607,0.04970445233896117,0.05644385907760873,0.06053067453340243,0.0724640445595214,0.021191993887838486,0.04049240679058004,0.028712759938664636,0.013852916311969164,0.012530148541623602,0.024505679372001845,0.01920021873305199,0.020118120033568675,0.01828474124850799,0.01888540321594701,0.012702099725528939,0.008358990480094539,0.007711192527583667,0.016187222615694753,0.022929400726751713,0.011927346938100384,0.09682013661117242,0.025628803831270218,0.004359521667059147;0.01309716597010271,0.016856847796729538,0.030976775605076765,0.02545411908372297,0.0639461668073851,0.022886321350297358,0.030033122143056482,0.01371058771154407,0.03650716150312842,1.1452612510870084,0.023885055026932785,0.02207498674564947,0.04886922349606654,0.04769951451951177,0.07191651624450572,0.05340851995043991,0.010642409368640365,0.03268053958045173,0.033386685819152474,0.01038185411336979,0.010596953846161562,0.014097251292139837,0.02066515978870509,0.014096870009824156,0.013266457481952926,0.015294200546419723,0.010505411336650573,0.004783446532967408,0.004738756732655508,0.008562543401363597,0.010700122567761544,0.0051137780759294635,0.014025623901894532,0.01055850901576056,0.0020814403051928596;0.005810811542345763,0.009583477343405538,0.01204482347914183,0.0079830564885487,0.008139915118513181,0.016868465847170593,0.006330561817481721,0.008690033824700147,0.014115281736168028,0.014472785379776077,1.131939273364627,0.020883066411195892,0.0161222810757119,0.021944385704325428,0.019133970172872092,0.01426344711185289,0.00840525197766187,0.09638302183083716,0.008438699153878865,0.004096558061654436,0.003761890779483756,0.008442910552542678,0.005782965869938982,0.005348591264508083,0.0048985126389563625,0.006389283715457894,0.005257949417321449,0.002576375052117696,0.007936341835019496,0.004113317488661525,0.006114470432923732,0.005053698249302931,0.00622341579473008,0.006066611520383985,0.0013192428725537799;0.02286810200762494,0.0576990157650128,0.044284814552029456,0.03459123194417378,0.043642021874186865,0.06799259946700849,0.03762378396043077,0.04473482147970719,0.055743173990083085,0.06919971305401754,0.07790436662202693,1.4766675896773216,0.29833406684195146,0.1572604969907768,0.24391464326472173,0.1688024373859238,0.035568351277612466,0.16027073922293375,0.06937308253854717,0.01881866255825236,0.01716605167768249,0.024149612005500434,0.0351702476325184,0.04173821774302867,0.03763670324793571,0.030321356814821895,0.023897287066017906,0.010493628494846606,0.01613299335085226,0.01882255618407276,0.027211049154277724,0.013469743905216509,0.020366203155611,0.022901796322521647,0.006673884248673275;0.013217039172140135,0.025850047969400436,0.014078467664544295,0.018159769471747036,0.016335234061985445,0.019609897111052092,0.016185819978250495,0.020213676439245258,0.018958084483341048,0.023304347619816087,0.026427080340152623,0.03394943724202966,1.1416807742407986,0.029738868898094285,0.05797336632426716,0.02070514775167561,0.016758423204671753,0.029683477357493524,0.03376522317276078,0.008337221222981394,0.006978042106084193,0.008436957396982891,0.01433779499291811,0.017026240457252866,0.013089607003614683,0.011679965817469547,0.008376062976764761,0.004442230754019858,0.004674692641097912,0.007650200847763618,0.012263144908711032,0.005663567418971216,0.007907091144862514,0.00906859282594267,0.002614909464751192;0.012699641976274446,0.023686617755973485,0.0208549270199022,0.026798714496246528,0.02521958169489673,0.028041630960723176,0.03327185639175874,0.022634403191793728,0.034554263429706876,0.0418177088699493,0.032437895429758494,0.05061726086778216,0.1480725395088593,1.392758279654364,0.1277388796458998,0.0489242588302706,0.03381185894888307,0.06035361783156543,0.058998502266852076,0.022826355800177802,0.02148891170434774,0.018247057021781712,0.02552175262023359,0.025595394210973926,0.02609078372029294,0.025644597530473493,0.06623186325532603,0.016044748417249847,0.009965899122209148,0.03209184518824089,0.031072424703204028,0.015758371156612275,0.0390340814637293,0.02570425708118423,0.003611695911242317;0.0122151616994186,0.01670012005347097,0.014154990120199431,0.014568338845052584,0.015890737109904365,0.01600728724253861,0.012445536166750417,0.013955717612350104,0.013557728229579461,0.015854089819914385,0.016086892254155393,0.01991639167727772,0.03216373440476099,0.018092455658840552,1.4128126536719607,0.016702306513243302,0.011220412121332889,0.016522265256883436,0.13404748726733284,0.013196874763083167,0.010862484084148838,0.009259870107984125,0.05537773869256998,0.0718711579336992,0.07717325709796634,0.027066855301585927,0.01118021029231058,0.005970163026657851,0.004318452469950263,0.010968369719576078,0.029725400973376503,0.005709471886119051,0.007577833382735132,0.011499197975869934,0.00189738693391304;0.0022782402213365857,0.0033376770992268583,0.003836419624480373,0.009790751980666968,0.0070751413953454596,0.009923238093441755,0.006978721936978705,0.0030170145057234867,0.004962319047819561,0.006147651250264661,0.0064684868112907315,0.014085614801145412,0.009322080178043713,0.007184369024090358,0.011917826701278382,1.043207605425295,0.003176610419703088,0.00922928940594026,0.005313460053432934,0.0028568997712928113,0.0030982318204293893,0.004677157790571329,0.0038165563159154392,0.0035303688816341956,0.003673341061070947,0.0038068695846893074,0.0027852013558789905,0.002700509024301503,0.0028931110583282726,0.003993473207804985,0.005917243979178014,0.004698555353752956,0.004828231668089672,0.007771445299096324,0.004554751565101169;0.021426638468286716,0.03727756432924449,0.03101310739821375,0.04203856505437947,0.02940722469368263,0.0369495264904587,0.04311689785665579,0.038388632106767406,0.05427880534522049,0.04915994872244067,0.058981747298619394,0.056106825597527624,0.0354496102602996,0.03012780071108041,0.034162032381672695,0.03047198316550994,1.1059084480494232,0.026307867088162455,0.023073091272998506,0.014420703686718269,0.022693016974580118,0.03826741507249234,0.027491172188205452,0.01924862052085268,0.018296685326759703,0.025966417958999132,0.0182456769867832,0.012629874622605125,0.01647559135181624,0.01611479164370158,0.02627794449899581,0.0262744608258675,0.025127923514232858,0.027145883000231602,0.0038224976844231065;0.008697079688998716,0.01350272298099828,0.010530519674851312,0.011055748659044611,0.010457217534814756,0.012189270777352622,0.012020200862817122,0.012036152193383987,0.013095728418216176,0.012325846167064764,0.016459535301651743,0.014448587397454514,0.012403277231483512,0.011186715038327018,0.011526966207242764,0.010621347367326471,0.03497205880692548,1.047167609660527,0.010816428195342507,0.009442383438060597,0.010787258978244329,0.012722830665824176,0.016665530990132505,0.012957228895885249,0.01093053291870924,0.024054081289196345,0.018337561958920553,0.011797956533675404,0.048753523373486485,0.011442045267828417,0.02552731487434369,0.019805279712112638,0.013231913872362356,0.01882948646229929,0.0044199738746557365;0.009371585699187153,0.008740477587282691,0.014488005979871415,0.014007550482231764,0.01709284782864714,0.013694453217458437,0.01169922170053979,0.010017550657479033,0.013929566446469576,0.014291846320009575,0.014700190832438486,0.014219752101813282,0.013421364295860824,0.011882813698835945,0.014093570728170364,0.013353129791177632,0.014457329112769438,0.014419127597368117,1.0141546816340123,0.008086472813553534,0.007676802165238623,0.01069210575861781,0.02367267652700307,0.010049310648447043,0.009274376585075766,0.01343468933468803,0.008869588439757862,0.006124296568478298,0.004443106539344828,0.009980016777611572,0.008321015098365851,0.005790777649647872,0.0076013219241231125,0.011072947442546879,0.0010667263569929164;0.059817582154929654,0.04976070456604427,0.11141704701237634,0.11283249743010815,0.13608263673629487,0.10168608511368205,0.09241128553996333,0.07276042960045363,0.09400175885080327,0.09909225877891054,0.08088704461730174,0.09354123799140196,0.09884086858103995,0.09672749570642669,0.10691375557518798,0.09165716076967134,0.04615742905185443,0.08205322986025287,0.06640727767231691,1.0451302095599129,0.02762617829722299,0.07778081230111406,0.04683021673578986,0.05144027724287011,0.049718553060204965,0.045467763128667904,0.028980049916187068,0.017759569702215774,0.014105927418362921,0.030006102971916793,0.039356196810319606,0.022906425888362843,0.05039086920803524,0.03634813347411968,0.006232811245149164;0.028858460637441997,0.02044827183233825,0.05289251044656498,0.05325775042072858,0.07005064153201121,0.04231651771634804,0.03644569480786519,0.026936075552994685,0.0420941340609018,0.0429874438146187,0.035796743799639305,0.036230604783881286,0.0376743663806971,0.03438752669285534,0.0453282367474975,0.044447231493155014,0.018913292980900102,0.04569348754098628,0.029681359950813932,0.015314994698446311,1.0151835325527776,0.041101305138670295,0.026494383015936655,0.023486252439854433,0.022513704707253765,0.021649063867739255,0.018903484716624126,0.011157530320764874,0.008742948460058278,0.018195532016600527,0.017404509731876693,0.011807552493260974,0.022049058793437066,0.022454233751845864,0.0032919792416619756;0.006051440494347714,0.009427767732240225,0.012044524278063861,0.013740071349100233,0.014012540964746113,0.012873974111810092,0.014948730059132423,0.009400840333205158,0.014395182833437988,0.015203735290725058,0.013860339952461847,0.014188525722732211,0.016382156477393568,0.015570507542121893,0.013440823391081666,0.01243492263910419,0.012564963473350342,0.013264513800716388,0.012606793710248268,0.014752736989380578,0.011313541312238929,1.0169257939208112,0.01519692898353731,0.0161955719568294,0.03161156517300643,0.029959616571377867,0.014896438004986775,0.01726362337341168,0.006113467206472538,0.02097404424015988,0.016480880235079716,0.010723249795094269,0.014118430985319987,0.018721469659600056,0.0011679617914450372;0.028133221785021065,0.03810700739570458,0.04710184326650844,0.046154933278635825,0.049599666606557076,0.049194479787045234,0.039527330510523685,0.0547106992268496,0.042855197396470715,0.041917705713754,0.05670159957769835,0.042777434521856776,0.03501189407122258,0.028751073894233845,0.037686571811825505,0.039288567245396484,0.0433696670652795,0.03866503729005016,0.027045884316635665,0.026427398348883472,0.018907087365836378,0.02650748992963082,1.0614621163504918,0.0664418899099866,0.03230163056559571,0.05163854027854424,0.019765239555434622,0.013769428370968097,0.0075878081030839725,0.015598713644116469,0.021884592842599502,0.01826606670031704,0.018910082962973973,0.020788499571384223,0.0046498513235022475;0.006276251964977334,0.00889996575042314,0.009884348938068986,0.009195390090644563,0.011337661640329764,0.01394431665230607,0.007173475278905973,0.012630095667898016,0.008310434003380752,0.008123351964443323,0.012027340492854486,0.012435032243353553,0.007820631180095768,0.006377802759583009,0.007608877472617403,0.006893114660322367,0.006332914131338094,0.008797720049726948,0.0038804933425363266,0.004453646952842129,0.0031186981120301556,0.005246889583945818,0.006329760895341705,1.1248777244491206,0.007214404820898048,0.00891080383210569,0.002765569147191781,0.0018270282809640314,0.0013048215345075017,0.0026788830936607592,0.0034107623600544198,0.00287445045000073,0.002659966313294847,0.0033231456383017244,0.0009432873786666415;0.0026084560764505584,0.004231608670750481,0.004831186827949726,0.005693413516018237,0.0071596201459651326,0.004786674359306206,0.005839227270109426,0.004118355792311334,0.005734845576485093,0.005792357199054627,0.004796004629058026,0.005141187422572491,0.005933238091761708,0.005941735854059232,0.006185717361102308,0.004675803687831215,0.003473845203580277,0.004350689632687737,0.0047506118608863415,0.006185080657633895,0.003732111059633316,0.003795257800044735,0.005226379697854576,0.01015618141701705,1.0409525367375367,0.02530009234028107,0.007561885927407313,0.006161920014484692,0.0018412390650256803,0.007262967919234123,0.00705640507895685,0.003669295933808678,0.003476234802177793,0.007142314783235325,0.0004740779747358597;0.011738857715461471,0.0152601357644965,0.020643230073049978,0.018101369730312407,0.02104957423705111,0.021268594642483016,0.020736576110419652,0.02054207698271686,0.018751681147406968,0.018743497434998074,0.0224594380294761,0.019385907824240975,0.017842254555460995,0.015577142416538391,0.01938975614124275,0.01675050458399421,0.013608572676927133,0.016232931867266934,0.017470786430381684,0.026972063442959923,0.017259726302807914,0.018137067886687452,0.05285387449817524,0.1737234378329391,0.1287820796693191,1.1516471542054383,0.010230211234820508,0.01029337523261989,0.0041975011026337775,0.012109754143783508,0.012023087279134743,0.007337814093279572,0.009986307359526376,0.01380300775045522,0.00172362899588269;0.011329027353296682,0.01705048458033882,0.019684742077098912,0.02208832345351699,0.023861787751403435,0.020214730111367624,0.030704500310024713,0.01752479558098652,0.024999325022066095,0.023554100753238185,0.021189964499577142,0.022769119466699562,0.025505987322748627,0.0249240390909933,0.022570586074751153,0.022210341557587807,0.018162158646794792,0.026044507966941355,0.025523022779123366,0.03180579968654387,0.031467407755707576,0.025343925831513934,0.02956958518827563,0.03961439966215701,0.05013037517023097,0.04342606030959388,1.1365995080818094,0.044578885124467615,0.011977298771890268,0.038010060159074925,0.032108706994995594,0.016283280727995387,0.023119279039013823,0.038701795331066706,0.002155468946450163;0.048935204135194026,0.06473867629297303,0.06350975645481392,0.07349049110302887,0.06982012014134117,0.06621012300857218,0.06804286093897052,0.06003797555029286,0.06858900072751063,0.06695155440316286,0.06795860075012156,0.06878303913408038,0.06857595416796888,0.0612091599289728,0.06545778658398627,0.06517663403196663,0.0619942134743192,0.06475481831202168,0.06082990868582714,0.07158536490938411,0.06640282328391799,0.0618275997602445,0.08516031893102684,0.0939892835259044,0.08474832914789114,0.0678526078525567,0.055065215524607164,1.2563987019679252,0.08387206329733594,0.07396043140185043,0.054778311107082006,0.03338197708621768,0.054033089138219054,0.07282423890268072,0.011581872747086481;0.015159735448703299,0.01519770135844943,0.021171036272133216,0.02281011032617615,0.02446837824430464,0.021534594159417733,0.025230368524294677,0.01636538141360005,0.02147416435312624,0.022811513612922035,0.019904705376630718,0.021602904978879966,0.023164046113520836,0.02115892902970227,0.022277829942693422,0.023281438952920085,0.01742206018715672,0.02701725823794011,0.036180503160237666,0.03696774922839709,0.051600022651198216,0.03972557784122682,0.02347150819678911,0.03981760342253068,0.0313466379990658,0.037373350825790144,0.025340227872617856,0.03888225498305434,1.039221104662311,0.03625767298974834,0.024434463193112602,0.025008601233997577,0.0439632481055722,0.040736698709100495,0.0026139490423828723;0.050268492880841516,0.07323814484717359,0.10319492727592451,0.10259041607146638,0.10251417507253725,0.08717122658583955,0.13576974574485912,0.07582558716727204,0.14570594021782185,0.11684033288386463,0.09650424584657305,0.09970269432627084,0.12183876690058379,0.14044566078540108,0.1257190420270831,0.09845229557908608,0.08976028319229913,0.1189358843479604,0.10074147408498471,0.09706755797643124,0.10592356236068894,0.08872856276808132,0.093897175754704,0.11461173411427361,0.16701558711402079,0.13082974446913084,0.12610841728945063,0.15708392007663913,0.06563193807478868,1.1950501304740406,0.10927278626784465,0.05564632443691711,0.1032892018861684,0.12580552811573253,0.008658203272173277;0.003541060703513789,0.0053265810144549645,0.005037665805171859,0.004484522102558412,0.004320781110497838,0.006799445969020505,0.006557941324752695,0.004870792109476041,0.006762844416051565,0.005926530925813735,0.005453315306259187,0.006380903501602405,0.004741363265099982,0.0046574110860621186,0.00491759847628855,0.005137093990189398,0.009040542698147826,0.00449918215087938,0.004514106951816731,0.003250821931030539,0.005080717730265863,0.006000141643496318,0.0052953964973371575,0.010862004714796437,0.01263217287085949,0.006410384086459607,0.005085686283391758,0.003647833601761544,0.004586879750556743,0.004993925010348422,1.0093599911857982,0.005377158012330707,0.0073699655959431785,0.010333984069175456,0.0005412211455458049;0.0014794469815899904,0.0012986456594678815,0.001643197101724597,0.0016238547455288026,0.001762943818239015,0.0014116493693924744,0.0018786553573527877,0.0015174073313420047,0.00222351961866055,0.0018658811591078944,0.0016170803418457246,0.0016847893296298541,0.002110097988362694,0.0023331341775466637,0.0019339860572772476,0.001426301639733499,0.0018095200281819759,0.0015222036589006335,0.0013921662088489707,0.001502628262867051,0.002442332282437321,0.001370380382241945,0.002022398234900979,0.0015167725550922638,0.0029480464449325523,0.0021539932860304392,0.0025322858773149525,0.002222292646096644,0.0006572333741468233,0.003139179556201916,0.005204110922547818,1.0071315126830507,0.0018977403639776572,0.002425697928753144,0.00015409807838091434;0.003106250306864976,0.0009873545538114303,0.0019556547206748035,0.001401115618518824,0.0020734226210521586,0.0015498884563653152,0.0012472789053120548,0.000944950759487518,0.0013064145594025478,0.0012205570009322746,0.0011315173538354437,0.0011753184122186545,0.0013626062247346171,0.0011894446022096686,0.001179851370281062,0.001244329588749133,0.0009320503534973242,0.0012578772562315897,0.001069234588619658,0.00107846924414793,0.0008685166449197635,0.0018785336225722936,0.0013462131264392922,0.0012028997941051956,0.0012726573383959217,0.0013544147856119943,0.0012091622763607402,0.0011047710100453888,0.0003838131085092721,0.0013342780544383145,0.006434149171942674,0.0018396328268699407,1.0239049262765003,0.0021977997159376337,0.00014781363936515598;0.009840075383606837,0.01501782976573514,0.01905320062578888,0.01972477843471853,0.022153764225374316,0.018006134807008096,0.030318213762319336,0.01564323740747536,0.023955527645292074,0.020959855445725498,0.018531719460069932,0.02148780182687568,0.021475024359401823,0.020170854393411267,0.01979737892128942,0.019039688956948422,0.016329026630041297,0.019208290602498162,0.019934111189461628,0.017662627691479926,0.01905274954911138,0.024133636367143916,0.01938677691230965,0.020071554242632027,0.02334059206518829,0.024589550793368813,0.03192669856138656,0.023082487960636854,0.013705432515155791,0.04136651529392417,0.02618312240435678,0.017124686754626278,0.025628742805221726,1.0967424986272742,0.0022351515830030576;4.960343697637317e-05,5.670355609069236e-05,8.827141404461317e-05,0.00011651861504245147,9.843354174897474e-05,9.329064276560167e-05,0.00010143548443334051,6.250109445462803e-05,9.682076485963758e-05,0.0001032335326261727,7.807151737502583e-05,8.865680902099793e-05,9.333527755799694e-05,8.232593644764856e-05,0.00012014178661646114,8.357537499525039e-05,6.190024653624499e-05,0.00013942791298422136,0.00015777660929585866,6.691763560904357e-05,0.00010167029622977916,0.00011341025956599783,0.00018397665309546348,8.62207501802669e-05,9.564931831344283e-05,8.999069463800751e-05,0.00012344056031894627,0.00012685281225381295,0.0003241794804163751,0.00013044881376947663,0.00013317697578696614,7.586032958886683e-05,0.00019068182511874988,0.00018901768332453894,1.000035036661601;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            1.17714229e+00, 7.53359026e-03, 3.69508268e-01, 7.40367861e-02, 9.63099284e-02,
            2.19506266e-01, 2.87281512e-02, 9.94342628e-03, 2.10753079e-02, 2.99165162e-02,
            9.86152204e-03, 7.67112252e-03, 8.42826106e-03, 7.74064612e-03, 9.20129837e-03,
            3.70771672e-02, 5.56107316e-03, 2.12676459e-02, 6.20104617e-03, 8.65934694e-03,
            8.25433361e-03, 1.07622113e-01, 6.98278287e-03, 1.18025533e-02, 9.34458262e-03,
            1.23639110e-02, 5.31136908e-03, 4.57926352e-03, 3.69530583e-03, 6.89782932e-03,
            1.04057681e-02, 9.26027079e-03, 1.34749399e-02, 1.17555181e-02, 2.13192958e-02
        ],
              [
                  2.26136455e-02, 1.11049499e+00, 2.42037458e-02, 2.77917955e-02, 2.30367433e-02,
                  2.81675761e-02, 2.65812238e-02, 5.12177607e-01, 8.92431379e-02, 4.20117373e-02,
                  1.19930683e-01, 9.18189101e-02, 3.47912693e-02, 2.51113559e-02, 3.05792933e-02,
                  3.11419524e-02, 1.42760850e-01, 5.56445276e-02, 1.55084603e-02, 1.16497153e-02,
                  1.10006416e-02, 1.70250566e-02, 4.26981139e-02, 5.14033227e-02, 4.54445295e-02,
                  2.32244761e-02, 1.05916919e-02, 6.64893251e-03, 9.30872687e-03, 1.08926108e-02,
                  1.64075736e-02, 1.33267723e-02, 1.63146331e-02, 1.59707448e-02, 7.98615534e-02
              ],
              [
                  7.50135849e-02, 4.86269404e-03, 1.19083923e+00, 1.56872233e-02, 1.30466786e-01,
                  2.03877004e-02, 1.14563202e-02, 5.90473038e-03, 2.09715605e-02, 1.35638645e-02,
                  8.18711076e-03, 7.22450653e-03, 8.08284395e-03, 7.69725352e-03, 7.79453171e-03,
                  1.02228676e-02, 5.28583844e-03, 7.71286781e-03, 6.68478724e-03, 9.69829833e-03,
                  8.77757335e-03, 1.89368142e-01, 6.74413622e-03, 1.72150095e-02, 1.36857874e-02,
                  1.11283440e-02, 6.45680910e-03, 5.72677996e-03, 2.46383163e-03, 8.07859090e-03,
                  1.42186990e-02, 1.37218815e-02, 2.22352034e-02, 1.37218428e-02, 3.45398644e-03
              ],
              [
                  5.96820245e-03, 4.69864747e-03, 7.08543090e-03, 1.39823135e+00, 1.01128494e-01,
                  1.21067999e-02, 1.63686874e-02, 4.36474143e-03, 1.10042004e-02, 3.17305640e-02,
                  1.13703534e-02, 6.88668997e-03, 9.05625222e-03, 8.02634069e-03, 1.80298204e-02,
                  3.73900122e-02, 3.31294890e-03, 8.20135968e-03, 6.60630612e-03, 5.83050030e-03,
                  6.62226332e-03, 7.15844765e-03, 5.39982038e-03, 7.35268627e-03, 5.26511705e-03,
                  5.67019541e-03, 6.52965675e-03, 2.74412226e-03, 1.67700054e-03, 4.19309906e-03,
                  8.06014821e-03, 2.97255984e-03, 7.62598551e-03, 1.09980098e-02, 1.47671174e-03
              ],
              [
                  5.79504111e-04, 5.87049905e-04, 8.19583698e-04, 1.24145731e-02, 1.23464927e+00,
                  1.68422739e-03, 2.55158422e-03, 5.57760989e-04, 9.45451773e-04, 2.29142170e-03,
                  1.31393253e-03, 1.10777049e-03, 1.21220299e-03, 1.05338168e-03, 3.00863150e-03,
                  5.12280899e-03, 5.30942902e-04, 8.27513252e-04, 1.12504900e-03, 8.37182111e-04,
                  8.46533327e-04, 6.61954933e-04, 6.67961403e-04, 7.68195196e-04, 6.69684334e-04,
                  6.31832122e-04, 1.10840251e-03, 3.26456358e-04, 1.78856786e-04, 5.01953832e-04,
                  1.49632400e-03, 4.01756143e-04, 5.57787410e-04, 1.27897496e-03, 1.10910720e-04
              ],
              [
                  4.53845398e-03, 4.98075418e-03, 6.13927150e-03, 6.02691198e-03, 6.91933585e-03,
                  1.24930112e+00, 2.05189261e-02, 3.88187001e-03, 5.87105658e-03, 8.12503059e-03,
                  1.21385541e-02, 8.88868957e-03, 8.70521997e-03, 6.54379961e-03, 9.84187282e-03,
                  9.49594470e-02, 4.45639199e-03, 4.66956654e-02, 4.13787587e-03, 4.03039811e-03,
                  3.90245101e-03, 5.80799203e-03, 4.55238243e-03, 4.27636817e-03, 3.80120322e-03,
                  8.48746434e-03, 3.55391413e-03, 2.72945945e-03, 5.84110077e-03, 3.65010998e-03,
                  5.00199757e-03, 4.62069180e-03, 3.86552915e-03, 6.92632285e-03, 1.43990901e-03
              ],
              [
                  1.54107765e-02, 1.44514822e-02, 5.25396084e-02, 3.69082906e-02, 4.40175328e-02,
                  3.44882612e-02, 1.32153253e+00, 1.55726836e-02, 4.73640716e-02, 4.82360024e-02,
                  4.71904349e-02, 2.58849796e-02, 3.36590949e-02, 4.09742337e-02, 3.09667252e-02,
                  4.52651363e-02, 1.62759115e-02, 2.53506107e-02, 2.39431853e-02, 2.90504867e-02,
                  2.78706379e-02, 2.99600060e-02, 2.06316739e-02, 2.18030157e-02, 2.59556770e-02,
                  3.53544188e-02, 2.87978133e-02, 3.36025790e-02, 1.04215345e-02, 4.26990614e-02,
                  3.37849572e-02, 3.09384674e-02, 2.61515411e-02, 4.73045413e-02, 2.97724243e-03
              ],
              [
                  2.23907373e-02, 2.22968526e-02, 1.89124386e-02, 2.06274636e-02, 1.85502749e-02,
                  1.95830543e-02, 1.63491174e-02, 1.06751933e+00, 4.65512658e-02, 2.69242922e-02,
                  3.17731230e-02, 2.44542202e-02, 1.62941405e-02, 1.34671936e-02, 1.51517713e-02,
                  1.62648590e-02, 3.06198491e-02, 2.57634374e-02, 1.19507426e-02, 1.17226899e-02,
                  9.88761842e-03, 1.24887079e-02, 6.38614896e-02, 8.42486487e-02, 7.65091746e-02,
                  2.74830396e-02, 9.65866130e-03, 5.78667694e-03, 4.78870224e-03, 1.02289750e-02,
                  1.45267115e-02, 7.42618566e-03, 1.10707024e-02, 1.32000046e-02, 2.41067800e-03
              ],
              [
                  6.99233073e-02, 2.96586548e-02, 5.26117079e-02, 1.47121324e-01, 9.77831650e-02,
                  7.00132456e-02, 7.65807668e-02, 3.85089219e-02, 1.31776782e+00, 3.11307834e-01,
                  6.38653845e-02, 4.61178617e-02, 4.97044523e-02, 5.64438591e-02, 6.05306745e-02,
                  7.24640446e-02, 2.11919939e-02, 4.04924068e-02, 2.87127599e-02, 1.38529163e-02,
                  1.25301485e-02, 2.45056794e-02, 1.92002187e-02, 2.01181200e-02, 1.82847412e-02,
                  1.88854032e-02, 1.27020997e-02, 8.35899048e-03, 7.71119253e-03, 1.61872226e-02,
                  2.29294007e-02, 1.19273469e-02, 9.68201366e-02, 2.56288038e-02, 4.35952167e-03
              ],
              [
                  1.30971660e-02, 1.68568478e-02, 3.09767756e-02, 2.54541191e-02, 6.39461668e-02,
                  2.28863214e-02, 3.00331221e-02, 1.37105877e-02, 3.65071615e-02, 1.14526125e+00,
                  2.38850550e-02, 2.20749867e-02, 4.88692235e-02, 4.76995145e-02, 7.19165162e-02,
                  5.34085200e-02, 1.06424094e-02, 3.26805396e-02, 3.33866858e-02, 1.03818541e-02,
                  1.05969538e-02, 1.40972513e-02, 2.06651598e-02, 1.40968700e-02, 1.32664575e-02,
                  1.52942005e-02, 1.05054113e-02, 4.78344653e-03, 4.73875673e-03, 8.56254340e-03,
                  1.07001226e-02, 5.11377808e-03, 1.40256239e-02, 1.05585090e-02, 2.08144031e-03
              ],
              [
                  5.81081154e-03, 9.58347734e-03, 1.20448235e-02, 7.98305649e-03, 8.13991512e-03,
                  1.68684658e-02, 6.33056182e-03, 8.69003382e-03, 1.41152817e-02, 1.44727854e-02,
                  1.13193927e+00, 2.08830664e-02, 1.61222811e-02, 2.19443857e-02, 1.91339702e-02,
                  1.42634471e-02, 8.40525198e-03, 9.63830218e-02, 8.43869915e-03, 4.09655806e-03,
                  3.76189078e-03, 8.44291055e-03, 5.78296587e-03, 5.34859126e-03, 4.89851264e-03,
                  6.38928372e-03, 5.25794942e-03, 2.57637505e-03, 7.93634184e-03, 4.11331749e-03,
                  6.11447043e-03, 5.05369825e-03, 6.22341579e-03, 6.06661152e-03, 1.31924287e-03
              ],
              [
                  2.28681020e-02, 5.76990158e-02, 4.42848146e-02, 3.45912319e-02, 4.36420219e-02,
                  6.79925995e-02, 3.76237840e-02, 4.47348215e-02, 5.57431740e-02, 6.91997131e-02,
                  7.79043666e-02, 1.47666759e+00, 2.98334067e-01, 1.57260497e-01, 2.43914643e-01,
                  1.68802437e-01, 3.55683513e-02, 1.60270739e-01, 6.93730825e-02, 1.88186626e-02,
                  1.71660517e-02, 2.41496120e-02, 3.51702476e-02, 4.17382177e-02, 3.76367032e-02,
                  3.03213568e-02, 2.38972871e-02, 1.04936285e-02, 1.61329934e-02, 1.88225562e-02,
                  2.72110492e-02, 1.34697439e-02, 2.03662032e-02, 2.29017963e-02, 6.67388425e-03
              ],
              [
                  1.32170392e-02, 2.58500480e-02, 1.40784677e-02, 1.81597695e-02, 1.63352341e-02,
                  1.96098971e-02, 1.61858200e-02, 2.02136764e-02, 1.89580845e-02, 2.33043476e-02,
                  2.64270803e-02, 3.39494372e-02, 1.14168077e+00, 2.97388689e-02, 5.79733663e-02,
                  2.07051478e-02, 1.67584232e-02, 2.96834774e-02, 3.37652232e-02, 8.33722122e-03,
                  6.97804211e-03, 8.43695740e-03, 1.43377950e-02, 1.70262405e-02, 1.30896070e-02,
                  1.16799658e-02, 8.37606298e-03, 4.44223075e-03, 4.67469264e-03, 7.65020085e-03,
                  1.22631449e-02, 5.66356742e-03, 7.90709114e-03, 9.06859283e-03, 2.61490946e-03
              ],
              [
                  1.26996420e-02, 2.36866178e-02, 2.08549270e-02, 2.67987145e-02, 2.52195817e-02,
                  2.80416310e-02, 3.32718564e-02, 2.26344032e-02, 3.45542634e-02, 4.18177089e-02,
                  3.24378954e-02, 5.06172609e-02, 1.48072540e-01, 1.39275828e+00, 1.27738880e-01,
                  4.89242588e-02, 3.38118589e-02, 6.03536178e-02, 5.89985023e-02, 2.28263558e-02,
                  2.14889117e-02, 1.82470570e-02, 2.55217526e-02, 2.55953942e-02, 2.60907837e-02,
                  2.56445975e-02, 6.62318633e-02, 1.60447484e-02, 9.96589912e-03, 3.20918452e-02,
                  3.10724247e-02, 1.57583712e-02, 3.90340815e-02, 2.57042571e-02, 3.61169591e-03
              ],
              [
                  1.22151617e-02, 1.67001201e-02, 1.41549901e-02, 1.45683388e-02, 1.58907371e-02,
                  1.60072872e-02, 1.24455362e-02, 1.39557176e-02, 1.35577282e-02, 1.58540898e-02,
                  1.60868923e-02, 1.99163917e-02, 3.21637344e-02, 1.80924557e-02, 1.41281265e+00,
                  1.67023065e-02, 1.12204121e-02, 1.65222653e-02, 1.34047487e-01, 1.31968748e-02,
                  1.08624841e-02, 9.25987011e-03, 5.53777387e-02, 7.18711579e-02, 7.71732571e-02,
                  2.70668553e-02, 1.11802103e-02, 5.97016303e-03, 4.31845247e-03, 1.09683697e-02,
                  2.97254010e-02, 5.70947189e-03, 7.57783338e-03, 1.14991980e-02, 1.89738693e-03
              ],
              [
                  2.27824022e-03, 3.33767710e-03, 3.83641962e-03, 9.79075198e-03, 7.07514140e-03,
                  9.92323809e-03, 6.97872194e-03, 3.01701451e-03, 4.96231905e-03, 6.14765125e-03,
                  6.46848681e-03, 1.40856148e-02, 9.32208018e-03, 7.18436902e-03, 1.19178267e-02,
                  1.04320761e+00, 3.17661042e-03, 9.22928941e-03, 5.31346005e-03, 2.85689977e-03,
                  3.09823182e-03, 4.67715779e-03, 3.81655632e-03, 3.53036888e-03, 3.67334106e-03,
                  3.80686958e-03, 2.78520136e-03, 2.70050902e-03, 2.89311106e-03, 3.99347321e-03,
                  5.91724398e-03, 4.69855535e-03, 4.82823167e-03, 7.77144530e-03, 4.55475157e-03
              ],
              [
                  2.14266385e-02, 3.72775643e-02, 3.10131074e-02, 4.20385651e-02, 2.94072247e-02,
                  3.69495265e-02, 4.31168979e-02, 3.83886321e-02, 5.42788053e-02, 4.91599487e-02,
                  5.89817473e-02, 5.61068256e-02, 3.54496103e-02, 3.01278007e-02, 3.41620324e-02,
                  3.04719832e-02, 1.10590845e+00, 2.63078671e-02, 2.30730913e-02, 1.44207037e-02,
                  2.26930170e-02, 3.82674151e-02, 2.74911722e-02, 1.92486205e-02, 1.82966853e-02,
                  2.59664180e-02, 1.82456770e-02, 1.26298746e-02, 1.64755914e-02, 1.61147916e-02,
                  2.62779445e-02, 2.62744608e-02, 2.51279235e-02, 2.71458830e-02, 3.82249768e-03
              ],
              [
                  8.69707969e-03, 1.35027230e-02, 1.05305197e-02, 1.10557487e-02, 1.04572175e-02,
                  1.21892708e-02, 1.20202009e-02, 1.20361522e-02, 1.30957284e-02, 1.23258462e-02,
                  1.64595353e-02, 1.44485874e-02, 1.24032772e-02, 1.11867150e-02, 1.15269662e-02,
                  1.06213474e-02, 3.49720588e-02, 1.04716761e+00, 1.08164282e-02, 9.44238344e-03,
                  1.07872590e-02, 1.27228307e-02, 1.66655310e-02, 1.29572289e-02, 1.09305329e-02,
                  2.40540813e-02, 1.83375620e-02, 1.17979565e-02, 4.87535234e-02, 1.14420453e-02,
                  2.55273149e-02, 1.98052797e-02, 1.32319139e-02, 1.88294865e-02, 4.41997387e-03
              ],
              [
                  9.37158570e-03, 8.74047759e-03, 1.44880060e-02, 1.40075505e-02, 1.70928478e-02,
                  1.36944532e-02, 1.16992217e-02, 1.00175507e-02, 1.39295664e-02, 1.42918463e-02,
                  1.47001908e-02, 1.42197521e-02, 1.34213643e-02, 1.18828137e-02, 1.40935707e-02,
                  1.33531298e-02, 1.44573291e-02, 1.44191276e-02, 1.01415468e+00, 8.08647281e-03,
                  7.67680217e-03, 1.06921058e-02, 2.36726765e-02, 1.00493106e-02, 9.27437659e-03,
                  1.34346893e-02, 8.86958844e-03, 6.12429657e-03, 4.44310654e-03, 9.98001678e-03,
                  8.32101510e-03, 5.79077765e-03, 7.60132192e-03, 1.10729474e-02, 1.06672636e-03
              ],
              [
                  5.98175822e-02, 4.97607046e-02, 1.11417047e-01, 1.12832497e-01, 1.36082637e-01,
                  1.01686085e-01, 9.24112855e-02, 7.27604296e-02, 9.40017589e-02, 9.90922588e-02,
                  8.08870446e-02, 9.35412380e-02, 9.88408686e-02, 9.67274957e-02, 1.06913756e-01,
                  9.16571608e-02, 4.61574291e-02, 8.20532299e-02, 6.64072777e-02, 1.04513021e+00,
                  2.76261783e-02, 7.77808123e-02, 4.68302167e-02, 5.14402772e-02, 4.97185531e-02,
                  4.54677631e-02, 2.89800499e-02, 1.77595697e-02, 1.41059274e-02, 3.00061030e-02,
                  3.93561968e-02, 2.29064259e-02, 5.03908692e-02, 3.63481335e-02, 6.23281125e-03
              ],
              [
                  2.88584606e-02, 2.04482718e-02, 5.28925104e-02, 5.32577504e-02, 7.00506415e-02,
                  4.23165177e-02, 3.64456948e-02, 2.69360756e-02, 4.20941341e-02, 4.29874438e-02,
                  3.57967438e-02, 3.62306048e-02, 3.76743664e-02, 3.43875267e-02, 4.53282367e-02,
                  4.44472315e-02, 1.89132930e-02, 4.56934875e-02, 2.96813600e-02, 1.53149947e-02,
                  1.01518353e+00, 4.11013051e-02, 2.64943830e-02, 2.34862524e-02, 2.25137047e-02,
                  2.16490639e-02, 1.89034847e-02, 1.11575303e-02, 8.74294846e-03, 1.81955320e-02,
                  1.74045097e-02, 1.18075525e-02, 2.20490588e-02, 2.24542338e-02, 3.29197924e-03
              ],
              [
                  6.05144049e-03, 9.42776773e-03, 1.20445243e-02, 1.37400713e-02, 1.40125410e-02,
                  1.28739741e-02, 1.49487301e-02, 9.40084033e-03, 1.43951828e-02, 1.52037353e-02,
                  1.38603400e-02, 1.41885257e-02, 1.63821565e-02, 1.55705075e-02, 1.34408234e-02,
                  1.24349226e-02, 1.25649635e-02, 1.32645138e-02, 1.26067937e-02, 1.47527370e-02,
                  1.13135413e-02, 1.01692579e+00, 1.51969290e-02, 1.61955720e-02, 3.16115652e-02,
                  2.99596166e-02, 1.48964380e-02, 1.72636234e-02, 6.11346721e-03, 2.09740442e-02,
                  1.64808802e-02, 1.07232498e-02, 1.41184310e-02, 1.87214697e-02, 1.16796179e-03
              ],
              [
                  2.81332218e-02, 3.81070074e-02, 4.71018433e-02, 4.61549333e-02, 4.95996666e-02,
                  4.91944798e-02, 3.95273305e-02, 5.47106992e-02, 4.28551974e-02, 4.19177057e-02,
                  5.67015996e-02, 4.27774345e-02, 3.50118941e-02, 2.87510739e-02, 3.76865718e-02,
                  3.92885672e-02, 4.33696671e-02, 3.86650373e-02, 2.70458843e-02, 2.64273983e-02,
                  1.89070874e-02, 2.65074899e-02, 1.06146212e+00, 6.64418899e-02, 3.23016306e-02,
                  5.16385403e-02, 1.97652396e-02, 1.37694284e-02, 7.58780810e-03, 1.55987136e-02,
                  2.18845928e-02, 1.82660667e-02, 1.89100830e-02, 2.07884996e-02, 4.64985132e-03
              ],
              [
                  6.27625196e-03, 8.89996575e-03, 9.88434894e-03, 9.19539009e-03, 1.13376616e-02,
                  1.39443167e-02, 7.17347528e-03, 1.26300957e-02, 8.31043400e-03, 8.12335196e-03,
                  1.20273405e-02, 1.24350322e-02, 7.82063118e-03, 6.37780276e-03, 7.60887747e-03,
                  6.89311466e-03, 6.33291413e-03, 8.79772005e-03, 3.88049334e-03, 4.45364695e-03,
                  3.11869811e-03, 5.24688958e-03, 6.32976090e-03, 1.12487772e+00, 7.21440482e-03,
                  8.91080383e-03, 2.76556915e-03, 1.82702828e-03, 1.30482153e-03, 2.67888309e-03,
                  3.41076236e-03, 2.87445045e-03, 2.65996631e-03, 3.32314564e-03, 9.43287379e-04
              ],
              [
                  2.60845608e-03, 4.23160867e-03, 4.83118683e-03, 5.69341352e-03, 7.15962015e-03,
                  4.78667436e-03, 5.83922727e-03, 4.11835579e-03, 5.73484558e-03, 5.79235720e-03,
                  4.79600463e-03, 5.14118742e-03, 5.93323809e-03, 5.94173585e-03, 6.18571736e-03,
                  4.67580369e-03, 3.47384520e-03, 4.35068963e-03, 4.75061186e-03, 6.18508066e-03,
                  3.73211106e-03, 3.79525780e-03, 5.22637970e-03, 1.01561814e-02, 1.04095254e+00,
                  2.53000923e-02, 7.56188593e-03, 6.16192001e-03, 1.84123907e-03, 7.26296792e-03,
                  7.05640508e-03, 3.66929593e-03, 3.47623480e-03, 7.14231478e-03, 4.74077975e-04
              ],
              [
                  1.17388577e-02, 1.52601358e-02, 2.06432301e-02, 1.81013697e-02, 2.10495742e-02,
                  2.12685946e-02, 2.07365761e-02, 2.05420770e-02, 1.87516811e-02, 1.87434974e-02,
                  2.24594380e-02, 1.93859078e-02, 1.78422546e-02, 1.55771424e-02, 1.93897561e-02,
                  1.67505046e-02, 1.36085727e-02, 1.62329319e-02, 1.74707864e-02, 2.69720634e-02,
                  1.72597263e-02, 1.81370679e-02, 5.28538745e-02, 1.73723438e-01, 1.28782080e-01,
                  1.15164715e+00, 1.02302112e-02, 1.02933752e-02, 4.19750110e-03, 1.21097541e-02,
                  1.20230873e-02, 7.33781409e-03, 9.98630736e-03, 1.38030078e-02, 1.72362900e-03
              ],
              [
                  1.13290274e-02, 1.70504846e-02, 1.96847421e-02, 2.20883235e-02, 2.38617878e-02,
                  2.02147301e-02, 3.07045003e-02, 1.75247956e-02, 2.49993250e-02, 2.35541008e-02,
                  2.11899645e-02, 2.27691195e-02, 2.55059873e-02, 2.49240391e-02, 2.25705861e-02,
                  2.22103416e-02, 1.81621586e-02, 2.60445080e-02, 2.55230228e-02, 3.18057997e-02,
                  3.14674078e-02, 2.53439258e-02, 2.95695852e-02, 3.96143997e-02, 5.01303752e-02,
                  4.34260603e-02, 1.13659951e+00, 4.45788851e-02, 1.19772988e-02, 3.80100602e-02,
                  3.21087070e-02, 1.62832807e-02, 2.31192790e-02, 3.87017953e-02, 2.15546895e-03
              ],
              [
                  4.89352041e-02, 6.47386763e-02, 6.35097565e-02, 7.34904911e-02, 6.98201201e-02,
                  6.62101230e-02, 6.80428609e-02, 6.00379756e-02, 6.85890007e-02, 6.69515544e-02,
                  6.79586008e-02, 6.87830391e-02, 6.85759542e-02, 6.12091599e-02, 6.54577866e-02,
                  6.51766340e-02, 6.19942135e-02, 6.47548183e-02, 6.08299087e-02, 7.15853649e-02,
                  6.64028233e-02, 6.18275998e-02, 8.51603189e-02, 9.39892835e-02, 8.47483291e-02,
                  6.78526079e-02, 5.50652155e-02, 1.25639870e+00, 8.38720633e-02, 7.39604314e-02,
                  5.47783111e-02, 3.33819771e-02, 5.40330891e-02, 7.28242389e-02, 1.15818727e-02
              ],
              [
                  1.51597354e-02, 1.51977014e-02, 2.11710363e-02, 2.28101103e-02, 2.44683782e-02,
                  2.15345942e-02, 2.52303685e-02, 1.63653814e-02, 2.14741644e-02, 2.28115136e-02,
                  1.99047054e-02, 2.16029050e-02, 2.31640461e-02, 2.11589290e-02, 2.22778299e-02,
                  2.32814390e-02, 1.74220602e-02, 2.70172582e-02, 3.61805032e-02, 3.69677492e-02,
                  5.16000227e-02, 3.97255778e-02, 2.34715082e-02, 3.98176034e-02, 3.13466380e-02,
                  3.73733508e-02, 2.53402279e-02, 3.88822550e-02, 1.03922110e+00, 3.62576730e-02,
                  2.44344632e-02, 2.50086012e-02, 4.39632481e-02, 4.07366987e-02, 2.61394904e-03
              ],
              [
                  5.02684929e-02, 7.32381448e-02, 1.03194927e-01, 1.02590416e-01, 1.02514175e-01,
                  8.71712266e-02, 1.35769746e-01, 7.58255872e-02, 1.45705940e-01, 1.16840333e-01,
                  9.65042458e-02, 9.97026943e-02, 1.21838767e-01, 1.40445661e-01, 1.25719042e-01,
                  9.84522956e-02, 8.97602832e-02, 1.18935884e-01, 1.00741474e-01, 9.70675580e-02,
                  1.05923562e-01, 8.87285628e-02, 9.38971758e-02, 1.14611734e-01, 1.67015587e-01,
                  1.30829744e-01, 1.26108417e-01, 1.57083920e-01, 6.56319381e-02, 1.19505013e+00,
                  1.09272786e-01, 5.56463244e-02, 1.03289202e-01, 1.25805528e-01, 8.65820327e-03
              ],
              [
                  3.54106070e-03, 5.32658101e-03, 5.03766581e-03, 4.48452210e-03, 4.32078111e-03,
                  6.79944597e-03, 6.55794132e-03, 4.87079211e-03, 6.76284442e-03, 5.92653093e-03,
                  5.45331531e-03, 6.38090350e-03, 4.74136327e-03, 4.65741109e-03, 4.91759848e-03,
                  5.13709399e-03, 9.04054270e-03, 4.49918215e-03, 4.51410695e-03, 3.25082193e-03,
                  5.08071773e-03, 6.00014164e-03, 5.29539650e-03, 1.08620047e-02, 1.26321729e-02,
                  6.41038409e-03, 5.08568628e-03, 3.64783360e-03, 4.58687975e-03, 4.99392501e-03,
                  1.00935999e+00, 5.37715801e-03, 7.36996560e-03, 1.03339841e-02, 5.41221146e-04
              ],
              [
                  1.47944698e-03, 1.29864566e-03, 1.64319710e-03, 1.62385475e-03, 1.76294382e-03,
                  1.41164937e-03, 1.87865536e-03, 1.51740733e-03, 2.22351962e-03, 1.86588116e-03,
                  1.61708034e-03, 1.68478933e-03, 2.11009799e-03, 2.33313418e-03, 1.93398606e-03,
                  1.42630164e-03, 1.80952003e-03, 1.52220366e-03, 1.39216621e-03, 1.50262826e-03,
                  2.44233228e-03, 1.37038038e-03, 2.02239823e-03, 1.51677256e-03, 2.94804644e-03,
                  2.15399329e-03, 2.53228588e-03, 2.22229265e-03, 6.57233374e-04, 3.13917956e-03,
                  5.20411092e-03, 1.00713151e+00, 1.89774036e-03, 2.42569793e-03, 1.54098078e-04
              ],
              [
                  3.10625031e-03, 9.87354554e-04, 1.95565472e-03, 1.40111562e-03, 2.07342262e-03,
                  1.54988846e-03, 1.24727891e-03, 9.44950759e-04, 1.30641456e-03, 1.22055700e-03,
                  1.13151735e-03, 1.17531841e-03, 1.36260622e-03, 1.18944460e-03, 1.17985137e-03,
                  1.24432959e-03, 9.32050353e-04, 1.25787726e-03, 1.06923459e-03, 1.07846924e-03,
                  8.68516645e-04, 1.87853362e-03, 1.34621313e-03, 1.20289979e-03, 1.27265734e-03,
                  1.35441479e-03, 1.20916228e-03, 1.10477101e-03, 3.83813109e-04, 1.33427805e-03,
                  6.43414917e-03, 1.83963283e-03, 1.02390493e+00, 2.19779972e-03, 1.47813639e-04
              ],
              [
                  9.84007538e-03, 1.50178298e-02, 1.90532006e-02, 1.97247784e-02, 2.21537642e-02,
                  1.80061348e-02, 3.03182138e-02, 1.56432374e-02, 2.39555276e-02, 2.09598554e-02,
                  1.85317195e-02, 2.14878018e-02, 2.14750244e-02, 2.01708544e-02, 1.97973789e-02,
                  1.90396890e-02, 1.63290266e-02, 1.92082906e-02, 1.99341112e-02, 1.76626277e-02,
                  1.90527495e-02, 2.41336364e-02, 1.93867769e-02, 2.00715542e-02, 2.33405921e-02,
                  2.45895508e-02, 3.19266986e-02, 2.30824880e-02, 1.37054325e-02, 4.13665153e-02,
                  2.61831224e-02, 1.71246868e-02, 2.56287428e-02, 1.09674250e+00, 2.23515158e-03
              ],
              [
                  4.96034370e-05, 5.67035561e-05, 8.82714140e-05, 1.16518615e-04, 9.84335417e-05,
                  9.32906428e-05, 1.01435484e-04, 6.25010945e-05, 9.68207649e-05, 1.03233533e-04,
                  7.80715174e-05, 8.86568090e-05, 9.33352776e-05, 8.23259364e-05, 1.20141787e-04,
                  8.35753750e-05, 6.19002465e-05, 1.39427913e-04, 1.57776609e-04, 6.69176356e-05,
                  1.01670296e-04, 1.13410260e-04, 1.83976653e-04, 8.62207502e-05, 9.56493183e-05,
                  8.99906946e-05, 1.23440560e-04, 1.26852812e-04, 3.24179480e-04, 1.30448814e-04,
                  1.33176976e-04, 7.58603296e-05, 1.90681825e-04, 1.89017683e-04, 1.00003504e+00
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def leontief_matrix_2000():
    """
    Real Name: b'leontief matrix 2000'
    Original Eqn: b'1.175572464210048,0.006027665419303611,0.3608518529710163,0.07112767829467465,0.0977218124133696,0.19574919908888042,0.027155221469621613,0.008214167331981806,0.018126502781937958,0.02782033339684698,0.008885359927418787,0.007098109855113678,0.00759843641517851,0.00684687835120505,0.008489590086547535,0.03536156831093731,0.005182485921143564,0.02088568454055414,0.00581357865224846,0.008623410074706921,0.007581301274553723,0.10212094208762482,0.006619826584422741,0.011555103179082591,0.008321128241505108,0.012043805359488652,0.004940425780107188,0.0041008140847804,0.0033251855609147665,0.006238449671306034,0.01001652288440579,0.008726737696071622,0.012750679517917769,0.011427988496461821,0.01921442861560617;0.02444864760619065,1.1190476496203912,0.02606371126715772,0.02965374698592976,0.024523691576933054,0.031947218732514104,0.027968803406159055,0.5385740246335738,0.08793400866103457,0.043614787020753054,0.12410008932521033,0.10001702976386505,0.036891698030380525,0.025262474488379188,0.032266092193367964,0.03476632527625314,0.16290481888264427,0.05889621925308468,0.01612574184465458,0.011672081579365197,0.011530084819141162,0.01841195871694061,0.044790696335899875,0.05735849866865126,0.048873148439140965,0.024293398072763008,0.011283646962160812,0.006979477226141657,0.009602911560965953,0.01154026082428061,0.01728628498932936,0.014880478001822448,0.016738663761839946,0.01715687730754562,0.07249392343779873;0.0768158023264809,0.004411205739012353,1.1937283594384258,0.0158400576241926,0.13377280656560325,0.019580677731411523,0.011461889725489977,0.005262529493189154,0.019584220401989875,0.013488597013006691,0.0077909602696864064,0.006977782235164016,0.00763078404107813,0.007178291738602855,0.00778335321749818,0.01079027318849325,0.0051690636514074495,0.0074899946219219166,0.006569517481583859,0.009493332037672867,0.008420719858351156,0.18499806055567988,0.0063898401352786545,0.018144247196977513,0.012123922657102692,0.010319052499473331,0.006444373508458948,0.005348215196519786,0.00236087904360787,0.007630647069314384,0.014633961439899921,0.013265591080920538,0.022143022871673013,0.014072147241662407,0.004813777995034338;0.00569178389134471,0.004012966241147631,0.006725749803179649,1.4105673068443443,0.09876943758656255,0.01150415905412734,0.013958923671643378,0.0037949184338284575,0.009985163760741425,0.02792019492073636,0.010411833945062857,0.006546481591288864,0.008543562299522104,0.0073378611394616395,0.01731014374857587,0.04035663947401066,0.0029953829879859617,0.007879887780487838,0.006071643370518254,0.005360743021957844,0.006014387621867806,0.006958374936468171,0.005075049237374181,0.006628022524054146,0.004878975288280316,0.0052364093008820415,0.0037926030121897443,0.0024087312347208815,0.0015446073674116546,0.003832209892236512,0.007449269387584688,0.002879967276749256,0.007358960246491802,0.010747562612662414,0.0009333658725607636;0.0005137700092335841,0.0004526092887434989,0.0007217605046019225,0.01123114731630956,1.239113371773564,0.001489153991745123,0.0017718431742510575,0.0004517952592504919,0.0008117671477915274,0.002224644703060532,0.0011131279084333502,0.0009624959798941647,0.0010596067495817943,0.0009022957792256275,0.003123679057595445,0.005415839479303599,0.00045965330599204515,0.0007498198604334129,0.0010840805745561985,0.0007983072935818594,0.0006943020630588507,0.0005690214798499782,0.0006273726778610016,0.0006986127612970389,0.0006139456342583727,0.0005937625376167046,0.0007219819327473379,0.00026252113710085865,0.0001509641696313817,0.00042251703860748447,0.0012225287886316214,0.00035631353744553033,0.0005105126799255722,0.001012324786246628,8.028730794373323e-05;0.004765731334736254,0.004590400824030031,0.006422485402218986,0.0061680920122239875,0.0071233195200754214,1.2644510410594478,0.019843781188913345,0.00364598179256587,0.005718512004735212,0.008211067915901331,0.012083736545786828,0.009160999252430788,0.00850880053187669,0.006172731943873271,0.009573704557650749,0.1013906900252491,0.004370903111055236,0.046568098738467824,0.004078746373872121,0.004029691111806602,0.0038028383189531237,0.006008940429791854,0.004427349175868896,0.004136837577334074,0.0036323115038675168,0.007733345931025334,0.003545324693798738,0.0025716606299042957,0.005687589034708736,0.003605938765232829,0.004978630160453792,0.004789938167723766,0.003814565202078859,0.007076993164147691,0.0009568026597337639;0.0151568484127685,0.013652070041629312,0.05343593287795411,0.036539319791490804,0.043382301834529985,0.03633122635485104,1.3182690800294974,0.013778301538727103,0.04533238429404102,0.047227144799209066,0.0456585453567583,0.025071840164475414,0.031915218005447325,0.037828401933141166,0.02935353767514267,0.04899968187930131,0.01618681517065885,0.02499835469048908,0.023546911305902155,0.028062389864148878,0.02703179341154203,0.029906849560649044,0.020109291094585237,0.020416112211913955,0.024500044243515477,0.03315483589777367,0.028558707014991115,0.03253247011984559,0.009992639334114659,0.04277398761247602,0.03303981996300888,0.030410215244771083,0.025188921174385474,0.047317003022401403,0.0022366779903126182;0.022462737288883677,0.019989789163665988,0.01861742604883342,0.021130039330156107,0.01890802978884603,0.020323218158936087,0.01627117150122393,1.0595177956338198,0.04881390967850515,0.027319490988711868,0.03112631385602597,0.02329849229339781,0.01562928370918257,0.012560976730878358,0.014721413421366115,0.01677200604641588,0.029650660839227655,0.024839601521417978,0.011533847087245381,0.011648631052612235,0.009388033579665361,0.012333801377693037,0.06257327742825096,0.09031189266036094,0.07901254364403762,0.027690207067247962,0.009118894765407908,0.005600145403102355,0.004347148342477111,0.010011022402089023,0.014069586840022718,0.007190644791724849,0.010804760896526608,0.012456600466161689,0.0019622219676489476;0.06892621728677194,0.02703142638399926,0.05225141484976933,0.14767719703752757,0.09832165529200473,0.07650301282925698,0.07575230728240245,0.03588565494904697,1.3231796083848493,0.31371164632386705,0.06423342121641148,0.04550954244984449,0.0471162176989337,0.05421289254915489,0.05772480042607565,0.07651415499964129,0.02109802893248605,0.040939100831496725,0.027284673622430176,0.013523790733245796,0.012108937592073979,0.02465196403874199,0.018934010265016517,0.020513664423614183,0.019498068471454362,0.018762999991946142,0.012763417948520756,0.008223116624827009,0.007611667079851794,0.016337713793638818,0.02344528315683159,0.011906030571674532,0.09414126651431443,0.02580200461616001,0.0036428337523053355;0.013398040333983048,0.015367515129769667,0.03204573963550701,0.02609226938050292,0.06411502239366676,0.023977193719781312,0.030101468972804427,0.013189904353912044,0.035758886090883464,1.147759226544851,0.023626370458618727,0.021957763168091466,0.04810413354516218,0.045850821955368534,0.06995862686720931,0.05655226853775945,0.010655215997546838,0.03320304417449913,0.03239157361206566,0.010388750429966632,0.01041780842382964,0.014232071395347568,0.020060572223144977,0.013929634160132093,0.013136143135839115,0.015381422730402858,0.010666764480885776,0.004689560565298102,0.00462088315269756,0.008569648486928018,0.01063179951419609,0.0050286091038826185,0.01360369413003379,0.010637610255384115,0.0016836041094740535;0.006085599170706528,0.00898408090138368,0.012618424501373817,0.008225717986377081,0.008491821917636914,0.017259377526212514,0.006318305566366459,0.007943879464057196,0.01354036631026491,0.01463782427097913,1.1333988174353067,0.021052799372019395,0.016005905387542346,0.021670434653711025,0.019124056315223372,0.015060797746946124,0.008218265166474947,0.09620821243426032,0.008458274034894771,0.004311545413843696,0.0038165862301646806,0.008789812073104274,0.005658760843676262,0.005355917080744235,0.004888838219098387,0.006304579123871006,0.0055265436934358566,0.0025598152167248998,0.0075489604333023085,0.004151048777951425,0.006120391994270357,0.005086243199202802,0.006266354173096833,0.00623482029360675,0.0010140613887892479;0.022659973559416947,0.05378418022984301,0.044486566912513785,0.03471111019748406,0.04396019448762648,0.07060962224441143,0.03779398060744064,0.042714469016621036,0.051266497577407574,0.0699185938059528,0.07786408974216613,1.4804530480040792,0.294299344323034,0.14915405026544612,0.2405714117513144,0.17582279076082027,0.03482580497332293,0.16174583947543208,0.06720459211099092,0.018985040558448303,0.017001658388013433,0.024369589846454858,0.03394932471104814,0.039497152648531694,0.03672526895127801,0.030627422918490327,0.02455848712761328,0.010285732137189073,0.01559986530938579,0.01878311488512403,0.026763772504593573,0.013196179522930451,0.01961995246455605,0.023114918756113257,0.005285697350225157;0.01364976714376583,0.024063549597592986,0.01484528438497535,0.019238601077237807,0.01675958195363557,0.020387804520540054,0.0166111688547765,0.02035772660558322,0.01803868456535954,0.023763818270345266,0.02757549290659265,0.03389430150899799,1.147027008647814,0.029617121799419614,0.06009504726995848,0.022502108487028792,0.01724745428508619,0.030791238072814534,0.03532327862772184,0.00879909059408622,0.0069681223844699535,0.008833122876442973,0.014534390959047393,0.018893476733568396,0.01357919848768306,0.011983687599539975,0.00874833517971459,0.004475054573325745,0.004672631715591582,0.007897935679171792,0.012858118996955048,0.0056454022819349805,0.0079735139681368,0.009411928710899473,0.002156907669616842;0.014163946257224377,0.02302317881621854,0.023541687028201818,0.031066677396741373,0.028584397225255444,0.031682883201251996,0.037612938808098406,0.023061230230723335,0.03705151173305598,0.04645324969601171,0.036609646684920547,0.0560913468380045,0.1608344642252089,1.4348061299647383,0.13820685270422012,0.06066374169306031,0.03748346461549048,0.06755613101442368,0.0654425817107805,0.02590798553659517,0.023388890966158846,0.020893500502452145,0.02766417546210685,0.028498247417155877,0.02886499117710591,0.028862692961727717,0.079549713665847,0.01799082154363147,0.010873050142042161,0.03544483279845756,0.034877310619616665,0.016734282844165546,0.04154462927703665,0.02925620862392828,0.0032495497658931788;0.012788828285635111,0.01622141908384559,0.01516712850259384,0.015606384205943184,0.016484062014815243,0.017191305574423558,0.013357269540110548,0.01355592311092979,0.014291498732997888,0.017089108612138977,0.01679967717015323,0.020383372447889358,0.03205462325263998,0.017897890641213162,1.4259851568199446,0.017897456356458615,0.011467742237806578,0.01717582625374213,0.13696004205826556,0.01428641583954516,0.011629506504023088,0.00971563536545805,0.05683013551338342,0.07361807731453991,0.08097917990854533,0.03036448098789904,0.011489759948189847,0.006243545584131671,0.00427751443879606,0.011678557082846132,0.030435219501945898,0.005966821648134101,0.007701404675716916,0.012084723135771809,0.0017836596723206347;0.0023164675345173406,0.003242055411746305,0.003962588993322351,0.010245848427771716,0.007214841996111534,0.00936063772010854,0.007453145288583552,0.0031179642918018617,0.004979191854163676,0.006360492316056046,0.006404106187801419,0.016758547425711742,0.00992580904104556,0.007244659901711592,0.011743452027978721,1.0484923541243714,0.003332509609090507,0.009492238845038461,0.005445158369693011,0.0028744319358690058,0.0030377506234580184,0.004941905157357011,0.003976623274580039,0.003578654509531406,0.003922918973029751,0.004088768547074017,0.002990955315724316,0.0026044068699616224,0.002676998598174021,0.003940676383045886,0.005945203592866645,0.004715023505068177,0.004632101875487587,0.008124827372708096,0.002753627777518674;0.022696000384220327,0.03969532217773825,0.033305578230763175,0.044004140971765394,0.030987347512695575,0.04152076686112342,0.04582442658615427,0.03760675594380613,0.054887485844403054,0.050785037511050235,0.06247714533132239,0.05764195197268343,0.0357648843565856,0.0294412996449621,0.035370629803452305,0.033226908912202494,1.1104108920419147,0.027672418058712338,0.023644615005235698,0.014908859446077864,0.023329232997169103,0.03981929521407715,0.02816990328398798,0.019717063982020482,0.018671149396024118,0.02706591604032181,0.01943130987940125,0.012941767775234295,0.01792052279979622,0.016682680564699147,0.026899498673957255,0.02779997054407608,0.026243638595813964,0.02862376363140575,0.003586596766521094;0.008687389569540661,0.012312217922005852,0.010437726771014155,0.01088637180592623,0.010119165677140232,0.012263387275775823,0.011717001013790255,0.010782014854358262,0.012066735523972008,0.011651495181163561,0.015785838979854104,0.013669681142352378,0.01160822428389908,0.010105903582785352,0.010936013084766534,0.010670207290475091,0.034221736120239245,1.0514851997095827,0.010779155027762503,0.00920744943355024,0.01085477164066335,0.012986453930606236,0.01620241150851374,0.012282341626633976,0.010320658625941006,0.021582631457858156,0.01826255613998413,0.01128751114338744,0.04782462391330903,0.011046616023628567,0.025242642959685188,0.019924799978142203,0.013076720377988047,0.01802588724798873,0.0026902861626986714;0.009489258206837365,0.008100310747784329,0.01477745294346304,0.014342512133163732,0.017475037152118376,0.014123692452367024,0.011817703891103017,0.009153539105585157,0.01377001319774481,0.014405846506543767,0.014373919983447945,0.014165311611589402,0.012924559612083452,0.011328308780204192,0.014246043679369666,0.013820988242646406,0.013540817430520978,0.014227146568733124,1.015552226218662,0.007462261142911957,0.007270922845218811,0.010599165857527149,0.022034436959712835,0.009156462991105547,0.008975118953801431,0.013184589749798567,0.008241582111172584,0.005898931439432522,0.004185912767453603,0.009699020416774111,0.008265650915401473,0.005537736171688553,0.007542000254097198,0.011138126924491005,0.0009045625089838557;0.06050242793152818,0.04837063160441804,0.11313118720264034,0.1104794928752943,0.13519449492543498,0.10513831524333124,0.09169628859234052,0.07210031885831268,0.09326220635821549,0.09863306915632736,0.08076112313385538,0.0942033515520344,0.09720425270808201,0.09281969391827745,0.10681919239430958,0.09995673114318404,0.04705849242995827,0.08137037156824777,0.0657616228967029,1.0440242048948525,0.02768824219170423,0.07678301883348318,0.046290430318483185,0.051577022690053494,0.04947986825799928,0.04541040781698932,0.02939578097601018,0.01717950986260274,0.013355741200031067,0.030363936428704316,0.03985539669912935,0.022766351292222754,0.04877822807898727,0.03647433921033613,0.005378896761974894;0.028995817247209482,0.018798991766983766,0.05294311411204369,0.05286758407922252,0.06907703107057306,0.04208289565454398,0.03662746444874533,0.024463637419946654,0.04156677434846091,0.042393942631174894,0.03438419880164321,0.03506360483255356,0.03612185276890802,0.032421492863185256,0.04445807924415429,0.04513708896690521,0.0184159235484361,0.045416619745430827,0.02860887459901268,0.014626905208266275,1.0145846641055722,0.040898478036920635,0.024882095426168205,0.02250480312041685,0.021775297558743592,0.021042255224433523,0.018140534430845193,0.01108054921328145,0.008236215206295996,0.01766375453863288,0.017318609272260116,0.01149468151284498,0.021546434194078905,0.02202843971022773,0.0026210775022490703;0.005797722105551755,0.008285265933966302,0.011664438951052727,0.013124315121239313,0.013523816861833687,0.013130633319124878,0.014943093816085223,0.00787655815232714,0.013247200504837336,0.014612092809877776,0.013144281383867341,0.013416186829188508,0.015362484152623559,0.014256712307132855,0.012968614669576979,0.012704874076668659,0.012779178357312022,0.01262489607208455,0.012246237463305821,0.013886611032942859,0.010759560714494333,1.016539698507842,0.014636230098099164,0.014317974956649692,0.031254515924793703,0.027986576782976887,0.015170810358786513,0.016547008753621684,0.005939208656634025,0.02074278825271926,0.01603161786375922,0.01004822730654063,0.01380421049619336,0.018806179976604477,0.000984622411036181;0.027275632057792498,0.034296113868932915,0.04792107862092354,0.046345152380280495,0.05066903751999482,0.050155006419772254,0.040608980369397675,0.05003427838280963,0.0414853621391404,0.04152777519648278,0.05718227764866699,0.04221195763517262,0.03448365092345563,0.027573180722369358,0.038009486669939946,0.04168217475227706,0.0397451748059472,0.03765036137523837,0.027537929116290306,0.029131477132485418,0.01973912794840156,0.026424414116373127,1.0626240417848767,0.07354333602904044,0.03432815961488102,0.08152657022651347,0.019454614911446858,0.013357256570876996,0.00715064768719393,0.01538429777234329,0.021581774869328177,0.01723754734893264,0.018230221058729075,0.020947902803572553,0.003631910429972373;0.00680651959548118,0.008801209083221894,0.010584179865202497,0.010156142194405745,0.012902359308992062,0.015312475453664607,0.008005328608286209,0.011493999288270763,0.00821361824412222,0.00854491072540105,0.013456088549265034,0.013026008960549208,0.00830229887641286,0.006666485333724074,0.008002484421310496,0.008030288541225596,0.006283971711334158,0.009389205961330842,0.0039329708824350105,0.004681028632939375,0.00311683110020726,0.005616386105942734,0.00635717616113152,1.113911692753409,0.007065193918564361,0.010084631345250865,0.002736719370082386,0.0017846352584665519,0.001319343714603602,0.0026670205526079915,0.0033087039399063195,0.00283130725948563,0.002669488155491473,0.003424531414548139,0.0007962121095587707;0.0025947668658133716,0.004024063637394293,0.004779825722806468,0.005678619327686185,0.007239708129903318,0.005067175285863036,0.006254847882571599,0.0037326602103456594,0.005563415857017986,0.005810107457111738,0.004851841953373312,0.005054004994243499,0.006055773429117811,0.005914495048327422,0.006256714607549777,0.005052336617263534,0.00354918494846321,0.0043924046637431905,0.004579761623600437,0.005973605283374287,0.0036004207457907556,0.003833296675079251,0.005129273729293587,0.010288225853105739,1.0413144564202699,0.025446232232493593,0.007116374796420287,0.006114153339245491,0.001833699711836543,0.007274200675339792,0.006642901475910643,0.0035555636302517916,0.003413794250222627,0.007372842578049193,0.00042049893422746416;0.011927886699219275,0.014197597002074224,0.02103600017430793,0.01859331451412033,0.022229407262154707,0.023216750544895692,0.023176193456326457,0.018830321486824862,0.018627200969116398,0.019192325685566045,0.022935072228881297,0.01967897715728653,0.018138457684543686,0.01561816028190251,0.019813047166864228,0.018257415124302637,0.013551631968006718,0.016602833902773288,0.01892915531230623,0.030934313831050445,0.01718380035124508,0.01826437642555054,0.05568533913546213,0.1755241145835855,0.12023173373471062,1.1321133893433355,0.011919010603183082,0.01002269474986616,0.004060780700591849,0.012193433696084471,0.012089076088613029,0.007280953383522073,0.009821667557487875,0.014183126818461511,0.0014505666453772665;0.012144243078644357,0.017065720828276405,0.021349190704375052,0.023704811109179994,0.0258366253076353,0.022688814067371024,0.033686181885666355,0.01679413016604003,0.026604692737577318,0.025188783675860884,0.02284305718140224,0.023796048542776546,0.026584787670117807,0.025512944516976666,0.024661753308139786,0.02512307333615014,0.0193751922724927,0.028514585762781295,0.02789743357582693,0.03373887019902625,0.033459896607217,0.027579616857411712,0.030790160815930716,0.039904710517005344,0.04836841436682722,0.0440256258053702,1.149488272045062,0.04853054596357885,0.013118325349183564,0.041314745094267205,0.03429640676608435,0.017441303757426797,0.024789852090657885,0.04134765020114498,0.002301446809605935;0.0494499751421266,0.061865315536258424,0.06282151248741083,0.0725189461844075,0.06810043077162405,0.06779871299999403,0.07100054935102161,0.05598729050667378,0.06501527514840573,0.06504169731424238,0.06689854849894333,0.06611708168217435,0.06473762178211706,0.057209894509674085,0.06467249523613325,0.06808009740719378,0.061673934980330414,0.06449253948727884,0.05851215395469084,0.06903721994032427,0.0649833298170555,0.06291087408686251,0.08635144122471312,0.09218703390931494,0.08288108111962557,0.06668028830788218,0.05434522564923382,1.266999179865925,0.08803488487570903,0.07383039989211042,0.05413343194688462,0.030955838793978053,0.05321935110527128,0.07535826770307497,0.012748955540948547;0.015195327728598723,0.014948390997265713,0.02182667011351128,0.02275859032202039,0.024144799950047622,0.022609583191118453,0.027146363054566063,0.014928238328476449,0.021354962289218373,0.023156183532824177,0.01973901368011946,0.02158347623375969,0.022827653784443073,0.020397498353428033,0.023189527120605246,0.024081736248398773,0.01718936612894841,0.025347608978743358,0.0364773095523667,0.03529138141946724,0.05293247893377091,0.042348711157217576,0.022819736312304696,0.03906592849212543,0.031069944236695807,0.03723380983913593,0.02938998906040398,0.0401173825541157,1.042699588622669,0.03794520733535178,0.025191107888029966,0.025585947215967988,0.04523063121707455,0.0410144925405366,0.002020085678130081;0.05103732488027227,0.07210485319481656,0.10650253468872076,0.10358007416065687,0.10261305077942164,0.0918674692869233,0.14617868879196813,0.06934772019474851,0.1474475190502667,0.1200220684642378,0.09743029289434502,0.10059829020306438,0.12118323745327098,0.13362734110611482,0.12954894873479822,0.10615854427296524,0.09299836726648818,0.12298250371560297,0.10328071629775147,0.09876336146165225,0.10520581916988277,0.09387601480970871,0.09580009139725476,0.10904510159234723,0.167233340142698,0.1310243733119747,0.13056316687806235,0.1634653358709497,0.06393509306571594,1.1990994560525166,0.11201573932942882,0.05746231195421783,0.10448795434917553,0.13360115024588037,0.009748231809155943;0.003384867290108105,0.005530668556494749,0.00502481717324549,0.004354635084245664,0.004208377695822194,0.007064544386343963,0.006402077448912999,0.00437174841243972,0.006235883045079842,0.005674369892911458,0.00531541894826027,0.005771095489965503,0.0043883996789360336,0.004201241691308752,0.004775525695046008,0.0053026135753508254,0.007394260081912836,0.004629411630296087,0.004334887790629828,0.0032111557666246555,0.004794720858515792,0.006044049406733382,0.005036406025768098,0.010093685309797552,0.011151011692322518,0.005958494886566971,0.005120019037375802,0.003501820891071615,0.004185280182261146,0.00476800179236078,1.0091582841676112,0.00533361049093551,0.006540615204084912,0.010383008097718333,0.0005082696269624369;0.0013994902325620369,0.0012153807510500824,0.0017615075137141516,0.0017271139890839807,0.0018058596903764584,0.001576185334929483,0.0020620666771458017,0.001335797897806238,0.002359668169906927,0.002041196131102336,0.0017368683348692794,0.0019130390606694535,0.002183096503761532,0.0022467979240529228,0.002389969236834024,0.0016635185743310115,0.0018909748851992628,0.0016757540740856955,0.0017016535879738007,0.0015685003700758877,0.0024709842987537304,0.0015051038518460928,0.002139793616751225,0.0016234913397952864,0.002964024491173827,0.0023085432001164826,0.002552237801943611,0.0023090411252752923,0.0007801349138115981,0.0033756585229802087,0.005331203293422406,1.0101394460676523,0.0019510683762128252,0.0026469684959765393,0.0001439686212803761;0.0022189350728156034,0.0008440214322404981,0.0016735355310749044,0.0013072951113728094,0.0019891479915703034,0.0013842144807607929,0.001193951706083334,0.0007931762352856474,0.001281281426507716,0.001213426295270895,0.0010702840099701468,0.0011070143684604958,0.0012931245154882089,0.0011078977279904553,0.0012102117802341218,0.0012235318301301638,0.0008699586936446179,0.0011732756703907083,0.0011189124084733156,0.001032094873199264,0.000866191798183035,0.0018508877790528481,0.0012814268764411662,0.0011144853071294392,0.0011908667946838123,0.0012627799342158949,0.0012564207734781765,0.0010842748004452872,0.0003673050287061797,0.0013201294331846819,0.006208139039531724,0.001810085245787913,1.0261100503849014,0.001953197667295883,0.00011231088854617936;0.009596665340662603,0.014348058314192832,0.01872163690696117,0.019214368430332075,0.02120484340268508,0.018230821625241877,0.03027382749154273,0.013711494925465058,0.0228267003885938,0.020239086278162895,0.017760062212896416,0.020364459686302495,0.02021524974648194,0.018512719767655842,0.01987328473984499,0.019761138325226347,0.016066483286575364,0.01905209687031583,0.019383586194270386,0.01706883573243486,0.01785007766060013,0.02473876039223077,0.01833452280240452,0.01887586531013795,0.02277329871374898,0.024271466571283734,0.03271323554484815,0.02307196609149867,0.013582909152918573,0.04135912566492901,0.025573811449244303,0.016706304884332224,0.02540064454803539,1.0965479271450236,0.0029353509031559656;5.061027902977088e-05,5.48363848593264e-05,8.694824578114912e-05,0.00012703020273633034,9.795910824681096e-05,0.00010001728968306195,0.00010651545430825267,5.773890697132936e-05,9.6577142321681e-05,0.00010630200665173049,7.597096875562831e-05,8.183253354898258e-05,8.747629343969709e-05,7.635734744192307e-05,0.00011437224571410136,8.76402563304917e-05,5.865990436523581e-05,0.00013536042952910492,0.00015657094953472692,6.18247403414858e-05,9.673925168155546e-05,0.00011288464059979435,0.00015341280168046145,7.69541331107761e-05,8.513815888994254e-05,8.334489989850731e-05,0.00011102188076965717,0.00012097184095907872,0.00032004201126899066,0.00012510923659328122,0.00012486762384425338,7.067381584238947e-05,0.00016113360049133205,0.00019559299092329342,1.0000823935857779;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            1.17557246e+00, 6.02766542e-03, 3.60851853e-01, 7.11276783e-02, 9.77218124e-02,
            1.95749199e-01, 2.71552215e-02, 8.21416733e-03, 1.81265028e-02, 2.78203334e-02,
            8.88535993e-03, 7.09810986e-03, 7.59843642e-03, 6.84687835e-03, 8.48959009e-03,
            3.53615683e-02, 5.18248592e-03, 2.08856845e-02, 5.81357865e-03, 8.62341007e-03,
            7.58130127e-03, 1.02120942e-01, 6.61982658e-03, 1.15551032e-02, 8.32112824e-03,
            1.20438054e-02, 4.94042578e-03, 4.10081408e-03, 3.32518556e-03, 6.23844967e-03,
            1.00165229e-02, 8.72673770e-03, 1.27506795e-02, 1.14279885e-02, 1.92144286e-02
        ],
              [
                  2.44486476e-02, 1.11904765e+00, 2.60637113e-02, 2.96537470e-02, 2.45236916e-02,
                  3.19472187e-02, 2.79688034e-02, 5.38574025e-01, 8.79340087e-02, 4.36147870e-02,
                  1.24100089e-01, 1.00017030e-01, 3.68916980e-02, 2.52624745e-02, 3.22660922e-02,
                  3.47663253e-02, 1.62904819e-01, 5.88962193e-02, 1.61257418e-02, 1.16720816e-02,
                  1.15300848e-02, 1.84119587e-02, 4.47906963e-02, 5.73584987e-02, 4.88731484e-02,
                  2.42933981e-02, 1.12836470e-02, 6.97947723e-03, 9.60291156e-03, 1.15402608e-02,
                  1.72862850e-02, 1.48804780e-02, 1.67386638e-02, 1.71568773e-02, 7.24939234e-02
              ],
              [
                  7.68158023e-02, 4.41120574e-03, 1.19372836e+00, 1.58400576e-02, 1.33772807e-01,
                  1.95806777e-02, 1.14618897e-02, 5.26252949e-03, 1.95842204e-02, 1.34885970e-02,
                  7.79096027e-03, 6.97778224e-03, 7.63078404e-03, 7.17829174e-03, 7.78335322e-03,
                  1.07902732e-02, 5.16906365e-03, 7.48999462e-03, 6.56951748e-03, 9.49333204e-03,
                  8.42071986e-03, 1.84998061e-01, 6.38984014e-03, 1.81442472e-02, 1.21239227e-02,
                  1.03190525e-02, 6.44437351e-03, 5.34821520e-03, 2.36087904e-03, 7.63064707e-03,
                  1.46339614e-02, 1.32655911e-02, 2.21430229e-02, 1.40721472e-02, 4.81377800e-03
              ],
              [
                  5.69178389e-03, 4.01296624e-03, 6.72574980e-03, 1.41056731e+00, 9.87694376e-02,
                  1.15041591e-02, 1.39589237e-02, 3.79491843e-03, 9.98516376e-03, 2.79201949e-02,
                  1.04118339e-02, 6.54648159e-03, 8.54356230e-03, 7.33786114e-03, 1.73101437e-02,
                  4.03566395e-02, 2.99538299e-03, 7.87988778e-03, 6.07164337e-03, 5.36074302e-03,
                  6.01438762e-03, 6.95837494e-03, 5.07504924e-03, 6.62802252e-03, 4.87897529e-03,
                  5.23640930e-03, 3.79260301e-03, 2.40873123e-03, 1.54460737e-03, 3.83220989e-03,
                  7.44926939e-03, 2.87996728e-03, 7.35896025e-03, 1.07475626e-02, 9.33365873e-04
              ],
              [
                  5.13770009e-04, 4.52609289e-04, 7.21760505e-04, 1.12311473e-02, 1.23911337e+00,
                  1.48915399e-03, 1.77184317e-03, 4.51795259e-04, 8.11767148e-04, 2.22464470e-03,
                  1.11312791e-03, 9.62495980e-04, 1.05960675e-03, 9.02295779e-04, 3.12367906e-03,
                  5.41583948e-03, 4.59653306e-04, 7.49819860e-04, 1.08408057e-03, 7.98307294e-04,
                  6.94302063e-04, 5.69021480e-04, 6.27372678e-04, 6.98612761e-04, 6.13945634e-04,
                  5.93762538e-04, 7.21981933e-04, 2.62521137e-04, 1.50964170e-04, 4.22517039e-04,
                  1.22252879e-03, 3.56313537e-04, 5.10512680e-04, 1.01232479e-03, 8.02873079e-05
              ],
              [
                  4.76573133e-03, 4.59040082e-03, 6.42248540e-03, 6.16809201e-03, 7.12331952e-03,
                  1.26445104e+00, 1.98437812e-02, 3.64598179e-03, 5.71851200e-03, 8.21106792e-03,
                  1.20837365e-02, 9.16099925e-03, 8.50880053e-03, 6.17273194e-03, 9.57370456e-03,
                  1.01390690e-01, 4.37090311e-03, 4.65680987e-02, 4.07874637e-03, 4.02969111e-03,
                  3.80283832e-03, 6.00894043e-03, 4.42734918e-03, 4.13683758e-03, 3.63231150e-03,
                  7.73334593e-03, 3.54532469e-03, 2.57166063e-03, 5.68758903e-03, 3.60593877e-03,
                  4.97863016e-03, 4.78993817e-03, 3.81456520e-03, 7.07699316e-03, 9.56802660e-04
              ],
              [
                  1.51568484e-02, 1.36520700e-02, 5.34359329e-02, 3.65393198e-02, 4.33823018e-02,
                  3.63312264e-02, 1.31826908e+00, 1.37783015e-02, 4.53323843e-02, 4.72271448e-02,
                  4.56585454e-02, 2.50718402e-02, 3.19152180e-02, 3.78284019e-02, 2.93535377e-02,
                  4.89996819e-02, 1.61868152e-02, 2.49983547e-02, 2.35469113e-02, 2.80623899e-02,
                  2.70317934e-02, 2.99068496e-02, 2.01092911e-02, 2.04161122e-02, 2.45000442e-02,
                  3.31548359e-02, 2.85587070e-02, 3.25324701e-02, 9.99263933e-03, 4.27739876e-02,
                  3.30398200e-02, 3.04102152e-02, 2.51889212e-02, 4.73170030e-02, 2.23667799e-03
              ],
              [
                  2.24627373e-02, 1.99897892e-02, 1.86174260e-02, 2.11300393e-02, 1.89080298e-02,
                  2.03232182e-02, 1.62711715e-02, 1.05951780e+00, 4.88139097e-02, 2.73194910e-02,
                  3.11263139e-02, 2.32984923e-02, 1.56292837e-02, 1.25609767e-02, 1.47214134e-02,
                  1.67720060e-02, 2.96506608e-02, 2.48396015e-02, 1.15338471e-02, 1.16486311e-02,
                  9.38803358e-03, 1.23338014e-02, 6.25732774e-02, 9.03118927e-02, 7.90125436e-02,
                  2.76902071e-02, 9.11889477e-03, 5.60014540e-03, 4.34714834e-03, 1.00110224e-02,
                  1.40695868e-02, 7.19064479e-03, 1.08047609e-02, 1.24566005e-02, 1.96222197e-03
              ],
              [
                  6.89262173e-02, 2.70314264e-02, 5.22514148e-02, 1.47677197e-01, 9.83216553e-02,
                  7.65030128e-02, 7.57523073e-02, 3.58856549e-02, 1.32317961e+00, 3.13711646e-01,
                  6.42334212e-02, 4.55095424e-02, 4.71162177e-02, 5.42128925e-02, 5.77248004e-02,
                  7.65141550e-02, 2.10980289e-02, 4.09391008e-02, 2.72846736e-02, 1.35237907e-02,
                  1.21089376e-02, 2.46519640e-02, 1.89340103e-02, 2.05136644e-02, 1.94980685e-02,
                  1.87630000e-02, 1.27634179e-02, 8.22311662e-03, 7.61166708e-03, 1.63377138e-02,
                  2.34452832e-02, 1.19060306e-02, 9.41412665e-02, 2.58020046e-02, 3.64283375e-03
              ],
              [
                  1.33980403e-02, 1.53675151e-02, 3.20457396e-02, 2.60922694e-02, 6.41150224e-02,
                  2.39771937e-02, 3.01014690e-02, 1.31899044e-02, 3.57588861e-02, 1.14775923e+00,
                  2.36263705e-02, 2.19577632e-02, 4.81041335e-02, 4.58508220e-02, 6.99586269e-02,
                  5.65522685e-02, 1.06552160e-02, 3.32030442e-02, 3.23915736e-02, 1.03887504e-02,
                  1.04178084e-02, 1.42320714e-02, 2.00605722e-02, 1.39296342e-02, 1.31361431e-02,
                  1.53814227e-02, 1.06667645e-02, 4.68956057e-03, 4.62088315e-03, 8.56964849e-03,
                  1.06317995e-02, 5.02860910e-03, 1.36036941e-02, 1.06376103e-02, 1.68360411e-03
              ],
              [
                  6.08559917e-03, 8.98408090e-03, 1.26184245e-02, 8.22571799e-03, 8.49182192e-03,
                  1.72593775e-02, 6.31830557e-03, 7.94387946e-03, 1.35403663e-02, 1.46378243e-02,
                  1.13339882e+00, 2.10527994e-02, 1.60059054e-02, 2.16704347e-02, 1.91240563e-02,
                  1.50607977e-02, 8.21826517e-03, 9.62082124e-02, 8.45827403e-03, 4.31154541e-03,
                  3.81658623e-03, 8.78981207e-03, 5.65876084e-03, 5.35591708e-03, 4.88883822e-03,
                  6.30457912e-03, 5.52654369e-03, 2.55981522e-03, 7.54896043e-03, 4.15104878e-03,
                  6.12039199e-03, 5.08624320e-03, 6.26635417e-03, 6.23482029e-03, 1.01406139e-03
              ],
              [
                  2.26599736e-02, 5.37841802e-02, 4.44865669e-02, 3.47111102e-02, 4.39601945e-02,
                  7.06096222e-02, 3.77939806e-02, 4.27144690e-02, 5.12664976e-02, 6.99185938e-02,
                  7.78640897e-02, 1.48045305e+00, 2.94299344e-01, 1.49154050e-01, 2.40571412e-01,
                  1.75822791e-01, 3.48258050e-02, 1.61745839e-01, 6.72045921e-02, 1.89850406e-02,
                  1.70016584e-02, 2.43695898e-02, 3.39493247e-02, 3.94971526e-02, 3.67252690e-02,
                  3.06274229e-02, 2.45584871e-02, 1.02857321e-02, 1.55998653e-02, 1.87831149e-02,
                  2.67637725e-02, 1.31961795e-02, 1.96199525e-02, 2.31149188e-02, 5.28569735e-03
              ],
              [
                  1.36497671e-02, 2.40635496e-02, 1.48452844e-02, 1.92386011e-02, 1.67595820e-02,
                  2.03878045e-02, 1.66111689e-02, 2.03577266e-02, 1.80386846e-02, 2.37638183e-02,
                  2.75754929e-02, 3.38943015e-02, 1.14702701e+00, 2.96171218e-02, 6.00950473e-02,
                  2.25021085e-02, 1.72474543e-02, 3.07912381e-02, 3.53232786e-02, 8.79909059e-03,
                  6.96812238e-03, 8.83312288e-03, 1.45343910e-02, 1.88934767e-02, 1.35791985e-02,
                  1.19836876e-02, 8.74833518e-03, 4.47505457e-03, 4.67263172e-03, 7.89793568e-03,
                  1.28581190e-02, 5.64540228e-03, 7.97351397e-03, 9.41192871e-03, 2.15690767e-03
              ],
              [
                  1.41639463e-02, 2.30231788e-02, 2.35416870e-02, 3.10666774e-02, 2.85843972e-02,
                  3.16828832e-02, 3.76129388e-02, 2.30612302e-02, 3.70515117e-02, 4.64532497e-02,
                  3.66096467e-02, 5.60913468e-02, 1.60834464e-01, 1.43480613e+00, 1.38206853e-01,
                  6.06637417e-02, 3.74834646e-02, 6.75561310e-02, 6.54425817e-02, 2.59079855e-02,
                  2.33888910e-02, 2.08935005e-02, 2.76641755e-02, 2.84982474e-02, 2.88649912e-02,
                  2.88626930e-02, 7.95497137e-02, 1.79908215e-02, 1.08730501e-02, 3.54448328e-02,
                  3.48773106e-02, 1.67342828e-02, 4.15446293e-02, 2.92562086e-02, 3.24954977e-03
              ],
              [
                  1.27888283e-02, 1.62214191e-02, 1.51671285e-02, 1.56063842e-02, 1.64840620e-02,
                  1.71913056e-02, 1.33572695e-02, 1.35559231e-02, 1.42914987e-02, 1.70891086e-02,
                  1.67996772e-02, 2.03833724e-02, 3.20546233e-02, 1.78978906e-02, 1.42598516e+00,
                  1.78974564e-02, 1.14677422e-02, 1.71758263e-02, 1.36960042e-01, 1.42864158e-02,
                  1.16295065e-02, 9.71563537e-03, 5.68301355e-02, 7.36180773e-02, 8.09791799e-02,
                  3.03644810e-02, 1.14897599e-02, 6.24354558e-03, 4.27751444e-03, 1.16785571e-02,
                  3.04352195e-02, 5.96682165e-03, 7.70140468e-03, 1.20847231e-02, 1.78365967e-03
              ],
              [
                  2.31646753e-03, 3.24205541e-03, 3.96258899e-03, 1.02458484e-02, 7.21484200e-03,
                  9.36063772e-03, 7.45314529e-03, 3.11796429e-03, 4.97919185e-03, 6.36049232e-03,
                  6.40410619e-03, 1.67585474e-02, 9.92580904e-03, 7.24465990e-03, 1.17434520e-02,
                  1.04849235e+00, 3.33250961e-03, 9.49223885e-03, 5.44515837e-03, 2.87443194e-03,
                  3.03775062e-03, 4.94190516e-03, 3.97662327e-03, 3.57865451e-03, 3.92291897e-03,
                  4.08876855e-03, 2.99095532e-03, 2.60440687e-03, 2.67699860e-03, 3.94067638e-03,
                  5.94520359e-03, 4.71502351e-03, 4.63210188e-03, 8.12482737e-03, 2.75362778e-03
              ],
              [
                  2.26960004e-02, 3.96953222e-02, 3.33055782e-02, 4.40041410e-02, 3.09873475e-02,
                  4.15207669e-02, 4.58244266e-02, 3.76067559e-02, 5.48874858e-02, 5.07850375e-02,
                  6.24771453e-02, 5.76419520e-02, 3.57648844e-02, 2.94412996e-02, 3.53706298e-02,
                  3.32269089e-02, 1.11041089e+00, 2.76724181e-02, 2.36446150e-02, 1.49088594e-02,
                  2.33292330e-02, 3.98192952e-02, 2.81699033e-02, 1.97170640e-02, 1.86711494e-02,
                  2.70659160e-02, 1.94313099e-02, 1.29417678e-02, 1.79205228e-02, 1.66826806e-02,
                  2.68994987e-02, 2.77999705e-02, 2.62436386e-02, 2.86237636e-02, 3.58659677e-03
              ],
              [
                  8.68738957e-03, 1.23122179e-02, 1.04377268e-02, 1.08863718e-02, 1.01191657e-02,
                  1.22633873e-02, 1.17170010e-02, 1.07820149e-02, 1.20667355e-02, 1.16514952e-02,
                  1.57858390e-02, 1.36696811e-02, 1.16082243e-02, 1.01059036e-02, 1.09360131e-02,
                  1.06702073e-02, 3.42217361e-02, 1.05148520e+00, 1.07791550e-02, 9.20744943e-03,
                  1.08547716e-02, 1.29864539e-02, 1.62024115e-02, 1.22823416e-02, 1.03206586e-02,
                  2.15826315e-02, 1.82625561e-02, 1.12875111e-02, 4.78246239e-02, 1.10466160e-02,
                  2.52426430e-02, 1.99248000e-02, 1.30767204e-02, 1.80258872e-02, 2.69028616e-03
              ],
              [
                  9.48925821e-03, 8.10031075e-03, 1.47774529e-02, 1.43425121e-02, 1.74750372e-02,
                  1.41236925e-02, 1.18177039e-02, 9.15353911e-03, 1.37700132e-02, 1.44058465e-02,
                  1.43739200e-02, 1.41653116e-02, 1.29245596e-02, 1.13283088e-02, 1.42460437e-02,
                  1.38209882e-02, 1.35408174e-02, 1.42271466e-02, 1.01555223e+00, 7.46226114e-03,
                  7.27092285e-03, 1.05991659e-02, 2.20344370e-02, 9.15646299e-03, 8.97511895e-03,
                  1.31845897e-02, 8.24158211e-03, 5.89893144e-03, 4.18591277e-03, 9.69902042e-03,
                  8.26565092e-03, 5.53773617e-03, 7.54200025e-03, 1.11381269e-02, 9.04562509e-04
              ],
              [
                  6.05024279e-02, 4.83706316e-02, 1.13131187e-01, 1.10479493e-01, 1.35194495e-01,
                  1.05138315e-01, 9.16962886e-02, 7.21003189e-02, 9.32622064e-02, 9.86330692e-02,
                  8.07611231e-02, 9.42033516e-02, 9.72042527e-02, 9.28196939e-02, 1.06819192e-01,
                  9.99567311e-02, 4.70584924e-02, 8.13703716e-02, 6.57616229e-02, 1.04402420e+00,
                  2.76882422e-02, 7.67830188e-02, 4.62904303e-02, 5.15770227e-02, 4.94798683e-02,
                  4.54104078e-02, 2.93957810e-02, 1.71795099e-02, 1.33557412e-02, 3.03639364e-02,
                  3.98553967e-02, 2.27663513e-02, 4.87782281e-02, 3.64743392e-02, 5.37889676e-03
              ],
              [
                  2.89958172e-02, 1.87989918e-02, 5.29431141e-02, 5.28675841e-02, 6.90770311e-02,
                  4.20828957e-02, 3.66274644e-02, 2.44636374e-02, 4.15667743e-02, 4.23939426e-02,
                  3.43841988e-02, 3.50636048e-02, 3.61218528e-02, 3.24214929e-02, 4.44580792e-02,
                  4.51370890e-02, 1.84159235e-02, 4.54166197e-02, 2.86088746e-02, 1.46269052e-02,
                  1.01458466e+00, 4.08984780e-02, 2.48820954e-02, 2.25048031e-02, 2.17752976e-02,
                  2.10422552e-02, 1.81405344e-02, 1.10805492e-02, 8.23621521e-03, 1.76637545e-02,
                  1.73186093e-02, 1.14946815e-02, 2.15464342e-02, 2.20284397e-02, 2.62107750e-03
              ],
              [
                  5.79772211e-03, 8.28526593e-03, 1.16644390e-02, 1.31243151e-02, 1.35238169e-02,
                  1.31306333e-02, 1.49430938e-02, 7.87655815e-03, 1.32472005e-02, 1.46120928e-02,
                  1.31442814e-02, 1.34161868e-02, 1.53624842e-02, 1.42567123e-02, 1.29686147e-02,
                  1.27048741e-02, 1.27791784e-02, 1.26248961e-02, 1.22462375e-02, 1.38866110e-02,
                  1.07595607e-02, 1.01653970e+00, 1.46362301e-02, 1.43179750e-02, 3.12545159e-02,
                  2.79865768e-02, 1.51708104e-02, 1.65470088e-02, 5.93920866e-03, 2.07427883e-02,
                  1.60316179e-02, 1.00482273e-02, 1.38042105e-02, 1.88061800e-02, 9.84622411e-04
              ],
              [
                  2.72756321e-02, 3.42961139e-02, 4.79210786e-02, 4.63451524e-02, 5.06690375e-02,
                  5.01550064e-02, 4.06089804e-02, 5.00342784e-02, 4.14853621e-02, 4.15277752e-02,
                  5.71822776e-02, 4.22119576e-02, 3.44836509e-02, 2.75731807e-02, 3.80094867e-02,
                  4.16821748e-02, 3.97451748e-02, 3.76503614e-02, 2.75379291e-02, 2.91314771e-02,
                  1.97391279e-02, 2.64244141e-02, 1.06262404e+00, 7.35433360e-02, 3.43281596e-02,
                  8.15265702e-02, 1.94546149e-02, 1.33572566e-02, 7.15064769e-03, 1.53842978e-02,
                  2.15817749e-02, 1.72375473e-02, 1.82302211e-02, 2.09479028e-02, 3.63191043e-03
              ],
              [
                  6.80651960e-03, 8.80120908e-03, 1.05841799e-02, 1.01561422e-02, 1.29023593e-02,
                  1.53124755e-02, 8.00532861e-03, 1.14939993e-02, 8.21361824e-03, 8.54491073e-03,
                  1.34560885e-02, 1.30260090e-02, 8.30229888e-03, 6.66648533e-03, 8.00248442e-03,
                  8.03028854e-03, 6.28397171e-03, 9.38920596e-03, 3.93297088e-03, 4.68102863e-03,
                  3.11683110e-03, 5.61638611e-03, 6.35717616e-03, 1.11391169e+00, 7.06519392e-03,
                  1.00846313e-02, 2.73671937e-03, 1.78463526e-03, 1.31934371e-03, 2.66702055e-03,
                  3.30870394e-03, 2.83130726e-03, 2.66948816e-03, 3.42453141e-03, 7.96212110e-04
              ],
              [
                  2.59476687e-03, 4.02406364e-03, 4.77982572e-03, 5.67861933e-03, 7.23970813e-03,
                  5.06717529e-03, 6.25484788e-03, 3.73266021e-03, 5.56341586e-03, 5.81010746e-03,
                  4.85184195e-03, 5.05400499e-03, 6.05577343e-03, 5.91449505e-03, 6.25671461e-03,
                  5.05233662e-03, 3.54918495e-03, 4.39240466e-03, 4.57976162e-03, 5.97360528e-03,
                  3.60042075e-03, 3.83329668e-03, 5.12927373e-03, 1.02882259e-02, 1.04131446e+00,
                  2.54462322e-02, 7.11637480e-03, 6.11415334e-03, 1.83369971e-03, 7.27420068e-03,
                  6.64290148e-03, 3.55556363e-03, 3.41379425e-03, 7.37284258e-03, 4.20498934e-04
              ],
              [
                  1.19278867e-02, 1.41975970e-02, 2.10360002e-02, 1.85933145e-02, 2.22294073e-02,
                  2.32167505e-02, 2.31761935e-02, 1.88303215e-02, 1.86272010e-02, 1.91923257e-02,
                  2.29350722e-02, 1.96789772e-02, 1.81384577e-02, 1.56181603e-02, 1.98130472e-02,
                  1.82574151e-02, 1.35516320e-02, 1.66028339e-02, 1.89291553e-02, 3.09343138e-02,
                  1.71838004e-02, 1.82643764e-02, 5.56853391e-02, 1.75524115e-01, 1.20231734e-01,
                  1.13211339e+00, 1.19190106e-02, 1.00226947e-02, 4.06078070e-03, 1.21934337e-02,
                  1.20890761e-02, 7.28095338e-03, 9.82166756e-03, 1.41831268e-02, 1.45056665e-03
              ],
              [
                  1.21442431e-02, 1.70657208e-02, 2.13491907e-02, 2.37048111e-02, 2.58366253e-02,
                  2.26888141e-02, 3.36861819e-02, 1.67941302e-02, 2.66046927e-02, 2.51887837e-02,
                  2.28430572e-02, 2.37960485e-02, 2.65847877e-02, 2.55129445e-02, 2.46617533e-02,
                  2.51230733e-02, 1.93751923e-02, 2.85145858e-02, 2.78974336e-02, 3.37388702e-02,
                  3.34598966e-02, 2.75796169e-02, 3.07901608e-02, 3.99047105e-02, 4.83684144e-02,
                  4.40256258e-02, 1.14948827e+00, 4.85305460e-02, 1.31183253e-02, 4.13147451e-02,
                  3.42964068e-02, 1.74413038e-02, 2.47898521e-02, 4.13476502e-02, 2.30144681e-03
              ],
              [
                  4.94499751e-02, 6.18653155e-02, 6.28215125e-02, 7.25189462e-02, 6.81004308e-02,
                  6.77987130e-02, 7.10005494e-02, 5.59872905e-02, 6.50152751e-02, 6.50416973e-02,
                  6.68985485e-02, 6.61170817e-02, 6.47376218e-02, 5.72098945e-02, 6.46724952e-02,
                  6.80800974e-02, 6.16739350e-02, 6.44925395e-02, 5.85121540e-02, 6.90372199e-02,
                  6.49833298e-02, 6.29108741e-02, 8.63514412e-02, 9.21870339e-02, 8.28810811e-02,
                  6.66802883e-02, 5.43452256e-02, 1.26699918e+00, 8.80348849e-02, 7.38303999e-02,
                  5.41334319e-02, 3.09558388e-02, 5.32193511e-02, 7.53582677e-02, 1.27489555e-02
              ],
              [
                  1.51953277e-02, 1.49483910e-02, 2.18266701e-02, 2.27585903e-02, 2.41448000e-02,
                  2.26095832e-02, 2.71463631e-02, 1.49282383e-02, 2.13549623e-02, 2.31561835e-02,
                  1.97390137e-02, 2.15834762e-02, 2.28276538e-02, 2.03974984e-02, 2.31895271e-02,
                  2.40817362e-02, 1.71893661e-02, 2.53476090e-02, 3.64773096e-02, 3.52913814e-02,
                  5.29324789e-02, 4.23487112e-02, 2.28197363e-02, 3.90659285e-02, 3.10699442e-02,
                  3.72338098e-02, 2.93899891e-02, 4.01173826e-02, 1.04269959e+00, 3.79452073e-02,
                  2.51911079e-02, 2.55859472e-02, 4.52306312e-02, 4.10144925e-02, 2.02008568e-03
              ],
              [
                  5.10373249e-02, 7.21048532e-02, 1.06502535e-01, 1.03580074e-01, 1.02613051e-01,
                  9.18674693e-02, 1.46178689e-01, 6.93477202e-02, 1.47447519e-01, 1.20022068e-01,
                  9.74302929e-02, 1.00598290e-01, 1.21183237e-01, 1.33627341e-01, 1.29548949e-01,
                  1.06158544e-01, 9.29983673e-02, 1.22982504e-01, 1.03280716e-01, 9.87633615e-02,
                  1.05205819e-01, 9.38760148e-02, 9.58000914e-02, 1.09045102e-01, 1.67233340e-01,
                  1.31024373e-01, 1.30563167e-01, 1.63465336e-01, 6.39350931e-02, 1.19909946e+00,
                  1.12015739e-01, 5.74623120e-02, 1.04487954e-01, 1.33601150e-01, 9.74823181e-03
              ],
              [
                  3.38486729e-03, 5.53066856e-03, 5.02481717e-03, 4.35463508e-03, 4.20837770e-03,
                  7.06454439e-03, 6.40207745e-03, 4.37174841e-03, 6.23588305e-03, 5.67436989e-03,
                  5.31541895e-03, 5.77109549e-03, 4.38839968e-03, 4.20124169e-03, 4.77552570e-03,
                  5.30261358e-03, 7.39426008e-03, 4.62941163e-03, 4.33488779e-03, 3.21115577e-03,
                  4.79472086e-03, 6.04404941e-03, 5.03640603e-03, 1.00936853e-02, 1.11510117e-02,
                  5.95849489e-03, 5.12001904e-03, 3.50182089e-03, 4.18528018e-03, 4.76800179e-03,
                  1.00915828e+00, 5.33361049e-03, 6.54061520e-03, 1.03830081e-02, 5.08269627e-04
              ],
              [
                  1.39949023e-03, 1.21538075e-03, 1.76150751e-03, 1.72711399e-03, 1.80585969e-03,
                  1.57618533e-03, 2.06206668e-03, 1.33579790e-03, 2.35966817e-03, 2.04119613e-03,
                  1.73686833e-03, 1.91303906e-03, 2.18309650e-03, 2.24679792e-03, 2.38996924e-03,
                  1.66351857e-03, 1.89097489e-03, 1.67575407e-03, 1.70165359e-03, 1.56850037e-03,
                  2.47098430e-03, 1.50510385e-03, 2.13979362e-03, 1.62349134e-03, 2.96402449e-03,
                  2.30854320e-03, 2.55223780e-03, 2.30904113e-03, 7.80134914e-04, 3.37565852e-03,
                  5.33120329e-03, 1.01013945e+00, 1.95106838e-03, 2.64696850e-03, 1.43968621e-04
              ],
              [
                  2.21893507e-03, 8.44021432e-04, 1.67353553e-03, 1.30729511e-03, 1.98914799e-03,
                  1.38421448e-03, 1.19395171e-03, 7.93176235e-04, 1.28128143e-03, 1.21342630e-03,
                  1.07028401e-03, 1.10701437e-03, 1.29312452e-03, 1.10789773e-03, 1.21021178e-03,
                  1.22353183e-03, 8.69958694e-04, 1.17327567e-03, 1.11891241e-03, 1.03209487e-03,
                  8.66191798e-04, 1.85088778e-03, 1.28142688e-03, 1.11448531e-03, 1.19086679e-03,
                  1.26277993e-03, 1.25642077e-03, 1.08427480e-03, 3.67305029e-04, 1.32012943e-03,
                  6.20813904e-03, 1.81008525e-03, 1.02611005e+00, 1.95319767e-03, 1.12310889e-04
              ],
              [
                  9.59666534e-03, 1.43480583e-02, 1.87216369e-02, 1.92143684e-02, 2.12048434e-02,
                  1.82308216e-02, 3.02738275e-02, 1.37114949e-02, 2.28267004e-02, 2.02390863e-02,
                  1.77600622e-02, 2.03644597e-02, 2.02152497e-02, 1.85127198e-02, 1.98732847e-02,
                  1.97611383e-02, 1.60664833e-02, 1.90520969e-02, 1.93835862e-02, 1.70688357e-02,
                  1.78500777e-02, 2.47387604e-02, 1.83345228e-02, 1.88758653e-02, 2.27732987e-02,
                  2.42714666e-02, 3.27132355e-02, 2.30719661e-02, 1.35829092e-02, 4.13591257e-02,
                  2.55738114e-02, 1.67063049e-02, 2.54006445e-02, 1.09654793e+00, 2.93535090e-03
              ],
              [
                  5.06102790e-05, 5.48363849e-05, 8.69482458e-05, 1.27030203e-04, 9.79591082e-05,
                  1.00017290e-04, 1.06515454e-04, 5.77389070e-05, 9.65771423e-05, 1.06302007e-04,
                  7.59709688e-05, 8.18325335e-05, 8.74762934e-05, 7.63573474e-05, 1.14372246e-04,
                  8.76402563e-05, 5.86599044e-05, 1.35360430e-04, 1.56570950e-04, 6.18247403e-05,
                  9.67392517e-05, 1.12884641e-04, 1.53412802e-04, 7.69541331e-05, 8.51381589e-05,
                  8.33448999e-05, 1.11021881e-04, 1.20971841e-04, 3.20042011e-04, 1.25109237e-04,
                  1.24867624e-04, 7.06738158e-05, 1.61133600e-04, 1.95592991e-04, 1.00008239e+00
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def leontief_matrix_2001():
    """
    Real Name: b'leontief matrix 2001'
    Original Eqn: b'1.1737632435424896,0.0054269232027270835,0.35730210213519564,0.07238027672610849,0.10017209681490133,0.19311770987760501,0.02720043277171545,0.006977408698507089,0.017968183208830233,0.028829447766572206,0.008754743337299942,0.007144355048040177,0.007756735009804351,0.007141277893549451,0.008535066194911133,0.03495887583163673,0.005618660503529776,0.02262150530742018,0.005777601780352432,0.008893032824368291,0.007709446112419921,0.10147730112996854,0.006810765294994612,0.01049847262758842,0.008564738149232903,0.012262926584883465,0.005053267390806023,0.004058567376516407,0.0032862156410826157,0.006114317477650085,0.010211059775209046,0.008590710560008943,0.012296092646211945,0.011262133928369559,0.020371387048153968;0.022710736724043265,1.1010301230976747,0.023948791680089846,0.028010336921602444,0.022831228341774343,0.029475874993358363,0.025922046051723407,0.5098892819495516,0.08285247763676283,0.0409382638734202,0.11300749605019132,0.09398579816292488,0.03470251403321824,0.02436257077393577,0.029996843174556868,0.0324294882999917,0.1509212916280687,0.0535653490898727,0.015062447408196337,0.01069085774724432,0.010624374682584075,0.017188406489889795,0.041482209263846236,0.054354749899162724,0.04608971783146348,0.02269705387713327,0.01058330184781829,0.006414956953956481,0.009295791718344434,0.010693802481589451,0.01615983789969737,0.013036369207642777,0.015401278101807116,0.016330037720094746,0.06954468297457343;0.07789999903040264,0.004358976319371763,1.1987634430665552,0.016488309259552383,0.13471866926985607,0.01969877481417939,0.01157948594897353,0.005272630662184801,0.020620134832025256,0.014251246960419486,0.007902181608725405,0.007197023634482394,0.007899342699640122,0.007549745948010017,0.00793797933421932,0.010945495699709559,0.0058988286899084846,0.007747640629429321,0.006679062190961273,0.00973278721155159,0.008726507221917161,0.18500632348379273,0.006449362560291636,0.01600540667081606,0.012710011666990607,0.00997361306834556,0.006748512650858291,0.005365057500454823,0.0023778379577883355,0.00756613612367277,0.015081008046514754,0.012463001488617733,0.021692986208233622,0.013869551863310492,0.005464339304531262;0.005397857602709944,0.0036928860838154973,0.006443167139785504,1.41902705169975,0.09390184494114093,0.010245304005498005,0.013033509096990702,0.003739642023750141,0.009300485193837044,0.024336627239299094,0.010106550784207472,0.006452353147001843,0.008590304977191248,0.007443764159276541,0.016360647713620894,0.03943105916794468,0.003016541496697094,0.007476186672270755,0.0057074138433879495,0.005128204672216965,0.005562588591551738,0.006539122935009316,0.004854895833865252,0.00632986381388197,0.004850624896196774,0.004994245873750785,0.00352975382379136,0.002298666231629132,0.0014780221790535314,0.0036641150245129614,0.00724111639783966,0.0027488251338852808,0.0065860037930961235,0.011072404847418612,0.0007961729391833507;0.0004899378943614898,0.00040218837522241737,0.0007027554681182784,0.011562014760421303,1.2564482287922663,0.0013751392971439761,0.0015520224987532769,0.00043252982689340636,0.000823461311359345,0.0024807504036739292,0.0010305992911766493,0.0009103509000453554,0.0010372479396325864,0.000940900413758754,0.0030983883471419915,0.005866134879087298,0.0004587701138334386,0.0007287685371182908,0.0010883810480918526,0.0007789177571222343,0.0006478265558845672,0.000543724326251105,0.000633026739191052,0.0006797157010225701,0.0006290483740336004,0.0005982240578470264,0.0007027563819135523,0.00024655066321776207,0.00014494194222271632,0.0004093715061573158,0.001111765003069437,0.0003369673140709481,0.0004724083248831667,0.0009618162821040714,6.948919634255357e-05;0.004902431918811746,0.004441447883599948,0.006380925206164938,0.006181896950888566,0.0070691439212023114,1.2718054301788488,0.019569729130756452,0.003656722694362818,0.005849003819448525,0.008649634295588736,0.012340971652431707,0.009400589023712472,0.008685841604232181,0.006446605472136969,0.009693024682431335,0.10083191902293309,0.004695977439685459,0.04657853385064479,0.004027939536959627,0.003867345820377519,0.003602970156186799,0.005919282530743649,0.004383039741773019,0.004023232235026422,0.003717558609158612,0.007504847870981803,0.00349429735547673,0.002484914857181306,0.005416133817625802,0.0035816338278686025,0.004935426561327174,0.004897639532434612,0.003736132135862528,0.007074561879062691,0.0009024438323470515;0.014690927113239124,0.013153155264610182,0.05213161934276632,0.035924209271499696,0.04232547279144367,0.035358299211602856,1.3083841461738104,0.013631772978649486,0.04359653439951882,0.046120692652931776,0.043737755320461646,0.02453804505654098,0.03110828496702139,0.037354211320452864,0.02833935685683808,0.046976523944827736,0.01752408867774577,0.024096483461893175,0.022763481925822757,0.026188587253051492,0.024937367154926296,0.0280764023124579,0.01952632709987294,0.01906499859723778,0.023875953488553345,0.03225297600829231,0.028046585373631423,0.03068526534051162,0.009585803859134896,0.04103851514203263,0.03337570211786625,0.030017821098330996,0.02398241789988113,0.047074330848098526,0.0021692089015725746;0.022865197648214576,0.01980258411740888,0.018894650892721184,0.022039625865093008,0.019382545288999294,0.021032302348423012,0.01686746471387951,1.0628256072908286,0.05086597046814161,0.028786117881027536,0.03315526243180269,0.024871838554522935,0.016652271317333912,0.01358188619871476,0.015398866234020411,0.017259484635734908,0.03206821754471112,0.0260119233259748,0.011787868590214561,0.01168777580039261,0.009216051504682937,0.012474186224463595,0.06304456354569773,0.09344552881602913,0.07889085936179192,0.02780464937974828,0.009203008125784388,0.00555895277952642,0.0045437610525433806,0.01007403843212209,0.014609875379770787,0.007296923716930108,0.010963687515773535,0.012593925554578961,0.0019475392985301926;0.06831146486970874,0.026312965044916467,0.05146119311145934,0.14605441983219278,0.09795581478087084,0.07732388636212315,0.07560137831193467,0.036629798609939895,1.3160845371080827,0.3112065305319377,0.0650821324861376,0.04581233437805013,0.047515523094409456,0.05524376117279288,0.057453535749097194,0.07409694979216919,0.02119399904724182,0.04099019384662682,0.026778670755963595,0.013019973912577837,0.01159295981598299,0.02432380422748353,0.018427050582580096,0.02020848711118714,0.018994193422835638,0.018376370722994164,0.012560719519602807,0.007975264433225063,0.007839381114714952,0.016198974657694775,0.023602963219556915,0.011930007882174958,0.09438845745326815,0.026229736147541555,0.0035947181281268626;0.013527563524819432,0.014745807123126899,0.032221432988516194,0.026684681646008155,0.06322515356688724,0.023704731143590146,0.030460898747906837,0.013708330932683917,0.03544624395984055,1.1556208541798083,0.023873403285155925,0.022030874613692464,0.049191713441785606,0.04821374461699464,0.07032762492030392,0.05458268058655134,0.011118148677494045,0.03289386055671648,0.03125190408484906,0.010076050494774575,0.0099689563462265,0.014083546402659863,0.01982901860494796,0.01446005672901048,0.013720906001641057,0.015173913527741055,0.010673785114948507,0.004597891324071034,0.00451723928637895,0.008684543875983906,0.01052482457903315,0.005064138697211942,0.013240167820332646,0.0110208978186361,0.0016134921714846418;0.006229755444562278,0.009050010830503998,0.012582004220277465,0.008514937799558609,0.008521332686281878,0.016673963495154927,0.0063141137947998974,0.008223247996100988,0.013500088177018019,0.015048164329261884,1.1361506968688808,0.0217275077755336,0.016325405036110817,0.023071490816233442,0.019406829441015197,0.014869292012688235,0.008714190906969073,0.09581484612715435,0.00840613727744505,0.004057580565324216,0.0036748028124992966,0.008620761092661107,0.005748271100486098,0.005408100456831043,0.005053251877499298,0.006217315542330781,0.005502341223752773,0.002529454171171977,0.0073492313047612825,0.0041535523735986065,0.005964725366599826,0.005064398707032123,0.006164436773273475,0.006283350696314605,0.0009612364221437364;0.022792654674747545,0.05364626781329244,0.04436097129623279,0.03551628386645209,0.04481678569837831,0.06970540631019632,0.03722622266179765,0.043944378192328895,0.0500418603959318,0.07098456247297746,0.07975690393134542,1.4846339447879384,0.29927166184151316,0.15284188661797257,0.23694032862407893,0.17025698696982466,0.03684372232653651,0.1650536401308206,0.06603005000818937,0.018266098001287763,0.01626907418536881,0.024091570517128316,0.033825239853113885,0.040446157331977005,0.0364180875234376,0.03052307778947637,0.024209567516103928,0.010164543632536108,0.015541365473072354,0.019035453712227875,0.02604391325322784,0.013356457570359756,0.019328192654756566,0.02348943140879403,0.005117656762416445;0.01386307625520161,0.024388439892646194,0.014797088143278984,0.02070822924328667,0.017284582028837328,0.02077360384834578,0.016572403924294335,0.021014304949497385,0.01804998244558888,0.024397972734124234,0.03033971042684253,0.035140787825203905,1.1533884031325021,0.031685792517481805,0.06135662323082327,0.02301805118081122,0.018063161523950492,0.03200630944748966,0.03500378004947225,0.00852095266523114,0.006711940860563918,0.008850341512528215,0.014317997536651136,0.020390999724838717,0.014396151792048412,0.012619812810501693,0.008740454795349573,0.004510174674724497,0.004772377605546553,0.008036714302474116,0.012391701353754473,0.005799834057923203,0.00786583843925034,0.009557381915587523,0.002113897496850758;0.013936120680724041,0.023537465290343198,0.022820529138740216,0.030637085092611187,0.028866133154863378,0.02990504742754461,0.035490058821343595,0.02462567474519067,0.03544138452155243,0.044782222151560636,0.03664377152320939,0.053654938654082496,0.15948573528939014,1.4378476448817383,0.13488580420318927,0.056485104241779285,0.03999619084847162,0.06842757815495289,0.06201420739760105,0.024088700998683082,0.021066802092071974,0.020043080459053488,0.02758790304663804,0.029123974791490582,0.029485504696122804,0.029171036112792904,0.0752254632321457,0.017543859602084773,0.010816860458614326,0.03567618986845576,0.03425358309954448,0.017157484634205147,0.042285432201876284,0.02935938938775165,0.0031437456426118364;0.013136790217563426,0.016236929607819667,0.015432907364766237,0.015957951410429216,0.01658801307201756,0.01745516126882567,0.013630729681220383,0.014261054137563378,0.01404089294252631,0.017606947333227277,0.01730214042044432,0.020999872011918455,0.03303113327881329,0.01920027272332076,1.4306814626308328,0.018199915852079876,0.012032496880980436,0.01745898109220315,0.12968151039931605,0.014082135078394667,0.010591883491341231,0.009734878736348802,0.05806517109601551,0.08072137642408661,0.08503104303251961,0.030067452406142253,0.011539949504979972,0.00639399934481064,0.0044656079206648385,0.011861979574313833,0.02863798112020126,0.006183673487753831,0.007567436383192744,0.014026495936102511,0.001765098865098101;0.0022954447999433253,0.003179524797782652,0.003908500954545634,0.010186706900914713,0.007096634888006663,0.008934218381348157,0.007409446346918467,0.003069930474327989,0.0048962596924116445,0.006367726363612687,0.006351919244741279,0.01616278083443499,0.009782732240958561,0.007438289438169036,0.011888417143375395,1.0501373730837205,0.0034797797999796235,0.009408336651945657,0.005124019113139483,0.0027689763241018975,0.002873031438272938,0.0046724700924710766,0.004078718006831425,0.003525949347327752,0.00406001361661339,0.004056025883784809,0.0029399720374066363,0.0024868504609614583,0.002695143138927666,0.0038620634514671933,0.0059719597686604875,0.004429560632138138,0.0045372610809469895,0.008364365047974021,0.0027677875944113225;0.024136898212382737,0.04187942461523996,0.035643196310707274,0.04586949710875524,0.03240083734291695,0.04317218206935514,0.04873119721305886,0.04055389806264628,0.05616452060553689,0.0540214690876991,0.06658450611583465,0.06130435177688181,0.03806841442304199,0.03172707940288701,0.037187200409490605,0.034212659469212134,1.1106383768588108,0.029548959208540324,0.024683993008455037,0.014958967358409726,0.0236473024637134,0.042336232033926925,0.028864878706523236,0.020496039282026098,0.020360762126286347,0.028883973421704557,0.020460447725251005,0.01306680820870715,0.01933621295603297,0.017309197752165807,0.027988609373818394,0.028972783182521503,0.027241779903537187,0.03045516413509656,0.0037297052037377934;0.008909786945106513,0.013508376258292926,0.010720843840090507,0.01147439972128709,0.010283948845126243,0.01204698900139097,0.012061199110924526,0.012054499893885223,0.012342981457244228,0.012054882275816864,0.016498012650839028,0.014083535617698208,0.01215311139293777,0.01093914229637026,0.011332739241211526,0.01068943450311424,0.03650896214932508,1.0541142915695119,0.010920915101134744,0.009178286043948701,0.010608071753749755,0.013446771378283586,0.01679252928086264,0.012323495253432917,0.011280541951709178,0.022005376482924575,0.01863796393253028,0.011330192860297142,0.0470516364657381,0.01119051201573651,0.024579314954751855,0.0206046090769178,0.012776726389698767,0.018179383015125478,0.0023070190115180495;0.009301063043011449,0.007940369369887885,0.01472658983471488,0.014175424012071858,0.017289709837617916,0.013800008094308326,0.011709150505905524,0.00892124989134277,0.013472470589447734,0.01442552215923695,0.014272549746232965,0.014058534802717517,0.013036898255298471,0.011619222423314552,0.014188521334966373,0.013517943710545896,0.013231967267543327,0.013910770984230963,1.014886231898463,0.007105599038550396,0.0068901229331090955,0.010405265773793838,0.021366388245931033,0.008777408414120032,0.0094025957150167,0.01313453746121984,0.007858273191868386,0.005756832130510114,0.004016992943627634,0.009506414866048103,0.00792000270664293,0.005314350251999422,0.007390363858597798,0.010760897404448543,0.0008898341258671729;0.06016435461777938,0.04689358137024997,0.11294880962203929,0.1123046001221558,0.13319068227727812,0.10581373030724485,0.09132796400608206,0.07444133475094034,0.09470900671008924,0.10105087603563373,0.08120929147254524,0.09457408145716577,0.09891461065643149,0.09528137952345893,0.10672331055441034,0.09792003515592149,0.047740128709065265,0.0820995289453558,0.06418773867074486,1.0412518990251307,0.026250894728669007,0.0765021678510436,0.045445797615719055,0.05078211269453969,0.05032220197855784,0.044561252366939974,0.02887942664673438,0.016822783617805932,0.013695472941246737,0.030210569217380735,0.04027207594347478,0.02256674743866558,0.04833099467067296,0.037367815467643915,0.005252278285016387;0.029075054364306557,0.018926276761445034,0.05374919702645409,0.05408721919513211,0.07292631738423158,0.04259800796594522,0.03701115389660464,0.025613882841067644,0.04167520243056719,0.043022311955557765,0.03579229839683513,0.03629114560846718,0.03763935449167828,0.03427989818188903,0.04531429859719887,0.045418974284375795,0.019685245828238947,0.04699227590686017,0.0283763950815871,0.014104539086319394,1.0141334747041335,0.04123742678597985,0.02472299826154417,0.022290359165280833,0.023161614250365958,0.021081231034646188,0.017812589364879308,0.011241641913528552,0.008120152527363707,0.01782040570282609,0.017670133989036538,0.011640276171406559,0.021565192506209082,0.021955998857603642,0.002577927356516672;0.005810209139335779,0.008351510722845575,0.011622206507439854,0.013480279712580652,0.013580641908018306,0.013186430165723045,0.015388324851924047,0.008152715711388456,0.013417879282837209,0.01513077807458801,0.013589821924714732,0.013822714178791119,0.01576628769729156,0.01480390545285875,0.013114928554747668,0.012669300915499395,0.016048543719991655,0.012739674828154976,0.012203552338709364,0.013434109091647488,0.010334736098826543,1.016437546566522,0.014682725241291664,0.013767016179401636,0.03366073281793997,0.02705767474851203,0.0155073299438977,0.01637492635494445,0.005924252207116816,0.020231873773768547,0.016098317830493418,0.009724738744038319,0.013569511388455847,0.018912535165378313,0.0010180831730698461;0.026708088436790234,0.0344482175783122,0.04731649147138358,0.04610243693604878,0.04941353722455321,0.049983420389321694,0.040384523638977245,0.056286044225010504,0.041367641818810065,0.0422198252100376,0.05744109903669824,0.042800343468143605,0.03502043761698414,0.02872737814031955,0.0378093001845439,0.04117904490488185,0.04006290612944068,0.03784467921218261,0.027581869383959273,0.028629729477962936,0.01943313672912328,0.025984474195444748,1.0629239389760847,0.07505459374644521,0.0364184226422233,0.08106047135478492,0.018959247182443562,0.01301461267053738,0.007316900524314605,0.01504401996203297,0.02132483839548291,0.01715590029788257,0.017855591358568235,0.02104093646935696,0.003491366169083874;0.007016638769998524,0.009208412706144467,0.010752644849897316,0.01108452179052396,0.013287684526735262,0.016321855946181994,0.008821929908344085,0.013312984817082965,0.008906790766896974,0.009623460176929237,0.015656552858146155,0.014311520868236706,0.009360039547845034,0.007587243325653787,0.008539670743185906,0.008704250871517851,0.006865597647421682,0.010444026231838818,0.004075354870237777,0.005010057582541011,0.0031697173721107487,0.005509847707730617,0.006585144671192395,1.1217650568944937,0.0072246484468476944,0.010508462963476366,0.002785178398837364,0.0018739999399832229,0.0016290430020763527,0.0029072331195542003,0.0036973853817753636,0.0027896923025282168,0.0027965957117945567,0.0037540601355658017,0.000830515550393401;0.002418326993848886,0.003908021179923181,0.004435599211615601,0.005426732842117682,0.006803677746611813,0.005002760176261294,0.005985126759470647,0.003662838964240341,0.005185998427571563,0.0055582912730205375,0.004769441386534263,0.004853390267357822,0.005841434989569255,0.0057419826183923075,0.005815633330464777,0.004706767140728102,0.0038498840410520533,0.004150124706442606,0.004211961834247496,0.005296300164626491,0.0031693737290430014,0.0035256627422560203,0.005183339819437135,0.011471375813609998,1.0412462777921692,0.024465478642155675,0.0061907182219279825,0.005466213445247088,0.0017043576147166102,0.006622500251375637,0.006033444873246866,0.003203600610861914,0.0031678687208367183,0.006732199818290239,0.0004094901550342115;0.01178077902061074,0.01403511083176121,0.02072439980971778,0.018478306056338382,0.0215570640607645,0.02240921751703037,0.023859563468332755,0.02044947043924511,0.01854813546864955,0.019510215750306856,0.02301037618381496,0.019867385677944608,0.018275133176403512,0.015963584872142805,0.019705610389608677,0.017924888098389033,0.014007053933783951,0.016818396729905684,0.019300424926689187,0.029557810603348188,0.01635098360534893,0.01782932014259521,0.054858376207344156,0.16282703192753414,0.12481844624912959,1.1329405996074027,0.011720811268884369,0.00937699071724326,0.004188891020888144,0.012026038151582501,0.012005686723021394,0.007090245710400689,0.009740654987888259,0.014338613754510976,0.0014245223219891004;0.012872643021368837,0.018086879304291717,0.022668329365732993,0.025822076155843417,0.027922884925886394,0.024161917456575803,0.03616929030730653,0.01833164472377164,0.028511145240000133,0.027358488585175,0.02492950918021771,0.026036173028981643,0.028773756370200555,0.028428856719957464,0.02603531716005517,0.02690359266061891,0.022707104390355726,0.03131598188854473,0.029982884665337592,0.0338532765054924,0.03370780660293817,0.028899623248364353,0.03267984001265276,0.04127332861158696,0.05101739507980366,0.045912894140541616,1.1570090424144488,0.04920936060971194,0.013856774474338675,0.043910643394190145,0.0365989521434767,0.01831962594034944,0.02623550924163782,0.04239980334890065,0.002565713162139995;0.0500235057828328,0.06242813092863934,0.0629856225068695,0.07424718375998612,0.06731727716658574,0.0673669809082869,0.072729416520318,0.05788984692938286,0.06518521149231501,0.06654570910761223,0.06931758118306576,0.0685176542138998,0.06605286741822158,0.05959270837467889,0.06510732970590884,0.06966966810164076,0.0698521198269262,0.06571865669045146,0.057529432183797344,0.06710191763861821,0.06361176669421749,0.06406478450526124,0.08697176757958502,0.09221239867291289,0.08602801193392975,0.06774726204787981,0.0540553366278067,1.2775141810130124,0.09683618432439117,0.0742511277707149,0.05416080551378499,0.030640819861100305,0.05414345247728226,0.08162661831924437,0.015591735863095578;0.015369200662790681,0.015737688541947667,0.022177062097736587,0.023093130290232255,0.02403824267887421,0.023290325152853477,0.02829386620871296,0.015877968377292,0.021787896964915118,0.023917301266229284,0.020433305693977222,0.022512018918792762,0.023614062516711786,0.02167219874589362,0.02372499870780696,0.024191345467066767,0.019978065446637987,0.026460906992723975,0.03562914880211881,0.034071135639863276,0.04971357978561638,0.043370424723089315,0.022931472834456783,0.03831310604789071,0.03153622639908567,0.03828432622586755,0.030340376779259163,0.03858994487503666,1.0435458731595628,0.038167774410767234,0.026970375371749077,0.026820102163755705,0.045737334346767834,0.04188296376026206,0.002059087419671225;0.051093438567430496,0.07350690796846639,0.10748844200913012,0.10539289909391844,0.10124508610632493,0.0927459905712925,0.14938145781372072,0.07260756420014244,0.15145930846078065,0.12507544045461988,0.10094312077497933,0.10521691569355024,0.12581051481280903,0.1406803646822104,0.13393610385458252,0.10688427756833224,0.11086891207246036,0.12499126722924322,0.10603445251170562,0.09493576907639989,0.09964186309977265,0.0956477637884587,0.0974785286875051,0.10497283379343451,0.16839418232218098,0.1324914666229653,0.13004991348200923,0.1602141463815016,0.06448479485617939,1.2032084777262082,0.11947259786802553,0.05996517601694216,0.10671850407992972,0.13665928993230825,0.010679609761795623;0.00338074154522001,0.005888223779061112,0.0051283583881506795,0.004426254467092416,0.00417692762356045,0.006968598318265887,0.0067033856727636695,0.004700982770876176,0.006377541243951328,0.00593931159507381,0.005475435954881606,0.0061587421236618785,0.0045699191462016025,0.0043795348972223945,0.0049302159417701115,0.005338353527533683,0.007898235666205958,0.004798525198907788,0.0044696091765120015,0.003088166507121628,0.004471490967864456,0.006157245058868347,0.00525842215593427,0.009823986706132742,0.01223974218953695,0.006214408015970702,0.005118573086479227,0.0034253615491356727,0.004376926546327284,0.004904717105004348,1.0093102626085302,0.005554215121018665,0.006619117452203968,0.010834205459724355,0.0005354658746082417;0.0013220438082828002,0.0012143805355084025,0.0017562534803740428,0.0017817167844839965,0.001861974487782602,0.001610563874189827,0.0021369901295244316,0.0014060883887929325,0.002317633050407235,0.002112523180083194,0.0017881694067144766,0.0019779218047561685,0.0022769498074889354,0.00234840615732694,0.00234230879815086,0.0016923642601193586,0.002083906728227818,0.0017181831329053652,0.001766208365610562,0.0014865059277878194,0.0021502943010904747,0.0015354702486806435,0.0021076121266977426,0.0016909516646616304,0.0032328401690981915,0.0023456998268875755,0.0026553125516342274,0.002345675015834681,0.0008063211884938398,0.0033270977374895544,0.005276415714677041,1.0112836518262303,0.0019971780527004916,0.002660973838347998,0.0001496701036756933;0.0021544354936339737,0.0008422694074464503,0.0016878500698106827,0.001314713649664435,0.0021682303765058206,0.0013848846076880295,0.0012056231744705655,0.0008265966164886495,0.0013052187728121794,0.0012466223495699686,0.001093134111965264,0.0011450636283315487,0.0013389599285109262,0.0011694882402507607,0.001243697305646562,0.0012446356192496808,0.0008895309514111232,0.0011636514267044738,0.0011013538011445244,0.0010014891204596155,0.0008259086688281314,0.0018248275236600402,0.001247028061542016,0.0010749481962672772,0.0011812714282856025,0.0012888376931711868,0.001226900814028784,0.0010431844497336713,0.0003609979439581811,0.001289258098896023,0.0058582371047118335,0.001863060218850709,1.026086420654599,0.0018623395289025825,0.00011455850725483763;0.009585442280594412,0.01480697868360278,0.018490561903995714,0.019463582054059417,0.02151823856866305,0.0180909546554909,0.030779954792542003,0.014158162044462283,0.022736913902416427,0.020622455559549814,0.018166021604923362,0.020445683601241424,0.020155679930338274,0.018891681888596124,0.01983309610187147,0.019230186905184594,0.017795522187608197,0.019085806588407573,0.01885528723456436,0.016323712909168824,0.016667210857692353,0.024082263429174623,0.019528296166322994,0.018264694639587072,0.02271314973829276,0.023572765727246245,0.03259794808318538,0.02187746726927884,0.013161256867902866,0.04048605651876483,0.025743089492495347,0.016547666676225176,0.024357833204247108,1.0969830300753942,0.0033864461142722345;4.870819910449969e-05,5.512888560024081e-05,8.014615075140404e-05,0.0001270913891590397,9.048201848738018e-05,9.030630141998e-05,0.00010245265815629338,5.784322153925575e-05,9.072337638108669e-05,0.0001024096793425627,7.210832382954787e-05,7.761959843943062e-05,8.235438893772312e-05,7.272790482405678e-05,0.00011168499051661984,7.917875507977248e-05,6.1582062556315e-05,0.00012717057474792638,0.0001126947277173395,5.067658222367893e-05,7.959704864495844e-05,0.00010160809568096536,0.0001326075151426175,6.827634186342741e-05,8.161080906574726e-05,7.459166278835041e-05,9.619861551216134e-05,0.00010665710393769036,0.000294175618376392,0.00011443093602746406,0.00011279225963104155,6.789009498359167e-05,0.00013119760904072172,0.000180070915757607,1.0000955820662487;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            1.17376324e+00, 5.42692320e-03, 3.57302102e-01, 7.23802767e-02, 1.00172097e-01,
            1.93117710e-01, 2.72004328e-02, 6.97740870e-03, 1.79681832e-02, 2.88294478e-02,
            8.75474334e-03, 7.14435505e-03, 7.75673501e-03, 7.14127789e-03, 8.53506619e-03,
            3.49588758e-02, 5.61866050e-03, 2.26215053e-02, 5.77760178e-03, 8.89303282e-03,
            7.70944611e-03, 1.01477301e-01, 6.81076529e-03, 1.04984726e-02, 8.56473815e-03,
            1.22629266e-02, 5.05326739e-03, 4.05856738e-03, 3.28621564e-03, 6.11431748e-03,
            1.02110598e-02, 8.59071056e-03, 1.22960926e-02, 1.12621339e-02, 2.03713870e-02
        ],
              [
                  2.27107367e-02, 1.10103012e+00, 2.39487917e-02, 2.80103369e-02, 2.28312283e-02,
                  2.94758750e-02, 2.59220461e-02, 5.09889282e-01, 8.28524776e-02, 4.09382639e-02,
                  1.13007496e-01, 9.39857982e-02, 3.47025140e-02, 2.43625708e-02, 2.99968432e-02,
                  3.24294883e-02, 1.50921292e-01, 5.35653491e-02, 1.50624474e-02, 1.06908577e-02,
                  1.06243747e-02, 1.71884065e-02, 4.14822093e-02, 5.43547499e-02, 4.60897178e-02,
                  2.26970539e-02, 1.05833018e-02, 6.41495695e-03, 9.29579172e-03, 1.06938025e-02,
                  1.61598379e-02, 1.30363692e-02, 1.54012781e-02, 1.63300377e-02, 6.95446830e-02
              ],
              [
                  7.78999990e-02, 4.35897632e-03, 1.19876344e+00, 1.64883093e-02, 1.34718669e-01,
                  1.96987748e-02, 1.15794859e-02, 5.27263066e-03, 2.06201348e-02, 1.42512470e-02,
                  7.90218161e-03, 7.19702363e-03, 7.89934270e-03, 7.54974595e-03, 7.93797933e-03,
                  1.09454957e-02, 5.89882869e-03, 7.74764063e-03, 6.67906219e-03, 9.73278721e-03,
                  8.72650722e-03, 1.85006323e-01, 6.44936256e-03, 1.60054067e-02, 1.27100117e-02,
                  9.97361307e-03, 6.74851265e-03, 5.36505750e-03, 2.37783796e-03, 7.56613612e-03,
                  1.50810080e-02, 1.24630015e-02, 2.16929862e-02, 1.38695519e-02, 5.46433930e-03
              ],
              [
                  5.39785760e-03, 3.69288608e-03, 6.44316714e-03, 1.41902705e+00, 9.39018449e-02,
                  1.02453040e-02, 1.30335091e-02, 3.73964202e-03, 9.30048519e-03, 2.43366272e-02,
                  1.01065508e-02, 6.45235315e-03, 8.59030498e-03, 7.44376416e-03, 1.63606477e-02,
                  3.94310592e-02, 3.01654150e-03, 7.47618667e-03, 5.70741384e-03, 5.12820467e-03,
                  5.56258859e-03, 6.53912294e-03, 4.85489583e-03, 6.32986381e-03, 4.85062490e-03,
                  4.99424587e-03, 3.52975382e-03, 2.29866623e-03, 1.47802218e-03, 3.66411502e-03,
                  7.24111640e-03, 2.74882513e-03, 6.58600379e-03, 1.10724048e-02, 7.96172939e-04
              ],
              [
                  4.89937894e-04, 4.02188375e-04, 7.02755468e-04, 1.15620148e-02, 1.25644823e+00,
                  1.37513930e-03, 1.55202250e-03, 4.32529827e-04, 8.23461311e-04, 2.48075040e-03,
                  1.03059929e-03, 9.10350900e-04, 1.03724794e-03, 9.40900414e-04, 3.09838835e-03,
                  5.86613488e-03, 4.58770114e-04, 7.28768537e-04, 1.08838105e-03, 7.78917757e-04,
                  6.47826556e-04, 5.43724326e-04, 6.33026739e-04, 6.79715701e-04, 6.29048374e-04,
                  5.98224058e-04, 7.02756382e-04, 2.46550663e-04, 1.44941942e-04, 4.09371506e-04,
                  1.11176500e-03, 3.36967314e-04, 4.72408325e-04, 9.61816282e-04, 6.94891963e-05
              ],
              [
                  4.90243192e-03, 4.44144788e-03, 6.38092521e-03, 6.18189695e-03, 7.06914392e-03,
                  1.27180543e+00, 1.95697291e-02, 3.65672269e-03, 5.84900382e-03, 8.64963430e-03,
                  1.23409717e-02, 9.40058902e-03, 8.68584160e-03, 6.44660547e-03, 9.69302468e-03,
                  1.00831919e-01, 4.69597744e-03, 4.65785339e-02, 4.02793954e-03, 3.86734582e-03,
                  3.60297016e-03, 5.91928253e-03, 4.38303974e-03, 4.02323224e-03, 3.71755861e-03,
                  7.50484787e-03, 3.49429736e-03, 2.48491486e-03, 5.41613382e-03, 3.58163383e-03,
                  4.93542656e-03, 4.89763953e-03, 3.73613214e-03, 7.07456188e-03, 9.02443832e-04
              ],
              [
                  1.46909271e-02, 1.31531553e-02, 5.21316193e-02, 3.59242093e-02, 4.23254728e-02,
                  3.53582992e-02, 1.30838415e+00, 1.36317730e-02, 4.35965344e-02, 4.61206927e-02,
                  4.37377553e-02, 2.45380451e-02, 3.11082850e-02, 3.73542113e-02, 2.83393569e-02,
                  4.69765239e-02, 1.75240887e-02, 2.40964835e-02, 2.27634819e-02, 2.61885873e-02,
                  2.49373672e-02, 2.80764023e-02, 1.95263271e-02, 1.90649986e-02, 2.38759535e-02,
                  3.22529760e-02, 2.80465854e-02, 3.06852653e-02, 9.58580386e-03, 4.10385151e-02,
                  3.33757021e-02, 3.00178211e-02, 2.39824179e-02, 4.70743308e-02, 2.16920890e-03
              ],
              [
                  2.28651976e-02, 1.98025841e-02, 1.88946509e-02, 2.20396259e-02, 1.93825453e-02,
                  2.10323023e-02, 1.68674647e-02, 1.06282561e+00, 5.08659705e-02, 2.87861179e-02,
                  3.31552624e-02, 2.48718386e-02, 1.66522713e-02, 1.35818862e-02, 1.53988662e-02,
                  1.72594846e-02, 3.20682175e-02, 2.60119233e-02, 1.17878686e-02, 1.16877758e-02,
                  9.21605150e-03, 1.24741862e-02, 6.30445635e-02, 9.34455288e-02, 7.88908594e-02,
                  2.78046494e-02, 9.20300813e-03, 5.55895278e-03, 4.54376105e-03, 1.00740384e-02,
                  1.46098754e-02, 7.29692372e-03, 1.09636875e-02, 1.25939256e-02, 1.94753930e-03
              ],
              [
                  6.83114649e-02, 2.63129650e-02, 5.14611931e-02, 1.46054420e-01, 9.79558148e-02,
                  7.73238864e-02, 7.56013783e-02, 3.66297986e-02, 1.31608454e+00, 3.11206531e-01,
                  6.50821325e-02, 4.58123344e-02, 4.75155231e-02, 5.52437612e-02, 5.74535357e-02,
                  7.40969498e-02, 2.11939990e-02, 4.09901938e-02, 2.67786708e-02, 1.30199739e-02,
                  1.15929598e-02, 2.43238042e-02, 1.84270506e-02, 2.02084871e-02, 1.89941934e-02,
                  1.83763707e-02, 1.25607195e-02, 7.97526443e-03, 7.83938111e-03, 1.61989747e-02,
                  2.36029632e-02, 1.19300079e-02, 9.43884575e-02, 2.62297361e-02, 3.59471813e-03
              ],
              [
                  1.35275635e-02, 1.47458071e-02, 3.22214330e-02, 2.66846816e-02, 6.32251536e-02,
                  2.37047311e-02, 3.04608987e-02, 1.37083309e-02, 3.54462440e-02, 1.15562085e+00,
                  2.38734033e-02, 2.20308746e-02, 4.91917134e-02, 4.82137446e-02, 7.03276249e-02,
                  5.45826806e-02, 1.11181487e-02, 3.28938606e-02, 3.12519041e-02, 1.00760505e-02,
                  9.96895635e-03, 1.40835464e-02, 1.98290186e-02, 1.44600567e-02, 1.37209060e-02,
                  1.51739135e-02, 1.06737851e-02, 4.59789132e-03, 4.51723929e-03, 8.68454388e-03,
                  1.05248246e-02, 5.06413870e-03, 1.32401678e-02, 1.10208978e-02, 1.61349217e-03
              ],
              [
                  6.22975544e-03, 9.05001083e-03, 1.25820042e-02, 8.51493780e-03, 8.52133269e-03,
                  1.66739635e-02, 6.31411379e-03, 8.22324800e-03, 1.35000882e-02, 1.50481643e-02,
                  1.13615070e+00, 2.17275078e-02, 1.63254050e-02, 2.30714908e-02, 1.94068294e-02,
                  1.48692920e-02, 8.71419091e-03, 9.58148461e-02, 8.40613728e-03, 4.05758057e-03,
                  3.67480281e-03, 8.62076109e-03, 5.74827110e-03, 5.40810046e-03, 5.05325188e-03,
                  6.21731554e-03, 5.50234122e-03, 2.52945417e-03, 7.34923130e-03, 4.15355237e-03,
                  5.96472537e-03, 5.06439871e-03, 6.16443677e-03, 6.28335070e-03, 9.61236422e-04
              ],
              [
                  2.27926547e-02, 5.36462678e-02, 4.43609713e-02, 3.55162839e-02, 4.48167857e-02,
                  6.97054063e-02, 3.72262227e-02, 4.39443782e-02, 5.00418604e-02, 7.09845625e-02,
                  7.97569039e-02, 1.48463394e+00, 2.99271662e-01, 1.52841887e-01, 2.36940329e-01,
                  1.70256987e-01, 3.68437223e-02, 1.65053640e-01, 6.60300500e-02, 1.82660980e-02,
                  1.62690742e-02, 2.40915705e-02, 3.38252399e-02, 4.04461573e-02, 3.64180875e-02,
                  3.05230778e-02, 2.42095675e-02, 1.01645436e-02, 1.55413655e-02, 1.90354537e-02,
                  2.60439133e-02, 1.33564576e-02, 1.93281927e-02, 2.34894314e-02, 5.11765676e-03
              ],
              [
                  1.38630763e-02, 2.43884399e-02, 1.47970881e-02, 2.07082292e-02, 1.72845820e-02,
                  2.07736038e-02, 1.65724039e-02, 2.10143049e-02, 1.80499824e-02, 2.43979727e-02,
                  3.03397104e-02, 3.51407878e-02, 1.15338840e+00, 3.16857925e-02, 6.13566232e-02,
                  2.30180512e-02, 1.80631615e-02, 3.20063094e-02, 3.50037800e-02, 8.52095267e-03,
                  6.71194086e-03, 8.85034151e-03, 1.43179975e-02, 2.03909997e-02, 1.43961518e-02,
                  1.26198128e-02, 8.74045480e-03, 4.51017467e-03, 4.77237761e-03, 8.03671430e-03,
                  1.23917014e-02, 5.79983406e-03, 7.86583844e-03, 9.55738192e-03, 2.11389750e-03
              ],
              [
                  1.39361207e-02, 2.35374653e-02, 2.28205291e-02, 3.06370851e-02, 2.88661332e-02,
                  2.99050474e-02, 3.54900588e-02, 2.46256747e-02, 3.54413845e-02, 4.47822222e-02,
                  3.66437715e-02, 5.36549387e-02, 1.59485735e-01, 1.43784764e+00, 1.34885804e-01,
                  5.64851042e-02, 3.99961908e-02, 6.84275782e-02, 6.20142074e-02, 2.40887010e-02,
                  2.10668021e-02, 2.00430805e-02, 2.75879030e-02, 2.91239748e-02, 2.94855047e-02,
                  2.91710361e-02, 7.52254632e-02, 1.75438596e-02, 1.08168605e-02, 3.56761899e-02,
                  3.42535831e-02, 1.71574846e-02, 4.22854322e-02, 2.93593894e-02, 3.14374564e-03
              ],
              [
                  1.31367902e-02, 1.62369296e-02, 1.54329074e-02, 1.59579514e-02, 1.65880131e-02,
                  1.74551613e-02, 1.36307297e-02, 1.42610541e-02, 1.40408929e-02, 1.76069473e-02,
                  1.73021404e-02, 2.09998720e-02, 3.30311333e-02, 1.92002727e-02, 1.43068146e+00,
                  1.81999159e-02, 1.20324969e-02, 1.74589811e-02, 1.29681510e-01, 1.40821351e-02,
                  1.05918835e-02, 9.73487874e-03, 5.80651711e-02, 8.07213764e-02, 8.50310430e-02,
                  3.00674524e-02, 1.15399495e-02, 6.39399934e-03, 4.46560792e-03, 1.18619796e-02,
                  2.86379811e-02, 6.18367349e-03, 7.56743638e-03, 1.40264959e-02, 1.76509887e-03
              ],
              [
                  2.29544480e-03, 3.17952480e-03, 3.90850095e-03, 1.01867069e-02, 7.09663489e-03,
                  8.93421838e-03, 7.40944635e-03, 3.06993047e-03, 4.89625969e-03, 6.36772636e-03,
                  6.35191924e-03, 1.61627808e-02, 9.78273224e-03, 7.43828944e-03, 1.18884171e-02,
                  1.05013737e+00, 3.47977980e-03, 9.40833665e-03, 5.12401911e-03, 2.76897632e-03,
                  2.87303144e-03, 4.67247009e-03, 4.07871801e-03, 3.52594935e-03, 4.06001362e-03,
                  4.05602588e-03, 2.93997204e-03, 2.48685046e-03, 2.69514314e-03, 3.86206345e-03,
                  5.97195977e-03, 4.42956063e-03, 4.53726108e-03, 8.36436505e-03, 2.76778759e-03
              ],
              [
                  2.41368982e-02, 4.18794246e-02, 3.56431963e-02, 4.58694971e-02, 3.24008373e-02,
                  4.31721821e-02, 4.87311972e-02, 4.05538981e-02, 5.61645206e-02, 5.40214691e-02,
                  6.65845061e-02, 6.13043518e-02, 3.80684144e-02, 3.17270794e-02, 3.71872004e-02,
                  3.42126595e-02, 1.11063838e+00, 2.95489592e-02, 2.46839930e-02, 1.49589674e-02,
                  2.36473025e-02, 4.23362320e-02, 2.88648787e-02, 2.04960393e-02, 2.03607621e-02,
                  2.88839734e-02, 2.04604477e-02, 1.30668082e-02, 1.93362130e-02, 1.73091978e-02,
                  2.79886094e-02, 2.89727832e-02, 2.72417799e-02, 3.04551641e-02, 3.72970520e-03
              ],
              [
                  8.90978695e-03, 1.35083763e-02, 1.07208438e-02, 1.14743997e-02, 1.02839488e-02,
                  1.20469890e-02, 1.20611991e-02, 1.20544999e-02, 1.23429815e-02, 1.20548823e-02,
                  1.64980127e-02, 1.40835356e-02, 1.21531114e-02, 1.09391423e-02, 1.13327392e-02,
                  1.06894345e-02, 3.65089621e-02, 1.05411429e+00, 1.09209151e-02, 9.17828604e-03,
                  1.06080718e-02, 1.34467714e-02, 1.67925293e-02, 1.23234953e-02, 1.12805420e-02,
                  2.20053765e-02, 1.86379639e-02, 1.13301929e-02, 4.70516365e-02, 1.11905120e-02,
                  2.45793150e-02, 2.06046091e-02, 1.27767264e-02, 1.81793830e-02, 2.30701901e-03
              ],
              [
                  9.30106304e-03, 7.94036937e-03, 1.47265898e-02, 1.41754240e-02, 1.72897098e-02,
                  1.38000081e-02, 1.17091505e-02, 8.92124989e-03, 1.34724706e-02, 1.44255222e-02,
                  1.42725497e-02, 1.40585348e-02, 1.30368983e-02, 1.16192224e-02, 1.41885213e-02,
                  1.35179437e-02, 1.32319673e-02, 1.39107710e-02, 1.01488623e+00, 7.10559904e-03,
                  6.89012293e-03, 1.04052658e-02, 2.13663882e-02, 8.77740841e-03, 9.40259572e-03,
                  1.31345375e-02, 7.85827319e-03, 5.75683213e-03, 4.01699294e-03, 9.50641487e-03,
                  7.92000271e-03, 5.31435025e-03, 7.39036386e-03, 1.07608974e-02, 8.89834126e-04
              ],
              [
                  6.01643546e-02, 4.68935814e-02, 1.12948810e-01, 1.12304600e-01, 1.33190682e-01,
                  1.05813730e-01, 9.13279640e-02, 7.44413348e-02, 9.47090067e-02, 1.01050876e-01,
                  8.12092915e-02, 9.45740815e-02, 9.89146107e-02, 9.52813795e-02, 1.06723311e-01,
                  9.79200352e-02, 4.77401287e-02, 8.20995289e-02, 6.41877387e-02, 1.04125190e+00,
                  2.62508947e-02, 7.65021679e-02, 4.54457976e-02, 5.07821127e-02, 5.03222020e-02,
                  4.45612524e-02, 2.88794266e-02, 1.68227836e-02, 1.36954729e-02, 3.02105692e-02,
                  4.02720759e-02, 2.25667474e-02, 4.83309947e-02, 3.73678155e-02, 5.25227829e-03
              ],
              [
                  2.90750544e-02, 1.89262768e-02, 5.37491970e-02, 5.40872192e-02, 7.29263174e-02,
                  4.25980080e-02, 3.70111539e-02, 2.56138828e-02, 4.16752024e-02, 4.30223120e-02,
                  3.57922984e-02, 3.62911456e-02, 3.76393545e-02, 3.42798982e-02, 4.53142986e-02,
                  4.54189743e-02, 1.96852458e-02, 4.69922759e-02, 2.83763951e-02, 1.41045391e-02,
                  1.01413347e+00, 4.12374268e-02, 2.47229983e-02, 2.22903592e-02, 2.31616143e-02,
                  2.10812310e-02, 1.78125894e-02, 1.12416419e-02, 8.12015253e-03, 1.78204057e-02,
                  1.76701340e-02, 1.16402762e-02, 2.15651925e-02, 2.19559989e-02, 2.57792736e-03
              ],
              [
                  5.81020914e-03, 8.35151072e-03, 1.16222065e-02, 1.34802797e-02, 1.35806419e-02,
                  1.31864302e-02, 1.53883249e-02, 8.15271571e-03, 1.34178793e-02, 1.51307781e-02,
                  1.35898219e-02, 1.38227142e-02, 1.57662877e-02, 1.48039055e-02, 1.31149286e-02,
                  1.26693009e-02, 1.60485437e-02, 1.27396748e-02, 1.22035523e-02, 1.34341091e-02,
                  1.03347361e-02, 1.01643755e+00, 1.46827252e-02, 1.37670162e-02, 3.36607328e-02,
                  2.70576747e-02, 1.55073299e-02, 1.63749264e-02, 5.92425221e-03, 2.02318738e-02,
                  1.60983178e-02, 9.72473874e-03, 1.35695114e-02, 1.89125352e-02, 1.01808317e-03
              ],
              [
                  2.67080884e-02, 3.44482176e-02, 4.73164915e-02, 4.61024369e-02, 4.94135372e-02,
                  4.99834204e-02, 4.03845236e-02, 5.62860442e-02, 4.13676418e-02, 4.22198252e-02,
                  5.74410990e-02, 4.28003435e-02, 3.50204376e-02, 2.87273781e-02, 3.78093002e-02,
                  4.11790449e-02, 4.00629061e-02, 3.78446792e-02, 2.75818694e-02, 2.86297295e-02,
                  1.94331367e-02, 2.59844742e-02, 1.06292394e+00, 7.50545937e-02, 3.64184226e-02,
                  8.10604714e-02, 1.89592472e-02, 1.30146127e-02, 7.31690052e-03, 1.50440200e-02,
                  2.13248384e-02, 1.71559003e-02, 1.78555914e-02, 2.10409365e-02, 3.49136617e-03
              ],
              [
                  7.01663877e-03, 9.20841271e-03, 1.07526448e-02, 1.10845218e-02, 1.32876845e-02,
                  1.63218559e-02, 8.82192991e-03, 1.33129848e-02, 8.90679077e-03, 9.62346018e-03,
                  1.56565529e-02, 1.43115209e-02, 9.36003955e-03, 7.58724333e-03, 8.53967074e-03,
                  8.70425087e-03, 6.86559765e-03, 1.04440262e-02, 4.07535487e-03, 5.01005758e-03,
                  3.16971737e-03, 5.50984771e-03, 6.58514467e-03, 1.12176506e+00, 7.22464845e-03,
                  1.05084630e-02, 2.78517840e-03, 1.87399994e-03, 1.62904300e-03, 2.90723312e-03,
                  3.69738538e-03, 2.78969230e-03, 2.79659571e-03, 3.75406014e-03, 8.30515550e-04
              ],
              [
                  2.41832699e-03, 3.90802118e-03, 4.43559921e-03, 5.42673284e-03, 6.80367775e-03,
                  5.00276018e-03, 5.98512676e-03, 3.66283896e-03, 5.18599843e-03, 5.55829127e-03,
                  4.76944139e-03, 4.85339027e-03, 5.84143499e-03, 5.74198262e-03, 5.81563333e-03,
                  4.70676714e-03, 3.84988404e-03, 4.15012471e-03, 4.21196183e-03, 5.29630016e-03,
                  3.16937373e-03, 3.52566274e-03, 5.18333982e-03, 1.14713758e-02, 1.04124628e+00,
                  2.44654786e-02, 6.19071822e-03, 5.46621345e-03, 1.70435761e-03, 6.62250025e-03,
                  6.03344487e-03, 3.20360061e-03, 3.16786872e-03, 6.73219982e-03, 4.09490155e-04
              ],
              [
                  1.17807790e-02, 1.40351108e-02, 2.07243998e-02, 1.84783061e-02, 2.15570641e-02,
                  2.24092175e-02, 2.38595635e-02, 2.04494704e-02, 1.85481355e-02, 1.95102158e-02,
                  2.30103762e-02, 1.98673857e-02, 1.82751332e-02, 1.59635849e-02, 1.97056104e-02,
                  1.79248881e-02, 1.40070539e-02, 1.68183967e-02, 1.93004249e-02, 2.95578106e-02,
                  1.63509836e-02, 1.78293201e-02, 5.48583762e-02, 1.62827032e-01, 1.24818446e-01,
                  1.13294060e+00, 1.17208113e-02, 9.37699072e-03, 4.18889102e-03, 1.20260382e-02,
                  1.20056867e-02, 7.09024571e-03, 9.74065499e-03, 1.43386138e-02, 1.42452232e-03
              ],
              [
                  1.28726430e-02, 1.80868793e-02, 2.26683294e-02, 2.58220762e-02, 2.79228849e-02,
                  2.41619175e-02, 3.61692903e-02, 1.83316447e-02, 2.85111452e-02, 2.73584886e-02,
                  2.49295092e-02, 2.60361730e-02, 2.87737564e-02, 2.84288567e-02, 2.60353172e-02,
                  2.69035927e-02, 2.27071044e-02, 3.13159819e-02, 2.99828847e-02, 3.38532765e-02,
                  3.37078066e-02, 2.88996232e-02, 3.26798400e-02, 4.12733286e-02, 5.10173951e-02,
                  4.59128941e-02, 1.15700904e+00, 4.92093606e-02, 1.38567745e-02, 4.39106434e-02,
                  3.65989521e-02, 1.83196259e-02, 2.62355092e-02, 4.23998033e-02, 2.56571316e-03
              ],
              [
                  5.00235058e-02, 6.24281309e-02, 6.29856225e-02, 7.42471838e-02, 6.73172772e-02,
                  6.73669809e-02, 7.27294165e-02, 5.78898469e-02, 6.51852115e-02, 6.65457091e-02,
                  6.93175812e-02, 6.85176542e-02, 6.60528674e-02, 5.95927084e-02, 6.51073297e-02,
                  6.96696681e-02, 6.98521198e-02, 6.57186567e-02, 5.75294322e-02, 6.71019176e-02,
                  6.36117667e-02, 6.40647845e-02, 8.69717676e-02, 9.22123987e-02, 8.60280119e-02,
                  6.77472620e-02, 5.40553366e-02, 1.27751418e+00, 9.68361843e-02, 7.42511278e-02,
                  5.41608055e-02, 3.06408199e-02, 5.41434525e-02, 8.16266183e-02, 1.55917359e-02
              ],
              [
                  1.53692007e-02, 1.57376885e-02, 2.21770621e-02, 2.30931303e-02, 2.40382427e-02,
                  2.32903252e-02, 2.82938662e-02, 1.58779684e-02, 2.17878970e-02, 2.39173013e-02,
                  2.04333057e-02, 2.25120189e-02, 2.36140625e-02, 2.16721987e-02, 2.37249987e-02,
                  2.41913455e-02, 1.99780654e-02, 2.64609070e-02, 3.56291488e-02, 3.40711356e-02,
                  4.97135798e-02, 4.33704247e-02, 2.29314728e-02, 3.83131060e-02, 3.15362264e-02,
                  3.82843262e-02, 3.03403768e-02, 3.85899449e-02, 1.04354587e+00, 3.81677744e-02,
                  2.69703754e-02, 2.68201022e-02, 4.57373343e-02, 4.18829638e-02, 2.05908742e-03
              ],
              [
                  5.10934386e-02, 7.35069080e-02, 1.07488442e-01, 1.05392899e-01, 1.01245086e-01,
                  9.27459906e-02, 1.49381458e-01, 7.26075642e-02, 1.51459308e-01, 1.25075440e-01,
                  1.00943121e-01, 1.05216916e-01, 1.25810515e-01, 1.40680365e-01, 1.33936104e-01,
                  1.06884278e-01, 1.10868912e-01, 1.24991267e-01, 1.06034453e-01, 9.49357691e-02,
                  9.96418631e-02, 9.56477638e-02, 9.74785287e-02, 1.04972834e-01, 1.68394182e-01,
                  1.32491467e-01, 1.30049913e-01, 1.60214146e-01, 6.44847949e-02, 1.20320848e+00,
                  1.19472598e-01, 5.99651760e-02, 1.06718504e-01, 1.36659290e-01, 1.06796098e-02
              ],
              [
                  3.38074155e-03, 5.88822378e-03, 5.12835839e-03, 4.42625447e-03, 4.17692762e-03,
                  6.96859832e-03, 6.70338567e-03, 4.70098277e-03, 6.37754124e-03, 5.93931160e-03,
                  5.47543595e-03, 6.15874212e-03, 4.56991915e-03, 4.37953490e-03, 4.93021594e-03,
                  5.33835353e-03, 7.89823567e-03, 4.79852520e-03, 4.46960918e-03, 3.08816651e-03,
                  4.47149097e-03, 6.15724506e-03, 5.25842216e-03, 9.82398671e-03, 1.22397422e-02,
                  6.21440802e-03, 5.11857309e-03, 3.42536155e-03, 4.37692655e-03, 4.90471711e-03,
                  1.00931026e+00, 5.55421512e-03, 6.61911745e-03, 1.08342055e-02, 5.35465875e-04
              ],
              [
                  1.32204381e-03, 1.21438054e-03, 1.75625348e-03, 1.78171678e-03, 1.86197449e-03,
                  1.61056387e-03, 2.13699013e-03, 1.40608839e-03, 2.31763305e-03, 2.11252318e-03,
                  1.78816941e-03, 1.97792180e-03, 2.27694981e-03, 2.34840616e-03, 2.34230880e-03,
                  1.69236426e-03, 2.08390673e-03, 1.71818313e-03, 1.76620837e-03, 1.48650593e-03,
                  2.15029430e-03, 1.53547025e-03, 2.10761213e-03, 1.69095166e-03, 3.23284017e-03,
                  2.34569983e-03, 2.65531255e-03, 2.34567502e-03, 8.06321188e-04, 3.32709774e-03,
                  5.27641571e-03, 1.01128365e+00, 1.99717805e-03, 2.66097384e-03, 1.49670104e-04
              ],
              [
                  2.15443549e-03, 8.42269407e-04, 1.68785007e-03, 1.31471365e-03, 2.16823038e-03,
                  1.38488461e-03, 1.20562317e-03, 8.26596616e-04, 1.30521877e-03, 1.24662235e-03,
                  1.09313411e-03, 1.14506363e-03, 1.33895993e-03, 1.16948824e-03, 1.24369731e-03,
                  1.24463562e-03, 8.89530951e-04, 1.16365143e-03, 1.10135380e-03, 1.00148912e-03,
                  8.25908669e-04, 1.82482752e-03, 1.24702806e-03, 1.07494820e-03, 1.18127143e-03,
                  1.28883769e-03, 1.22690081e-03, 1.04318445e-03, 3.60997944e-04, 1.28925810e-03,
                  5.85823710e-03, 1.86306022e-03, 1.02608642e+00, 1.86233953e-03, 1.14558507e-04
              ],
              [
                  9.58544228e-03, 1.48069787e-02, 1.84905619e-02, 1.94635821e-02, 2.15182386e-02,
                  1.80909547e-02, 3.07799548e-02, 1.41581620e-02, 2.27369139e-02, 2.06224556e-02,
                  1.81660216e-02, 2.04456836e-02, 2.01556799e-02, 1.88916819e-02, 1.98330961e-02,
                  1.92301869e-02, 1.77955222e-02, 1.90858066e-02, 1.88552872e-02, 1.63237129e-02,
                  1.66672109e-02, 2.40822634e-02, 1.95282962e-02, 1.82646946e-02, 2.27131497e-02,
                  2.35727657e-02, 3.25979481e-02, 2.18774673e-02, 1.31612569e-02, 4.04860565e-02,
                  2.57430895e-02, 1.65476667e-02, 2.43578332e-02, 1.09698303e+00, 3.38644611e-03
              ],
              [
                  4.87081991e-05, 5.51288856e-05, 8.01461508e-05, 1.27091389e-04, 9.04820185e-05,
                  9.03063014e-05, 1.02452658e-04, 5.78432215e-05, 9.07233764e-05, 1.02409679e-04,
                  7.21083238e-05, 7.76195984e-05, 8.23543889e-05, 7.27279048e-05, 1.11684991e-04,
                  7.91787551e-05, 6.15820626e-05, 1.27170575e-04, 1.12694728e-04, 5.06765822e-05,
                  7.95970486e-05, 1.01608096e-04, 1.32607515e-04, 6.82763419e-05, 8.16108091e-05,
                  7.45916628e-05, 9.61986155e-05, 1.06657104e-04, 2.94175618e-04, 1.14430936e-04,
                  1.12792260e-04, 6.78900950e-05, 1.31197609e-04, 1.80070916e-04, 1.00009558e+00
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def leontief_matrix_2002():
    """
    Real Name: b'leontief matrix 2002'
    Original Eqn: b'1.1770934195004514,0.004803511415328438,0.36060340049988215,0.07516064089136278,0.10333204784898188,0.19979352644532236,0.028321992546954958,0.006644194866055383,0.01791856563777348,0.02980877049705811,0.008784266917690199,0.007342068957739856,0.008118766870628777,0.007255198619986325,0.0087494651842566,0.03361897369899403,0.005043785438255704,0.025135962050235463,0.005831945359434561,0.009308409226286701,0.008181647296787175,0.10278838204807302,0.0069144109431909725,0.009477171838140709,0.008173882159492588,0.01216354006111696,0.005093080479424044,0.004113061909649527,0.003397244244406686,0.006243967223770523,0.009624522906313595,0.00849373136727615,0.012186616799151277,0.011393738180722134,0.019799128202376996;0.023543235794444735,1.0976336767938717,0.024358810701145116,0.028312576696248145,0.023257866999481538,0.029587667288753408,0.026388446237505137,0.5190693814602243,0.0820305377295917,0.04098081566471252,0.11075305409869618,0.09528804183606342,0.03576549218933433,0.024644652541962332,0.030340392020080445,0.030268633823769226,0.14741529482583557,0.05408676431430175,0.015032973236603797,0.010636610844143931,0.010482196771875823,0.016910324183054062,0.04217610530025555,0.0605284259892662,0.045900911392570604,0.02260098729280562,0.010363678417132687,0.006214060700174926,0.008513844702087159,0.010520467194529017,0.017547921864262496,0.012395130142607739,0.014986384119217034,0.015942013873997258,0.06856483498330648;0.077765440684227,0.003960406456298709,1.200126602324418,0.01642056456051303,0.1355965758349623,0.01998963559312544,0.011768952098872234,0.005083404767069651,0.02018104859275682,0.013872605936189199,0.007738377990178087,0.007090426428148736,0.00787931987030929,0.007282276091166695,0.007673098058866469,0.01014422857321928,0.004827180815156888,0.007757352359511857,0.0064486682971091995,0.00977903545698865,0.008808847488555439,0.18363542713200914,0.006271052774658043,0.013363891948146463,0.011720693093156738,0.009258640829815916,0.0065342295526269285,0.005290255433888693,0.002338362824450118,0.007626300986275652,0.01276733912006153,0.012204813570318128,0.021093281741495638,0.013939036065676407,0.0055392146596340355;0.005471236759239301,0.0035560237359068382,0.00694279726663441,1.4363123139560592,0.09325680117645556,0.010427594873826107,0.013278727171133521,0.004045018926023599,0.009323343456165633,0.022988486072231498,0.01017928325948275,0.006909941421886845,0.009288424784962345,0.007807630337306619,0.016561978458425844,0.03569604626334288,0.002970645769347164,0.007661245818132035,0.0057636594706993545,0.00529852766870097,0.006085569874760835,0.006657288268892976,0.005075913499874147,0.0061993742652950296,0.00492030981464648,0.005033126164256387,0.003399993285182642,0.0023419889778681373,0.001501163514731526,0.003773841055767351,0.007231498947889216,0.002839781363782886,0.006460957471217053,0.011970960669126458,0.0006818656640148118;0.000454503059941268,0.0003601515430638507,0.000687112879996334,0.011184383925560313,1.2710712403745512,0.0011613313705254493,0.0013973199553293958,0.00039081738939694227,0.0007885195815471223,0.002663634511900667,0.0008512299388169364,0.0008081643360883093,0.0009592243082015923,0.0008994597782891785,0.0029133890782017773,0.006000476460593039,0.000416058182629942,0.0006777590838124076,0.0010435656969418794,0.0007629514110480822,0.0006274834515794643,0.0005092733116898143,0.0006138047519745459,0.0006342284578698461,0.0005862680317617943,0.0005733373116428977,0.0005974791708621743,0.0002230302888928922,0.0001367803975142254,0.0003956869150598855,0.0009451800519989927,0.00031067406222954117,0.00042229002931860193,0.0008850355058065638,5.8317812522083704e-05;0.005102036306181755,0.004181378450850184,0.006539937805867091,0.006132459753674464,0.006963313678822101,1.274170907575268,0.019844573062979615,0.003556626678751983,0.005738641147173542,0.008939197604171691,0.01249800251752347,0.009611989086413359,0.008956384621692131,0.006531787671282109,0.010026618315226618,0.09349748155414887,0.0042864235154493535,0.04764724164622988,0.0040811733641853976,0.003888806523297579,0.003605259983122472,0.00620410535233125,0.004442083256753212,0.003951539528609001,0.003613993389188375,0.007328422715606933,0.00347644084864646,0.0024555754529628658,0.005478571199846013,0.003609626934401861,0.005095594001522398,0.004909462771741695,0.0037557823953118393,0.006945163907914902,0.0007730249510138306;0.01465756577510167,0.012109312410730752,0.05277474554375617,0.03577230990033823,0.04336258633404111,0.0352444680465609,1.311610794662356,0.013705378995981364,0.04275486994550169,0.045386642746090826,0.042552970827912984,0.024295047054644345,0.031150082219609198,0.03577030978439087,0.027763825424933674,0.04304605407521242,0.014581208219154452,0.02349915077489747,0.022589094682397816,0.026540152044378672,0.024728517918110544,0.028127198010851978,0.019645888598501342,0.018406022218712664,0.022242795531123495,0.03147123273611525,0.027164260836034602,0.0301174020445631,0.009399025114109665,0.04044567314207358,0.03452099527001027,0.02977707883255702,0.02397154188370594,0.04697203232330059,0.002020906418788802;0.023905091358914943,0.019028397941072056,0.01962379874620825,0.022719198259723187,0.02016145829770236,0.021852067958949006,0.017562247605146648,1.066485146277005,0.053837936319643814,0.03036501830771417,0.03519944371333017,0.026794044396346705,0.017854530753136727,0.01413511854286942,0.01605506695660004,0.01644560802010012,0.0309333524794028,0.02748232632359153,0.011926896929622352,0.011749906833354508,0.009152523859690263,0.012706348516296538,0.06396153754422113,0.10589974280022735,0.07720236201115223,0.027767664101592784,0.009078628831084977,0.005473314935618639,0.004410928008353691,0.010164266753969,0.015767448124082515,0.007244710029001096,0.011222971107008786,0.012388568305767773,0.0018754899176678817;0.0684975994756314,0.02501579180246762,0.05266640648573321,0.14940221983485463,0.10303143885004436,0.08029462605520216,0.0785726948629198,0.03801340824247826,1.3223073626165855,0.31925104979260177,0.06780996225887008,0.0474253043873175,0.05019299325759377,0.057791521023060136,0.059317799687425676,0.06761020548099639,0.02071878587862402,0.04263803245296373,0.027561470663531654,0.013257349693764114,0.011752023181974571,0.02442874593960743,0.018754634067072135,0.020776989270158946,0.01792970177830164,0.018218412963991786,0.012544429062861559,0.007940480820906216,0.007026311374790405,0.016449428382537643,0.024951921704554646,0.012104897060238822,0.09697472291058595,0.026548563998850163,0.003436804366469615;0.014110367449697044,0.014040353752576114,0.03373462494898789,0.027958634724958346,0.06447544747591706,0.024341432712607566,0.03201907244503689,0.01390262509936942,0.03609354477300691,1.1620375591784233,0.024389908748407185,0.02239476547302808,0.05216768285105857,0.05107288937463106,0.07269796803550077,0.04861503630972864,0.010557146109871905,0.03392488649351427,0.032029718122850125,0.010520734040758976,0.010352595469871084,0.014587783434544359,0.02040293898762328,0.014869171819695869,0.013914115227342446,0.01538581540932631,0.010779673145076366,0.0046754359124419635,0.0044975813191517975,0.009019023790277017,0.011018303333918551,0.005202750557083067,0.013321222786194605,0.011424396270782794,0.001527304377489511;0.006460451855056023,0.008831354553435694,0.01294107236122221,0.008830234242612119,0.008513485181559447,0.01672535550861414,0.006391323459105475,0.008569610073095271,0.013367117183739763,0.015337574285956782,1.1356627915727184,0.02271221629293608,0.016693743126041084,0.024706753576155125,0.019976382905603385,0.014229023513538148,0.008047742824031333,0.09723695026578723,0.008610573061587022,0.004008234885186523,0.0037587703109941747,0.008706917932070403,0.005916815933642236,0.005520077290577187,0.00498857401414452,0.006281186202755137,0.005630823771633548,0.0025544562306066857,0.007233384082910204,0.004286303007877081,0.006059696080793685,0.005036353012668315,0.006147294961824641,0.006297531499180639,0.000898601612354443;0.023442275824266293,0.051457694532787104,0.045345143657441196,0.03638366991650632,0.045072948325143435,0.07022745530277479,0.03859733875040847,0.043771147160431643,0.050198213917354295,0.07237797801162084,0.08067704055949265,1.4925799673578652,0.3099317807062257,0.15586531074790813,0.240437160025686,0.1483595307150077,0.03555198655862651,0.16874151538743232,0.06673949905807093,0.018428887617602155,0.016458110408128813,0.024652588643450973,0.035408191041453194,0.04226083175595563,0.034810124500991385,0.030761614275344,0.024408546493600244,0.010235153199532259,0.015207746918908933,0.01947019082709534,0.02664834187725041,0.013373715758228122,0.01923737624235517,0.02352141269709833,0.004813342734122268;0.014106860704440952,0.023250946258542078,0.014935707873414618,0.021648003298446426,0.017442395830477363,0.02108759435496793,0.01665612554539781,0.020542026647217812,0.018238127040096176,0.024698819851971504,0.031244862158522322,0.03560571704402466,1.15707007648588,0.032644771270093846,0.062479719701343785,0.02169666475553675,0.019720062438745432,0.03278197594359454,0.03429448201557173,0.008516724583865161,0.006621769363142975,0.008831116195045818,0.014658021849636185,0.021533821062206943,0.014613847545234232,0.012425697212512384,0.008729957075058853,0.0045229951199515245,0.004749421882498685,0.008138339409272423,0.012557172188815422,0.005824686265938928,0.007754904394141181,0.009538145349366773,0.0019998808416966415;0.01433092737970101,0.022878940467027393,0.02299234417907727,0.03094124500976431,0.029089611372379205,0.030818616971694777,0.03616304590887174,0.02599861330929676,0.03624004822077129,0.045666505410817355,0.03832529156470688,0.05409847879898788,0.16858122943808995,1.4551589303362291,0.13826763683159116,0.051360171417938215,0.040212124071716836,0.06891106549256136,0.06456518868258874,0.024085024501033774,0.021057823011465263,0.01987811626276076,0.028481106972209645,0.029861591412213142,0.02947894291503106,0.029329610049863074,0.0739184660545084,0.01763477137832653,0.010906380680424977,0.035686601023526957,0.03500540580067739,0.017299451057099673,0.043128551253625316,0.029550933072615346,0.003124400298914679;0.013986352176244174,0.01613553017888803,0.016343146656611195,0.01677579876189126,0.01757425335205198,0.018546818034748527,0.014554047432150118,0.015361180730913344,0.014695225936558445,0.018947836272216637,0.018301109612218876,0.022413849617217603,0.035799671458432006,0.020110289018069046,1.441420281688886,0.01789796218158356,0.012129099342283428,0.01865221263554524,0.1359927431384475,0.014869949315940488,0.01139252586962751,0.010259680198474322,0.0620921337690689,0.07937368458741888,0.08769322548060877,0.030602913676508928,0.01249227799332254,0.006736375548335957,0.004601006328838586,0.012669334135029757,0.0298424934620639,0.006521909789872387,0.007893024632804056,0.015387668042705553,0.00176599651652924;0.0022727374961970742,0.0028239916094292467,0.00384207050382612,0.009605659211862702,0.0069249986908978415,0.008900529314781778,0.007369896795706649,0.002897208703884645,0.004735018367293625,0.006263574989441666,0.006143043266527736,0.01629380353814165,0.00990880242476971,0.00745930256292158,0.012157190376292919,1.046765924908948,0.003287923141618705,0.009492918067010133,0.0052304283714825145,0.0027533285782820414,0.0028828243790310387,0.004558600621593504,0.004127650086568357,0.003463102453094914,0.004041859271563977,0.004027973241498344,0.0029051756048900377,0.0024164710655349905,0.002829826541383669,0.003785237350479254,0.005973475887066499,0.004372747146975606,0.004678123317434236,0.008039598799496958,0.0024250082687568204;0.023687125430071638,0.040607787498543345,0.03449104088852629,0.04483313954056458,0.0319805031706473,0.04087826190273733,0.04656055113118478,0.04068240019105849,0.052803749215963564,0.05031542964848163,0.06482456413330698,0.06024900046589527,0.0377449526432921,0.029840651050711476,0.03562901445451938,0.029624681470872456,1.1187992231372539,0.02857897656581732,0.02356377047063057,0.014500476285785095,0.021930618940159293,0.03888622332696823,0.02849102568480697,0.019752435589884425,0.0190836616750681,0.027960248863478428,0.01931108060366809,0.011828418719165654,0.01566815942729855,0.015342384154133255,0.026493989336802644,0.02804943916384358,0.024857672329459984,0.028490235888073277,0.0035666524153607714;0.008838605826245485,0.014430658979640423,0.01082438156239489,0.011507729149764716,0.010162850637719817,0.012011298611175161,0.012191308361598409,0.012834487234316079,0.012253156786308913,0.011960016781562088,0.016580957451122064,0.014181932904919573,0.012206072604493655,0.010153127217702656,0.011054962632078879,0.009636838103138935,0.031700655294031606,1.0580347267526713,0.010803472876818463,0.00920432502180108,0.010790041199691897,0.013667258193756004,0.017081798345111185,0.012261944565542911,0.011099432964880486,0.021804463540667306,0.018198696196592586,0.01135757721242739,0.04721031363807934,0.011177416405655791,0.024502912568656797,0.020261181232505462,0.012465530617947279,0.018016693639999973,0.002027574807613296;0.009578707611370472,0.007835197522206917,0.01500412033941146,0.014429257111043108,0.01742221955822895,0.01397647361143904,0.012041466859304847,0.008984169790368044,0.013448468644794745,0.014680984792367227,0.014533606834632576,0.014423446428672554,0.01342683552384475,0.011458245176556959,0.014229869247398668,0.01281067606971691,0.013237197055074713,0.01422217600330133,1.0154194113359063,0.007400311112132393,0.007151081700221829,0.010534336636960483,0.02192101782518049,0.008799636394608203,0.009593792832996193,0.014018906613707768,0.007719266191225949,0.005876368916702847,0.004016806472521917,0.009638218272174615,0.008313463629544222,0.005377951972479509,0.007591437049022724,0.010751429394069449,0.0008719229085503334;0.060866252679072926,0.04371982509085415,0.11392085270739756,0.1082900876587184,0.13110385862393045,0.105387468609927,0.09330432160315029,0.075860143830973,0.09306539234027017,0.1009638668787363,0.08113461977337659,0.09626359980450104,0.10044237618970488,0.09253552006850572,0.1074969770429277,0.08755646644925927,0.04652655823969478,0.08197062915943401,0.06337066472836131,1.040270040670069,0.026034748604461748,0.07722203225785589,0.04623207778367436,0.051544924702552564,0.04853338840496177,0.04427912969573128,0.028571636163523408,0.01664306425229338,0.013069511010970364,0.030021829087916854,0.037928933670881515,0.02247676009511242,0.04768492355438558,0.03723466909026099,0.004934671940169273;0.02957503236942759,0.017745588226606247,0.05408241606100654,0.054785187652124055,0.07288053321655781,0.0424571927683035,0.03694720227718686,0.024723687312167,0.04090562303456125,0.042715786132003,0.03562044267766926,0.03674601668600427,0.0383930464935571,0.033522468549388305,0.04523586563893453,0.04213753341320088,0.018635560006896756,0.04735411773533155,0.028170587210136856,0.013754660801283815,1.0140665711702335,0.04084283812275188,0.024343758591150438,0.021748366134402605,0.022053795912550626,0.020346693458866343,0.016851949005136042,0.01117140723030313,0.008120855665364165,0.017564593969952604,0.017924399979275422,0.01146055597629401,0.021382758330826743,0.02098737924788875,0.0024373088492798405;0.0058102989958419456,0.007755896215556024,0.011747441431748582,0.013607902370711205,0.013777932048759942,0.01326342335875851,0.015809148218203322,0.008129586144897534,0.013238140947067099,0.015220725575515376,0.01358131471107061,0.01375301141797052,0.016019548760203308,0.014475083744792209,0.012924070694873568,0.011370603442661852,0.011307995416092446,0.01275304373314935,0.012057993323923032,0.01339697085092565,0.010322004466551585,1.0168412058963956,0.014281234290158174,0.013442671615280613,0.03067646232484852,0.02564140873562071,0.015947062309979734,0.01656002362849007,0.005985061604526419,0.020870424027736256,0.016492519721745556,0.009502266175483429,0.014055183894779102,0.01887475460242199,0.0009607636477991869;0.02662757021981597,0.033289697437336264,0.04769528598640927,0.046388412673622634,0.049775011862462706,0.049068408821690966,0.04081210633808705,0.05900358779419655,0.04105073335535679,0.0424406168754233,0.05775256895875359,0.043831296369278794,0.035982178824785604,0.028639393265256153,0.03738438412897661,0.03733154713899504,0.03760428044415346,0.03770358774687739,0.027575896230748638,0.02797707176523035,0.019553350182220416,0.02570315819356895,1.0623088524091255,0.07395122255622029,0.03515312510033645,0.07773525892888002,0.018238568345685015,0.01269741436615023,0.006999860129839151,0.014713072774982457,0.021162475780182783,0.016810653513466077,0.017413085281985482,0.020572167119587648,0.003309367533288477;0.0074127358412874505,0.009340995646220727,0.011021914948046573,0.011366571695413859,0.013465448531656892,0.016075278960748594,0.009231665486021235,0.0152001685714259,0.00939580089108725,0.010201542508432308,0.01797262904313334,0.015209693283108049,0.010463445422423338,0.0081303319673794,0.009013612814417616,0.008662982082339891,0.007449949100487275,0.011252104671398118,0.004239589188048945,0.005287437332265352,0.0033814419033910362,0.005515298758155913,0.006786786400929113,1.120973893973772,0.006935658867640808,0.00971940211442381,0.0028569459359755935,0.0019372143280220857,0.0018694484698434924,0.0030203684870465978,0.003828715470679224,0.0026616684362822125,0.002850474657666468,0.003806137050554607,0.0008311365421654777;0.002389462761720508,0.0038190465621517453,0.004391391212838942,0.005362379426976877,0.0066316672045171115,0.005071784134434871,0.0058215224592553785,0.0036926257559849684,0.004975536710110659,0.005436587373215336,0.0047626684663781855,0.004689808141835932,0.005788209660825431,0.005432094086572601,0.005343718590481724,0.004095177772777556,0.002953436480391394,0.0039935313030351905,0.003956177569225059,0.005110309096793407,0.0030686268766025827,0.003429299205278414,0.005260404190988933,0.012529293757544744,1.0393593472785105,0.022385371477971375,0.005738501291993812,0.005053228615863345,0.0015881283265098782,0.006227873549302799,0.005831258525629535,0.003108328920317046,0.00304100874136917,0.006455782445467083,0.0003928159296284877;0.011740831686720035,0.01342816779553517,0.02089252113565393,0.018113449072547253,0.02113811408572343,0.022208762249498203,0.023975171030156697,0.021223038422409853,0.018461213273659193,0.01962258202618562,0.023077646003388238,0.02004938704920256,0.018596262348349435,0.015550893960405664,0.019428763412388944,0.016319530076238178,0.01300591032070378,0.016722917657069857,0.019682738013612,0.028904577526954085,0.016705937317900776,0.017595413272711947,0.05454365488140836,0.1511994834965466,0.12403365747031912,1.1299943560515568,0.01132165218313998,0.008867165353981748,0.0040892622041217306,0.011695933341355689,0.011986530350296508,0.006838377694795838,0.009603227718076961,0.01386268796554185,0.0013461946774008745;0.013440186714427592,0.01744467122402596,0.023560001136564656,0.027004688096525918,0.029519942972339754,0.025318034391090052,0.036894876301244724,0.019028376519132285,0.029565136661308753,0.02835034721435687,0.0261698695146215,0.026774934069174625,0.030243277901538426,0.028716745917999584,0.026697614009138674,0.0250680707439839,0.02014743020350479,0.03243445275652567,0.03125055002031496,0.03508497993334575,0.03506221152501066,0.030088065755483902,0.03370041147714321,0.04062200463494899,0.04761001212680754,0.04701610743145201,1.1562962907530745,0.0497936587006669,0.014386426022608393,0.044552524247200895,0.03786373330994867,0.018659002138556625,0.026753868550947305,0.04160779385145056,0.002581827209029768;0.05064556892525492,0.05858841199050501,0.06322664813443321,0.07424220509203086,0.06680094282081701,0.06494052118330593,0.07152670801619035,0.057398713117860274,0.06353227808522763,0.06600742115172807,0.070503157335962,0.06711546290251669,0.06668544825014196,0.057863713775635886,0.06373885099147011,0.06307679775260569,0.05786888929746505,0.06583269200332324,0.05600734947556848,0.0674278621523221,0.06465940710757206,0.0645767603670706,0.09008742930208968,0.09623374268886574,0.08329047862389308,0.06841449355056564,0.053238979628583434,1.268682865132533,0.10591214351052548,0.07338687567065923,0.05530461955050427,0.031042220649214365,0.05519643533203783,0.08384959794904756,0.014711528912733293;0.014936466294386328,0.014714294894906745,0.022210922149237367,0.02290434844050123,0.024089047327803963,0.02338205644159036,0.028515294038498142,0.01564608535622706,0.021527953303979143,0.023838732940756,0.020322873499249175,0.022353559150337307,0.023892268118797744,0.021153372018478996,0.023528087291696777,0.02137073348750913,0.016085302362213012,0.026543962991202253,0.036416600608092396,0.032937271628872916,0.051001169697091064,0.04390836629029557,0.022602572093884794,0.03700775796039229,0.028483944627967755,0.038598579685704335,0.029596708048228174,0.037881424646391645,1.040916964974812,0.03795691611516829,0.026221519109699203,0.027194631597069627,0.04632732189836787,0.04094662702946023,0.0018665893171701334;0.050864695351197795,0.06815914050945768,0.10720827930226039,0.10348801776464019,0.10019305729008361,0.0941579396416342,0.14736641913359563,0.07289552333797877,0.1518580772706098,0.12581156503942667,0.10138706177298389,0.1047394203615762,0.12706633648104174,0.13432879448924523,0.1320524012760126,0.09276923576722637,0.08665576699171954,0.12266314740978736,0.10620986460551732,0.09586524700339678,0.09976768227144077,0.09742751313355508,0.09841361018966795,0.10395802067022997,0.15684233353842078,0.13065014755698695,0.12543798468665623,0.15856328636271433,0.0647885127057195,1.202350229472195,0.1273603108700741,0.060603243495328106,0.10767616597074935,0.13514349060825687,0.010318019530832827;0.0032664018176574807,0.00505455132805862,0.0050371147038399825,0.004337497583523019,0.004092275949820839,0.006834417613348939,0.006830813228150814,0.004537770672405292,0.006283986363284648,0.005735117490282443,0.005358755324846275,0.006222140215302872,0.004517164942799464,0.00412167458478636,0.004755108219940458,0.004768808665677609,0.007210160698964751,0.004554002307652468,0.004555013975172078,0.0030455171595243336,0.004203147976678319,0.006075316313518895,0.0053137715365674755,0.009504677283685864,0.012482539956347663,0.006172661600055295,0.005081180153798252,0.003344209107784697,0.004185159542001648,0.004809068782926642,1.009259703152933,0.005745991888764697,0.006509170432021355,0.010875339620302304,0.00047234168257530523;0.001212354659955094,0.0011268285275393907,0.001683263741103621,0.001728236826005925,0.0018174027749179376,0.0015793952301166277,0.001983023605144732,0.0013793516466643018,0.0023874137569722636,0.0021038771670730773,0.0018329244307137337,0.0019324653180125876,0.002315451535622266,0.0022345995954993754,0.0023095976202310822,0.001499982405750568,0.0016498031556688032,0.0016685646309178496,0.0017560590558909671,0.0014321796496391211,0.0016968946794829296,0.0015103120352002162,0.0020917385087283863,0.0015843395096017128,0.0031594902353702754,0.0023134431850079453,0.002508878577954744,0.0022132937760201052,0.0007953510551359761,0.0033426422684446314,0.00502044859757328,1.012549901112561,0.001930568458008266,0.0026256501351413684,0.00013928320178996668;0.002151126035658223,0.000768736326079072,0.0016885170153530572,0.0012960886285570147,0.0022505892005507335,0.0013696840291488627,0.0011859794982456986,0.0008094827524384202,0.0012943983330988955,0.0012300405119848993,0.0010834734931969943,0.0011208189901410633,0.0013216964408908792,0.0011036110708713082,0.0011955241861950387,0.001164593020385036,0.0008208298280879146,0.0011231376893116526,0.001074500717045638,0.0009852052950600615,0.0008103510003352991,0.0017821988977957026,0.001183581340456851,0.00101984739297709,0.00112301004354458,0.001237367331846176,0.0011894504152568594,0.0010111300745377805,0.00035323122017084235,0.0012217481862994552,0.005329040764039395,0.0018321862813930325,1.025948345971017,0.001751393554317842,0.0001069272872000617;0.009573269211545164,0.013960668643729583,0.01830399314888051,0.01916877418879457,0.0214891936635458,0.018179751428511106,0.030180207075390524,0.014127569919209342,0.022771973559864434,0.0206770704255957,0.018318557591081315,0.020398454876964844,0.02027134697804621,0.01801157773745833,0.019527613302662106,0.016832444066363826,0.01510714178742203,0.018842300441755996,0.018374695472136438,0.016316362745862328,0.016541459224563206,0.02400090022104459,0.019523505089730678,0.017841563296428505,0.021299012262223114,0.02269909424927517,0.033234992726581446,0.02152059627351454,0.013096189330457487,0.039280140838940866,0.026219624599515205,0.016620546072505335,0.023609759011285907,1.095677584935405,0.0034939159037278263;4.584670609260009e-05,4.7502825747837085e-05,7.539053981836437e-05,0.00012782051287941229,8.325546013713484e-05,8.333025565606408e-05,9.332686601926926e-05,5.335307144273106e-05,8.346242017403347e-05,9.562903617678728e-05,6.654918730727744e-05,6.951825109049957e-05,7.840714688021918e-05,6.232961419842176e-05,0.00010800404436167145,5.8385120068854874e-05,4.216727955001564e-05,0.00011466365244317548,9.667903447075469e-05,4.441638572636481e-05,7.25774561017354e-05,9.539178368010406e-05,0.00011103906802892247,5.936171907476623e-05,6.975245345552613e-05,6.545927458781157e-05,7.796364274354136e-05,9.296986889614176e-05,0.00027163377828771224,0.00010328484038534966,0.00010647321573064856,6.295051227279786e-05,0.00010577735914183735,0.0001589615712073376,1.0001010529690162;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            1.17709342e+00, 4.80351142e-03, 3.60603400e-01, 7.51606409e-02, 1.03332048e-01,
            1.99793526e-01, 2.83219925e-02, 6.64419487e-03, 1.79185656e-02, 2.98087705e-02,
            8.78426692e-03, 7.34206896e-03, 8.11876687e-03, 7.25519862e-03, 8.74946518e-03,
            3.36189737e-02, 5.04378544e-03, 2.51359621e-02, 5.83194536e-03, 9.30840923e-03,
            8.18164730e-03, 1.02788382e-01, 6.91441094e-03, 9.47717184e-03, 8.17388216e-03,
            1.21635401e-02, 5.09308048e-03, 4.11306191e-03, 3.39724424e-03, 6.24396722e-03,
            9.62452291e-03, 8.49373137e-03, 1.21866168e-02, 1.13937382e-02, 1.97991282e-02
        ],
              [
                  2.35432358e-02, 1.09763368e+00, 2.43588107e-02, 2.83125767e-02, 2.32578670e-02,
                  2.95876673e-02, 2.63884462e-02, 5.19069381e-01, 8.20305377e-02, 4.09808157e-02,
                  1.10753054e-01, 9.52880418e-02, 3.57654922e-02, 2.46446525e-02, 3.03403920e-02,
                  3.02686338e-02, 1.47415295e-01, 5.40867643e-02, 1.50329732e-02, 1.06366108e-02,
                  1.04821968e-02, 1.69103242e-02, 4.21761053e-02, 6.05284260e-02, 4.59009114e-02,
                  2.26009873e-02, 1.03636784e-02, 6.21406070e-03, 8.51384470e-03, 1.05204672e-02,
                  1.75479219e-02, 1.23951301e-02, 1.49863841e-02, 1.59420139e-02, 6.85648350e-02
              ],
              [
                  7.77654407e-02, 3.96040646e-03, 1.20012660e+00, 1.64205646e-02, 1.35596576e-01,
                  1.99896356e-02, 1.17689521e-02, 5.08340477e-03, 2.01810486e-02, 1.38726059e-02,
                  7.73837799e-03, 7.09042643e-03, 7.87931987e-03, 7.28227609e-03, 7.67309806e-03,
                  1.01442286e-02, 4.82718082e-03, 7.75735236e-03, 6.44866830e-03, 9.77903546e-03,
                  8.80884749e-03, 1.83635427e-01, 6.27105277e-03, 1.33638919e-02, 1.17206931e-02,
                  9.25864083e-03, 6.53422955e-03, 5.29025543e-03, 2.33836282e-03, 7.62630099e-03,
                  1.27673391e-02, 1.22048136e-02, 2.10932817e-02, 1.39390361e-02, 5.53921466e-03
              ],
              [
                  5.47123676e-03, 3.55602374e-03, 6.94279727e-03, 1.43631231e+00, 9.32568012e-02,
                  1.04275949e-02, 1.32787272e-02, 4.04501893e-03, 9.32334346e-03, 2.29884861e-02,
                  1.01792833e-02, 6.90994142e-03, 9.28842478e-03, 7.80763034e-03, 1.65619785e-02,
                  3.56960463e-02, 2.97064577e-03, 7.66124582e-03, 5.76365947e-03, 5.29852767e-03,
                  6.08556987e-03, 6.65728827e-03, 5.07591350e-03, 6.19937427e-03, 4.92030981e-03,
                  5.03312616e-03, 3.39999329e-03, 2.34198898e-03, 1.50116351e-03, 3.77384106e-03,
                  7.23149895e-03, 2.83978136e-03, 6.46095747e-03, 1.19709607e-02, 6.81865664e-04
              ],
              [
                  4.54503060e-04, 3.60151543e-04, 6.87112880e-04, 1.11843839e-02, 1.27107124e+00,
                  1.16133137e-03, 1.39731996e-03, 3.90817389e-04, 7.88519582e-04, 2.66363451e-03,
                  8.51229939e-04, 8.08164336e-04, 9.59224308e-04, 8.99459778e-04, 2.91338908e-03,
                  6.00047646e-03, 4.16058183e-04, 6.77759084e-04, 1.04356570e-03, 7.62951411e-04,
                  6.27483452e-04, 5.09273312e-04, 6.13804752e-04, 6.34228458e-04, 5.86268032e-04,
                  5.73337312e-04, 5.97479171e-04, 2.23030289e-04, 1.36780398e-04, 3.95686915e-04,
                  9.45180052e-04, 3.10674062e-04, 4.22290029e-04, 8.85035506e-04, 5.83178125e-05
              ],
              [
                  5.10203631e-03, 4.18137845e-03, 6.53993781e-03, 6.13245975e-03, 6.96331368e-03,
                  1.27417091e+00, 1.98445731e-02, 3.55662668e-03, 5.73864115e-03, 8.93919760e-03,
                  1.24980025e-02, 9.61198909e-03, 8.95638462e-03, 6.53178767e-03, 1.00266183e-02,
                  9.34974816e-02, 4.28642352e-03, 4.76472416e-02, 4.08117336e-03, 3.88880652e-03,
                  3.60525998e-03, 6.20410535e-03, 4.44208326e-03, 3.95153953e-03, 3.61399339e-03,
                  7.32842272e-03, 3.47644085e-03, 2.45557545e-03, 5.47857120e-03, 3.60962693e-03,
                  5.09559400e-03, 4.90946277e-03, 3.75578240e-03, 6.94516391e-03, 7.73024951e-04
              ],
              [
                  1.46575658e-02, 1.21093124e-02, 5.27747455e-02, 3.57723099e-02, 4.33625863e-02,
                  3.52444680e-02, 1.31161079e+00, 1.37053790e-02, 4.27548699e-02, 4.53866427e-02,
                  4.25529708e-02, 2.42950471e-02, 3.11500822e-02, 3.57703098e-02, 2.77638254e-02,
                  4.30460541e-02, 1.45812082e-02, 2.34991508e-02, 2.25890947e-02, 2.65401520e-02,
                  2.47285179e-02, 2.81271980e-02, 1.96458886e-02, 1.84060222e-02, 2.22427955e-02,
                  3.14712327e-02, 2.71642608e-02, 3.01174020e-02, 9.39902511e-03, 4.04456731e-02,
                  3.45209953e-02, 2.97770788e-02, 2.39715419e-02, 4.69720323e-02, 2.02090642e-03
              ],
              [
                  2.39050914e-02, 1.90283979e-02, 1.96237987e-02, 2.27191983e-02, 2.01614583e-02,
                  2.18520680e-02, 1.75622476e-02, 1.06648515e+00, 5.38379363e-02, 3.03650183e-02,
                  3.51994437e-02, 2.67940444e-02, 1.78545308e-02, 1.41351185e-02, 1.60550670e-02,
                  1.64456080e-02, 3.09333525e-02, 2.74823263e-02, 1.19268969e-02, 1.17499068e-02,
                  9.15252386e-03, 1.27063485e-02, 6.39615375e-02, 1.05899743e-01, 7.72023620e-02,
                  2.77676641e-02, 9.07862883e-03, 5.47331494e-03, 4.41092801e-03, 1.01642668e-02,
                  1.57674481e-02, 7.24471003e-03, 1.12229711e-02, 1.23885683e-02, 1.87548992e-03
              ],
              [
                  6.84975995e-02, 2.50157918e-02, 5.26664065e-02, 1.49402220e-01, 1.03031439e-01,
                  8.02946261e-02, 7.85726949e-02, 3.80134082e-02, 1.32230736e+00, 3.19251050e-01,
                  6.78099623e-02, 4.74253044e-02, 5.01929933e-02, 5.77915210e-02, 5.93177997e-02,
                  6.76102055e-02, 2.07187859e-02, 4.26380325e-02, 2.75614707e-02, 1.32573497e-02,
                  1.17520232e-02, 2.44287459e-02, 1.87546341e-02, 2.07769893e-02, 1.79297018e-02,
                  1.82184130e-02, 1.25444291e-02, 7.94048082e-03, 7.02631137e-03, 1.64494284e-02,
                  2.49519217e-02, 1.21048971e-02, 9.69747229e-02, 2.65485640e-02, 3.43680437e-03
              ],
              [
                  1.41103674e-02, 1.40403538e-02, 3.37346249e-02, 2.79586347e-02, 6.44754475e-02,
                  2.43414327e-02, 3.20190724e-02, 1.39026251e-02, 3.60935448e-02, 1.16203756e+00,
                  2.43899087e-02, 2.23947655e-02, 5.21676829e-02, 5.10728894e-02, 7.26979680e-02,
                  4.86150363e-02, 1.05571461e-02, 3.39248865e-02, 3.20297181e-02, 1.05207340e-02,
                  1.03525955e-02, 1.45877834e-02, 2.04029390e-02, 1.48691718e-02, 1.39141152e-02,
                  1.53858154e-02, 1.07796731e-02, 4.67543591e-03, 4.49758132e-03, 9.01902379e-03,
                  1.10183033e-02, 5.20275056e-03, 1.33212228e-02, 1.14243963e-02, 1.52730438e-03
              ],
              [
                  6.46045186e-03, 8.83135455e-03, 1.29410724e-02, 8.83023424e-03, 8.51348518e-03,
                  1.67253555e-02, 6.39132346e-03, 8.56961007e-03, 1.33671172e-02, 1.53375743e-02,
                  1.13566279e+00, 2.27122163e-02, 1.66937431e-02, 2.47067536e-02, 1.99763829e-02,
                  1.42290235e-02, 8.04774282e-03, 9.72369503e-02, 8.61057306e-03, 4.00823489e-03,
                  3.75877031e-03, 8.70691793e-03, 5.91681593e-03, 5.52007729e-03, 4.98857401e-03,
                  6.28118620e-03, 5.63082377e-03, 2.55445623e-03, 7.23338408e-03, 4.28630301e-03,
                  6.05969608e-03, 5.03635301e-03, 6.14729496e-03, 6.29753150e-03, 8.98601612e-04
              ],
              [
                  2.34422758e-02, 5.14576945e-02, 4.53451437e-02, 3.63836699e-02, 4.50729483e-02,
                  7.02274553e-02, 3.85973388e-02, 4.37711472e-02, 5.01982139e-02, 7.23779780e-02,
                  8.06770406e-02, 1.49257997e+00, 3.09931781e-01, 1.55865311e-01, 2.40437160e-01,
                  1.48359531e-01, 3.55519866e-02, 1.68741515e-01, 6.67394991e-02, 1.84288876e-02,
                  1.64581104e-02, 2.46525886e-02, 3.54081910e-02, 4.22608318e-02, 3.48101245e-02,
                  3.07616143e-02, 2.44085465e-02, 1.02351532e-02, 1.52077469e-02, 1.94701908e-02,
                  2.66483419e-02, 1.33737158e-02, 1.92373762e-02, 2.35214127e-02, 4.81334273e-03
              ],
              [
                  1.41068607e-02, 2.32509463e-02, 1.49357079e-02, 2.16480033e-02, 1.74423958e-02,
                  2.10875944e-02, 1.66561255e-02, 2.05420266e-02, 1.82381270e-02, 2.46988199e-02,
                  3.12448622e-02, 3.56057170e-02, 1.15707008e+00, 3.26447713e-02, 6.24797197e-02,
                  2.16966648e-02, 1.97200624e-02, 3.27819759e-02, 3.42944820e-02, 8.51672458e-03,
                  6.62176936e-03, 8.83111620e-03, 1.46580218e-02, 2.15338211e-02, 1.46138475e-02,
                  1.24256972e-02, 8.72995708e-03, 4.52299512e-03, 4.74942188e-03, 8.13833941e-03,
                  1.25571722e-02, 5.82468627e-03, 7.75490439e-03, 9.53814535e-03, 1.99988084e-03
              ],
              [
                  1.43309274e-02, 2.28789405e-02, 2.29923442e-02, 3.09412450e-02, 2.90896114e-02,
                  3.08186170e-02, 3.61630459e-02, 2.59986133e-02, 3.62400482e-02, 4.56665054e-02,
                  3.83252916e-02, 5.40984788e-02, 1.68581229e-01, 1.45515893e+00, 1.38267637e-01,
                  5.13601714e-02, 4.02121241e-02, 6.89110655e-02, 6.45651887e-02, 2.40850245e-02,
                  2.10578230e-02, 1.98781163e-02, 2.84811070e-02, 2.98615914e-02, 2.94789429e-02,
                  2.93296100e-02, 7.39184661e-02, 1.76347714e-02, 1.09063807e-02, 3.56866010e-02,
                  3.50054058e-02, 1.72994511e-02, 4.31285513e-02, 2.95509331e-02, 3.12440030e-03
              ],
              [
                  1.39863522e-02, 1.61355302e-02, 1.63431467e-02, 1.67757988e-02, 1.75742534e-02,
                  1.85468180e-02, 1.45540474e-02, 1.53611807e-02, 1.46952259e-02, 1.89478363e-02,
                  1.83011096e-02, 2.24138496e-02, 3.57996715e-02, 2.01102890e-02, 1.44142028e+00,
                  1.78979622e-02, 1.21290993e-02, 1.86522126e-02, 1.35992743e-01, 1.48699493e-02,
                  1.13925259e-02, 1.02596802e-02, 6.20921338e-02, 7.93736846e-02, 8.76932255e-02,
                  3.06029137e-02, 1.24922780e-02, 6.73637555e-03, 4.60100633e-03, 1.26693341e-02,
                  2.98424935e-02, 6.52190979e-03, 7.89302463e-03, 1.53876680e-02, 1.76599652e-03
              ],
              [
                  2.27273750e-03, 2.82399161e-03, 3.84207050e-03, 9.60565921e-03, 6.92499869e-03,
                  8.90052931e-03, 7.36989680e-03, 2.89720870e-03, 4.73501837e-03, 6.26357499e-03,
                  6.14304327e-03, 1.62938035e-02, 9.90880242e-03, 7.45930256e-03, 1.21571904e-02,
                  1.04676592e+00, 3.28792314e-03, 9.49291807e-03, 5.23042837e-03, 2.75332858e-03,
                  2.88282438e-03, 4.55860062e-03, 4.12765009e-03, 3.46310245e-03, 4.04185927e-03,
                  4.02797324e-03, 2.90517560e-03, 2.41647107e-03, 2.82982654e-03, 3.78523735e-03,
                  5.97347589e-03, 4.37274715e-03, 4.67812332e-03, 8.03959880e-03, 2.42500827e-03
              ],
              [
                  2.36871254e-02, 4.06077875e-02, 3.44910409e-02, 4.48331395e-02, 3.19805032e-02,
                  4.08782619e-02, 4.65605511e-02, 4.06824002e-02, 5.28037492e-02, 5.03154296e-02,
                  6.48245641e-02, 6.02490005e-02, 3.77449526e-02, 2.98406511e-02, 3.56290145e-02,
                  2.96246815e-02, 1.11879922e+00, 2.85789766e-02, 2.35637705e-02, 1.45004763e-02,
                  2.19306189e-02, 3.88862233e-02, 2.84910257e-02, 1.97524356e-02, 1.90836617e-02,
                  2.79602489e-02, 1.93110806e-02, 1.18284187e-02, 1.56681594e-02, 1.53423842e-02,
                  2.64939893e-02, 2.80494392e-02, 2.48576723e-02, 2.84902359e-02, 3.56665242e-03
              ],
              [
                  8.83860583e-03, 1.44306590e-02, 1.08243816e-02, 1.15077291e-02, 1.01628506e-02,
                  1.20112986e-02, 1.21913084e-02, 1.28344872e-02, 1.22531568e-02, 1.19600168e-02,
                  1.65809575e-02, 1.41819329e-02, 1.22060726e-02, 1.01531272e-02, 1.10549626e-02,
                  9.63683810e-03, 3.17006553e-02, 1.05803473e+00, 1.08034729e-02, 9.20432502e-03,
                  1.07900412e-02, 1.36672582e-02, 1.70817983e-02, 1.22619446e-02, 1.10994330e-02,
                  2.18044635e-02, 1.81986962e-02, 1.13575772e-02, 4.72103136e-02, 1.11774164e-02,
                  2.45029126e-02, 2.02611812e-02, 1.24655306e-02, 1.80166936e-02, 2.02757481e-03
              ],
              [
                  9.57870761e-03, 7.83519752e-03, 1.50041203e-02, 1.44292571e-02, 1.74222196e-02,
                  1.39764736e-02, 1.20414669e-02, 8.98416979e-03, 1.34484686e-02, 1.46809848e-02,
                  1.45336068e-02, 1.44234464e-02, 1.34268355e-02, 1.14582452e-02, 1.42298692e-02,
                  1.28106761e-02, 1.32371971e-02, 1.42221760e-02, 1.01541941e+00, 7.40031111e-03,
                  7.15108170e-03, 1.05343366e-02, 2.19210178e-02, 8.79963639e-03, 9.59379283e-03,
                  1.40189066e-02, 7.71926619e-03, 5.87636892e-03, 4.01680647e-03, 9.63821827e-03,
                  8.31346363e-03, 5.37795197e-03, 7.59143705e-03, 1.07514294e-02, 8.71922909e-04
              ],
              [
                  6.08662527e-02, 4.37198251e-02, 1.13920853e-01, 1.08290088e-01, 1.31103859e-01,
                  1.05387469e-01, 9.33043216e-02, 7.58601438e-02, 9.30653923e-02, 1.00963867e-01,
                  8.11346198e-02, 9.62635998e-02, 1.00442376e-01, 9.25355201e-02, 1.07496977e-01,
                  8.75564664e-02, 4.65265582e-02, 8.19706292e-02, 6.33706647e-02, 1.04027004e+00,
                  2.60347486e-02, 7.72220323e-02, 4.62320778e-02, 5.15449247e-02, 4.85333884e-02,
                  4.42791297e-02, 2.85716362e-02, 1.66430643e-02, 1.30695110e-02, 3.00218291e-02,
                  3.79289337e-02, 2.24767601e-02, 4.76849236e-02, 3.72346691e-02, 4.93467194e-03
              ],
              [
                  2.95750324e-02, 1.77455882e-02, 5.40824161e-02, 5.47851877e-02, 7.28805332e-02,
                  4.24571928e-02, 3.69472023e-02, 2.47236873e-02, 4.09056230e-02, 4.27157861e-02,
                  3.56204427e-02, 3.67460167e-02, 3.83930465e-02, 3.35224685e-02, 4.52358656e-02,
                  4.21375334e-02, 1.86355600e-02, 4.73541177e-02, 2.81705872e-02, 1.37546608e-02,
                  1.01406657e+00, 4.08428381e-02, 2.43437586e-02, 2.17483661e-02, 2.20537959e-02,
                  2.03466935e-02, 1.68519490e-02, 1.11714072e-02, 8.12085567e-03, 1.75645940e-02,
                  1.79244000e-02, 1.14605560e-02, 2.13827583e-02, 2.09873792e-02, 2.43730885e-03
              ],
              [
                  5.81029900e-03, 7.75589622e-03, 1.17474414e-02, 1.36079024e-02, 1.37779320e-02,
                  1.32634234e-02, 1.58091482e-02, 8.12958614e-03, 1.32381409e-02, 1.52207256e-02,
                  1.35813147e-02, 1.37530114e-02, 1.60195488e-02, 1.44750837e-02, 1.29240707e-02,
                  1.13706034e-02, 1.13079954e-02, 1.27530437e-02, 1.20579933e-02, 1.33969709e-02,
                  1.03220045e-02, 1.01684121e+00, 1.42812343e-02, 1.34426716e-02, 3.06764623e-02,
                  2.56414087e-02, 1.59470623e-02, 1.65600236e-02, 5.98506160e-03, 2.08704240e-02,
                  1.64925197e-02, 9.50226618e-03, 1.40551839e-02, 1.88747546e-02, 9.60763648e-04
              ],
              [
                  2.66275702e-02, 3.32896974e-02, 4.76952860e-02, 4.63884127e-02, 4.97750119e-02,
                  4.90684088e-02, 4.08121063e-02, 5.90035878e-02, 4.10507334e-02, 4.24406169e-02,
                  5.77525690e-02, 4.38312964e-02, 3.59821788e-02, 2.86393933e-02, 3.73843841e-02,
                  3.73315471e-02, 3.76042804e-02, 3.77035877e-02, 2.75758962e-02, 2.79770718e-02,
                  1.95533502e-02, 2.57031582e-02, 1.06230885e+00, 7.39512226e-02, 3.51531251e-02,
                  7.77352589e-02, 1.82385683e-02, 1.26974144e-02, 6.99986013e-03, 1.47130728e-02,
                  2.11624758e-02, 1.68106535e-02, 1.74130853e-02, 2.05721671e-02, 3.30936753e-03
              ],
              [
                  7.41273584e-03, 9.34099565e-03, 1.10219149e-02, 1.13665717e-02, 1.34654485e-02,
                  1.60752790e-02, 9.23166549e-03, 1.52001686e-02, 9.39580089e-03, 1.02015425e-02,
                  1.79726290e-02, 1.52096933e-02, 1.04634454e-02, 8.13033197e-03, 9.01361281e-03,
                  8.66298208e-03, 7.44994910e-03, 1.12521047e-02, 4.23958919e-03, 5.28743733e-03,
                  3.38144190e-03, 5.51529876e-03, 6.78678640e-03, 1.12097389e+00, 6.93565887e-03,
                  9.71940211e-03, 2.85694594e-03, 1.93721433e-03, 1.86944847e-03, 3.02036849e-03,
                  3.82871547e-03, 2.66166844e-03, 2.85047466e-03, 3.80613705e-03, 8.31136542e-04
              ],
              [
                  2.38946276e-03, 3.81904656e-03, 4.39139121e-03, 5.36237943e-03, 6.63166720e-03,
                  5.07178413e-03, 5.82152246e-03, 3.69262576e-03, 4.97553671e-03, 5.43658737e-03,
                  4.76266847e-03, 4.68980814e-03, 5.78820966e-03, 5.43209409e-03, 5.34371859e-03,
                  4.09517777e-03, 2.95343648e-03, 3.99353130e-03, 3.95617757e-03, 5.11030910e-03,
                  3.06862688e-03, 3.42929921e-03, 5.26040419e-03, 1.25292938e-02, 1.03935935e+00,
                  2.23853715e-02, 5.73850129e-03, 5.05322862e-03, 1.58812833e-03, 6.22787355e-03,
                  5.83125853e-03, 3.10832892e-03, 3.04100874e-03, 6.45578245e-03, 3.92815930e-04
              ],
              [
                  1.17408317e-02, 1.34281678e-02, 2.08925211e-02, 1.81134491e-02, 2.11381141e-02,
                  2.22087622e-02, 2.39751710e-02, 2.12230384e-02, 1.84612133e-02, 1.96225820e-02,
                  2.30776460e-02, 2.00493870e-02, 1.85962623e-02, 1.55508940e-02, 1.94287634e-02,
                  1.63195301e-02, 1.30059103e-02, 1.67229177e-02, 1.96827380e-02, 2.89045775e-02,
                  1.67059373e-02, 1.75954133e-02, 5.45436549e-02, 1.51199483e-01, 1.24033657e-01,
                  1.12999436e+00, 1.13216522e-02, 8.86716535e-03, 4.08926220e-03, 1.16959333e-02,
                  1.19865304e-02, 6.83837769e-03, 9.60322772e-03, 1.38626880e-02, 1.34619468e-03
              ],
              [
                  1.34401867e-02, 1.74446712e-02, 2.35600011e-02, 2.70046881e-02, 2.95199430e-02,
                  2.53180344e-02, 3.68948763e-02, 1.90283765e-02, 2.95651367e-02, 2.83503472e-02,
                  2.61698695e-02, 2.67749341e-02, 3.02432779e-02, 2.87167459e-02, 2.66976140e-02,
                  2.50680707e-02, 2.01474302e-02, 3.24344528e-02, 3.12505500e-02, 3.50849799e-02,
                  3.50622115e-02, 3.00880658e-02, 3.37004115e-02, 4.06220046e-02, 4.76100121e-02,
                  4.70161074e-02, 1.15629629e+00, 4.97936587e-02, 1.43864260e-02, 4.45525242e-02,
                  3.78637333e-02, 1.86590021e-02, 2.67538686e-02, 4.16077939e-02, 2.58182721e-03
              ],
              [
                  5.06455689e-02, 5.85884120e-02, 6.32266481e-02, 7.42422051e-02, 6.68009428e-02,
                  6.49405212e-02, 7.15267080e-02, 5.73987131e-02, 6.35322781e-02, 6.60074212e-02,
                  7.05031573e-02, 6.71154629e-02, 6.66854483e-02, 5.78637138e-02, 6.37388510e-02,
                  6.30767978e-02, 5.78688893e-02, 6.58326920e-02, 5.60073495e-02, 6.74278622e-02,
                  6.46594071e-02, 6.45767604e-02, 9.00874293e-02, 9.62337427e-02, 8.32904786e-02,
                  6.84144936e-02, 5.32389796e-02, 1.26868287e+00, 1.05912144e-01, 7.33868757e-02,
                  5.53046196e-02, 3.10422206e-02, 5.51964353e-02, 8.38495979e-02, 1.47115289e-02
              ],
              [
                  1.49364663e-02, 1.47142949e-02, 2.22109221e-02, 2.29043484e-02, 2.40890473e-02,
                  2.33820564e-02, 2.85152940e-02, 1.56460854e-02, 2.15279533e-02, 2.38387329e-02,
                  2.03228735e-02, 2.23535592e-02, 2.38922681e-02, 2.11533720e-02, 2.35280873e-02,
                  2.13707335e-02, 1.60853024e-02, 2.65439630e-02, 3.64166006e-02, 3.29372716e-02,
                  5.10011697e-02, 4.39083663e-02, 2.26025721e-02, 3.70077580e-02, 2.84839446e-02,
                  3.85985797e-02, 2.95967080e-02, 3.78814246e-02, 1.04091696e+00, 3.79569161e-02,
                  2.62215191e-02, 2.71946316e-02, 4.63273219e-02, 4.09466270e-02, 1.86658932e-03
              ],
              [
                  5.08646954e-02, 6.81591405e-02, 1.07208279e-01, 1.03488018e-01, 1.00193057e-01,
                  9.41579396e-02, 1.47366419e-01, 7.28955233e-02, 1.51858077e-01, 1.25811565e-01,
                  1.01387062e-01, 1.04739420e-01, 1.27066336e-01, 1.34328794e-01, 1.32052401e-01,
                  9.27692358e-02, 8.66557670e-02, 1.22663147e-01, 1.06209865e-01, 9.58652470e-02,
                  9.97676823e-02, 9.74275131e-02, 9.84136102e-02, 1.03958021e-01, 1.56842334e-01,
                  1.30650148e-01, 1.25437985e-01, 1.58563286e-01, 6.47885127e-02, 1.20235023e+00,
                  1.27360311e-01, 6.06032435e-02, 1.07676166e-01, 1.35143491e-01, 1.03180195e-02
              ],
              [
                  3.26640182e-03, 5.05455133e-03, 5.03711470e-03, 4.33749758e-03, 4.09227595e-03,
                  6.83441761e-03, 6.83081323e-03, 4.53777067e-03, 6.28398636e-03, 5.73511749e-03,
                  5.35875532e-03, 6.22214022e-03, 4.51716494e-03, 4.12167458e-03, 4.75510822e-03,
                  4.76880867e-03, 7.21016070e-03, 4.55400231e-03, 4.55501398e-03, 3.04551716e-03,
                  4.20314798e-03, 6.07531631e-03, 5.31377154e-03, 9.50467728e-03, 1.24825400e-02,
                  6.17266160e-03, 5.08118015e-03, 3.34420911e-03, 4.18515954e-03, 4.80906878e-03,
                  1.00925970e+00, 5.74599189e-03, 6.50917043e-03, 1.08753396e-02, 4.72341683e-04
              ],
              [
                  1.21235466e-03, 1.12682853e-03, 1.68326374e-03, 1.72823683e-03, 1.81740277e-03,
                  1.57939523e-03, 1.98302361e-03, 1.37935165e-03, 2.38741376e-03, 2.10387717e-03,
                  1.83292443e-03, 1.93246532e-03, 2.31545154e-03, 2.23459960e-03, 2.30959762e-03,
                  1.49998241e-03, 1.64980316e-03, 1.66856463e-03, 1.75605906e-03, 1.43217965e-03,
                  1.69689468e-03, 1.51031204e-03, 2.09173851e-03, 1.58433951e-03, 3.15949024e-03,
                  2.31344319e-03, 2.50887858e-03, 2.21329378e-03, 7.95351055e-04, 3.34264227e-03,
                  5.02044860e-03, 1.01254990e+00, 1.93056846e-03, 2.62565014e-03, 1.39283202e-04
              ],
              [
                  2.15112604e-03, 7.68736326e-04, 1.68851702e-03, 1.29608863e-03, 2.25058920e-03,
                  1.36968403e-03, 1.18597950e-03, 8.09482752e-04, 1.29439833e-03, 1.23004051e-03,
                  1.08347349e-03, 1.12081899e-03, 1.32169644e-03, 1.10361107e-03, 1.19552419e-03,
                  1.16459302e-03, 8.20829828e-04, 1.12313769e-03, 1.07450072e-03, 9.85205295e-04,
                  8.10351000e-04, 1.78219890e-03, 1.18358134e-03, 1.01984739e-03, 1.12301004e-03,
                  1.23736733e-03, 1.18945042e-03, 1.01113007e-03, 3.53231220e-04, 1.22174819e-03,
                  5.32904076e-03, 1.83218628e-03, 1.02594835e+00, 1.75139355e-03, 1.06927287e-04
              ],
              [
                  9.57326921e-03, 1.39606686e-02, 1.83039931e-02, 1.91687742e-02, 2.14891937e-02,
                  1.81797514e-02, 3.01802071e-02, 1.41275699e-02, 2.27719736e-02, 2.06770704e-02,
                  1.83185576e-02, 2.03984549e-02, 2.02713470e-02, 1.80115777e-02, 1.95276133e-02,
                  1.68324441e-02, 1.51071418e-02, 1.88423004e-02, 1.83746955e-02, 1.63163627e-02,
                  1.65414592e-02, 2.40009002e-02, 1.95235051e-02, 1.78415633e-02, 2.12990123e-02,
                  2.26990942e-02, 3.32349927e-02, 2.15205963e-02, 1.30961893e-02, 3.92801408e-02,
                  2.62196246e-02, 1.66205461e-02, 2.36097590e-02, 1.09567758e+00, 3.49391590e-03
              ],
              [
                  4.58467061e-05, 4.75028257e-05, 7.53905398e-05, 1.27820513e-04, 8.32554601e-05,
                  8.33302557e-05, 9.33268660e-05, 5.33530714e-05, 8.34624202e-05, 9.56290362e-05,
                  6.65491873e-05, 6.95182511e-05, 7.84071469e-05, 6.23296142e-05, 1.08004044e-04,
                  5.83851201e-05, 4.21672796e-05, 1.14663652e-04, 9.66790345e-05, 4.44163857e-05,
                  7.25774561e-05, 9.53917837e-05, 1.11039068e-04, 5.93617191e-05, 6.97524535e-05,
                  6.54592746e-05, 7.79636427e-05, 9.29698689e-05, 2.71633778e-04, 1.03284840e-04,
                  1.06473216e-04, 6.29505123e-05, 1.05777359e-04, 1.58961571e-04, 1.00010105e+00
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def leontief_matrix_2003():
    """
    Real Name: b'leontief matrix 2003'
    Original Eqn: b'1.1738567935794306,0.004681249035188306,0.35983122428828207,0.08212911659929921,0.11486572874620454,0.1941147452965807,0.029692743162706713,0.007040043746901909,0.0189509653371729,0.02930292821667324,0.009070552287852815,0.0075384365940850346,0.008107455108627645,0.007221863823144859,0.009016300986060488,0.034533210363748554,0.004755136948736151,0.02260154989155126,0.005947224351010536,0.009115226007483948,0.00809402508819544,0.10397232171342946,0.007407256271953148,0.009495844391869075,0.008554672876354927,0.012377423714132444,0.00510992095140881,0.004212550927045797,0.003200702974296789,0.006414104767242629,0.010435008855357468,0.009049988112340547,0.01247717608115003,0.011602394004834905,0.022177989496472;0.023688140411225515,1.1092362807855425,0.025015608247117942,0.030948955330969544,0.025597131085188192,0.03160804775019604,0.028265314312448067,0.5458962155426499,0.08886048571097968,0.04430782418408191,0.11772677494988806,0.1037061922793021,0.03810326179479244,0.025931596046508937,0.0326021188991587,0.03113200778235396,0.15888889003149223,0.05681979067650941,0.016007024235842382,0.01072595774647989,0.010923446556481642,0.017743503686013865,0.043702898342242905,0.060197005303399734,0.04923522110723429,0.02510552072579434,0.010999483680379382,0.006556339265092584,0.008070250189088787,0.0110300161893822,0.018794380318695996,0.013085396735938719,0.015967484087065196,0.01705450521603021,0.06770924568080877;0.08126076787457326,0.004286643022798824,1.2063546032510903,0.01914779153128304,0.14494629284383787,0.020980381359298587,0.012561195362216228,0.005633206492837777,0.02185481889436769,0.015061078137750485,0.008782544461031725,0.007863283358226444,0.00838887399964582,0.007729964902100873,0.008461584733327964,0.011175972940546088,0.0048169686861151695,0.00833105142182618,0.006753814199713016,0.01005466763168221,0.009034959880486734,0.18915829321338604,0.006799966940163773,0.013639860215352993,0.012773677874124678,0.009766730686619495,0.006731267657522925,0.005574764371581447,0.0024195341652054315,0.00798415285094571,0.014337712970089726,0.013155058004405949,0.021989946137753315,0.014589443417631617,0.005443733773273664;0.005478639432632719,0.003500940461259363,0.00707728953962472,1.4526245269826854,0.10099770313500167,0.010466259855869405,0.013193877905320762,0.003680351649396328,0.009648224617717586,0.024497746091635353,0.009778851169050255,0.007103991922616285,0.008919990320783703,0.007767672649090103,0.01663017396622975,0.03638594935068851,0.003045555868326024,0.007890724925836635,0.005784789399147604,0.005295194047685414,0.005895385743617074,0.006903039540260078,0.005314379228796311,0.006831474995346338,0.00523451559912452,0.005107377401115833,0.0032966878684593933,0.002310819654904624,0.0014672892822780602,0.003934733856760164,0.006903809024117427,0.002857794221493953,0.006703101152833732,0.011014910349079927,0.0006288673055688136;0.0004637672982461121,0.0003410577047221742,0.0006575512382766853,0.014683739531450019,1.271294116734083,0.0012407192682998035,0.0013210094883191012,0.000369594418512498,0.0007937232538130562,0.0023764631960673955,0.0009098863824131318,0.0008027735177582678,0.0009243114668553914,0.0009207044488906363,0.003333862341227653,0.006406750197818377,0.00039640169149458203,0.0006924628313905779,0.0010711632666318284,0.0007492398881952803,0.0006066741783527937,0.0005097407797430475,0.0006414705209810607,0.0006435003322844745,0.000614230192443063,0.0005520527416264265,0.0005855613262610781,0.00022073415759513832,0.00013030960069386217,0.00039616078877286164,0.0008719972631323739,0.0003069046705294243,0.00042988159991181956,0.0008946014018422226,5.522018869709454e-05;0.004867355285219316,0.004264221729208863,0.006539020393261053,0.006132556760284136,0.007092280962232675,1.2895282188638861,0.02062473600360007,0.003551731429954361,0.00583545115132916,0.009061388813286119,0.013342221040921223,0.010196695984160509,0.009305758150466156,0.006669499516293243,0.010246254440010281,0.09882647763505434,0.004245346053161991,0.04852808485022926,0.004265371094771557,0.0038158501268672736,0.003546462026864613,0.006195176407601788,0.004502927061376241,0.004035227939002711,0.0037675408370700628,0.007215304962186844,0.003479319082983411,0.002457595542244013,0.005262496021049311,0.0036749015159482203,0.005391484362355323,0.005158198834047561,0.003980165992603089,0.007012586310347031,0.0007745781259300522;0.01432779085575366,0.012012662538839744,0.051610412340769324,0.036983122581964976,0.04445579937011216,0.03632671401446322,1.3184706651355529,0.012811444120153668,0.0417275639145066,0.0449113299068423,0.04263995017936123,0.023853350380787265,0.029916718473456876,0.03408650290959888,0.027576565785130656,0.0431962156678476,0.013643598743863278,0.023753471393935948,0.022236502768716665,0.02554413058970385,0.02389683039967266,0.027616775780297885,0.019652592670211147,0.01839412012376773,0.021918951952226245,0.03106515971240725,0.02640209949794015,0.0299503051634549,0.009182916128967994,0.039419590604337126,0.03539824911514011,0.029873356589809216,0.023320450171163406,0.04599147393190045,0.0018911595953024045;0.022243880848196472,0.017361118081471186,0.018350552318545384,0.022445448700236566,0.020021112825403163,0.020850813876864552,0.017189222482550014,1.0538874064043284,0.056188510616966315,0.03048067396763981,0.033744919554246626,0.026819648311462583,0.01732564431696795,0.013463802106406034,0.01570480127754186,0.015808262299083164,0.02911025811521822,0.026052231915293884,0.01153724144461492,0.010764186401952478,0.008599319308477127,0.012004959199683736,0.060501945161048044,0.09702811230171529,0.07773095681917847,0.02899870639933019,0.008829792726837643,0.00533225710020193,0.0040586404556941505,0.00993229928945141,0.015204586234631215,0.007362052051407545,0.010950986163345455,0.012152930616124966,0.001719562831303521;0.06930170379081671,0.025442765058661075,0.05273676286921677,0.15468745411826795,0.10661733568354564,0.08331902637490511,0.08055951017925722,0.03589764798475413,1.3340158645644948,0.3294016058324581,0.07208956846705017,0.0488432335683968,0.05044336552887452,0.05895802077575969,0.06142723553398648,0.06982714008476128,0.021195672635886446,0.044580898595353954,0.028244807584688756,0.013256650623482417,0.011718806517502718,0.024779212553780128,0.019554226490573465,0.022122028007550244,0.019428613419639484,0.019358482518486167,0.012730552260220317,0.008048554985683676,0.007012555729539743,0.016656863717878414,0.025710146068314312,0.012468094976131154,0.09641365087630807,0.026785691921996268,0.003545436075746958;0.014059369117984192,0.013734329879138973,0.03456120289751954,0.029172722619502045,0.06720619803614583,0.024370304989981825,0.03280585577276879,0.013345916112861808,0.036169645477755016,1.1691905928375157,0.024578611288315864,0.022587587593052943,0.05124404644191111,0.05058396723101633,0.0753603406547712,0.05135231391663102,0.010424215698887743,0.034804377761080134,0.032537556676763515,0.010220786387024443,0.010345200550287372,0.014667985257965496,0.021010982836366522,0.014938129004109728,0.014267686894773262,0.015795433732442087,0.010876778253026602,0.004738704600740021,0.0044258629960828065,0.009089913625552707,0.011400339126998454,0.005465973536782122,0.013454362655004486,0.011657128787985152,0.0014983586431228041;0.0058226350278136885,0.009056841658458561,0.012619057165691418,0.00861514089335315,0.008294889480847641,0.016162126878927673,0.006201609283119195,0.008162331565688196,0.013040570492679173,0.014563802955566238,1.1461575543372857,0.022425187495432538,0.0161683659809771,0.022914634162210658,0.019836529018078954,0.01431260258429908,0.007726565356411992,0.10234024686643757,0.008729995669985943,0.0038101094973032705,0.0036304725086761655,0.008413329855767098,0.005884113792528246,0.00530145178950697,0.00505027502148647,0.006203512708866304,0.005455746400678113,0.0024894221391525413,0.0068362717031941874,0.0040811962014833105,0.006197828162429855,0.004951034080797447,0.006026734214724476,0.006097802728917084,0.0008628350105675617;0.022622303523607806,0.05098434311867816,0.04303282488619243,0.036383971437686485,0.04548321302655159,0.06963512083928858,0.03795494187144255,0.04183372474203466,0.04897446259165899,0.07127325202127553,0.08204157339548954,1.4959803125443354,0.31018204067546956,0.15831641959280018,0.2412242417865779,0.14407477104673558,0.03476980207434255,0.17095233526033,0.06741122877779002,0.017738581691237845,0.016080006061974385,0.023924464942480652,0.035019097884341176,0.04060000307454487,0.035677707134546925,0.0319174616753894,0.024221359042158806,0.010132953719560512,0.014483611529842549,0.019283242691112437,0.02723405667655616,0.013370401258348527,0.019431260743944634,0.023474832084706722,0.00465573841432362;0.014166791038681464,0.025029846360574474,0.015212210870353472,0.02263437247113687,0.019259866248323595,0.022293210815742044,0.017413598095831373,0.021880104335994643,0.01938152072750603,0.02644989615996033,0.03320236606968267,0.040229551100583856,1.1675880155425276,0.03457292726458523,0.06853391401395123,0.022729112725426142,0.019125127404306008,0.03447137321781136,0.03719363721698406,0.008430084285931942,0.006793099226311977,0.009135778681663508,0.015175194532158915,0.02257794209209241,0.0161584773078507,0.014000069457592435,0.009017429323555516,0.00456648677424733,0.004740286154829792,0.008223807663986388,0.013183965347060523,0.005950624609555681,0.008469697252732555,0.01003245816741684,0.002120169468964891;0.014721481714981522,0.02422443696558427,0.023963191651576708,0.03332092050535174,0.030639217093543784,0.0327033556482106,0.038091085223855695,0.025107244618677974,0.03773298280855061,0.047299279014828104,0.04007979225300488,0.05782663660224636,0.18168845194003114,1.482988403092804,0.15227977739027723,0.05703107693620232,0.04380305728366854,0.07455641607639193,0.07195372231176697,0.024392126542148864,0.02215959100965016,0.021106304543950717,0.030339851772398216,0.030911588203932312,0.031603781229310256,0.03234784454281964,0.07674160062308846,0.01817407529676204,0.011355024820872266,0.03732906483179877,0.0385911988308759,0.019783749852834234,0.04662211300388698,0.03224650938938577,0.003315100945696038;0.013861662580375382,0.01592770588870293,0.01603602314511822,0.01706246627204021,0.017683200396643676,0.018774823633648456,0.0150283679972928,0.015035737226777604,0.015001327501055916,0.01948556282577118,0.019600879981832946,0.023591228907031504,0.03764563138740345,0.020027323785047093,1.4527105883765392,0.018991290228571406,0.012519030074377699,0.019689991696725244,0.13495769335333765,0.014307709350639271,0.010988155145854297,0.010462838887910534,0.06385457573984395,0.07914804150666013,0.08527184739711964,0.031257018215226424,0.01271647807076643,0.006710539425978436,0.004466646735591375,0.012682706345843214,0.03162191391781866,0.007019859017136066,0.008005835431886672,0.017153093234040163,0.001749600135587156;0.0023368788121753198,0.002581383372982699,0.003627896894034825,0.008919601706485003,0.006642541286960786,0.008604875923178238,0.007232504206932712,0.0026572741658109325,0.004581663494621018,0.006196108247876339,0.00619326210634276,0.016273343996261812,0.009714301453555096,0.0071549524484986575,0.012089617827342613,1.0501704426892176,0.0030414598039301853,0.009439310564960498,0.0048486123575040615,0.00255784930788307,0.002719262436556615,0.004301019826009629,0.004127196696281312,0.003252646769235205,0.004072643946114495,0.0037642876962955566,0.002754108759377157,0.0022888829771345797,0.002281196635544397,0.003561504839420148,0.005798511668808073,0.004158319401177249,0.004678399820015858,0.00738529051834062,0.002484511531825504;0.023802087286978753,0.044810479977211166,0.03482898270396029,0.04597756061561304,0.03281689429609084,0.04166973086093016,0.047387891696785645,0.04292073450636465,0.05312417437812328,0.05006602772460259,0.06741760911153585,0.06117035098022849,0.0378211528901584,0.02968986711658117,0.03636246469054363,0.030061436505050488,1.1285096972533297,0.03004217076491913,0.023773743901881216,0.014533054699102264,0.022042769612877915,0.03900601942933679,0.02898382789257987,0.02010205252874492,0.02052295697532727,0.029257788980138144,0.019725711930500513,0.01209781439958479,0.014205945616714864,0.015310714387617155,0.026898606937032637,0.028890091114414606,0.024452408070715397,0.028645882117013643,0.003787843758496578;0.00844025875815129,0.01331348857251812,0.010406898449803827,0.01127049631253595,0.009896449756454383,0.011647797837537825,0.011832897169225568,0.011696973062342983,0.011725393453588692,0.011407413436569617,0.01609344822243065,0.013621915492257752,0.011530258996992398,0.009527753470429574,0.010753901834280535,0.009505727643645974,0.028272250604326508,1.0590651873919745,0.010699694088141478,0.008895328773211114,0.010524891500584862,0.013196909388753349,0.016441937540252534,0.01158873460011621,0.011446496954639895,0.021510218656572884,0.017618350805379723,0.0112197941011837,0.045504760251417475,0.010850202709874756,0.02480798698727405,0.01869328699273737,0.012561401862217395,0.017199008085258902,0.0016497523242714448;0.00930403991271479,0.007329906525424316,0.014461801704819699,0.014026331979586436,0.01624935146568971,0.014163712852722282,0.011860290091686676,0.008363827279284615,0.013161244222987157,0.014303876202837984,0.014220174022197425,0.013885372848388639,0.012823533622057844,0.010776837870208668,0.01408802511107471,0.012730138371864494,0.012896424122225017,0.014160340187596957,1.0154303041433606,0.007134503778678,0.006908424236060006,0.010288299375889706,0.021229423135337436,0.008361025383037842,0.009690531812771084,0.013118247389357471,0.007431866249316963,0.005836475809182525,0.003881869838574916,0.009347630100782295,0.008344665994502341,0.005293594182794747,0.007409720717487907,0.010432397368948122,0.000815481779726506;0.05977195159782733,0.04085625509283552,0.11366444608791004,0.10890025415553692,0.12702025830066213,0.10511592480637544,0.09250999136330658,0.07299519246441524,0.09015295493136809,0.09860918218646737,0.07859419719740178,0.09399880016627182,0.09688252723293041,0.08642010192019013,0.10679009784342615,0.08469709122238936,0.045701832995345984,0.08164938345064117,0.061922000356907675,1.0385823927225697,0.02550568421862021,0.07904927127018672,0.045022171176596675,0.051381449035766476,0.048409881230379766,0.04373980950664626,0.02810783021508662,0.016175311862891235,0.01239060560348116,0.029418428053327686,0.03875228116429351,0.02289638427809057,0.046831518863382694,0.036978783038190716,0.00467299302349348;0.029431736099555544,0.017034241271340518,0.053625300494168505,0.054210081420151726,0.06890529214171665,0.04258349777442468,0.036870334272527956,0.024079348684132525,0.040792008372184614,0.04225598065299421,0.03547516967831032,0.03626075346809264,0.03703375755263051,0.031515404713462536,0.04467177769934138,0.04247119939906885,0.018501961716280144,0.04931944177780068,0.027645522456780043,0.013197927305077316,1.013628155597019,0.040678853050424665,0.024729273998108342,0.02150344179921021,0.022111494418809125,0.020314224297440855,0.016801448968741008,0.011326652599165174,0.007968648198142149,0.01724508140897673,0.01810811966213642,0.011722531728359924,0.021407290427051272,0.020823833624397645,0.002304306258160836;0.005760985063047074,0.00782221424927597,0.011622044054784699,0.01348163634017855,0.013896212077982376,0.013214923462666135,0.015362859461163485,0.007708735981530062,0.01286184062855226,0.014697985250486812,0.01325212410433334,0.01346822674975704,0.015255281737204925,0.013716906732176855,0.01285914661310822,0.01136286254652804,0.009451363717775968,0.013004738496857815,0.01196474325547001,0.013125862305674462,0.01025276992826876,1.0168831077512845,0.014659714251825788,0.013787852220823377,0.031987218264815834,0.02640851158947156,0.01616448869984016,0.01708073272758332,0.005952788406533902,0.020818195855426287,0.017183847442187105,0.010214713926492935,0.014218945458405758,0.018682875199637617,0.0009270131623515024;0.027494210141755546,0.03249791016418029,0.04800992243920594,0.04624812835024164,0.049648904622879304,0.050101268580858185,0.04123923810100767,0.06008292849455366,0.04106611025153252,0.041967999929790556,0.057673615164166955,0.04298753626007907,0.03507465285240819,0.02775689405895317,0.03714012279314199,0.03819917283243972,0.03475851148371746,0.03911994548516948,0.027225574367272944,0.028553844289584254,0.019769975699731893,0.02580221255909229,1.0620597358101327,0.06289645616179534,0.03342261395489033,0.07579864211156619,0.018282273168931332,0.012693282482439141,0.0066752472144238125,0.01451661527851427,0.02166164412653284,0.01717205343163579,0.017445742758768337,0.02028364276144631,0.0031537722797523684;0.0070431902533540465,0.009459409606132337,0.011090244253898391,0.011812222160129502,0.013626544042024508,0.01565248828274218,0.0090487882461975,0.012396601970513439,0.009021295400616091,0.009887584391578302,0.016520100880041456,0.014250222856928263,0.010101970873910432,0.007795316974074844,0.00900089862806978,0.008758905672409957,0.007082977273631909,0.010861442505053465,0.004344003737345794,0.006181050812562164,0.0037791767018658965,0.005551275815813104,0.006791068212928872,1.1394709073896643,0.006968942015768871,0.009361492033367669,0.0028651764795054164,0.0019460701385262639,0.002173652611088597,0.0030600257763117376,0.0037772781821384807,0.0026410376042365824,0.0028373710310735105,0.0038315224869496776,0.0008216700449757949;0.0024502847357556787,0.0037534862790694823,0.00451106858941716,0.005424256551932075,0.00671311180490223,0.00529342075621863,0.006176631087455466,0.0035991914577572837,0.005024790653799982,0.005464262183534959,0.004799375257413344,0.0047529812324626,0.005648704111022643,0.005240522067429499,0.005356136172900328,0.004250825841734707,0.002886856979724035,0.004234252862408405,0.004179150947891545,0.005043766292553402,0.003235263582593085,0.003686987313660804,0.005834829128199887,0.013528815505974843,1.0367715401811777,0.022062348957044276,0.006102161014178482,0.005475454975646962,0.0016306495693820789,0.006619449895863636,0.006809725060377367,0.0034462869792808632,0.0032328896176105795,0.006627497399867685,0.00038441731002938906;0.011340746057884718,0.013296422932195644,0.02114366729069813,0.018339249193021337,0.02101942761794937,0.022386998184153597,0.02407319909074015,0.01981586773687011,0.018034997812605005,0.01930448470197608,0.02287136711644654,0.01965124905858536,0.017984064194405746,0.014889614272614657,0.018979453437431165,0.01627680422336822,0.012558387011876771,0.01850818633403407,0.019898837805407674,0.02853156756971497,0.017428736422322972,0.017682053891191866,0.05439844731107008,0.15439815634136192,0.11821088000231432,1.126881954185359,0.011201711592561675,0.00907355201464098,0.0041196160430342936,0.011798811947189526,0.012332025100824326,0.007013038723898619,0.00970684304166337,0.01377311990482408,0.0012963788816020337;0.013493369779230093,0.016692719702340514,0.023207195693976595,0.02732002927743515,0.029209997289579903,0.025306365125395656,0.03619632783721124,0.017862159932489113,0.028733682502196718,0.02732881328911543,0.025476808103564383,0.0264998989393575,0.028617187341851227,0.027724311186322587,0.026558283744152315,0.026057358280056134,0.019100759106955054,0.03248068988309588,0.03144391947662068,0.03427418120145731,0.0348527561292146,0.030642237862494336,0.03392251440999266,0.04067446208991411,0.04832634188127479,0.04689566895314647,1.1575008055606533,0.05020516285241923,0.014370251864527043,0.04408807951547688,0.03869844973963181,0.019330580945567,0.02690648748113771,0.040945213310924745,0.0025109180101415387;0.04802202169499222,0.055825559838524726,0.06170851765068579,0.07336581541703455,0.06619722417742074,0.06375436668965384,0.07088392826072883,0.05493538050283321,0.06286949024200471,0.06395623434038135,0.0678309751831665,0.0659255095547627,0.06459332505472802,0.05609734236443621,0.06374259136861317,0.06707771562842278,0.05535253963535365,0.0666633472030404,0.05549211430055202,0.06434057278933367,0.0656404124891926,0.06399173007776937,0.08825809823718907,0.08767198346876352,0.08221865502090309,0.07121187678249587,0.05337049352823043,1.2742654950861658,0.10987756259212156,0.07432637856448289,0.0520091147827475,0.03329292363058045,0.056069119616173974,0.08356316711677365,0.011118231707537458;0.01409918154577884,0.015455167135182189,0.021553136315572985,0.02312060242661106,0.024382063145121348,0.022900061465335846,0.028004359798513866,0.015333985189085209,0.021156615555549863,0.023285397653028693,0.020221223965421795,0.021980250305677924,0.023006285531491706,0.020190525286545018,0.02358768320053381,0.02153636333104701,0.015308815586696464,0.026850264333176756,0.03614952490071792,0.032132303917386196,0.05111628889823399,0.04308201593507224,0.022647532150904322,0.03600420300529117,0.030376939137364736,0.03912256829097256,0.029011025989170137,0.038820413002132785,1.037432457616166,0.038436768792191246,0.02648991809131777,0.027128203084685363,0.04647233570965232,0.04125214334973278,0.0017604953236293561;0.05041547399589642,0.0682102266048193,0.10525714246771385,0.10422196306422901,0.10025384174540163,0.09414805886417422,0.14580179900556567,0.0683300755006476,0.14940920179796083,0.12369469746311033,0.1006681696468952,0.10301809886417172,0.12400315445487844,0.12969447754586313,0.13128687009559228,0.09277361113061242,0.07967381932557455,0.12351766887843267,0.10627434997675567,0.09502365672293087,0.09943690404098283,0.09749009670864407,0.09875756497358479,0.10062352564282223,0.15612293770190538,0.13089243497470957,0.12314801190566985,0.1644135171700613,0.06540589772780646,1.2003956030886684,0.13106426375891625,0.06197656153266877,0.10849232781465126,0.13516687802116434,0.01014794327319551;0.0033482612161501142,0.005258620455270558,0.005029292998547119,0.004467485984226214,0.004211581275560843,0.0068591779301024084,0.006886928576468439,0.004314029950098356,0.006304411548435177,0.005718503707195404,0.005684711380007116,0.006347805367498617,0.004546016148024202,0.004069408214927739,0.004891376092014156,0.004842493089805811,0.007530994555912282,0.004742286096277715,0.004561002782297214,0.0030582921231309726,0.00422023212517884,0.006144235612006181,0.00538866114766687,0.009584168885439453,0.012682629091693307,0.006363277464833938,0.0051327101869615135,0.0034661898060925405,0.004108114208010637,0.004891915391119427,1.0095211277506262,0.005779224387079575,0.006633956813928168,0.011136910274942945,0.00047800744294252307;0.0012064273429398418,0.0010940938636179237,0.00167928131089931,0.0017159063631202582,0.0018334919241118875,0.0015800072251510844,0.001986878207115546,0.001310578919920408,0.00235069025457525,0.002100423066773632,0.0018454530547788392,0.0019270886040582858,0.002222405976780997,0.0021275098179108064,0.002251814193435281,0.0015192556520063469,0.0015850706542631346,0.0017007838330792232,0.001750270238706082,0.0014281286738561099,0.0016195941095510464,0.0015244176878811391,0.0020595516556091618,0.001576613580356577,0.0032705603664749225,0.002362397762408941,0.002622214494443076,0.002253015440332836,0.0008057504481363004,0.0032880201337892627,0.005192465234908698,1.0122313728684675,0.0019900409353021823,0.0026104663959940514,0.00013095781828056582;0.00196402945890534,0.0007601352504045245,0.0015804152311893653,0.001292070117539641,0.0021283030552166466,0.0013769273672508116,0.0011803729481547796,0.0007676572070333565,0.0012881413156939552,0.0012168229664740126,0.0011537897511297516,0.0011433154578985086,0.0013771625852491915,0.0010964620091627525,0.0012422168692189598,0.00118284903720804,0.000812230610753421,0.0011211071470974738,0.0010713886141185598,0.0009860334331791855,0.0007938412585982832,0.001734683927083238,0.0011723308293690447,0.0010074113162526182,0.0010679483896002763,0.0012093346870405328,0.0012076785106552208,0.0009622535037093614,0.0003474364552912612,0.0011989568210020406,0.005394832304653602,0.0017997282251981301,1.0267199739461264,0.0017350687302137716,0.00010330004421049113;0.00941069122795616,0.013392991222231152,0.0175924935012524,0.018638704381024343,0.020995206902742734,0.017952512690273877,0.029153666653510126,0.012955221727021425,0.02185198774703175,0.019812008236773235,0.0178606308630257,0.019354295083552814,0.01899469907434902,0.016858755324813277,0.01924621839775025,0.016411105959813634,0.014102781065497444,0.018713421495163734,0.017525529417566705,0.01571226676008903,0.01626649318128697,0.024095555285720292,0.02056799926027597,0.017629926028810264,0.021159827988283142,0.023703215192652137,0.03236975184177232,0.021572096261295557,0.013113181340178711,0.03847633380702352,0.02714252229880297,0.017023928730360106,0.023454193081582787,1.0945932576223696,0.0037255171589039363;4.1483682538061926e-05,5.044027731643984e-05,7.247325220307443e-05,0.0001255558583395471,7.405138736774462e-05,8.103437748786105e-05,9.270682655708619e-05,4.895272990733664e-05,6.756507426683995e-05,7.564037071727543e-05,6.520456236133538e-05,6.665008439881294e-05,7.874622937496239e-05,6.121630493478725e-05,0.00015043965773467628,5.611951679966308e-05,3.776316136182489e-05,0.0001205179175510351,0.00010493317030107262,4.3165069830698804e-05,7.400603774835999e-05,9.659138637770722e-05,0.00011862598060097075,7.856973394696263e-05,7.610952095491764e-05,6.813172564304031e-05,8.036610938224296e-05,0.00010259533964090502,0.00026094831049927386,0.0001118136363885448,0.00011041529941053813,6.279982950499547e-05,9.334068251583115e-05,0.0001685340113386786,1.0001190811699938;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            1.17385679e+00, 4.68124904e-03, 3.59831224e-01, 8.21291166e-02, 1.14865729e-01,
            1.94114745e-01, 2.96927432e-02, 7.04004375e-03, 1.89509653e-02, 2.93029282e-02,
            9.07055229e-03, 7.53843659e-03, 8.10745511e-03, 7.22186382e-03, 9.01630099e-03,
            3.45332104e-02, 4.75513695e-03, 2.26015499e-02, 5.94722435e-03, 9.11522601e-03,
            8.09402509e-03, 1.03972322e-01, 7.40725627e-03, 9.49584439e-03, 8.55467288e-03,
            1.23774237e-02, 5.10992095e-03, 4.21255093e-03, 3.20070297e-03, 6.41410477e-03,
            1.04350089e-02, 9.04998811e-03, 1.24771761e-02, 1.16023940e-02, 2.21779895e-02
        ],
              [
                  2.36881404e-02, 1.10923628e+00, 2.50156082e-02, 3.09489553e-02, 2.55971311e-02,
                  3.16080478e-02, 2.82653143e-02, 5.45896216e-01, 8.88604857e-02, 4.43078242e-02,
                  1.17726775e-01, 1.03706192e-01, 3.81032618e-02, 2.59315960e-02, 3.26021189e-02,
                  3.11320078e-02, 1.58888890e-01, 5.68197907e-02, 1.60070242e-02, 1.07259577e-02,
                  1.09234466e-02, 1.77435037e-02, 4.37028983e-02, 6.01970053e-02, 4.92352211e-02,
                  2.51055207e-02, 1.09994837e-02, 6.55633927e-03, 8.07025019e-03, 1.10300162e-02,
                  1.87943803e-02, 1.30853967e-02, 1.59674841e-02, 1.70545052e-02, 6.77092457e-02
              ],
              [
                  8.12607679e-02, 4.28664302e-03, 1.20635460e+00, 1.91477915e-02, 1.44946293e-01,
                  2.09803814e-02, 1.25611954e-02, 5.63320649e-03, 2.18548189e-02, 1.50610781e-02,
                  8.78254446e-03, 7.86328336e-03, 8.38887400e-03, 7.72996490e-03, 8.46158473e-03,
                  1.11759729e-02, 4.81696869e-03, 8.33105142e-03, 6.75381420e-03, 1.00546676e-02,
                  9.03495988e-03, 1.89158293e-01, 6.79996694e-03, 1.36398602e-02, 1.27736779e-02,
                  9.76673069e-03, 6.73126766e-03, 5.57476437e-03, 2.41953417e-03, 7.98415285e-03,
                  1.43377130e-02, 1.31550580e-02, 2.19899461e-02, 1.45894434e-02, 5.44373377e-03
              ],
              [
                  5.47863943e-03, 3.50094046e-03, 7.07728954e-03, 1.45262453e+00, 1.00997703e-01,
                  1.04662599e-02, 1.31938779e-02, 3.68035165e-03, 9.64822462e-03, 2.44977461e-02,
                  9.77885117e-03, 7.10399192e-03, 8.91999032e-03, 7.76767265e-03, 1.66301740e-02,
                  3.63859494e-02, 3.04555587e-03, 7.89072493e-03, 5.78478940e-03, 5.29519405e-03,
                  5.89538574e-03, 6.90303954e-03, 5.31437923e-03, 6.83147500e-03, 5.23451560e-03,
                  5.10737740e-03, 3.29668787e-03, 2.31081965e-03, 1.46728928e-03, 3.93473386e-03,
                  6.90380902e-03, 2.85779422e-03, 6.70310115e-03, 1.10149103e-02, 6.28867306e-04
              ],
              [
                  4.63767298e-04, 3.41057705e-04, 6.57551238e-04, 1.46837395e-02, 1.27129412e+00,
                  1.24071927e-03, 1.32100949e-03, 3.69594419e-04, 7.93723254e-04, 2.37646320e-03,
                  9.09886382e-04, 8.02773518e-04, 9.24311467e-04, 9.20704449e-04, 3.33386234e-03,
                  6.40675020e-03, 3.96401691e-04, 6.92462831e-04, 1.07116327e-03, 7.49239888e-04,
                  6.06674178e-04, 5.09740780e-04, 6.41470521e-04, 6.43500332e-04, 6.14230192e-04,
                  5.52052742e-04, 5.85561326e-04, 2.20734158e-04, 1.30309601e-04, 3.96160789e-04,
                  8.71997263e-04, 3.06904671e-04, 4.29881600e-04, 8.94601402e-04, 5.52201887e-05
              ],
              [
                  4.86735529e-03, 4.26422173e-03, 6.53902039e-03, 6.13255676e-03, 7.09228096e-03,
                  1.28952822e+00, 2.06247360e-02, 3.55173143e-03, 5.83545115e-03, 9.06138881e-03,
                  1.33422210e-02, 1.01966960e-02, 9.30575815e-03, 6.66949952e-03, 1.02462544e-02,
                  9.88264776e-02, 4.24534605e-03, 4.85280849e-02, 4.26537109e-03, 3.81585013e-03,
                  3.54646203e-03, 6.19517641e-03, 4.50292706e-03, 4.03522794e-03, 3.76754084e-03,
                  7.21530496e-03, 3.47931908e-03, 2.45759554e-03, 5.26249602e-03, 3.67490152e-03,
                  5.39148436e-03, 5.15819883e-03, 3.98016599e-03, 7.01258631e-03, 7.74578126e-04
              ],
              [
                  1.43277909e-02, 1.20126625e-02, 5.16104123e-02, 3.69831226e-02, 4.44557994e-02,
                  3.63267140e-02, 1.31847067e+00, 1.28114441e-02, 4.17275639e-02, 4.49113299e-02,
                  4.26399502e-02, 2.38533504e-02, 2.99167185e-02, 3.40865029e-02, 2.75765658e-02,
                  4.31962157e-02, 1.36435987e-02, 2.37534714e-02, 2.22365028e-02, 2.55441306e-02,
                  2.38968304e-02, 2.76167758e-02, 1.96525927e-02, 1.83941201e-02, 2.19189520e-02,
                  3.10651597e-02, 2.64020995e-02, 2.99503052e-02, 9.18291613e-03, 3.94195906e-02,
                  3.53982491e-02, 2.98733566e-02, 2.33204502e-02, 4.59914739e-02, 1.89115960e-03
              ],
              [
                  2.22438808e-02, 1.73611181e-02, 1.83505523e-02, 2.24454487e-02, 2.00211128e-02,
                  2.08508139e-02, 1.71892225e-02, 1.05388741e+00, 5.61885106e-02, 3.04806740e-02,
                  3.37449196e-02, 2.68196483e-02, 1.73256443e-02, 1.34638021e-02, 1.57048013e-02,
                  1.58082623e-02, 2.91102581e-02, 2.60522319e-02, 1.15372414e-02, 1.07641864e-02,
                  8.59931931e-03, 1.20049592e-02, 6.05019452e-02, 9.70281123e-02, 7.77309568e-02,
                  2.89987064e-02, 8.82979273e-03, 5.33225710e-03, 4.05864046e-03, 9.93229929e-03,
                  1.52045862e-02, 7.36205205e-03, 1.09509862e-02, 1.21529306e-02, 1.71956283e-03
              ],
              [
                  6.93017038e-02, 2.54427651e-02, 5.27367629e-02, 1.54687454e-01, 1.06617336e-01,
                  8.33190264e-02, 8.05595102e-02, 3.58976480e-02, 1.33401586e+00, 3.29401606e-01,
                  7.20895685e-02, 4.88432336e-02, 5.04433655e-02, 5.89580208e-02, 6.14272355e-02,
                  6.98271401e-02, 2.11956726e-02, 4.45808986e-02, 2.82448076e-02, 1.32566506e-02,
                  1.17188065e-02, 2.47792126e-02, 1.95542265e-02, 2.21220280e-02, 1.94286134e-02,
                  1.93584825e-02, 1.27305523e-02, 8.04855499e-03, 7.01255573e-03, 1.66568637e-02,
                  2.57101461e-02, 1.24680950e-02, 9.64136509e-02, 2.67856919e-02, 3.54543608e-03
              ],
              [
                  1.40593691e-02, 1.37343299e-02, 3.45612029e-02, 2.91727226e-02, 6.72061980e-02,
                  2.43703050e-02, 3.28058558e-02, 1.33459161e-02, 3.61696455e-02, 1.16919059e+00,
                  2.45786113e-02, 2.25875876e-02, 5.12440464e-02, 5.05839672e-02, 7.53603407e-02,
                  5.13523139e-02, 1.04242157e-02, 3.48043778e-02, 3.25375567e-02, 1.02207864e-02,
                  1.03452006e-02, 1.46679853e-02, 2.10109828e-02, 1.49381290e-02, 1.42676869e-02,
                  1.57954337e-02, 1.08767783e-02, 4.73870460e-03, 4.42586300e-03, 9.08991363e-03,
                  1.14003391e-02, 5.46597354e-03, 1.34543627e-02, 1.16571288e-02, 1.49835864e-03
              ],
              [
                  5.82263503e-03, 9.05684166e-03, 1.26190572e-02, 8.61514089e-03, 8.29488948e-03,
                  1.61621269e-02, 6.20160928e-03, 8.16233157e-03, 1.30405705e-02, 1.45638030e-02,
                  1.14615755e+00, 2.24251875e-02, 1.61683660e-02, 2.29146342e-02, 1.98365290e-02,
                  1.43126026e-02, 7.72656536e-03, 1.02340247e-01, 8.72999567e-03, 3.81010950e-03,
                  3.63047251e-03, 8.41332986e-03, 5.88411379e-03, 5.30145179e-03, 5.05027502e-03,
                  6.20351271e-03, 5.45574640e-03, 2.48942214e-03, 6.83627170e-03, 4.08119620e-03,
                  6.19782816e-03, 4.95103408e-03, 6.02673421e-03, 6.09780273e-03, 8.62835011e-04
              ],
              [
                  2.26223035e-02, 5.09843431e-02, 4.30328249e-02, 3.63839714e-02, 4.54832130e-02,
                  6.96351208e-02, 3.79549419e-02, 4.18337247e-02, 4.89744626e-02, 7.12732520e-02,
                  8.20415734e-02, 1.49598031e+00, 3.10182041e-01, 1.58316420e-01, 2.41224242e-01,
                  1.44074771e-01, 3.47698021e-02, 1.70952335e-01, 6.74112288e-02, 1.77385817e-02,
                  1.60800061e-02, 2.39244649e-02, 3.50190979e-02, 4.06000031e-02, 3.56777071e-02,
                  3.19174617e-02, 2.42213590e-02, 1.01329537e-02, 1.44836115e-02, 1.92832427e-02,
                  2.72340567e-02, 1.33704013e-02, 1.94312607e-02, 2.34748321e-02, 4.65573841e-03
              ],
              [
                  1.41667910e-02, 2.50298464e-02, 1.52122109e-02, 2.26343725e-02, 1.92598662e-02,
                  2.22932108e-02, 1.74135981e-02, 2.18801043e-02, 1.93815207e-02, 2.64498962e-02,
                  3.32023661e-02, 4.02295511e-02, 1.16758802e+00, 3.45729273e-02, 6.85339140e-02,
                  2.27291127e-02, 1.91251274e-02, 3.44713732e-02, 3.71936372e-02, 8.43008429e-03,
                  6.79309923e-03, 9.13577868e-03, 1.51751945e-02, 2.25779421e-02, 1.61584773e-02,
                  1.40000695e-02, 9.01742932e-03, 4.56648677e-03, 4.74028615e-03, 8.22380766e-03,
                  1.31839653e-02, 5.95062461e-03, 8.46969725e-03, 1.00324582e-02, 2.12016947e-03
              ],
              [
                  1.47214817e-02, 2.42244370e-02, 2.39631917e-02, 3.33209205e-02, 3.06392171e-02,
                  3.27033556e-02, 3.80910852e-02, 2.51072446e-02, 3.77329828e-02, 4.72992790e-02,
                  4.00797923e-02, 5.78266366e-02, 1.81688452e-01, 1.48298840e+00, 1.52279777e-01,
                  5.70310769e-02, 4.38030573e-02, 7.45564161e-02, 7.19537223e-02, 2.43921265e-02,
                  2.21595910e-02, 2.11063045e-02, 3.03398518e-02, 3.09115882e-02, 3.16037812e-02,
                  3.23478445e-02, 7.67416006e-02, 1.81740753e-02, 1.13550248e-02, 3.73290648e-02,
                  3.85911988e-02, 1.97837499e-02, 4.66221130e-02, 3.22465094e-02, 3.31510095e-03
              ],
              [
                  1.38616626e-02, 1.59277059e-02, 1.60360231e-02, 1.70624663e-02, 1.76832004e-02,
                  1.87748236e-02, 1.50283680e-02, 1.50357372e-02, 1.50013275e-02, 1.94855628e-02,
                  1.96008800e-02, 2.35912289e-02, 3.76456314e-02, 2.00273238e-02, 1.45271059e+00,
                  1.89912902e-02, 1.25190301e-02, 1.96899917e-02, 1.34957693e-01, 1.43077094e-02,
                  1.09881551e-02, 1.04628389e-02, 6.38545757e-02, 7.91480415e-02, 8.52718474e-02,
                  3.12570182e-02, 1.27164781e-02, 6.71053943e-03, 4.46664674e-03, 1.26827063e-02,
                  3.16219139e-02, 7.01985902e-03, 8.00583543e-03, 1.71530932e-02, 1.74960014e-03
              ],
              [
                  2.33687881e-03, 2.58138337e-03, 3.62789689e-03, 8.91960171e-03, 6.64254129e-03,
                  8.60487592e-03, 7.23250421e-03, 2.65727417e-03, 4.58166349e-03, 6.19610825e-03,
                  6.19326211e-03, 1.62733440e-02, 9.71430145e-03, 7.15495245e-03, 1.20896178e-02,
                  1.05017044e+00, 3.04145980e-03, 9.43931056e-03, 4.84861236e-03, 2.55784931e-03,
                  2.71926244e-03, 4.30101983e-03, 4.12719670e-03, 3.25264677e-03, 4.07264395e-03,
                  3.76428770e-03, 2.75410876e-03, 2.28888298e-03, 2.28119664e-03, 3.56150484e-03,
                  5.79851167e-03, 4.15831940e-03, 4.67839982e-03, 7.38529052e-03, 2.48451153e-03
              ],
              [
                  2.38020873e-02, 4.48104800e-02, 3.48289827e-02, 4.59775606e-02, 3.28168943e-02,
                  4.16697309e-02, 4.73878917e-02, 4.29207345e-02, 5.31241744e-02, 5.00660277e-02,
                  6.74176091e-02, 6.11703510e-02, 3.78211529e-02, 2.96898671e-02, 3.63624647e-02,
                  3.00614365e-02, 1.12850970e+00, 3.00421708e-02, 2.37737439e-02, 1.45330547e-02,
                  2.20427696e-02, 3.90060194e-02, 2.89838279e-02, 2.01020525e-02, 2.05229570e-02,
                  2.92577890e-02, 1.97257119e-02, 1.20978144e-02, 1.42059456e-02, 1.53107144e-02,
                  2.68986069e-02, 2.88900911e-02, 2.44524081e-02, 2.86458821e-02, 3.78784376e-03
              ],
              [
                  8.44025876e-03, 1.33134886e-02, 1.04068984e-02, 1.12704963e-02, 9.89644976e-03,
                  1.16477978e-02, 1.18328972e-02, 1.16969731e-02, 1.17253935e-02, 1.14074134e-02,
                  1.60934482e-02, 1.36219155e-02, 1.15302590e-02, 9.52775347e-03, 1.07539018e-02,
                  9.50572764e-03, 2.82722506e-02, 1.05906519e+00, 1.06996941e-02, 8.89532877e-03,
                  1.05248915e-02, 1.31969094e-02, 1.64419375e-02, 1.15887346e-02, 1.14464970e-02,
                  2.15102187e-02, 1.76183508e-02, 1.12197941e-02, 4.55047603e-02, 1.08502027e-02,
                  2.48079870e-02, 1.86932870e-02, 1.25614019e-02, 1.71990081e-02, 1.64975232e-03
              ],
              [
                  9.30403991e-03, 7.32990653e-03, 1.44618017e-02, 1.40263320e-02, 1.62493515e-02,
                  1.41637129e-02, 1.18602901e-02, 8.36382728e-03, 1.31612442e-02, 1.43038762e-02,
                  1.42201740e-02, 1.38853728e-02, 1.28235336e-02, 1.07768379e-02, 1.40880251e-02,
                  1.27301384e-02, 1.28964241e-02, 1.41603402e-02, 1.01543030e+00, 7.13450378e-03,
                  6.90842424e-03, 1.02882994e-02, 2.12294231e-02, 8.36102538e-03, 9.69053181e-03,
                  1.31182474e-02, 7.43186625e-03, 5.83647581e-03, 3.88186984e-03, 9.34763010e-03,
                  8.34466599e-03, 5.29359418e-03, 7.40972072e-03, 1.04323974e-02, 8.15481780e-04
              ],
              [
                  5.97719516e-02, 4.08562551e-02, 1.13664446e-01, 1.08900254e-01, 1.27020258e-01,
                  1.05115925e-01, 9.25099914e-02, 7.29951925e-02, 9.01529549e-02, 9.86091822e-02,
                  7.85941972e-02, 9.39988002e-02, 9.68825272e-02, 8.64201019e-02, 1.06790098e-01,
                  8.46970912e-02, 4.57018330e-02, 8.16493835e-02, 6.19220004e-02, 1.03858239e+00,
                  2.55056842e-02, 7.90492713e-02, 4.50221712e-02, 5.13814490e-02, 4.84098812e-02,
                  4.37398095e-02, 2.81078302e-02, 1.61753119e-02, 1.23906056e-02, 2.94184281e-02,
                  3.87522812e-02, 2.28963843e-02, 4.68315189e-02, 3.69787830e-02, 4.67299302e-03
              ],
              [
                  2.94317361e-02, 1.70342413e-02, 5.36253005e-02, 5.42100814e-02, 6.89052921e-02,
                  4.25834978e-02, 3.68703343e-02, 2.40793487e-02, 4.07920084e-02, 4.22559807e-02,
                  3.54751697e-02, 3.62607535e-02, 3.70337576e-02, 3.15154047e-02, 4.46717777e-02,
                  4.24711994e-02, 1.85019617e-02, 4.93194418e-02, 2.76455225e-02, 1.31979273e-02,
                  1.01362816e+00, 4.06788531e-02, 2.47292740e-02, 2.15034418e-02, 2.21114944e-02,
                  2.03142243e-02, 1.68014490e-02, 1.13266526e-02, 7.96864820e-03, 1.72450814e-02,
                  1.81081197e-02, 1.17225317e-02, 2.14072904e-02, 2.08238336e-02, 2.30430626e-03
              ],
              [
                  5.76098506e-03, 7.82221425e-03, 1.16220441e-02, 1.34816363e-02, 1.38962121e-02,
                  1.32149235e-02, 1.53628595e-02, 7.70873598e-03, 1.28618406e-02, 1.46979853e-02,
                  1.32521241e-02, 1.34682267e-02, 1.52552817e-02, 1.37169067e-02, 1.28591466e-02,
                  1.13628625e-02, 9.45136372e-03, 1.30047385e-02, 1.19647433e-02, 1.31258623e-02,
                  1.02527699e-02, 1.01688311e+00, 1.46597143e-02, 1.37878522e-02, 3.19872183e-02,
                  2.64085116e-02, 1.61644887e-02, 1.70807327e-02, 5.95278841e-03, 2.08181959e-02,
                  1.71838474e-02, 1.02147139e-02, 1.42189455e-02, 1.86828752e-02, 9.27013162e-04
              ],
              [
                  2.74942101e-02, 3.24979102e-02, 4.80099224e-02, 4.62481284e-02, 4.96489046e-02,
                  5.01012686e-02, 4.12392381e-02, 6.00829285e-02, 4.10661103e-02, 4.19679999e-02,
                  5.76736152e-02, 4.29875363e-02, 3.50746529e-02, 2.77568941e-02, 3.71401228e-02,
                  3.81991728e-02, 3.47585115e-02, 3.91199455e-02, 2.72255744e-02, 2.85538443e-02,
                  1.97699757e-02, 2.58022126e-02, 1.06205974e+00, 6.28964562e-02, 3.34226140e-02,
                  7.57986421e-02, 1.82822732e-02, 1.26932825e-02, 6.67524721e-03, 1.45166153e-02,
                  2.16616441e-02, 1.71720534e-02, 1.74457428e-02, 2.02836428e-02, 3.15377228e-03
              ],
              [
                  7.04319025e-03, 9.45940961e-03, 1.10902443e-02, 1.18122222e-02, 1.36265440e-02,
                  1.56524883e-02, 9.04878825e-03, 1.23966020e-02, 9.02129540e-03, 9.88758439e-03,
                  1.65201009e-02, 1.42502229e-02, 1.01019709e-02, 7.79531697e-03, 9.00089863e-03,
                  8.75890567e-03, 7.08297727e-03, 1.08614425e-02, 4.34400374e-03, 6.18105081e-03,
                  3.77917670e-03, 5.55127582e-03, 6.79106821e-03, 1.13947091e+00, 6.96894202e-03,
                  9.36149203e-03, 2.86517648e-03, 1.94607014e-03, 2.17365261e-03, 3.06002578e-03,
                  3.77727818e-03, 2.64103760e-03, 2.83737103e-03, 3.83152249e-03, 8.21670045e-04
              ],
              [
                  2.45028474e-03, 3.75348628e-03, 4.51106859e-03, 5.42425655e-03, 6.71311180e-03,
                  5.29342076e-03, 6.17663109e-03, 3.59919146e-03, 5.02479065e-03, 5.46426218e-03,
                  4.79937526e-03, 4.75298123e-03, 5.64870411e-03, 5.24052207e-03, 5.35613617e-03,
                  4.25082584e-03, 2.88685698e-03, 4.23425286e-03, 4.17915095e-03, 5.04376629e-03,
                  3.23526358e-03, 3.68698731e-03, 5.83482913e-03, 1.35288155e-02, 1.03677154e+00,
                  2.20623490e-02, 6.10216101e-03, 5.47545498e-03, 1.63064957e-03, 6.61944990e-03,
                  6.80972506e-03, 3.44628698e-03, 3.23288962e-03, 6.62749740e-03, 3.84417310e-04
              ],
              [
                  1.13407461e-02, 1.32964229e-02, 2.11436673e-02, 1.83392492e-02, 2.10194276e-02,
                  2.23869982e-02, 2.40731991e-02, 1.98158677e-02, 1.80349978e-02, 1.93044847e-02,
                  2.28713671e-02, 1.96512491e-02, 1.79840642e-02, 1.48896143e-02, 1.89794534e-02,
                  1.62768042e-02, 1.25583870e-02, 1.85081863e-02, 1.98988378e-02, 2.85315676e-02,
                  1.74287364e-02, 1.76820539e-02, 5.43984473e-02, 1.54398156e-01, 1.18210880e-01,
                  1.12688195e+00, 1.12017116e-02, 9.07355201e-03, 4.11961604e-03, 1.17988119e-02,
                  1.23320251e-02, 7.01303872e-03, 9.70684304e-03, 1.37731199e-02, 1.29637888e-03
              ],
              [
                  1.34933698e-02, 1.66927197e-02, 2.32071957e-02, 2.73200293e-02, 2.92099973e-02,
                  2.53063651e-02, 3.61963278e-02, 1.78621599e-02, 2.87336825e-02, 2.73288133e-02,
                  2.54768081e-02, 2.64998989e-02, 2.86171873e-02, 2.77243112e-02, 2.65582837e-02,
                  2.60573583e-02, 1.91007591e-02, 3.24806899e-02, 3.14439195e-02, 3.42741812e-02,
                  3.48527561e-02, 3.06422379e-02, 3.39225144e-02, 4.06744621e-02, 4.83263419e-02,
                  4.68956690e-02, 1.15750081e+00, 5.02051629e-02, 1.43702519e-02, 4.40880795e-02,
                  3.86984497e-02, 1.93305809e-02, 2.69064875e-02, 4.09452133e-02, 2.51091801e-03
              ],
              [
                  4.80220217e-02, 5.58255598e-02, 6.17085177e-02, 7.33658154e-02, 6.61972242e-02,
                  6.37543667e-02, 7.08839283e-02, 5.49353805e-02, 6.28694902e-02, 6.39562343e-02,
                  6.78309752e-02, 6.59255096e-02, 6.45933251e-02, 5.60973424e-02, 6.37425914e-02,
                  6.70777156e-02, 5.53525396e-02, 6.66633472e-02, 5.54921143e-02, 6.43405728e-02,
                  6.56404125e-02, 6.39917301e-02, 8.82580982e-02, 8.76719835e-02, 8.22186550e-02,
                  7.12118768e-02, 5.33704935e-02, 1.27426550e+00, 1.09877563e-01, 7.43263786e-02,
                  5.20091148e-02, 3.32929236e-02, 5.60691196e-02, 8.35631671e-02, 1.11182317e-02
              ],
              [
                  1.40991815e-02, 1.54551671e-02, 2.15531363e-02, 2.31206024e-02, 2.43820631e-02,
                  2.29000615e-02, 2.80043598e-02, 1.53339852e-02, 2.11566156e-02, 2.32853977e-02,
                  2.02212240e-02, 2.19802503e-02, 2.30062855e-02, 2.01905253e-02, 2.35876832e-02,
                  2.15363633e-02, 1.53088156e-02, 2.68502643e-02, 3.61495249e-02, 3.21323039e-02,
                  5.11162889e-02, 4.30820159e-02, 2.26475322e-02, 3.60042030e-02, 3.03769391e-02,
                  3.91225683e-02, 2.90110260e-02, 3.88204130e-02, 1.03743246e+00, 3.84367688e-02,
                  2.64899181e-02, 2.71282031e-02, 4.64723357e-02, 4.12521433e-02, 1.76049532e-03
              ],
              [
                  5.04154740e-02, 6.82102266e-02, 1.05257142e-01, 1.04221963e-01, 1.00253842e-01,
                  9.41480589e-02, 1.45801799e-01, 6.83300755e-02, 1.49409202e-01, 1.23694697e-01,
                  1.00668170e-01, 1.03018099e-01, 1.24003154e-01, 1.29694478e-01, 1.31286870e-01,
                  9.27736111e-02, 7.96738193e-02, 1.23517669e-01, 1.06274350e-01, 9.50236567e-02,
                  9.94369040e-02, 9.74900967e-02, 9.87575650e-02, 1.00623526e-01, 1.56122938e-01,
                  1.30892435e-01, 1.23148012e-01, 1.64413517e-01, 6.54058977e-02, 1.20039560e+00,
                  1.31064264e-01, 6.19765615e-02, 1.08492328e-01, 1.35166878e-01, 1.01479433e-02
              ],
              [
                  3.34826122e-03, 5.25862046e-03, 5.02929300e-03, 4.46748598e-03, 4.21158128e-03,
                  6.85917793e-03, 6.88692858e-03, 4.31402995e-03, 6.30441155e-03, 5.71850371e-03,
                  5.68471138e-03, 6.34780537e-03, 4.54601615e-03, 4.06940821e-03, 4.89137609e-03,
                  4.84249309e-03, 7.53099456e-03, 4.74228610e-03, 4.56100278e-03, 3.05829212e-03,
                  4.22023213e-03, 6.14423561e-03, 5.38866115e-03, 9.58416889e-03, 1.26826291e-02,
                  6.36327746e-03, 5.13271019e-03, 3.46618981e-03, 4.10811421e-03, 4.89191539e-03,
                  1.00952113e+00, 5.77922439e-03, 6.63395681e-03, 1.11369103e-02, 4.78007443e-04
              ],
              [
                  1.20642734e-03, 1.09409386e-03, 1.67928131e-03, 1.71590636e-03, 1.83349192e-03,
                  1.58000723e-03, 1.98687821e-03, 1.31057892e-03, 2.35069025e-03, 2.10042307e-03,
                  1.84545305e-03, 1.92708860e-03, 2.22240598e-03, 2.12750982e-03, 2.25181419e-03,
                  1.51925565e-03, 1.58507065e-03, 1.70078383e-03, 1.75027024e-03, 1.42812867e-03,
                  1.61959411e-03, 1.52441769e-03, 2.05955166e-03, 1.57661358e-03, 3.27056037e-03,
                  2.36239776e-03, 2.62221449e-03, 2.25301544e-03, 8.05750448e-04, 3.28802013e-03,
                  5.19246523e-03, 1.01223137e+00, 1.99004094e-03, 2.61046640e-03, 1.30957818e-04
              ],
              [
                  1.96402946e-03, 7.60135250e-04, 1.58041523e-03, 1.29207012e-03, 2.12830306e-03,
                  1.37692737e-03, 1.18037295e-03, 7.67657207e-04, 1.28814132e-03, 1.21682297e-03,
                  1.15378975e-03, 1.14331546e-03, 1.37716259e-03, 1.09646201e-03, 1.24221687e-03,
                  1.18284904e-03, 8.12230611e-04, 1.12110715e-03, 1.07138861e-03, 9.86033433e-04,
                  7.93841259e-04, 1.73468393e-03, 1.17233083e-03, 1.00741132e-03, 1.06794839e-03,
                  1.20933469e-03, 1.20767851e-03, 9.62253504e-04, 3.47436455e-04, 1.19895682e-03,
                  5.39483230e-03, 1.79972823e-03, 1.02671997e+00, 1.73506873e-03, 1.03300044e-04
              ],
              [
                  9.41069123e-03, 1.33929912e-02, 1.75924935e-02, 1.86387044e-02, 2.09952069e-02,
                  1.79525127e-02, 2.91536667e-02, 1.29552217e-02, 2.18519877e-02, 1.98120082e-02,
                  1.78606309e-02, 1.93542951e-02, 1.89946991e-02, 1.68587553e-02, 1.92462184e-02,
                  1.64111060e-02, 1.41027811e-02, 1.87134215e-02, 1.75255294e-02, 1.57122668e-02,
                  1.62664932e-02, 2.40955553e-02, 2.05679993e-02, 1.76299260e-02, 2.11598280e-02,
                  2.37032152e-02, 3.23697518e-02, 2.15720963e-02, 1.31131813e-02, 3.84763338e-02,
                  2.71425223e-02, 1.70239287e-02, 2.34541931e-02, 1.09459326e+00, 3.72551716e-03
              ],
              [
                  4.14836825e-05, 5.04402773e-05, 7.24732522e-05, 1.25555858e-04, 7.40513874e-05,
                  8.10343775e-05, 9.27068266e-05, 4.89527299e-05, 6.75650743e-05, 7.56403707e-05,
                  6.52045624e-05, 6.66500844e-05, 7.87462294e-05, 6.12163049e-05, 1.50439658e-04,
                  5.61195168e-05, 3.77631614e-05, 1.20517918e-04, 1.04933170e-04, 4.31650698e-05,
                  7.40060377e-05, 9.65913864e-05, 1.18625981e-04, 7.85697339e-05, 7.61095210e-05,
                  6.81317256e-05, 8.03661094e-05, 1.02595340e-04, 2.60948310e-04, 1.11813636e-04,
                  1.10415299e-04, 6.27998295e-05, 9.33406825e-05, 1.68534011e-04, 1.00011908e+00
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def leontief_matrix_2004():
    """
    Real Name: b'leontief matrix 2004'
    Original Eqn: b'1.1772594568987351,0.00470979270188138,0.3681092219083745,0.08601684241078772,0.12447051284768258,0.19515606017719314,0.031357646230063804,0.006690160592894245,0.019327854884536404,0.02939767638848987,0.009208349790784644,0.007553121446852047,0.008156240366741847,0.0072393216137449125,0.009184029186060073,0.03352426869794776,0.0046902930022093585,0.021156858700579723,0.006622825830005201,0.008960287191650939,0.008450228539263496,0.10635627596996845,0.00771100607062606,0.009254563796879547,0.00844727149347355,0.014426380294407471,0.005250371315245999,0.004467828757140535,0.0034023768421619785,0.006779133024389826,0.010493068002240443,0.009827531485622059,0.012861790388217971,0.012130604233524469,0.02474517928506135;0.023746073846560255,1.1124389297544857,0.025705543273458968,0.03231437751048025,0.027794377255232133,0.03278207663386676,0.028845223860223625,0.5410878026080924,0.09195623675828121,0.0463584812647977,0.124481620050478,0.11171715241901022,0.04070626240266948,0.027740170731765452,0.03515584401693951,0.03247709136647695,0.15829621376543512,0.05833111334922632,0.01752186334560858,0.010910974266717279,0.011301480680327988,0.01840417456970514,0.045532338091874874,0.06085953686686285,0.054501796593524596,0.027894052272963803,0.011176606434831177,0.006874913239750027,0.008970521733994648,0.011609833579329707,0.019548784944238097,0.013103206868541911,0.016749509291575197,0.017935271972428203,0.06914985766691112;0.08287483401925248,0.004357279063458051,1.2103325931246913,0.020229258717520033,0.14528288665903405,0.021680167667854237,0.012537075882466853,0.005987510730467405,0.021848698998997274,0.015137225223813233,0.008738347743539961,0.007989496875738581,0.00858456424142724,0.00783346987266459,0.00866645168775874,0.011175032972692909,0.004737169910572984,0.008469641009570253,0.007124539867448674,0.009833902093401516,0.009376443653903698,0.19012324458403052,0.007127701276936084,0.012572597560345558,0.012162125895501712,0.010620584972770285,0.006951937522578828,0.005830844304003266,0.0026913465050295913,0.008201267634531235,0.014329514318036411,0.014037677078797967,0.022167126800270307,0.015005920643695077,0.00540807513652694;0.0053262584771275896,0.00352287627491371,0.006792834505680048,1.4575215815995048,0.10260858049006578,0.010148168958872923,0.013621798653182459,0.0036080658565177896,0.009471216819472227,0.025004629594336573,0.009355642404379064,0.006948945773393555,0.008711924847682429,0.007792906108321312,0.016426781233911003,0.036056208160558684,0.00310748004982084,0.008079367021891102,0.006067031864254165,0.005188627316936146,0.006145298527493413,0.007043485024576902,0.005502983163798326,0.007003232281913356,0.005433416710121271,0.0053221818414177025,0.0031959065016276492,0.0022946201284901476,0.0016564976890066617,0.0041441502461779765,0.006487816265579443,0.002822760779688581,0.007067651836911801,0.010638257961485176,0.0006378067324916112;0.00044252867042934336,0.00030471456007181676,0.0006241633224247251,0.015043674974805112,1.2502160425194337,0.001104772107650696,0.0013088907106960483,0.00034371699103039256,0.0007331798943528172,0.0019249014943097662,0.0007589715749700478,0.0007387697952223551,0.0008628979697566992,0.0008816500414556965,0.003356436462971532,0.005990765836772441,0.00035601498245840926,0.0006385527790087927,0.001040294594167174,0.0006668009300572732,0.0005773604843083552,0.0004878495356391453,0.0006454130928525569,0.0005800124386114862,0.0005846914089539271,0.0005300942725625671,0.0005630954267248388,0.00021037516308266709,0.00012921934265417798,0.0003708829243281617,0.0007410233190235577,0.00028614675267617777,0.0004194120562871692,0.0008654658854315914,5.4466342645945095e-05;0.0048165049246962355,0.004456586781327774,0.006598954409149031,0.006364475912643567,0.007436235687887716,1.3086785502680585,0.021388582373090603,0.003721456382717939,0.005853253843116236,0.008755138635551324,0.01384162973729323,0.010230140571855674,0.009357895915360093,0.0068443773121609035,0.01046711775846959,0.09934964858940802,0.004194405226708581,0.04873145345021723,0.0048663177376334025,0.0038583965243998743,0.0037208322691149173,0.0063505931962128314,0.004618254725792868,0.003974207824397712,0.003735589525475759,0.007257553974791335,0.0034401994137924475,0.0025268164550569694,0.0059070762602303345,0.00379850544863546,0.005661453107638999,0.005558673965479689,0.004310663761834508,0.00715397928465755,0.0007593333848097351;0.01446868828761912,0.011821868365987975,0.05274599902641208,0.03777288123880994,0.04646180719249375,0.03747653183176699,1.3304521838434482,0.012926158848304517,0.04070644230421954,0.044132678758092896,0.04349757694265832,0.023174845077157055,0.029391523715141886,0.03297066810283228,0.02728382035164351,0.0425378300511739,0.013344073809212641,0.023883819676048437,0.02349178800448567,0.025171936339628345,0.024255657122731516,0.027991673999191797,0.019991620398475095,0.018226576753421295,0.02122619481578303,0.03214429108878635,0.02571585982033879,0.030485248443005167,0.009862285793070373,0.040177532927317246,0.03582228621387018,0.030736706525949654,0.023493112439955322,0.04682091527797741,0.001965769922348088;0.023243223501881193,0.017065654634294266,0.019401794525173353,0.02447646433205423,0.02210153465018109,0.02213635226777841,0.017971197580563966,1.0585947678853718,0.06156731176134772,0.033142036576369605,0.03555100771044227,0.029684303241288144,0.018989702443362302,0.014580504919696452,0.017088654565661464,0.016637593040512245,0.03084299527640986,0.026805922809440802,0.013060503550482836,0.011133206633476483,0.009083202469265896,0.012710616857987552,0.06310310126905704,0.09868055811457409,0.08788541815175484,0.03290698770417288,0.009046010514639097,0.005713990794996157,0.004573558136660394,0.010582540340220716,0.015824252261286788,0.00793012888574665,0.011710031876416414,0.012830043891188053,0.0018152671484493582;0.070055923936501,0.024985868502306836,0.05296664242727152,0.1558312848423564,0.11050615235924273,0.08365461957501062,0.08071045249339047,0.03593083143057949,1.3357241328006693,0.3315469247383635,0.07226197519876966,0.04820726038178064,0.05022688323003246,0.06022438329191494,0.06129973889927489,0.06831134538622935,0.02132656658358045,0.04465903363898426,0.029020284688208574,0.013201205279453572,0.012198752703166747,0.024962087577730385,0.020024372352778277,0.021664850213557112,0.02003775549541119,0.02052625802936542,0.012710209896748245,0.008187683507605452,0.007637772753695712,0.01709436672168724,0.025401866900050654,0.012787927734658209,0.09519953981807674,0.027279556106513822,0.003751908699848204;0.01388110145069202,0.01364607461544842,0.03468332119654721,0.029219821591518768,0.06939633901518151,0.024584965487329018,0.03300397532097089,0.013104282070078814,0.034634455625754325,1.170157304044494,0.02412265765794821,0.022010640326880868,0.049753563919480506,0.049971238900319084,0.07466021241875156,0.05011075052822896,0.010280263240047358,0.03481953785354545,0.03301381845368609,0.010128507175442652,0.010755176660916363,0.014819505739779516,0.021156135671814697,0.013936690376770323,0.014290822153698307,0.01653748816573478,0.010755050009145445,0.004884953305857407,0.004734017947036517,0.009365337503916611,0.01157183746686047,0.005669939287833124,0.01391831416379161,0.01248654668829602,0.0015659582487110623;0.0056314297992677,0.009237487365049516,0.012154421158655525,0.008439757670865924,0.008243166150582609,0.016521636712222988,0.006168047751118352,0.008124173919598849,0.012628786421537896,0.01401037943398246,1.1491759425561905,0.021836836225846402,0.01614696842888899,0.02279211998100507,0.01997466414486781,0.014081039094704494,0.007550165116235598,0.10636884630941908,0.009330860974052274,0.0037934224930108074,0.0037538017270372023,0.008329417991170904,0.006065193689736392,0.004970158004883543,0.005049663862162209,0.006459967901613647,0.00538417191840177,0.002528960798395851,0.006638748671483334,0.004170840731697722,0.006315650634675258,0.004901582110068796,0.006173564660346933,0.0062075413377935505,0.0009264725820213765;0.02236273733634091,0.050297702599063965,0.0425370906191396,0.03564052051003456,0.04591705014110362,0.06877832032037796,0.03808654792108132,0.04174652586551528,0.0467313728028248,0.06987415472005588,0.08191015004112086,1.5072545839951546,0.3139438671066317,0.16459300930626586,0.24725336826238767,0.1442091403319113,0.0343298539607815,0.16944744858188435,0.06759358743119334,0.017158369324028595,0.016382240202274596,0.02377140008100384,0.035238958023303985,0.037380888144708586,0.035453293254739296,0.03361088883523453,0.02404471989580917,0.010279077201981825,0.014647991186765321,0.019764196894670755,0.027364277950312193,0.01361885005977197,0.01990641605221431,0.02423861683092438,0.004762874491787865;0.01509205731348627,0.026556582295062414,0.015933347975560903,0.023915178944307863,0.0213245541107966,0.024022043701199897,0.01846067519805653,0.023566143848987624,0.020249828695467906,0.027866763641800945,0.035448614047781296,0.044034442939437035,1.183559367060559,0.03808970654800741,0.07534982823203344,0.025725282199499468,0.019576951159971056,0.03664250034544647,0.041129926831467975,0.008412036856625662,0.007308786783208618,0.009759400456670049,0.016290017487410317,0.02291119516581762,0.0182677077869507,0.016122079234981906,0.009561524581486998,0.004832334382387577,0.005299154206675718,0.008755206951056535,0.014146934247240193,0.006436018778482382,0.009539555277281448,0.011166768062228858,0.0024195273009828314;0.016008220796807398,0.026664303885607147,0.02598165517216904,0.03483110520088619,0.03310638261996184,0.0354377708386741,0.04063373983848722,0.02684371499035828,0.03991665129156858,0.04951073608882079,0.04284052082659751,0.06121653348987404,0.1981808695615461,1.5158711039389883,0.163335464921415,0.06095826174993842,0.04993717440512715,0.08039130900882055,0.07928220350820495,0.025247579604157317,0.02447039105400313,0.023216502204436468,0.03276283478720638,0.03138926902885354,0.03361974225366523,0.03645364158904564,0.08092735466738395,0.01992476949098,0.012883020591582986,0.04042247931291861,0.04266427156612441,0.022575004289897282,0.050655485575069464,0.03583809516696133,0.0038017864086663873;0.013713790876322593,0.01598277673155666,0.01605140847754086,0.016939352758434834,0.01773538351715041,0.01883459242603438,0.015296907981029713,0.015012736310288112,0.014807757298362425,0.019252828721668343,0.02001164547016576,0.024064711210252374,0.03867554433679754,0.019664401847066113,1.4545515138364489,0.020091518060470253,0.012864801113369101,0.020150864659561948,0.13627274676644124,0.013452733627459362,0.011248255512883961,0.010799938113685832,0.06417522827331701,0.07031720037199829,0.08264683584076991,0.03311170142727961,0.012230347810884274,0.006804896527011838,0.004844989614795193,0.012752253534235095,0.03143231218866992,0.007292346951242191,0.008272740376318985,0.018497437124468694,0.001850699632173465;0.0020390182990055322,0.002468305259923107,0.003487154917402996,0.00916701750131141,0.006826744289735458,0.008311676437936781,0.007126349444506402,0.0026605300515123572,0.0045255106208843265,0.0061105753815198635,0.006060522362433677,0.01569185410431471,0.009659922852081953,0.006930063449355621,0.01227137724510852,1.0512640345516018,0.0031257188932206047,0.009504299838734721,0.004927005728553026,0.002555540222275752,0.0028350712323502404,0.0042914560915821055,0.004563480965090906,0.0031928612612698733,0.004353030007311575,0.003926333188629401,0.0027121664066069966,0.0021816183703132694,0.00249653892194477,0.0035259444244880337,0.00572908467174897,0.004146680534312793,0.004685974147225747,0.007368273422292911,0.0024703999817985134;0.02440096963591337,0.047673323673685715,0.0360904428402811,0.047358204633847836,0.03471212156325258,0.04298969121113404,0.04773980121841071,0.047665883604044425,0.053616992021457005,0.05032953240732608,0.07128086011804476,0.06377228051551728,0.039894833265549316,0.030589127970490914,0.037556508362785165,0.031232234124132535,1.1391381496394466,0.031404564838224826,0.025756714913474466,0.014777971912259262,0.02317950512391287,0.039646889981508074,0.030740015239575404,0.02043165381955006,0.02136259243997114,0.030765909518405538,0.01996593115008417,0.012276064333075926,0.01602250708783319,0.01567823592859903,0.027027701035001992,0.029803028425578974,0.024927468271010767,0.0296778246308288,0.004106589915992223;0.007997483396919657,0.01225196951099403,0.010020939178933392,0.010651738772458098,0.009549086514954409,0.011153644315021347,0.010973693293414844,0.011383503736326768,0.010930793263382975,0.010593244663455088,0.015186534131525547,0.012725891226649503,0.010877043027044729,0.008941170734003419,0.01017666958547909,0.00917442598135578,0.025862629840244497,1.0580627330391168,0.010855491831641185,0.008352290061051268,0.010161452981397773,0.012563436259426904,0.016218407694983797,0.01039028568237315,0.010562544649407922,0.021157421992661806,0.016396692034111798,0.010901100602537716,0.038531002992153195,0.010396830889239768,0.02432994229548573,0.017027534233283483,0.012355665862694225,0.016400161257516793,0.0018654761062227635;0.00984349283710393,0.007328441762759685,0.015209313380597592,0.014131237515278828,0.016600955097211677,0.014821577441530587,0.012026372250726803,0.008635919685289957,0.013268005796247331,0.014497687918893479,0.014373931927910382,0.014015402748371666,0.013105366864930218,0.010759348332720043,0.014478499299423202,0.013287118734460986,0.013065374753758987,0.014315518035537333,1.0160365589406093,0.007418755165755444,0.007182586301270329,0.010626822437058448,0.02154271255429098,0.008181887678928069,0.010545751799399414,0.013734682687801928,0.007468636697901883,0.0062443794721545294,0.004193698384169194,0.009489517247697674,0.008452676170331021,0.00543700230426453,0.007699089731545189,0.010803675648580287,0.0008752808585155974;0.0596261456308042,0.03955147777198608,0.11329765177746094,0.10525358855475588,0.1247529095760716,0.107189477873558,0.09382329498014737,0.0757757929104742,0.08939265868302568,0.09844679843334458,0.07800301036925175,0.09494212226805303,0.09874601855101202,0.08540478590870189,0.10922221850683066,0.08403549381503346,0.04450242599306763,0.08225794084412144,0.06406568663981704,1.039953419047446,0.026485740061580484,0.07992759342363817,0.04732128851723424,0.05134098579212248,0.05035518084421376,0.04496730915663816,0.028606623101057868,0.01682542094463728,0.013580975509127844,0.030364231131734525,0.03981142352925041,0.02378373677834822,0.04802657873596557,0.038397978166804944,0.004828110989975425;0.029106577119056207,0.0158198505086092,0.0535936971541201,0.053098419053805884,0.06685327328315392,0.042572436190092704,0.03636785109610652,0.02432079160950207,0.040684264665464716,0.042091705441662346,0.03442108892028858,0.036513265144411666,0.03735042073911146,0.031026420440193943,0.04534910246229031,0.04347466195053848,0.017326947273370603,0.04975068124114556,0.028434253654018853,0.012892013512700567,1.013854296186555,0.03956298562474454,0.024933128839680425,0.02040609092552805,0.021824710669245035,0.020589364833818492,0.01641671544456035,0.011491134770309627,0.008421176808119614,0.01694021940547885,0.017785918470183532,0.011761201577477289,0.021753067736781415,0.020974807525123033,0.0023537836656395694;0.005818701826845956,0.00792611433384259,0.011752973642815766,0.013258538173725134,0.014082333329980455,0.012966038284529547,0.01489459031819484,0.007794801760078853,0.012390945491318004,0.014035649441504336,0.012948067373111745,0.012860135114544839,0.014868521964067323,0.013116199570553131,0.012688827009253842,0.011111426360251267,0.008468273864378885,0.013094601109775795,0.012017271630856296,0.012948514321767962,0.011140301486590379,1.0170539098012874,0.014753616213905134,0.013578011069101378,0.028083231921361484,0.028761537391875047,0.016684472819695123,0.018196392642174465,0.006781201063162373,0.02096671494913548,0.01775098340640185,0.011548256979968695,0.014698940280560222,0.0189650890069056,0.0009792581879158623;0.02677853400919866,0.03280800320128787,0.0489235500216963,0.047554575794362335,0.05070602107016206,0.050867745067380364,0.04122486231536609,0.062138498419944045,0.04129797505963214,0.04186221147050987,0.057685773870317064,0.04300148779022575,0.035626432304673133,0.028000804908100068,0.03741957569442741,0.03884377659226129,0.0337749183708492,0.04087550997325694,0.029525011892749163,0.02934176458540192,0.020155451142206775,0.026230080538419267,1.0625145451223477,0.0526633565393626,0.03216371997162709,0.07578837613214987,0.01805574139922842,0.012495446664180404,0.007244317789814042,0.014645091210391956,0.021671825656399253,0.01711020788788398,0.018142708065184445,0.020782916051831583,0.0034033843087635175;0.006891151961376414,0.0105220858694451,0.011229364078753854,0.012087778928741754,0.013217326592853679,0.01522734628628448,0.009081153827343437,0.011841034336959731,0.008689207033148875,0.009744434142341165,0.016149325248791393,0.013757181712836105,0.010228520269506988,0.007833978554773602,0.009181413781954714,0.008476836852815143,0.007305711724137574,0.01034729038731763,0.005132323352551822,0.00723953144124056,0.0044474405274787495,0.005667159825657831,0.006962292843616215,1.1537555612518633,0.007226016761217765,0.009445709595321409,0.0030419500474110246,0.002191237115471605,0.0029030508927156873,0.003462579372835525,0.0038458660991487507,0.002737514972547393,0.0030161893658175024,0.003956321515884495,0.0009265336624202553;0.0024653995541281826,0.003513026707752264,0.004517571147076711,0.005269440433745205,0.006324652408095284,0.005193540544156894,0.005908294153105091,0.0034501755819871627,0.004861135051785247,0.005142397313040248,0.0046262587983985325,0.004439619401545779,0.005493229108577001,0.005079166322923074,0.005300722299020192,0.004144905031413324,0.0026888920916179966,0.004112555908912316,0.004495709413185747,0.004918995221386072,0.003282483925085192,0.003718950569483515,0.005596445752359225,0.01250214504718769,1.037438353817947,0.020389770316420367,0.006148224654039796,0.005598184365833655,0.00178939327673123,0.006466548686316885,0.006628717053781864,0.003818279297173445,0.0032759644786647226,0.006651028078608035,0.000385568630318664;0.011287516890689103,0.012162072434253081,0.021229139923669444,0.018462230920520264,0.02110465212071988,0.022609252877136395,0.023758431664885265,0.01963294755812418,0.017734770701858242,0.019137311291713446,0.022735319670756326,0.01920449590152334,0.01794640727403208,0.014777947169735912,0.019098116100761196,0.016380233184906265,0.012203233873860977,0.020001292049229163,0.020956979474179196,0.029189319276238256,0.018374410660762536,0.01774735991116073,0.05424018780633909,0.15685958054100663,0.11125557381862675,1.1268026859075913,0.01116946169272344,0.009369133188386093,0.0045352797703029964,0.011919279765700822,0.012250271511155139,0.007406102048727459,0.00996143829067032,0.0140862605048094,0.0012893766615818464;0.013740864423311617,0.01592816459974228,0.023492757076827523,0.02660256703693954,0.028681897711113482,0.025194944406975204,0.03495071910158624,0.01770588370168807,0.027416170055299414,0.026077368748671396,0.0246629045040619,0.025647855231529973,0.02765694306879268,0.027033307236891964,0.026142728522898194,0.026336733730255642,0.018487806522930743,0.03145765369795963,0.0326601876360236,0.03318513908546049,0.03501862641034628,0.030794349841759248,0.03374287120637722,0.04073147456237289,0.04428142726730453,0.046480193073207644,1.1482320545141442,0.05025931886393767,0.015446033043506025,0.044374604059067096,0.03829189135662177,0.019773069875440086,0.02762419172243887,0.040395139417795795,0.002633491647779486;0.0456855314677981,0.0499160558871892,0.059635353869377516,0.0711758053864094,0.06416937374016106,0.06064245201289217,0.06503322034089427,0.05094000585790097,0.05849820395499542,0.05819051333125318,0.06251403427672388,0.06080767826708652,0.06059449866586426,0.05241335316619173,0.06035924798691051,0.0676846157845757,0.0510299322881047,0.06329121254500435,0.05181894358500207,0.05961714275598514,0.06408248635291919,0.05994399297879933,0.08299846356379159,0.0758432131707935,0.07280831627774685,0.07182370233275222,0.048306930491272826,1.2810760476676906,0.11436679803475926,0.07095728981151676,0.05312818814722544,0.0314839540311923,0.0530354846965813,0.08073508802757601,0.010675526861120652;0.013471701992270952,0.013692839788904803,0.021744458346364622,0.02260961590577105,0.02482692486156719,0.02285044893269736,0.028119681812038545,0.014365848046145836,0.020442614857059505,0.022691215900443134,0.019668909673231004,0.02087637244387162,0.02238557571004121,0.019531585174184442,0.02329880773279491,0.021557220204643974,0.014911003067550681,0.026727502577654914,0.03587700748595463,0.03160044986743009,0.0544137190243568,0.04377533144964609,0.02254732782240132,0.03320757540305578,0.028488024215317126,0.039241555446205376,0.028581941117591207,0.04075647400287072,1.040167391097096,0.039349357408839505,0.026173947243703595,0.027004576841810464,0.048077079434930295,0.04247766847035533,0.0017215169919309475;0.05014972831218064,0.06548167329159664,0.10523796251013136,0.0990369818012413,0.09902726085445612,0.09302755094863098,0.1412151157096274,0.0659605002793123,0.14245289453287896,0.11863442849967828,0.09793251958739231,0.09771023753825372,0.11916600058327526,0.12262656707579885,0.12846926544270254,0.08956345959072619,0.07495847474202584,0.12137497485611744,0.10619874705898333,0.09541863887042472,0.1013636710791108,0.09807093796381774,0.09700883804133778,0.0947917390854207,0.14423159410182393,0.1304599274544339,0.11762233480321921,0.16843329866892667,0.07221295192798186,1.2021544647280709,0.13243433924189907,0.06318669086505828,0.11060304760891058,0.1363062740889218,0.010443322947235285;0.003344603902542366,0.004791846144747801,0.005156586899669642,0.004263346260132316,0.004242808324408745,0.007130058730937656,0.00674255433385728,0.004011731408010292,0.006006356884378097,0.005432574970507489,0.005643626388860872,0.006276652768247692,0.00449761111988746,0.0039740868700022395,0.004839300933580561,0.004979704749583777,0.006850792659295269,0.004732571191422705,0.0049393312131612915,0.0031600283275420955,0.004410054879984934,0.0062584623481554726,0.005831452432532716,0.009161960187680233,0.012000700755896822,0.006248223635177782,0.005107143283063398,0.0036668225552111545,0.005059192457035693,0.005253089139754603,1.0094821019868407,0.005858644683528561,0.006755369081459709,0.01150266928828109,0.00046837293068560773;0.00127175421718582,0.001117569658025684,0.0017313968710342686,0.0016957656405566183,0.001879196135564794,0.00160166262408093,0.0019570978595751013,0.0013067241480539072,0.0022912620281331938,0.002071493388777318,0.00175399869512288,0.0018941259687783672,0.0022318937230754025,0.002077963805593531,0.0023461533516465523,0.0015230434408265313,0.001599568066460699,0.0017296964734556507,0.0017883588846903157,0.0015494566643804058,0.001652710565380408,0.0015815264223218986,0.0021160902066739984,0.0015166402843759638,0.003205244876352853,0.0024526973336135042,0.00268047507099213,0.002310606216404776,0.0008666451676610858,0.003487461556175355,0.005484859262171458,1.0141893070360035,0.0021007754676172965,0.0027424373671191163,0.00014743469911590506;0.0019212139416627506,0.0008001011893402055,0.0015320937144680346,0.0012661849337998827,0.002027322300220402,0.001378859266354077,0.0011678067298672805,0.0007662632623263158,0.0012516080294118698,0.0011747501403820452,0.0011811657564907237,0.0011269062880812461,0.001453559845967677,0.00108463225909421,0.0012660581634624363,0.0011604707330798727,0.000824048198842261,0.001088722947425879,0.0010634801694863478,0.0009173722514856354,0.0007806536007134274,0.0015969423534041237,0.001149571996847943,0.0009201514200186576,0.001027786159156637,0.0011689125104562246,0.0011632863325168078,0.0009635382105406492,0.0003544505175002584,0.0011597539349960007,0.005450860976125749,0.0018516064795996354,1.0276062367125527,0.0018356662322352613,0.00011067349479632382;0.00958457659876919,0.013414710341051786,0.017816619032461446,0.018198773327863006,0.02160904141344893,0.01809377639558049,0.028841671848114973,0.012783318532861071,0.021097129683141425,0.019224561212883472,0.01789399298561275,0.018537191213430386,0.018519763838504462,0.016251514803804143,0.019255344659689182,0.01624410823969391,0.013896503593009172,0.018888410503341387,0.017963042168765344,0.015683559227948986,0.016905418194371136,0.024243866792202702,0.021631191700981885,0.01777240977303467,0.02059806556661058,0.02562913268096494,0.03155282602749809,0.022189229458929562,0.014381863217218394,0.03900348990393712,0.02775915752951939,0.018257662682115643,0.024138810412902733,1.0950215378927641,0.003972942743595601;4.180502901631742e-05,5.113119196834566e-05,7.348845951517848e-05,0.00014106817878065976,8.243306250820341e-05,8.129945382831554e-05,9.014678359687761e-05,5.060443633762037e-05,6.606443320009276e-05,7.247170679639705e-05,6.551690274106072e-05,6.389184608047578e-05,7.988060023682987e-05,6.0010939276657635e-05,0.00015571611092637605,5.671881235337903e-05,3.693422337160757e-05,0.00011800905714901051,0.00010062376180769302,4.3022645060644144e-05,7.749857103624618e-05,9.830811751163394e-05,0.00013831496474990082,6.672009862794293e-05,7.019505504709267e-05,6.918669752202637e-05,7.770595231245191e-05,0.00011234189775132726,0.0002650730136254758,0.00011073697209281726,0.00010858885044618325,6.330573006496636e-05,9.49631204697183e-05,0.00016994958357319643,1.0001350456560882;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            1.17725946e+00, 4.70979270e-03, 3.68109222e-01, 8.60168424e-02, 1.24470513e-01,
            1.95156060e-01, 3.13576462e-02, 6.69016059e-03, 1.93278549e-02, 2.93976764e-02,
            9.20834979e-03, 7.55312145e-03, 8.15624037e-03, 7.23932161e-03, 9.18402919e-03,
            3.35242687e-02, 4.69029300e-03, 2.11568587e-02, 6.62282583e-03, 8.96028719e-03,
            8.45022854e-03, 1.06356276e-01, 7.71100607e-03, 9.25456380e-03, 8.44727149e-03,
            1.44263803e-02, 5.25037132e-03, 4.46782876e-03, 3.40237684e-03, 6.77913302e-03,
            1.04930680e-02, 9.82753149e-03, 1.28617904e-02, 1.21306042e-02, 2.47451793e-02
        ],
              [
                  2.37460738e-02, 1.11243893e+00, 2.57055433e-02, 3.23143775e-02, 2.77943773e-02,
                  3.27820766e-02, 2.88452239e-02, 5.41087803e-01, 9.19562368e-02, 4.63584813e-02,
                  1.24481620e-01, 1.11717152e-01, 4.07062624e-02, 2.77401707e-02, 3.51558440e-02,
                  3.24770914e-02, 1.58296214e-01, 5.83311133e-02, 1.75218633e-02, 1.09109743e-02,
                  1.13014807e-02, 1.84041746e-02, 4.55323381e-02, 6.08595369e-02, 5.45017966e-02,
                  2.78940523e-02, 1.11766064e-02, 6.87491324e-03, 8.97052173e-03, 1.16098336e-02,
                  1.95487849e-02, 1.31032069e-02, 1.67495093e-02, 1.79352720e-02, 6.91498577e-02
              ],
              [
                  8.28748340e-02, 4.35727906e-03, 1.21033259e+00, 2.02292587e-02, 1.45282887e-01,
                  2.16801677e-02, 1.25370759e-02, 5.98751073e-03, 2.18486990e-02, 1.51372252e-02,
                  8.73834774e-03, 7.98949688e-03, 8.58456424e-03, 7.83346987e-03, 8.66645169e-03,
                  1.11750330e-02, 4.73716991e-03, 8.46964101e-03, 7.12453987e-03, 9.83390209e-03,
                  9.37644365e-03, 1.90123245e-01, 7.12770128e-03, 1.25725976e-02, 1.21621259e-02,
                  1.06205850e-02, 6.95193752e-03, 5.83084430e-03, 2.69134651e-03, 8.20126763e-03,
                  1.43295143e-02, 1.40376771e-02, 2.21671268e-02, 1.50059206e-02, 5.40807514e-03
              ],
              [
                  5.32625848e-03, 3.52287627e-03, 6.79283451e-03, 1.45752158e+00, 1.02608580e-01,
                  1.01481690e-02, 1.36217987e-02, 3.60806586e-03, 9.47121682e-03, 2.50046296e-02,
                  9.35564240e-03, 6.94894577e-03, 8.71192485e-03, 7.79290611e-03, 1.64267812e-02,
                  3.60562082e-02, 3.10748005e-03, 8.07936702e-03, 6.06703186e-03, 5.18862732e-03,
                  6.14529853e-03, 7.04348502e-03, 5.50298316e-03, 7.00323228e-03, 5.43341671e-03,
                  5.32218184e-03, 3.19590650e-03, 2.29462013e-03, 1.65649769e-03, 4.14415025e-03,
                  6.48781627e-03, 2.82276078e-03, 7.06765184e-03, 1.06382580e-02, 6.37806732e-04
              ],
              [
                  4.42528670e-04, 3.04714560e-04, 6.24163322e-04, 1.50436750e-02, 1.25021604e+00,
                  1.10477211e-03, 1.30889071e-03, 3.43716991e-04, 7.33179894e-04, 1.92490149e-03,
                  7.58971575e-04, 7.38769795e-04, 8.62897970e-04, 8.81650041e-04, 3.35643646e-03,
                  5.99076584e-03, 3.56014982e-04, 6.38552779e-04, 1.04029459e-03, 6.66800930e-04,
                  5.77360484e-04, 4.87849536e-04, 6.45413093e-04, 5.80012439e-04, 5.84691409e-04,
                  5.30094273e-04, 5.63095427e-04, 2.10375163e-04, 1.29219343e-04, 3.70882924e-04,
                  7.41023319e-04, 2.86146753e-04, 4.19412056e-04, 8.65465885e-04, 5.44663426e-05
              ],
              [
                  4.81650492e-03, 4.45658678e-03, 6.59895441e-03, 6.36447591e-03, 7.43623569e-03,
                  1.30867855e+00, 2.13885824e-02, 3.72145638e-03, 5.85325384e-03, 8.75513864e-03,
                  1.38416297e-02, 1.02301406e-02, 9.35789592e-03, 6.84437731e-03, 1.04671178e-02,
                  9.93496486e-02, 4.19440523e-03, 4.87314535e-02, 4.86631774e-03, 3.85839652e-03,
                  3.72083227e-03, 6.35059320e-03, 4.61825473e-03, 3.97420782e-03, 3.73558953e-03,
                  7.25755397e-03, 3.44019941e-03, 2.52681646e-03, 5.90707626e-03, 3.79850545e-03,
                  5.66145311e-03, 5.55867397e-03, 4.31066376e-03, 7.15397928e-03, 7.59333385e-04
              ],
              [
                  1.44686883e-02, 1.18218684e-02, 5.27459990e-02, 3.77728812e-02, 4.64618072e-02,
                  3.74765318e-02, 1.33045218e+00, 1.29261588e-02, 4.07064423e-02, 4.41326788e-02,
                  4.34975769e-02, 2.31748451e-02, 2.93915237e-02, 3.29706681e-02, 2.72838204e-02,
                  4.25378301e-02, 1.33440738e-02, 2.38838197e-02, 2.34917880e-02, 2.51719363e-02,
                  2.42556571e-02, 2.79916740e-02, 1.99916204e-02, 1.82265768e-02, 2.12261948e-02,
                  3.21442911e-02, 2.57158598e-02, 3.04852484e-02, 9.86228579e-03, 4.01775329e-02,
                  3.58222862e-02, 3.07367065e-02, 2.34931124e-02, 4.68209153e-02, 1.96576992e-03
              ],
              [
                  2.32432235e-02, 1.70656546e-02, 1.94017945e-02, 2.44764643e-02, 2.21015347e-02,
                  2.21363523e-02, 1.79711976e-02, 1.05859477e+00, 6.15673118e-02, 3.31420366e-02,
                  3.55510077e-02, 2.96843032e-02, 1.89897024e-02, 1.45805049e-02, 1.70886546e-02,
                  1.66375930e-02, 3.08429953e-02, 2.68059228e-02, 1.30605036e-02, 1.11332066e-02,
                  9.08320247e-03, 1.27106169e-02, 6.31031013e-02, 9.86805581e-02, 8.78854182e-02,
                  3.29069877e-02, 9.04601051e-03, 5.71399079e-03, 4.57355814e-03, 1.05825403e-02,
                  1.58242523e-02, 7.93012889e-03, 1.17100319e-02, 1.28300439e-02, 1.81526715e-03
              ],
              [
                  7.00559239e-02, 2.49858685e-02, 5.29666424e-02, 1.55831285e-01, 1.10506152e-01,
                  8.36546196e-02, 8.07104525e-02, 3.59308314e-02, 1.33572413e+00, 3.31546925e-01,
                  7.22619752e-02, 4.82072604e-02, 5.02268832e-02, 6.02243833e-02, 6.12997389e-02,
                  6.83113454e-02, 2.13265666e-02, 4.46590336e-02, 2.90202847e-02, 1.32012053e-02,
                  1.21987527e-02, 2.49620876e-02, 2.00243724e-02, 2.16648502e-02, 2.00377555e-02,
                  2.05262580e-02, 1.27102099e-02, 8.18768351e-03, 7.63777275e-03, 1.70943667e-02,
                  2.54018669e-02, 1.27879277e-02, 9.51995398e-02, 2.72795561e-02, 3.75190870e-03
              ],
              [
                  1.38811015e-02, 1.36460746e-02, 3.46833212e-02, 2.92198216e-02, 6.93963390e-02,
                  2.45849655e-02, 3.30039753e-02, 1.31042821e-02, 3.46344556e-02, 1.17015730e+00,
                  2.41226577e-02, 2.20106403e-02, 4.97535639e-02, 4.99712389e-02, 7.46602124e-02,
                  5.01107505e-02, 1.02802632e-02, 3.48195379e-02, 3.30138185e-02, 1.01285072e-02,
                  1.07551767e-02, 1.48195057e-02, 2.11561357e-02, 1.39366904e-02, 1.42908222e-02,
                  1.65374882e-02, 1.07550500e-02, 4.88495331e-03, 4.73401795e-03, 9.36533750e-03,
                  1.15718375e-02, 5.66993929e-03, 1.39183142e-02, 1.24865467e-02, 1.56595825e-03
              ],
              [
                  5.63142980e-03, 9.23748737e-03, 1.21544212e-02, 8.43975767e-03, 8.24316615e-03,
                  1.65216367e-02, 6.16804775e-03, 8.12417392e-03, 1.26287864e-02, 1.40103794e-02,
                  1.14917594e+00, 2.18368362e-02, 1.61469684e-02, 2.27921200e-02, 1.99746641e-02,
                  1.40810391e-02, 7.55016512e-03, 1.06368846e-01, 9.33086097e-03, 3.79342249e-03,
                  3.75380173e-03, 8.32941799e-03, 6.06519369e-03, 4.97015800e-03, 5.04966386e-03,
                  6.45996790e-03, 5.38417192e-03, 2.52896080e-03, 6.63874867e-03, 4.17084073e-03,
                  6.31565063e-03, 4.90158211e-03, 6.17356466e-03, 6.20754134e-03, 9.26472582e-04
              ],
              [
                  2.23627373e-02, 5.02977026e-02, 4.25370906e-02, 3.56405205e-02, 4.59170501e-02,
                  6.87783203e-02, 3.80865479e-02, 4.17465259e-02, 4.67313728e-02, 6.98741547e-02,
                  8.19101500e-02, 1.50725458e+00, 3.13943867e-01, 1.64593009e-01, 2.47253368e-01,
                  1.44209140e-01, 3.43298540e-02, 1.69447449e-01, 6.75935874e-02, 1.71583693e-02,
                  1.63822402e-02, 2.37714001e-02, 3.52389580e-02, 3.73808881e-02, 3.54532933e-02,
                  3.36108888e-02, 2.40447199e-02, 1.02790772e-02, 1.46479912e-02, 1.97641969e-02,
                  2.73642780e-02, 1.36188501e-02, 1.99064161e-02, 2.42386168e-02, 4.76287449e-03
              ],
              [
                  1.50920573e-02, 2.65565823e-02, 1.59333480e-02, 2.39151789e-02, 2.13245541e-02,
                  2.40220437e-02, 1.84606752e-02, 2.35661438e-02, 2.02498287e-02, 2.78667636e-02,
                  3.54486140e-02, 4.40344429e-02, 1.18355937e+00, 3.80897065e-02, 7.53498282e-02,
                  2.57252822e-02, 1.95769512e-02, 3.66425003e-02, 4.11299268e-02, 8.41203686e-03,
                  7.30878678e-03, 9.75940046e-03, 1.62900175e-02, 2.29111952e-02, 1.82677078e-02,
                  1.61220792e-02, 9.56152458e-03, 4.83233438e-03, 5.29915421e-03, 8.75520695e-03,
                  1.41469342e-02, 6.43601878e-03, 9.53955528e-03, 1.11667681e-02, 2.41952730e-03
              ],
              [
                  1.60082208e-02, 2.66643039e-02, 2.59816552e-02, 3.48311052e-02, 3.31063826e-02,
                  3.54377708e-02, 4.06337398e-02, 2.68437150e-02, 3.99166513e-02, 4.95107361e-02,
                  4.28405208e-02, 6.12165335e-02, 1.98180870e-01, 1.51587110e+00, 1.63335465e-01,
                  6.09582617e-02, 4.99371744e-02, 8.03913090e-02, 7.92822035e-02, 2.52475796e-02,
                  2.44703911e-02, 2.32165022e-02, 3.27628348e-02, 3.13892690e-02, 3.36197423e-02,
                  3.64536416e-02, 8.09273547e-02, 1.99247695e-02, 1.28830206e-02, 4.04224793e-02,
                  4.26642716e-02, 2.25750043e-02, 5.06554856e-02, 3.58380952e-02, 3.80178641e-03
              ],
              [
                  1.37137909e-02, 1.59827767e-02, 1.60514085e-02, 1.69393528e-02, 1.77353835e-02,
                  1.88345924e-02, 1.52969080e-02, 1.50127363e-02, 1.48077573e-02, 1.92528287e-02,
                  2.00116455e-02, 2.40647112e-02, 3.86755443e-02, 1.96644018e-02, 1.45455151e+00,
                  2.00915181e-02, 1.28648011e-02, 2.01508647e-02, 1.36272747e-01, 1.34527336e-02,
                  1.12482555e-02, 1.07999381e-02, 6.41752283e-02, 7.03172004e-02, 8.26468358e-02,
                  3.31117014e-02, 1.22303478e-02, 6.80489653e-03, 4.84498961e-03, 1.27522535e-02,
                  3.14323122e-02, 7.29234695e-03, 8.27274038e-03, 1.84974371e-02, 1.85069963e-03
              ],
              [
                  2.03901830e-03, 2.46830526e-03, 3.48715492e-03, 9.16701750e-03, 6.82674429e-03,
                  8.31167644e-03, 7.12634944e-03, 2.66053005e-03, 4.52551062e-03, 6.11057538e-03,
                  6.06052236e-03, 1.56918541e-02, 9.65992285e-03, 6.93006345e-03, 1.22713772e-02,
                  1.05126403e+00, 3.12571889e-03, 9.50429984e-03, 4.92700573e-03, 2.55554022e-03,
                  2.83507123e-03, 4.29145609e-03, 4.56348097e-03, 3.19286126e-03, 4.35303001e-03,
                  3.92633319e-03, 2.71216641e-03, 2.18161837e-03, 2.49653892e-03, 3.52594442e-03,
                  5.72908467e-03, 4.14668053e-03, 4.68597415e-03, 7.36827342e-03, 2.47039998e-03
              ],
              [
                  2.44009696e-02, 4.76733237e-02, 3.60904428e-02, 4.73582046e-02, 3.47121216e-02,
                  4.29896912e-02, 4.77398012e-02, 4.76658836e-02, 5.36169920e-02, 5.03295324e-02,
                  7.12808601e-02, 6.37722805e-02, 3.98948333e-02, 3.05891280e-02, 3.75565084e-02,
                  3.12322341e-02, 1.13913815e+00, 3.14045648e-02, 2.57567149e-02, 1.47779719e-02,
                  2.31795051e-02, 3.96468900e-02, 3.07400152e-02, 2.04316538e-02, 2.13625924e-02,
                  3.07659095e-02, 1.99659312e-02, 1.22760643e-02, 1.60225071e-02, 1.56782359e-02,
                  2.70277010e-02, 2.98030284e-02, 2.49274683e-02, 2.96778246e-02, 4.10658992e-03
              ],
              [
                  7.99748340e-03, 1.22519695e-02, 1.00209392e-02, 1.06517388e-02, 9.54908651e-03,
                  1.11536443e-02, 1.09736933e-02, 1.13835037e-02, 1.09307933e-02, 1.05932447e-02,
                  1.51865341e-02, 1.27258912e-02, 1.08770430e-02, 8.94117073e-03, 1.01766696e-02,
                  9.17442598e-03, 2.58626298e-02, 1.05806273e+00, 1.08554918e-02, 8.35229006e-03,
                  1.01614530e-02, 1.25634363e-02, 1.62184077e-02, 1.03902857e-02, 1.05625446e-02,
                  2.11574220e-02, 1.63966920e-02, 1.09011006e-02, 3.85310030e-02, 1.03968309e-02,
                  2.43299423e-02, 1.70275342e-02, 1.23556659e-02, 1.64001613e-02, 1.86547611e-03
              ],
              [
                  9.84349284e-03, 7.32844176e-03, 1.52093134e-02, 1.41312375e-02, 1.66009551e-02,
                  1.48215774e-02, 1.20263723e-02, 8.63591969e-03, 1.32680058e-02, 1.44976879e-02,
                  1.43739319e-02, 1.40154027e-02, 1.31053669e-02, 1.07593483e-02, 1.44784993e-02,
                  1.32871187e-02, 1.30653748e-02, 1.43155180e-02, 1.01603656e+00, 7.41875517e-03,
                  7.18258630e-03, 1.06268224e-02, 2.15427126e-02, 8.18188768e-03, 1.05457518e-02,
                  1.37346827e-02, 7.46863670e-03, 6.24437947e-03, 4.19369838e-03, 9.48951725e-03,
                  8.45267617e-03, 5.43700230e-03, 7.69908973e-03, 1.08036756e-02, 8.75280859e-04
              ],
              [
                  5.96261456e-02, 3.95514778e-02, 1.13297652e-01, 1.05253589e-01, 1.24752910e-01,
                  1.07189478e-01, 9.38232950e-02, 7.57757929e-02, 8.93926587e-02, 9.84467984e-02,
                  7.80030104e-02, 9.49421223e-02, 9.87460186e-02, 8.54047859e-02, 1.09222219e-01,
                  8.40354938e-02, 4.45024260e-02, 8.22579408e-02, 6.40656866e-02, 1.03995342e+00,
                  2.64857401e-02, 7.99275934e-02, 4.73212885e-02, 5.13409858e-02, 5.03551808e-02,
                  4.49673092e-02, 2.86066231e-02, 1.68254209e-02, 1.35809755e-02, 3.03642311e-02,
                  3.98114235e-02, 2.37837368e-02, 4.80265787e-02, 3.83979782e-02, 4.82811099e-03
              ],
              [
                  2.91065771e-02, 1.58198505e-02, 5.35936972e-02, 5.30984191e-02, 6.68532733e-02,
                  4.25724362e-02, 3.63678511e-02, 2.43207916e-02, 4.06842647e-02, 4.20917054e-02,
                  3.44210889e-02, 3.65132651e-02, 3.73504207e-02, 3.10264204e-02, 4.53491025e-02,
                  4.34746620e-02, 1.73269473e-02, 4.97506812e-02, 2.84342537e-02, 1.28920135e-02,
                  1.01385430e+00, 3.95629856e-02, 2.49331288e-02, 2.04060909e-02, 2.18247107e-02,
                  2.05893648e-02, 1.64167154e-02, 1.14911348e-02, 8.42117681e-03, 1.69402194e-02,
                  1.77859185e-02, 1.17612016e-02, 2.17530677e-02, 2.09748075e-02, 2.35378367e-03
              ],
              [
                  5.81870183e-03, 7.92611433e-03, 1.17529736e-02, 1.32585382e-02, 1.40823333e-02,
                  1.29660383e-02, 1.48945903e-02, 7.79480176e-03, 1.23909455e-02, 1.40356494e-02,
                  1.29480674e-02, 1.28601351e-02, 1.48685220e-02, 1.31161996e-02, 1.26888270e-02,
                  1.11114264e-02, 8.46827386e-03, 1.30946011e-02, 1.20172716e-02, 1.29485143e-02,
                  1.11403015e-02, 1.01705391e+00, 1.47536162e-02, 1.35780111e-02, 2.80832319e-02,
                  2.87615374e-02, 1.66844728e-02, 1.81963926e-02, 6.78120106e-03, 2.09667149e-02,
                  1.77509834e-02, 1.15482570e-02, 1.46989403e-02, 1.89650890e-02, 9.79258188e-04
              ],
              [
                  2.67785340e-02, 3.28080032e-02, 4.89235500e-02, 4.75545758e-02, 5.07060211e-02,
                  5.08677451e-02, 4.12248623e-02, 6.21384984e-02, 4.12979751e-02, 4.18622115e-02,
                  5.76857739e-02, 4.30014878e-02, 3.56264323e-02, 2.80008049e-02, 3.74195757e-02,
                  3.88437766e-02, 3.37749184e-02, 4.08755100e-02, 2.95250119e-02, 2.93417646e-02,
                  2.01554511e-02, 2.62300805e-02, 1.06251455e+00, 5.26633565e-02, 3.21637200e-02,
                  7.57883761e-02, 1.80557414e-02, 1.24954467e-02, 7.24431779e-03, 1.46450912e-02,
                  2.16718257e-02, 1.71102079e-02, 1.81427081e-02, 2.07829161e-02, 3.40338431e-03
              ],
              [
                  6.89115196e-03, 1.05220859e-02, 1.12293641e-02, 1.20877789e-02, 1.32173266e-02,
                  1.52273463e-02, 9.08115383e-03, 1.18410343e-02, 8.68920703e-03, 9.74443414e-03,
                  1.61493252e-02, 1.37571817e-02, 1.02285203e-02, 7.83397855e-03, 9.18141378e-03,
                  8.47683685e-03, 7.30571172e-03, 1.03472904e-02, 5.13232335e-03, 7.23953144e-03,
                  4.44744053e-03, 5.66715983e-03, 6.96229284e-03, 1.15375556e+00, 7.22601676e-03,
                  9.44570960e-03, 3.04195005e-03, 2.19123712e-03, 2.90305089e-03, 3.46257937e-03,
                  3.84586610e-03, 2.73751497e-03, 3.01618937e-03, 3.95632152e-03, 9.26533662e-04
              ],
              [
                  2.46539955e-03, 3.51302671e-03, 4.51757115e-03, 5.26944043e-03, 6.32465241e-03,
                  5.19354054e-03, 5.90829415e-03, 3.45017558e-03, 4.86113505e-03, 5.14239731e-03,
                  4.62625880e-03, 4.43961940e-03, 5.49322911e-03, 5.07916632e-03, 5.30072230e-03,
                  4.14490503e-03, 2.68889209e-03, 4.11255591e-03, 4.49570941e-03, 4.91899522e-03,
                  3.28248393e-03, 3.71895057e-03, 5.59644575e-03, 1.25021450e-02, 1.03743835e+00,
                  2.03897703e-02, 6.14822465e-03, 5.59818437e-03, 1.78939328e-03, 6.46654869e-03,
                  6.62871705e-03, 3.81827930e-03, 3.27596448e-03, 6.65102808e-03, 3.85568630e-04
              ],
              [
                  1.12875169e-02, 1.21620724e-02, 2.12291399e-02, 1.84622309e-02, 2.11046521e-02,
                  2.26092529e-02, 2.37584317e-02, 1.96329476e-02, 1.77347707e-02, 1.91373113e-02,
                  2.27353197e-02, 1.92044959e-02, 1.79464073e-02, 1.47779472e-02, 1.90981161e-02,
                  1.63802332e-02, 1.22032339e-02, 2.00012920e-02, 2.09569795e-02, 2.91893193e-02,
                  1.83744107e-02, 1.77473599e-02, 5.42401878e-02, 1.56859581e-01, 1.11255574e-01,
                  1.12680269e+00, 1.11694617e-02, 9.36913319e-03, 4.53527977e-03, 1.19192798e-02,
                  1.22502715e-02, 7.40610205e-03, 9.96143829e-03, 1.40862605e-02, 1.28937666e-03
              ],
              [
                  1.37408644e-02, 1.59281646e-02, 2.34927571e-02, 2.66025670e-02, 2.86818977e-02,
                  2.51949444e-02, 3.49507191e-02, 1.77058837e-02, 2.74161701e-02, 2.60773687e-02,
                  2.46629045e-02, 2.56478552e-02, 2.76569431e-02, 2.70333072e-02, 2.61427285e-02,
                  2.63367337e-02, 1.84878065e-02, 3.14576537e-02, 3.26601876e-02, 3.31851391e-02,
                  3.50186264e-02, 3.07943498e-02, 3.37428712e-02, 4.07314746e-02, 4.42814273e-02,
                  4.64801931e-02, 1.14823205e+00, 5.02593189e-02, 1.54460330e-02, 4.43746041e-02,
                  3.82918914e-02, 1.97730699e-02, 2.76241917e-02, 4.03951394e-02, 2.63349165e-03
              ],
              [
                  4.56855315e-02, 4.99160559e-02, 5.96353539e-02, 7.11758054e-02, 6.41693737e-02,
                  6.06424520e-02, 6.50332203e-02, 5.09400059e-02, 5.84982040e-02, 5.81905133e-02,
                  6.25140343e-02, 6.08076783e-02, 6.05944987e-02, 5.24133532e-02, 6.03592480e-02,
                  6.76846158e-02, 5.10299323e-02, 6.32912125e-02, 5.18189436e-02, 5.96171428e-02,
                  6.40824864e-02, 5.99439930e-02, 8.29984636e-02, 7.58432132e-02, 7.28083163e-02,
                  7.18237023e-02, 4.83069305e-02, 1.28107605e+00, 1.14366798e-01, 7.09572898e-02,
                  5.31281881e-02, 3.14839540e-02, 5.30354847e-02, 8.07350880e-02, 1.06755269e-02
              ],
              [
                  1.34717020e-02, 1.36928398e-02, 2.17444583e-02, 2.26096159e-02, 2.48269249e-02,
                  2.28504489e-02, 2.81196818e-02, 1.43658480e-02, 2.04426149e-02, 2.26912159e-02,
                  1.96689097e-02, 2.08763724e-02, 2.23855757e-02, 1.95315852e-02, 2.32988077e-02,
                  2.15572202e-02, 1.49110031e-02, 2.67275026e-02, 3.58770075e-02, 3.16004499e-02,
                  5.44137190e-02, 4.37753314e-02, 2.25473278e-02, 3.32075754e-02, 2.84880242e-02,
                  3.92415554e-02, 2.85819411e-02, 4.07564740e-02, 1.04016739e+00, 3.93493574e-02,
                  2.61739472e-02, 2.70045768e-02, 4.80770794e-02, 4.24776685e-02, 1.72151699e-03
              ],
              [
                  5.01497283e-02, 6.54816733e-02, 1.05237963e-01, 9.90369818e-02, 9.90272609e-02,
                  9.30275509e-02, 1.41215116e-01, 6.59605003e-02, 1.42452895e-01, 1.18634428e-01,
                  9.79325196e-02, 9.77102375e-02, 1.19166001e-01, 1.22626567e-01, 1.28469265e-01,
                  8.95634596e-02, 7.49584747e-02, 1.21374975e-01, 1.06198747e-01, 9.54186389e-02,
                  1.01363671e-01, 9.80709380e-02, 9.70088380e-02, 9.47917391e-02, 1.44231594e-01,
                  1.30459927e-01, 1.17622335e-01, 1.68433299e-01, 7.22129519e-02, 1.20215446e+00,
                  1.32434339e-01, 6.31866909e-02, 1.10603048e-01, 1.36306274e-01, 1.04433229e-02
              ],
              [
                  3.34460390e-03, 4.79184614e-03, 5.15658690e-03, 4.26334626e-03, 4.24280832e-03,
                  7.13005873e-03, 6.74255433e-03, 4.01173141e-03, 6.00635688e-03, 5.43257497e-03,
                  5.64362639e-03, 6.27665277e-03, 4.49761112e-03, 3.97408687e-03, 4.83930093e-03,
                  4.97970475e-03, 6.85079266e-03, 4.73257119e-03, 4.93933121e-03, 3.16002833e-03,
                  4.41005488e-03, 6.25846235e-03, 5.83145243e-03, 9.16196019e-03, 1.20007008e-02,
                  6.24822364e-03, 5.10714328e-03, 3.66682256e-03, 5.05919246e-03, 5.25308914e-03,
                  1.00948210e+00, 5.85864468e-03, 6.75536908e-03, 1.15026693e-02, 4.68372931e-04
              ],
              [
                  1.27175422e-03, 1.11756966e-03, 1.73139687e-03, 1.69576564e-03, 1.87919614e-03,
                  1.60166262e-03, 1.95709786e-03, 1.30672415e-03, 2.29126203e-03, 2.07149339e-03,
                  1.75399870e-03, 1.89412597e-03, 2.23189372e-03, 2.07796381e-03, 2.34615335e-03,
                  1.52304344e-03, 1.59956807e-03, 1.72969647e-03, 1.78835888e-03, 1.54945666e-03,
                  1.65271057e-03, 1.58152642e-03, 2.11609021e-03, 1.51664028e-03, 3.20524488e-03,
                  2.45269733e-03, 2.68047507e-03, 2.31060622e-03, 8.66645168e-04, 3.48746156e-03,
                  5.48485926e-03, 1.01418931e+00, 2.10077547e-03, 2.74243737e-03, 1.47434699e-04
              ],
              [
                  1.92121394e-03, 8.00101189e-04, 1.53209371e-03, 1.26618493e-03, 2.02732230e-03,
                  1.37885927e-03, 1.16780673e-03, 7.66263262e-04, 1.25160803e-03, 1.17475014e-03,
                  1.18116576e-03, 1.12690629e-03, 1.45355985e-03, 1.08463226e-03, 1.26605816e-03,
                  1.16047073e-03, 8.24048199e-04, 1.08872295e-03, 1.06348017e-03, 9.17372251e-04,
                  7.80653601e-04, 1.59694235e-03, 1.14957200e-03, 9.20151420e-04, 1.02778616e-03,
                  1.16891251e-03, 1.16328633e-03, 9.63538211e-04, 3.54450518e-04, 1.15975393e-03,
                  5.45086098e-03, 1.85160648e-03, 1.02760624e+00, 1.83566623e-03, 1.10673495e-04
              ],
              [
                  9.58457660e-03, 1.34147103e-02, 1.78166190e-02, 1.81987733e-02, 2.16090414e-02,
                  1.80937764e-02, 2.88416718e-02, 1.27833185e-02, 2.10971297e-02, 1.92245612e-02,
                  1.78939930e-02, 1.85371912e-02, 1.85197638e-02, 1.62515148e-02, 1.92553447e-02,
                  1.62441082e-02, 1.38965036e-02, 1.88884105e-02, 1.79630422e-02, 1.56835592e-02,
                  1.69054182e-02, 2.42438668e-02, 2.16311917e-02, 1.77724098e-02, 2.05980656e-02,
                  2.56291327e-02, 3.15528260e-02, 2.21892295e-02, 1.43818632e-02, 3.90034899e-02,
                  2.77591575e-02, 1.82576627e-02, 2.41388104e-02, 1.09502154e+00, 3.97294274e-03
              ],
              [
                  4.18050290e-05, 5.11311920e-05, 7.34884595e-05, 1.41068179e-04, 8.24330625e-05,
                  8.12994538e-05, 9.01467836e-05, 5.06044363e-05, 6.60644332e-05, 7.24717068e-05,
                  6.55169027e-05, 6.38918461e-05, 7.98806002e-05, 6.00109393e-05, 1.55716111e-04,
                  5.67188124e-05, 3.69342234e-05, 1.18009057e-04, 1.00623762e-04, 4.30226451e-05,
                  7.74985710e-05, 9.83081175e-05, 1.38314965e-04, 6.67200986e-05, 7.01950550e-05,
                  6.91866975e-05, 7.77059523e-05, 1.12341898e-04, 2.65073014e-04, 1.10736972e-04,
                  1.08588850e-04, 6.33057301e-05, 9.49631205e-05, 1.69949584e-04, 1.00013505e+00
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def leontief_matrix_2005():
    """
    Real Name: b'leontief matrix 2005'
    Original Eqn: b'1.1772715921350885,0.0045098196060683006,0.36836841469606935,0.0961223075135978,0.13688557951434682,0.20952335355298718,0.034697486216975645,0.007076465375191981,0.020770553995191628,0.03075561746655832,0.010049510844246295,0.008079238368936204,0.00860996686532846,0.007709573196977822,0.009591648624016609,0.035229714339855125,0.004962731436793895,0.020776168974846822,0.00696527949794555,0.008894961459542574,0.00865829405994444,0.10720806375640726,0.00832200388074313,0.009500812187935638,0.008752864224036691,0.01638932945694504,0.005367407089863707,0.004716283527315092,0.003572829378834335,0.006933944973374876,0.01113234385786579,0.010234365554457009,0.013113717081315025,0.012518452224006124,0.026468370289608214;0.023543590056396335,1.1141627690868992,0.02634739785005492,0.03364594473680562,0.02889002901426695,0.033934722329062035,0.029813252270311008,0.5513646986429517,0.09145530103940665,0.04772621050323778,0.1280701136986555,0.11564258968306763,0.042131295020749894,0.029122662193006625,0.0361336281138352,0.032695823224204015,0.16468063942050976,0.06168524151713376,0.018004133986529447,0.010901902463030397,0.01158287656501691,0.019278428523163398,0.04683441395095426,0.06000936222981297,0.06223286315600421,0.030158478146258747,0.011614268489680099,0.007219092257028408,0.009352782387349073,0.01172122039552578,0.02000323887247994,0.013358920032727763,0.017496241533958318,0.018383175944931968,0.07015315766166298;0.0859104073899156,0.004302458081117091,1.213752816196149,0.02327115508962911,0.15973417279875674,0.023797467402573616,0.013184975772901758,0.0065960493735556435,0.023299862386862567,0.016409816562944022,0.009635767825124361,0.00869636087068283,0.009207284688301646,0.008457970765751959,0.009125379317921732,0.011864267776345035,0.005132862132807321,0.00911185248756572,0.007374267916846593,0.009807802537307325,0.009830984325923808,0.19232207830127146,0.007653083856322188,0.012773392790288865,0.012273938496220741,0.011373503744121011,0.007117090916850956,0.006088378032895908,0.002891771118854119,0.008256051760184714,0.015164208802901022,0.014274583447777977,0.022412211289450253,0.015413738247772805,0.005871883013274473;0.005560002060028858,0.003438532280811824,0.007306452293874141,1.4976260545095301,0.10933125116828774,0.010909472488470035,0.014854054247803505,0.0038717949605607946,0.010275275869860207,0.027468155993516895,0.010157034247667921,0.007533162678555477,0.009214191337838391,0.00846992913490812,0.01659874664310012,0.03851075549819866,0.0034637048495283146,0.008752791643754948,0.006415242627147328,0.0052708279712097815,0.006737965512934049,0.007553573676951326,0.006007601029850592,0.007745826356126734,0.00599845157198569,0.005875446076359194,0.0034048934678779226,0.0025035474211484014,0.001822120994616637,0.004438749051331012,0.006939230809884929,0.003180471623085725,0.007890627262127118,0.010847858697658525,0.0006669864022011498;0.0004540092276416714,0.00028983650592671596,0.0006406585847964974,0.018310796744288923,1.2587058150918486,0.001159915581464462,0.0014946165241517184,0.0003574902647195632,0.0007726407226075928,0.0019867256377477153,0.0008027911722253098,0.0007503615544106003,0.000882299534931793,0.0009428157856898804,0.0036306805190756625,0.006349240884430725,0.00036365943810326234,0.0006683673864320014,0.0011140199745755931,0.0006510268115041178,0.0005743825119884683,0.0005148857028044032,0.0007009478243086277,0.0006147188625728198,0.0006352108709076104,0.000555070208830876,0.0005790229627227917,0.00022766716266816472,0.0001391578877792576,0.0003823026724495334,0.0009237147810199026,0.00031594028299875574,0.0004705622230081255,0.000934630856325758,5.797490134517779e-05;0.004617784224061912,0.004222815902137982,0.006488397636847468,0.0066356582765138275,0.007525718392399613,1.3178682537361999,0.02198374909355869,0.0038943848424720733,0.005898602421586313,0.008866333670024703,0.014680434017400278,0.010678640969203589,0.009689314490530475,0.007108113666662898,0.010467452704557836,0.09808711279365569,0.004226245012806836,0.048890407224460364,0.0050538112753793045,0.003765619930058579,0.0037349759203757125,0.006416971562621509,0.00477325892518747,0.0039294221307105,0.0038075475077552143,0.007190742181853617,0.0034212039073685968,0.0025748008804295044,0.006113124931037635,0.0037487948042241445,0.005801302050623111,0.00579851087404382,0.0044978340890514295,0.007177533662419982,0.0007237402773444496;0.014344972048082948,0.011619693103060054,0.05309930515923177,0.03930369598082811,0.04747976673527204,0.03824324139952475,1.332853400865355,0.013919584074158282,0.04086506105714264,0.045002565173938414,0.04560126933058684,0.02358922695606643,0.029131848754303694,0.03266903419662126,0.026914128150224648,0.042310031956592324,0.013825314464150256,0.024497725200597512,0.023359340708926986,0.023818388155179317,0.024600037454711187,0.02822004175309883,0.020341464506120753,0.01812264512061896,0.02100340651471464,0.03176296648542705,0.025225586474839003,0.031238057563772605,0.01020232276744078,0.03941587327279304,0.036267829212152235,0.031004692704580734,0.024431629817392334,0.04667642137120794,0.0019906597107415764;0.02313731439452704,0.01540132346114783,0.019686351669288542,0.025464923337844232,0.022768190673569846,0.022647851330147354,0.018568541023986633,1.0863578104252802,0.06682118143093219,0.035014663319295425,0.037277503677120065,0.030641100696520634,0.019387067564412733,0.015046831882492635,0.017412729550095127,0.016995478158740064,0.033482718036488376,0.027095206871217404,0.013557368267084756,0.011331351754063388,0.00939297933450284,0.013117654980882144,0.06428721683519203,0.0963684219297908,0.10269359868257676,0.03520641053868059,0.009400768701035633,0.005993687416186658,0.00482180164411743,0.01072962046778074,0.016626378307406455,0.008052631246919548,0.012374568242126389,0.013136734707806486,0.0017723612148434886;0.06685437417243596,0.02351758373564283,0.051675729360025666,0.15534916572015076,0.10836426450272647,0.08289571173996252,0.07938291877633229,0.03980894973375787,1.335500576550372,0.3368673650257066,0.07359314976813218,0.04802970339057335,0.04962524412697895,0.060671206399237766,0.05982642878770308,0.06766833927174785,0.021387372630788798,0.044985386687032475,0.028000890995504322,0.012344727540741675,0.012025912178491069,0.02473508051927336,0.020543746858120694,0.02176136672050541,0.02140917668121304,0.02093598990764359,0.01259763337769845,0.00823836214103654,0.007952369336469768,0.01670745839265219,0.025710951993558998,0.012733839879506907,0.09530850741812734,0.026769501845875635,0.0037406234160075732;0.013687288037739437,0.012621684992801875,0.03567040602830153,0.030965378241639738,0.06998758749240733,0.02439667558078399,0.03339016528080878,0.013512424851506782,0.03548737570546624,1.1783058195545464,0.025429495055822333,0.022540172587487393,0.04969480385652136,0.05127200115700121,0.07436991208619531,0.051091582362762206,0.010526656802202921,0.03574580468680371,0.032680186919600965,0.009836915413787352,0.01081938651980556,0.015233157089394222,0.02193493385190287,0.013847964743076292,0.014829923524752228,0.01675467875578992,0.010904351653237927,0.005058527179617556,0.005005948320426471,0.009340839753331566,0.011689162049441636,0.0059045907133025675,0.014155197384016842,0.012804364167380402,0.001585145682646685;0.0053994069781234345,0.008976086170760688,0.012034672458322921,0.008736340805930411,0.008374313082828882,0.01594028706021518,0.006227640766097551,0.008738356904752364,0.012986608610037571,0.014145694258189137,1.1590444032552478,0.02250801396790934,0.0164852272096404,0.023210721799183792,0.01998981566548193,0.014342497362423889,0.00784537284314453,0.11143495699056193,0.00960749969941433,0.003530438703537318,0.0037227964693317965,0.008337596196437978,0.006221011756818601,0.004919335342321209,0.005251851730306768,0.00668765265118579,0.005515011396705193,0.0025913581161579905,0.006877391814797276,0.004140906111095254,0.006449096206407228,0.004988874902951267,0.0063906091750211245,0.0062774277212900315,0.0009343941067959616;0.02198881755067632,0.047359102830723365,0.041138843484360005,0.03683856764350284,0.045836902632019116,0.06726633137163752,0.03783640170494887,0.0421465424457979,0.04712928970363451,0.07006655699475793,0.08366505269811594,1.507150803657162,0.3151729900536699,0.1706323748955435,0.24148635514069386,0.14249845906966982,0.03488442753013333,0.17115479003427111,0.06629636413657979,0.01633772435923428,0.016051929889978656,0.02357320347860281,0.03510781050197193,0.0353001848516762,0.035398207196618785,0.03530398778880201,0.02428963023997466,0.010474021834045366,0.014934841837725405,0.019602929829250465,0.027299995501826373,0.013921783127953348,0.020641841138785068,0.02465535574965268,0.004699224296407581;0.015145781387508985,0.024161778996034396,0.016444309388430504,0.02548779184184883,0.022339629601855,0.024888497146642312,0.019172357917519853,0.024308694555413086,0.02125094817589365,0.02924602692104353,0.037783634947354296,0.046383022402718146,1.1920847397756886,0.040685884717647926,0.07847356727845306,0.027909460120703788,0.019826106935611962,0.037959279692407144,0.0416703007731594,0.007966042569606901,0.007693806533336544,0.010086518543201235,0.016763947143243547,0.022905936673020117,0.019657191748610588,0.017720262821641034,0.009754150294891814,0.0050062673735984395,0.005519972038445289,0.0087600886991151,0.014542757387029308,0.006565655131900251,0.010283837584774469,0.011555402169633097,0.0024697178535979603;0.016983237158558213,0.02652801562439599,0.028020065160857466,0.03904817328622991,0.035446434348505994,0.03853678970728531,0.04344810303171147,0.02965827663489014,0.04346664914594234,0.05355591237741031,0.04732397149468787,0.06725409926434782,0.21250264915713143,1.562547098234536,0.17530025552898523,0.06826564146774072,0.05603462491755097,0.08824247229528978,0.08399112502316956,0.02614079602929566,0.026711751938732133,0.025268711738029467,0.03601156401771775,0.03258093987653972,0.036570321928394295,0.0397341251786279,0.08665162389539198,0.021811816190348655,0.014310661230390768,0.0431523614642393,0.04534135626641967,0.025329002515200347,0.05457862965161273,0.039389970446255244,0.004211656904060071;0.01395041618413908,0.015126467503961051,0.016286028535132016,0.017843075974971073,0.018044675588308155,0.019775314034479942,0.015984351852077385,0.015524610045250036,0.015302067511766333,0.019797152075599,0.021558505866642715,0.02501631044455525,0.040559569081285114,0.020675016333201745,1.4638717910672427,0.02119277004895834,0.013486064779417283,0.02126834572829315,0.13365019811644874,0.012706365943791969,0.01229060042024081,0.011251519030111307,0.06528038555675125,0.07220654438541124,0.08639742222667399,0.035310980581910935,0.012349441418614571,0.007062120862568205,0.005092264450426279,0.012844771031472382,0.032287720568265434,0.007777596560763704,0.008894513169133231,0.01964820076296101,0.0018777444081516045;0.0020081580225252893,0.002348854806221112,0.003418478230953753,0.009880492459514247,0.006883510291220637,0.008198249090976743,0.006870100559767732,0.0028198018461932407,0.004657419300262017,0.006276917719701987,0.006222506236359216,0.01522153612434483,0.009662893606253683,0.007124324741092136,0.012239749203396167,1.052082969058246,0.003407224878380684,0.009577873496971753,0.004805064673071992,0.0024453013232635587,0.0028310396536094036,0.004230364617999377,0.005103483054551661,0.003111010472720844,0.004516804710677254,0.0038906928645742814,0.002832749441359718,0.002193865438187264,0.0025046030940430756,0.0034510097273064083,0.00564990310627912,0.004322429727969717,0.004839853023919357,0.007553935051103358,0.002515169519262453;0.02543956884478263,0.04716771666175329,0.03802549732147948,0.05027131306862909,0.03635498020947205,0.045281415428549784,0.04984933386205169,0.05790986391629272,0.05720241393316221,0.0534963668722899,0.07707678508540891,0.06838107820061642,0.0421083058593622,0.032433421303205395,0.03870832937177713,0.03246210653141263,1.1527741578601627,0.03413288597059367,0.026668630148184456,0.01507585347895778,0.023709756183316,0.04213434507074753,0.03248812730608337,0.021426189195000375,0.023593981612112153,0.03298368204080793,0.021147360028413078,0.01307823486087107,0.017458298324978427,0.016293308611348468,0.027672787818760432,0.03138360104440137,0.026586133556974277,0.030854734025522666,0.00419934417050049;0.007569803816008539,0.011507043763956434,0.009458995309692369,0.010265479471302519,0.0092262074143473,0.010654024473319479,0.010399474956509395,0.012657951393606509,0.010686213843704467,0.010268585764147528,0.014473645455425857,0.012572097703193355,0.010511012512146438,0.008423840035245348,0.009544167923122453,0.008832240836736267,0.024643994510398476,1.0590429430161543,0.01077436206794735,0.0077991687157095224,0.009578445094939306,0.012110562441618523,0.015553852944108002,0.0096795019085037,0.009989719135189172,0.020288910721609574,0.016389669791772823,0.010641901892755094,0.03829227983560455,0.009905415623491644,0.023630299472156134,0.016225671819435152,0.012238453908760907,0.01577276591667308,0.001765671125779098;0.009568074452877119,0.006758213794756938,0.015091144637020586,0.014019033566396498,0.016268096144425915,0.014673485500875974,0.011879027131803355,0.008918738524199868,0.013221273280807407,0.014537636244435556,0.014090846863679918,0.014073276138630707,0.012948036980076084,0.010635350945077008,0.014322602917030186,0.013157411709172059,0.012465237984623814,0.014514497440274554,1.016610321504757,0.007547852465127357,0.007175857831236143,0.010909660922194453,0.02142614865091351,0.007924319377609852,0.010829651746907606,0.013736130473974793,0.007527274373157919,0.006493694832442369,0.004306977456432496,0.009397474403795758,0.008452567813444544,0.005494423026728186,0.008075109980691365,0.010882531649587439,0.000860043056299651;0.056434085597390576,0.034464730285675496,0.10981239894482095,0.10120574448639169,0.11621291881404992,0.10193210943555923,0.08832647704154906,0.0772157730983919,0.08609778664819649,0.09445158392068063,0.07366397608232632,0.08910106048721665,0.09304175532402366,0.08049698407602987,0.1036482015935985,0.08000026821189463,0.042067197077885116,0.07930452532826889,0.0618777933991359,1.0375036192896387,0.02575801782417055,0.07844926642382868,0.046119490109427286,0.04756561020069753,0.04921199966667141,0.04403080874852564,0.027724902168503703,0.016621176547568936,0.01349705419179041,0.028759247078040423,0.03998014087650709,0.02337625530870494,0.048287204423362644,0.037348723937229454,0.004558745891005287;0.030597245816052193,0.0157895588799157,0.05492864928843846,0.05474964591987178,0.0688802921686958,0.04417347712609467,0.03761572693512121,0.027415404947711497,0.04176723184008961,0.04451820478472973,0.03677293660097836,0.03829808686877159,0.039807712077057744,0.0340158401567395,0.046538272088428125,0.04422689534655896,0.017900736768432034,0.052062023268796734,0.028338106486913137,0.012981740826626452,1.0139308434358203,0.04108036420888893,0.02612259106537769,0.021440079686755972,0.023252735853685383,0.021312832923125614,0.017677328243967,0.012119675071331886,0.008810563919824458,0.017035310772884196,0.01821325974107444,0.012463645070572566,0.02365078608585058,0.02202764863256047,0.002447319584288602;0.005805661747877632,0.00746371110033047,0.011770951693543795,0.013573949346881432,0.01436720346547562,0.012566427962059024,0.014417507119077898,0.008026103077023235,0.012418732541878958,0.01398152263068043,0.013187975375356728,0.013040428691715613,0.014662473658948582,0.012814214898363332,0.012528611452377368,0.010887577496707603,0.008909091292612114,0.01341515871289944,0.011755308783405041,0.012439583896009505,0.011545982928428287,1.0169250710874476,0.014896972699551677,0.013833351096143857,0.025962454031577507,0.030407658298929267,0.016264621263173844,0.01850315082854311,0.006997365740120594,0.020077538797178367,0.017497236346714313,0.01226025363538084,0.014669753822502378,0.019243697255037717,0.0009805072474742059;0.027062098914507875,0.030406042687493393,0.04929212179388014,0.04924432891239625,0.05099190781837713,0.05119635047966921,0.04085442210564943,0.065243309689123,0.04201032268107027,0.04248350619549282,0.058883434069217415,0.043795435090475135,0.036280111199762,0.028515040634459463,0.037152171147691745,0.03829777241452083,0.03330652879691964,0.042510325848684895,0.030511346847259202,0.029889724598532456,0.021128179475427486,0.026476310492474703,1.0639645689360244,0.044510764713821614,0.03219207575869742,0.0766735642104499,0.018207375570082666,0.012698524557664879,0.007393656071999426,0.01458006885433882,0.021467290881087633,0.017078981069634295,0.018607968962178364,0.021081325575095025,0.003383100796720437;0.006379721340864941,0.00992960109990267,0.011058080800140768,0.012083333571064944,0.012594671066515423,0.014712453914555983,0.008947541414549325,0.011524211650815883,0.008779954527897788,0.00958411128604854,0.01651271912333449,0.0139719841550664,0.010180766313661549,0.007738557783493004,0.009425976534000777,0.00801648225769863,0.006996970251337725,0.00984634947839389,0.0053968288578702265,0.007283321419042753,0.005855529222193231,0.005692744548869641,0.007232533265463036,1.177572580746099,0.007093341862463156,0.00963913698975012,0.003204478560270017,0.002361705354802956,0.003577508925824517,0.0035266025483959994,0.0037961165922870406,0.00265843983039535,0.0031748600028783263,0.004030685135289642,0.0009048088326785201;0.0023576485108719684,0.003060671025162593,0.004293393445879612,0.005180168537381303,0.006161914035217962,0.004936185118680265,0.005506003326920607,0.0033391463637160433,0.004751915016973308,0.004956790238749109,0.004484906179799693,0.00427769431769222,0.0054017747571197235,0.004954734769111737,0.0050423822901664835,0.003919299776293069,0.0026138213992578964,0.004068933025367033,0.004358961929860474,0.004658089622459395,0.0032985787573060698,0.003571976725165137,0.005241595470582168,0.011000511833980237,1.0384304426905318,0.01888501599633,0.006109286525208009,0.005390606481182006,0.0018029398446060931,0.005951829971646519,0.006196459636468676,0.0038704618020923938,0.0031473594495277264,0.00657130689151957,0.00036125346686198334;0.011335530979408483,0.011928420762242634,0.021441389095580847,0.01895062485289615,0.021243512218895373,0.02286206359214654,0.02348704101230253,0.020261481190520063,0.018044352420621714,0.019414455212206652,0.023112088845636737,0.019554086258691598,0.017994660360938785,0.014794068241209678,0.01888017556226406,0.016267092570528337,0.012145017448326896,0.02253329374200521,0.021891203263666843,0.02984463223250144,0.01899369440663144,0.018076982873766138,0.05404467431267009,0.15050946215537545,0.11455707032764105,1.1232677119332384,0.011312663561756172,0.009653493790660527,0.004860256613204123,0.01205680015189749,0.012404648922757482,0.007651021618874275,0.010321867425664535,0.014547166773657009,0.001318277118759588;0.01386016421023495,0.015431372361952899,0.02356708757920029,0.027250852328588815,0.028330803654993384,0.025055595562191082,0.03452103125888877,0.018605650972169624,0.027383531795470362,0.026036932397436954,0.024617637257638377,0.026197619905965218,0.027366272447935394,0.027205863117469357,0.025712533976007822,0.026780950645794867,0.019350166041693904,0.03184519650839783,0.03267018953720909,0.03306619741124716,0.03499260787136098,0.03134875990654469,0.03431432637191747,0.039505656684101394,0.042604200730251944,0.04421349385697442,1.152562838089242,0.05186076846990542,0.01628455264372077,0.04277700451209689,0.038669835039704725,0.020268078467181847,0.02851181425107628,0.04074878499512661,0.0027229570065485393;0.04425022947528165,0.048665338514222806,0.059242807303770524,0.07295774760355483,0.06507550036292498,0.06010920663115262,0.0649047025809601,0.05333074693313724,0.06012930575295891,0.05953824095769674,0.06379416991443985,0.06307825514217316,0.06177535985513715,0.053298451491179906,0.06058333318529953,0.06739335507045997,0.05354251196713438,0.0651371029022528,0.05306842646179108,0.0593622712983243,0.0654665022406511,0.0614859246595433,0.08316338722594381,0.07093353708191648,0.07157130593640755,0.07449688197098626,0.04918110377764013,1.297541061866582,0.12124999760189796,0.07058232048887544,0.054061499593206726,0.032589634151602126,0.05483236265256469,0.08373749414288494,0.012580671266607151;0.012841340596213063,0.013933301768991472,0.02154988853126378,0.02332184765888762,0.025376632621990462,0.02268788753971684,0.02849704605124703,0.015303966989921156,0.020939004286074127,0.02313213321939798,0.02022570921692775,0.02132144789679976,0.022543989483833914,0.01973411479741214,0.023602125570477004,0.021600689886491296,0.014970168485812277,0.02724778894556448,0.03576969700788976,0.031233668594400712,0.05525199132353633,0.045334247731781824,0.02299111425616155,0.030940293079953954,0.026733979737245898,0.037820240367376086,0.029508968230165432,0.04404917263445216,1.038753100652117,0.039713278905628285,0.026033949348374674,0.028137184222644884,0.05006656978670633,0.04344445628617462,0.0018234995337314199;0.05040324686356625,0.06677586240642377,0.10666517839471666,0.1008426456228288,0.09928442165579267,0.09350337645552044,0.14114178714410985,0.07139271879516085,0.14608220802032348,0.12080928678140718,0.09922980307500992,0.10010517947918152,0.11989921286369883,0.12128540654418275,0.13030464893419352,0.0899574698025977,0.07867657710070337,0.12561139884403205,0.10662146855962368,0.09645950267279271,0.10241208642495532,0.10103349192864404,0.09766592774338424,0.0893230748128011,0.14411803519980726,0.12745833673760468,0.11737773710611568,0.17716496088319975,0.0770962948653318,1.2035482948609253,0.13561629754491733,0.06619906614319568,0.11585304194022521,0.1401078685507799,0.010923153370376379;0.003383048683378623,0.004591350531014207,0.005243334261902153,0.0043908784928927864,0.004337090079757036,0.007241496800821856,0.007073551694896082,0.004391848779485847,0.006231643690668269,0.005663112801665885,0.005966806228974752,0.0068764107430768825,0.0047642655477409404,0.004064950064598605,0.004967214913661144,0.005030856965601556,0.006994697305273662,0.004956695182501205,0.005042086647050636,0.0031934010387668936,0.004389619558263236,0.006334576118870547,0.006175182039413154,0.008490496708791085,0.011999980297937677,0.006234840989501148,0.005054129415793539,0.0038040704155283423,0.005390357626194862,0.005264320603131968,1.0097101337172913,0.00601220961112381,0.006606008154583426,0.011625585483285236,0.00047047158282234483;0.001470342767772597,0.001047102649260843,0.0017495154279210327,0.0016915755397755865,0.0018242318422376327,0.0015973211495579388,0.0018308669281367988,0.001300820280680884,0.0022849230088111943,0.0020084348506289504,0.0016853428728732067,0.001823367092747803,0.0021455596602372425,0.0020002835773271876,0.002303473251976134,0.0014807150838779138,0.0015405350194967282,0.0016971910491490143,0.0017539612248776268,0.0015270403333083982,0.0017398723618111196,0.0015991069350290786,0.002052321491449362,0.0014048447666679723,0.0031532003075322953,0.0023381770140341986,0.0024197785765597544,0.0023904043099687595,0.0008714997413022403,0.003553842867016811,0.005586435010764602,1.014493584688213,0.0023653543334690467,0.0026909371419048915,0.00015497679627913071;0.0019112761998037972,0.0008001530975943848,0.0015976606218711586,0.0013481659393411861,0.0021482692195206442,0.0014757349050072122,0.0012402622936088542,0.0008296892344075325,0.0013058169789024164,0.001247926594438006,0.0013514209189761609,0.0012449949964024245,0.0016358806041137733,0.001170024158949795,0.0013829929569505576,0.0012048243609813524,0.0008834008052259695,0.0011604855260173375,0.0011074069832482246,0.0009417948709894001,0.0008040293858272855,0.001690827898385407,0.0011865098242805155,0.0009362507016487533,0.0010660365873696915,0.0011524900369145467,0.0011727497782732825,0.001084847124170355,0.00038655892684512393,0.0011338464867586935,0.005775440656157772,0.002009587466102717,1.0366451283851497,0.0019441611857227178,0.00011659462644832288;0.00966776380288312,0.013303172427136772,0.017938061643489486,0.01841676678688462,0.0214240111804394,0.017752428422983062,0.02829271844237756,0.013315991601530379,0.021117040034539437,0.019162682492450383,0.018011875054282842,0.01871738877416486,0.01817095733781929,0.015810891971000055,0.01889027532180599,0.01577918760924592,0.014364434059831153,0.019139972269175333,0.01750490881939423,0.015322012843729992,0.017138149186703762,0.024749397976459926,0.022542544440004118,0.01684630027627073,0.020209553687505204,0.025790878397197438,0.031020868550529237,0.022755737735976146,0.014845392342098885,0.037909121628278475,0.027963718491480154,0.018943350226764077,0.024407948768148304,1.0947168653056303,0.0036094675817255153;4.201952168132733e-05,5.1753723091664816e-05,7.257896005213649e-05,0.00016004406999772764,8.912166160372908e-05,8.114564938185441e-05,8.478012492478225e-05,5.660283248566017e-05,6.82793312752946e-05,7.354914129976172e-05,6.823864327741806e-05,6.581472399668009e-05,8.369416180424051e-05,6.0934249467954164e-05,0.00015895086992998134,5.800887324134889e-05,3.902063933574464e-05,0.00011918935235320494,9.308293061949936e-05,4.2454407716867074e-05,7.454546076868145e-05,9.737329865574036e-05,0.00015446903105171829,7.426795673629191e-05,6.41988042578432e-05,6.585645406227705e-05,7.551723166104342e-05,0.00011262105487053762,0.00025533008135854534,0.00010738140347910513,0.00010437543427162805,6.631767024987529e-05,9.363546089749845e-05,0.00016179422905389116,1.000122291120587;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            1.17727159e+00, 4.50981961e-03, 3.68368415e-01, 9.61223075e-02, 1.36885580e-01,
            2.09523354e-01, 3.46974862e-02, 7.07646538e-03, 2.07705540e-02, 3.07556175e-02,
            1.00495108e-02, 8.07923837e-03, 8.60996687e-03, 7.70957320e-03, 9.59164862e-03,
            3.52297143e-02, 4.96273144e-03, 2.07761690e-02, 6.96527950e-03, 8.89496146e-03,
            8.65829406e-03, 1.07208064e-01, 8.32200388e-03, 9.50081219e-03, 8.75286422e-03,
            1.63893295e-02, 5.36740709e-03, 4.71628353e-03, 3.57282938e-03, 6.93394497e-03,
            1.11323439e-02, 1.02343656e-02, 1.31137171e-02, 1.25184522e-02, 2.64683703e-02
        ],
              [
                  2.35435901e-02, 1.11416277e+00, 2.63473979e-02, 3.36459447e-02, 2.88900290e-02,
                  3.39347223e-02, 2.98132523e-02, 5.51364699e-01, 9.14553010e-02, 4.77262105e-02,
                  1.28070114e-01, 1.15642590e-01, 4.21312950e-02, 2.91226622e-02, 3.61336281e-02,
                  3.26958232e-02, 1.64680639e-01, 6.16852415e-02, 1.80041340e-02, 1.09019025e-02,
                  1.15828766e-02, 1.92784285e-02, 4.68344140e-02, 6.00093622e-02, 6.22328632e-02,
                  3.01584781e-02, 1.16142685e-02, 7.21909226e-03, 9.35278239e-03, 1.17212204e-02,
                  2.00032389e-02, 1.33589200e-02, 1.74962415e-02, 1.83831759e-02, 7.01531577e-02
              ],
              [
                  8.59104074e-02, 4.30245808e-03, 1.21375282e+00, 2.32711551e-02, 1.59734173e-01,
                  2.37974674e-02, 1.31849758e-02, 6.59604937e-03, 2.32998624e-02, 1.64098166e-02,
                  9.63576783e-03, 8.69636087e-03, 9.20728469e-03, 8.45797077e-03, 9.12537932e-03,
                  1.18642678e-02, 5.13286213e-03, 9.11185249e-03, 7.37426792e-03, 9.80780254e-03,
                  9.83098433e-03, 1.92322078e-01, 7.65308386e-03, 1.27733928e-02, 1.22739385e-02,
                  1.13735037e-02, 7.11709092e-03, 6.08837803e-03, 2.89177112e-03, 8.25605176e-03,
                  1.51642088e-02, 1.42745834e-02, 2.24122113e-02, 1.54137382e-02, 5.87188301e-03
              ],
              [
                  5.56000206e-03, 3.43853228e-03, 7.30645229e-03, 1.49762605e+00, 1.09331251e-01,
                  1.09094725e-02, 1.48540542e-02, 3.87179496e-03, 1.02752759e-02, 2.74681560e-02,
                  1.01570342e-02, 7.53316268e-03, 9.21419134e-03, 8.46992913e-03, 1.65987466e-02,
                  3.85107555e-02, 3.46370485e-03, 8.75279164e-03, 6.41524263e-03, 5.27082797e-03,
                  6.73796551e-03, 7.55357368e-03, 6.00760103e-03, 7.74582636e-03, 5.99845157e-03,
                  5.87544608e-03, 3.40489347e-03, 2.50354742e-03, 1.82212099e-03, 4.43874905e-03,
                  6.93923081e-03, 3.18047162e-03, 7.89062726e-03, 1.08478587e-02, 6.66986402e-04
              ],
              [
                  4.54009228e-04, 2.89836506e-04, 6.40658585e-04, 1.83107967e-02, 1.25870582e+00,
                  1.15991558e-03, 1.49461652e-03, 3.57490265e-04, 7.72640723e-04, 1.98672564e-03,
                  8.02791172e-04, 7.50361554e-04, 8.82299535e-04, 9.42815786e-04, 3.63068052e-03,
                  6.34924088e-03, 3.63659438e-04, 6.68367386e-04, 1.11401997e-03, 6.51026812e-04,
                  5.74382512e-04, 5.14885703e-04, 7.00947824e-04, 6.14718863e-04, 6.35210871e-04,
                  5.55070209e-04, 5.79022963e-04, 2.27667163e-04, 1.39157888e-04, 3.82302672e-04,
                  9.23714781e-04, 3.15940283e-04, 4.70562223e-04, 9.34630856e-04, 5.79749013e-05
              ],
              [
                  4.61778422e-03, 4.22281590e-03, 6.48839764e-03, 6.63565828e-03, 7.52571839e-03,
                  1.31786825e+00, 2.19837491e-02, 3.89438484e-03, 5.89860242e-03, 8.86633367e-03,
                  1.46804340e-02, 1.06786410e-02, 9.68931449e-03, 7.10811367e-03, 1.04674527e-02,
                  9.80871128e-02, 4.22624501e-03, 4.88904072e-02, 5.05381128e-03, 3.76561993e-03,
                  3.73497592e-03, 6.41697156e-03, 4.77325893e-03, 3.92942213e-03, 3.80754751e-03,
                  7.19074218e-03, 3.42120391e-03, 2.57480088e-03, 6.11312493e-03, 3.74879480e-03,
                  5.80130205e-03, 5.79851087e-03, 4.49783409e-03, 7.17753366e-03, 7.23740277e-04
              ],
              [
                  1.43449720e-02, 1.16196931e-02, 5.30993052e-02, 3.93036960e-02, 4.74797667e-02,
                  3.82432414e-02, 1.33285340e+00, 1.39195841e-02, 4.08650611e-02, 4.50025652e-02,
                  4.56012693e-02, 2.35892270e-02, 2.91318488e-02, 3.26690342e-02, 2.69141282e-02,
                  4.23100320e-02, 1.38253145e-02, 2.44977252e-02, 2.33593407e-02, 2.38183882e-02,
                  2.46000375e-02, 2.82200418e-02, 2.03414645e-02, 1.81226451e-02, 2.10034065e-02,
                  3.17629665e-02, 2.52255865e-02, 3.12380576e-02, 1.02023228e-02, 3.94158733e-02,
                  3.62678292e-02, 3.10046927e-02, 2.44316298e-02, 4.66764214e-02, 1.99065971e-03
              ],
              [
                  2.31373144e-02, 1.54013235e-02, 1.96863517e-02, 2.54649233e-02, 2.27681907e-02,
                  2.26478513e-02, 1.85685410e-02, 1.08635781e+00, 6.68211814e-02, 3.50146633e-02,
                  3.72775037e-02, 3.06411007e-02, 1.93870676e-02, 1.50468319e-02, 1.74127296e-02,
                  1.69954782e-02, 3.34827180e-02, 2.70952069e-02, 1.35573683e-02, 1.13313518e-02,
                  9.39297933e-03, 1.31176550e-02, 6.42872168e-02, 9.63684219e-02, 1.02693599e-01,
                  3.52064105e-02, 9.40076870e-03, 5.99368742e-03, 4.82180164e-03, 1.07296205e-02,
                  1.66263783e-02, 8.05263125e-03, 1.23745682e-02, 1.31367347e-02, 1.77236121e-03
              ],
              [
                  6.68543742e-02, 2.35175837e-02, 5.16757294e-02, 1.55349166e-01, 1.08364265e-01,
                  8.28957117e-02, 7.93829188e-02, 3.98089497e-02, 1.33550058e+00, 3.36867365e-01,
                  7.35931498e-02, 4.80297034e-02, 4.96252441e-02, 6.06712064e-02, 5.98264288e-02,
                  6.76683393e-02, 2.13873726e-02, 4.49853867e-02, 2.80008910e-02, 1.23447275e-02,
                  1.20259122e-02, 2.47350805e-02, 2.05437469e-02, 2.17613667e-02, 2.14091767e-02,
                  2.09359899e-02, 1.25976334e-02, 8.23836214e-03, 7.95236934e-03, 1.67074584e-02,
                  2.57109520e-02, 1.27338399e-02, 9.53085074e-02, 2.67695018e-02, 3.74062342e-03
              ],
              [
                  1.36872880e-02, 1.26216850e-02, 3.56704060e-02, 3.09653782e-02, 6.99875875e-02,
                  2.43966756e-02, 3.33901653e-02, 1.35124249e-02, 3.54873757e-02, 1.17830582e+00,
                  2.54294951e-02, 2.25401726e-02, 4.96948039e-02, 5.12720012e-02, 7.43699121e-02,
                  5.10915824e-02, 1.05266568e-02, 3.57458047e-02, 3.26801869e-02, 9.83691541e-03,
                  1.08193865e-02, 1.52331571e-02, 2.19349339e-02, 1.38479647e-02, 1.48299235e-02,
                  1.67546788e-02, 1.09043517e-02, 5.05852718e-03, 5.00594832e-03, 9.34083975e-03,
                  1.16891620e-02, 5.90459071e-03, 1.41551974e-02, 1.28043642e-02, 1.58514568e-03
              ],
              [
                  5.39940698e-03, 8.97608617e-03, 1.20346725e-02, 8.73634081e-03, 8.37431308e-03,
                  1.59402871e-02, 6.22764077e-03, 8.73835690e-03, 1.29866086e-02, 1.41456943e-02,
                  1.15904440e+00, 2.25080140e-02, 1.64852272e-02, 2.32107218e-02, 1.99898157e-02,
                  1.43424974e-02, 7.84537284e-03, 1.11434957e-01, 9.60749970e-03, 3.53043870e-03,
                  3.72279647e-03, 8.33759620e-03, 6.22101176e-03, 4.91933534e-03, 5.25185173e-03,
                  6.68765265e-03, 5.51501140e-03, 2.59135812e-03, 6.87739181e-03, 4.14090611e-03,
                  6.44909621e-03, 4.98887490e-03, 6.39060918e-03, 6.27742772e-03, 9.34394107e-04
              ],
              [
                  2.19888176e-02, 4.73591028e-02, 4.11388435e-02, 3.68385676e-02, 4.58369026e-02,
                  6.72663314e-02, 3.78364017e-02, 4.21465424e-02, 4.71292897e-02, 7.00665570e-02,
                  8.36650527e-02, 1.50715080e+00, 3.15172990e-01, 1.70632375e-01, 2.41486355e-01,
                  1.42498459e-01, 3.48844275e-02, 1.71154790e-01, 6.62963641e-02, 1.63377244e-02,
                  1.60519299e-02, 2.35732035e-02, 3.51078105e-02, 3.53001849e-02, 3.53982072e-02,
                  3.53039878e-02, 2.42896302e-02, 1.04740218e-02, 1.49348418e-02, 1.96029298e-02,
                  2.72999955e-02, 1.39217831e-02, 2.06418411e-02, 2.46553557e-02, 4.69922430e-03
              ],
              [
                  1.51457814e-02, 2.41617790e-02, 1.64443094e-02, 2.54877918e-02, 2.23396296e-02,
                  2.48884971e-02, 1.91723579e-02, 2.43086946e-02, 2.12509482e-02, 2.92460269e-02,
                  3.77836349e-02, 4.63830224e-02, 1.19208474e+00, 4.06858847e-02, 7.84735673e-02,
                  2.79094601e-02, 1.98261069e-02, 3.79592797e-02, 4.16703008e-02, 7.96604257e-03,
                  7.69380653e-03, 1.00865185e-02, 1.67639471e-02, 2.29059367e-02, 1.96571917e-02,
                  1.77202628e-02, 9.75415029e-03, 5.00626737e-03, 5.51997204e-03, 8.76008870e-03,
                  1.45427574e-02, 6.56565513e-03, 1.02838376e-02, 1.15554022e-02, 2.46971785e-03
              ],
              [
                  1.69832372e-02, 2.65280156e-02, 2.80200652e-02, 3.90481733e-02, 3.54464343e-02,
                  3.85367897e-02, 4.34481030e-02, 2.96582766e-02, 4.34666491e-02, 5.35559124e-02,
                  4.73239715e-02, 6.72540993e-02, 2.12502649e-01, 1.56254710e+00, 1.75300256e-01,
                  6.82656415e-02, 5.60346249e-02, 8.82424723e-02, 8.39911250e-02, 2.61407960e-02,
                  2.67117519e-02, 2.52687117e-02, 3.60115640e-02, 3.25809399e-02, 3.65703219e-02,
                  3.97341252e-02, 8.66516239e-02, 2.18118162e-02, 1.43106612e-02, 4.31523615e-02,
                  4.53413563e-02, 2.53290025e-02, 5.45786297e-02, 3.93899704e-02, 4.21165690e-03
              ],
              [
                  1.39504162e-02, 1.51264675e-02, 1.62860285e-02, 1.78430760e-02, 1.80446756e-02,
                  1.97753140e-02, 1.59843519e-02, 1.55246100e-02, 1.53020675e-02, 1.97971521e-02,
                  2.15585059e-02, 2.50163104e-02, 4.05595691e-02, 2.06750163e-02, 1.46387179e+00,
                  2.11927700e-02, 1.34860648e-02, 2.12683457e-02, 1.33650198e-01, 1.27063659e-02,
                  1.22906004e-02, 1.12515190e-02, 6.52803856e-02, 7.22065444e-02, 8.63974222e-02,
                  3.53109806e-02, 1.23494414e-02, 7.06212086e-03, 5.09226445e-03, 1.28447710e-02,
                  3.22877206e-02, 7.77759656e-03, 8.89451317e-03, 1.96482008e-02, 1.87774441e-03
              ],
              [
                  2.00815802e-03, 2.34885481e-03, 3.41847823e-03, 9.88049246e-03, 6.88351029e-03,
                  8.19824909e-03, 6.87010056e-03, 2.81980185e-03, 4.65741930e-03, 6.27691772e-03,
                  6.22250624e-03, 1.52215361e-02, 9.66289361e-03, 7.12432474e-03, 1.22397492e-02,
                  1.05208297e+00, 3.40722488e-03, 9.57787350e-03, 4.80506467e-03, 2.44530132e-03,
                  2.83103965e-03, 4.23036462e-03, 5.10348305e-03, 3.11101047e-03, 4.51680471e-03,
                  3.89069286e-03, 2.83274944e-03, 2.19386544e-03, 2.50460309e-03, 3.45100973e-03,
                  5.64990311e-03, 4.32242973e-03, 4.83985302e-03, 7.55393505e-03, 2.51516952e-03
              ],
              [
                  2.54395688e-02, 4.71677167e-02, 3.80254973e-02, 5.02713131e-02, 3.63549802e-02,
                  4.52814154e-02, 4.98493339e-02, 5.79098639e-02, 5.72024139e-02, 5.34963669e-02,
                  7.70767851e-02, 6.83810782e-02, 4.21083059e-02, 3.24334213e-02, 3.87083294e-02,
                  3.24621065e-02, 1.15277416e+00, 3.41328860e-02, 2.66686301e-02, 1.50758535e-02,
                  2.37097562e-02, 4.21343451e-02, 3.24881273e-02, 2.14261892e-02, 2.35939816e-02,
                  3.29836820e-02, 2.11473600e-02, 1.30782349e-02, 1.74582983e-02, 1.62933086e-02,
                  2.76727878e-02, 3.13836010e-02, 2.65861336e-02, 3.08547340e-02, 4.19934417e-03
              ],
              [
                  7.56980382e-03, 1.15070438e-02, 9.45899531e-03, 1.02654795e-02, 9.22620741e-03,
                  1.06540245e-02, 1.03994750e-02, 1.26579514e-02, 1.06862138e-02, 1.02685858e-02,
                  1.44736455e-02, 1.25720977e-02, 1.05110125e-02, 8.42384004e-03, 9.54416792e-03,
                  8.83224084e-03, 2.46439945e-02, 1.05904294e+00, 1.07743621e-02, 7.79916872e-03,
                  9.57844509e-03, 1.21105624e-02, 1.55538529e-02, 9.67950191e-03, 9.98971914e-03,
                  2.02889107e-02, 1.63896698e-02, 1.06419019e-02, 3.82922798e-02, 9.90541562e-03,
                  2.36302995e-02, 1.62256718e-02, 1.22384539e-02, 1.57727659e-02, 1.76567113e-03
              ],
              [
                  9.56807445e-03, 6.75821379e-03, 1.50911446e-02, 1.40190336e-02, 1.62680961e-02,
                  1.46734855e-02, 1.18790271e-02, 8.91873852e-03, 1.32212733e-02, 1.45376362e-02,
                  1.40908469e-02, 1.40732761e-02, 1.29480370e-02, 1.06353509e-02, 1.43226029e-02,
                  1.31574117e-02, 1.24652380e-02, 1.45144974e-02, 1.01661032e+00, 7.54785247e-03,
                  7.17585783e-03, 1.09096609e-02, 2.14261487e-02, 7.92431938e-03, 1.08296517e-02,
                  1.37361305e-02, 7.52727437e-03, 6.49369483e-03, 4.30697746e-03, 9.39747440e-03,
                  8.45256781e-03, 5.49442303e-03, 8.07510998e-03, 1.08825316e-02, 8.60043056e-04
              ],
              [
                  5.64340856e-02, 3.44647303e-02, 1.09812399e-01, 1.01205744e-01, 1.16212919e-01,
                  1.01932109e-01, 8.83264770e-02, 7.72157731e-02, 8.60977866e-02, 9.44515839e-02,
                  7.36639761e-02, 8.91010605e-02, 9.30417553e-02, 8.04969841e-02, 1.03648202e-01,
                  8.00002682e-02, 4.20671971e-02, 7.93045253e-02, 6.18777934e-02, 1.03750362e+00,
                  2.57580178e-02, 7.84492664e-02, 4.61194901e-02, 4.75656102e-02, 4.92119997e-02,
                  4.40308087e-02, 2.77249022e-02, 1.66211765e-02, 1.34970542e-02, 2.87592471e-02,
                  3.99801409e-02, 2.33762553e-02, 4.82872044e-02, 3.73487239e-02, 4.55874589e-03
              ],
              [
                  3.05972458e-02, 1.57895589e-02, 5.49286493e-02, 5.47496459e-02, 6.88802922e-02,
                  4.41734771e-02, 3.76157269e-02, 2.74154049e-02, 4.17672318e-02, 4.45182048e-02,
                  3.67729366e-02, 3.82980869e-02, 3.98077121e-02, 3.40158402e-02, 4.65382721e-02,
                  4.42268953e-02, 1.79007368e-02, 5.20620233e-02, 2.83381065e-02, 1.29817408e-02,
                  1.01393084e+00, 4.10803642e-02, 2.61225911e-02, 2.14400797e-02, 2.32527359e-02,
                  2.13128329e-02, 1.76773282e-02, 1.21196751e-02, 8.81056392e-03, 1.70353108e-02,
                  1.82132597e-02, 1.24636451e-02, 2.36507861e-02, 2.20276486e-02, 2.44731958e-03
              ],
              [
                  5.80566175e-03, 7.46371110e-03, 1.17709517e-02, 1.35739493e-02, 1.43672035e-02,
                  1.25664280e-02, 1.44175071e-02, 8.02610308e-03, 1.24187325e-02, 1.39815226e-02,
                  1.31879754e-02, 1.30404287e-02, 1.46624737e-02, 1.28142149e-02, 1.25286115e-02,
                  1.08875775e-02, 8.90909129e-03, 1.34151587e-02, 1.17553088e-02, 1.24395839e-02,
                  1.15459829e-02, 1.01692507e+00, 1.48969727e-02, 1.38333511e-02, 2.59624540e-02,
                  3.04076583e-02, 1.62646213e-02, 1.85031508e-02, 6.99736574e-03, 2.00775388e-02,
                  1.74972363e-02, 1.22602536e-02, 1.46697538e-02, 1.92436973e-02, 9.80507247e-04
              ],
              [
                  2.70620989e-02, 3.04060427e-02, 4.92921218e-02, 4.92443289e-02, 5.09919078e-02,
                  5.11963505e-02, 4.08544221e-02, 6.52433097e-02, 4.20103227e-02, 4.24835062e-02,
                  5.88834341e-02, 4.37954351e-02, 3.62801112e-02, 2.85150406e-02, 3.71521711e-02,
                  3.82977724e-02, 3.33065288e-02, 4.25103258e-02, 3.05113468e-02, 2.98897246e-02,
                  2.11281795e-02, 2.64763105e-02, 1.06396457e+00, 4.45107647e-02, 3.21920758e-02,
                  7.66735642e-02, 1.82073756e-02, 1.26985246e-02, 7.39365607e-03, 1.45800689e-02,
                  2.14672909e-02, 1.70789811e-02, 1.86079690e-02, 2.10813256e-02, 3.38310080e-03
              ],
              [
                  6.37972134e-03, 9.92960110e-03, 1.10580808e-02, 1.20833336e-02, 1.25946711e-02,
                  1.47124539e-02, 8.94754141e-03, 1.15242117e-02, 8.77995453e-03, 9.58411129e-03,
                  1.65127191e-02, 1.39719842e-02, 1.01807663e-02, 7.73855778e-03, 9.42597653e-03,
                  8.01648226e-03, 6.99697025e-03, 9.84634948e-03, 5.39682886e-03, 7.28332142e-03,
                  5.85552922e-03, 5.69274455e-03, 7.23253327e-03, 1.17757258e+00, 7.09334186e-03,
                  9.63913699e-03, 3.20447856e-03, 2.36170535e-03, 3.57750893e-03, 3.52660255e-03,
                  3.79611659e-03, 2.65843983e-03, 3.17486000e-03, 4.03068514e-03, 9.04808833e-04
              ],
              [
                  2.35764851e-03, 3.06067103e-03, 4.29339345e-03, 5.18016854e-03, 6.16191404e-03,
                  4.93618512e-03, 5.50600333e-03, 3.33914636e-03, 4.75191502e-03, 4.95679024e-03,
                  4.48490618e-03, 4.27769432e-03, 5.40177476e-03, 4.95473477e-03, 5.04238229e-03,
                  3.91929978e-03, 2.61382140e-03, 4.06893303e-03, 4.35896193e-03, 4.65808962e-03,
                  3.29857876e-03, 3.57197673e-03, 5.24159547e-03, 1.10005118e-02, 1.03843044e+00,
                  1.88850160e-02, 6.10928653e-03, 5.39060648e-03, 1.80293984e-03, 5.95182997e-03,
                  6.19645964e-03, 3.87046180e-03, 3.14735945e-03, 6.57130689e-03, 3.61253467e-04
              ],
              [
                  1.13355310e-02, 1.19284208e-02, 2.14413891e-02, 1.89506249e-02, 2.12435122e-02,
                  2.28620636e-02, 2.34870410e-02, 2.02614812e-02, 1.80443524e-02, 1.94144552e-02,
                  2.31120888e-02, 1.95540863e-02, 1.79946604e-02, 1.47940682e-02, 1.88801756e-02,
                  1.62670926e-02, 1.21450174e-02, 2.25332937e-02, 2.18912033e-02, 2.98446322e-02,
                  1.89936944e-02, 1.80769829e-02, 5.40446743e-02, 1.50509462e-01, 1.14557070e-01,
                  1.12326771e+00, 1.13126636e-02, 9.65349379e-03, 4.86025661e-03, 1.20568002e-02,
                  1.24046489e-02, 7.65102162e-03, 1.03218674e-02, 1.45471668e-02, 1.31827712e-03
              ],
              [
                  1.38601642e-02, 1.54313724e-02, 2.35670876e-02, 2.72508523e-02, 2.83308037e-02,
                  2.50555956e-02, 3.45210313e-02, 1.86056510e-02, 2.73835318e-02, 2.60369324e-02,
                  2.46176373e-02, 2.61976199e-02, 2.73662724e-02, 2.72058631e-02, 2.57125340e-02,
                  2.67809506e-02, 1.93501660e-02, 3.18451965e-02, 3.26701895e-02, 3.30661974e-02,
                  3.49926079e-02, 3.13487599e-02, 3.43143264e-02, 3.95056567e-02, 4.26042007e-02,
                  4.42134939e-02, 1.15256284e+00, 5.18607685e-02, 1.62845526e-02, 4.27770045e-02,
                  3.86698350e-02, 2.02680785e-02, 2.85118143e-02, 4.07487850e-02, 2.72295701e-03
              ],
              [
                  4.42502295e-02, 4.86653385e-02, 5.92428073e-02, 7.29577476e-02, 6.50755004e-02,
                  6.01092066e-02, 6.49047026e-02, 5.33307469e-02, 6.01293058e-02, 5.95382410e-02,
                  6.37941699e-02, 6.30782551e-02, 6.17753599e-02, 5.32984515e-02, 6.05833332e-02,
                  6.73933551e-02, 5.35425120e-02, 6.51371029e-02, 5.30684265e-02, 5.93622713e-02,
                  6.54665022e-02, 6.14859247e-02, 8.31633872e-02, 7.09335371e-02, 7.15713059e-02,
                  7.44968820e-02, 4.91811038e-02, 1.29754106e+00, 1.21249998e-01, 7.05823205e-02,
                  5.40614996e-02, 3.25896342e-02, 5.48323627e-02, 8.37374941e-02, 1.25806713e-02
              ],
              [
                  1.28413406e-02, 1.39333018e-02, 2.15498885e-02, 2.33218477e-02, 2.53766326e-02,
                  2.26878875e-02, 2.84970461e-02, 1.53039670e-02, 2.09390043e-02, 2.31321332e-02,
                  2.02257092e-02, 2.13214479e-02, 2.25439895e-02, 1.97341148e-02, 2.36021256e-02,
                  2.16006899e-02, 1.49701685e-02, 2.72477889e-02, 3.57696970e-02, 3.12336686e-02,
                  5.52519913e-02, 4.53342477e-02, 2.29911143e-02, 3.09402931e-02, 2.67339797e-02,
                  3.78202404e-02, 2.95089682e-02, 4.40491726e-02, 1.03875310e+00, 3.97132789e-02,
                  2.60339493e-02, 2.81371842e-02, 5.00665698e-02, 4.34444563e-02, 1.82349953e-03
              ],
              [
                  5.04032469e-02, 6.67758624e-02, 1.06665178e-01, 1.00842646e-01, 9.92844217e-02,
                  9.35033765e-02, 1.41141787e-01, 7.13927188e-02, 1.46082208e-01, 1.20809287e-01,
                  9.92298031e-02, 1.00105179e-01, 1.19899213e-01, 1.21285407e-01, 1.30304649e-01,
                  8.99574698e-02, 7.86765771e-02, 1.25611399e-01, 1.06621469e-01, 9.64595027e-02,
                  1.02412086e-01, 1.01033492e-01, 9.76659277e-02, 8.93230748e-02, 1.44118035e-01,
                  1.27458337e-01, 1.17377737e-01, 1.77164961e-01, 7.70962949e-02, 1.20354829e+00,
                  1.35616298e-01, 6.61990661e-02, 1.15853042e-01, 1.40107869e-01, 1.09231534e-02
              ],
              [
                  3.38304868e-03, 4.59135053e-03, 5.24333426e-03, 4.39087849e-03, 4.33709008e-03,
                  7.24149680e-03, 7.07355169e-03, 4.39184878e-03, 6.23164369e-03, 5.66311280e-03,
                  5.96680623e-03, 6.87641074e-03, 4.76426555e-03, 4.06495006e-03, 4.96721491e-03,
                  5.03085697e-03, 6.99469731e-03, 4.95669518e-03, 5.04208665e-03, 3.19340104e-03,
                  4.38961956e-03, 6.33457612e-03, 6.17518204e-03, 8.49049671e-03, 1.19999803e-02,
                  6.23484099e-03, 5.05412942e-03, 3.80407042e-03, 5.39035763e-03, 5.26432060e-03,
                  1.00971013e+00, 6.01220961e-03, 6.60600815e-03, 1.16255855e-02, 4.70471583e-04
              ],
              [
                  1.47034277e-03, 1.04710265e-03, 1.74951543e-03, 1.69157554e-03, 1.82423184e-03,
                  1.59732115e-03, 1.83086693e-03, 1.30082028e-03, 2.28492301e-03, 2.00843485e-03,
                  1.68534287e-03, 1.82336709e-03, 2.14555966e-03, 2.00028358e-03, 2.30347325e-03,
                  1.48071508e-03, 1.54053502e-03, 1.69719105e-03, 1.75396122e-03, 1.52704033e-03,
                  1.73987236e-03, 1.59910694e-03, 2.05232149e-03, 1.40484477e-03, 3.15320031e-03,
                  2.33817701e-03, 2.41977858e-03, 2.39040431e-03, 8.71499741e-04, 3.55384287e-03,
                  5.58643501e-03, 1.01449358e+00, 2.36535433e-03, 2.69093714e-03, 1.54976796e-04
              ],
              [
                  1.91127620e-03, 8.00153098e-04, 1.59766062e-03, 1.34816594e-03, 2.14826922e-03,
                  1.47573491e-03, 1.24026229e-03, 8.29689234e-04, 1.30581698e-03, 1.24792659e-03,
                  1.35142092e-03, 1.24499500e-03, 1.63588060e-03, 1.17002416e-03, 1.38299296e-03,
                  1.20482436e-03, 8.83400805e-04, 1.16048553e-03, 1.10740698e-03, 9.41794871e-04,
                  8.04029386e-04, 1.69082790e-03, 1.18650982e-03, 9.36250702e-04, 1.06603659e-03,
                  1.15249004e-03, 1.17274978e-03, 1.08484712e-03, 3.86558927e-04, 1.13384649e-03,
                  5.77544066e-03, 2.00958747e-03, 1.03664513e+00, 1.94416119e-03, 1.16594626e-04
              ],
              [
                  9.66776380e-03, 1.33031724e-02, 1.79380616e-02, 1.84167668e-02, 2.14240112e-02,
                  1.77524284e-02, 2.82927184e-02, 1.33159916e-02, 2.11170400e-02, 1.91626825e-02,
                  1.80118751e-02, 1.87173888e-02, 1.81709573e-02, 1.58108920e-02, 1.88902753e-02,
                  1.57791876e-02, 1.43644341e-02, 1.91399723e-02, 1.75049088e-02, 1.53220128e-02,
                  1.71381492e-02, 2.47493980e-02, 2.25425444e-02, 1.68463003e-02, 2.02095537e-02,
                  2.57908784e-02, 3.10208686e-02, 2.27557377e-02, 1.48453923e-02, 3.79091216e-02,
                  2.79637185e-02, 1.89433502e-02, 2.44079488e-02, 1.09471687e+00, 3.60946758e-03
              ],
              [
                  4.20195217e-05, 5.17537231e-05, 7.25789601e-05, 1.60044070e-04, 8.91216616e-05,
                  8.11456494e-05, 8.47801249e-05, 5.66028325e-05, 6.82793313e-05, 7.35491413e-05,
                  6.82386433e-05, 6.58147240e-05, 8.36941618e-05, 6.09342495e-05, 1.58950870e-04,
                  5.80088732e-05, 3.90206393e-05, 1.19189352e-04, 9.30829306e-05, 4.24544077e-05,
                  7.45454608e-05, 9.73732987e-05, 1.54469031e-04, 7.42679567e-05, 6.41988043e-05,
                  6.58564541e-05, 7.55172317e-05, 1.12621055e-04, 2.55330081e-04, 1.07381403e-04,
                  1.04375434e-04, 6.63176702e-05, 9.36354609e-05, 1.61794229e-04, 1.00012229e+00
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def leontief_matrix_2006():
    """
    Real Name: b'leontief matrix 2006'
    Original Eqn: b'1.1748880581441614,0.00440977486244425,0.36779943703518725,0.1021340257474912,0.14495696973408997,0.2074523633582422,0.03528828003819645,0.00790503803173066,0.022132219145729482,0.03209473091405697,0.01071003214351274,0.008632207121052808,0.008908364981525684,0.007990400411942551,0.009821986648745704,0.03869327083904316,0.005161748036856076,0.01952436783619652,0.006927970526641596,0.00875656775446217,0.008348079868982464,0.10732710833758578,0.008414991876985297,0.010013145946505415,0.009213757120219428,0.016139357128554098,0.005150664361200483,0.004582138195399975,0.003562903563675242,0.006974386193601388,0.0110830511146815,0.010761148472996833,0.013273757398370827,0.012686871379068654,0.031087544655199605;0.024113849396794198,1.1017207746499236,0.026856669125062776,0.03572380476059438,0.030821805092024132,0.03491092136612928,0.0309271578508407,0.5982057326375295,0.09811262548876483,0.05089501011143965,0.12861654466462633,0.11695626075997596,0.042578815904669734,0.029998413746413877,0.03632136347965794,0.03445871566522815,0.16331882073688236,0.062067967323207233,0.01834008096775689,0.011661971409426137,0.011651908113395028,0.01953394478546395,0.050908565205836975,0.066747609629795,0.07212765680310197,0.032717924957146684,0.011622572506036401,0.007174699716471844,0.009403008904464823,0.01205681887357046,0.020030927452034854,0.013105322099232672,0.018311696606820714,0.018632258969717565,0.07063642427269247;0.09205439108306872,0.004496496176345527,1.2227653890185028,0.026715134077808907,0.17253131623862902,0.025967526219725645,0.014306200785224679,0.0074391969022782395,0.02526978778918182,0.018283482207945723,0.01079288649538778,0.009776958450645119,0.010029089706760317,0.00916330642468433,0.009845074910563984,0.013595643674552536,0.005598169079077234,0.00994285725493702,0.007369946840305858,0.010109456319588733,0.0099391933311482,0.19574094651526666,0.00808218275091836,0.014124466382778493,0.01344430344229777,0.011721051232950362,0.006978911819458727,0.0061119863490347115,0.0029926238558426457,0.008562878390234032,0.01534015766340173,0.015490470848216645,0.02248514070640825,0.016497624377360517,0.006679178805448634;0.005785518144816479,0.003655875299018513,0.00793622070720462,1.5422379420840306,0.1204290158668675,0.01178854847345851,0.01632356641245712,0.0045383992778144176,0.01121793218884337,0.030759745612335434,0.011391301095698263,0.008760282113971986,0.010060191243502723,0.009163309608105755,0.01687527078418497,0.043000421987368934,0.0039685821291553566,0.009595085567571347,0.006714149224119247,0.005747148605342154,0.007054023879551027,0.008016805938745587,0.006541658560645793,0.009074146032382881,0.00689951058883552,0.006541456404343184,0.0035102480284817956,0.002622571460854373,0.0020038732954477316,0.004832813063326739,0.00738541056859828,0.003516960691235039,0.008594298839978705,0.011108758757344109,0.0007317061643801402;0.0005269810744970265,0.00031307526925971257,0.0007306764724474102,0.022555799167330286,1.2752549895675618,0.0013982273641737286,0.001837281331576407,0.00042543506057292287,0.0008952365953732596,0.002291804143306666,0.000920910729530191,0.000849550702650773,0.000987741749141738,0.0010887232248092103,0.0040374365563505404,0.007725622677686207,0.00041024843265513925,0.0007627838174351028,0.0011418885308550944,0.0007007997891646275,0.0006195976016882923,0.0005839298705196923,0.0007675074253417289,0.0007025642222581491,0.0007255655981002752,0.0006507024519224857,0.0005959834708222524,0.000246886111142427,0.00015847387190913675,0.00042220856869386016,0.0011461308548520704,0.00035786098731283505,0.0005428199148775441,0.001042672613405567,6.3812022581622e-05;0.004757245502722079,0.004300290547901151,0.0069062116743370755,0.0072540597801345605,0.008158157041280496,1.3428280394467844,0.02366290839219294,0.00449221298338688,0.00624072190532792,0.009541291364615272,0.016233938917890614,0.011993391731504908,0.010427487365887158,0.007587958854085979,0.010879986517848753,0.10537173353807903,0.0044553862267209315,0.04928963302850576,0.005158932582734383,0.0038229553749957825,0.0037709776299329903,0.006488077953836826,0.00497565588303697,0.004251731046517416,0.0040289318848899785,0.007197602464574032,0.003414503447103007,0.002543627450468241,0.006327214169366221,0.0038651941522649088,0.0061119341614019026,0.006201292155278104,0.004808832201777608,0.007398378668772083,0.0007488937358951589;0.014422586016745306,0.011308931786017358,0.0530216270587688,0.04013791830994409,0.047895069382651485,0.03948113312219874,1.340992602992618,0.01510495099663091,0.04040353762045241,0.04563576975117794,0.04638197316958667,0.0236750432861278,0.028581069253181303,0.031765758277109965,0.026461559937274642,0.04298568245126549,0.01403432774679313,0.02473925677447515,0.02292858990406342,0.0234590446486619,0.023638144512384034,0.02804840830009338,0.020537850314026242,0.01834685292835817,0.02151919582079869,0.032001947448434556,0.02374373371036867,0.029654030733008103,0.009888282226922382,0.03875589121105475,0.03573033426253668,0.03136054468030609,0.024437951181790277,0.04535004128904934,0.002086664252114124;0.025536938856665144,0.015567185775609147,0.02193142980080192,0.02924968663273795,0.025675809089103226,0.02556732345545635,0.021132435800295432,1.1419270323493103,0.08112542487071732,0.04123720471332694,0.042169821703179115,0.03479832875511405,0.02134199339341446,0.017016353762676663,0.01939824160757714,0.020131268923041956,0.040339547443127746,0.0298338364027347,0.014857088542102657,0.012847464521577489,0.010008286274274053,0.014494754246055033,0.07146068415934866,0.106559653683959,0.11818983173843807,0.03869213070202832,0.010115276084077359,0.006389816833111478,0.005312211279238777,0.01160601013430401,0.01734311165791729,0.009083921799725208,0.014105583790989805,0.01451700453517648,0.0020377903128535896;0.06684048854916938,0.02327088618170559,0.05275671567824086,0.1623131267934883,0.11351671895427017,0.08810915602973649,0.08255639249897097,0.04457302325232504,1.3493766134254197,0.3555219267236818,0.07863593275602554,0.04989431520995602,0.051389681292120175,0.06434938035727114,0.06147564100615937,0.07373006330599004,0.022728559039356215,0.04759590175978091,0.028009721544482287,0.012775422109666479,0.01224512453467949,0.025527757671163418,0.02183518964733186,0.023972785686205738,0.023200215484266522,0.022284238539521925,0.012760015351670744,0.008218043300212922,0.008469314027554261,0.01729340507343725,0.026628462275347514,0.013532806087616403,0.09802621704418094,0.0279311575820021,0.004109271552364751;0.014083788816151098,0.012453970684419665,0.03678045378416048,0.03288986375499491,0.07407344392924584,0.02522719428832357,0.0349762750018071,0.015608347415678944,0.036691660457294994,1.1901363820595008,0.02749400021867476,0.02381092049276371,0.05016832877020712,0.0530530095615589,0.07468440440210429,0.053852545265312184,0.011162442020348579,0.0370255558402673,0.03192683107064013,0.010129843840379673,0.010710160598997617,0.015709368690280685,0.022640085698044436,0.015055077038900624,0.015993084006068685,0.01751240635033679,0.010882290894156823,0.005028839769115679,0.005150851427844987,0.009618300060772076,0.012049617671345665,0.0064406599809814415,0.014717629398371427,0.013428930292225302,0.001690327990267487;0.0053793929716497175,0.008733741098004897,0.011838181244272529,0.00894882480104329,0.008640205956107157,0.016572722063038683,0.006516769312490195,0.00934908212007473,0.01322696568484483,0.014439303490664048,1.1647978611715262,0.022865962747692606,0.016762507331973656,0.02339400166277403,0.019804188928633247,0.015270260320555706,0.007999880819559263,0.11612134487755862,0.009468928431599147,0.003586466792465174,0.003748459159133037,0.008393184684446177,0.0064255215772832,0.005205457729020374,0.0055421947489858155,0.0069768515679602214,0.0054835742437065755,0.0025552060520308987,0.007016329935693901,0.004252286543999586,0.0067404041788071455,0.0051242072833623305,0.006480740920690583,0.006377258170973683,0.0009610460220446492;0.023040975693903783,0.04680098426023704,0.04152866438565356,0.039384690233899136,0.04851902303498992,0.07055554415058479,0.04073343860518096,0.04612536919802491,0.049842650572527604,0.07415501762627255,0.08988088975246955,1.5284972311039817,0.3237746534999993,0.1809053279703203,0.2453090562362061,0.15146475541134455,0.036877025343942806,0.1784383600590379,0.06552550878435139,0.016885772247025147,0.01631429157049487,0.024497330589021364,0.036773698273638314,0.03903061010301439,0.03831065234242735,0.03770907221934601,0.02470542555765301,0.010585212407249587,0.015432447590282247,0.02058771738567961,0.028557361603725573,0.01507539404528961,0.022112966448061763,0.02595419550557083,0.004938950035696581;0.016230199405988566,0.02563728419866079,0.017625475269978867,0.029235880864297424,0.025315320745562142,0.028417535664503998,0.02149141609253212,0.02768164138093307,0.023899805516331262,0.03310023165279258,0.04325667799737719,0.054292077946495064,1.213057149633855,0.04600343966991265,0.08604364041563865,0.03234170121103075,0.021586116386945766,0.04194490521032587,0.04241832233267153,0.00841391050989995,0.008041250047723289,0.010994177932454436,0.01834166446871226,0.026712730970939343,0.02311171314186522,0.020190641995858644,0.010262359850431247,0.005249761071107989,0.005900048398457858,0.009406223520415554,0.015579134426505173,0.007305791237532008,0.011917675727908429,0.012508406858924528,0.00280471578223575;0.01909218409441591,0.029626796515833595,0.030944533636033538,0.04443956891649825,0.040063757713131296,0.04407698171209139,0.04825807435082917,0.03577928070237653,0.04844769779349502,0.060317126294299035,0.0544994645351812,0.07585794455144461,0.2375301232521081,1.625213686705589,0.1911849572221191,0.08180649207349248,0.06504450460954463,0.10107713066122857,0.08819318185564184,0.028475998956349308,0.02869205465642367,0.028511108292662023,0.04064405141243971,0.03767892530054233,0.042049990916059946,0.04496174980323541,0.0927023783099212,0.023257773362871076,0.015914799107668444,0.048482929321829224,0.05080461178879807,0.030476827377714812,0.060267284519562224,0.0444909841916682,0.0051530435153491;0.01496098434747684,0.014859839125946326,0.016972012283008556,0.018871021391499366,0.019029047788895807,0.021351227057361564,0.017477282057932354,0.017334047234711204,0.016195841658862377,0.02116200038584375,0.02378697739556598,0.027713787472205376,0.04260903187205763,0.02159587377559589,1.472013791147326,0.023640236632944463,0.01451456785902166,0.02290123820653016,0.12785764858143106,0.013240283085474655,0.012456015935827866,0.011894742772374872,0.06847989088840854,0.07923199271457901,0.09167120433807739,0.03953895483977883,0.012052315262489071,0.007085170142297243,0.005321429434896257,0.013145574019103028,0.03252787285786375,0.008521112047988355,0.009285353020648967,0.02036658833761554,0.0020558192971788;0.002158925264901339,0.0025092009116401345,0.0036420328263811782,0.009630415493093125,0.006897080222389906,0.008231351810295048,0.008137722774861331,0.0031803657920416216,0.004763235893297588,0.006832247483196656,0.006913261002455948,0.01739888306560122,0.010158305470372178,0.007355922141653194,0.012272266314806891,1.0526332590670247,0.003451346061254143,0.009760496617261284,0.004756312695384256,0.002477218568986084,0.002783154696291498,0.004315552662641363,0.004915908362945895,0.003299053924966614,0.004513214083628842,0.004106747810808949,0.0027567470694620233,0.0021719905119457826,0.0025812127912030634,0.0034555225821855506,0.005804189261322966,0.004858877305149137,0.004969483860175253,0.007664459434587734,0.002191678520053668;0.025434816269028455,0.044356712659161225,0.03733733407419484,0.0496949890701747,0.03637183209743456,0.0449901764404718,0.05020394265649362,0.06874675249603718,0.05685148502074381,0.0533938909245169,0.07697133852881392,0.06698004782397708,0.04082603985817297,0.03172100990771778,0.03754135777530378,0.03312531832860632,1.1654998850922427,0.03429484824973047,0.026302723281470913,0.014974423380267233,0.022666319604229403,0.04118217661298488,0.03299425287073894,0.022735445291920606,0.02557491436484897,0.034821502437452,0.020394393952615074,0.012285188281530949,0.016652678560541954,0.015971347916835923,0.027119899131538134,0.031031248109239896,0.026394574825164385,0.03061100558801186,0.004209947621504997;0.007534636466202396,0.01113378746629883,0.009353807272839005,0.010210892941646843,0.00914227314857703,0.010776987895625444,0.010582626001157435,0.015391920762203049,0.010856571175833196,0.010396353978078119,0.014524512865008218,0.012447473210443994,0.010282956036544163,0.008211605507787737,0.009452325996381943,0.009095615226258139,0.024235911380760353,1.0605947862003506,0.011026839718547905,0.007901272501621943,0.009415051944445233,0.012092450113630788,0.015476841606344768,0.010506632463360715,0.01048394177944208,0.020696643452487746,0.01593815274905239,0.0101197379448731,0.03779674808163909,0.009780478268052619,0.02361567740067097,0.015990452442959865,0.012668614621465955,0.01555629763341696,0.001799321874583436;0.00960895486173888,0.006383722872771528,0.014898726075987358,0.013626003925830299,0.015829020992666372,0.014513666037942768,0.012044837452525511,0.009429265809496268,0.012977369103997655,0.014438315106987872,0.01393087287559911,0.013831986789056701,0.012604970037757884,0.010272509277359414,0.014042558299083617,0.013190360849744499,0.012503272363134865,0.01457334120475939,1.016561672301263,0.0075379687948603944,0.007108614984040813,0.01089396627075205,0.020905563647363797,0.008029297701573165,0.011023915129686623,0.0141476143991788,0.007339788920662732,0.0063287636093907595,0.004323296590881899,0.009271022677771665,0.00854517359084303,0.005753040972700198,0.008177394466170263,0.010945217660699339,0.0009137602117733246;0.05774536373984374,0.0332136457377969,0.10904445782279257,0.0980057570359509,0.1120576865833439,0.10275553549370532,0.0892147225522531,0.09416855666257623,0.08854333846546478,0.0960859921790022,0.07580401474067756,0.0903188068723943,0.0926234422391345,0.07977584802061956,0.1026366115130374,0.08266347290000955,0.04483711234876779,0.08071005122881707,0.060266479621885534,1.0383419618509413,0.025510666605241056,0.07782639012435968,0.04803465734522926,0.050274767464846035,0.05237081492521699,0.04628753312538932,0.02745939092515122,0.016168860889610857,0.013845559897895302,0.029010294596240882,0.039950832920704206,0.024290375677269216,0.04827428264675999,0.03761363516898301,0.004970560681902694;0.030240283806569807,0.014749568981569634,0.05391573738465544,0.0527889244130228,0.06520525051816103,0.04371871777042415,0.03780057362017758,0.028795230068323338,0.0415523313569963,0.044361583363475926,0.036611443179725936,0.03772268625485112,0.03927727886083449,0.033440010610863005,0.04578559584244095,0.04520512945413038,0.017985565636976106,0.051875353168116485,0.02708777610830192,0.012830465595491962,1.0135950582464646,0.040670781225614405,0.02593328669968515,0.02174617709458516,0.023435591138547113,0.02161604247957127,0.01708319977581726,0.011633796252330707,0.008810515382138728,0.0166392644868548,0.018099647049212575,0.012701057243540419,0.02390244041307022,0.022059698878503425,0.002716258031217486;0.005897114945255244,0.0074104394530279775,0.011891540894943166,0.01353909023509722,0.014477827161539721,0.012754005652165702,0.014654277482824364,0.00880268243147128,0.01252617817383802,0.014154152822523264,0.013532078740555564,0.01331014642763131,0.0147061174137504,0.01272185553552238,0.012484917379768803,0.011244174983012348,0.008766934244503614,0.013790896384632354,0.011484838508206046,0.01245540439123645,0.011337239893083233,1.0169945049750624,0.014731135954642035,0.013764202258487557,0.025592195040646616,0.03024449136814207,0.01563363650833789,0.017893802778853423,0.0067760681112348,0.019936952860782443,0.01731877339941917,0.012865805799554127,0.014871862299342356,0.019527426126270373,0.0010260511779570825;0.027695997981985167,0.02932602355117135,0.04927022025597065,0.050580425279398614,0.05084298372221307,0.05220487036319971,0.04157685833217762,0.07501205421558853,0.043852989412235054,0.043936630701662205,0.06069653933691249,0.044397553759999875,0.03671265526989666,0.02876194184551597,0.03742345523624195,0.04120612176394758,0.03603474332471178,0.044104906082413284,0.031248507670176347,0.03042663766273544,0.02109771887357857,0.02676911320139469,1.0646118281584283,0.03958813338685261,0.03331898020753146,0.07806874567133174,0.018042777750253897,0.012462862269049678,0.00755004101874423,0.014583563901734759,0.02134492901380099,0.017221591957144115,0.01893547461317699,0.02132670873551966,0.0037568543808491187;0.006115104144209846,0.009581474175223162,0.011314257326081689,0.0120780495750837,0.01220417524009046,0.014760310138285455,0.008837679388503118,0.011021138443232749,0.008828857500176509,0.009610308461819612,0.01589570806720621,0.013799083254605745,0.009864046721983941,0.007512522787362403,0.009300082886758654,0.008488151923235814,0.006786520878383007,0.009599521462714169,0.005453150263746125,0.007452020880297423,0.00590459787918075,0.005715171480064234,0.007446903152348141,1.1847077029582538,0.0071765254667749655,0.00956896838680703,0.003148664844896097,0.002261270141230185,0.0038052432102397083,0.0035157583487927537,0.0036849524408105187,0.002631925017147283,0.003193776853032807,0.0040254113862655035,0.0009361249635564907;0.0024440207841570183,0.002903749294050741,0.004373699766268195,0.005209726614368907,0.006197168936284295,0.005105570178560042,0.00567610216758962,0.0035193428325312917,0.004750473494456437,0.0050258723228352046,0.004616111382590126,0.004273130943037139,0.005460810784477495,0.004979087993778627,0.005065397220472456,0.0041607232199709,0.0026625904069515417,0.004184328441273053,0.004418261881318122,0.004769303069689757,0.0033246152125367737,0.003650292788813769,0.005371608988326359,0.010865655343307053,1.0359823620774082,0.018211578057939954,0.0060093517714716865,0.005259485442050477,0.0017710756249513667,0.006014960099558861,0.0061986234413996125,0.0041936833601469055,0.0032032707198577106,0.006760495994436633,0.000379974271229329;0.011616628405218985,0.011616470654743038,0.02173763933297253,0.01908580845259467,0.02124719110983832,0.023482938931077446,0.024608647658511475,0.022262048593768985,0.018416796157412946,0.01982702265077546,0.02346954150491101,0.019765270775131516,0.0180667745175016,0.014829238465333364,0.0189845690894787,0.016848425864621337,0.012698869245305097,0.02374692292852922,0.023118863649602618,0.03037722551303948,0.019030229912066574,0.018127345832455656,0.054049179629354065,0.15580781582935324,0.11463202447728908,1.1242789714301384,0.01104058533063693,0.009290492489167603,0.004977200031935725,0.01212453783980186,0.01228618777469177,0.007864051498897413,0.010461036242455838,0.014835027876890417,0.0014176664562435303;0.01432053344743412,0.014735800262247047,0.023605753577506727,0.0275159648985198,0.027936261611652777,0.02555846918286252,0.03546280275357981,0.020492014526580424,0.027399272480288516,0.0261441245440961,0.024921929828563807,0.026793180704633466,0.027067654933364032,0.027133078203374413,0.02550305842516996,0.02892699048925015,0.01999701308194123,0.031957655137411,0.032630434689909664,0.03323786007425643,0.03462952094805668,0.03150478420962823,0.03487498508153221,0.04113227139967392,0.042579089733831975,0.04418152412153116,1.148040938679031,0.05043441252305961,0.015857990013204232,0.04249325778298442,0.03870215897348649,0.020880946284165217,0.02864287953558088,0.04078748552845121,0.0029350851573821768;0.04525991173574994,0.050048065845678495,0.06119278846499529,0.07732568838614631,0.06847944697521705,0.06341483667524471,0.06937804340482003,0.06109595146829168,0.06272155617720045,0.06244366295146321,0.0681891693550965,0.06599973610238064,0.06362001953505719,0.05508404841103333,0.06292655211002562,0.07118725738860683,0.057038042868856234,0.06813595706944028,0.05378043346529603,0.060593334705677716,0.06631332847048013,0.06335670824345956,0.08750100575740537,0.07061553085191764,0.07578065240877985,0.07719093637131563,0.04938367232522195,1.3007753801985547,0.12112993953383325,0.0732034915104682,0.05489629067224223,0.03499001329782121,0.05762027863093347,0.08810453292388044,0.013892115652248085;0.01192265541329874,0.013344345647184001,0.020853884266846742,0.02292684908082444,0.02531977188703028,0.02245162399614365,0.02852371538493534,0.016629290273686582,0.020436053825800982,0.02288007922625452,0.020153657780000313,0.02076645625992741,0.021956183196595702,0.019039257859538132,0.023127086984926788,0.02186982214004889,0.015015743471100249,0.0272994595030707,0.034965798625811985,0.03187004624278967,0.05259291796700828,0.04432088300878163,0.022645157113570652,0.030896070526083782,0.026240494153350793,0.0375603430564096,0.027152912740828105,0.04082984567427614,1.0399545457050194,0.038440353369009424,0.0259258831716387,0.02781512216142958,0.04945017275403002,0.04266617030375154,0.0018525664471161847;0.05139519449058413,0.06490598300985581,0.10665173420255922,0.10047874107513931,0.09934249297189134,0.09572356342194378,0.14566536141378753,0.07936297449153598,0.14280310995450876,0.12153590790340939,0.10050626237970467,0.09994576961276963,0.11904895640457426,0.1194549744922579,0.12850305375785087,0.09242828947927714,0.07933381002308613,0.12681948307319937,0.10584238078170627,0.09913596843458572,0.10299492157242175,0.1026691070807976,0.0990928574761902,0.08899729002043831,0.14749565314375004,0.1282486251501689,0.11490462507132093,0.17334274994581328,0.07605132998915849,1.208901797959994,0.13902586231701328,0.06836150121374028,0.11840017120037181,0.1431135879158838,0.011387670086299031;0.003239002853154995,0.004188956514405475,0.005070743432506389,0.004230333407216674,0.004282801813592431,0.007089188492894686,0.007142591089591656,0.004782107523979422,0.006077042369108296,0.0056699750640543094,0.006057260720435103,0.0067152846843496995,0.004724895507678141,0.003955454744341664,0.004852314896514009,0.0051916269084884585,0.0070724041953945,0.004952962350067902,0.004916132542525577,0.0032473691461398983,0.004418827774718178,0.0062442460300526255,0.006095448617676738,0.008784588203864336,0.012335967573324957,0.00621583829854217,0.004722804650853763,0.003598635480788558,0.005231717029034311,0.005176464392456424,1.0094919371896895,0.006051402051809586,0.006536313119311497,0.011507159963954992,0.000470837666819135;0.0012055319341241558,0.000995919316796733,0.0016199953403623504,0.001601486173322844,0.001719401925423017,0.001535903634140693,0.0018140460016164003,0.0014305806998463537,0.0021745743685085872,0.001946719557149479,0.0016552623806411967,0.001748668473769803,0.002097406175808575,0.0019222983603149496,0.00229478388283032,0.0014690695029972052,0.0014794579074878921,0.0016773050299228897,0.0017283384287492636,0.001418790436487781,0.001957785858611537,0.0015359311036474608,0.001976548254232907,0.0013961597772498362,0.003227987860490954,0.0022830844114107777,0.002359568979339871,0.0022832828875607608,0.0008410019914413318,0.003263160563172288,0.005187174649228794,1.0148204960403882,0.0023373912874880506,0.002664511723927232,0.00014919607314675014;0.0018945211698060608,0.0008264911395720149,0.001576906095610304,0.0013653212020202715,0.00217760653993722,0.0015533122126305194,0.0012928462055930145,0.0009263982861442878,0.0013242057818122724,0.001268169396071949,0.0014994252384250258,0.0013597232374004098,0.0017931573183038825,0.001234928004524508,0.0014576860183966314,0.0012372292565853988,0.000919208081976893,0.0011904838833482895,0.00107925256315553,0.0009407158523428708,0.000771284106209775,0.001670991509209597,0.001162188243955518,0.0009738756603312423,0.0010919431283354405,0.0011327495087763572,0.0010996580520411185,0.0010690813914025505,0.00038541553563748967,0.001087766173746361,0.006002923143233296,0.002032664286114535,1.0359115633068894,0.0019845130206996224,0.00012819812120794352;0.009751544278032863,0.01288641184225632,0.01765876721635086,0.018274100554907833,0.021046075825656322,0.017849733985073755,0.028762885168824116,0.01440045445434844,0.020807409980484557,0.01905881974473071,0.01807036556644104,0.01850148573516191,0.017737893238837833,0.01525460570241257,0.018517742974740285,0.01590190267758256,0.014426506282335494,0.01904159223111081,0.016945753208434635,0.01525011875222448,0.016908575435681424,0.02476428777208317,0.023179013881653037,0.016598003246963394,0.02060678093860506,0.025975231247864473,0.028357004856553836,0.02194128528415946,0.014700795863027031,0.03706074099288357,0.02791663805528405,0.01915373404973955,0.024323120758112486,1.095457840469845,0.003547461270424483;4.09813240773049e-05,5.08327020404007e-05,7.102032504976577e-05,0.00017954802443623602,9.324414498752378e-05,8.387629057797006e-05,8.61808660013252e-05,6.06552435325123e-05,6.657369942013032e-05,7.346130560417416e-05,6.911002345540393e-05,6.396614246145115e-05,8.238255133756809e-05,5.872149840897881e-05,0.00011654908105749451,6.042656752342213e-05,3.9801650956903724e-05,0.00011557518423813349,8.008729891767424e-05,4.270377001562375e-05,7.25828728250916e-05,9.576626334548025e-05,0.00015526338720411027,4.777585659487482e-05,5.895600564353229e-05,6.186514630621723e-05,6.914872075153685e-05,0.00010726854926827004,0.0002522758869926561,0.00010365915314700283,0.00010324403267356435,6.584871576955728e-05,9.521988616071109e-05,0.0001662003546332446,1.0001283490062816;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            1.17488806e+00, 4.40977486e-03, 3.67799437e-01, 1.02134026e-01, 1.44956970e-01,
            2.07452363e-01, 3.52882800e-02, 7.90503803e-03, 2.21322191e-02, 3.20947309e-02,
            1.07100321e-02, 8.63220712e-03, 8.90836498e-03, 7.99040041e-03, 9.82198665e-03,
            3.86932708e-02, 5.16174804e-03, 1.95243678e-02, 6.92797053e-03, 8.75656775e-03,
            8.34807987e-03, 1.07327108e-01, 8.41499188e-03, 1.00131459e-02, 9.21375712e-03,
            1.61393571e-02, 5.15066436e-03, 4.58213820e-03, 3.56290356e-03, 6.97438619e-03,
            1.10830511e-02, 1.07611485e-02, 1.32737574e-02, 1.26868714e-02, 3.10875447e-02
        ],
              [
                  2.41138494e-02, 1.10172077e+00, 2.68566691e-02, 3.57238048e-02, 3.08218051e-02,
                  3.49109214e-02, 3.09271579e-02, 5.98205733e-01, 9.81126255e-02, 5.08950101e-02,
                  1.28616545e-01, 1.16956261e-01, 4.25788159e-02, 2.99984137e-02, 3.63213635e-02,
                  3.44587157e-02, 1.63318821e-01, 6.20679673e-02, 1.83400810e-02, 1.16619714e-02,
                  1.16519081e-02, 1.95339448e-02, 5.09085652e-02, 6.67476096e-02, 7.21276568e-02,
                  3.27179250e-02, 1.16225725e-02, 7.17469972e-03, 9.40300890e-03, 1.20568189e-02,
                  2.00309275e-02, 1.31053221e-02, 1.83116966e-02, 1.86322590e-02, 7.06364243e-02
              ],
              [
                  9.20543911e-02, 4.49649618e-03, 1.22276539e+00, 2.67151341e-02, 1.72531316e-01,
                  2.59675262e-02, 1.43062008e-02, 7.43919690e-03, 2.52697878e-02, 1.82834822e-02,
                  1.07928865e-02, 9.77695845e-03, 1.00290897e-02, 9.16330642e-03, 9.84507491e-03,
                  1.35956437e-02, 5.59816908e-03, 9.94285725e-03, 7.36994684e-03, 1.01094563e-02,
                  9.93919333e-03, 1.95740947e-01, 8.08218275e-03, 1.41244664e-02, 1.34443034e-02,
                  1.17210512e-02, 6.97891182e-03, 6.11198635e-03, 2.99262386e-03, 8.56287839e-03,
                  1.53401577e-02, 1.54904708e-02, 2.24851407e-02, 1.64976244e-02, 6.67917881e-03
              ],
              [
                  5.78551814e-03, 3.65587530e-03, 7.93622071e-03, 1.54223794e+00, 1.20429016e-01,
                  1.17885485e-02, 1.63235664e-02, 4.53839928e-03, 1.12179322e-02, 3.07597456e-02,
                  1.13913011e-02, 8.76028211e-03, 1.00601912e-02, 9.16330961e-03, 1.68752708e-02,
                  4.30004220e-02, 3.96858213e-03, 9.59508557e-03, 6.71414922e-03, 5.74714861e-03,
                  7.05402388e-03, 8.01680594e-03, 6.54165856e-03, 9.07414603e-03, 6.89951059e-03,
                  6.54145640e-03, 3.51024803e-03, 2.62257146e-03, 2.00387330e-03, 4.83281306e-03,
                  7.38541057e-03, 3.51696069e-03, 8.59429884e-03, 1.11087588e-02, 7.31706164e-04
              ],
              [
                  5.26981074e-04, 3.13075269e-04, 7.30676472e-04, 2.25557992e-02, 1.27525499e+00,
                  1.39822736e-03, 1.83728133e-03, 4.25435061e-04, 8.95236595e-04, 2.29180414e-03,
                  9.20910730e-04, 8.49550703e-04, 9.87741749e-04, 1.08872322e-03, 4.03743656e-03,
                  7.72562268e-03, 4.10248433e-04, 7.62783817e-04, 1.14188853e-03, 7.00799789e-04,
                  6.19597602e-04, 5.83929871e-04, 7.67507425e-04, 7.02564222e-04, 7.25565598e-04,
                  6.50702452e-04, 5.95983471e-04, 2.46886111e-04, 1.58473872e-04, 4.22208569e-04,
                  1.14613085e-03, 3.57860987e-04, 5.42819915e-04, 1.04267261e-03, 6.38120226e-05
              ],
              [
                  4.75724550e-03, 4.30029055e-03, 6.90621167e-03, 7.25405978e-03, 8.15815704e-03,
                  1.34282804e+00, 2.36629084e-02, 4.49221298e-03, 6.24072191e-03, 9.54129136e-03,
                  1.62339389e-02, 1.19933917e-02, 1.04274874e-02, 7.58795885e-03, 1.08799865e-02,
                  1.05371734e-01, 4.45538623e-03, 4.92896330e-02, 5.15893258e-03, 3.82295537e-03,
                  3.77097763e-03, 6.48807795e-03, 4.97565588e-03, 4.25173105e-03, 4.02893188e-03,
                  7.19760246e-03, 3.41450345e-03, 2.54362745e-03, 6.32721417e-03, 3.86519415e-03,
                  6.11193416e-03, 6.20129216e-03, 4.80883220e-03, 7.39837867e-03, 7.48893736e-04
              ],
              [
                  1.44225860e-02, 1.13089318e-02, 5.30216271e-02, 4.01379183e-02, 4.78950694e-02,
                  3.94811331e-02, 1.34099260e+00, 1.51049510e-02, 4.04035376e-02, 4.56357698e-02,
                  4.63819732e-02, 2.36750433e-02, 2.85810693e-02, 3.17657583e-02, 2.64615599e-02,
                  4.29856825e-02, 1.40343277e-02, 2.47392568e-02, 2.29285899e-02, 2.34590446e-02,
                  2.36381445e-02, 2.80484083e-02, 2.05378503e-02, 1.83468529e-02, 2.15191958e-02,
                  3.20019474e-02, 2.37437337e-02, 2.96540307e-02, 9.88828223e-03, 3.87558912e-02,
                  3.57303343e-02, 3.13605447e-02, 2.44379512e-02, 4.53500413e-02, 2.08666425e-03
              ],
              [
                  2.55369389e-02, 1.55671858e-02, 2.19314298e-02, 2.92496866e-02, 2.56758091e-02,
                  2.55673235e-02, 2.11324358e-02, 1.14192703e+00, 8.11254249e-02, 4.12372047e-02,
                  4.21698217e-02, 3.47983288e-02, 2.13419934e-02, 1.70163538e-02, 1.93982416e-02,
                  2.01312689e-02, 4.03395474e-02, 2.98338364e-02, 1.48570885e-02, 1.28474645e-02,
                  1.00082863e-02, 1.44947542e-02, 7.14606842e-02, 1.06559654e-01, 1.18189832e-01,
                  3.86921307e-02, 1.01152761e-02, 6.38981683e-03, 5.31221128e-03, 1.16060101e-02,
                  1.73431117e-02, 9.08392180e-03, 1.41055838e-02, 1.45170045e-02, 2.03779031e-03
              ],
              [
                  6.68404885e-02, 2.32708862e-02, 5.27567157e-02, 1.62313127e-01, 1.13516719e-01,
                  8.81091560e-02, 8.25563925e-02, 4.45730233e-02, 1.34937661e+00, 3.55521927e-01,
                  7.86359328e-02, 4.98943152e-02, 5.13896813e-02, 6.43493804e-02, 6.14756410e-02,
                  7.37300633e-02, 2.27285590e-02, 4.75959018e-02, 2.80097215e-02, 1.27754221e-02,
                  1.22451245e-02, 2.55277577e-02, 2.18351896e-02, 2.39727857e-02, 2.32002155e-02,
                  2.22842385e-02, 1.27600154e-02, 8.21804330e-03, 8.46931403e-03, 1.72934051e-02,
                  2.66284623e-02, 1.35328061e-02, 9.80262170e-02, 2.79311576e-02, 4.10927155e-03
              ],
              [
                  1.40837888e-02, 1.24539707e-02, 3.67804538e-02, 3.28898638e-02, 7.40734439e-02,
                  2.52271943e-02, 3.49762750e-02, 1.56083474e-02, 3.66916605e-02, 1.19013638e+00,
                  2.74940002e-02, 2.38109205e-02, 5.01683288e-02, 5.30530096e-02, 7.46844044e-02,
                  5.38525453e-02, 1.11624420e-02, 3.70255558e-02, 3.19268311e-02, 1.01298438e-02,
                  1.07101606e-02, 1.57093687e-02, 2.26400857e-02, 1.50550770e-02, 1.59930840e-02,
                  1.75124064e-02, 1.08822909e-02, 5.02883977e-03, 5.15085143e-03, 9.61830006e-03,
                  1.20496177e-02, 6.44065998e-03, 1.47176294e-02, 1.34289303e-02, 1.69032799e-03
              ],
              [
                  5.37939297e-03, 8.73374110e-03, 1.18381812e-02, 8.94882480e-03, 8.64020596e-03,
                  1.65727221e-02, 6.51676931e-03, 9.34908212e-03, 1.32269657e-02, 1.44393035e-02,
                  1.16479786e+00, 2.28659627e-02, 1.67625073e-02, 2.33940017e-02, 1.98041889e-02,
                  1.52702603e-02, 7.99988082e-03, 1.16121345e-01, 9.46892843e-03, 3.58646679e-03,
                  3.74845916e-03, 8.39318468e-03, 6.42552158e-03, 5.20545773e-03, 5.54219475e-03,
                  6.97685157e-03, 5.48357424e-03, 2.55520605e-03, 7.01632994e-03, 4.25228654e-03,
                  6.74040418e-03, 5.12420728e-03, 6.48074092e-03, 6.37725817e-03, 9.61046022e-04
              ],
              [
                  2.30409757e-02, 4.68009843e-02, 4.15286644e-02, 3.93846902e-02, 4.85190230e-02,
                  7.05555442e-02, 4.07334386e-02, 4.61253692e-02, 4.98426506e-02, 7.41550176e-02,
                  8.98808898e-02, 1.52849723e+00, 3.23774653e-01, 1.80905328e-01, 2.45309056e-01,
                  1.51464755e-01, 3.68770253e-02, 1.78438360e-01, 6.55255088e-02, 1.68857722e-02,
                  1.63142916e-02, 2.44973306e-02, 3.67736983e-02, 3.90306101e-02, 3.83106523e-02,
                  3.77090722e-02, 2.47054256e-02, 1.05852124e-02, 1.54324476e-02, 2.05877174e-02,
                  2.85573616e-02, 1.50753940e-02, 2.21129664e-02, 2.59541955e-02, 4.93895004e-03
              ],
              [
                  1.62301994e-02, 2.56372842e-02, 1.76254753e-02, 2.92358809e-02, 2.53153207e-02,
                  2.84175357e-02, 2.14914161e-02, 2.76816414e-02, 2.38998055e-02, 3.31002317e-02,
                  4.32566780e-02, 5.42920779e-02, 1.21305715e+00, 4.60034397e-02, 8.60436404e-02,
                  3.23417012e-02, 2.15861164e-02, 4.19449052e-02, 4.24183223e-02, 8.41391051e-03,
                  8.04125005e-03, 1.09941779e-02, 1.83416645e-02, 2.67127310e-02, 2.31117131e-02,
                  2.01906420e-02, 1.02623599e-02, 5.24976107e-03, 5.90004840e-03, 9.40622352e-03,
                  1.55791344e-02, 7.30579124e-03, 1.19176757e-02, 1.25084069e-02, 2.80471578e-03
              ],
              [
                  1.90921841e-02, 2.96267965e-02, 3.09445336e-02, 4.44395689e-02, 4.00637577e-02,
                  4.40769817e-02, 4.82580744e-02, 3.57792807e-02, 4.84476978e-02, 6.03171263e-02,
                  5.44994645e-02, 7.58579446e-02, 2.37530123e-01, 1.62521369e+00, 1.91184957e-01,
                  8.18064921e-02, 6.50445046e-02, 1.01077131e-01, 8.81931819e-02, 2.84759990e-02,
                  2.86920547e-02, 2.85111083e-02, 4.06440514e-02, 3.76789253e-02, 4.20499909e-02,
                  4.49617498e-02, 9.27023783e-02, 2.32577734e-02, 1.59147991e-02, 4.84829293e-02,
                  5.08046118e-02, 3.04768274e-02, 6.02672845e-02, 4.44909842e-02, 5.15304352e-03
              ],
              [
                  1.49609843e-02, 1.48598391e-02, 1.69720123e-02, 1.88710214e-02, 1.90290478e-02,
                  2.13512271e-02, 1.74772821e-02, 1.73340472e-02, 1.61958417e-02, 2.11620004e-02,
                  2.37869774e-02, 2.77137875e-02, 4.26090319e-02, 2.15958738e-02, 1.47201379e+00,
                  2.36402366e-02, 1.45145679e-02, 2.29012382e-02, 1.27857649e-01, 1.32402831e-02,
                  1.24560159e-02, 1.18947428e-02, 6.84798909e-02, 7.92319927e-02, 9.16712043e-02,
                  3.95389548e-02, 1.20523153e-02, 7.08517014e-03, 5.32142943e-03, 1.31455740e-02,
                  3.25278729e-02, 8.52111205e-03, 9.28535302e-03, 2.03665883e-02, 2.05581930e-03
              ],
              [
                  2.15892526e-03, 2.50920091e-03, 3.64203283e-03, 9.63041549e-03, 6.89708022e-03,
                  8.23135181e-03, 8.13772277e-03, 3.18036579e-03, 4.76323589e-03, 6.83224748e-03,
                  6.91326100e-03, 1.73988831e-02, 1.01583055e-02, 7.35592214e-03, 1.22722663e-02,
                  1.05263326e+00, 3.45134606e-03, 9.76049662e-03, 4.75631270e-03, 2.47721857e-03,
                  2.78315470e-03, 4.31555266e-03, 4.91590836e-03, 3.29905392e-03, 4.51321408e-03,
                  4.10674781e-03, 2.75674707e-03, 2.17199051e-03, 2.58121279e-03, 3.45552258e-03,
                  5.80418926e-03, 4.85887731e-03, 4.96948386e-03, 7.66445943e-03, 2.19167852e-03
              ],
              [
                  2.54348163e-02, 4.43567127e-02, 3.73373341e-02, 4.96949891e-02, 3.63718321e-02,
                  4.49901764e-02, 5.02039427e-02, 6.87467525e-02, 5.68514850e-02, 5.33938909e-02,
                  7.69713385e-02, 6.69800478e-02, 4.08260399e-02, 3.17210099e-02, 3.75413578e-02,
                  3.31253183e-02, 1.16549989e+00, 3.42948482e-02, 2.63027233e-02, 1.49744234e-02,
                  2.26663196e-02, 4.11821766e-02, 3.29942529e-02, 2.27354453e-02, 2.55749144e-02,
                  3.48215024e-02, 2.03943940e-02, 1.22851883e-02, 1.66526786e-02, 1.59713479e-02,
                  2.71198991e-02, 3.10312481e-02, 2.63945748e-02, 3.06110056e-02, 4.20994762e-03
              ],
              [
                  7.53463647e-03, 1.11337875e-02, 9.35380727e-03, 1.02108929e-02, 9.14227315e-03,
                  1.07769879e-02, 1.05826260e-02, 1.53919208e-02, 1.08565712e-02, 1.03963540e-02,
                  1.45245129e-02, 1.24474732e-02, 1.02829560e-02, 8.21160551e-03, 9.45232600e-03,
                  9.09561523e-03, 2.42359114e-02, 1.06059479e+00, 1.10268397e-02, 7.90127250e-03,
                  9.41505194e-03, 1.20924501e-02, 1.54768416e-02, 1.05066325e-02, 1.04839418e-02,
                  2.06966435e-02, 1.59381527e-02, 1.01197379e-02, 3.77967481e-02, 9.78047827e-03,
                  2.36156774e-02, 1.59904524e-02, 1.26686146e-02, 1.55562976e-02, 1.79932187e-03
              ],
              [
                  9.60895486e-03, 6.38372287e-03, 1.48987261e-02, 1.36260039e-02, 1.58290210e-02,
                  1.45136660e-02, 1.20448375e-02, 9.42926581e-03, 1.29773691e-02, 1.44383151e-02,
                  1.39308729e-02, 1.38319868e-02, 1.26049700e-02, 1.02725093e-02, 1.40425583e-02,
                  1.31903608e-02, 1.25032724e-02, 1.45733412e-02, 1.01656167e+00, 7.53796879e-03,
                  7.10861498e-03, 1.08939663e-02, 2.09055636e-02, 8.02929770e-03, 1.10239151e-02,
                  1.41476144e-02, 7.33978892e-03, 6.32876361e-03, 4.32329659e-03, 9.27102268e-03,
                  8.54517359e-03, 5.75304097e-03, 8.17739447e-03, 1.09452177e-02, 9.13760212e-04
              ],
              [
                  5.77453637e-02, 3.32136457e-02, 1.09044458e-01, 9.80057570e-02, 1.12057687e-01,
                  1.02755535e-01, 8.92147226e-02, 9.41685567e-02, 8.85433385e-02, 9.60859922e-02,
                  7.58040147e-02, 9.03188069e-02, 9.26234422e-02, 7.97758480e-02, 1.02636612e-01,
                  8.26634729e-02, 4.48371123e-02, 8.07100512e-02, 6.02664796e-02, 1.03834196e+00,
                  2.55106666e-02, 7.78263901e-02, 4.80346573e-02, 5.02747675e-02, 5.23708149e-02,
                  4.62875331e-02, 2.74593909e-02, 1.61688609e-02, 1.38455599e-02, 2.90102946e-02,
                  3.99508329e-02, 2.42903757e-02, 4.82742826e-02, 3.76136352e-02, 4.97056068e-03
              ],
              [
                  3.02402838e-02, 1.47495690e-02, 5.39157374e-02, 5.27889244e-02, 6.52052505e-02,
                  4.37187178e-02, 3.78005736e-02, 2.87952301e-02, 4.15523314e-02, 4.43615834e-02,
                  3.66114432e-02, 3.77226863e-02, 3.92772789e-02, 3.34400106e-02, 4.57855958e-02,
                  4.52051295e-02, 1.79855656e-02, 5.18753532e-02, 2.70877761e-02, 1.28304656e-02,
                  1.01359506e+00, 4.06707812e-02, 2.59332867e-02, 2.17461771e-02, 2.34355911e-02,
                  2.16160425e-02, 1.70831998e-02, 1.16337963e-02, 8.81051538e-03, 1.66392645e-02,
                  1.80996470e-02, 1.27010572e-02, 2.39024404e-02, 2.20596989e-02, 2.71625803e-03
              ],
              [
                  5.89711495e-03, 7.41043945e-03, 1.18915409e-02, 1.35390902e-02, 1.44778272e-02,
                  1.27540057e-02, 1.46542775e-02, 8.80268243e-03, 1.25261782e-02, 1.41541528e-02,
                  1.35320787e-02, 1.33101464e-02, 1.47061174e-02, 1.27218555e-02, 1.24849174e-02,
                  1.12441750e-02, 8.76693424e-03, 1.37908964e-02, 1.14848385e-02, 1.24554044e-02,
                  1.13372399e-02, 1.01699450e+00, 1.47311360e-02, 1.37642023e-02, 2.55921950e-02,
                  3.02444914e-02, 1.56336365e-02, 1.78938028e-02, 6.77606811e-03, 1.99369529e-02,
                  1.73187734e-02, 1.28658058e-02, 1.48718623e-02, 1.95274261e-02, 1.02605118e-03
              ],
              [
                  2.76959980e-02, 2.93260236e-02, 4.92702203e-02, 5.05804253e-02, 5.08429837e-02,
                  5.22048704e-02, 4.15768583e-02, 7.50120542e-02, 4.38529894e-02, 4.39366307e-02,
                  6.06965393e-02, 4.43975538e-02, 3.67126553e-02, 2.87619418e-02, 3.74234552e-02,
                  4.12061218e-02, 3.60347433e-02, 4.41049061e-02, 3.12485077e-02, 3.04266377e-02,
                  2.10977189e-02, 2.67691132e-02, 1.06461183e+00, 3.95881334e-02, 3.33189802e-02,
                  7.80687457e-02, 1.80427778e-02, 1.24628623e-02, 7.55004102e-03, 1.45835639e-02,
                  2.13449290e-02, 1.72215920e-02, 1.89354746e-02, 2.13267087e-02, 3.75685438e-03
              ],
              [
                  6.11510414e-03, 9.58147418e-03, 1.13142573e-02, 1.20780496e-02, 1.22041752e-02,
                  1.47603101e-02, 8.83767939e-03, 1.10211384e-02, 8.82885750e-03, 9.61030846e-03,
                  1.58957081e-02, 1.37990833e-02, 9.86404672e-03, 7.51252279e-03, 9.30008289e-03,
                  8.48815192e-03, 6.78652088e-03, 9.59952146e-03, 5.45315026e-03, 7.45202088e-03,
                  5.90459788e-03, 5.71517148e-03, 7.44690315e-03, 1.18470770e+00, 7.17652547e-03,
                  9.56896839e-03, 3.14866484e-03, 2.26127014e-03, 3.80524321e-03, 3.51575835e-03,
                  3.68495244e-03, 2.63192502e-03, 3.19377685e-03, 4.02541139e-03, 9.36124964e-04
              ],
              [
                  2.44402078e-03, 2.90374929e-03, 4.37369977e-03, 5.20972661e-03, 6.19716894e-03,
                  5.10557018e-03, 5.67610217e-03, 3.51934283e-03, 4.75047349e-03, 5.02587232e-03,
                  4.61611138e-03, 4.27313094e-03, 5.46081078e-03, 4.97908799e-03, 5.06539722e-03,
                  4.16072322e-03, 2.66259041e-03, 4.18432844e-03, 4.41826188e-03, 4.76930307e-03,
                  3.32461521e-03, 3.65029279e-03, 5.37160899e-03, 1.08656553e-02, 1.03598236e+00,
                  1.82115781e-02, 6.00935177e-03, 5.25948544e-03, 1.77107562e-03, 6.01496010e-03,
                  6.19862344e-03, 4.19368336e-03, 3.20327072e-03, 6.76049599e-03, 3.79974271e-04
              ],
              [
                  1.16166284e-02, 1.16164707e-02, 2.17376393e-02, 1.90858085e-02, 2.12471911e-02,
                  2.34829389e-02, 2.46086477e-02, 2.22620486e-02, 1.84167962e-02, 1.98270227e-02,
                  2.34695415e-02, 1.97652708e-02, 1.80667745e-02, 1.48292385e-02, 1.89845691e-02,
                  1.68484259e-02, 1.26988692e-02, 2.37469229e-02, 2.31188636e-02, 3.03772255e-02,
                  1.90302299e-02, 1.81273458e-02, 5.40491796e-02, 1.55807816e-01, 1.14632024e-01,
                  1.12427897e+00, 1.10405853e-02, 9.29049249e-03, 4.97720003e-03, 1.21245378e-02,
                  1.22861878e-02, 7.86405150e-03, 1.04610362e-02, 1.48350279e-02, 1.41766646e-03
              ],
              [
                  1.43205334e-02, 1.47358003e-02, 2.36057536e-02, 2.75159649e-02, 2.79362616e-02,
                  2.55584692e-02, 3.54628028e-02, 2.04920145e-02, 2.73992725e-02, 2.61441245e-02,
                  2.49219298e-02, 2.67931807e-02, 2.70676549e-02, 2.71330782e-02, 2.55030584e-02,
                  2.89269905e-02, 1.99970131e-02, 3.19576551e-02, 3.26304347e-02, 3.32378601e-02,
                  3.46295209e-02, 3.15047842e-02, 3.48749851e-02, 4.11322714e-02, 4.25790897e-02,
                  4.41815241e-02, 1.14804094e+00, 5.04344125e-02, 1.58579900e-02, 4.24932578e-02,
                  3.87021590e-02, 2.08809463e-02, 2.86428795e-02, 4.07874855e-02, 2.93508516e-03
              ],
              [
                  4.52599117e-02, 5.00480658e-02, 6.11927885e-02, 7.73256884e-02, 6.84794470e-02,
                  6.34148367e-02, 6.93780434e-02, 6.10959515e-02, 6.27215562e-02, 6.24436630e-02,
                  6.81891694e-02, 6.59997361e-02, 6.36200195e-02, 5.50840484e-02, 6.29265521e-02,
                  7.11872574e-02, 5.70380429e-02, 6.81359571e-02, 5.37804335e-02, 6.05933347e-02,
                  6.63133285e-02, 6.33567082e-02, 8.75010058e-02, 7.06155309e-02, 7.57806524e-02,
                  7.71909364e-02, 4.93836723e-02, 1.30077538e+00, 1.21129940e-01, 7.32034915e-02,
                  5.48962907e-02, 3.49900133e-02, 5.76202786e-02, 8.81045329e-02, 1.38921157e-02
              ],
              [
                  1.19226554e-02, 1.33443456e-02, 2.08538843e-02, 2.29268491e-02, 2.53197719e-02,
                  2.24516240e-02, 2.85237154e-02, 1.66292903e-02, 2.04360538e-02, 2.28800792e-02,
                  2.01536578e-02, 2.07664563e-02, 2.19561832e-02, 1.90392579e-02, 2.31270870e-02,
                  2.18698221e-02, 1.50157435e-02, 2.72994595e-02, 3.49657986e-02, 3.18700462e-02,
                  5.25929180e-02, 4.43208830e-02, 2.26451571e-02, 3.08960705e-02, 2.62404942e-02,
                  3.75603431e-02, 2.71529127e-02, 4.08298457e-02, 1.03995455e+00, 3.84403534e-02,
                  2.59258832e-02, 2.78151222e-02, 4.94501728e-02, 4.26661703e-02, 1.85256645e-03
              ],
              [
                  5.13951945e-02, 6.49059830e-02, 1.06651734e-01, 1.00478741e-01, 9.93424930e-02,
                  9.57235634e-02, 1.45665361e-01, 7.93629745e-02, 1.42803110e-01, 1.21535908e-01,
                  1.00506262e-01, 9.99457696e-02, 1.19048956e-01, 1.19454974e-01, 1.28503054e-01,
                  9.24282895e-02, 7.93338100e-02, 1.26819483e-01, 1.05842381e-01, 9.91359684e-02,
                  1.02994922e-01, 1.02669107e-01, 9.90928575e-02, 8.89972900e-02, 1.47495653e-01,
                  1.28248625e-01, 1.14904625e-01, 1.73342750e-01, 7.60513300e-02, 1.20890180e+00,
                  1.39025862e-01, 6.83615012e-02, 1.18400171e-01, 1.43113588e-01, 1.13876701e-02
              ],
              [
                  3.23900285e-03, 4.18895651e-03, 5.07074343e-03, 4.23033341e-03, 4.28280181e-03,
                  7.08918849e-03, 7.14259109e-03, 4.78210752e-03, 6.07704237e-03, 5.66997506e-03,
                  6.05726072e-03, 6.71528468e-03, 4.72489551e-03, 3.95545474e-03, 4.85231490e-03,
                  5.19162691e-03, 7.07240420e-03, 4.95296235e-03, 4.91613254e-03, 3.24736915e-03,
                  4.41882777e-03, 6.24424603e-03, 6.09544862e-03, 8.78458820e-03, 1.23359676e-02,
                  6.21583830e-03, 4.72280465e-03, 3.59863548e-03, 5.23171703e-03, 5.17646439e-03,
                  1.00949194e+00, 6.05140205e-03, 6.53631312e-03, 1.15071600e-02, 4.70837667e-04
              ],
              [
                  1.20553193e-03, 9.95919317e-04, 1.61999534e-03, 1.60148617e-03, 1.71940193e-03,
                  1.53590363e-03, 1.81404600e-03, 1.43058070e-03, 2.17457437e-03, 1.94671956e-03,
                  1.65526238e-03, 1.74866847e-03, 2.09740618e-03, 1.92229836e-03, 2.29478388e-03,
                  1.46906950e-03, 1.47945791e-03, 1.67730503e-03, 1.72833843e-03, 1.41879044e-03,
                  1.95778586e-03, 1.53593110e-03, 1.97654825e-03, 1.39615978e-03, 3.22798786e-03,
                  2.28308441e-03, 2.35956898e-03, 2.28328289e-03, 8.41001991e-04, 3.26316056e-03,
                  5.18717465e-03, 1.01482050e+00, 2.33739129e-03, 2.66451172e-03, 1.49196073e-04
              ],
              [
                  1.89452117e-03, 8.26491140e-04, 1.57690610e-03, 1.36532120e-03, 2.17760654e-03,
                  1.55331221e-03, 1.29284621e-03, 9.26398286e-04, 1.32420578e-03, 1.26816940e-03,
                  1.49942524e-03, 1.35972324e-03, 1.79315732e-03, 1.23492800e-03, 1.45768602e-03,
                  1.23722926e-03, 9.19208082e-04, 1.19048388e-03, 1.07925256e-03, 9.40715852e-04,
                  7.71284106e-04, 1.67099151e-03, 1.16218824e-03, 9.73875660e-04, 1.09194313e-03,
                  1.13274951e-03, 1.09965805e-03, 1.06908139e-03, 3.85415536e-04, 1.08776617e-03,
                  6.00292314e-03, 2.03266429e-03, 1.03591156e+00, 1.98451302e-03, 1.28198121e-04
              ],
              [
                  9.75154428e-03, 1.28864118e-02, 1.76587672e-02, 1.82741006e-02, 2.10460758e-02,
                  1.78497340e-02, 2.87628852e-02, 1.44004545e-02, 2.08074100e-02, 1.90588197e-02,
                  1.80703656e-02, 1.85014857e-02, 1.77378932e-02, 1.52546057e-02, 1.85177430e-02,
                  1.59019027e-02, 1.44265063e-02, 1.90415922e-02, 1.69457532e-02, 1.52501188e-02,
                  1.69085754e-02, 2.47642878e-02, 2.31790139e-02, 1.65980032e-02, 2.06067809e-02,
                  2.59752312e-02, 2.83570049e-02, 2.19412853e-02, 1.47007959e-02, 3.70607410e-02,
                  2.79166381e-02, 1.91537340e-02, 2.43231208e-02, 1.09545784e+00, 3.54746127e-03
              ],
              [
                  4.09813241e-05, 5.08327020e-05, 7.10203250e-05, 1.79548024e-04, 9.32441450e-05,
                  8.38762906e-05, 8.61808660e-05, 6.06552435e-05, 6.65736994e-05, 7.34613056e-05,
                  6.91100235e-05, 6.39661425e-05, 8.23825513e-05, 5.87214984e-05, 1.16549081e-04,
                  6.04265675e-05, 3.98016510e-05, 1.15575184e-04, 8.00872989e-05, 4.27037700e-05,
                  7.25828728e-05, 9.57662633e-05, 1.55263387e-04, 4.77758566e-05, 5.89560056e-05,
                  6.18651463e-05, 6.91487208e-05, 1.07268549e-04, 2.52275887e-04, 1.03659153e-04,
                  1.03244033e-04, 6.58487158e-05, 9.52198862e-05, 1.66200355e-04, 1.00012835e+00
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def leontief_matrix_2007():
    """
    Real Name: b'leontief matrix 2007'
    Original Eqn: b'1.1662755714660147,0.004573978350667616,0.3622166288397983,0.10341089138686255,0.14542935796722647,0.19801649964318038,0.036572122009365056,0.008413064705703662,0.022659785587383456,0.031051002547092105,0.011093406202298844,0.00877802331220027,0.008923116711466962,0.008032323004536563,0.009760857197324453,0.038814936639373146,0.005243801608036967,0.01756925675088792,0.00692400843404181,0.008427030754052763,0.008124068369641569,0.105489492642578,0.008409333347422814,0.009700935773849555,0.009526921465019156,0.016686167252129715,0.004978766950749014,0.004622115846139946,0.0032616089982714026,0.006911805312400324,0.010990961918202747,0.010697178362835616,0.013159621737070606,0.012497656662804061,0.03494577002331859;0.022856676067530002,1.110670288228158,0.025951950790593717,0.035394570612480324,0.030253251031669346,0.034024462715992354,0.030575420278882024,0.5608446892855166,0.09307968511443161,0.049533581965259435,0.12774130885245916,0.11463021846384965,0.04174935076337508,0.02964437349793919,0.03518367749545484,0.03445117323133064,0.1637403280718853,0.06256707837405359,0.018116324609342118,0.010831217225682168,0.01109746235970747,0.018970012318105203,0.049275545016354616,0.05447201625402082,0.06902163870632083,0.03248594068298532,0.011416872031628974,0.007194741616456586,0.008689919194656762,0.011733236064847784,0.019959222660819575,0.012754516500706692,0.018023561797951705,0.018193793686208198,0.07160101821355387;0.09721343239227778,0.00493053654826017,1.2310529909628323,0.029362312306700143,0.1801659075322419,0.027122614634944142,0.015395509102776482,0.008313334377471506,0.0272167203467723,0.019422050976407156,0.011741079650921533,0.010465832205199362,0.010598272314466138,0.009694954651593956,0.010433576716327504,0.014639791297307619,0.006050718311212706,0.010459623537354867,0.0076021486929567835,0.010308082122178815,0.009879863429897273,0.19928785723880402,0.008434414426448497,0.014285903751603282,0.01445512972727587,0.012439023831781531,0.006977597888027129,0.0063040276357877924,0.002928332893690546,0.008690124563978892,0.015646384199793622,0.015811814481242248,0.02280941603998838,0.01661808089111676,0.006784207007493387;0.005836732376516807,0.004122618216719138,0.008367022102265245,1.5742956549973386,0.12778783442188185,0.01175666562479174,0.017922321461696044,0.005028161520453939,0.011462581185948686,0.033005599062036615,0.012293636935952897,0.009294698432546213,0.01057512568851226,0.009570514759343937,0.016706443128962942,0.045547591499206154,0.004549599137973289,0.009901846069918422,0.006877619272648178,0.006129395842139117,0.006748765721515038,0.008161895083150721,0.00695960946197644,0.009282939604544377,0.0075130966884307685,0.007108043018959373,0.003591568800992474,0.0028363984630208404,0.0020367154397399868,0.005131451299062045,0.007795767227208786,0.0038337166338057657,0.009132061124080413,0.010867555964477487,0.0007221023617103487;0.0005509282843941421,0.00035281568548250504,0.0007663911562961428,0.02534459609955836,1.2853672532522924,0.0014634867645901355,0.0018210933431911144,0.000470840338633624,0.0009572123610171834,0.0024118859063255566,0.0010038593494990362,0.0009071095466221218,0.0010521037881583786,0.0011606095939025063,0.004404915012998887,0.008477131153761567,0.0004585867919276738,0.0008127427054165728,0.001176304725618193,0.0007086845661036993,0.0006379639882939143,0.0006038550440758484,0.0008672474897255328,0.0007272037766633325,0.000819848547133205,0.0007265755249723619,0.0006163760999292558,0.00027242419797389173,0.00016534520333599988,0.00045386982552526704,0.0014009079121007281,0.00040002265212429926,0.0007357376306423572,0.0010999292198480874,6.591204885084714e-05;0.0047919416250801344,0.004728679078852805,0.007231120993838443,0.007917046287506316,0.008720914066844406,1.360954528597029,0.02604769632287193,0.004758803709217987,0.00661505695600627,0.009914080439304744,0.017886836124604778,0.012956406922050887,0.011129545319648704,0.008080179059941777,0.011370020747843983,0.11214004351380401,0.004655047921759691,0.04914483533926263,0.005484828159723693,0.0038137619822263256,0.0038132675427308706,0.006683148275965845,0.005205646568978346,0.004216665144440092,0.004241882149161484,0.007216029237477853,0.0034750303112877443,0.0026763633073808996,0.0057721154275235526,0.004011005757760267,0.006574302444266434,0.006693846251374189,0.005135765242867137,0.007657876982136657,0.0007508070010172939;0.014849410824653518,0.012205484666928309,0.05419821583201303,0.04217894559991811,0.0494538794652577,0.04125506139761876,1.3496473417849766,0.016089513532458015,0.04096287600879511,0.045901837645413654,0.04860050295937023,0.024626643194807868,0.028842620882512555,0.03208314350475813,0.027003108495632634,0.04505055362735088,0.01483200429720276,0.025671409451476574,0.02354356394487034,0.023508926865589235,0.022963781247572482,0.028207006453912543,0.02131602632428185,0.018206074157469825,0.02119140375180194,0.03282298900952048,0.023653734335712034,0.030735720232795395,0.009532993128580471,0.039347623443703086,0.035953678677431176,0.03257784853610438,0.025342601806143252,0.04607749972314981,0.0021531974864076302;0.02457200065038826,0.0159174679075904,0.021221219306540636,0.02845257730608331,0.025062613426753876,0.02456103213155217,0.020740797524158947,1.1263974069915712,0.07527448323020011,0.03957435806306886,0.041418875648434966,0.03419409321164229,0.020913768624509173,0.016651907737461762,0.018771199161310235,0.02000798863214114,0.043253336685265514,0.028682155632702336,0.015125197028330874,0.011868964942170346,0.009656479338423604,0.014050040675431995,0.07169829821743666,0.08820498929397076,0.11653478114321872,0.03961936300988106,0.010083220168961977,0.006500776696227109,0.0050111988756336885,0.011452147820637294,0.017213052228282788,0.00898587412710041,0.013682158255522232,0.014098961637538066,0.002066687843098673;0.07013893748569269,0.026590849780130443,0.05568620357706077,0.16894885851409733,0.1200164645610853,0.09432085460592197,0.08873598860207478,0.04899673869116712,1.3618489482949132,0.3715191310665278,0.08531635199662396,0.05336201838004935,0.05453009326650866,0.06903211413367588,0.06443136125882734,0.07917670717670766,0.025488271506723136,0.0508728321502836,0.029733071532431498,0.013516992818795443,0.012706133390812944,0.027062179938089327,0.023451764363727486,0.023880965760833473,0.024564462107056456,0.024238678202792806,0.013614941984457247,0.009073626298528502,0.008943869853343165,0.01857522884481897,0.027750632638083642,0.014844435443506816,0.10236341810307167,0.03018086225094421,0.00456598128877299;0.014618557487915683,0.013652860500572406,0.03848868579821011,0.03478821999216014,0.07690721243016069,0.025780413308006997,0.03698396339830702,0.016492202617648413,0.03772470875131275,1.1975491538070893,0.029692639419746196,0.024849767606367,0.05107515781735047,0.054992723726909686,0.07549833250869326,0.055909985744618154,0.012276761469703733,0.038119875274129564,0.03235949129364385,0.010395092569135334,0.010692792028277165,0.016333546497509125,0.024052587199941158,0.014816143318113211,0.01711395065719116,0.018593622414423982,0.011170884478909507,0.005423014298170498,0.005138097405663214,0.010110327890462716,0.012732710547009234,0.007041312755737301,0.015159746465175868,0.013997913951809333,0.0017794271453059319;0.005491913169446071,0.009284687782846544,0.012234260566180275,0.009429890800016692,0.009112361641336122,0.016793762213488866,0.006952345888513116,0.01005797189710844,0.013807689065286701,0.014829081331310097,1.1749025655805445,0.024392057106885676,0.01770790398590642,0.024728386783371713,0.020334051340700186,0.016506226160662617,0.008645137109094434,0.12301994331362337,0.00996641814130519,0.0036790159403976013,0.0038720694715268563,0.00872045407677572,0.006803952384649308,0.005114285307490106,0.005978348521718624,0.007431890054178652,0.005769583496713722,0.0027502968075229107,0.0071679679107397596,0.004496493663524826,0.0073447724849525385,0.005393711139550362,0.006834287376893173,0.006747821400460621,0.0009937505258224564;0.024047207569239743,0.05060450764520812,0.04172030552100993,0.041840444528565425,0.05016250285327825,0.07287623169550692,0.04379322142808358,0.04868215951348089,0.05220728015090027,0.07652872347584096,0.09706459309156516,1.5433662657912628,0.3347166084171242,0.18726142024095813,0.246552714613849,0.15717276776583577,0.04093276721321809,0.1847348185807614,0.06718359027108499,0.017470180134418787,0.016466348316616385,0.025435074940657585,0.039061034167683605,0.03974685062037962,0.041931205864542,0.040937157328143355,0.02605284813811788,0.011567686916038154,0.01559601506571428,0.022107850729204268,0.030883248052611098,0.016254506122114053,0.023745133630027948,0.027839064756054396,0.005130721236362224;0.017466915609227293,0.02914670380211539,0.019130105500293405,0.03348078799740476,0.02856571172026673,0.031936875984700255,0.024108245503495662,0.031299432636209344,0.026981795986378836,0.0368706098601797,0.04971405682546497,0.06150675638536876,1.2355194272480943,0.05126218595112348,0.09406109938167805,0.03719996825239057,0.025103740168536396,0.046349273148637175,0.04550500625921808,0.008992978436988125,0.008391535204008847,0.011986089798723152,0.020302196371953185,0.027219656274983798,0.026145704141179626,0.023483192073270424,0.011270610262175192,0.006041164433754904,0.006225698802226276,0.010591585958904446,0.017719925413847884,0.008294410433868967,0.013580433082341806,0.013846999947489988,0.003110213569018107;0.021102049278198576,0.0353849673688116,0.03382139409746126,0.04838511349488191,0.043581330349988366,0.04761407165491363,0.05257459843304774,0.04130774554707916,0.05361119736846587,0.06307454331269954,0.060570881062567125,0.08239854450263628,0.25413981138483555,1.6727657915631204,0.2064176155882067,0.09080732621555442,0.07975820611774197,0.11227849479237126,0.09438814294364478,0.030807687580446233,0.029646423730672448,0.03153573091441557,0.04574803756445798,0.03987312475629099,0.04767262955939557,0.05081629878432386,0.1006536432195536,0.02729846143356349,0.017051720952539012,0.056499517332763975,0.0590292877439984,0.03590677057526208,0.06748120633188968,0.052311215096107706,0.005334411192520153;0.016599510113777242,0.016852441396177333,0.018504501482960203,0.021189553644805823,0.02103913743107938,0.02435032537284852,0.020406267387932366,0.019514648448030428,0.017831681446570085,0.023474684882971972,0.028241324429581088,0.03175782153288333,0.04848641915923305,0.023653408534425976,1.4939335744093238,0.02705518186731657,0.017400293275022218,0.02601993659294933,0.130099014404137,0.015328663569313174,0.01242487893602213,0.013055418845734709,0.07452803571470681,0.0828954791246972,0.10297191103625604,0.04533080381861502,0.012972558088031048,0.007908502615882884,0.005879099463831233,0.014348562503384853,0.0375882905638004,0.009839663016261444,0.01020844090878387,0.022315287077879345,0.0021772651272793818;0.0022581475291357685,0.00275874978310546,0.003809146541636366,0.009987931114141741,0.007395319491801386,0.008447535942852795,0.008765006749954545,0.0034708664752621963,0.004970519855722271,0.0071739659381152366,0.007700025723366856,0.01831146765998397,0.010752366983609903,0.007652472431786791,0.012603207191429221,1.057507871253477,0.0038317564614675846,0.009982516612938431,0.004785905802101056,0.002532143686441886,0.002814485702090961,0.00449418577244662,0.005217899520562957,0.003315011575499448,0.004837615197837854,0.004317745278402028,0.0029430046960268264,0.0024243404885493335,0.0025524490721794846,0.0036393446346516412,0.0059398132266329255,0.005341364729123079,0.005204170305893815,0.007980190431572862,0.001868234594153177;0.02570406853134016,0.048342396212152826,0.03825303006115865,0.051959141789248056,0.03719418438613978,0.0469711603938132,0.052376023958097824,0.07235034705477529,0.05951855861249425,0.05582721185833126,0.08019643528295034,0.06972769262777856,0.042487941311091994,0.03339446683369603,0.03831828846754018,0.03499790011648886,1.1822267520379004,0.03641100056021205,0.02681421800917678,0.015097427806991246,0.022633724408098115,0.04174075684296744,0.033832264521775936,0.021851023998041716,0.02663894756853291,0.035265308907891306,0.020923104752395505,0.01294281664161002,0.014751592201813183,0.01632757057017301,0.028603457600852384,0.03231269557510633,0.02699655642711265,0.03107003598654267,0.004499634896829308;0.007176388039346891,0.01103510649912003,0.009051386839851863,0.010010527749871597,0.008877881169652426,0.010645386993742694,0.010530204017981238,0.01475919608991789,0.010757974123322635,0.01012489369040122,0.014440853480846408,0.012385291567138015,0.010077001326965668,0.008076453397702686,0.009276452165019237,0.00908877188185218,0.02400114282671293,1.0594921571423528,0.011065775087973058,0.007494448959346086,0.009289695407899874,0.01173975300331112,0.015052390134160553,0.009058040310129249,0.010284935746306383,0.020380659865074598,0.01604661564857172,0.010120964787948607,0.03691803074715057,0.009536168530134403,0.023889537471356314,0.015144063005978823,0.012907409345791414,0.015463706922167454,0.0016578687811085043;0.009647155322328885,0.006627626594786508,0.014818902591771672,0.013404189606020625,0.015470464541774712,0.014489531941654728,0.011935049918712826,0.00981345470248186,0.012727466342195173,0.014108573548957086,0.013918208801356859,0.013728803476840296,0.012329360398513263,0.010195136877704935,0.013572136548059846,0.013339606533830314,0.012815492947068506,0.01442810390862329,1.0164285468017586,0.00721263143421508,0.007021197126250185,0.01079903229586721,0.020552531030323378,0.007663819480839532,0.010937195796951524,0.014312771602059302,0.007204448992779999,0.0063606216039823705,0.004276359397572272,0.009035236504083383,0.008405484289694518,0.0055183144286379444,0.008102574008626877,0.01072715175580574,0.0009412264186632426;0.061916815397077586,0.036413239318173155,0.11392052342649722,0.10071249169133961,0.11440645134351521,0.1050830236657269,0.09028051652975623,0.09776123859450433,0.08917176227706194,0.09766704980685374,0.08059445280969686,0.09245063010532248,0.09493514938204045,0.08156937221014238,0.10284587526199376,0.08535393931786847,0.047883227003069205,0.08448575502763656,0.06014425851161908,1.0380244402524381,0.025842436406350148,0.08084256149190702,0.04951521506920874,0.049998271282129955,0.05592890805340788,0.048735017728183984,0.028868085543461677,0.017231035280600347,0.014012964233771403,0.030621688590266618,0.04051812087579953,0.025935710831959446,0.05070655033285593,0.039470901597424835,0.005370644577229172;0.028193028337462015,0.014160860720679526,0.05041431407291643,0.0488459926560095,0.05833920486856516,0.04011303679875033,0.03534958213340101,0.029528436391500178,0.039352861646974845,0.04131919029242462,0.03370404688790155,0.03565873170941408,0.036001038372199395,0.03047836794304754,0.04234551677094998,0.04378335518892144,0.01760861438106417,0.04632232281875658,0.02630784029388927,0.012046795138423348,1.0128943401730843,0.038504699036235226,0.025123872827307762,0.018976030949892034,0.02296822896865362,0.021115357779375163,0.015985716120596523,0.011431762231974809,0.008115162918525643,0.015983868368698875,0.01762229932784274,0.011980119821487674,0.02256827697154685,0.02096115722864231,0.0025471270782150075;0.0058717334721794575,0.007574734242009742,0.011714033473740554,0.013335421302486692,0.014104810479257011,0.01249607149478149,0.014245174073483306,0.008782008527172567,0.012285954960713762,0.013465993979067684,0.013654337433782283,0.01321963624253148,0.014312917567283076,0.012313490124684363,0.012257920800849252,0.011226581403985936,0.008695667675149637,0.013784890059812899,0.011221369395340039,0.012104190811402635,0.010284501074426466,1.016283502264235,0.014537869171323957,0.013285457864089438,0.02728038119572079,0.03123510950034637,0.014774595381773137,0.017524536084801968,0.00613644559611474,0.018974266526437574,0.017128421589348797,0.013041953381427853,0.014235797699115147,0.01911538519899296,0.001027083298325752;0.02752488425117668,0.030136609713768955,0.048883486185000866,0.05077070969734346,0.0504977856046939,0.05123689774136941,0.041755668176741166,0.0754854716309125,0.04281754916282509,0.04323271156274307,0.060918354227548634,0.04422312887618235,0.03642496707670224,0.028501330626273254,0.036893774985645486,0.04184310497784264,0.03655225602017148,0.0448355487778395,0.03134720045140438,0.030800812736012196,0.020251872988619378,0.02672636381690118,1.0650939539451236,0.033042107991396695,0.03360102492992682,0.0809379838647505,0.018209317215377666,0.012875647978020729,0.0072092462659943115,0.014723750802034563,0.022225173692632088,0.01737720237395118,0.01901105883339076,0.02124274098348231,0.00374490589148783;0.0059811740100390864,0.010167724451941333,0.011812651928695211,0.012738085882984368,0.012202763483607833,0.014998393419769255,0.008648363379806479,0.011413748203147877,0.008992309317894492,0.00965885352953177,0.015774298920217773,0.01359908656255171,0.009831166673636755,0.007466354847551429,0.009720782190065115,0.008787157399434246,0.007098708468852179,0.009635815651172653,0.005725229840716942,0.008706110678514739,0.005424168905524061,0.006007089364157824,0.007965448864163038,1.1813154142278286,0.007869839480305485,0.010388749567244393,0.003394068237977469,0.0024934519993860746,0.004312152253508198,0.0037717188942500714,0.003944353315258415,0.002772218604657087,0.003369028544374187,0.004295532989201158,0.0009890027889366034;0.002546886338401771,0.00317939340765294,0.004497108362287381,0.005434616276256935,0.00635373642445474,0.005256815878202307,0.005713414540552272,0.003700683437440215,0.0048381627150898155,0.004965092187951848,0.004794230286324792,0.004341046191127814,0.005371977099911935,0.004836110252188745,0.005012252689265415,0.004320454512086438,0.002836939453939797,0.004373452614409641,0.004666191201627538,0.004868100440655433,0.003231575526942526,0.003728220823482299,0.005487979638506561,0.01051438477568169,1.0351018000167407,0.018463464847578617,0.006019636210587049,0.00542868126484768,0.0017335567686111357,0.006033513189668244,0.006390287474424122,0.0046941364576666925,0.003266038714092406,0.006973564075493527,0.0004025364510020426;0.011928261054192547,0.012224755004944724,0.02184725565158265,0.019850329808400097,0.021175280350737725,0.023543523096762685,0.02445029795796074,0.022799307654565667,0.018459558772708967,0.019864725957992723,0.02388645177613019,0.02002371410126674,0.018230151730416668,0.014885476112118934,0.019011384294175624,0.017311532721024987,0.0131602983344754,0.02687507365294242,0.023835380222903213,0.029625463843812407,0.01896211797066986,0.01805595944317497,0.05413889275180426,0.1590251335753029,0.11760515392671558,1.1267142570550657,0.011132768872726052,0.00969569272297758,0.005053653658906178,0.012390229477039716,0.01276616802473129,0.008205134532473202,0.010630161037366923,0.015049859698305463,0.001477036336313186;0.014829690611088622,0.015343149640935458,0.023812523377088432,0.02807350559321498,0.027465130007210774,0.025762236275190302,0.03517436907087642,0.02137875460435637,0.027578050809477367,0.025639930544161187,0.025558132697197068,0.027457224507624403,0.02699637046113297,0.027212262947146796,0.025863805513042838,0.03101163632655516,0.021100349395181312,0.032096725087591635,0.03340287039756903,0.03204183297606342,0.034567166165402154,0.031353477371917134,0.035782877801578586,0.039265041815500216,0.04300409779012096,0.04478377583039539,1.1487299267772426,0.05228753642620942,0.014803359146684077,0.04245162306865799,0.039041013531309086,0.02145730839037537,0.028828905203970783,0.04114988946874678,0.0029743781774238913;0.04617295693937615,0.05297442259367682,0.0625864683590362,0.08112756349414958,0.0711830544339703,0.06560460866872185,0.07132057912561156,0.0637931169055641,0.06492956946246183,0.06299125032262361,0.07195742718646472,0.0683931266774514,0.06472699185904311,0.05605316967219697,0.06485198337694029,0.07476300503361694,0.06110124008355474,0.07029549387621327,0.05521587532860217,0.059919348826823454,0.06521296211819205,0.06392544639913895,0.09143288387747998,0.06710986386602245,0.07914195074958841,0.08349990857953235,0.04936415958812997,1.2926521813985108,0.11401522109941492,0.07277927301725975,0.05576565360302743,0.03742040099261565,0.05886712091132843,0.08939378183266204,0.01559068063491294;0.010952216355745045,0.013381682403656264,0.02016053506961614,0.022695678874919977,0.024817579997915517,0.022275755189239056,0.027977611164236194,0.016380315772213692,0.019974686357758592,0.022008164149981777,0.020124930801652088,0.020639047342052366,0.02150942559966378,0.018373771154427797,0.02286145254441599,0.02208234147679596,0.015204610736624047,0.02691851850861302,0.035010476775035104,0.029585481953684725,0.05313923383734584,0.0417169969856211,0.022386832736828944,0.029003560884611,0.02615202793774301,0.03707192646546401,0.026561412289701367,0.04084679939696402,1.0436196218088472,0.03698346760255663,0.02571800461532839,0.02847356654647034,0.048681488395733025,0.04198916766095753,0.001848819667872;0.05351422206172465,0.06888382047427546,0.10733308815809417,0.10157522038733491,0.09970156704797101,0.09827721965130327,0.14962390454140206,0.08245407981612399,0.14689362857796634,0.12166367331459065,0.10483547412764213,0.10336008192954502,0.1209867504564397,0.12115022734210372,0.13322814181838505,0.0962266909884717,0.08373320876740502,0.1303348975857915,0.10867932815963177,0.09916362403503491,0.10228183634339053,0.10274325100903454,0.10179393881425729,0.08748327126544289,0.13610186354204543,0.13330752575407906,0.11663512053295946,0.18107661238072442,0.06982215706777599,1.2126009895143395,0.1402448812460579,0.07115751106380815,0.1214146311909224,0.1475489266657713,0.011782123623338631;0.0032030714891546947,0.004339468483285942,0.005012734443755909,0.004113822955288558,0.004139936267799915,0.00666149767562254,0.007321869514405909,0.0048427753775731434,0.006195929830224201,0.0056834238779704975,0.006025645560459709,0.006580554710830091,0.004741501226972323,0.0039853680599659606,0.004772479118484735,0.00524998844515336,0.007121991967796547,0.004906003133160539,0.004852205161619513,0.003113628005212319,0.004189985583128243,0.005860161131315597,0.006142668019509373,0.00852502071334504,0.01178439312905327,0.006178815677739057,0.0047811950438618,0.0036961181642669876,0.004895548787371586,0.005119286313068105,1.0100723626339791,0.006178075045887805,0.006483533164335778,0.011253289860796985,0.00048083689646524037;0.0011995417301049172,0.00100536471511413,0.0015849603385450987,0.001579504662624987,0.001650424111565346,0.001520039618698693,0.0017767113408610243,0.001436745135632405,0.0021905676694149905,0.0019097280625970923,0.0016330254974870433,0.0017140145264548272,0.002035474537061756,0.0018511513615498611,0.002215317912764533,0.0014627158085769552,0.0015091793699039179,0.001653884750678681,0.0017045525809309362,0.0013804274047068779,0.001675177908594843,0.0014928286327895086,0.0019320887514552045,0.0013051410816035652,0.0031864762351309847,0.002355683837555816,0.0022955199412553213,0.002316149047423426,0.0008247064724990695,0.003337237713913728,0.004973883911045951,1.0159594265151293,0.002310345331332445,0.0026594524602795507,0.0001563377275810799;0.0018812080380427086,0.0008513170508209248,0.0015471796531422617,0.0013773843593219328,0.0020099158163958577,0.0015496813939214387,0.001305517002954022,0.0009387714828938069,0.0013184444087589342,0.0012592871325643206,0.001560100748356678,0.0013665513154439456,0.001783892897996361,0.001242745872866931,0.0014523314159908792,0.0012450441328093096,0.0009735836927192425,0.001223714890657536,0.001089710314952257,0.0008614175469747739,0.0007909118933576981,0.0016501637434245989,0.0011491139623933373,0.0009351504487367514,0.001096480604754559,0.0011387817915537559,0.0010956843979811073,0.0011023084008501894,0.000374359226978317,0.001078082448647118,0.006286819960736623,0.0020522629442138373,1.0351003344842824,0.0020079866282686296,0.00013467099661175263;0.009804464170397814,0.013188124474043323,0.017252225384587348,0.017910259641055488,0.020475109486120493,0.017650824356823764,0.028472165656753486,0.014361747722888828,0.02043083607921665,0.018334789538092228,0.018264555161656055,0.018383032558032936,0.017301360189811335,0.014767440175975071,0.018292606243854266,0.016028419152466784,0.01481433219375426,0.01881531767644252,0.016649368582467183,0.015058272320673314,0.016115623131562732,0.02405290661461408,0.023296523464543292,0.016322922366225345,0.01950162622261992,0.027406686756725297,0.02859704872656406,0.022124244261177668,0.013782602973718312,0.036055449027089265,0.028147384299187415,0.018900078896233897,0.02382079904010038,1.0942487447609561,0.003107687998246338;4.1229659944413185e-05,5.387496237905251e-05,7.158855814741528e-05,0.0001737070908566258,9.633132971063866e-05,8.794205422328264e-05,8.719132144140663e-05,6.371065274661824e-05,6.908834773297211e-05,7.187267373407475e-05,7.260153934141325e-05,6.720821076695158e-05,8.385050179195456e-05,5.7349249499994296e-05,0.00011370260263912743,6.250684472957683e-05,4.154245010783393e-05,0.00011074597871912388,7.93810686779086e-05,4.256229898102654e-05,7.251645449462752e-05,9.47337369980379e-05,0.00015766130333058794,4.5532324659688575e-05,5.916598988822899e-05,6.365020775729106e-05,7.030445696386904e-05,0.00011393586343063972,0.00024396536488352635,0.00010617577244001526,0.00011041475875295549,6.761857995012955e-05,9.71599325717458e-05,0.0001611670130576232,1.0001049195158025;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            1.16627557e+00, 4.57397835e-03, 3.62216629e-01, 1.03410891e-01, 1.45429358e-01,
            1.98016500e-01, 3.65721220e-02, 8.41306471e-03, 2.26597856e-02, 3.10510025e-02,
            1.10934062e-02, 8.77802331e-03, 8.92311671e-03, 8.03232300e-03, 9.76085720e-03,
            3.88149366e-02, 5.24380161e-03, 1.75692568e-02, 6.92400843e-03, 8.42703075e-03,
            8.12406837e-03, 1.05489493e-01, 8.40933335e-03, 9.70093577e-03, 9.52692147e-03,
            1.66861673e-02, 4.97876695e-03, 4.62211585e-03, 3.26160900e-03, 6.91180531e-03,
            1.09909619e-02, 1.06971784e-02, 1.31596217e-02, 1.24976567e-02, 3.49457700e-02
        ],
              [
                  2.28566761e-02, 1.11067029e+00, 2.59519508e-02, 3.53945706e-02, 3.02532510e-02,
                  3.40244627e-02, 3.05754203e-02, 5.60844689e-01, 9.30796851e-02, 4.95335820e-02,
                  1.27741309e-01, 1.14630218e-01, 4.17493508e-02, 2.96443735e-02, 3.51836775e-02,
                  3.44511732e-02, 1.63740328e-01, 6.25670784e-02, 1.81163246e-02, 1.08312172e-02,
                  1.10974624e-02, 1.89700123e-02, 4.92755450e-02, 5.44720163e-02, 6.90216387e-02,
                  3.24859407e-02, 1.14168720e-02, 7.19474162e-03, 8.68991919e-03, 1.17332361e-02,
                  1.99592227e-02, 1.27545165e-02, 1.80235618e-02, 1.81937937e-02, 7.16010182e-02
              ],
              [
                  9.72134324e-02, 4.93053655e-03, 1.23105299e+00, 2.93623123e-02, 1.80165908e-01,
                  2.71226146e-02, 1.53955091e-02, 8.31333438e-03, 2.72167203e-02, 1.94220510e-02,
                  1.17410797e-02, 1.04658322e-02, 1.05982723e-02, 9.69495465e-03, 1.04335767e-02,
                  1.46397913e-02, 6.05071831e-03, 1.04596235e-02, 7.60214869e-03, 1.03080821e-02,
                  9.87986343e-03, 1.99287857e-01, 8.43441443e-03, 1.42859038e-02, 1.44551297e-02,
                  1.24390238e-02, 6.97759789e-03, 6.30402764e-03, 2.92833289e-03, 8.69012456e-03,
                  1.56463842e-02, 1.58118145e-02, 2.28094160e-02, 1.66180809e-02, 6.78420701e-03
              ],
              [
                  5.83673238e-03, 4.12261822e-03, 8.36702210e-03, 1.57429565e+00, 1.27787834e-01,
                  1.17566656e-02, 1.79223215e-02, 5.02816152e-03, 1.14625812e-02, 3.30055991e-02,
                  1.22936369e-02, 9.29469843e-03, 1.05751257e-02, 9.57051476e-03, 1.67064431e-02,
                  4.55475915e-02, 4.54959914e-03, 9.90184607e-03, 6.87761927e-03, 6.12939584e-03,
                  6.74876572e-03, 8.16189508e-03, 6.95960946e-03, 9.28293960e-03, 7.51309669e-03,
                  7.10804302e-03, 3.59156880e-03, 2.83639846e-03, 2.03671544e-03, 5.13145130e-03,
                  7.79576723e-03, 3.83371663e-03, 9.13206112e-03, 1.08675560e-02, 7.22102362e-04
              ],
              [
                  5.50928284e-04, 3.52815685e-04, 7.66391156e-04, 2.53445961e-02, 1.28536725e+00,
                  1.46348676e-03, 1.82109334e-03, 4.70840339e-04, 9.57212361e-04, 2.41188591e-03,
                  1.00385935e-03, 9.07109547e-04, 1.05210379e-03, 1.16060959e-03, 4.40491501e-03,
                  8.47713115e-03, 4.58586792e-04, 8.12742705e-04, 1.17630473e-03, 7.08684566e-04,
                  6.37963988e-04, 6.03855044e-04, 8.67247490e-04, 7.27203777e-04, 8.19848547e-04,
                  7.26575525e-04, 6.16376100e-04, 2.72424198e-04, 1.65345203e-04, 4.53869826e-04,
                  1.40090791e-03, 4.00022652e-04, 7.35737631e-04, 1.09992922e-03, 6.59120489e-05
              ],
              [
                  4.79194163e-03, 4.72867908e-03, 7.23112099e-03, 7.91704629e-03, 8.72091407e-03,
                  1.36095453e+00, 2.60476963e-02, 4.75880371e-03, 6.61505696e-03, 9.91408044e-03,
                  1.78868361e-02, 1.29564069e-02, 1.11295453e-02, 8.08017906e-03, 1.13700207e-02,
                  1.12140044e-01, 4.65504792e-03, 4.91448353e-02, 5.48482816e-03, 3.81376198e-03,
                  3.81326754e-03, 6.68314828e-03, 5.20564657e-03, 4.21666514e-03, 4.24188215e-03,
                  7.21602924e-03, 3.47503031e-03, 2.67636331e-03, 5.77211543e-03, 4.01100576e-03,
                  6.57430244e-03, 6.69384625e-03, 5.13576524e-03, 7.65787698e-03, 7.50807001e-04
              ],
              [
                  1.48494108e-02, 1.22054847e-02, 5.41982158e-02, 4.21789456e-02, 4.94538795e-02,
                  4.12550614e-02, 1.34964734e+00, 1.60895135e-02, 4.09628760e-02, 4.59018376e-02,
                  4.86005030e-02, 2.46266432e-02, 2.88426209e-02, 3.20831435e-02, 2.70031085e-02,
                  4.50505536e-02, 1.48320043e-02, 2.56714095e-02, 2.35435639e-02, 2.35089269e-02,
                  2.29637812e-02, 2.82070065e-02, 2.13160263e-02, 1.82060742e-02, 2.11914038e-02,
                  3.28229890e-02, 2.36537343e-02, 3.07357202e-02, 9.53299313e-03, 3.93476234e-02,
                  3.59536787e-02, 3.25778485e-02, 2.53426018e-02, 4.60774997e-02, 2.15319749e-03
              ],
              [
                  2.45720007e-02, 1.59174679e-02, 2.12212193e-02, 2.84525773e-02, 2.50626134e-02,
                  2.45610321e-02, 2.07407975e-02, 1.12639741e+00, 7.52744832e-02, 3.95743581e-02,
                  4.14188756e-02, 3.41940932e-02, 2.09137686e-02, 1.66519077e-02, 1.87711992e-02,
                  2.00079886e-02, 4.32533367e-02, 2.86821556e-02, 1.51251970e-02, 1.18689649e-02,
                  9.65647934e-03, 1.40500407e-02, 7.16982982e-02, 8.82049893e-02, 1.16534781e-01,
                  3.96193630e-02, 1.00832202e-02, 6.50077670e-03, 5.01119888e-03, 1.14521478e-02,
                  1.72130522e-02, 8.98587413e-03, 1.36821583e-02, 1.40989616e-02, 2.06668784e-03
              ],
              [
                  7.01389375e-02, 2.65908498e-02, 5.56862036e-02, 1.68948859e-01, 1.20016465e-01,
                  9.43208546e-02, 8.87359886e-02, 4.89967387e-02, 1.36184895e+00, 3.71519131e-01,
                  8.53163520e-02, 5.33620184e-02, 5.45300933e-02, 6.90321141e-02, 6.44313613e-02,
                  7.91767072e-02, 2.54882715e-02, 5.08728322e-02, 2.97330715e-02, 1.35169928e-02,
                  1.27061334e-02, 2.70621799e-02, 2.34517644e-02, 2.38809658e-02, 2.45644621e-02,
                  2.42386782e-02, 1.36149420e-02, 9.07362630e-03, 8.94386985e-03, 1.85752288e-02,
                  2.77506326e-02, 1.48444354e-02, 1.02363418e-01, 3.01808623e-02, 4.56598129e-03
              ],
              [
                  1.46185575e-02, 1.36528605e-02, 3.84886858e-02, 3.47882200e-02, 7.69072124e-02,
                  2.57804133e-02, 3.69839634e-02, 1.64922026e-02, 3.77247088e-02, 1.19754915e+00,
                  2.96926394e-02, 2.48497676e-02, 5.10751578e-02, 5.49927237e-02, 7.54983325e-02,
                  5.59099857e-02, 1.22767615e-02, 3.81198753e-02, 3.23594913e-02, 1.03950926e-02,
                  1.06927920e-02, 1.63335465e-02, 2.40525872e-02, 1.48161433e-02, 1.71139507e-02,
                  1.85936224e-02, 1.11708845e-02, 5.42301430e-03, 5.13809741e-03, 1.01103279e-02,
                  1.27327105e-02, 7.04131276e-03, 1.51597465e-02, 1.39979140e-02, 1.77942715e-03
              ],
              [
                  5.49191317e-03, 9.28468778e-03, 1.22342606e-02, 9.42989080e-03, 9.11236164e-03,
                  1.67937622e-02, 6.95234589e-03, 1.00579719e-02, 1.38076891e-02, 1.48290813e-02,
                  1.17490257e+00, 2.43920571e-02, 1.77079040e-02, 2.47283868e-02, 2.03340513e-02,
                  1.65062262e-02, 8.64513711e-03, 1.23019943e-01, 9.96641814e-03, 3.67901594e-03,
                  3.87206947e-03, 8.72045408e-03, 6.80395238e-03, 5.11428531e-03, 5.97834852e-03,
                  7.43189005e-03, 5.76958350e-03, 2.75029681e-03, 7.16796791e-03, 4.49649366e-03,
                  7.34477248e-03, 5.39371114e-03, 6.83428738e-03, 6.74782140e-03, 9.93750526e-04
              ],
              [
                  2.40472076e-02, 5.06045076e-02, 4.17203055e-02, 4.18404445e-02, 5.01625029e-02,
                  7.28762317e-02, 4.37932214e-02, 4.86821595e-02, 5.22072802e-02, 7.65287235e-02,
                  9.70645931e-02, 1.54336627e+00, 3.34716608e-01, 1.87261420e-01, 2.46552715e-01,
                  1.57172768e-01, 4.09327672e-02, 1.84734819e-01, 6.71835903e-02, 1.74701801e-02,
                  1.64663483e-02, 2.54350749e-02, 3.90610342e-02, 3.97468506e-02, 4.19312059e-02,
                  4.09371573e-02, 2.60528481e-02, 1.15676869e-02, 1.55960151e-02, 2.21078507e-02,
                  3.08832481e-02, 1.62545061e-02, 2.37451336e-02, 2.78390648e-02, 5.13072124e-03
              ],
              [
                  1.74669156e-02, 2.91467038e-02, 1.91301055e-02, 3.34807880e-02, 2.85657117e-02,
                  3.19368760e-02, 2.41082455e-02, 3.12994326e-02, 2.69817960e-02, 3.68706099e-02,
                  4.97140568e-02, 6.15067564e-02, 1.23551943e+00, 5.12621860e-02, 9.40610994e-02,
                  3.71999683e-02, 2.51037402e-02, 4.63492731e-02, 4.55050063e-02, 8.99297844e-03,
                  8.39153520e-03, 1.19860898e-02, 2.03021964e-02, 2.72196563e-02, 2.61457041e-02,
                  2.34831921e-02, 1.12706103e-02, 6.04116443e-03, 6.22569880e-03, 1.05915860e-02,
                  1.77199254e-02, 8.29441043e-03, 1.35804331e-02, 1.38469999e-02, 3.11021357e-03
              ],
              [
                  2.11020493e-02, 3.53849674e-02, 3.38213941e-02, 4.83851135e-02, 4.35813303e-02,
                  4.76140717e-02, 5.25745984e-02, 4.13077455e-02, 5.36111974e-02, 6.30745433e-02,
                  6.05708811e-02, 8.23985445e-02, 2.54139811e-01, 1.67276579e+00, 2.06417616e-01,
                  9.08073262e-02, 7.97582061e-02, 1.12278495e-01, 9.43881429e-02, 3.08076876e-02,
                  2.96464237e-02, 3.15357309e-02, 4.57480376e-02, 3.98731248e-02, 4.76726296e-02,
                  5.08162988e-02, 1.00653643e-01, 2.72984614e-02, 1.70517210e-02, 5.64995173e-02,
                  5.90292877e-02, 3.59067706e-02, 6.74812063e-02, 5.23112151e-02, 5.33441119e-03
              ],
              [
                  1.65995101e-02, 1.68524414e-02, 1.85045015e-02, 2.11895536e-02, 2.10391374e-02,
                  2.43503254e-02, 2.04062674e-02, 1.95146484e-02, 1.78316814e-02, 2.34746849e-02,
                  2.82413244e-02, 3.17578215e-02, 4.84864192e-02, 2.36534085e-02, 1.49393357e+00,
                  2.70551819e-02, 1.74002933e-02, 2.60199366e-02, 1.30099014e-01, 1.53286636e-02,
                  1.24248789e-02, 1.30554188e-02, 7.45280357e-02, 8.28954791e-02, 1.02971911e-01,
                  4.53308038e-02, 1.29725581e-02, 7.90850262e-03, 5.87909946e-03, 1.43485625e-02,
                  3.75882906e-02, 9.83966302e-03, 1.02084409e-02, 2.23152871e-02, 2.17726513e-03
              ],
              [
                  2.25814753e-03, 2.75874978e-03, 3.80914654e-03, 9.98793111e-03, 7.39531949e-03,
                  8.44753594e-03, 8.76500675e-03, 3.47086648e-03, 4.97051986e-03, 7.17396594e-03,
                  7.70002572e-03, 1.83114677e-02, 1.07523670e-02, 7.65247243e-03, 1.26032072e-02,
                  1.05750787e+00, 3.83175646e-03, 9.98251661e-03, 4.78590580e-03, 2.53214369e-03,
                  2.81448570e-03, 4.49418577e-03, 5.21789952e-03, 3.31501158e-03, 4.83761520e-03,
                  4.31774528e-03, 2.94300470e-03, 2.42434049e-03, 2.55244907e-03, 3.63934463e-03,
                  5.93981323e-03, 5.34136473e-03, 5.20417031e-03, 7.98019043e-03, 1.86823459e-03
              ],
              [
                  2.57040685e-02, 4.83423962e-02, 3.82530301e-02, 5.19591418e-02, 3.71941844e-02,
                  4.69711604e-02, 5.23760240e-02, 7.23503471e-02, 5.95185586e-02, 5.58272119e-02,
                  8.01964353e-02, 6.97276926e-02, 4.24879413e-02, 3.33944668e-02, 3.83182885e-02,
                  3.49979001e-02, 1.18222675e+00, 3.64110006e-02, 2.68142180e-02, 1.50974278e-02,
                  2.26337244e-02, 4.17407568e-02, 3.38322645e-02, 2.18510240e-02, 2.66389476e-02,
                  3.52653089e-02, 2.09231048e-02, 1.29428166e-02, 1.47515922e-02, 1.63275706e-02,
                  2.86034576e-02, 3.23126956e-02, 2.69965564e-02, 3.10700360e-02, 4.49963490e-03
              ],
              [
                  7.17638804e-03, 1.10351065e-02, 9.05138684e-03, 1.00105277e-02, 8.87788117e-03,
                  1.06453870e-02, 1.05302040e-02, 1.47591961e-02, 1.07579741e-02, 1.01248937e-02,
                  1.44408535e-02, 1.23852916e-02, 1.00770013e-02, 8.07645340e-03, 9.27645217e-03,
                  9.08877188e-03, 2.40011428e-02, 1.05949216e+00, 1.10657751e-02, 7.49444896e-03,
                  9.28969541e-03, 1.17397530e-02, 1.50523901e-02, 9.05804031e-03, 1.02849357e-02,
                  2.03806599e-02, 1.60466156e-02, 1.01209648e-02, 3.69180307e-02, 9.53616853e-03,
                  2.38895375e-02, 1.51440630e-02, 1.29074093e-02, 1.54637069e-02, 1.65786878e-03
              ],
              [
                  9.64715532e-03, 6.62762659e-03, 1.48189026e-02, 1.34041896e-02, 1.54704645e-02,
                  1.44895319e-02, 1.19350499e-02, 9.81345470e-03, 1.27274663e-02, 1.41085735e-02,
                  1.39182088e-02, 1.37288035e-02, 1.23293604e-02, 1.01951369e-02, 1.35721365e-02,
                  1.33396065e-02, 1.28154929e-02, 1.44281039e-02, 1.01642855e+00, 7.21263143e-03,
                  7.02119713e-03, 1.07990323e-02, 2.05525310e-02, 7.66381948e-03, 1.09371958e-02,
                  1.43127716e-02, 7.20444899e-03, 6.36062160e-03, 4.27635940e-03, 9.03523650e-03,
                  8.40548429e-03, 5.51831443e-03, 8.10257401e-03, 1.07271518e-02, 9.41226419e-04
              ],
              [
                  6.19168154e-02, 3.64132393e-02, 1.13920523e-01, 1.00712492e-01, 1.14406451e-01,
                  1.05083024e-01, 9.02805165e-02, 9.77612386e-02, 8.91717623e-02, 9.76670498e-02,
                  8.05944528e-02, 9.24506301e-02, 9.49351494e-02, 8.15693722e-02, 1.02845875e-01,
                  8.53539393e-02, 4.78832270e-02, 8.44857550e-02, 6.01442585e-02, 1.03802444e+00,
                  2.58424364e-02, 8.08425615e-02, 4.95152151e-02, 4.99982713e-02, 5.59289081e-02,
                  4.87350177e-02, 2.88680855e-02, 1.72310353e-02, 1.40129642e-02, 3.06216886e-02,
                  4.05181209e-02, 2.59357108e-02, 5.07065503e-02, 3.94709016e-02, 5.37064458e-03
              ],
              [
                  2.81930283e-02, 1.41608607e-02, 5.04143141e-02, 4.88459927e-02, 5.83392049e-02,
                  4.01130368e-02, 3.53495821e-02, 2.95284364e-02, 3.93528616e-02, 4.13191903e-02,
                  3.37040469e-02, 3.56587317e-02, 3.60010384e-02, 3.04783679e-02, 4.23455168e-02,
                  4.37833552e-02, 1.76086144e-02, 4.63223228e-02, 2.63078403e-02, 1.20467951e-02,
                  1.01289434e+00, 3.85046990e-02, 2.51238728e-02, 1.89760309e-02, 2.29682290e-02,
                  2.11153578e-02, 1.59857161e-02, 1.14317622e-02, 8.11516292e-03, 1.59838684e-02,
                  1.76222993e-02, 1.19801198e-02, 2.25682770e-02, 2.09611572e-02, 2.54712708e-03
              ],
              [
                  5.87173347e-03, 7.57473424e-03, 1.17140335e-02, 1.33354213e-02, 1.41048105e-02,
                  1.24960715e-02, 1.42451741e-02, 8.78200853e-03, 1.22859550e-02, 1.34659940e-02,
                  1.36543374e-02, 1.32196362e-02, 1.43129176e-02, 1.23134901e-02, 1.22579208e-02,
                  1.12265814e-02, 8.69566768e-03, 1.37848901e-02, 1.12213694e-02, 1.21041908e-02,
                  1.02845011e-02, 1.01628350e+00, 1.45378692e-02, 1.32854579e-02, 2.72803812e-02,
                  3.12351095e-02, 1.47745954e-02, 1.75245361e-02, 6.13644560e-03, 1.89742665e-02,
                  1.71284216e-02, 1.30419534e-02, 1.42357977e-02, 1.91153852e-02, 1.02708330e-03
              ],
              [
                  2.75248843e-02, 3.01366097e-02, 4.88834862e-02, 5.07707097e-02, 5.04977856e-02,
                  5.12368977e-02, 4.17556682e-02, 7.54854716e-02, 4.28175492e-02, 4.32327116e-02,
                  6.09183542e-02, 4.42231289e-02, 3.64249671e-02, 2.85013306e-02, 3.68937750e-02,
                  4.18431050e-02, 3.65522560e-02, 4.48355488e-02, 3.13472005e-02, 3.08008127e-02,
                  2.02518730e-02, 2.67263638e-02, 1.06509395e+00, 3.30421080e-02, 3.36010249e-02,
                  8.09379839e-02, 1.82093172e-02, 1.28756480e-02, 7.20924627e-03, 1.47237508e-02,
                  2.22251737e-02, 1.73772024e-02, 1.90110588e-02, 2.12427410e-02, 3.74490589e-03
              ],
              [
                  5.98117401e-03, 1.01677245e-02, 1.18126519e-02, 1.27380859e-02, 1.22027635e-02,
                  1.49983934e-02, 8.64836338e-03, 1.14137482e-02, 8.99230932e-03, 9.65885353e-03,
                  1.57742989e-02, 1.35990866e-02, 9.83116667e-03, 7.46635485e-03, 9.72078219e-03,
                  8.78715740e-03, 7.09870847e-03, 9.63581565e-03, 5.72522984e-03, 8.70611068e-03,
                  5.42416891e-03, 6.00708936e-03, 7.96544886e-03, 1.18131541e+00, 7.86983948e-03,
                  1.03887496e-02, 3.39406824e-03, 2.49345200e-03, 4.31215225e-03, 3.77171889e-03,
                  3.94435332e-03, 2.77221860e-03, 3.36902854e-03, 4.29553299e-03, 9.89002789e-04
              ],
              [
                  2.54688634e-03, 3.17939341e-03, 4.49710836e-03, 5.43461628e-03, 6.35373642e-03,
                  5.25681588e-03, 5.71341454e-03, 3.70068344e-03, 4.83816272e-03, 4.96509219e-03,
                  4.79423029e-03, 4.34104619e-03, 5.37197710e-03, 4.83611025e-03, 5.01225269e-03,
                  4.32045451e-03, 2.83693945e-03, 4.37345261e-03, 4.66619120e-03, 4.86810044e-03,
                  3.23157553e-03, 3.72822082e-03, 5.48797964e-03, 1.05143848e-02, 1.03510180e+00,
                  1.84634648e-02, 6.01963621e-03, 5.42868126e-03, 1.73355677e-03, 6.03351319e-03,
                  6.39028747e-03, 4.69413646e-03, 3.26603871e-03, 6.97356408e-03, 4.02536451e-04
              ],
              [
                  1.19282611e-02, 1.22247550e-02, 2.18472557e-02, 1.98503298e-02, 2.11752804e-02,
                  2.35435231e-02, 2.44502980e-02, 2.27993077e-02, 1.84595588e-02, 1.98647260e-02,
                  2.38864518e-02, 2.00237141e-02, 1.82301517e-02, 1.48854761e-02, 1.90113843e-02,
                  1.73115327e-02, 1.31602983e-02, 2.68750737e-02, 2.38353802e-02, 2.96254638e-02,
                  1.89621180e-02, 1.80559594e-02, 5.41388928e-02, 1.59025134e-01, 1.17605154e-01,
                  1.12671426e+00, 1.11327689e-02, 9.69569272e-03, 5.05365366e-03, 1.23902295e-02,
                  1.27661680e-02, 8.20513453e-03, 1.06301610e-02, 1.50498597e-02, 1.47703634e-03
              ],
              [
                  1.48296906e-02, 1.53431496e-02, 2.38125234e-02, 2.80735056e-02, 2.74651300e-02,
                  2.57622363e-02, 3.51743691e-02, 2.13787546e-02, 2.75780508e-02, 2.56399305e-02,
                  2.55581327e-02, 2.74572245e-02, 2.69963705e-02, 2.72122629e-02, 2.58638055e-02,
                  3.10116363e-02, 2.11003494e-02, 3.20967251e-02, 3.34028704e-02, 3.20418330e-02,
                  3.45671662e-02, 3.13534774e-02, 3.57828778e-02, 3.92650418e-02, 4.30040978e-02,
                  4.47837758e-02, 1.14872993e+00, 5.22875364e-02, 1.48033591e-02, 4.24516231e-02,
                  3.90410135e-02, 2.14573084e-02, 2.88289052e-02, 4.11498895e-02, 2.97437818e-03
              ],
              [
                  4.61729569e-02, 5.29744226e-02, 6.25864684e-02, 8.11275635e-02, 7.11830544e-02,
                  6.56046087e-02, 7.13205791e-02, 6.37931169e-02, 6.49295695e-02, 6.29912503e-02,
                  7.19574272e-02, 6.83931267e-02, 6.47269919e-02, 5.60531697e-02, 6.48519834e-02,
                  7.47630050e-02, 6.11012401e-02, 7.02954939e-02, 5.52158753e-02, 5.99193488e-02,
                  6.52129621e-02, 6.39254464e-02, 9.14328839e-02, 6.71098639e-02, 7.91419507e-02,
                  8.34999086e-02, 4.93641596e-02, 1.29265218e+00, 1.14015221e-01, 7.27792730e-02,
                  5.57656536e-02, 3.74204010e-02, 5.88671209e-02, 8.93937818e-02, 1.55906806e-02
              ],
              [
                  1.09522164e-02, 1.33816824e-02, 2.01605351e-02, 2.26956789e-02, 2.48175800e-02,
                  2.22757552e-02, 2.79776112e-02, 1.63803158e-02, 1.99746864e-02, 2.20081641e-02,
                  2.01249308e-02, 2.06390473e-02, 2.15094256e-02, 1.83737712e-02, 2.28614525e-02,
                  2.20823415e-02, 1.52046107e-02, 2.69185185e-02, 3.50104768e-02, 2.95854820e-02,
                  5.31392338e-02, 4.17169970e-02, 2.23868327e-02, 2.90035609e-02, 2.61520279e-02,
                  3.70719265e-02, 2.65614123e-02, 4.08467994e-02, 1.04361962e+00, 3.69834676e-02,
                  2.57180046e-02, 2.84735665e-02, 4.86814884e-02, 4.19891677e-02, 1.84881967e-03
              ],
              [
                  5.35142221e-02, 6.88838205e-02, 1.07333088e-01, 1.01575220e-01, 9.97015670e-02,
                  9.82772197e-02, 1.49623905e-01, 8.24540798e-02, 1.46893629e-01, 1.21663673e-01,
                  1.04835474e-01, 1.03360082e-01, 1.20986750e-01, 1.21150227e-01, 1.33228142e-01,
                  9.62266910e-02, 8.37332088e-02, 1.30334898e-01, 1.08679328e-01, 9.91636240e-02,
                  1.02281836e-01, 1.02743251e-01, 1.01793939e-01, 8.74832713e-02, 1.36101864e-01,
                  1.33307526e-01, 1.16635121e-01, 1.81076612e-01, 6.98221571e-02, 1.21260099e+00,
                  1.40244881e-01, 7.11575111e-02, 1.21414631e-01, 1.47548927e-01, 1.17821236e-02
              ],
              [
                  3.20307149e-03, 4.33946848e-03, 5.01273444e-03, 4.11382296e-03, 4.13993627e-03,
                  6.66149768e-03, 7.32186951e-03, 4.84277538e-03, 6.19592983e-03, 5.68342388e-03,
                  6.02564556e-03, 6.58055471e-03, 4.74150123e-03, 3.98536806e-03, 4.77247912e-03,
                  5.24998845e-03, 7.12199197e-03, 4.90600313e-03, 4.85220516e-03, 3.11362801e-03,
                  4.18998558e-03, 5.86016113e-03, 6.14266802e-03, 8.52502071e-03, 1.17843931e-02,
                  6.17881568e-03, 4.78119504e-03, 3.69611816e-03, 4.89554879e-03, 5.11928631e-03,
                  1.01007236e+00, 6.17807505e-03, 6.48353316e-03, 1.12532899e-02, 4.80836896e-04
              ],
              [
                  1.19954173e-03, 1.00536472e-03, 1.58496034e-03, 1.57950466e-03, 1.65042411e-03,
                  1.52003962e-03, 1.77671134e-03, 1.43674514e-03, 2.19056767e-03, 1.90972806e-03,
                  1.63302550e-03, 1.71401453e-03, 2.03547454e-03, 1.85115136e-03, 2.21531791e-03,
                  1.46271581e-03, 1.50917937e-03, 1.65388475e-03, 1.70455258e-03, 1.38042740e-03,
                  1.67517791e-03, 1.49282863e-03, 1.93208875e-03, 1.30514108e-03, 3.18647624e-03,
                  2.35568384e-03, 2.29551994e-03, 2.31614905e-03, 8.24706472e-04, 3.33723771e-03,
                  4.97388391e-03, 1.01595943e+00, 2.31034533e-03, 2.65945246e-03, 1.56337728e-04
              ],
              [
                  1.88120804e-03, 8.51317051e-04, 1.54717965e-03, 1.37738436e-03, 2.00991582e-03,
                  1.54968139e-03, 1.30551700e-03, 9.38771483e-04, 1.31844441e-03, 1.25928713e-03,
                  1.56010075e-03, 1.36655132e-03, 1.78389290e-03, 1.24274587e-03, 1.45233142e-03,
                  1.24504413e-03, 9.73583693e-04, 1.22371489e-03, 1.08971031e-03, 8.61417547e-04,
                  7.90911893e-04, 1.65016374e-03, 1.14911396e-03, 9.35150449e-04, 1.09648060e-03,
                  1.13878179e-03, 1.09568440e-03, 1.10230840e-03, 3.74359227e-04, 1.07808245e-03,
                  6.28681996e-03, 2.05226294e-03, 1.03510033e+00, 2.00798663e-03, 1.34670997e-04
              ],
              [
                  9.80446417e-03, 1.31881245e-02, 1.72522254e-02, 1.79102596e-02, 2.04751095e-02,
                  1.76508244e-02, 2.84721657e-02, 1.43617477e-02, 2.04308361e-02, 1.83347895e-02,
                  1.82645552e-02, 1.83830326e-02, 1.73013602e-02, 1.47674402e-02, 1.82926062e-02,
                  1.60284192e-02, 1.48143322e-02, 1.88153177e-02, 1.66493686e-02, 1.50582723e-02,
                  1.61156231e-02, 2.40529066e-02, 2.32965235e-02, 1.63229224e-02, 1.95016262e-02,
                  2.74066868e-02, 2.85970487e-02, 2.21242443e-02, 1.37826030e-02, 3.60554490e-02,
                  2.81473843e-02, 1.89000789e-02, 2.38207990e-02, 1.09424874e+00, 3.10768800e-03
              ],
              [
                  4.12296599e-05, 5.38749624e-05, 7.15885581e-05, 1.73707091e-04, 9.63313297e-05,
                  8.79420542e-05, 8.71913214e-05, 6.37106527e-05, 6.90883477e-05, 7.18726737e-05,
                  7.26015393e-05, 6.72082108e-05, 8.38505018e-05, 5.73492495e-05, 1.13702603e-04,
                  6.25068447e-05, 4.15424501e-05, 1.10745979e-04, 7.93810687e-05, 4.25622990e-05,
                  7.25164545e-05, 9.47337370e-05, 1.57661303e-04, 4.55323247e-05, 5.91659899e-05,
                  6.36502078e-05, 7.03044570e-05, 1.13935863e-04, 2.43965365e-04, 1.06175772e-04,
                  1.10414759e-04, 6.76185800e-05, 9.71599326e-05, 1.61167013e-04, 1.00010492e+00
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def leontief_matrix_2008():
    """
    Real Name: b'leontief matrix 2008'
    Original Eqn: b'1.1638212301054522,0.0038176569906683624,0.3682728950636825,0.11056608833961636,0.1496895452924789,0.19930499908712904,0.03806030062851875,0.008261740630409754,0.02349871984518568,0.032077202502195014,0.011400121521552776,0.00893466442682002,0.009082863627401124,0.008470236196262092,0.010247581506127179,0.04109257705571917,0.005150571715374996,0.017529088357208043,0.007158218082391231,0.008584183297629331,0.008169806593624113,0.10604173706593051,0.008370812507122582,0.009704701563220383,0.010054345759940572,0.017328421422614818,0.004871317284830459,0.004873410725205606,0.002979161483960454,0.007042723945807277,0.010797817143066683,0.010713486830228516,0.01304945126988863,0.012731196964826412,0.03663708018356744;0.02709924880465938,1.1007374375947763,0.030708713135473874,0.04259571772845429,0.036068965708413316,0.039873023768788964,0.03605018704388874,0.6542419837484819,0.10980226551221794,0.0583271840889115,0.1374904367746186,0.1238178240792729,0.04648503473397189,0.03430618058708534,0.04030804958289041,0.0399110919566339,0.18402223752447547,0.069521717196676,0.02083402102096935,0.012873808024220328,0.012708978342545973,0.02246114602628959,0.05836230378399283,0.06745991895313401,0.09476811880733617,0.04009520682354503,0.013321965447180778,0.00868288451099735,0.00917647206774968,0.013937009096128633,0.022384977933731544,0.015061107743826133,0.020855054059596315,0.02121786907026521,0.07369470082711697;0.09655543385880751,0.0040531340096681195,1.2334293288859222,0.03094809665834986,0.18469658519943005,0.02758874180817224,0.015622695777272278,0.008121547815968551,0.027499501553748185,0.01971787226429498,0.011875038376336654,0.010467967078267212,0.010678705808928898,0.010108212814161957,0.010919751155770348,0.015413186758873668,0.005796887721899374,0.010520576018391941,0.007608180603172614,0.010280414294673617,0.009753871345991401,0.1957946905750175,0.008344218825055857,0.013991812017820978,0.014673423983378092,0.0125883258060818,0.006600644472961417,0.006513428301696425,0.0026790412081541828,0.008663343196634902,0.015297281725643933,0.015265359561742381,0.021857806234591753,0.016574087124357498,0.00735493724931334;0.00601387467824049,0.003385050865156572,0.008825378475672616,1.626763517575819,0.13935550856703113,0.012923127446899833,0.019489735422697045,0.005464708435562569,0.012753510323711885,0.03687306691993242,0.01368839681245359,0.010437190975180696,0.011634490749239562,0.010771106816284843,0.01794014091521838,0.05049666732730253,0.004852728939001712,0.010529166219035347,0.007315731648460747,0.006481242206104004,0.006684072688310754,0.008570807102047091,0.00736947260018294,0.009617508989641447,0.008727660171755889,0.0075939539284654,0.0036898233889321504,0.003063938625061643,0.0020618021295954335,0.005391111295384505,0.007950095335507673,0.004092599049809147,0.009388587598623837,0.010864221882739427,0.0007041798297061388;0.0005793278311592471,0.00030854875462755805,0.000799884875973913,0.028906984845739857,1.3040805205724442,0.0016232969196239523,0.0018877574919383506,0.0005120941686714064,0.0010360846168361811,0.00278401253638974,0.0010734256791874387,0.0009625740121733678,0.0011181376308171185,0.0012823981658163699,0.004975077683186213,0.009453318494938082,0.0004638511011189371,0.0008685397348910062,0.0012389163229069456,0.0007007602213197698,0.0006104735990111235,0.0006331042049180569,0.0009014726083667298,0.0007728192810876211,0.0009338624337373305,0.0008174061378774972,0.0005754315183083951,0.0002925933473780421,0.00016654813131307107,0.0004776498752761064,0.0014484345292861288,0.0004333770770552647,0.0008210196118739607,0.001117250037219588,6.935994521846925e-05;0.0047184586753364855,0.0038225288981452565,0.007171406096296006,0.008227034061793766,0.008788881781340354,1.374667052459453,0.02679631908184386,0.004716610717337026,0.006627984757480234,0.009953214465004091,0.01819385005973322,0.013011033378248932,0.011105564808083316,0.008297027926645065,0.011337407597407827,0.11664952414660935,0.004354045008213317,0.04799914862625141,0.005475468656208938,0.0038041285524062127,0.003756258357821392,0.006610780953016044,0.005223745386119004,0.004094142130495822,0.004463469785189632,0.007027695383466218,0.0034049223729678015,0.00268925331494513,0.004578594295341955,0.004095281445766035,0.006482147603140946,0.006801970559914822,0.005128676643089737,0.007590775862088727,0.0007296980179819417;0.014680162533832539,0.01010254810362015,0.05416402404681667,0.043147934923387914,0.049916426402728475,0.04187249956923991,1.3541008910068595,0.016385731526213344,0.0408354577686324,0.046562269229508464,0.048665650058444844,0.024133716024530707,0.028116044091633572,0.03248843408966382,0.027110091640074448,0.04702718908512549,0.014000767536516101,0.025451788301858208,0.02340897121275771,0.023657559779645856,0.022411479416479002,0.027993220976878452,0.02125563405087605,0.017750606591395234,0.02196718033252081,0.03221511291893054,0.02283047444096648,0.03082636608516663,0.008795728305676747,0.039066389136944116,0.03532034202183689,0.0329464527373863,0.02482803019578143,0.04556711105826694,0.0019946057701217754;0.02988115435105737,0.01574063667178844,0.02634351489194873,0.0353244250414162,0.03147848752858669,0.030671172924542033,0.026319529567615546,1.2352964460892968,0.10280441003983154,0.051720826825288356,0.05290634002088037,0.04414455468071245,0.02652802494170185,0.021842268045023712,0.024441526385597535,0.025585712751804383,0.06119235794364155,0.034536342277116085,0.018617054064756798,0.014191636037145933,0.011689031491981049,0.017395583752593185,0.08154699221617774,0.10541261856264428,0.1552779735817345,0.04835416107937662,0.012273577269776691,0.008091648265035044,0.005856948705379256,0.013927534804176132,0.020247751700067727,0.011179677342902221,0.017025218556582428,0.017469427033602707,0.0023289195184967495;0.07082816800367613,0.022107463634394444,0.05623079181985281,0.162059084538794,0.1192193434139217,0.09607694498071262,0.0893436907019964,0.048560304800203,1.3640109676235859,0.3713279719250831,0.08503287516783815,0.05213886307095237,0.053149469584604425,0.06998214766284255,0.06508433082297038,0.08068049588673519,0.025030387407983246,0.050522224961035186,0.029102917942616865,0.013538875913975658,0.012346738039860175,0.027124343400864868,0.0233643160898425,0.023403671483730827,0.026283045584154088,0.024657816425029826,0.013325542393260432,0.009230246304181818,0.00800823883080125,0.018515578139611095,0.02672884929581997,0.014897719063769866,0.0988234213964909,0.029898774486348038,0.004445066810549868;0.014558315493123903,0.011204062330400786,0.03849619521132727,0.035829087538818284,0.07900762581777757,0.025472162826396697,0.0373257551510971,0.017091028847478772,0.038328068403063076,1.2028528838574983,0.029880590227365385,0.02446239467153291,0.04984683231233269,0.056318672938142335,0.07657403265174945,0.05781366224855975,0.01191701955284133,0.037857402425610455,0.031227879706034266,0.010607265188413538,0.0105497739749419,0.016405611189186414,0.024034734320060442,0.014777635487588796,0.0181875931407408,0.019152431253045162,0.011152365404735081,0.005578845299782744,0.004795954785619415,0.01020298692794978,0.012480207169881649,0.007165046934457172,0.01510406087474169,0.014092160131897881,0.0016927060549494742;0.005490092655014564,0.0075008710770451065,0.012232347412499756,0.009580830191218753,0.009187724026632205,0.016196803658002246,0.007015139997076344,0.009924301020468089,0.01388769425411707,0.014931127657228113,1.1771616822328284,0.024478134951892622,0.01773739026751681,0.0255098770916448,0.020945874650169928,0.017010493983125104,0.008134171206916884,0.12297408422527804,0.009876684696201128,0.00369589845574259,0.0038406317125396646,0.008781287886453456,0.006866976799741979,0.005073527005788598,0.006458842440732142,0.007624945694090365,0.005704387108014126,0.0028797377953761064,0.00687053102987668,0.0045740995871122216,0.0071728080127899385,0.0054638117586642415,0.006874738809656658,0.00682837016970446,0.000902660718186124;0.023952681058405905,0.04231867051160055,0.04154980554951761,0.042150384275774166,0.049479259341510325,0.07153638012752866,0.04441475174590838,0.04921511711979807,0.05235912312880741,0.07649776968572915,0.09612922112079966,1.5269339068212462,0.32331841038168224,0.18807434166049158,0.24796025919618664,0.15672222697573768,0.03917802466454461,0.1852679962503641,0.06521149527236723,0.01771718458193523,0.016355365503535935,0.025950002957592894,0.03931574711260721,0.038088875417734654,0.04489220088590615,0.04229861793464337,0.02591262809168623,0.012072113854469864,0.014707699014690606,0.02264241999456215,0.030642809809088768,0.016449803539390944,0.02402161705922074,0.028320327766684326,0.00477956915080975;0.018255454581197515,0.02452340685933948,0.019968946384162283,0.03497861714524127,0.029698081277258082,0.03355615725911803,0.025029107967328407,0.03242216299879468,0.027835078776478592,0.03875370388090466,0.05118417991123614,0.06247492435104896,1.239857904692953,0.053551853146776414,0.10113294791325687,0.03942553096236875,0.024739100542024918,0.04815396458673637,0.04660219051901701,0.009423782509652291,0.008599920888850551,0.01261653765167944,0.021192100757992226,0.02779970040386427,0.028988115377147815,0.025156231882973137,0.011496021139539318,0.006533102683362346,0.0061261841058866,0.011077671586134312,0.018345969380289335,0.008682167199447184,0.014368594233101805,0.014423371915417873,0.00296301352420166;0.02246711196089195,0.031314276275764615,0.03630401463880287,0.05223937964381704,0.046411689122448724,0.05010645666689032,0.05570672152411974,0.04518922947072445,0.05684610912305379,0.06682614624244373,0.06416960220353819,0.08420110602812143,0.2611280114932129,1.7063260975964252,0.22285529154417483,0.09640351325148784,0.08228357006584733,0.1194590892630558,0.09748552975652514,0.03316032744473973,0.03026601364989433,0.03413139816675991,0.04931849029448965,0.04184548954388242,0.053679738931716056,0.05532822998263246,0.10132431306366516,0.02942825737481123,0.01695352929124811,0.060384632648951185,0.063527342747907,0.03927030229244878,0.07193274738490023,0.05697753534909528,0.0053875729344659545;0.016794128150138317,0.013986406527469662,0.018893357317067358,0.022006974130776253,0.02141856958976144,0.025196304936497202,0.021312707722256907,0.02045901543927718,0.018407827946454847,0.024386703672958775,0.028806964853389058,0.03231241528098078,0.048584382209479526,0.024236633075334107,1.5032765529666683,0.028423815269631215,0.017048569840765516,0.026904689967330628,0.12287908998745702,0.016090552435042805,0.01260149156236966,0.013471145131564602,0.07471322903069766,0.08239801598178972,0.11114664420172286,0.05061409981848492,0.01314978281057742,0.008316618618098551,0.006011597555868815,0.014582345796736078,0.03709112361093575,0.010075540148101057,0.010309087637470472,0.022873254052178042,0.002028652985685121;0.002394129582534521,0.002300119683566992,0.003910933832275714,0.011188052043225278,0.007799795392631743,0.008392948279269657,0.008603167065137229,0.0036797937935477434,0.005133391336348315,0.007270148391022879,0.00799851642162865,0.017853622471142132,0.010586342588264937,0.007779392110511509,0.013217108999373998,1.0625476045206281,0.004014403537686774,0.009773679525438173,0.004654144925545269,0.002589785184599301,0.002824291670732627,0.004636996925444375,0.006131212148717099,0.003306669433788918,0.005216700991046824,0.00442466425562735,0.0032470657609623044,0.0024725092277772184,0.002345603167426787,0.003698081723290122,0.0057619957259455335,0.005294654541228712,0.005318825043062818,0.007955463679942012,0.002104736362588847;0.02786550017560977,0.0439569074046815,0.042007106115735285,0.057222233727279546,0.040396037109070124,0.051392861802386704,0.05700309888157687,0.10126683340010455,0.0667190067334084,0.06150467340359176,0.08634256257992713,0.07387058140990181,0.04545879397616541,0.03701518789182707,0.04244361160488207,0.039335558347777466,1.1911900147235102,0.03985586613481944,0.02842198468134451,0.016720312402845196,0.024269939482928573,0.045708718687237915,0.037888389764445134,0.025488133140940693,0.03474749996680738,0.03979765681272269,0.022523090407842297,0.014454084115318316,0.01466981197468549,0.017906235900687708,0.029595472538494743,0.034698985736601184,0.02883789926233746,0.03344675460179857,0.004417078347910465;0.007306681085426423,0.00982652449813785,0.009349861421733016,0.01029362056749042,0.008976982029553169,0.010599778411958038,0.010590827186032966,0.01749543958459336,0.010991017956013939,0.010134893734561902,0.014325709846510453,0.012167172615461647,0.009894551865672176,0.008179731130927188,0.009437836163636984,0.009353016131257086,0.02215317159397894,1.06128801851736,0.011351232881779407,0.007614156443375752,0.009407753120915158,0.012263540962700794,0.015533662522654954,0.009102778598267386,0.01137691494812938,0.020777927919510938,0.015813785781233332,0.010827799420846647,0.036080915372693964,0.009651967796341775,0.023514514133230496,0.01528222327485966,0.013269259852967326,0.015778443027121333,0.0015211596232472975;0.009492097946950691,0.0054299359605580275,0.014583330025841511,0.012635260854143644,0.014621360222791034,0.013990714684634286,0.011709354620346557,0.009900506351241617,0.012556309842869843,0.013709761061587158,0.013232527102086986,0.013098653539893774,0.011756647465362854,0.010010695456832154,0.013588410462916098,0.01320796107482611,0.011516265671924786,0.013891614582123995,1.016188909475004,0.007028287244678503,0.0068344619633242815,0.010544688361505673,0.01950896146654487,0.007325677967868971,0.011286358851095942,0.014435785338608951,0.006761293031105521,0.006435334139691954,0.003984375695273301,0.008938093995929444,0.007917118670830644,0.0052280292455318305,0.007797326962761588,0.010294725094623952,0.0008570380661423407;0.0603622332145292,0.031109496636444703,0.11335623526511866,0.09807107133544014,0.11424487585178504,0.1042047405584695,0.09114896831368104,0.1088291907199688,0.09255425133912043,0.09858906172353167,0.0804686189671939,0.09333044901896513,0.09408631504444798,0.08412965706919096,0.10681573472018169,0.08655195823986198,0.04612101920859942,0.0850565801791111,0.05916317205344653,1.0375725351169427,0.02533512061999138,0.08121530085766981,0.049490813584137004,0.050038869682008345,0.05996644249595072,0.05009589823056478,0.028986245487466224,0.01794239023602091,0.01320515821300893,0.031064353992066883,0.04147229098498666,0.02637269347408754,0.05042651547087068,0.03980405116345595,0.005027262137198238;0.02829887080309477,0.012214626156441205,0.05089202214696853,0.04840083603460571,0.05713564237978155,0.04037603609455006,0.03568343320466405,0.02979018302650096,0.040342033120048915,0.0420658878659439,0.03382777407063925,0.03591961010182173,0.03617255571575082,0.03140495968713476,0.04392011791831395,0.0438418689989571,0.01727850988234355,0.04402752090563678,0.026437196293631303,0.012237813174755311,1.0128685771621635,0.03873920130855822,0.025232018220278245,0.018492972114263363,0.024035644476195373,0.021939558392306067,0.015739817200791706,0.011995026268859696,0.007398965559929733,0.016068184060201184,0.01728793292505185,0.011991255980297759,0.022585846210982304,0.02097636830461731,0.002329648803915504;0.005826638250307729,0.006207929970740087,0.011722899437655173,0.013477441277431793,0.014250427652714514,0.01212116649223272,0.013899473056404064,0.008824234246989969,0.01219852295550242,0.013240072766188719,0.01335824909358518,0.012711925624358614,0.013910135015976917,0.012492719289969015,0.012401577024437978,0.011323378601093975,0.008005660326119943,0.013598114042348532,0.011160611624136329,0.012200223056745731,0.010029588681052607,1.016280027530186,0.014197556276921796,0.012895883771287265,0.02648859898332853,0.03174784837178613,0.013585311602624323,0.018256979509834795,0.005444067008098691,0.018802433962483548,0.01672937937934125,0.013135096646012097,0.013809639760194255,0.018902988684769258,0.0009371524069517987;0.02776102379790792,0.02536512320535588,0.05028412210417562,0.05147530145798484,0.05177697232421529,0.052053180216229906,0.04262504419780923,0.0895883163572272,0.04631215907648889,0.04524720897007417,0.061914576687180534,0.045097756827559884,0.037094342249258415,0.030007140213010392,0.038734850658676795,0.0423159873214872,0.03653332708108205,0.045877144714383776,0.03135010849745611,0.030791037363315135,0.020377128996472177,0.027379600109750324,1.065943350789927,0.03426685874986524,0.03807553567310605,0.08119653610205738,0.018266971024187863,0.013545536591876363,0.006895760069452308,0.015335024213518891,0.022071021961401486,0.01769284610962763,0.019274929744917672,0.021797348893201784,0.003345037994506511;0.005838427450439167,0.008178969565346361,0.011868161942621708,0.013485928334801953,0.012729636741151287,0.016267544291217226,0.008961314209633644,0.010405198958116375,0.009206222259398973,0.010163658011885839,0.016365348761059977,0.013645049431723542,0.010270391085294216,0.007990182422343568,0.01027977414413933,0.009160563536073543,0.00665544518482868,0.009897892119818404,0.005271306347492969,0.009015998655129991,0.005406247390812477,0.006057655296059445,0.0074919095428369956,1.1788343360463565,0.008293625388782654,0.010794035971287582,0.0032837931593372926,0.002497566434878361,0.0044592069618274955,0.0037534487070826432,0.003870458712860642,0.002730652662074364,0.00330231231638325,0.004174664784735493,0.000848841151439276;0.0025358452556888647,0.002685032282543535,0.00454500231116338,0.005426784837109515,0.006254794708560452,0.005309404875946831,0.005673355612588063,0.003746800365720607,0.004873343874302125,0.005048584351670005,0.004716636061568568,0.004258240690822454,0.0053626855586566755,0.00498087682124422,0.005082595048517915,0.004355745828392777,0.002734557874676751,0.004424795582061317,0.004782123390964539,0.004994024960783686,0.0033068963223161127,0.003809134698473503,0.005541058059617225,0.009916427327164589,1.0354866949944488,0.017988825278573668,0.006251292972074396,0.005796765445242232,0.0016231420897642812,0.0061157879940365485,0.0062390655425951635,0.004834257350748541,0.0032992240055561358,0.007109799948819227,0.0003716041166204908;0.011980281646213084,0.010414117178715633,0.022076288925208975,0.019985085219770694,0.02105150433276437,0.023351583526005942,0.02423095954320825,0.022765444703059693,0.01889128400810974,0.020159196668698406,0.023652549890370602,0.019868106772499575,0.01807931608197324,0.015230389712855362,0.01944602454346486,0.017576789726061966,0.012532408323260044,0.02764296317015225,0.024558778000536925,0.02983450202802204,0.01895686636991849,0.018302752575303026,0.05254064068836496,0.15748964015888867,0.12598062677152352,1.1249870450532702,0.01091846389719959,0.00980516591661174,0.004965662675349507,0.012370421930483683,0.01251560613020935,0.008290232559082473,0.010661426735463195,0.015147533098244117,0.0013667598912157426;0.015415623093335306,0.013494784675638923,0.02507440939431595,0.02959258539304713,0.029116233736398604,0.026369430778287024,0.035622935101022386,0.02308223918377833,0.028717465899086525,0.026618209240953417,0.026105775565814643,0.028109158520101065,0.02734281383229692,0.02898472315507965,0.026972032114387846,0.032270269785979674,0.020774579009526065,0.03324857742642009,0.03450219938609821,0.03285834289347998,0.034964283503860015,0.032719308350193495,0.03733729622364402,0.040730166080331705,0.044632729903770804,0.045144652783873494,1.1475495474625843,0.053570857836468366,0.014196683260158733,0.043349308414752485,0.03974201619517536,0.022467689562280232,0.02970116019664256,0.041799094176426944,0.002851027846130557;0.044098366535282235,0.041975253823327445,0.06187913309767687,0.08079276435544797,0.0706165160349756,0.06340056140258164,0.06924779979869665,0.06421111758417979,0.0636904862558635,0.06256398800222253,0.06952513786259068,0.06406870103263138,0.06175498857627818,0.05610373741789952,0.06417692731650533,0.07292434142024162,0.056479085933657476,0.06746442730210316,0.05405379474186462,0.05846872489087722,0.06237551346037704,0.06314888286466659,0.08746774410529921,0.062414264780757955,0.07826819295663187,0.07950451546593261,0.04668530699531872,1.2766146889127414,0.11538783814520197,0.06966016313255437,0.052858831747350433,0.03728825836845172,0.05616484444691862,0.08229681189879322,0.015820687809265228;0.011183140724867086,0.01160673030359264,0.01999081772073674,0.022148188231686173,0.024095890771277786,0.02155332666732942,0.026730920993892807,0.01714974846350429,0.01958280177794969,0.021478348003437883,0.019228485575170894,0.01984262720455442,0.02055388620123999,0.018031450806918342,0.022469654234247623,0.021859542510979872,0.014184041057126284,0.026366001950941843,0.03396265343766268,0.02876002661070134,0.05189723033966365,0.040969184471639504,0.021472530381028723,0.026930772966711758,0.025488621496524196,0.03626370220290992,0.024276129272584122,0.03910208933440174,1.0420472966026075,0.034720322801662665,0.025996359133951968,0.02825733895895257,0.04664278016041037,0.04090908029347814,0.0017361757480444638;0.054510883141199895,0.0601402489559821,0.11018201947819302,0.10316349389491766,0.10077937203784891,0.09709409363926425,0.1518739196451033,0.08716789192988783,0.14943413708688683,0.12460512057151385,0.10394875236048413,0.10252555507975086,0.11976562882427476,0.12504494817208173,0.13479599508898948,0.09929840876214198,0.08073905345380616,0.1318032373546818,0.11085184491836646,0.10386774056049726,0.10354493245904477,0.10814878177195454,0.10252292902360718,0.0855605140433742,0.1415711769598231,0.13417844469741955,0.11398239235311977,0.18821130490355198,0.06387753332466481,1.2194546818421654,0.14425311851916042,0.07306350147459931,0.126198144053629,0.15191344623765685,0.010649344115796143;0.0032627329351943885,0.0038135931200311748,0.005300905901911965,0.00421058892374008,0.00426479001298476,0.006666989106028449,0.007937244001246409,0.0052404006597027005,0.006512243569496268,0.006029886488552138,0.006275034550643825,0.007665000404194137,0.005003313721423631,0.004243920272643207,0.005056638315149606,0.005737341043204672,0.006695250707650282,0.0050793722362612636,0.005139055597794665,0.003226244237202427,0.004317625128513802,0.006310962167635821,0.00604335386209469,0.008039521624634068,0.011895731867105639,0.006330965931193205,0.004698637556900955,0.0038558529110281196,0.004278451425081872,0.005140021229095043,1.0096518215763528,0.006092476950581585,0.006626036433646992,0.011046136383022789,0.0004539530576755812;0.0012133996352147879,0.0008436650457602907,0.0015848343067915288,0.0015772667250234767,0.001638859159810432,0.0014968262794624314,0.0017505652440933121,0.0014771480520556525,0.0021769987687759174,0.0019100435816808974,0.0016013332850651387,0.0016704273222643909,0.0019885485772713476,0.0018122053781428479,0.0022260702215068573,0.0014638122840917927,0.0013989210583957004,0.0016255917278734505,0.001661240085666519,0.0013774776726413064,0.0017248729684012547,0.0014785083927492143,0.0018716995583925539,0.0012585865625185531,0.0033213960465114435,0.002285155166157957,0.002096188748505335,0.002290277816054231,0.0007625792212064026,0.0031658756397266825,0.004970211132795399,1.0158110076316906,0.0022549277951086927,0.002708418002235125,0.00014202650318792257;0.0018786561804038466,0.0007181831962103966,0.0015627818369598444,0.0014200581720669756,0.002148485590011809,0.001611802118047027,0.001343792029363597,0.0009402263230818481,0.0013252406148701987,0.0012529463771289782,0.0016444051562495648,0.0013965145186785016,0.0018925807951615525,0.00130759486305481,0.0015656169186831638,0.0012674567024660813,0.0009302237508768741,0.0012139142018029847,0.0010828051416670642,0.0008207295288921749,0.0007702327738928848,0.0015471618421244737,0.0011169435746745343,0.0009095697488412969,0.001143214973821621,0.001112064043455184,0.0009974116926061533,0.0010721619442640962,0.00035026153824091856,0.0010618807180921058,0.0064006067340591985,0.00204444695318624,1.034054005457438,0.0020072556511513367,0.0001294388441519888;0.00982260511004286,0.01118203113650978,0.01750294455819205,0.018242707939926908,0.02063265240773138,0.017353376030989465,0.028491277637560406,0.014673445085500366,0.020584250373040357,0.018472377992002617,0.01803148606298369,0.01824459333291805,0.016908406592346558,0.01498573265745682,0.018460751589143263,0.016298181221744326,0.014030706122588494,0.01854692837354691,0.016581193057705595,0.015395469929873461,0.016108287848955155,0.025076130159926043,0.023568738377854195,0.0159034941969753,0.020395923754343754,0.028121347560339075,0.02716019026140727,0.022866981243930187,0.01222773187187012,0.036288207391408735,0.027738430356670507,0.018819388317300574,0.023764069439310316,1.0927048864547475,0.0025993760089467236;4.04163727779256e-05,4.535796202669544e-05,7.214763390878e-05,0.00018189349437868293,9.510720021599565e-05,8.249709674141442e-05,8.48368537865674e-05,6.654723708620218e-05,6.701783119749833e-05,7.07291007962882e-05,6.885935074259127e-05,6.280558136673064e-05,8.042500929525585e-05,5.721389870796304e-05,0.00011298583524457685,6.151783904420128e-05,3.959430337804621e-05,0.00010371234388277859,7.122782017224218e-05,4.3792862217734334e-05,7.123180256751735e-05,9.646113579620517e-05,0.000163071438241637,4.440927518119631e-05,6.182833383857708e-05,6.237936495390551e-05,6.742475307691265e-05,0.00012101615163707201,0.0002356648737206712,0.00010412034497777387,0.00010581889167610724,6.805427356254464e-05,9.833661987748218e-05,0.00015244259685465983,1.0000798321241773;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            1.16382123e+00, 3.81765699e-03, 3.68272895e-01, 1.10566088e-01, 1.49689545e-01,
            1.99304999e-01, 3.80603006e-02, 8.26174063e-03, 2.34987198e-02, 3.20772025e-02,
            1.14001215e-02, 8.93466443e-03, 9.08286363e-03, 8.47023620e-03, 1.02475815e-02,
            4.10925771e-02, 5.15057172e-03, 1.75290884e-02, 7.15821808e-03, 8.58418330e-03,
            8.16980659e-03, 1.06041737e-01, 8.37081251e-03, 9.70470156e-03, 1.00543458e-02,
            1.73284214e-02, 4.87131728e-03, 4.87341073e-03, 2.97916148e-03, 7.04272395e-03,
            1.07978171e-02, 1.07134868e-02, 1.30494513e-02, 1.27311970e-02, 3.66370802e-02
        ],
              [
                  2.70992488e-02, 1.10073744e+00, 3.07087131e-02, 4.25957177e-02, 3.60689657e-02,
                  3.98730238e-02, 3.60501870e-02, 6.54241984e-01, 1.09802266e-01, 5.83271841e-02,
                  1.37490437e-01, 1.23817824e-01, 4.64850347e-02, 3.43061806e-02, 4.03080496e-02,
                  3.99110920e-02, 1.84022238e-01, 6.95217172e-02, 2.08340210e-02, 1.28738080e-02,
                  1.27089783e-02, 2.24611460e-02, 5.83623038e-02, 6.74599190e-02, 9.47681188e-02,
                  4.00952068e-02, 1.33219654e-02, 8.68288451e-03, 9.17647207e-03, 1.39370091e-02,
                  2.23849779e-02, 1.50611077e-02, 2.08550541e-02, 2.12178691e-02, 7.36947008e-02
              ],
              [
                  9.65554339e-02, 4.05313401e-03, 1.23342933e+00, 3.09480967e-02, 1.84696585e-01,
                  2.75887418e-02, 1.56226958e-02, 8.12154782e-03, 2.74995016e-02, 1.97178723e-02,
                  1.18750384e-02, 1.04679671e-02, 1.06787058e-02, 1.01082128e-02, 1.09197512e-02,
                  1.54131868e-02, 5.79688772e-03, 1.05205760e-02, 7.60818060e-03, 1.02804143e-02,
                  9.75387135e-03, 1.95794691e-01, 8.34421883e-03, 1.39918120e-02, 1.46734240e-02,
                  1.25883258e-02, 6.60064447e-03, 6.51342830e-03, 2.67904121e-03, 8.66334320e-03,
                  1.52972817e-02, 1.52653596e-02, 2.18578062e-02, 1.65740871e-02, 7.35493725e-03
              ],
              [
                  6.01387468e-03, 3.38505087e-03, 8.82537848e-03, 1.62676352e+00, 1.39355509e-01,
                  1.29231274e-02, 1.94897354e-02, 5.46470844e-03, 1.27535103e-02, 3.68730669e-02,
                  1.36883968e-02, 1.04371910e-02, 1.16344907e-02, 1.07711068e-02, 1.79401409e-02,
                  5.04966673e-02, 4.85272894e-03, 1.05291662e-02, 7.31573165e-03, 6.48124221e-03,
                  6.68407269e-03, 8.57080710e-03, 7.36947260e-03, 9.61750899e-03, 8.72766017e-03,
                  7.59395393e-03, 3.68982339e-03, 3.06393863e-03, 2.06180213e-03, 5.39111130e-03,
                  7.95009534e-03, 4.09259905e-03, 9.38858760e-03, 1.08642219e-02, 7.04179830e-04
              ],
              [
                  5.79327831e-04, 3.08548755e-04, 7.99884876e-04, 2.89069848e-02, 1.30408052e+00,
                  1.62329692e-03, 1.88775749e-03, 5.12094169e-04, 1.03608462e-03, 2.78401254e-03,
                  1.07342568e-03, 9.62574012e-04, 1.11813763e-03, 1.28239817e-03, 4.97507768e-03,
                  9.45331849e-03, 4.63851101e-04, 8.68539735e-04, 1.23891632e-03, 7.00760221e-04,
                  6.10473599e-04, 6.33104205e-04, 9.01472608e-04, 7.72819281e-04, 9.33862434e-04,
                  8.17406138e-04, 5.75431518e-04, 2.92593347e-04, 1.66548131e-04, 4.77649875e-04,
                  1.44843453e-03, 4.33377077e-04, 8.21019612e-04, 1.11725004e-03, 6.93599452e-05
              ],
              [
                  4.71845868e-03, 3.82252890e-03, 7.17140610e-03, 8.22703406e-03, 8.78888178e-03,
                  1.37466705e+00, 2.67963191e-02, 4.71661072e-03, 6.62798476e-03, 9.95321447e-03,
                  1.81938501e-02, 1.30110334e-02, 1.11055648e-02, 8.29702793e-03, 1.13374076e-02,
                  1.16649524e-01, 4.35404501e-03, 4.79991486e-02, 5.47546866e-03, 3.80412855e-03,
                  3.75625836e-03, 6.61078095e-03, 5.22374539e-03, 4.09414213e-03, 4.46346979e-03,
                  7.02769538e-03, 3.40492237e-03, 2.68925331e-03, 4.57859430e-03, 4.09528145e-03,
                  6.48214760e-03, 6.80197056e-03, 5.12867664e-03, 7.59077586e-03, 7.29698018e-04
              ],
              [
                  1.46801625e-02, 1.01025481e-02, 5.41640240e-02, 4.31479349e-02, 4.99164264e-02,
                  4.18724996e-02, 1.35410089e+00, 1.63857315e-02, 4.08354578e-02, 4.65622692e-02,
                  4.86656501e-02, 2.41337160e-02, 2.81160441e-02, 3.24884341e-02, 2.71100916e-02,
                  4.70271891e-02, 1.40007675e-02, 2.54517883e-02, 2.34089712e-02, 2.36575598e-02,
                  2.24114794e-02, 2.79932210e-02, 2.12556341e-02, 1.77506066e-02, 2.19671803e-02,
                  3.22151129e-02, 2.28304744e-02, 3.08263661e-02, 8.79572831e-03, 3.90663891e-02,
                  3.53203420e-02, 3.29464527e-02, 2.48280302e-02, 4.55671111e-02, 1.99460577e-03
              ],
              [
                  2.98811544e-02, 1.57406367e-02, 2.63435149e-02, 3.53244250e-02, 3.14784875e-02,
                  3.06711729e-02, 2.63195296e-02, 1.23529645e+00, 1.02804410e-01, 5.17208268e-02,
                  5.29063400e-02, 4.41445547e-02, 2.65280249e-02, 2.18422680e-02, 2.44415264e-02,
                  2.55857128e-02, 6.11923579e-02, 3.45363423e-02, 1.86170541e-02, 1.41916360e-02,
                  1.16890315e-02, 1.73955838e-02, 8.15469922e-02, 1.05412619e-01, 1.55277974e-01,
                  4.83541611e-02, 1.22735773e-02, 8.09164827e-03, 5.85694871e-03, 1.39275348e-02,
                  2.02477517e-02, 1.11796773e-02, 1.70252186e-02, 1.74694270e-02, 2.32891952e-03
              ],
              [
                  7.08281680e-02, 2.21074636e-02, 5.62307918e-02, 1.62059085e-01, 1.19219343e-01,
                  9.60769450e-02, 8.93436907e-02, 4.85603048e-02, 1.36401097e+00, 3.71327972e-01,
                  8.50328752e-02, 5.21388631e-02, 5.31494696e-02, 6.99821477e-02, 6.50843308e-02,
                  8.06804959e-02, 2.50303874e-02, 5.05222250e-02, 2.91029179e-02, 1.35388759e-02,
                  1.23467380e-02, 2.71243434e-02, 2.33643161e-02, 2.34036715e-02, 2.62830456e-02,
                  2.46578164e-02, 1.33255424e-02, 9.23024630e-03, 8.00823883e-03, 1.85155781e-02,
                  2.67288493e-02, 1.48977191e-02, 9.88234214e-02, 2.98987745e-02, 4.44506681e-03
              ],
              [
                  1.45583155e-02, 1.12040623e-02, 3.84961952e-02, 3.58290875e-02, 7.90076258e-02,
                  2.54721628e-02, 3.73257552e-02, 1.70910288e-02, 3.83280684e-02, 1.20285288e+00,
                  2.98805902e-02, 2.44623947e-02, 4.98468323e-02, 5.63186729e-02, 7.65740327e-02,
                  5.78136622e-02, 1.19170196e-02, 3.78574024e-02, 3.12278797e-02, 1.06072652e-02,
                  1.05497740e-02, 1.64056112e-02, 2.40347343e-02, 1.47776355e-02, 1.81875931e-02,
                  1.91524313e-02, 1.11523654e-02, 5.57884530e-03, 4.79595479e-03, 1.02029869e-02,
                  1.24802072e-02, 7.16504693e-03, 1.51040609e-02, 1.40921601e-02, 1.69270605e-03
              ],
              [
                  5.49009266e-03, 7.50087108e-03, 1.22323474e-02, 9.58083019e-03, 9.18772403e-03,
                  1.61968037e-02, 7.01514000e-03, 9.92430102e-03, 1.38876943e-02, 1.49311277e-02,
                  1.17716168e+00, 2.44781350e-02, 1.77373903e-02, 2.55098771e-02, 2.09458747e-02,
                  1.70104940e-02, 8.13417121e-03, 1.22974084e-01, 9.87668470e-03, 3.69589846e-03,
                  3.84063171e-03, 8.78128789e-03, 6.86697680e-03, 5.07352701e-03, 6.45884244e-03,
                  7.62494569e-03, 5.70438711e-03, 2.87973780e-03, 6.87053103e-03, 4.57409959e-03,
                  7.17280801e-03, 5.46381176e-03, 6.87473881e-03, 6.82837017e-03, 9.02660718e-04
              ],
              [
                  2.39526811e-02, 4.23186705e-02, 4.15498055e-02, 4.21503843e-02, 4.94792593e-02,
                  7.15363801e-02, 4.44147517e-02, 4.92151171e-02, 5.23591231e-02, 7.64977697e-02,
                  9.61292211e-02, 1.52693391e+00, 3.23318410e-01, 1.88074342e-01, 2.47960259e-01,
                  1.56722227e-01, 3.91780247e-02, 1.85267996e-01, 6.52114953e-02, 1.77171846e-02,
                  1.63553655e-02, 2.59500030e-02, 3.93157471e-02, 3.80888754e-02, 4.48922009e-02,
                  4.22986179e-02, 2.59126281e-02, 1.20721139e-02, 1.47076990e-02, 2.26424200e-02,
                  3.06428098e-02, 1.64498035e-02, 2.40216171e-02, 2.83203278e-02, 4.77956915e-03
              ],
              [
                  1.82554546e-02, 2.45234069e-02, 1.99689464e-02, 3.49786171e-02, 2.96980813e-02,
                  3.35561573e-02, 2.50291080e-02, 3.24221630e-02, 2.78350788e-02, 3.87537039e-02,
                  5.11841799e-02, 6.24749244e-02, 1.23985790e+00, 5.35518531e-02, 1.01132948e-01,
                  3.94255310e-02, 2.47391005e-02, 4.81539646e-02, 4.66021905e-02, 9.42378251e-03,
                  8.59992089e-03, 1.26165377e-02, 2.11921008e-02, 2.77997004e-02, 2.89881154e-02,
                  2.51562319e-02, 1.14960211e-02, 6.53310268e-03, 6.12618411e-03, 1.10776716e-02,
                  1.83459694e-02, 8.68216720e-03, 1.43685942e-02, 1.44233719e-02, 2.96301352e-03
              ],
              [
                  2.24671120e-02, 3.13142763e-02, 3.63040146e-02, 5.22393796e-02, 4.64116891e-02,
                  5.01064567e-02, 5.57067215e-02, 4.51892295e-02, 5.68461091e-02, 6.68261462e-02,
                  6.41696022e-02, 8.42011060e-02, 2.61128011e-01, 1.70632610e+00, 2.22855292e-01,
                  9.64035133e-02, 8.22835701e-02, 1.19459089e-01, 9.74855298e-02, 3.31603274e-02,
                  3.02660136e-02, 3.41313982e-02, 4.93184903e-02, 4.18454895e-02, 5.36797389e-02,
                  5.53282300e-02, 1.01324313e-01, 2.94282574e-02, 1.69535293e-02, 6.03846326e-02,
                  6.35273427e-02, 3.92703023e-02, 7.19327474e-02, 5.69775353e-02, 5.38757293e-03
              ],
              [
                  1.67941282e-02, 1.39864065e-02, 1.88933573e-02, 2.20069741e-02, 2.14185696e-02,
                  2.51963049e-02, 2.13127077e-02, 2.04590154e-02, 1.84078279e-02, 2.43867037e-02,
                  2.88069649e-02, 3.23124153e-02, 4.85843822e-02, 2.42366331e-02, 1.50327655e+00,
                  2.84238153e-02, 1.70485698e-02, 2.69046900e-02, 1.22879090e-01, 1.60905524e-02,
                  1.26014916e-02, 1.34711451e-02, 7.47132290e-02, 8.23980160e-02, 1.11146644e-01,
                  5.06140998e-02, 1.31497828e-02, 8.31661862e-03, 6.01159756e-03, 1.45823458e-02,
                  3.70911236e-02, 1.00755401e-02, 1.03090876e-02, 2.28732541e-02, 2.02865299e-03
              ],
              [
                  2.39412958e-03, 2.30011968e-03, 3.91093383e-03, 1.11880520e-02, 7.79979539e-03,
                  8.39294828e-03, 8.60316707e-03, 3.67979379e-03, 5.13339134e-03, 7.27014839e-03,
                  7.99851642e-03, 1.78536225e-02, 1.05863426e-02, 7.77939211e-03, 1.32171090e-02,
                  1.06254760e+00, 4.01440354e-03, 9.77367953e-03, 4.65414493e-03, 2.58978518e-03,
                  2.82429167e-03, 4.63699693e-03, 6.13121215e-03, 3.30666943e-03, 5.21670099e-03,
                  4.42466426e-03, 3.24706576e-03, 2.47250923e-03, 2.34560317e-03, 3.69808172e-03,
                  5.76199573e-03, 5.29465454e-03, 5.31882504e-03, 7.95546368e-03, 2.10473636e-03
              ],
              [
                  2.78655002e-02, 4.39569074e-02, 4.20071061e-02, 5.72222337e-02, 4.03960371e-02,
                  5.13928618e-02, 5.70030989e-02, 1.01266833e-01, 6.67190067e-02, 6.15046734e-02,
                  8.63425626e-02, 7.38705814e-02, 4.54587940e-02, 3.70151879e-02, 4.24436116e-02,
                  3.93355583e-02, 1.19119001e+00, 3.98558661e-02, 2.84219847e-02, 1.67203124e-02,
                  2.42699395e-02, 4.57087187e-02, 3.78883898e-02, 2.54881331e-02, 3.47475000e-02,
                  3.97976568e-02, 2.25230904e-02, 1.44540841e-02, 1.46698120e-02, 1.79062359e-02,
                  2.95954725e-02, 3.46989857e-02, 2.88378993e-02, 3.34467546e-02, 4.41707835e-03
              ],
              [
                  7.30668109e-03, 9.82652450e-03, 9.34986142e-03, 1.02936206e-02, 8.97698203e-03,
                  1.05997784e-02, 1.05908272e-02, 1.74954396e-02, 1.09910180e-02, 1.01348937e-02,
                  1.43257098e-02, 1.21671726e-02, 9.89455187e-03, 8.17973113e-03, 9.43783616e-03,
                  9.35301613e-03, 2.21531716e-02, 1.06128802e+00, 1.13512329e-02, 7.61415644e-03,
                  9.40775312e-03, 1.22635410e-02, 1.55336625e-02, 9.10277860e-03, 1.13769149e-02,
                  2.07779279e-02, 1.58137858e-02, 1.08277994e-02, 3.60809154e-02, 9.65196780e-03,
                  2.35145141e-02, 1.52822233e-02, 1.32692599e-02, 1.57784430e-02, 1.52115962e-03
              ],
              [
                  9.49209795e-03, 5.42993596e-03, 1.45833300e-02, 1.26352609e-02, 1.46213602e-02,
                  1.39907147e-02, 1.17093546e-02, 9.90050635e-03, 1.25563098e-02, 1.37097611e-02,
                  1.32325271e-02, 1.30986535e-02, 1.17566475e-02, 1.00106955e-02, 1.35884105e-02,
                  1.32079611e-02, 1.15162657e-02, 1.38916146e-02, 1.01618891e+00, 7.02828724e-03,
                  6.83446196e-03, 1.05446884e-02, 1.95089615e-02, 7.32567797e-03, 1.12863589e-02,
                  1.44357853e-02, 6.76129303e-03, 6.43533414e-03, 3.98437570e-03, 8.93809400e-03,
                  7.91711867e-03, 5.22802925e-03, 7.79732696e-03, 1.02947251e-02, 8.57038066e-04
              ],
              [
                  6.03622332e-02, 3.11094966e-02, 1.13356235e-01, 9.80710713e-02, 1.14244876e-01,
                  1.04204741e-01, 9.11489683e-02, 1.08829191e-01, 9.25542513e-02, 9.85890617e-02,
                  8.04686190e-02, 9.33304490e-02, 9.40863150e-02, 8.41296571e-02, 1.06815735e-01,
                  8.65519582e-02, 4.61210192e-02, 8.50565802e-02, 5.91631721e-02, 1.03757254e+00,
                  2.53351206e-02, 8.12153009e-02, 4.94908136e-02, 5.00388697e-02, 5.99664425e-02,
                  5.00958982e-02, 2.89862455e-02, 1.79423902e-02, 1.32051582e-02, 3.10643540e-02,
                  4.14722910e-02, 2.63726935e-02, 5.04265155e-02, 3.98040512e-02, 5.02726214e-03
              ],
              [
                  2.82988708e-02, 1.22146262e-02, 5.08920221e-02, 4.84008360e-02, 5.71356424e-02,
                  4.03760361e-02, 3.56834332e-02, 2.97901830e-02, 4.03420331e-02, 4.20658879e-02,
                  3.38277741e-02, 3.59196101e-02, 3.61725557e-02, 3.14049597e-02, 4.39201179e-02,
                  4.38418690e-02, 1.72785099e-02, 4.40275209e-02, 2.64371963e-02, 1.22378132e-02,
                  1.01286858e+00, 3.87392013e-02, 2.52320182e-02, 1.84929721e-02, 2.40356445e-02,
                  2.19395584e-02, 1.57398172e-02, 1.19950263e-02, 7.39896556e-03, 1.60681841e-02,
                  1.72879329e-02, 1.19912560e-02, 2.25858462e-02, 2.09763683e-02, 2.32964880e-03
              ],
              [
                  5.82663825e-03, 6.20792997e-03, 1.17228994e-02, 1.34774413e-02, 1.42504277e-02,
                  1.21211665e-02, 1.38994731e-02, 8.82423425e-03, 1.21985230e-02, 1.32400728e-02,
                  1.33582491e-02, 1.27119256e-02, 1.39101350e-02, 1.24927193e-02, 1.24015770e-02,
                  1.13233786e-02, 8.00566033e-03, 1.35981140e-02, 1.11606116e-02, 1.22002231e-02,
                  1.00295887e-02, 1.01628003e+00, 1.41975563e-02, 1.28958838e-02, 2.64885990e-02,
                  3.17478484e-02, 1.35853116e-02, 1.82569795e-02, 5.44406701e-03, 1.88024340e-02,
                  1.67293794e-02, 1.31350966e-02, 1.38096398e-02, 1.89029887e-02, 9.37152407e-04
              ],
              [
                  2.77610238e-02, 2.53651232e-02, 5.02841221e-02, 5.14753015e-02, 5.17769723e-02,
                  5.20531802e-02, 4.26250442e-02, 8.95883164e-02, 4.63121591e-02, 4.52472090e-02,
                  6.19145767e-02, 4.50977568e-02, 3.70943422e-02, 3.00071402e-02, 3.87348507e-02,
                  4.23159873e-02, 3.65333271e-02, 4.58771447e-02, 3.13501085e-02, 3.07910374e-02,
                  2.03771290e-02, 2.73796001e-02, 1.06594335e+00, 3.42668587e-02, 3.80755357e-02,
                  8.11965361e-02, 1.82669710e-02, 1.35455366e-02, 6.89576007e-03, 1.53350242e-02,
                  2.20710220e-02, 1.76928461e-02, 1.92749297e-02, 2.17973489e-02, 3.34503799e-03
              ],
              [
                  5.83842745e-03, 8.17896957e-03, 1.18681619e-02, 1.34859283e-02, 1.27296367e-02,
                  1.62675443e-02, 8.96131421e-03, 1.04051990e-02, 9.20622226e-03, 1.01636580e-02,
                  1.63653488e-02, 1.36450494e-02, 1.02703911e-02, 7.99018242e-03, 1.02797741e-02,
                  9.16056354e-03, 6.65544518e-03, 9.89789212e-03, 5.27130635e-03, 9.01599866e-03,
                  5.40624739e-03, 6.05765530e-03, 7.49190954e-03, 1.17883434e+00, 8.29362539e-03,
                  1.07940360e-02, 3.28379316e-03, 2.49756643e-03, 4.45920696e-03, 3.75344871e-03,
                  3.87045871e-03, 2.73065266e-03, 3.30231232e-03, 4.17466478e-03, 8.48841151e-04
              ],
              [
                  2.53584526e-03, 2.68503228e-03, 4.54500231e-03, 5.42678484e-03, 6.25479471e-03,
                  5.30940488e-03, 5.67335561e-03, 3.74680037e-03, 4.87334387e-03, 5.04858435e-03,
                  4.71663606e-03, 4.25824069e-03, 5.36268556e-03, 4.98087682e-03, 5.08259505e-03,
                  4.35574583e-03, 2.73455787e-03, 4.42479558e-03, 4.78212339e-03, 4.99402496e-03,
                  3.30689632e-03, 3.80913470e-03, 5.54105806e-03, 9.91642733e-03, 1.03548669e+00,
                  1.79888253e-02, 6.25129297e-03, 5.79676545e-03, 1.62314209e-03, 6.11578799e-03,
                  6.23906554e-03, 4.83425735e-03, 3.29922401e-03, 7.10979995e-03, 3.71604117e-04
              ],
              [
                  1.19802816e-02, 1.04141172e-02, 2.20762889e-02, 1.99850852e-02, 2.10515043e-02,
                  2.33515835e-02, 2.42309595e-02, 2.27654447e-02, 1.88912840e-02, 2.01591967e-02,
                  2.36525499e-02, 1.98681068e-02, 1.80793161e-02, 1.52303897e-02, 1.94460245e-02,
                  1.75767897e-02, 1.25324083e-02, 2.76429632e-02, 2.45587780e-02, 2.98345020e-02,
                  1.89568664e-02, 1.83027526e-02, 5.25406407e-02, 1.57489640e-01, 1.25980627e-01,
                  1.12498705e+00, 1.09184639e-02, 9.80516592e-03, 4.96566268e-03, 1.23704219e-02,
                  1.25156061e-02, 8.29023256e-03, 1.06614267e-02, 1.51475331e-02, 1.36675989e-03
              ],
              [
                  1.54156231e-02, 1.34947847e-02, 2.50744094e-02, 2.95925854e-02, 2.91162337e-02,
                  2.63694308e-02, 3.56229351e-02, 2.30822392e-02, 2.87174659e-02, 2.66182092e-02,
                  2.61057756e-02, 2.81091585e-02, 2.73428138e-02, 2.89847232e-02, 2.69720321e-02,
                  3.22702698e-02, 2.07745790e-02, 3.32485774e-02, 3.45021994e-02, 3.28583429e-02,
                  3.49642835e-02, 3.27193084e-02, 3.73372962e-02, 4.07301661e-02, 4.46327299e-02,
                  4.51446528e-02, 1.14754955e+00, 5.35708578e-02, 1.41966833e-02, 4.33493084e-02,
                  3.97420162e-02, 2.24676896e-02, 2.97011602e-02, 4.17990942e-02, 2.85102785e-03
              ],
              [
                  4.40983665e-02, 4.19752538e-02, 6.18791331e-02, 8.07927644e-02, 7.06165160e-02,
                  6.34005614e-02, 6.92477998e-02, 6.42111176e-02, 6.36904863e-02, 6.25639880e-02,
                  6.95251379e-02, 6.40687010e-02, 6.17549886e-02, 5.61037374e-02, 6.41769273e-02,
                  7.29243414e-02, 5.64790859e-02, 6.74644273e-02, 5.40537947e-02, 5.84687249e-02,
                  6.23755135e-02, 6.31488829e-02, 8.74677441e-02, 6.24142648e-02, 7.82681930e-02,
                  7.95045155e-02, 4.66853070e-02, 1.27661469e+00, 1.15387838e-01, 6.96601631e-02,
                  5.28588317e-02, 3.72882584e-02, 5.61648444e-02, 8.22968119e-02, 1.58206878e-02
              ],
              [
                  1.11831407e-02, 1.16067303e-02, 1.99908177e-02, 2.21481882e-02, 2.40958908e-02,
                  2.15533267e-02, 2.67309210e-02, 1.71497485e-02, 1.95828018e-02, 2.14783480e-02,
                  1.92284856e-02, 1.98426272e-02, 2.05538862e-02, 1.80314508e-02, 2.24696542e-02,
                  2.18595425e-02, 1.41840411e-02, 2.63660020e-02, 3.39626534e-02, 2.87600266e-02,
                  5.18972303e-02, 4.09691845e-02, 2.14725304e-02, 2.69307730e-02, 2.54886215e-02,
                  3.62637022e-02, 2.42761293e-02, 3.91020893e-02, 1.04204730e+00, 3.47203228e-02,
                  2.59963591e-02, 2.82573390e-02, 4.66427802e-02, 4.09090803e-02, 1.73617575e-03
              ],
              [
                  5.45108831e-02, 6.01402490e-02, 1.10182019e-01, 1.03163494e-01, 1.00779372e-01,
                  9.70940936e-02, 1.51873920e-01, 8.71678919e-02, 1.49434137e-01, 1.24605121e-01,
                  1.03948752e-01, 1.02525555e-01, 1.19765629e-01, 1.25044948e-01, 1.34795995e-01,
                  9.92984088e-02, 8.07390535e-02, 1.31803237e-01, 1.10851845e-01, 1.03867741e-01,
                  1.03544932e-01, 1.08148782e-01, 1.02522929e-01, 8.55605140e-02, 1.41571177e-01,
                  1.34178445e-01, 1.13982392e-01, 1.88211305e-01, 6.38775333e-02, 1.21945468e+00,
                  1.44253119e-01, 7.30635015e-02, 1.26198144e-01, 1.51913446e-01, 1.06493441e-02
              ],
              [
                  3.26273294e-03, 3.81359312e-03, 5.30090590e-03, 4.21058892e-03, 4.26479001e-03,
                  6.66698911e-03, 7.93724400e-03, 5.24040066e-03, 6.51224357e-03, 6.02988649e-03,
                  6.27503455e-03, 7.66500040e-03, 5.00331372e-03, 4.24392027e-03, 5.05663832e-03,
                  5.73734104e-03, 6.69525071e-03, 5.07937224e-03, 5.13905560e-03, 3.22624424e-03,
                  4.31762513e-03, 6.31096217e-03, 6.04335386e-03, 8.03952162e-03, 1.18957319e-02,
                  6.33096593e-03, 4.69863756e-03, 3.85585291e-03, 4.27845143e-03, 5.14002123e-03,
                  1.00965182e+00, 6.09247695e-03, 6.62603643e-03, 1.10461364e-02, 4.53953058e-04
              ],
              [
                  1.21339964e-03, 8.43665046e-04, 1.58483431e-03, 1.57726673e-03, 1.63885916e-03,
                  1.49682628e-03, 1.75056524e-03, 1.47714805e-03, 2.17699877e-03, 1.91004358e-03,
                  1.60133329e-03, 1.67042732e-03, 1.98854858e-03, 1.81220538e-03, 2.22607022e-03,
                  1.46381228e-03, 1.39892106e-03, 1.62559173e-03, 1.66124009e-03, 1.37747767e-03,
                  1.72487297e-03, 1.47850839e-03, 1.87169956e-03, 1.25858656e-03, 3.32139605e-03,
                  2.28515517e-03, 2.09618875e-03, 2.29027782e-03, 7.62579221e-04, 3.16587564e-03,
                  4.97021113e-03, 1.01581101e+00, 2.25492780e-03, 2.70841800e-03, 1.42026503e-04
              ],
              [
                  1.87865618e-03, 7.18183196e-04, 1.56278184e-03, 1.42005817e-03, 2.14848559e-03,
                  1.61180212e-03, 1.34379203e-03, 9.40226323e-04, 1.32524061e-03, 1.25294638e-03,
                  1.64440516e-03, 1.39651452e-03, 1.89258080e-03, 1.30759486e-03, 1.56561692e-03,
                  1.26745670e-03, 9.30223751e-04, 1.21391420e-03, 1.08280514e-03, 8.20729529e-04,
                  7.70232774e-04, 1.54716184e-03, 1.11694357e-03, 9.09569749e-04, 1.14321497e-03,
                  1.11206404e-03, 9.97411693e-04, 1.07216194e-03, 3.50261538e-04, 1.06188072e-03,
                  6.40060673e-03, 2.04444695e-03, 1.03405401e+00, 2.00725565e-03, 1.29438844e-04
              ],
              [
                  9.82260511e-03, 1.11820311e-02, 1.75029446e-02, 1.82427079e-02, 2.06326524e-02,
                  1.73533760e-02, 2.84912776e-02, 1.46734451e-02, 2.05842504e-02, 1.84723780e-02,
                  1.80314861e-02, 1.82445933e-02, 1.69084066e-02, 1.49857327e-02, 1.84607516e-02,
                  1.62981812e-02, 1.40307061e-02, 1.85469284e-02, 1.65811931e-02, 1.53954699e-02,
                  1.61082878e-02, 2.50761302e-02, 2.35687384e-02, 1.59034942e-02, 2.03959238e-02,
                  2.81213476e-02, 2.71601903e-02, 2.28669812e-02, 1.22277319e-02, 3.62882074e-02,
                  2.77384304e-02, 1.88193883e-02, 2.37640694e-02, 1.09270489e+00, 2.59937601e-03
              ],
              [
                  4.04163728e-05, 4.53579620e-05, 7.21476339e-05, 1.81893494e-04, 9.51072002e-05,
                  8.24970967e-05, 8.48368538e-05, 6.65472371e-05, 6.70178312e-05, 7.07291008e-05,
                  6.88593507e-05, 6.28055814e-05, 8.04250093e-05, 5.72138987e-05, 1.12985835e-04,
                  6.15178390e-05, 3.95943034e-05, 1.03712344e-04, 7.12278202e-05, 4.37928622e-05,
                  7.12318026e-05, 9.64611358e-05, 1.63071438e-04, 4.44092752e-05, 6.18283338e-05,
                  6.23793650e-05, 6.74247531e-05, 1.21016152e-04, 2.35664874e-04, 1.04120345e-04,
                  1.05818892e-04, 6.80542736e-05, 9.83366199e-05, 1.52442597e-04, 1.00007983e+00
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def leontief_matrix_2009():
    """
    Real Name: b'leontief matrix 2009'
    Original Eqn: b'1.1696333659313025,0.00446228395194993,0.3790081258746163,0.11486758992114443,0.1569985444308907,0.22789473958607423,0.041454739826761774,0.009578242673828426,0.025361253042298776,0.03415042272392316,0.012515796168393505,0.010009897487055977,0.010141726069232629,0.009409398618934464,0.011299779524009566,0.04455081942719926,0.005691200008559393,0.019133314430086562,0.007040780330600814,0.008959052822994504,0.0083731176586239,0.11057475458984775,0.00911846283554937,0.010684308447654568,0.010659497555716633,0.018791304659010133,0.004805960428842775,0.004909442967088375,0.0031120625487245515,0.0075911741023643705,0.010513895872616074,0.010981502935268537,0.013066185535632217,0.013216793337538247,0.03296911100523706;0.02333230845635037,1.1229040540133266,0.02794167970718717,0.03872416587521833,0.032895125007503016,0.03765690672280791,0.03352918663874536,0.5030346458251238,0.09492604359089514,0.053356057685934995,0.1395090329820549,0.13512604508626685,0.049877351961479854,0.03516753317764047,0.04117313973680429,0.03965456214788818,0.16460450680850355,0.07251391351154865,0.018414097809145907,0.011199447196344364,0.01155552065509768,0.020632799114582403,0.050359077117865504,0.058559881023922775,0.06609813598427837,0.03704251709677341,0.011611949733100644,0.007563240596203176,0.009409833080595776,0.012800227690292638,0.020428052494390846,0.013688527145493661,0.018373547648018667,0.01942568673928475,0.0686362232540712;0.0954704553302992,0.004430803956457661,1.2329678758673555,0.031190199375290762,0.1836312633402709,0.0298669981571552,0.015860472407276487,0.008576484376145619,0.027867361215337474,0.020213523678252444,0.012305084595681555,0.01128739529588176,0.01141923742360364,0.010665124840483936,0.011549678992302978,0.01592488381402158,0.005983429023269518,0.01095926002912291,0.0073467065146177665,0.010447668834660436,0.009775260283711425,0.19469850357005142,0.00870848800374028,0.014732900308090898,0.014848707338932496,0.012790594598514298,0.0061169690076640195,0.0062346732570356484,0.0026385468574357755,0.00886392431995339,0.013940384008156035,0.014252177007216628,0.020290296358986677,0.016318586638647225,0.007262098497249786;0.0060302701248210015,0.004006676700109087,0.00904268738968259,1.6551747245511341,0.1508098674465682,0.013411304287371487,0.020065296730627284,0.005720450143994532,0.013421787400773634,0.03925420684402553,0.015014873209451388,0.011976226985819523,0.013086023553613416,0.011954750615354724,0.018718559630456627,0.053426714137444806,0.005338925179170155,0.011178233901883154,0.0070653407148983305,0.006789370438600576,0.006681574436619637,0.008621989399681668,0.007967562389938421,0.010751743553876226,0.009394914298093056,0.008082981938077341,0.0037005598263739926,0.003095958967815719,0.0021495087361664365,0.005896146326314103,0.007657357318188845,0.004167038856362846,0.008913397120432,0.011154010227034782,0.0007665764847234533;0.0005819887118573713,0.0003469493167222586,0.0008174279543758484,0.031034555454339717,1.314303396453809,0.0017274306654697588,0.0020465283977673257,0.000517744759265356,0.001117367310679436,0.0031069739597960866,0.00115212110252837,0.0010035622361425592,0.0012171603197466668,0.0014083410797142608,0.00575728621932425,0.009959295597176052,0.0004850666203929055,0.0009039586266884059,0.001220952900127932,0.0006790122358752993,0.000597127272538205,0.0006303646870787348,0.0009922622044815082,0.0008716548778931502,0.0009893901261232058,0.000834886673727398,0.0005316361274608363,0.00028638586311347056,0.00016734488519508665,0.000509943132169332,0.0013189544981096384,0.00043638348648729943,0.0007895334032073197,0.0010977596686128977,7.43118023014571e-05;0.004768569772224659,0.004239274362630431,0.007069603077589176,0.008309529360620096,0.008695302127968636,1.379612527965177,0.027592376851324468,0.004391104563097751,0.00656798419925491,0.010027271033183495,0.01863550392955246,0.01380328125708177,0.011800066692320772,0.008712302923576271,0.011911898133778572,0.113044913838558,0.004556536075231768,0.04726067245392478,0.004852566433863456,0.0034775639930977667,0.0036259058570902265,0.006612254369973557,0.005397185260585483,0.004264759734256104,0.004391736761445722,0.007085230642967293,0.003266169912541146,0.002570016579325799,0.004369318361057054,0.004257687680723294,0.006403115659660446,0.0068888310919495935,0.004981640702964926,0.007445779538279289,0.0007559364093287524;0.01404882453401057,0.009483980082943521,0.05272301039324205,0.04172844449450839,0.049088447423111047,0.0409009206889312,1.3490526069193793,0.015192153625749867,0.039193165743308896,0.045783251787789137,0.0487552527472727,0.023925439017627153,0.02768569106676711,0.03247465770006892,0.026862173825765553,0.045014230544121396,0.013774742524271442,0.02459694495146309,0.021423577689925855,0.022220336614177338,0.02124976555797134,0.026958211835393233,0.02106944404094756,0.0182407207273733,0.021379305753818658,0.03152594799355875,0.021254370898097626,0.02792994582330429,0.00826596242150506,0.038536754971395235,0.03373467061173602,0.03156262331751179,0.02276042992440575,0.04349726183296029,0.0019025703602241015;0.02604449318613683,0.015272942129141306,0.023051443478883247,0.029419871160681503,0.02657950804503683,0.02655762901717872,0.02214605514428046,1.1348696257061373,0.07702614853736858,0.04250806218333412,0.044337211581361044,0.03871482597500778,0.02358605129818668,0.019156892757646465,0.0215215952649228,0.02225628598768347,0.042525353305239995,0.031069296026493744,0.01586093681926492,0.012750940952996738,0.010250181704974333,0.01503060454168021,0.07589485482287248,0.1005976584128395,0.11770344047445705,0.046055661733189805,0.0103088855639972,0.006910775984877296,0.005080171444648935,0.01261029845783013,0.0181538694029434,0.009583331719850458,0.013668477377671996,0.015154267742704229,0.0019966843862213117;0.06834343743657367,0.022265346271485898,0.05554557290887428,0.15903368947436664,0.11827789812792673,0.0977366079588349,0.08943493678601054,0.04874330886929143,1.3489077471079771,0.37526997361629966,0.08651631962376817,0.053494317065741134,0.05504291482803419,0.07360235477757224,0.0664018903335763,0.08167759332091644,0.024289324585635496,0.05131136135586943,0.02803564729818399,0.012980991721182505,0.011851469798988637,0.026488848867197427,0.02390365205335439,0.025110877127152223,0.025425458839923323,0.02528378341109751,0.01284331680370091,0.00875874521190233,0.00773934421401333,0.018799369591316437,0.024329213118906366,0.01459068650260142,0.09444525126725091,0.0294311633716127,0.004112357997214657;0.01459123952688099,0.011918253924417005,0.039109436818653684,0.03631917293138963,0.08021769425853549,0.02533019151080586,0.038244973229787205,0.01952612928003738,0.03929994773954862,1.2183865611590894,0.031219084913656096,0.02597841393428623,0.05259047141693698,0.06099647417210721,0.07912996311359327,0.05936347240611968,0.012446922634301751,0.03802595537485166,0.03078283547738736,0.010218460722866208,0.010308763455534326,0.016545473927824756,0.02502196897032499,0.016283878116477857,0.018296618509606847,0.019453197929422624,0.011024395329189888,0.005407678846198091,0.004744725467439141,0.010691096134003103,0.012251945737929313,0.007201748980459023,0.01462175160745612,0.014453527518482577,0.0017077354753078306;0.005021007029190384,0.007612626057615325,0.011103586599498547,0.008828134786085835,0.008504329047040453,0.014161391287252658,0.00655192979860073,0.00896730003613611,0.012828874905605336,0.013868085092028654,1.1689355594230466,0.02421401670797637,0.017483576761743537,0.024811390163563925,0.019690230080039173,0.01668628446677905,0.0078876438311026,0.11780372478664054,0.008734376941867463,0.0033194598523937674,0.003518120465112353,0.008034302245131707,0.006581752114843279,0.004933147323703661,0.005800592887490233,0.007112617425056254,0.005148734790779539,0.0026412282022687038,0.006467730131376811,0.004391235969910986,0.006696679840443101,0.0052004020804314365,0.006194677662553811,0.006311753364169019,0.0008589097715102028;0.02348962012981834,0.04516629329429245,0.04212266359417915,0.04302131581559429,0.05040804858604839,0.07079201716686379,0.04554927438536932,0.046961045877296145,0.05263742658195343,0.0785162974889678,0.10170530512321055,1.5568009161908785,0.34876159995777367,0.20461744286635294,0.2616472772719162,0.1607263613513279,0.04052479784628078,0.20004981712527406,0.06333363541081818,0.016997670243550686,0.016223012459139343,0.026223329348236697,0.04041980347042625,0.04117235015647515,0.043173447012444334,0.04317711654219819,0.025696362299105123,0.011784357710339848,0.015214962162099705,0.023909584684957137,0.03123278959960686,0.017128195652034297,0.02399562895247482,0.028685529011929573,0.004836135369712293;0.01585434651774329,0.025117820726510923,0.017664027316425936,0.03173001130118637,0.02685765097177141,0.029908512494232268,0.022647963395591452,0.0273391695598396,0.025021062963211986,0.0353561696369382,0.04751463487776764,0.06167048623622181,1.2266158621756862,0.05010161812632385,0.09654862699506996,0.03916401753732907,0.021466514014623267,0.044186060723918744,0.03946310889404692,0.00795135443419736,0.007392444446825817,0.011090634661200294,0.018800892215856683,0.026725228289422667,0.024196691069552464,0.021443455008881524,0.009848657139316996,0.0053178859569941355,0.005175929837553287,0.010140638068546788,0.01604049178184089,0.007701635146605416,0.01274110950287507,0.012608002832402947,0.002756986808747348;0.021897614097223603,0.03483920491337153,0.03626754373691932,0.05293203007562254,0.046378913270019154,0.04982349889682245,0.05589944949701598,0.04431190274486551,0.0570651843587679,0.06748593845559722,0.06515562970857687,0.08895549176580281,0.27142578793358535,1.7343828224145856,0.233820532167995,0.11145910618683211,0.08540802209876575,0.12193272181302536,0.09505686078152976,0.03164086252762466,0.030416938500856545,0.03435522033329817,0.05050181055371765,0.044462757276226,0.05325243427907363,0.05445509378469266,0.10018216479983424,0.028012910791107105,0.016879642849974213,0.06377302138918574,0.0630803065384994,0.039471333045784825,0.07010390860260003,0.05806090099045541,0.005778308792279641;0.013526729256123986,0.0133475893207252,0.01650389129815121,0.020135796072486393,0.019131266902508402,0.022132542981229096,0.020162548321681215,0.01711632965358264,0.016541588561184945,0.022594957672439832,0.026373937582349204,0.031650144594533,0.04583654329312245,0.022765775440945147,1.4775659654690412,0.029417462817180114,0.015654376917791396,0.023537929765355948,0.11056277331070866,0.013965425215827863,0.011022447799485132,0.012155374282631597,0.07000236759583064,0.08414956951629286,0.10012424054838864,0.037385137629074305,0.01168767583358186,0.0072631240352294514,0.004768390050239565,0.013918102909495666,0.03479019881271769,0.009326786485611277,0.009094829321010928,0.021348950143589247,0.001918215706203981;0.002263308160383855,0.0023772052044212775,0.0038960484313391498,0.012210479301489423,0.008451041681438344,0.008152517265250157,0.008996175951541528,0.003716978929541332,0.0051947548040542435,0.0073554612536608855,0.008056019587157903,0.01642166872517032,0.010920042177979516,0.00785976809075789,0.014035545225691786,1.075902335851206,0.004434361347940393,0.009393495694867115,0.004368329253492045,0.002449155169949362,0.002777162537768235,0.00459335618763551,0.007022679543428656,0.00350386071983717,0.005527138902380998,0.004447360848113252,0.0034693117206356966,0.0024739427111669025,0.0022638888113245435,0.0038197689780925083,0.00546246535419202,0.005196101612680239,0.004959830299347855,0.007646372003179526,0.0023389331072139067;0.025467586144522523,0.044022314284627044,0.03931771354379896,0.054280482696072455,0.03766796284501692,0.04851500205587921,0.052882184007749994,0.06350815544843122,0.05957929960707799,0.05815057635669771,0.08268509411948338,0.07369332042350758,0.045808334433805525,0.03613099041036058,0.04181839735762125,0.03715941255075606,1.185990038803137,0.038330494124184614,0.025944559901360614,0.015364883343741236,0.022390030018297535,0.04259707404471538,0.03556780910521572,0.022867230787101615,0.028372477278029197,0.03899930854634253,0.020828186257696564,0.013155795968102015,0.014884613384775947,0.017371990721683737,0.02832764937866146,0.032088095010888495,0.02639123405870973,0.031249915483975193,0.004064156211000122;0.007685856602028023,0.01073347354165208,0.009820892862317786,0.010805513723005901,0.009174002148312625,0.010982824408864163,0.010808585412298986,0.014845426755550464,0.010813729055197042,0.010492495015045976,0.014886856104874623,0.01258242325671339,0.010462291551374793,0.008608917601577393,0.010055620103077248,0.010052370739935411,0.024562987559856454,1.0635109919110117,0.010968522952282293,0.007645846561128359,0.009784431523813315,0.013049381837213792,0.01678736954540475,0.009528787286888572,0.011712098705801477,0.021849980000047366,0.016053573634227946,0.011126485318213796,0.037152066231028555,0.010488902463233798,0.02493955735159866,0.01641054917406896,0.013652750853792915,0.01634510705172531,0.0016707815117558398;0.008679793673188696,0.005421457117317857,0.013401355177142766,0.01167621276438521,0.013495657327472056,0.012588135053365397,0.01087487402474138,0.00957211822812869,0.011494993752408518,0.012990397053769571,0.012284534173504856,0.012168346479820786,0.011167867052212323,0.009362638814860987,0.013018896114086317,0.012457686381000477,0.011064189154854864,0.012740857713852067,1.015299265928275,0.006337137732859209,0.0063627214646280695,0.009932636730925015,0.0189744772140902,0.007205889786310524,0.010675309006625274,0.013489130323376052,0.006135219319361705,0.0057967939250745,0.0036781759346634878,0.008987321430088591,0.007670967973286009,0.004935675064798706,0.007229016235310228,0.00962517607820147,0.0007810727694151454;0.05890522686367246,0.030869639624516058,0.11250831206755753,0.09663514114557015,0.11005002359489782,0.10157334193480903,0.08848209215812658,0.09405163040527802,0.08812538537711406,0.0970596636833593,0.07793691415989573,0.08837579380689685,0.09171963033672406,0.08517058022477525,0.10495543617304344,0.08440209839610009,0.04280847910743554,0.08237746085712006,0.05601755663556146,1.0350573583132734,0.02522235346385894,0.07830141943084236,0.04888054887250889,0.0501469635836081,0.056904397207554816,0.05087591024969922,0.028312060741575964,0.01688538574302965,0.012527497276387927,0.031377710190385426,0.03890107259871272,0.024693670879887743,0.04744978506911592,0.038180855733485466,0.004677779680107268;0.0279925000758019,0.01291259611284175,0.04990183371433507,0.04732938074775407,0.05496136044822954,0.04048950759832266,0.03614212061364873,0.03382388300338201,0.0390521736370536,0.042260792769404434,0.03427660506927098,0.037229491175007554,0.03783740271230973,0.03318924377856623,0.04601797878742072,0.04413042002879918,0.018045025227171732,0.04283397683192901,0.026401783243506317,0.011814530940055065,1.0127499954787762,0.03820575009729035,0.02632544215102056,0.020531984989522425,0.024852056827446154,0.022939077572839767,0.015666013037033487,0.011494030829215995,0.007187701320603502,0.01671844031154971,0.017441446779916683,0.011984459507091821,0.022195405468029356,0.020928490196199644,0.002224455681999309;0.005706501091241956,0.006779568326501528,0.011607278098961716,0.013349037596340313,0.013944316064750484,0.01189647851491205,0.01333549853578767,0.008331943068377487,0.01185848585308066,0.01321420633901165,0.013503456952305301,0.012906739399219646,0.013989255533235162,0.012494151855986058,0.012397011893726542,0.011274652842315575,0.008337723570726733,0.013704548312491875,0.010361910605439246,0.011652952940547261,0.009687799559266392,1.0161916791009058,0.014548664911128798,0.0132391030381719,0.025234470858002032,0.032101944340754376,0.012019824977734942,0.01735631046016148,0.0052536392692435225,0.018966547351010575,0.016364657867976445,0.012978855602677655,0.013315517010364788,0.018071586913360804,0.0009580833458786963;0.026228293620151517,0.0266870585332292,0.04794720809638138,0.04977495681945819,0.04928623803735887,0.049436819238069876,0.040827372348155304,0.07189638441699057,0.042425681878310965,0.043669441065926774,0.05928156462901119,0.044591406096627435,0.0374743107718963,0.030205519353538112,0.03860149985612688,0.04221700444340232,0.03519554078337511,0.04508525531490549,0.029478382717887795,0.030481603926766083,0.02027390416759541,0.026201360427425463,1.0651431098725275,0.03289585966323451,0.03427616318814027,0.07910729467070028,0.017674878952320394,0.013077542909481946,0.006748105322503662,0.015470326272462104,0.0209456018708182,0.016950692143414256,0.017959436798157584,0.02112959207191693,0.003179216641479807;0.0057589578511709665,0.009890230881193455,0.011774278840453588,0.013448877621719398,0.012642308473896715,0.016101040966797407,0.009371780361892033,0.011203152105735232,0.009677568277303848,0.010746507199612072,0.017803401823169505,0.015851668818927484,0.011615484539328043,0.008887734145152825,0.011110319778314445,0.009502652658723017,0.007194555932491861,0.01045548308976447,0.005220379022873046,0.009251189817265923,0.005156431318384044,0.005823981670797034,0.007028107940157372,1.190058244448185,0.008013456251700699,0.010445291000013332,0.0030598434699254592,0.002225356691360577,0.003232207557306397,0.003577946470625086,0.0038124801130468397,0.0026238936349440717,0.003225760064710554,0.0040266749125965175,0.000895327305861807;0.002366266826253824,0.002696050669564634,0.00428903002654043,0.0051469024995001965,0.005899233939772391,0.004846142346872873,0.005233612556550632,0.003555046522348038,0.00455879943297933,0.004788724352515219,0.004500792476860473,0.004101869010276156,0.005214668497926313,0.00488494178939926,0.00498531580083958,0.004209871501319513,0.0026996855604016702,0.0042272500503882674,0.004174171000157454,0.004649832482537522,0.00319016968478316,0.003757005879148347,0.005177418994864852,0.009062692713114408,1.0362007444045311,0.016680641394203412,0.00571554194038324,0.005404465856229813,0.0015254781310386316,0.006026798997885612,0.005730945250303679,0.00494531620984963,0.0030627151296325926,0.006800799061078209,0.0003542782320819127;0.011824433483809542,0.011299886066011091,0.02164729867053294,0.019312360000039212,0.020243669165441864,0.022931905219153045,0.023497156542587556,0.02472253768700343,0.018161663910849633,0.02003018600632948,0.023258816438985037,0.019960222147856206,0.017988746822235505,0.015379115932125341,0.019281868956226834,0.017174366788636028,0.01291377874585356,0.02856275403928379,0.023393858226808766,0.028122560708306946,0.01946268021593744,0.01807498165495446,0.051523161039093865,0.15822316981810858,0.12720847343265182,1.1208701347999686,0.010458736608528429,0.00969141136652066,0.004821208884724125,0.012501362558353737,0.01253588410367679,0.008101594660388381,0.010428024523232148,0.014873527772575891,0.0013489475955998204;0.015847972284981207,0.013714573609880985,0.02595487084248685,0.031188341278749927,0.029454470752464,0.027797969007820108,0.03586332666770829,0.02223113523028307,0.028968846043198666,0.027673902931177455,0.027158527914678987,0.030337719057454426,0.028837792879711586,0.03174408678255629,0.029217879873119378,0.038808997852899436,0.022478636781381664,0.03483571099107522,0.03338181041239657,0.03125334298037246,0.03546686987699069,0.03418750158431956,0.04079018475073067,0.0438772866580318,0.04733040896618145,0.048013449051476205,1.1468643914445336,0.05330785306649995,0.014381751903932625,0.0451967769078471,0.040784295057325545,0.022932913176108162,0.029933302372685065,0.04219878179991206,0.0030729304847339407;0.04782311858528851,0.044327036761267015,0.06652824182743837,0.08482912853175748,0.07460913528476543,0.0672922498203716,0.07394245285908568,0.061603951229979845,0.06664229516754316,0.06701726329707844,0.07481091123873558,0.07024131240966401,0.0671461885876282,0.06248369634090726,0.07122116766478821,0.08113800997790929,0.06154567906335294,0.07120832187556093,0.05624648612314301,0.05795540164842238,0.06548466646121136,0.07007076725821502,0.09557859207401496,0.06833578127286877,0.08126791311625098,0.08621603325779788,0.048000072120593006,1.2898631805913112,0.11770530479056997,0.07883496794198352,0.058015697497070876,0.04032743632583513,0.06044872289844639,0.08917369626696735,0.018121621772715275;0.011141204007220037,0.01231834358807908,0.019800010877601717,0.021898185545841047,0.02365114061917356,0.021128903987824087,0.02618548726560419,0.0160076982279236,0.018872201977003473,0.021276870099224705,0.01909682850231406,0.019713849553608047,0.02047683654942849,0.018494798368174904,0.0224744365571625,0.02167836274300661,0.014850746542798618,0.02634055013494864,0.03330901565484817,0.027651933141925888,0.051039537262530486,0.04224635722612189,0.021892617558087985,0.02771661243603175,0.024808384446343774,0.037977743430983535,0.023228452450909185,0.037501063777719355,1.0405196222317297,0.035479672936105024,0.02563944268982287,0.029026877639985658,0.04592018148061048,0.04049400847519063,0.0017624533298934199;0.055417620476997366,0.05647598846068885,0.1139623516124318,0.10390565721787315,0.1017236671976587,0.09917963533712015,0.15326908035669123,0.08494496794498067,0.1519400614889951,0.12934697448270485,0.1053329974465553,0.10586166499271595,0.12293092606422278,0.131003939888036,0.14084186895720824,0.10227128185292972,0.08701552751704075,0.13364726202463856,0.11184578200476561,0.09948978087100936,0.10513968501973364,0.11350656969536405,0.10723725050765663,0.09136270577912309,0.14735109847971073,0.14028606739096322,0.10948216554111266,0.18391301469481122,0.06390761301048366,1.2327578289105148,0.14885793656233243,0.0743825369870885,0.12811576270164032,0.15492539222851284,0.010848979483092276;0.003235236544661084,0.0034542633431338633,0.005408336401062942,0.00413897846328121,0.004202886813931765,0.0068218348441883795,0.007954604663309143,0.004401069366682933,0.006288595114069573,0.00603780910235191,0.006153188243398189,0.0076788050471136085,0.005119346180377721,0.00436175865156483,0.005208545808247456,0.005511935462724789,0.007057647640583005,0.005068260698523717,0.004834993292286563,0.003033612871901424,0.0044671487793041,0.0065583828253518465,0.006251425058953684,0.008627660956928037,0.013809270904430907,0.0068091424397103755,0.00451575596312994,0.003781743979241845,0.004442218620202395,0.005334599916851901,1.009948720411754,0.006241055019889591,0.006863501252041022,0.011698141688732601,0.000415663020983055;0.0012174307383467798,0.000934742566445701,0.0015836115788492105,0.0015484373902878727,0.0016032651658150533,0.0014885546152863273,0.0017596971219964058,0.0014744118714165306,0.0020819724638542064,0.0018731219581712409,0.0015968402543767193,0.0016798821949196394,0.002040283571409413,0.0018396638250444916,0.0021658197349628872,0.001466278837625028,0.0014337805201047758,0.0016521845150009307,0.0016408599023223817,0.0013539580209494771,0.0018805762157716828,0.0015056414153528318,0.0018842892212817708,0.001313105381445673,0.0033641934629172142,0.0022311262416720556,0.0019861583210271515,0.002261817477310489,0.0007467887438243268,0.0032422085811394242,0.005225203496722344,1.0168711046766608,0.0021721508465630474,0.0026506056394521144,0.00014849208603782084;0.001910523552437973,0.0008893854345900982,0.001636353522015505,0.0014839125760018384,0.0023207569654408633,0.0017568139438732982,0.0014408314178283082,0.0010044990263311073,0.00139554056030635,0.0013439566186948765,0.00184950593002599,0.0016344423545444056,0.0022404827974556274,0.0014739701845802736,0.001781333321871137,0.001382776425510009,0.001023806978781828,0.0013154521088733653,0.0011505839937161106,0.0008311606845934973,0.0008020971692950773,0.0016275641741028666,0.001223005861197579,0.0010160044389404019,0.0012106244461647972,0.0011608952508854159,0.0009855782362452382,0.0010790348029454868,0.00035836479491885477,0.0011703444002859008,0.006620922611628199,0.002130856590842546,1.0350698426997842,0.0021896930688024606,0.00013563128662466027;0.01006866675807489,0.011708309859620198,0.018207087302170744,0.019078970021437856,0.02103154960919353,0.01794612757473038,0.02892950451903688,0.0143021952508194,0.020894991139972452,0.019417571750516772,0.018829358642108374,0.018983579067105377,0.01780452943646489,0.016064993170035725,0.019817779386922016,0.016970529583026712,0.0150259446780386,0.019278797675767626,0.016634493302468006,0.015358390692170069,0.016714915290107324,0.025925585649305784,0.025640710257533235,0.01714078472222148,0.021558797072441887,0.029953219967046293,0.025754787388948153,0.022916978866109914,0.01261070924551301,0.039736993781737374,0.02837593626820603,0.01876980516690417,0.0242013302415413,1.0934728023132918,0.002859864332853836;4.048956384500152e-05,4.719933356227875e-05,7.200842733551964e-05,0.00020804375036824309,0.00010335838884483804,8.358982971778833e-05,7.915852232495167e-05,6.005245193616676e-05,6.306107393198464e-05,7.084936139189499e-05,6.744831626844456e-05,6.167913249549132e-05,8.588084642505624e-05,5.898781933738732e-05,0.00013826100078806832,6.579252496507633e-05,4.0716292146397224e-05,9.451496033666986e-05,6.497937638524552e-05,3.614626219149209e-05,6.472269227611616e-05,9.210985479147696e-05,0.00017816373070420063,4.6499059742485444e-05,6.145994941453933e-05,6.332460087902792e-05,5.9688489212883326e-05,0.00010320488451746595,0.00018669899775749775,9.961434610125589e-05,9.970438493228053e-05,6.464799794311873e-05,8.747440688238489e-05,0.00014040678750976124,1.000096302259851;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            1.16963337e+00, 4.46228395e-03, 3.79008126e-01, 1.14867590e-01, 1.56998544e-01,
            2.27894740e-01, 4.14547398e-02, 9.57824267e-03, 2.53612530e-02, 3.41504227e-02,
            1.25157962e-02, 1.00098975e-02, 1.01417261e-02, 9.40939862e-03, 1.12997795e-02,
            4.45508194e-02, 5.69120001e-03, 1.91333144e-02, 7.04078033e-03, 8.95905282e-03,
            8.37311766e-03, 1.10574755e-01, 9.11846284e-03, 1.06843084e-02, 1.06594976e-02,
            1.87913047e-02, 4.80596043e-03, 4.90944297e-03, 3.11206255e-03, 7.59117410e-03,
            1.05138959e-02, 1.09815029e-02, 1.30661855e-02, 1.32167933e-02, 3.29691110e-02
        ],
              [
                  2.33323085e-02, 1.12290405e+00, 2.79416797e-02, 3.87241659e-02, 3.28951250e-02,
                  3.76569067e-02, 3.35291866e-02, 5.03034646e-01, 9.49260436e-02, 5.33560577e-02,
                  1.39509033e-01, 1.35126045e-01, 4.98773520e-02, 3.51675332e-02, 4.11731397e-02,
                  3.96545621e-02, 1.64604507e-01, 7.25139135e-02, 1.84140978e-02, 1.11994472e-02,
                  1.15555207e-02, 2.06327991e-02, 5.03590771e-02, 5.85598810e-02, 6.60981360e-02,
                  3.70425171e-02, 1.16119497e-02, 7.56324060e-03, 9.40983308e-03, 1.28002277e-02,
                  2.04280525e-02, 1.36885271e-02, 1.83735476e-02, 1.94256867e-02, 6.86362233e-02
              ],
              [
                  9.54704553e-02, 4.43080396e-03, 1.23296788e+00, 3.11901994e-02, 1.83631263e-01,
                  2.98669982e-02, 1.58604724e-02, 8.57648438e-03, 2.78673612e-02, 2.02135237e-02,
                  1.23050846e-02, 1.12873953e-02, 1.14192374e-02, 1.06651248e-02, 1.15496790e-02,
                  1.59248838e-02, 5.98342902e-03, 1.09592600e-02, 7.34670651e-03, 1.04476688e-02,
                  9.77526028e-03, 1.94698504e-01, 8.70848800e-03, 1.47329003e-02, 1.48487073e-02,
                  1.27905946e-02, 6.11696901e-03, 6.23467326e-03, 2.63854686e-03, 8.86392432e-03,
                  1.39403840e-02, 1.42521770e-02, 2.02902964e-02, 1.63185866e-02, 7.26209850e-03
              ],
              [
                  6.03027012e-03, 4.00667670e-03, 9.04268739e-03, 1.65517472e+00, 1.50809867e-01,
                  1.34113043e-02, 2.00652967e-02, 5.72045014e-03, 1.34217874e-02, 3.92542068e-02,
                  1.50148732e-02, 1.19762270e-02, 1.30860236e-02, 1.19547506e-02, 1.87185596e-02,
                  5.34267141e-02, 5.33892518e-03, 1.11782339e-02, 7.06534071e-03, 6.78937044e-03,
                  6.68157444e-03, 8.62198940e-03, 7.96756239e-03, 1.07517436e-02, 9.39491430e-03,
                  8.08298194e-03, 3.70055983e-03, 3.09595897e-03, 2.14950874e-03, 5.89614633e-03,
                  7.65735732e-03, 4.16703886e-03, 8.91339712e-03, 1.11540102e-02, 7.66576485e-04
              ],
              [
                  5.81988712e-04, 3.46949317e-04, 8.17427954e-04, 3.10345555e-02, 1.31430340e+00,
                  1.72743067e-03, 2.04652840e-03, 5.17744759e-04, 1.11736731e-03, 3.10697396e-03,
                  1.15212110e-03, 1.00356224e-03, 1.21716032e-03, 1.40834108e-03, 5.75728622e-03,
                  9.95929560e-03, 4.85066620e-04, 9.03958627e-04, 1.22095290e-03, 6.79012236e-04,
                  5.97127273e-04, 6.30364687e-04, 9.92262204e-04, 8.71654878e-04, 9.89390126e-04,
                  8.34886674e-04, 5.31636127e-04, 2.86385863e-04, 1.67344885e-04, 5.09943132e-04,
                  1.31895450e-03, 4.36383486e-04, 7.89533403e-04, 1.09775967e-03, 7.43118023e-05
              ],
              [
                  4.76856977e-03, 4.23927436e-03, 7.06960308e-03, 8.30952936e-03, 8.69530213e-03,
                  1.37961253e+00, 2.75923769e-02, 4.39110456e-03, 6.56798420e-03, 1.00272710e-02,
                  1.86355039e-02, 1.38032813e-02, 1.18000667e-02, 8.71230292e-03, 1.19118981e-02,
                  1.13044914e-01, 4.55653608e-03, 4.72606725e-02, 4.85256643e-03, 3.47756399e-03,
                  3.62590586e-03, 6.61225437e-03, 5.39718526e-03, 4.26475973e-03, 4.39173676e-03,
                  7.08523064e-03, 3.26616991e-03, 2.57001658e-03, 4.36931836e-03, 4.25768768e-03,
                  6.40311566e-03, 6.88883109e-03, 4.98164070e-03, 7.44577954e-03, 7.55936409e-04
              ],
              [
                  1.40488245e-02, 9.48398008e-03, 5.27230104e-02, 4.17284445e-02, 4.90884474e-02,
                  4.09009207e-02, 1.34905261e+00, 1.51921536e-02, 3.91931657e-02, 4.57832518e-02,
                  4.87552527e-02, 2.39254390e-02, 2.76856911e-02, 3.24746577e-02, 2.68621738e-02,
                  4.50142305e-02, 1.37747425e-02, 2.45969450e-02, 2.14235777e-02, 2.22203366e-02,
                  2.12497656e-02, 2.69582118e-02, 2.10694440e-02, 1.82407207e-02, 2.13793058e-02,
                  3.15259480e-02, 2.12543709e-02, 2.79299458e-02, 8.26596242e-03, 3.85367550e-02,
                  3.37346706e-02, 3.15626233e-02, 2.27604299e-02, 4.34972618e-02, 1.90257036e-03
              ],
              [
                  2.60444932e-02, 1.52729421e-02, 2.30514435e-02, 2.94198712e-02, 2.65795080e-02,
                  2.65576290e-02, 2.21460551e-02, 1.13486963e+00, 7.70261485e-02, 4.25080622e-02,
                  4.43372116e-02, 3.87148260e-02, 2.35860513e-02, 1.91568928e-02, 2.15215953e-02,
                  2.22562860e-02, 4.25253533e-02, 3.10692960e-02, 1.58609368e-02, 1.27509410e-02,
                  1.02501817e-02, 1.50306045e-02, 7.58948548e-02, 1.00597658e-01, 1.17703440e-01,
                  4.60556617e-02, 1.03088856e-02, 6.91077598e-03, 5.08017144e-03, 1.26102985e-02,
                  1.81538694e-02, 9.58333172e-03, 1.36684774e-02, 1.51542677e-02, 1.99668439e-03
              ],
              [
                  6.83434374e-02, 2.22653463e-02, 5.55455729e-02, 1.59033689e-01, 1.18277898e-01,
                  9.77366080e-02, 8.94349368e-02, 4.87433089e-02, 1.34890775e+00, 3.75269974e-01,
                  8.65163196e-02, 5.34943171e-02, 5.50429148e-02, 7.36023548e-02, 6.64018903e-02,
                  8.16775933e-02, 2.42893246e-02, 5.13113614e-02, 2.80356473e-02, 1.29809917e-02,
                  1.18514698e-02, 2.64888489e-02, 2.39036521e-02, 2.51108771e-02, 2.54254588e-02,
                  2.52837834e-02, 1.28433168e-02, 8.75874521e-03, 7.73934421e-03, 1.87993696e-02,
                  2.43292131e-02, 1.45906865e-02, 9.44452513e-02, 2.94311634e-02, 4.11235800e-03
              ],
              [
                  1.45912395e-02, 1.19182539e-02, 3.91094368e-02, 3.63191729e-02, 8.02176943e-02,
                  2.53301915e-02, 3.82449732e-02, 1.95261293e-02, 3.92999477e-02, 1.21838656e+00,
                  3.12190849e-02, 2.59784139e-02, 5.25904714e-02, 6.09964742e-02, 7.91299631e-02,
                  5.93634724e-02, 1.24469226e-02, 3.80259554e-02, 3.07828355e-02, 1.02184607e-02,
                  1.03087635e-02, 1.65454739e-02, 2.50219690e-02, 1.62838781e-02, 1.82966185e-02,
                  1.94531979e-02, 1.10243953e-02, 5.40767885e-03, 4.74472547e-03, 1.06910961e-02,
                  1.22519457e-02, 7.20174898e-03, 1.46217516e-02, 1.44535275e-02, 1.70773548e-03
              ],
              [
                  5.02100703e-03, 7.61262606e-03, 1.11035866e-02, 8.82813479e-03, 8.50432905e-03,
                  1.41613913e-02, 6.55192980e-03, 8.96730004e-03, 1.28288749e-02, 1.38680851e-02,
                  1.16893556e+00, 2.42140167e-02, 1.74835768e-02, 2.48113902e-02, 1.96902301e-02,
                  1.66862845e-02, 7.88764383e-03, 1.17803725e-01, 8.73437694e-03, 3.31945985e-03,
                  3.51812047e-03, 8.03430225e-03, 6.58175211e-03, 4.93314732e-03, 5.80059289e-03,
                  7.11261743e-03, 5.14873479e-03, 2.64122820e-03, 6.46773013e-03, 4.39123597e-03,
                  6.69667984e-03, 5.20040208e-03, 6.19467766e-03, 6.31175336e-03, 8.58909772e-04
              ],
              [
                  2.34896201e-02, 4.51662933e-02, 4.21226636e-02, 4.30213158e-02, 5.04080486e-02,
                  7.07920172e-02, 4.55492744e-02, 4.69610459e-02, 5.26374266e-02, 7.85162975e-02,
                  1.01705305e-01, 1.55680092e+00, 3.48761600e-01, 2.04617443e-01, 2.61647277e-01,
                  1.60726361e-01, 4.05247978e-02, 2.00049817e-01, 6.33336354e-02, 1.69976702e-02,
                  1.62230125e-02, 2.62233293e-02, 4.04198035e-02, 4.11723502e-02, 4.31734470e-02,
                  4.31771165e-02, 2.56963623e-02, 1.17843577e-02, 1.52149622e-02, 2.39095847e-02,
                  3.12327896e-02, 1.71281957e-02, 2.39956290e-02, 2.86855290e-02, 4.83613537e-03
              ],
              [
                  1.58543465e-02, 2.51178207e-02, 1.76640273e-02, 3.17300113e-02, 2.68576510e-02,
                  2.99085125e-02, 2.26479634e-02, 2.73391696e-02, 2.50210630e-02, 3.53561696e-02,
                  4.75146349e-02, 6.16704862e-02, 1.22661586e+00, 5.01016181e-02, 9.65486270e-02,
                  3.91640175e-02, 2.14665140e-02, 4.41860607e-02, 3.94631089e-02, 7.95135443e-03,
                  7.39244445e-03, 1.10906347e-02, 1.88008922e-02, 2.67252283e-02, 2.41966911e-02,
                  2.14434550e-02, 9.84865714e-03, 5.31788596e-03, 5.17592984e-03, 1.01406381e-02,
                  1.60404918e-02, 7.70163515e-03, 1.27411095e-02, 1.26080028e-02, 2.75698681e-03
              ],
              [
                  2.18976141e-02, 3.48392049e-02, 3.62675437e-02, 5.29320301e-02, 4.63789133e-02,
                  4.98234989e-02, 5.58994495e-02, 4.43119027e-02, 5.70651844e-02, 6.74859385e-02,
                  6.51556297e-02, 8.89554918e-02, 2.71425788e-01, 1.73438282e+00, 2.33820532e-01,
                  1.11459106e-01, 8.54080221e-02, 1.21932722e-01, 9.50568608e-02, 3.16408625e-02,
                  3.04169385e-02, 3.43552203e-02, 5.05018106e-02, 4.44627573e-02, 5.32524343e-02,
                  5.44550938e-02, 1.00182165e-01, 2.80129108e-02, 1.68796428e-02, 6.37730214e-02,
                  6.30803065e-02, 3.94713330e-02, 7.01039086e-02, 5.80609010e-02, 5.77830879e-03
              ],
              [
                  1.35267293e-02, 1.33475893e-02, 1.65038913e-02, 2.01357961e-02, 1.91312669e-02,
                  2.21325430e-02, 2.01625483e-02, 1.71163297e-02, 1.65415886e-02, 2.25949577e-02,
                  2.63739376e-02, 3.16501446e-02, 4.58365433e-02, 2.27657754e-02, 1.47756597e+00,
                  2.94174628e-02, 1.56543769e-02, 2.35379298e-02, 1.10562773e-01, 1.39654252e-02,
                  1.10224478e-02, 1.21553743e-02, 7.00023676e-02, 8.41495695e-02, 1.00124241e-01,
                  3.73851376e-02, 1.16876758e-02, 7.26312404e-03, 4.76839005e-03, 1.39181029e-02,
                  3.47901988e-02, 9.32678649e-03, 9.09482932e-03, 2.13489501e-02, 1.91821571e-03
              ],
              [
                  2.26330816e-03, 2.37720520e-03, 3.89604843e-03, 1.22104793e-02, 8.45104168e-03,
                  8.15251727e-03, 8.99617595e-03, 3.71697893e-03, 5.19475480e-03, 7.35546125e-03,
                  8.05601959e-03, 1.64216687e-02, 1.09200422e-02, 7.85976809e-03, 1.40355452e-02,
                  1.07590234e+00, 4.43436135e-03, 9.39349569e-03, 4.36832925e-03, 2.44915517e-03,
                  2.77716254e-03, 4.59335619e-03, 7.02267954e-03, 3.50386072e-03, 5.52713890e-03,
                  4.44736085e-03, 3.46931172e-03, 2.47394271e-03, 2.26388881e-03, 3.81976898e-03,
                  5.46246535e-03, 5.19610161e-03, 4.95983030e-03, 7.64637200e-03, 2.33893311e-03
              ],
              [
                  2.54675861e-02, 4.40223143e-02, 3.93177135e-02, 5.42804827e-02, 3.76679628e-02,
                  4.85150021e-02, 5.28821840e-02, 6.35081554e-02, 5.95792996e-02, 5.81505764e-02,
                  8.26850941e-02, 7.36933204e-02, 4.58083344e-02, 3.61309904e-02, 4.18183974e-02,
                  3.71594126e-02, 1.18599004e+00, 3.83304941e-02, 2.59445599e-02, 1.53648833e-02,
                  2.23900300e-02, 4.25970740e-02, 3.55678091e-02, 2.28672308e-02, 2.83724773e-02,
                  3.89993085e-02, 2.08281863e-02, 1.31557960e-02, 1.48846134e-02, 1.73719907e-02,
                  2.83276494e-02, 3.20880950e-02, 2.63912341e-02, 3.12499155e-02, 4.06415621e-03
              ],
              [
                  7.68585660e-03, 1.07334735e-02, 9.82089286e-03, 1.08055137e-02, 9.17400215e-03,
                  1.09828244e-02, 1.08085854e-02, 1.48454268e-02, 1.08137291e-02, 1.04924950e-02,
                  1.48868561e-02, 1.25824233e-02, 1.04622916e-02, 8.60891760e-03, 1.00556201e-02,
                  1.00523707e-02, 2.45629876e-02, 1.06351099e+00, 1.09685230e-02, 7.64584656e-03,
                  9.78443152e-03, 1.30493818e-02, 1.67873695e-02, 9.52878729e-03, 1.17120987e-02,
                  2.18499800e-02, 1.60535736e-02, 1.11264853e-02, 3.71520662e-02, 1.04889025e-02,
                  2.49395574e-02, 1.64105492e-02, 1.36527509e-02, 1.63451071e-02, 1.67078151e-03
              ],
              [
                  8.67979367e-03, 5.42145712e-03, 1.34013552e-02, 1.16762128e-02, 1.34956573e-02,
                  1.25881351e-02, 1.08748740e-02, 9.57211823e-03, 1.14949938e-02, 1.29903971e-02,
                  1.22845342e-02, 1.21683465e-02, 1.11678671e-02, 9.36263881e-03, 1.30188961e-02,
                  1.24576864e-02, 1.10641892e-02, 1.27408577e-02, 1.01529927e+00, 6.33713773e-03,
                  6.36272146e-03, 9.93263673e-03, 1.89744772e-02, 7.20588979e-03, 1.06753090e-02,
                  1.34891303e-02, 6.13521932e-03, 5.79679393e-03, 3.67817593e-03, 8.98732143e-03,
                  7.67096797e-03, 4.93567506e-03, 7.22901624e-03, 9.62517608e-03, 7.81072769e-04
              ],
              [
                  5.89052269e-02, 3.08696396e-02, 1.12508312e-01, 9.66351411e-02, 1.10050024e-01,
                  1.01573342e-01, 8.84820922e-02, 9.40516304e-02, 8.81253854e-02, 9.70596637e-02,
                  7.79369142e-02, 8.83757938e-02, 9.17196303e-02, 8.51705802e-02, 1.04955436e-01,
                  8.44020984e-02, 4.28084791e-02, 8.23774609e-02, 5.60175566e-02, 1.03505736e+00,
                  2.52223535e-02, 7.83014194e-02, 4.88805489e-02, 5.01469636e-02, 5.69043972e-02,
                  5.08759102e-02, 2.83120607e-02, 1.68853857e-02, 1.25274973e-02, 3.13777102e-02,
                  3.89010726e-02, 2.46936709e-02, 4.74497851e-02, 3.81808557e-02, 4.67777968e-03
              ],
              [
                  2.79925001e-02, 1.29125961e-02, 4.99018337e-02, 4.73293807e-02, 5.49613604e-02,
                  4.04895076e-02, 3.61421206e-02, 3.38238830e-02, 3.90521736e-02, 4.22607928e-02,
                  3.42766051e-02, 3.72294912e-02, 3.78374027e-02, 3.31892438e-02, 4.60179788e-02,
                  4.41304200e-02, 1.80450252e-02, 4.28339768e-02, 2.64017832e-02, 1.18145309e-02,
                  1.01275000e+00, 3.82057501e-02, 2.63254422e-02, 2.05319850e-02, 2.48520568e-02,
                  2.29390776e-02, 1.56660130e-02, 1.14940308e-02, 7.18770132e-03, 1.67184403e-02,
                  1.74414468e-02, 1.19844595e-02, 2.21954055e-02, 2.09284902e-02, 2.22445568e-03
              ],
              [
                  5.70650109e-03, 6.77956833e-03, 1.16072781e-02, 1.33490376e-02, 1.39443161e-02,
                  1.18964785e-02, 1.33354985e-02, 8.33194307e-03, 1.18584859e-02, 1.32142063e-02,
                  1.35034570e-02, 1.29067394e-02, 1.39892555e-02, 1.24941519e-02, 1.23970119e-02,
                  1.12746528e-02, 8.33772357e-03, 1.37045483e-02, 1.03619106e-02, 1.16529529e-02,
                  9.68779956e-03, 1.01619168e+00, 1.45486649e-02, 1.32391030e-02, 2.52344709e-02,
                  3.21019443e-02, 1.20198250e-02, 1.73563105e-02, 5.25363927e-03, 1.89665474e-02,
                  1.63646579e-02, 1.29788556e-02, 1.33155170e-02, 1.80715869e-02, 9.58083346e-04
              ],
              [
                  2.62282936e-02, 2.66870585e-02, 4.79472081e-02, 4.97749568e-02, 4.92862380e-02,
                  4.94368192e-02, 4.08273723e-02, 7.18963844e-02, 4.24256819e-02, 4.36694411e-02,
                  5.92815646e-02, 4.45914061e-02, 3.74743108e-02, 3.02055194e-02, 3.86014999e-02,
                  4.22170044e-02, 3.51955408e-02, 4.50852553e-02, 2.94783827e-02, 3.04816039e-02,
                  2.02739042e-02, 2.62013604e-02, 1.06514311e+00, 3.28958597e-02, 3.42761632e-02,
                  7.91072947e-02, 1.76748790e-02, 1.30775429e-02, 6.74810532e-03, 1.54703263e-02,
                  2.09456019e-02, 1.69506921e-02, 1.79594368e-02, 2.11295921e-02, 3.17921664e-03
              ],
              [
                  5.75895785e-03, 9.89023088e-03, 1.17742788e-02, 1.34488776e-02, 1.26423085e-02,
                  1.61010410e-02, 9.37178036e-03, 1.12031521e-02, 9.67756828e-03, 1.07465072e-02,
                  1.78034018e-02, 1.58516688e-02, 1.16154845e-02, 8.88773415e-03, 1.11103198e-02,
                  9.50265266e-03, 7.19455593e-03, 1.04554831e-02, 5.22037902e-03, 9.25118982e-03,
                  5.15643132e-03, 5.82398167e-03, 7.02810794e-03, 1.19005824e+00, 8.01345625e-03,
                  1.04452910e-02, 3.05984347e-03, 2.22535669e-03, 3.23220756e-03, 3.57794647e-03,
                  3.81248011e-03, 2.62389363e-03, 3.22576006e-03, 4.02667491e-03, 8.95327306e-04
              ],
              [
                  2.36626683e-03, 2.69605067e-03, 4.28903003e-03, 5.14690250e-03, 5.89923394e-03,
                  4.84614235e-03, 5.23361256e-03, 3.55504652e-03, 4.55879943e-03, 4.78872435e-03,
                  4.50079248e-03, 4.10186901e-03, 5.21466850e-03, 4.88494179e-03, 4.98531580e-03,
                  4.20987150e-03, 2.69968556e-03, 4.22725005e-03, 4.17417100e-03, 4.64983248e-03,
                  3.19016968e-03, 3.75700588e-03, 5.17741899e-03, 9.06269271e-03, 1.03620074e+00,
                  1.66806414e-02, 5.71554194e-03, 5.40446586e-03, 1.52547813e-03, 6.02679900e-03,
                  5.73094525e-03, 4.94531621e-03, 3.06271513e-03, 6.80079906e-03, 3.54278232e-04
              ],
              [
                  1.18244335e-02, 1.12998861e-02, 2.16472987e-02, 1.93123600e-02, 2.02436692e-02,
                  2.29319052e-02, 2.34971565e-02, 2.47225377e-02, 1.81616639e-02, 2.00301860e-02,
                  2.32588164e-02, 1.99602221e-02, 1.79887468e-02, 1.53791159e-02, 1.92818690e-02,
                  1.71743668e-02, 1.29137787e-02, 2.85627540e-02, 2.33938582e-02, 2.81225607e-02,
                  1.94626802e-02, 1.80749817e-02, 5.15231610e-02, 1.58223170e-01, 1.27208473e-01,
                  1.12087013e+00, 1.04587366e-02, 9.69141137e-03, 4.82120888e-03, 1.25013626e-02,
                  1.25358841e-02, 8.10159466e-03, 1.04280245e-02, 1.48735278e-02, 1.34894760e-03
              ],
              [
                  1.58479723e-02, 1.37145736e-02, 2.59548708e-02, 3.11883413e-02, 2.94544708e-02,
                  2.77979690e-02, 3.58633267e-02, 2.22311352e-02, 2.89688460e-02, 2.76739029e-02,
                  2.71585279e-02, 3.03377191e-02, 2.88377929e-02, 3.17440868e-02, 2.92178799e-02,
                  3.88089979e-02, 2.24786368e-02, 3.48357110e-02, 3.33818104e-02, 3.12533430e-02,
                  3.54668699e-02, 3.41875016e-02, 4.07901848e-02, 4.38772867e-02, 4.73304090e-02,
                  4.80134491e-02, 1.14686439e+00, 5.33078531e-02, 1.43817519e-02, 4.51967769e-02,
                  4.07842951e-02, 2.29329132e-02, 2.99333024e-02, 4.21987818e-02, 3.07293048e-03
              ],
              [
                  4.78231186e-02, 4.43270368e-02, 6.65282418e-02, 8.48291285e-02, 7.46091353e-02,
                  6.72922498e-02, 7.39424529e-02, 6.16039512e-02, 6.66422952e-02, 6.70172633e-02,
                  7.48109112e-02, 7.02413124e-02, 6.71461886e-02, 6.24836963e-02, 7.12211677e-02,
                  8.11380100e-02, 6.15456791e-02, 7.12083219e-02, 5.62464861e-02, 5.79554016e-02,
                  6.54846665e-02, 7.00707673e-02, 9.55785921e-02, 6.83357813e-02, 8.12679131e-02,
                  8.62160333e-02, 4.80000721e-02, 1.28986318e+00, 1.17705305e-01, 7.88349679e-02,
                  5.80156975e-02, 4.03274363e-02, 6.04487229e-02, 8.91736963e-02, 1.81216218e-02
              ],
              [
                  1.11412040e-02, 1.23183436e-02, 1.98000109e-02, 2.18981855e-02, 2.36511406e-02,
                  2.11289040e-02, 2.61854873e-02, 1.60076982e-02, 1.88722020e-02, 2.12768701e-02,
                  1.90968285e-02, 1.97138496e-02, 2.04768365e-02, 1.84947984e-02, 2.24744366e-02,
                  2.16783627e-02, 1.48507465e-02, 2.63405501e-02, 3.33090157e-02, 2.76519331e-02,
                  5.10395373e-02, 4.22463572e-02, 2.18926176e-02, 2.77166124e-02, 2.48083844e-02,
                  3.79777434e-02, 2.32284525e-02, 3.75010638e-02, 1.04051962e+00, 3.54796729e-02,
                  2.56394427e-02, 2.90268776e-02, 4.59201815e-02, 4.04940085e-02, 1.76245333e-03
              ],
              [
                  5.54176205e-02, 5.64759885e-02, 1.13962352e-01, 1.03905657e-01, 1.01723667e-01,
                  9.91796353e-02, 1.53269080e-01, 8.49449679e-02, 1.51940061e-01, 1.29346974e-01,
                  1.05332997e-01, 1.05861665e-01, 1.22930926e-01, 1.31003940e-01, 1.40841869e-01,
                  1.02271282e-01, 8.70155275e-02, 1.33647262e-01, 1.11845782e-01, 9.94897809e-02,
                  1.05139685e-01, 1.13506570e-01, 1.07237251e-01, 9.13627058e-02, 1.47351098e-01,
                  1.40286067e-01, 1.09482166e-01, 1.83913015e-01, 6.39076130e-02, 1.23275783e+00,
                  1.48857937e-01, 7.43825370e-02, 1.28115763e-01, 1.54925392e-01, 1.08489795e-02
              ],
              [
                  3.23523654e-03, 3.45426334e-03, 5.40833640e-03, 4.13897846e-03, 4.20288681e-03,
                  6.82183484e-03, 7.95460466e-03, 4.40106937e-03, 6.28859511e-03, 6.03780910e-03,
                  6.15318824e-03, 7.67880505e-03, 5.11934618e-03, 4.36175865e-03, 5.20854581e-03,
                  5.51193546e-03, 7.05764764e-03, 5.06826070e-03, 4.83499329e-03, 3.03361287e-03,
                  4.46714878e-03, 6.55838283e-03, 6.25142506e-03, 8.62766096e-03, 1.38092709e-02,
                  6.80914244e-03, 4.51575596e-03, 3.78174398e-03, 4.44221862e-03, 5.33459992e-03,
                  1.00994872e+00, 6.24105502e-03, 6.86350125e-03, 1.16981417e-02, 4.15663021e-04
              ],
              [
                  1.21743074e-03, 9.34742566e-04, 1.58361158e-03, 1.54843739e-03, 1.60326517e-03,
                  1.48855462e-03, 1.75969712e-03, 1.47441187e-03, 2.08197246e-03, 1.87312196e-03,
                  1.59684025e-03, 1.67988219e-03, 2.04028357e-03, 1.83966383e-03, 2.16581973e-03,
                  1.46627884e-03, 1.43378052e-03, 1.65218452e-03, 1.64085990e-03, 1.35395802e-03,
                  1.88057622e-03, 1.50564142e-03, 1.88428922e-03, 1.31310538e-03, 3.36419346e-03,
                  2.23112624e-03, 1.98615832e-03, 2.26181748e-03, 7.46788744e-04, 3.24220858e-03,
                  5.22520350e-03, 1.01687110e+00, 2.17215085e-03, 2.65060564e-03, 1.48492086e-04
              ],
              [
                  1.91052355e-03, 8.89385435e-04, 1.63635352e-03, 1.48391258e-03, 2.32075697e-03,
                  1.75681394e-03, 1.44083142e-03, 1.00449903e-03, 1.39554056e-03, 1.34395662e-03,
                  1.84950593e-03, 1.63444235e-03, 2.24048280e-03, 1.47397018e-03, 1.78133332e-03,
                  1.38277643e-03, 1.02380698e-03, 1.31545211e-03, 1.15058399e-03, 8.31160685e-04,
                  8.02097169e-04, 1.62756417e-03, 1.22300586e-03, 1.01600444e-03, 1.21062445e-03,
                  1.16089525e-03, 9.85578236e-04, 1.07903480e-03, 3.58364795e-04, 1.17034440e-03,
                  6.62092261e-03, 2.13085659e-03, 1.03506984e+00, 2.18969307e-03, 1.35631287e-04
              ],
              [
                  1.00686668e-02, 1.17083099e-02, 1.82070873e-02, 1.90789700e-02, 2.10315496e-02,
                  1.79461276e-02, 2.89295045e-02, 1.43021953e-02, 2.08949911e-02, 1.94175718e-02,
                  1.88293586e-02, 1.89835791e-02, 1.78045294e-02, 1.60649932e-02, 1.98177794e-02,
                  1.69705296e-02, 1.50259447e-02, 1.92787977e-02, 1.66344933e-02, 1.53583907e-02,
                  1.67149153e-02, 2.59255856e-02, 2.56407103e-02, 1.71407847e-02, 2.15587971e-02,
                  2.99532200e-02, 2.57547874e-02, 2.29169789e-02, 1.26107092e-02, 3.97369938e-02,
                  2.83759363e-02, 1.87698052e-02, 2.42013302e-02, 1.09347280e+00, 2.85986433e-03
              ],
              [
                  4.04895638e-05, 4.71993336e-05, 7.20084273e-05, 2.08043750e-04, 1.03358389e-04,
                  8.35898297e-05, 7.91585223e-05, 6.00524519e-05, 6.30610739e-05, 7.08493614e-05,
                  6.74483163e-05, 6.16791325e-05, 8.58808464e-05, 5.89878193e-05, 1.38261001e-04,
                  6.57925250e-05, 4.07162921e-05, 9.45149603e-05, 6.49793764e-05, 3.61462622e-05,
                  6.47226923e-05, 9.21098548e-05, 1.78163731e-04, 4.64990597e-05, 6.14599494e-05,
                  6.33246009e-05, 5.96884892e-05, 1.03204885e-04, 1.86698998e-04, 9.96143461e-05,
                  9.97043849e-05, 6.46479979e-05, 8.74744069e-05, 1.40406788e-04, 1.00009630e+00
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('run')
def leontief_matrix_1995():
    """
    Real Name: b'leontief matrix 1995'
    Original Eqn: b'1.1804753453376693,0.008357730409690003,0.3733514369455159,0.07578402028820014,0.09281310904933833,0.21065213061834154,0.030207284532022347,0.01061006877266487,0.02177551010317767,0.03039037727287874,0.01050983944909604,0.007875831122202226,0.008438347297520346,0.008667364770151788,0.009397755485241653,0.041212361448137017,0.005478318957983979,0.017970627533163756,0.006522100746726455,0.009485895827926657,0.008759959672024017,0.10964821049610941,0.0065988681713677775,0.010802370263531409,0.009673703451804901,0.009792473042139935,0.0044497088088185765,0.004722622535064062,0.0033776361414495416,0.00745688146814386,0.010051686157452666,0.00857633240461153,0.01357584121449829,0.010898552203360293,0.01984247874061629;0.023203383338071704,1.111015767328654,0.024872064100945123,0.02691393121440409,0.02301830216090706,0.02824497858374275,0.026942947740694764,0.5060607493783613,0.0809541835859264,0.0405753955605104,0.12797803936652316,0.09604597110763657,0.03581169650093131,0.02911272252960368,0.0317185000363222,0.03632515494652947,0.13940372947513938,0.05694317422735314,0.016197322668954715,0.013376467204588882,0.011442760865576907,0.018828643476072514,0.04454609680120687,0.0432047749312878,0.0453996268957341,0.024672833066637104,0.010033474446158364,0.007109965038545168,0.009213708219526063,0.010977194987788201,0.01645531429568735,0.011778546031942205,0.0157490392378179,0.01922134293505156,0.07390748249840996;0.07592799085664552,0.005179250412499852,1.1872172280827464,0.015969052998689316,0.13222236890482086,0.02030369228261901,0.01226402008560306,0.006750136504308811,0.021736093318464975,0.014138436543171573,0.00863369744690578,0.007734988073116673,0.00833575901763606,0.008919812027924993,0.008195889428185724,0.01136320584402348,0.005305368933392695,0.007970996288317937,0.007264045238002318,0.0111672968819154,0.009477034030585193,0.20350380376520483,0.007119892538988157,0.013739476323350434,0.014982367336263545,0.01103355212461604,0.005335286612060872,0.006058006985804973,0.002362380827069802,0.009136217062083127,0.014770104704297439,0.01376150763719717,0.0232589480404629,0.012205427897197127,0.003143761119601195;0.006658903987582995,0.004919879213705298,0.007572486357541303,1.3995800046019737,0.09517123737160457,0.014217633257815894,0.017193631317828324,0.004691534849098505,0.011491048156890261,0.034346541880488475,0.011562857420289162,0.007377267468450529,0.009077026316787808,0.00922311364073178,0.017926328142368025,0.042889104601831575,0.003612341351745683,0.008837766116746809,0.006919655315954725,0.0069742657924313205,0.0073973160895452654,0.008334570975903687,0.005605618182135718,0.008234823770495085,0.005635819367067398,0.0057657476496509605,0.006506121230494839,0.0030517115109699976,0.0016272195474520154,0.004556338219832592,0.007653348851381827,0.0026505133681149,0.008021172701193282,0.01030729986950256,0.0014468189886389456;0.0006718352880921771,0.0007473488684348146,0.0009010358297614387,0.011496570934544826,1.2305357358715991,0.002015646079610045,0.002832031864584736,0.0006902382301785117,0.0010144426764625068,0.0021211328315601957,0.0013750696677016234,0.0012220801758177865,0.0012996612304751185,0.0012953469257017687,0.0028858348768289466,0.005792072881399424,0.000601634081771021,0.000913729108115144,0.0011353553952861588,0.0010278367853814353,0.001006830386081337,0.0007711926182362314,0.0006896180684354843,0.0008249532713278489,0.0007197013157310171,0.0006420709052255991,0.0011453529636989948,0.00036505393350562507,0.00018142670642361353,0.0005575179732648232,0.0015269954030185649,0.00038731955371332216,0.0005811452104406051,0.0013491829968971913,0.00012194517269756987;0.004382642583345066,0.005112624253602205,0.006112209092152262,0.006394891698291166,0.007677646564034973,1.2352821292641791,0.021437250733682276,0.004335298494164862,0.006171621271488393,0.007951776763988151,0.01291151687482428,0.008517183290626949,0.008646671650754098,0.007396178033994623,0.01044928882455424,0.09740053880963348,0.004523089289414677,0.04882824099718258,0.004428335119314746,0.0048471821276285364,0.004339487648874566,0.006506068915388673,0.004816520265995305,0.004840146224605994,0.00420416568322495,0.010005562252057546,0.0033711262619265624,0.0030131331754057167,0.005703840088872344,0.0037476921237565527,0.005104000862502816,0.0035764138156492834,0.004010272013266026,0.007350332897517867,0.0014100446607071473;0.016512716869213045,0.015718989003878556,0.0530117402423285,0.03732238232980129,0.04382567550821712,0.03663346814325417,1.334120265883042,0.017133245062228127,0.05082817127930898,0.05037376498642882,0.0480499098325642,0.026821966045797428,0.034713773925860045,0.04585270007628744,0.03187796722648125,0.05106375149760232,0.015729897030856598,0.026376191866115353,0.02457406084882415,0.03306349013884857,0.030385730922823047,0.03381226110868849,0.02100012271884837,0.02450880990169147,0.02884850973294298,0.03784469725917123,0.02696075420338949,0.034687718365763405,0.009736730305945455,0.042891512358198436,0.03298813390969726,0.02671762024327961,0.026310492865518013,0.04733387577008096,0.002999353094780336;0.02322564602413284,0.023736035469013084,0.019149353435066557,0.02028484371291563,0.018113206329938264,0.02015489538943852,0.016722885508084977,1.065790112471861,0.04538395811986736,0.02788799577360922,0.03138423265546674,0.02467849687935986,0.01646090558901838,0.015461268885396728,0.015464640918647491,0.01818925457050407,0.03279190982600394,0.025494424457451387,0.012104840982791142,0.01322391020765488,0.010816236772689215,0.01422380264709621,0.06293020711909357,0.06842052558799583,0.07510864883431234,0.02632551707240397,0.009153072956492802,0.005726982924062792,0.0043536111152601056,0.010274775607158485,0.01382646761614676,0.0071384326119920925,0.01111989257654879,0.013953024670280284,0.002369036687731944;0.07352298599057859,0.03146723980970177,0.05284622506388745,0.1459560695923154,0.09539814150948699,0.06843193137993546,0.07709503128408117,0.04046709943015574,1.3216484139027571,0.31663698216853425,0.06130538221587677,0.045770935091032444,0.0481955273995618,0.05926863051987269,0.05879682971664314,0.08162300855421487,0.02007755977910377,0.03931062495556252,0.029476412468842784,0.014582254523660302,0.012578854948872203,0.025858517165844686,0.018739450132364957,0.01857874924225301,0.01754600607264059,0.017722628308906384,0.01111848253422104,0.007917778462923802,0.006879137024358241,0.015558006780726894,0.021708737408788602,0.010715808432750659,0.0932437344996943,0.02440467285930924,0.004285304500736231;0.012458641594216256,0.016158576293186695,0.028035544754130712,0.022952629905269455,0.055954344108044216,0.02281717568100564,0.028074426621493332,0.013397842731392672,0.0342836103423242,1.1306483556587064,0.022020709431876007,0.021211549150700924,0.045843313218770575,0.04774581339493492,0.06822951618221655,0.0584810651014842,0.009874187868614492,0.03132597092866687,0.03435628787273313,0.010739635269687721,0.010544707317546954,0.014108578102985365,0.020020488652071004,0.012261780884633776,0.012361970670669221,0.014441900039723102,0.009419571587521632,0.004480598890121248,0.004042332061146515,0.007901728916319567,0.009911367030725404,0.004384316508951622,0.012777087688480022,0.01050657585723841,0.0019033265100133958;0.005899875857059176,0.010196732829833355,0.011927177921608013,0.0074816494243326905,0.0075339281525664565,0.017005165311712374,0.006335979034014842,0.009153877995025084,0.013927757755977743,0.014006801070282307,1.1244373592859052,0.01948918761111443,0.01511470878697565,0.02329178925659246,0.018424468009943552,0.015382403092004955,0.008322255388139344,0.09786899287582154,0.008335572712851808,0.004710120019293446,0.0038822580131837774,0.008744856543226008,0.006110504783074847,0.005369354780029699,0.004963630752832624,0.006389054331922832,0.004728090029994569,0.002675445676577032,0.007612715997662988,0.003934939897859347,0.0062221885120942585,0.004474498154894679,0.006068384458360568,0.006522938239951784,0.001305228110304361;0.024748005990483716,0.06010334876807569,0.0473096958865914,0.034777232858998225,0.04559793563853739,0.07242693557357038,0.03934381646344735,0.04734071409494805,0.05810494635426061,0.07011453369935679,0.0792725065587172,1.4985967916852827,0.30659063862705227,0.18018963143852623,0.2499828428876767,0.1998452264857202,0.03578549484486254,0.16080048164620123,0.07220867645437377,0.021849037088499678,0.018536789136434566,0.026810412056608564,0.03545558614878785,0.04512505463268747,0.04046946557681445,0.030396757498684215,0.021290374065527983,0.010419838881804915,0.015333228023069138,0.018290655142819856,0.027938363929786957,0.012700181830552671,0.02017123122785993,0.024258421090092838,0.00668350123509998;0.014418671370474553,0.030106445574755437,0.01479765889931244,0.017836287116768677,0.016407007670093322,0.02145108906942843,0.0178228611671973,0.022823407221757686,0.020131378848012353,0.023959546816458947,0.025575652189180235,0.03532175165975833,1.1474620950270673,0.03409570904313095,0.05915802744917213,0.02352922346026804,0.017269353290344343,0.030336434478578093,0.03519155126465625,0.008966862731889853,0.007791313058292469,0.00941973195154188,0.014891160625170175,0.015078506002532637,0.013502567612395648,0.011607216245033592,0.007780647503897235,0.004622757566891828,0.0045656306118158005,0.007840597327622122,0.012646321245570677,0.005618925608891497,0.007469595620436246,0.00944980106688659,0.002762570088834877;0.01073633297825977,0.021321432396361382,0.01697281588543432,0.02087299121722056,0.020084678508232885,0.022678009305804898,0.02748658786167728,0.01988617552427231,0.028120056763601735,0.03353948237162233,0.026264222262714288,0.04210840757878581,0.12114353622170558,1.3509173672644867,0.10981035524243904,0.043648650563564505,0.027973712530749286,0.05060958351912789,0.05110294368094417,0.02012285987989201,0.017734934663201952,0.015423873748438368,0.02054450154067515,0.0201946344683832,0.021126510429724635,0.019774279848744962,0.04428286850945806,0.011566173733255265,0.00724477585061524,0.024484869027856803,0.025274639786799454,0.012173222810357175,0.031378823507538664,0.01963340529419651,0.00310494244590706;0.011576785949829029,0.015479647787399388,0.012861663666155258,0.013359559812772205,0.014090746177028993,0.014881158290686454,0.011249947610775793,0.014292032155965624,0.012680989462423485,0.014494142392733863,0.015522059349316306,0.019132796769654545,0.031471160635811714,0.01792135312181743,1.4170174883527955,0.01681664789882756,0.010185770597098617,0.015476153793735046,0.13242965272713791,0.013733594333648687,0.010836741041912387,0.008884618704058368,0.04758070290246236,0.06465650585084536,0.07591496027403896,0.023253902199644624,0.009321908493229517,0.005280317045565878,0.0031627912784869656,0.009631986280507099,0.03074910683829555,0.004643246076284603,0.006792923768006492,0.010941758696942366,0.0016899277357679805;0.002531747087448688,0.003212436575188271,0.0037188403595379777,0.010417980408902685,0.007603988858932675,0.010229175041090765,0.006446410606752642,0.0031691254335734415,0.0049553595624858325,0.006043108457494224,0.0063221192149667685,0.012676640664821708,0.0088961122916103,0.007561011796498693,0.011413149260261119,1.0398896964674407,0.002813094304656217,0.00909088082450703,0.005045725368761731,0.003386875992226429,0.0032602413350725002,0.00527376843805615,0.0033385406613180763,0.003737254056407764,0.0037541657266397673,0.003279051430453504,0.002433543970244137,0.00269938356040653,0.0020684214433840716,0.004328370619463419,0.005810871404485695,0.004474556271903172,0.00472673264719335,0.008368203999739119,0.004615196398115746;0.021669615917618425,0.03765910700353722,0.031412021235535555,0.04124435420966356,0.029564272836715658,0.037198454995079115,0.043020400103067916,0.04041121354579822,0.05546067785162506,0.04942811596712127,0.061879487502711966,0.056836558364281226,0.03531060675549605,0.032642159617255834,0.03533148665533202,0.03405562212971482,1.1133295438268422,0.026326977049415806,0.02347278529117741,0.015960919345552254,0.022505424377183125,0.03907552925580975,0.028883546603838208,0.01980994391135657,0.018623052534600115,0.026240283473367116,0.016557457255816074,0.012016945684401318,0.01353586929403669,0.015414549173212787,0.024769025076331087,0.02540657645925761,0.0247597100859797,0.028569667370798222,0.003614880311144998;0.009258202409707017,0.014983496277227178,0.011369488260395017,0.011434945425670298,0.011134101891118487,0.013817750388014319,0.013153596347617027,0.01462360393847408,0.01452641429181511,0.01360426518255487,0.017468290215792295,0.015559642480873418,0.012830842252429251,0.01285557598230906,0.012233988838836583,0.012770534360328843,0.03626462625801475,1.0463117324564601,0.011748593162825045,0.011160505603453073,0.011661443886338333,0.014285343500124264,0.017148640266174468,0.014586144935376954,0.011925643739459436,0.023278349868754017,0.018598318403656458,0.012119915956751172,0.04938820781843945,0.012191788575946267,0.027462186927513583,0.01805142984649903,0.013553977536162243,0.02159875117561902,0.004678111943433146;0.009910771981537411,0.009016855454862915,0.014422975968792502,0.013195722067143622,0.01641854244832669,0.013916899528045878,0.011331123868949848,0.011176018854628034,0.013860560669873127,0.014206599171194743,0.014607567383777597,0.014303618556830868,0.01290397051985806,0.012781810160444182,0.013863133019738379,0.013859489461225795,0.014889561053259585,0.014872508681572735,1.0128940868552088,0.00934051783827612,0.008319263094243736,0.01121866204659583,0.02360406304400439,0.01005656866598118,0.00875132379532154,0.012640387497943327,0.008064973448131712,0.0055517245123655095,0.0038684883801667646,0.009593959581205534,0.007586613240010772,0.005369030311481506,0.007303410155064725,0.010754719923050268,0.0010252966079443413;0.05878521799561401,0.04699007091037119,0.10497654714798217,0.10474022192245391,0.12907185266176263,0.10058782457259324,0.08977821883765943,0.08063171217489702,0.0916765519443247,0.09688257956358676,0.07970439322860212,0.08975727444992132,0.09469415793896444,0.1029069339781579,0.10063376889025791,0.09529716901161905,0.04415201289946897,0.08132200449883262,0.06520011271287239,1.049809004901422,0.028019570268525994,0.07772858514673346,0.04706456929420681,0.04754449140504765,0.046482714058125686,0.045064241179858,0.023881928788783344,0.017777602310205795,0.012389636821479914,0.028144480027971718,0.037535869451645165,0.020266743661546932,0.04770783671423616,0.03463687426035177,0.005645167337845957;0.030141001697601606,0.020418034526001355,0.05231808906788059,0.05101151366185223,0.06982149320182443,0.04221084014799059,0.036636365200705005,0.03154115161830547,0.04266067399687524,0.044492702428870365,0.035908759780848655,0.036335363042629285,0.03736845008978398,0.03808205239092526,0.04378078933327802,0.046920225585519025,0.019278554563664816,0.04480212091962117,0.03011212916056961,0.01795425471353204,1.016103843242369,0.04302946373501243,0.026826226730440127,0.02353812138536339,0.022190101707821628,0.021057541725270242,0.017492436508484668,0.010889092177933359,0.008101808415876516,0.01793057692409855,0.016890551335475543,0.011177574817650103,0.021695307566834802,0.02261943529901314,0.0031020055466397553;0.006032073893870404,0.008910435111175095,0.011763899772499267,0.013110434582124101,0.013373751924680731,0.013080951865481303,0.01453568772776451,0.010030573928051366,0.014542286045736676,0.015062011495110961,0.013984785676244364,0.014387367079464272,0.015672362792552914,0.016932166600645407,0.013477013184775717,0.013442824797347628,0.010641002956847308,0.013476112360040638,0.013040678594670726,0.015421879957233535,0.010969880751193917,1.0160939903891995,0.014160027578633022,0.017111427903461165,0.03348026363164451,0.027887002165728345,0.00968508790652985,0.01608568294021797,0.005259463138837863,0.019092390927193805,0.013811019735344588,0.009012102553764051,0.013471740897791374,0.016995922383478506,0.0010687724522529566;0.029802367484267067,0.04353090501751749,0.04649688205002038,0.04291208058554382,0.0490574044959003,0.0502898681252059,0.04026329461117069,0.07471136097783078,0.04528356866288951,0.04239014019960998,0.059964329107352644,0.044610818307200734,0.0352846429149584,0.03238951508182195,0.03812656621619869,0.04269068954487893,0.04405321359387956,0.040879889562188194,0.027155369527247574,0.032269166377684025,0.020105362777782097,0.02828382699047111,1.0579486816190864,0.04019032492805076,0.03168653365275507,0.04801346977554096,0.02004699833584429,0.014783721255030368,0.007237072582375553,0.016476363988197774,0.022196000732142788,0.016270177312497205,0.01910281161182635,0.02264446663250648,0.004720395458079356;0.005321891042239725,0.007136626452362057,0.007488519663729771,0.0066305412963304335,0.007999096610736481,0.011492547448899113,0.004557297735605105,0.011129844111769756,0.007081615426638814,0.00603458009023056,0.009694474401513213,0.00896043715372215,0.005528779795878301,0.0048688974860059756,0.0059753229047893415,0.006027357617864317,0.005152293178698767,0.0063577038549747274,0.003259216139666173,0.004850758548703875,0.0028058704153769366,0.00427854812536498,0.006141693697502862,1.112344503311712,0.006183806928825093,0.008035420117274634,0.002943978939421114,0.0018059943601690636,0.0009360319276118515,0.0023286333328832124,0.0028592021888928414,0.0021686616046732005,0.002270278723454846,0.0027444433746026354,0.000719744708654901;0.0026940099448476344,0.004376469582942394,0.004665939173774866,0.005219806837366971,0.006927163518669512,0.004547872828824984,0.005651221564502921,0.0045898221103522025,0.005561507381698221,0.005470968489343797,0.004609098133525026,0.004902574266938877,0.005144200751473487,0.005899634724648619,0.005699321123205655,0.004956408672047203,0.0030152754532274013,0.004082514865442907,0.004426050192162297,0.006931363804461539,0.0035134663695079492,0.0037648878066697854,0.0048940855117939166,0.010482157192330217,1.0359130749472394,0.021394794676339975,0.007396296205106797,0.005402767456599739,0.0014609890254814052,0.0065908625073170905,0.006349236806333159,0.0033090326904938127,0.003261603266190878,0.0063758487181999265,0.0004539018474245494;0.01187337297898385,0.01787277893769477,0.02002474292856109,0.017053468157745916,0.020292966542135346,0.02068430664267726,0.019817114942118488,0.023182154585232543,0.01922039788649678,0.018745449648971634,0.02393383320143821,0.01992764393039469,0.01772579258704611,0.01715595951794863,0.01858515119314508,0.01778262288397072,0.014218298575432813,0.015530873899057203,0.016215740684844805,0.03056503604829524,0.016038965164307643,0.018002470630095673,0.049149031083707516,0.17917380195749116,0.1213405566360903,1.129265456487665,0.009417187998690386,0.009303831199884769,0.0034421304474357498,0.011123596053576965,0.009780211442007556,0.006440530282939768,0.009461306381372445,0.013098308233757685,0.0017702534276839588;0.009084248943322893,0.013264241093564196,0.015301645047675935,0.016345499338352706,0.017529231366237054,0.015502153304096376,0.02376602729211789,0.014256057066530969,0.019178718325135836,0.018156276872404755,0.015954240296606078,0.016984031557457147,0.018738101413399124,0.019874005410123213,0.017084393454509066,0.01865177986501226,0.012988596055010545,0.017977907985363833,0.01977993839524897,0.027609207725258256,0.025431840402539527,0.021041131997764896,0.0232241655359642,0.03524980323664721,0.04424724457063687,0.03196229830329607,1.082765083089864,0.032123655228556605,0.008031970382021953,0.029029390738738847,0.024090020428172376,0.011636224802303478,0.017843396692233723,0.029192525484074132,0.0016228730413348556;0.04778912102600976,0.0640274131497563,0.05968166978694141,0.06935290636058637,0.06814342790717258,0.06497079026483431,0.06321580256645638,0.06310832133927677,0.06672972193755648,0.06427596393248365,0.06383819364240699,0.06756419422717735,0.06422240894137808,0.06306996195347919,0.061921076943638874,0.06644132703689652,0.054199865779544436,0.059310662498605275,0.05759824605823051,0.0765063829112054,0.06139690878038475,0.05891057489957183,0.07457647727479706,0.08828545255290947,0.07907868224853873,0.06285624838830664,0.04784470153988743,1.2127366561059383,0.06731379022709628,0.06388555309596329,0.04817497908658921,0.028156123142313184,0.047634425994951164,0.06354381846995895,0.011098730751186892;0.01838352903173351,0.01683391348954375,0.023060894613135464,0.024585439429050258,0.027932812648967034,0.023225186846315884,0.02688571879825361,0.01880292963020463,0.023250506723323287,0.024883298182096898,0.022006677203197732,0.02327208361944482,0.024491049476725996,0.024775378937300523,0.02341999527853583,0.027340543869531133,0.018172877033697417,0.029400368483382358,0.03867898528710729,0.04636466303975636,0.0555233997637238,0.04865510352394004,0.02518849556130686,0.0499710337624065,0.03578470195016713,0.038374232758729095,0.023509513420884642,0.04068271423141808,1.0369044211492453,0.036642173429282485,0.021897236375044565,0.024913419648831567,0.04220473753873185,0.04192484041095471,0.0027779876645405667;0.0475183070683905,0.06902127064737551,0.09301109965755237,0.09258011944913257,0.09416528390716328,0.07754855227842228,0.12382889768933426,0.0735173774660515,0.13189951393255672,0.10676241218850756,0.08852588851942346,0.09016148051633777,0.10815635321051327,0.13344634112761636,0.114168168680595,0.10004743769680728,0.07811118544265123,0.1094787046726276,0.09050496929199517,0.10279577734513555,0.09875802299082583,0.08172767297554587,0.08274309996458129,0.12050425257597962,0.15641206858331488,0.11511909604528348,0.10016989268564801,0.1293745522587646,0.05502036247848647,1.1689458588846475,0.09126382408681026,0.0477923722071541,0.08873116522955284,0.10839439901371556,0.007640940591185136;0.005305908284334451,0.006741686032383529,0.0069811440260371775,0.006369070582491016,0.0060028172814803535,0.010681582742738437,0.009092501239545352,0.006755861614723556,0.00915910377046889,0.007910863055614052,0.007470376511730528,0.008150267845825575,0.006853428478270715,0.006845272942867668,0.0071070614835404625,0.008205759531657145,0.011134471532311048,0.006291646824337801,0.006391193884349832,0.005867214233586391,0.007216273828768771,0.007753197226595179,0.00695067719165735,0.015307857973603919,0.015969179428417635,0.008500093727370962,0.005232335822664169,0.004890217603079435,0.005927551982367153,0.007686171154471309,1.0115373349573136,0.00560065678544754,0.00855343430136751,0.014262209784934216,0.0006758486543051194;0.001505968072068556,0.0011024897344081893,0.0014320198745254187,0.0013389104921037107,0.0014388732232655205,0.0012368340729193615,0.0016011555157408887,0.0012978821068747443,0.0018072587165552372,0.0014876911098493219,0.0013737250980176007,0.0014445890385372112,0.0017959934350657318,0.002144223352876247,0.0015472209564382378,0.0012875149170504478,0.0014142845294395846,0.0013346608006084698,0.0011044257405397632,0.0016323570852656733,0.0025174391586684124,0.0012000716731460535,0.001614696978824427,0.0013116638843159274,0.002607355343229104,0.0017251263385704195,0.0026849868316364575,0.0017891654354652141,0.0004884216992992237,0.00265555015558642,0.0050092381924501566,1.0058195659116336,0.0015616635570553801,0.0020050003044973994,0.00012752520351753358;0.0025697288371274445,0.000849572533042528,0.001591191513247879,0.0012151189659545124,0.0012524832247562485,0.0013345237323991437,0.0010723342713435285,0.0008490783574287839,0.0011346389223533422,0.001100882674366798,0.0010391961778776309,0.0010276714131410886,0.0011591251142992404,0.001170026669123017,0.0010046650622674137,0.0011642210566567143,0.0008058489581635466,0.0010915613416280108,0.0009267335445785513,0.0010543538075507865,0.000806307070103534,0.0016756176856910464,0.001131767426801569,0.0015656949629048776,0.0011589286444688301,0.0011094158196142507,0.0008580152572932424,0.0009418990487778006,0.00031380380586255814,0.0010611428820489096,0.006710214057784733,0.001660942181781351,1.021232997257805,0.0019673760840697766,0.00011797111206124539;0.010502045939828604,0.01528788830885758,0.019903021431035426,0.019188924815091293,0.021670242049623038,0.019021996311698357,0.029382019253861653,0.0163419983536873,0.024437088118452285,0.022443430246074036,0.018597600666324075,0.022095183649204375,0.021285963952638487,0.02306476613323749,0.02035776271181491,0.021383505223438046,0.014494455118313238,0.018831995391080655,0.0198105919627665,0.019572715612926637,0.0200823613879085,0.02480165215525713,0.020378554435096927,0.022321847922744827,0.02408536406415695,0.02362581512816255,0.02768441570858199,0.02163822741393777,0.012658522449983637,0.04174958461284124,0.02634537127552147,0.018927005990413973,0.025522528423764186,1.0861272247471152,0.0022305197892220343;5.223193004206624e-05,6.107581029338875e-05,9.996569820187253e-05,0.00011534833991099774,0.00010721068325200009,0.00010456333723020923,0.00011369603457269244,7.672876654053015e-05,0.00010115919830328454,0.00010824649037402071,8.773815850499437e-05,0.0001090084058731555,0.00010384421942028884,9.323943697051085e-05,0.00013296527261753816,0.00011342918236994525,6.405461650392862e-05,0.00015751210256531673,0.00021446110273296986,0.00011029642514683191,0.00012322741777641498,0.00013798648437758182,0.00023056393834050884,0.00010113775217825209,0.00011074006464052393,9.616420761902169e-05,0.0001375194654081877,0.00012209404511504356,0.0003232641274493684,0.00012980042160235365,0.00014586965063325297,8.524530766836058e-05,0.0001772314527037665,0.00018871057916141376,1.0000354522854413;'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[[
            1.18047535e+00, 8.35773041e-03, 3.73351437e-01, 7.57840203e-02, 9.28131090e-02,
            2.10652131e-01, 3.02072845e-02, 1.06100688e-02, 2.17755101e-02, 3.03903773e-02,
            1.05098394e-02, 7.87583112e-03, 8.43834730e-03, 8.66736477e-03, 9.39775549e-03,
            4.12123614e-02, 5.47831896e-03, 1.79706275e-02, 6.52210075e-03, 9.48589583e-03,
            8.75995967e-03, 1.09648210e-01, 6.59886817e-03, 1.08023703e-02, 9.67370345e-03,
            9.79247304e-03, 4.44970881e-03, 4.72262254e-03, 3.37763614e-03, 7.45688147e-03,
            1.00516862e-02, 8.57633240e-03, 1.35758412e-02, 1.08985522e-02, 1.98424787e-02
        ],
              [
                  2.32033833e-02, 1.11101577e+00, 2.48720641e-02, 2.69139312e-02, 2.30183022e-02,
                  2.82449786e-02, 2.69429477e-02, 5.06060749e-01, 8.09541836e-02, 4.05753956e-02,
                  1.27978039e-01, 9.60459711e-02, 3.58116965e-02, 2.91127225e-02, 3.17185000e-02,
                  3.63251549e-02, 1.39403729e-01, 5.69431742e-02, 1.61973227e-02, 1.33764672e-02,
                  1.14427609e-02, 1.88286435e-02, 4.45460968e-02, 4.32047749e-02, 4.53996269e-02,
                  2.46728331e-02, 1.00334744e-02, 7.10996504e-03, 9.21370822e-03, 1.09771950e-02,
                  1.64553143e-02, 1.17785460e-02, 1.57490392e-02, 1.92213429e-02, 7.39074825e-02
              ],
              [
                  7.59279909e-02, 5.17925041e-03, 1.18721723e+00, 1.59690530e-02, 1.32222369e-01,
                  2.03036923e-02, 1.22640201e-02, 6.75013650e-03, 2.17360933e-02, 1.41384365e-02,
                  8.63369745e-03, 7.73498807e-03, 8.33575902e-03, 8.91981203e-03, 8.19588943e-03,
                  1.13632058e-02, 5.30536893e-03, 7.97099629e-03, 7.26404524e-03, 1.11672969e-02,
                  9.47703403e-03, 2.03503804e-01, 7.11989254e-03, 1.37394763e-02, 1.49823673e-02,
                  1.10335521e-02, 5.33528661e-03, 6.05800699e-03, 2.36238083e-03, 9.13621706e-03,
                  1.47701047e-02, 1.37615076e-02, 2.32589480e-02, 1.22054279e-02, 3.14376112e-03
              ],
              [
                  6.65890399e-03, 4.91987921e-03, 7.57248636e-03, 1.39958000e+00, 9.51712374e-02,
                  1.42176333e-02, 1.71936313e-02, 4.69153485e-03, 1.14910482e-02, 3.43465419e-02,
                  1.15628574e-02, 7.37726747e-03, 9.07702632e-03, 9.22311364e-03, 1.79263281e-02,
                  4.28891046e-02, 3.61234135e-03, 8.83776612e-03, 6.91965532e-03, 6.97426579e-03,
                  7.39731609e-03, 8.33457098e-03, 5.60561818e-03, 8.23482377e-03, 5.63581937e-03,
                  5.76574765e-03, 6.50612123e-03, 3.05171151e-03, 1.62721955e-03, 4.55633822e-03,
                  7.65334885e-03, 2.65051337e-03, 8.02117270e-03, 1.03072999e-02, 1.44681899e-03
              ],
              [
                  6.71835288e-04, 7.47348868e-04, 9.01035830e-04, 1.14965709e-02, 1.23053574e+00,
                  2.01564608e-03, 2.83203186e-03, 6.90238230e-04, 1.01444268e-03, 2.12113283e-03,
                  1.37506967e-03, 1.22208018e-03, 1.29966123e-03, 1.29534693e-03, 2.88583488e-03,
                  5.79207288e-03, 6.01634082e-04, 9.13729108e-04, 1.13535540e-03, 1.02783679e-03,
                  1.00683039e-03, 7.71192618e-04, 6.89618068e-04, 8.24953271e-04, 7.19701316e-04,
                  6.42070905e-04, 1.14535296e-03, 3.65053934e-04, 1.81426706e-04, 5.57517973e-04,
                  1.52699540e-03, 3.87319554e-04, 5.81145210e-04, 1.34918300e-03, 1.21945173e-04
              ],
              [
                  4.38264258e-03, 5.11262425e-03, 6.11220909e-03, 6.39489170e-03, 7.67764656e-03,
                  1.23528213e+00, 2.14372507e-02, 4.33529849e-03, 6.17162127e-03, 7.95177676e-03,
                  1.29115169e-02, 8.51718329e-03, 8.64667165e-03, 7.39617803e-03, 1.04492888e-02,
                  9.74005388e-02, 4.52308929e-03, 4.88282410e-02, 4.42833512e-03, 4.84718213e-03,
                  4.33948765e-03, 6.50606892e-03, 4.81652027e-03, 4.84014622e-03, 4.20416568e-03,
                  1.00055623e-02, 3.37112626e-03, 3.01313318e-03, 5.70384009e-03, 3.74769212e-03,
                  5.10400086e-03, 3.57641382e-03, 4.01027201e-03, 7.35033290e-03, 1.41004466e-03
              ],
              [
                  1.65127169e-02, 1.57189890e-02, 5.30117402e-02, 3.73223823e-02, 4.38256755e-02,
                  3.66334681e-02, 1.33412027e+00, 1.71332451e-02, 5.08281713e-02, 5.03737650e-02,
                  4.80499098e-02, 2.68219660e-02, 3.47137739e-02, 4.58527001e-02, 3.18779672e-02,
                  5.10637515e-02, 1.57298970e-02, 2.63761919e-02, 2.45740608e-02, 3.30634901e-02,
                  3.03857309e-02, 3.38122611e-02, 2.10001227e-02, 2.45088099e-02, 2.88485097e-02,
                  3.78446973e-02, 2.69607542e-02, 3.46877184e-02, 9.73673031e-03, 4.28915124e-02,
                  3.29881339e-02, 2.67176202e-02, 2.63104929e-02, 4.73338758e-02, 2.99935309e-03
              ],
              [
                  2.32256460e-02, 2.37360355e-02, 1.91493534e-02, 2.02848437e-02, 1.81132063e-02,
                  2.01548954e-02, 1.67228855e-02, 1.06579011e+00, 4.53839581e-02, 2.78879958e-02,
                  3.13842327e-02, 2.46784969e-02, 1.64609056e-02, 1.54612689e-02, 1.54646409e-02,
                  1.81892546e-02, 3.27919098e-02, 2.54944245e-02, 1.21048410e-02, 1.32239102e-02,
                  1.08162368e-02, 1.42238026e-02, 6.29302071e-02, 6.84205256e-02, 7.51086488e-02,
                  2.63255171e-02, 9.15307296e-03, 5.72698292e-03, 4.35361112e-03, 1.02747756e-02,
                  1.38264676e-02, 7.13843261e-03, 1.11198926e-02, 1.39530247e-02, 2.36903669e-03
              ],
              [
                  7.35229860e-02, 3.14672398e-02, 5.28462251e-02, 1.45956070e-01, 9.53981415e-02,
                  6.84319314e-02, 7.70950313e-02, 4.04670994e-02, 1.32164841e+00, 3.16636982e-01,
                  6.13053822e-02, 4.57709351e-02, 4.81955274e-02, 5.92686305e-02, 5.87968297e-02,
                  8.16230086e-02, 2.00775598e-02, 3.93106250e-02, 2.94764125e-02, 1.45822545e-02,
                  1.25788549e-02, 2.58585172e-02, 1.87394501e-02, 1.85787492e-02, 1.75460061e-02,
                  1.77226283e-02, 1.11184825e-02, 7.91777846e-03, 6.87913702e-03, 1.55580068e-02,
                  2.17087374e-02, 1.07158084e-02, 9.32437345e-02, 2.44046729e-02, 4.28530450e-03
              ],
              [
                  1.24586416e-02, 1.61585763e-02, 2.80355448e-02, 2.29526299e-02, 5.59543441e-02,
                  2.28171757e-02, 2.80744266e-02, 1.33978427e-02, 3.42836103e-02, 1.13064836e+00,
                  2.20207094e-02, 2.12115492e-02, 4.58433132e-02, 4.77458134e-02, 6.82295162e-02,
                  5.84810651e-02, 9.87418787e-03, 3.13259709e-02, 3.43562879e-02, 1.07396353e-02,
                  1.05447073e-02, 1.41085781e-02, 2.00204887e-02, 1.22617809e-02, 1.23619707e-02,
                  1.44419000e-02, 9.41957159e-03, 4.48059889e-03, 4.04233206e-03, 7.90172892e-03,
                  9.91136703e-03, 4.38431651e-03, 1.27770877e-02, 1.05065759e-02, 1.90332651e-03
              ],
              [
                  5.89987586e-03, 1.01967328e-02, 1.19271779e-02, 7.48164942e-03, 7.53392815e-03,
                  1.70051653e-02, 6.33597903e-03, 9.15387800e-03, 1.39277578e-02, 1.40068011e-02,
                  1.12443736e+00, 1.94891876e-02, 1.51147088e-02, 2.32917893e-02, 1.84244680e-02,
                  1.53824031e-02, 8.32225539e-03, 9.78689929e-02, 8.33557271e-03, 4.71012002e-03,
                  3.88225801e-03, 8.74485654e-03, 6.11050478e-03, 5.36935478e-03, 4.96363075e-03,
                  6.38905433e-03, 4.72809003e-03, 2.67544568e-03, 7.61271600e-03, 3.93493990e-03,
                  6.22218851e-03, 4.47449815e-03, 6.06838446e-03, 6.52293824e-03, 1.30522811e-03
              ],
              [
                  2.47480060e-02, 6.01033488e-02, 4.73096959e-02, 3.47772329e-02, 4.55979356e-02,
                  7.24269356e-02, 3.93438165e-02, 4.73407141e-02, 5.81049464e-02, 7.01145337e-02,
                  7.92725066e-02, 1.49859679e+00, 3.06590639e-01, 1.80189631e-01, 2.49982843e-01,
                  1.99845226e-01, 3.57854948e-02, 1.60800482e-01, 7.22086765e-02, 2.18490371e-02,
                  1.85367891e-02, 2.68104121e-02, 3.54555861e-02, 4.51250546e-02, 4.04694656e-02,
                  3.03967575e-02, 2.12903741e-02, 1.04198389e-02, 1.53332280e-02, 1.82906551e-02,
                  2.79383639e-02, 1.27001818e-02, 2.01712312e-02, 2.42584211e-02, 6.68350124e-03
              ],
              [
                  1.44186714e-02, 3.01064456e-02, 1.47976589e-02, 1.78362871e-02, 1.64070077e-02,
                  2.14510891e-02, 1.78228612e-02, 2.28234072e-02, 2.01313788e-02, 2.39595468e-02,
                  2.55756522e-02, 3.53217517e-02, 1.14746210e+00, 3.40957090e-02, 5.91580274e-02,
                  2.35292235e-02, 1.72693533e-02, 3.03364345e-02, 3.51915513e-02, 8.96686273e-03,
                  7.79131306e-03, 9.41973195e-03, 1.48911606e-02, 1.50785060e-02, 1.35025676e-02,
                  1.16072162e-02, 7.78064750e-03, 4.62275757e-03, 4.56563061e-03, 7.84059733e-03,
                  1.26463212e-02, 5.61892561e-03, 7.46959562e-03, 9.44980107e-03, 2.76257009e-03
              ],
              [
                  1.07363330e-02, 2.13214324e-02, 1.69728159e-02, 2.08729912e-02, 2.00846785e-02,
                  2.26780093e-02, 2.74865879e-02, 1.98861755e-02, 2.81200568e-02, 3.35394824e-02,
                  2.62642223e-02, 4.21084076e-02, 1.21143536e-01, 1.35091737e+00, 1.09810355e-01,
                  4.36486506e-02, 2.79737125e-02, 5.06095835e-02, 5.11029437e-02, 2.01228599e-02,
                  1.77349347e-02, 1.54238737e-02, 2.05445015e-02, 2.01946345e-02, 2.11265104e-02,
                  1.97742798e-02, 4.42828685e-02, 1.15661737e-02, 7.24477585e-03, 2.44848690e-02,
                  2.52746398e-02, 1.21732228e-02, 3.13788235e-02, 1.96334053e-02, 3.10494245e-03
              ],
              [
                  1.15767859e-02, 1.54796478e-02, 1.28616637e-02, 1.33595598e-02, 1.40907462e-02,
                  1.48811583e-02, 1.12499476e-02, 1.42920322e-02, 1.26809895e-02, 1.44941424e-02,
                  1.55220593e-02, 1.91327968e-02, 3.14711606e-02, 1.79213531e-02, 1.41701749e+00,
                  1.68166479e-02, 1.01857706e-02, 1.54761538e-02, 1.32429653e-01, 1.37335943e-02,
                  1.08367410e-02, 8.88461870e-03, 4.75807029e-02, 6.46565059e-02, 7.59149603e-02,
                  2.32539022e-02, 9.32190849e-03, 5.28031705e-03, 3.16279128e-03, 9.63198628e-03,
                  3.07491068e-02, 4.64324608e-03, 6.79292377e-03, 1.09417587e-02, 1.68992774e-03
              ],
              [
                  2.53174709e-03, 3.21243658e-03, 3.71884036e-03, 1.04179804e-02, 7.60398886e-03,
                  1.02291750e-02, 6.44641061e-03, 3.16912543e-03, 4.95535956e-03, 6.04310846e-03,
                  6.32211921e-03, 1.26766407e-02, 8.89611229e-03, 7.56101180e-03, 1.14131493e-02,
                  1.03988970e+00, 2.81309430e-03, 9.09088082e-03, 5.04572537e-03, 3.38687599e-03,
                  3.26024134e-03, 5.27376844e-03, 3.33854066e-03, 3.73725406e-03, 3.75416573e-03,
                  3.27905143e-03, 2.43354397e-03, 2.69938356e-03, 2.06842144e-03, 4.32837062e-03,
                  5.81087140e-03, 4.47455627e-03, 4.72673265e-03, 8.36820400e-03, 4.61519640e-03
              ],
              [
                  2.16696159e-02, 3.76591070e-02, 3.14120212e-02, 4.12443542e-02, 2.95642728e-02,
                  3.71984550e-02, 4.30204001e-02, 4.04112135e-02, 5.54606779e-02, 4.94281160e-02,
                  6.18794875e-02, 5.68365584e-02, 3.53106068e-02, 3.26421596e-02, 3.53314867e-02,
                  3.40556221e-02, 1.11332954e+00, 2.63269770e-02, 2.34727853e-02, 1.59609193e-02,
                  2.25054244e-02, 3.90755293e-02, 2.88835466e-02, 1.98099439e-02, 1.86230525e-02,
                  2.62402835e-02, 1.65574573e-02, 1.20169457e-02, 1.35358693e-02, 1.54145492e-02,
                  2.47690251e-02, 2.54065765e-02, 2.47597101e-02, 2.85696674e-02, 3.61488031e-03
              ],
              [
                  9.25820241e-03, 1.49834963e-02, 1.13694883e-02, 1.14349454e-02, 1.11341019e-02,
                  1.38177504e-02, 1.31535963e-02, 1.46236039e-02, 1.45264143e-02, 1.36042652e-02,
                  1.74682902e-02, 1.55596425e-02, 1.28308423e-02, 1.28555760e-02, 1.22339888e-02,
                  1.27705344e-02, 3.62646263e-02, 1.04631173e+00, 1.17485932e-02, 1.11605056e-02,
                  1.16614439e-02, 1.42853435e-02, 1.71486403e-02, 1.45861449e-02, 1.19256437e-02,
                  2.32783499e-02, 1.85983184e-02, 1.21199160e-02, 4.93882078e-02, 1.21917886e-02,
                  2.74621869e-02, 1.80514298e-02, 1.35539775e-02, 2.15987512e-02, 4.67811194e-03
              ],
              [
                  9.91077198e-03, 9.01685545e-03, 1.44229760e-02, 1.31957221e-02, 1.64185424e-02,
                  1.39168995e-02, 1.13311239e-02, 1.11760189e-02, 1.38605607e-02, 1.42065992e-02,
                  1.46075674e-02, 1.43036186e-02, 1.29039705e-02, 1.27818102e-02, 1.38631330e-02,
                  1.38594895e-02, 1.48895611e-02, 1.48725087e-02, 1.01289409e+00, 9.34051784e-03,
                  8.31926309e-03, 1.12186620e-02, 2.36040630e-02, 1.00565687e-02, 8.75132380e-03,
                  1.26403875e-02, 8.06497345e-03, 5.55172451e-03, 3.86848838e-03, 9.59395958e-03,
                  7.58661324e-03, 5.36903031e-03, 7.30341016e-03, 1.07547199e-02, 1.02529661e-03
              ],
              [
                  5.87852180e-02, 4.69900709e-02, 1.04976547e-01, 1.04740222e-01, 1.29071853e-01,
                  1.00587825e-01, 8.97782188e-02, 8.06317122e-02, 9.16765519e-02, 9.68825796e-02,
                  7.97043932e-02, 8.97572744e-02, 9.46941579e-02, 1.02906934e-01, 1.00633769e-01,
                  9.52971690e-02, 4.41520129e-02, 8.13220045e-02, 6.52001127e-02, 1.04980900e+00,
                  2.80195703e-02, 7.77285851e-02, 4.70645693e-02, 4.75444914e-02, 4.64827141e-02,
                  4.50642412e-02, 2.38819288e-02, 1.77776023e-02, 1.23896368e-02, 2.81444800e-02,
                  3.75358695e-02, 2.02667437e-02, 4.77078367e-02, 3.46368743e-02, 5.64516734e-03
              ],
              [
                  3.01410017e-02, 2.04180345e-02, 5.23180891e-02, 5.10115137e-02, 6.98214932e-02,
                  4.22108401e-02, 3.66363652e-02, 3.15411516e-02, 4.26606740e-02, 4.44927024e-02,
                  3.59087598e-02, 3.63353630e-02, 3.73684501e-02, 3.80820524e-02, 4.37807893e-02,
                  4.69202256e-02, 1.92785546e-02, 4.48021209e-02, 3.01121292e-02, 1.79542547e-02,
                  1.01610384e+00, 4.30294637e-02, 2.68262267e-02, 2.35381214e-02, 2.21901017e-02,
                  2.10575417e-02, 1.74924365e-02, 1.08890922e-02, 8.10180842e-03, 1.79305769e-02,
                  1.68905513e-02, 1.11775748e-02, 2.16953076e-02, 2.26194353e-02, 3.10200555e-03
              ],
              [
                  6.03207389e-03, 8.91043511e-03, 1.17638998e-02, 1.31104346e-02, 1.33737519e-02,
                  1.30809519e-02, 1.45356877e-02, 1.00305739e-02, 1.45422860e-02, 1.50620115e-02,
                  1.39847857e-02, 1.43873671e-02, 1.56723628e-02, 1.69321666e-02, 1.34770132e-02,
                  1.34428248e-02, 1.06410030e-02, 1.34761124e-02, 1.30406786e-02, 1.54218800e-02,
                  1.09698808e-02, 1.01609399e+00, 1.41600276e-02, 1.71114279e-02, 3.34802636e-02,
                  2.78870022e-02, 9.68508791e-03, 1.60856829e-02, 5.25946314e-03, 1.90923909e-02,
                  1.38110197e-02, 9.01210255e-03, 1.34717409e-02, 1.69959224e-02, 1.06877245e-03
              ],
              [
                  2.98023675e-02, 4.35309050e-02, 4.64968821e-02, 4.29120806e-02, 4.90574045e-02,
                  5.02898681e-02, 4.02632946e-02, 7.47113610e-02, 4.52835687e-02, 4.23901402e-02,
                  5.99643291e-02, 4.46108183e-02, 3.52846429e-02, 3.23895151e-02, 3.81265662e-02,
                  4.26906895e-02, 4.40532136e-02, 4.08798896e-02, 2.71553695e-02, 3.22691664e-02,
                  2.01053628e-02, 2.82838270e-02, 1.05794868e+00, 4.01903249e-02, 3.16865337e-02,
                  4.80134698e-02, 2.00469983e-02, 1.47837213e-02, 7.23707258e-03, 1.64763640e-02,
                  2.21960007e-02, 1.62701773e-02, 1.91028116e-02, 2.26444666e-02, 4.72039546e-03
              ],
              [
                  5.32189104e-03, 7.13662645e-03, 7.48851966e-03, 6.63054130e-03, 7.99909661e-03,
                  1.14925474e-02, 4.55729774e-03, 1.11298441e-02, 7.08161543e-03, 6.03458009e-03,
                  9.69447440e-03, 8.96043715e-03, 5.52877980e-03, 4.86889749e-03, 5.97532290e-03,
                  6.02735762e-03, 5.15229318e-03, 6.35770385e-03, 3.25921614e-03, 4.85075855e-03,
                  2.80587042e-03, 4.27854813e-03, 6.14169370e-03, 1.11234450e+00, 6.18380693e-03,
                  8.03542012e-03, 2.94397894e-03, 1.80599436e-03, 9.36031928e-04, 2.32863333e-03,
                  2.85920219e-03, 2.16866160e-03, 2.27027872e-03, 2.74444337e-03, 7.19744709e-04
              ],
              [
                  2.69400994e-03, 4.37646958e-03, 4.66593917e-03, 5.21980684e-03, 6.92716352e-03,
                  4.54787283e-03, 5.65122156e-03, 4.58982211e-03, 5.56150738e-03, 5.47096849e-03,
                  4.60909813e-03, 4.90257427e-03, 5.14420075e-03, 5.89963472e-03, 5.69932112e-03,
                  4.95640867e-03, 3.01527545e-03, 4.08251487e-03, 4.42605019e-03, 6.93136380e-03,
                  3.51346637e-03, 3.76488781e-03, 4.89408551e-03, 1.04821572e-02, 1.03591307e+00,
                  2.13947947e-02, 7.39629621e-03, 5.40276746e-03, 1.46098903e-03, 6.59086251e-03,
                  6.34923681e-03, 3.30903269e-03, 3.26160327e-03, 6.37584872e-03, 4.53901847e-04
              ],
              [
                  1.18733730e-02, 1.78727789e-02, 2.00247429e-02, 1.70534682e-02, 2.02929665e-02,
                  2.06843066e-02, 1.98171149e-02, 2.31821546e-02, 1.92203979e-02, 1.87454496e-02,
                  2.39338332e-02, 1.99276439e-02, 1.77257926e-02, 1.71559595e-02, 1.85851512e-02,
                  1.77826229e-02, 1.42182986e-02, 1.55308739e-02, 1.62157407e-02, 3.05650360e-02,
                  1.60389652e-02, 1.80024706e-02, 4.91490311e-02, 1.79173802e-01, 1.21340557e-01,
                  1.12926546e+00, 9.41718800e-03, 9.30383120e-03, 3.44213045e-03, 1.11235961e-02,
                  9.78021144e-03, 6.44053028e-03, 9.46130638e-03, 1.30983082e-02, 1.77025343e-03
              ],
              [
                  9.08424894e-03, 1.32642411e-02, 1.53016450e-02, 1.63454993e-02, 1.75292314e-02,
                  1.55021533e-02, 2.37660273e-02, 1.42560571e-02, 1.91787183e-02, 1.81562769e-02,
                  1.59542403e-02, 1.69840316e-02, 1.87381014e-02, 1.98740054e-02, 1.70843935e-02,
                  1.86517799e-02, 1.29885961e-02, 1.79779080e-02, 1.97799384e-02, 2.76092077e-02,
                  2.54318404e-02, 2.10411320e-02, 2.32241655e-02, 3.52498032e-02, 4.42472446e-02,
                  3.19622983e-02, 1.08276508e+00, 3.21236552e-02, 8.03197038e-03, 2.90293907e-02,
                  2.40900204e-02, 1.16362248e-02, 1.78433967e-02, 2.91925255e-02, 1.62287304e-03
              ],
              [
                  4.77891210e-02, 6.40274131e-02, 5.96816698e-02, 6.93529064e-02, 6.81434279e-02,
                  6.49707903e-02, 6.32158026e-02, 6.31083213e-02, 6.67297219e-02, 6.42759639e-02,
                  6.38381936e-02, 6.75641942e-02, 6.42224089e-02, 6.30699620e-02, 6.19210769e-02,
                  6.64413270e-02, 5.41998658e-02, 5.93106625e-02, 5.75982461e-02, 7.65063829e-02,
                  6.13969088e-02, 5.89105749e-02, 7.45764773e-02, 8.82854526e-02, 7.90786822e-02,
                  6.28562484e-02, 4.78447015e-02, 1.21273666e+00, 6.73137902e-02, 6.38855531e-02,
                  4.81749791e-02, 2.81561231e-02, 4.76344260e-02, 6.35438185e-02, 1.10987308e-02
              ],
              [
                  1.83835290e-02, 1.68339135e-02, 2.30608946e-02, 2.45854394e-02, 2.79328126e-02,
                  2.32251868e-02, 2.68857188e-02, 1.88029296e-02, 2.32505067e-02, 2.48832982e-02,
                  2.20066772e-02, 2.32720836e-02, 2.44910495e-02, 2.47753789e-02, 2.34199953e-02,
                  2.73405439e-02, 1.81728770e-02, 2.94003685e-02, 3.86789853e-02, 4.63646630e-02,
                  5.55233998e-02, 4.86551035e-02, 2.51884956e-02, 4.99710338e-02, 3.57847020e-02,
                  3.83742328e-02, 2.35095134e-02, 4.06827142e-02, 1.03690442e+00, 3.66421734e-02,
                  2.18972364e-02, 2.49134196e-02, 4.22047375e-02, 4.19248404e-02, 2.77798766e-03
              ],
              [
                  4.75183071e-02, 6.90212706e-02, 9.30110997e-02, 9.25801194e-02, 9.41652839e-02,
                  7.75485523e-02, 1.23828898e-01, 7.35173775e-02, 1.31899514e-01, 1.06762412e-01,
                  8.85258885e-02, 9.01614805e-02, 1.08156353e-01, 1.33446341e-01, 1.14168169e-01,
                  1.00047438e-01, 7.81111854e-02, 1.09478705e-01, 9.05049693e-02, 1.02795777e-01,
                  9.87580230e-02, 8.17276730e-02, 8.27431000e-02, 1.20504253e-01, 1.56412069e-01,
                  1.15119096e-01, 1.00169893e-01, 1.29374552e-01, 5.50203625e-02, 1.16894586e+00,
                  9.12638241e-02, 4.77923722e-02, 8.87311652e-02, 1.08394399e-01, 7.64094059e-03
              ],
              [
                  5.30590828e-03, 6.74168603e-03, 6.98114403e-03, 6.36907058e-03, 6.00281728e-03,
                  1.06815827e-02, 9.09250124e-03, 6.75586161e-03, 9.15910377e-03, 7.91086306e-03,
                  7.47037651e-03, 8.15026785e-03, 6.85342848e-03, 6.84527294e-03, 7.10706148e-03,
                  8.20575953e-03, 1.11344715e-02, 6.29164682e-03, 6.39119388e-03, 5.86721423e-03,
                  7.21627383e-03, 7.75319723e-03, 6.95067719e-03, 1.53078580e-02, 1.59691794e-02,
                  8.50009373e-03, 5.23233582e-03, 4.89021760e-03, 5.92755198e-03, 7.68617115e-03,
                  1.01153733e+00, 5.60065679e-03, 8.55343430e-03, 1.42622098e-02, 6.75848654e-04
              ],
              [
                  1.50596807e-03, 1.10248973e-03, 1.43201987e-03, 1.33891049e-03, 1.43887322e-03,
                  1.23683407e-03, 1.60115552e-03, 1.29788211e-03, 1.80725872e-03, 1.48769111e-03,
                  1.37372510e-03, 1.44458904e-03, 1.79599344e-03, 2.14422335e-03, 1.54722096e-03,
                  1.28751492e-03, 1.41428453e-03, 1.33466080e-03, 1.10442574e-03, 1.63235709e-03,
                  2.51743916e-03, 1.20007167e-03, 1.61469698e-03, 1.31166388e-03, 2.60735534e-03,
                  1.72512634e-03, 2.68498683e-03, 1.78916544e-03, 4.88421699e-04, 2.65555016e-03,
                  5.00923819e-03, 1.00581957e+00, 1.56166356e-03, 2.00500030e-03, 1.27525204e-04
              ],
              [
                  2.56972884e-03, 8.49572533e-04, 1.59119151e-03, 1.21511897e-03, 1.25248322e-03,
                  1.33452373e-03, 1.07233427e-03, 8.49078357e-04, 1.13463892e-03, 1.10088267e-03,
                  1.03919618e-03, 1.02767141e-03, 1.15912511e-03, 1.17002667e-03, 1.00466506e-03,
                  1.16422106e-03, 8.05848958e-04, 1.09156134e-03, 9.26733545e-04, 1.05435381e-03,
                  8.06307070e-04, 1.67561769e-03, 1.13176743e-03, 1.56569496e-03, 1.15892864e-03,
                  1.10941582e-03, 8.58015257e-04, 9.41899049e-04, 3.13803806e-04, 1.06114288e-03,
                  6.71021406e-03, 1.66094218e-03, 1.02123300e+00, 1.96737608e-03, 1.17971112e-04
              ],
              [
                  1.05020459e-02, 1.52878883e-02, 1.99030214e-02, 1.91889248e-02, 2.16702420e-02,
                  1.90219963e-02, 2.93820193e-02, 1.63419984e-02, 2.44370881e-02, 2.24434302e-02,
                  1.85976007e-02, 2.20951836e-02, 2.12859640e-02, 2.30647661e-02, 2.03577627e-02,
                  2.13835052e-02, 1.44944551e-02, 1.88319954e-02, 1.98105920e-02, 1.95727156e-02,
                  2.00823614e-02, 2.48016522e-02, 2.03785544e-02, 2.23218479e-02, 2.40853641e-02,
                  2.36258151e-02, 2.76844157e-02, 2.16382274e-02, 1.26585224e-02, 4.17495846e-02,
                  2.63453713e-02, 1.89270060e-02, 2.55225284e-02, 1.08612722e+00, 2.23051979e-03
              ],
              [
                  5.22319300e-05, 6.10758103e-05, 9.99656982e-05, 1.15348340e-04, 1.07210683e-04,
                  1.04563337e-04, 1.13696035e-04, 7.67287665e-05, 1.01159198e-04, 1.08246490e-04,
                  8.77381585e-05, 1.09008406e-04, 1.03844219e-04, 9.32394370e-05, 1.32965273e-04,
                  1.13429182e-04, 6.40546165e-05, 1.57512103e-04, 2.14461103e-04, 1.10296425e-04,
                  1.23227418e-04, 1.37986484e-04, 2.30563938e-04, 1.01137752e-04, 1.10740065e-04,
                  9.61642076e-05, 1.37519465e-04, 1.22094045e-04, 3.23264127e-04, 1.29800422e-04,
                  1.45869651e-04, 8.52453077e-05, 1.77231453e-04, 1.88710579e-04, 1.00003545e+00
              ]],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ],
            'sectors1': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors', 'sectors1'])


@cache('step')
def replacement_batteries():
    """
    Real Name: b'replacement batteries'
    Original Eqn: b'discarded batteries'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return discarded_batteries()


@cache('step')
def share_of_electric_light_vehicles():
    """
    Real Name: b'share of electric light vehicles'
    Original Eqn: b'total number elec light vehicles/total number light vehicles'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_number_elec_light_vehicles() / total_number_light_vehicles()


@cache('step')
def share_elec_plus_hyb_light_vehicles():
    """
    Real Name: b'share elec plus hyb light vehicles'
    Original Eqn: b'(total number hybrid light vehicles+total number elec light vehicles)/total number light vehicles'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (total_number_hybrid_light_vehicles() +
            total_number_elec_light_vehicles()) / total_number_light_vehicles()


@cache('step')
def aux_p_inland_transp():
    """
    Real Name: b'aux p inland transp'
    Original Eqn: b'if then else(Time<t fin inlandt,if then else(activate policy inlandt=1 :and:Time>t ini inlandt, (p inlandt [vehiclet]-initial percent t vehicles[vehiclet] )/(t fin inlandt-t ini inlandt) , hist var inlandt[vehiclet]),0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < t_fin_inlandt(),
        if_then_else(logical_and(activate_policy_inlandt() == 1, time() > t_ini_inlandt()),
                               (p_inlandt() - initial_percent_t_vehicles()) /
                               (t_fin_inlandt() - t_ini_inlandt()), hist_var_inlandt()), 0)


@cache('run')
def t_fin_inlandt():
    """
    Real Name: b't fin inlandt'
    Original Eqn: b'2050'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2050


@cache('step')
def h_elec_initial_growth():
    """
    Real Name: b'h elec initial growth'
    Original Eqn: b'if then else(Time<t fin h veh,if then else(activate policy h transp=1:and: Time>t ini h veh,(p h vehicle[elec 4wheels]-percent h vehicles initial[elec 4wheels] )/(t fin h veh-t ini h veh), aux hist h[elec 4wheels]),0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < t_fin_h_veh(),
        if_then_else(logical_and(activate_policy_h_transp() == 1, time() > t_ini_h_veh()),
                               (p_h_vehicle().loc['elec 4wheels'].values - percent_h_vehicles_initial().loc['elec 4wheels'].values) /
                               (t_fin_h_veh() - t_ini_h_veh()), aux_hist_h().loc['elec 4wheels'].values), 0)


@cache('run')
def t_fin_h_veh():
    """
    Real Name: b't fin h veh'
    Original Eqn: b'2050'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2050


@cache('step')
def h_gas_initial_growth():
    """
    Real Name: b'h gas initial growth'
    Original Eqn: b'if then else(Time<t fin h veh,if then else(activate policy h transp=1:and:Time>t ini h veh, (p h vehicle[gas 4wheels]-percent h vehicles initial[gas 4wheels] )/(t fin h veh-t ini h veh),aux hist h[gas 4wheels]),0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < t_fin_h_veh(),
        if_then_else(logical_and(activate_policy_h_transp() == 1, time() > t_ini_h_veh()),
                               (p_h_vehicle().loc['gas 4wheels'].values - percent_h_vehicles_initial().loc['gas 4wheels'].values) /
                               (t_fin_h_veh() - t_ini_h_veh()), aux_hist_h().loc['gas 4wheels'].values), 0)


@cache('run')
def t_ini_h_veh():
    """
    Real Name: b't ini h veh'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('step')
def h_hyb_initial_growth():
    """
    Real Name: b'h hyb initial growth'
    Original Eqn: b'if then else(Time<t fin h veh,if then else(activate policy h transp=1:and:Time>t ini h veh,(p h vehicle[hib 4wheels]-percent h vehicles initial[hib 4wheels] )/(t fin h veh-t ini h veh),aux hist h[hib 4wheels]),0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < t_fin_h_veh(),
        if_then_else(logical_and(activate_policy_h_transp() == 1,time() > t_ini_h_veh()),
                               (p_h_vehicle().loc['hib 4wheels'].values - percent_h_vehicles_initial().loc['hib 4wheels'].values) /
                               (t_fin_h_veh() - t_ini_h_veh()), aux_hist_h().loc['hib 4wheels'].values), 0)


@cache('step')
def policy_2wheels():
    """
    Real Name: b'policy 2wheels'
    Original Eqn: b'if then else(Time<t fin h veh,if then else(activate policy h transp=1:and:Time>t ini h veh,(p share 2 wheelers -initial 2w percent)/(t fin h veh-t ini h veh),0),0 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < t_fin_h_veh(),
        if_then_else(logical_and(activate_policy_h_transp() == 1,time() > t_ini_h_veh()),
                               (p_share_2_wheelers() - initial_2w_percent()) /
                               (t_fin_h_veh() - t_ini_h_veh()), 0), 0)


@cache('step')
def h_2w_initial_growth():
    """
    Real Name: b'h 2w initial growth'
    Original Eqn: b'if then else(Time<t fin h veh,if then else(activate policy h transp=1:and:Time>t ini h veh, (p h vehicle[elec 2wheels]-percent h vehicles initial[elec 2wheels] )/(t fin h veh-t ini h veh),aux hist h[elec 2wheels]),0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < t_fin_h_veh(),
        if_then_else(logical_and(activate_policy_h_transp() == 1,time() > t_ini_h_veh()),
                               (p_h_vehicle().loc['elec 2wheels'].values - percent_h_vehicles_initial().loc['elec 2wheels'].values) /
                               (t_fin_h_veh() - t_ini_h_veh()), aux_hist_h().loc['elec 2wheels'].values), 0)


@cache('step')
def var_percents_h_vehicles():
    """
    Real Name: b'var percents h vehicles'
    Original Eqn: b'if then else(Time<t ini h veh,aux hist h[liq 4wheels], -h ev adapt growth-h hyb adapt growth-h gas adapt growth-rate 4w to 2w)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        if_then_else(
            time() < t_ini_h_veh(), aux_hist_h().loc['liq 4wheels'].values,
            -h_ev_adapt_growth() - h_hyb_adapt_growth() - h_gas_adapt_growth() - rate_4w_to_2w()),
        if_then_else(time() < t_ini_h_veh(), aux_hist_h().loc['hib 4wheels'].values, h_hyb_adapt_growth()),
        if_then_else(time() < t_ini_h_veh(), aux_hist_h().loc['elec 4wheels'].values, h_ev_adapt_growth()),
        if_then_else(time() < t_ini_h_veh(), aux_hist_h().loc['gas 4wheels'].values, h_gas_adapt_growth()),
        if_then_else(time() < t_ini_h_veh(), aux_hist_h().loc['liq 2wheels'].values,
                               -h_2we_adapt_growth() + rate_4w_to_2w()),
        if_then_else(time() < t_ini_h_veh(), aux_hist_h().loc['elec 2wheels'].values, h_2we_adapt_growth())],
        coords={'households vehicles': ['liq 4wheels', 'hib 4wheels', 'elec 4wheels', 'gas 4wheels', 'liq 2wheels', 'elec 2wheels']},
        dims=['households vehicles'])


@cache('step')
def increase_households_energy_final_demand_for_transp():
    """
    Real Name: b'increase households energy final demand for transp'
    Original Eqn: b'(energy intensity of households transport[final sources]-initial energy intensity of households transport 2009[final sources])*household demand total/1e+006'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (energy_intensity_of_households_transport() -
            initial_energy_intensity_of_households_transport_2009()
            ) * household_demand_total() / 1e+006


@cache('run')
def start_year_p_common_rr_minerals_alt_techn():
    """
    Real Name: b'start year p common rr minerals alt techn'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('run')
def start_year_p_common_rr_minerals_rest():
    """
    Real Name: b'start year p common rr minerals rest'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('run')
def select_pop_ssps():
    """
    Real Name: b'select pop ssps'
    Original Eqn: b'2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2


@cache('step')
def dynamic_low_range_fec_good_standard_of_living():
    """
    Real Name: b'dynamic low range fec good standard of living'
    Original Eqn: b'low range fec good standard of living*(1+cumulative tfec intensity change from 2009)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return low_range_fec_good_standard_of_living() * (1 +
                                                      cumulative_tfec_intensity_change_from_2009())


@cache('step')
def cp_ev_batteries_for_elec_storage():
    """
    Real Name: b'cp ev batteries for elec storage'
    Original Eqn: b'min(cp ev batteries required, max cp ev batteries for elec storage)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(cp_ev_batteries_required(), max_cp_ev_batteries_for_elec_storage())


@cache('step')
def dynamic_threshold_xhigh_developmentx():
    """
    Real Name: b'dynamic threshold xhigh developmentx'
    Original Eqn: b'threshold fec xhigh developmentx*(1+cumulative tfec intensity change from 2009)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return threshold_fec_xhigh_developmentx() * (1 + cumulative_tfec_intensity_change_from_2009())


@cache('run')
def max_cp_ev_batteries_for_elec_storage():
    """
    Real Name: b'max cp ev batteries for elec storage'
    Original Eqn: b'cp ev batteries for transp'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return cp_ev_batteries_for_transp()


@cache('step')
def tfec_intensity_until_2009():
    """
    Real Name: b'tfec intensity until 2009'
    Original Eqn: b'if then else(Time<2009, tfes intensity ej tdollar , aux15)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2009, tfes_intensity_ej_tdollar(), aux15())


@cache('step')
def desired_annual_gdp_growth_rate():
    """
    Real Name: b'desired annual gdp growth rate'
    Original Eqn: b'-1+(desired gdp/desired gdp delayed 1yr)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return -1 + (desired_gdp() / desired_gdp_delayed_1yr())


@cache('step')
def cumulative_tfec_intensity_change_from_2009():
    """
    Real Name: b'cumulative tfec intensity change from 2009'
    Original Eqn: b'if then else(Time<2009, 0, -1+(tfes intensity ej tdollar/tfec intensity until 2009))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2009, 0,
                                  -1 + (tfes_intensity_ej_tdollar() / tfec_intensity_until_2009()))


@cache('step')
def lifetime_ev_batteries():
    """
    Real Name: b'lifetime ev batteries'
    Original Eqn: b'zidz(net stored energy ev battery over lifetime , ((cp ev batteries for elec storage+cp ev batteries for transp)*mw in 1 year to mj*(kw per battery ev /kw per mw)) )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(net_stored_energy_ev_battery_over_lifetime(),
                          ((cp_ev_batteries_for_elec_storage() + cp_ev_batteries_for_transp()) *
                           mw_in_1_year_to_mj() * (kw_per_battery_ev() / kw_per_mw())))


@cache('step')
def dynamic_high_range_fec_good_standard_of_living():
    """
    Real Name: b'dynamic high range fec good standard of living'
    Original Eqn: b'high range fec good standard of living*(1+cumulative tfec intensity change from 2009)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return high_range_fec_good_standard_of_living() * (
        1 + cumulative_tfec_intensity_change_from_2009())


@cache('step')
def tfec_per_capita():
    """
    Real Name: b'tfec per capita'
    Original Eqn: b'zidz(real tfec*gj per ej , population )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(real_tfec() * gj_per_ej(), population())


@cache('step')
def aux15():
    """
    Real Name: b'aux15'
    Original Eqn: b'delay fixed ( tfec intensity until 2009, time step , 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_tfec_intensity_until_2009_roundtime_step__time_step___time_step_0_time_step__time_step()


@cache('run')
def cp_ev_batteries_for_transp():
    """
    Real Name: b'cp ev batteries for transp'
    Original Eqn: b'0.0055'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.0055


@cache('run')
def p_customized_cte_gdppc_variation():
    """
    Real Name: b'p customized cte gdppc variation'
    Original Eqn: b'0.02'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.02


@cache('step')
def annual_growth_rate_electricity_generation_res_elec_tot():
    """
    Real Name: b'annual growth rate electricity generation res elec tot'
    Original Eqn: b'-1+fe tot generation all res elec twh/fe tot generation all res elec twh delayed 1yr'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return -1 + fe_tot_generation_all_res_elec_twh(
    ) / fe_tot_generation_all_res_elec_twh_delayed_1yr()


@cache('step')
def annual_growth_rate_res_for_heat():
    """
    Real Name: b'annual growth rate res for heat'
    Original Eqn: b'-1+fes res for heat ej/fes res for heat delayed 1yr'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return -1 + fes_res_for_heat_ej() / fes_res_for_heat_delayed_1yr()


@cache('run')
def p_customized_year_pop_evolution():
    """
    Real Name: b'p customized year pop evolution'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('run')
def select_gdppc_evolution_input():
    """
    Real Name: b'select gdppc evolution input'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def select_population_evolution_input():
    """
    Real Name: b'select population evolution input'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def p_customized_year_gdppc_evolution():
    """
    Real Name: b'p customized year gdppc evolution'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('step')
def fe_tot_generation_all_res_elec_twh_delayed_1yr():
    """
    Real Name: b'fe tot generation all res elec twh delayed 1yr'
    Original Eqn: b'delay fixed ( fe tot generation all res elec twh, 1, 2463)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_fe_tot_generation_all_res_elec_twh_round1__time_step___time_step_2463_1__time_step()


@cache('run')
def p_customized_cte_pop_variation():
    """
    Real Name: b'p customized cte pop variation'
    Original Eqn: b'0.02'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.02


@cache('step')
def fes_res_for_heat_delayed_1yr():
    """
    Real Name: b'fes res for heat delayed 1yr'
    Original Eqn: b'delay fixed ( fes res for heat ej, 1, 3.488)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_fes_res_for_heat_ej_round1__time_step___time_step_3488_1__time_step()


@cache('step')
def desired_gdp_delayed_1yr():
    """
    Real Name: b'desired gdp delayed 1yr'
    Original Eqn: b'delay fixed ( desired gdp, 1, 29.16)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_desired_gdp_round1__time_step___time_step_2916_1__time_step()


@cache('step')
def diff_annual_gdp_growth_rate():
    """
    Real Name: b'diff annual gdp growth rate'
    Original Eqn: b'zidz((annual gdp growth rate-desired annual gdp growth rate) , desired annual gdp growth rate )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz((annual_gdp_growth_rate() - desired_annual_gdp_growth_rate()),
                          desired_annual_gdp_growth_rate())


@cache('run')
def gdppc_initial_year():
    """
    Real Name: b'gdppc initial year'
    Original Eqn: b'5106.7947854704435'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5106.7947854704435


@cache('step')
def desired_gdppc():
    """
    Real Name: b'desired gdppc'
    Original Eqn: b'integ ( desired variation gdppc, gdppc initial year)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_desired_gdppc()


@cache('step')
def tpes_intensity_until_2009():
    """
    Real Name: b'tpes intensity until 2009'
    Original Eqn: b'if then else(Time<2009, tpes intensity ej tdollar, aux14)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2009, tpes_intensity_ej_tdollar(), aux14())


@cache('step')
def share_e_losses_cc_until_x2015():
    """
    Real Name: b'share e losses cc until x2015'
    Original Eqn: b'if then else(Time<2015, elf , aux1)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2015, elf(), aux1())


@cache('step')
def aux13():
    """
    Real Name: b'aux13'
    Original Eqn: b'delay fixed ( tfec intensity until 2009 without eroi, time step , 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_tfec_intensity_until_2009_without_eroi_roundtime_step__time_step___time_step_0_time_step__time_step()


@cache('step')
def aux14():
    """
    Real Name: b'aux14'
    Original Eqn: b'delay fixed ( tpes intensity until 2009, time step , 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_tpes_intensity_until_2009_roundtime_step__time_step___time_step_0_time_step__time_step()


@cache('step')
def share_e_losses_cc_from_x2015():
    """
    Real Name: b'share e losses cc from x2015'
    Original Eqn: b'if then else(Time<2015, 0, max(0, min(1,elf-share e losses cc until x2015)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, 0, np.maximum(0, np.minimum(1,
                                                   elf() - share_e_losses_cc_until_x2015())))


@cache('step')
def elf():
    """
    Real Name: b'elf'
    Original Eqn: b'elf concentrations logistic'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return elf_concentrations_logistic()


@cache('step')
def cumulative_tpes_intensity_change_from_2009():
    """
    Real Name: b'cumulative tpes intensity change from 2009'
    Original Eqn: b'if then else(Time<2009, 0, -1+(tpes intensity ej tdollar/tpes intensity until 2009))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2009, 0,
                                  -1 + (tpes_intensity_ej_tdollar() / tpes_intensity_until_2009()))


@cache('step')
def cumulative_tfec_intensity_change_from_2009_without_eroi():
    """
    Real Name: b'cumulative tfec intensity change from 2009 without eroi'
    Original Eqn: b'if then else(Time<2009, 0, -1+(tfes intensity ej tdollar without eroi/tfec intensity until 2009 without eroi))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2009, 0,
        -1 + (tfes_intensity_ej_tdollar_without_eroi() / tfec_intensity_until_2009_without_eroi()))


@cache('step')
def tfec_intensity_until_2009_without_eroi():
    """
    Real Name: b'tfec intensity until 2009 without eroi'
    Original Eqn: b'if then else(Time<2009, tfes intensity ej tdollar without eroi , aux13)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2009, tfes_intensity_ej_tdollar_without_eroi(), aux13())


@cache('step')
def tfei_sectors():
    """
    Real Name: b'tfei sectors'
    Original Eqn: b'sum(sum1(final energy intensity by sector and fuel))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(final_energy_intensity_by_sector_and_fuel())


@cache('step')
def annual_tfes_intensity_growth_rate_without_eroi():
    """
    Real Name: b'annual tfes intensity growth rate without eroi'
    Original Eqn: b'-1+zidz(tfes intensity ej tdollar without eroi , tfes intensity without eroi delayed 1yr )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return -1 + zidz(tfes_intensity_ej_tdollar_without_eroi(),
                               tfes_intensity_without_eroi_delayed_1yr())


@cache('step')
def tfes_intensity_without_eroi_delayed_1yr():
    """
    Real Name: b'tfes intensity without eroi delayed 1yr'
    Original Eqn: b'delay fixed ( tfes intensity ej tdollar without eroi, 1, 8.827)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_tfes_intensity_ej_tdollar_without_eroi_round1__time_step___time_step_8827_1__time_step()


@cache('step')
def required_tfed_sectors():
    """
    Real Name: b'required tfed sectors'
    Original Eqn: b'sum(required fed sectors by fuel)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(required_fed_sectors_by_fuel())


@cache('step')
def ratio_fed_households_vs_sectors():
    """
    Real Name: b'ratio fed households vs sectors'
    Original Eqn: b'zidz(households total final energy demand , required tfed sectors )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(households_total_final_energy_demand(), required_tfed_sectors())


@cache('step')
def tfes_intensity_ej_tdollar_without_eroi():
    """
    Real Name: b'tfes intensity ej tdollar without eroi'
    Original Eqn: b'zidz(real tfec/eroi fc system from 2015, gdp)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(real_tfec() / eroi_fc_system_from_2015(), gdp())


@cache('run')
def ghg_emissions_2050_mlt2030():
    """
    Real Name: b'ghg emissions 2050 mlt2030'
    Original Eqn: b'7.958767677327897'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 7.958767677327897


@cache('run')
def ghg_emissions_2050_mlt2020():
    """
    Real Name: b'ghg emissions 2050 mlt2020'
    Original Eqn: b'17.232523345825705'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 17.232523345825705


@cache('run')
def start_year_p_growth_res_elec():
    """
    Real Name: b'start year p growth res elec'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('run')
def start_year_p_growth_res_heat():
    """
    Real Name: b'start year p growth res heat'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('run')
def labour_share_growth():
    """
    Real Name: b'labour share growth'
    Original Eqn: b'((p labour share 2050/initial labour share)^(1/(year final labour share-year initial labour share )))-1'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ((p_labour_share_2050() / initial_labour_share())
            **(1 / (year_final_labour_share() - year_initial_labour_share()))) - 1


@cache('run')
def year_initial_labour_share():
    """
    Real Name: b'year initial labour share'
    Original Eqn: b'2014'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2014


@cache('run')
def year_final_labour_share():
    """
    Real Name: b'year final labour share'
    Original Eqn: b'2050'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2050


@cache('run')
def p_labour_share_2050():
    """
    Real Name: b'p labour share 2050'
    Original Eqn: b'0.52'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.52


@cache('run')
def initial_labour_share():
    """
    Real Name: b'initial labour share'
    Original Eqn: b'0.5621'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.5621


@cache('run')
def low_range_fec_good_standard_of_living():
    """
    Real Name: b'low range fec good standard of living'
    Original Eqn: b'30.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 30.0


@cache('run')
def threshold_fec_xhigh_developmentx():
    """
    Real Name: b'threshold fec xhigh developmentx'
    Original Eqn: b'75.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 75.0


@cache('run')
def high_range_fec_good_standard_of_living():
    """
    Real Name: b'high range fec good standard of living'
    Original Eqn: b'40.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 40.0


@cache('step')
def total_co2exgwp_equal_100_yearsx():
    """
    Real Name: b'total co2exgwp equal 100 yearsx'
    Original Eqn: b'total ch4 emissions fossil fuels*gwp 100 years ch4/1000+total co2 emissions gtco2'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_ch4_emissions_fossil_fuels() * gwp_100_years_ch4(
    ) / 1000 + total_co2_emissions_gtco2()


@cache('step')
def net_tfec_per_capita():
    """
    Real Name: b'net tfec per capita'
    Original Eqn: b'zidz(real tfec*gj per ej/eroi fc system from 2015 , population )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(real_tfec() * gj_per_ej() / eroi_fc_system_from_2015(), population())


@cache('run')
def gwp_100_years_ch4():
    """
    Real Name: b'gwp 100 years ch4'
    Original Eqn: b'34'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 34


@cache('run')
def activate_energy_scarcity_feedback_quest():
    """
    Real Name: b'activate energy scarcity feedback quest'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def max_potential_phs_twh():
    """
    Real Name: b'max potential phs twh'
    Original Eqn: b'max capacity potential phs*cp phs/twe per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_capacity_potential_phs() * cp_phs() / twe_per_twh()


@cache('step')
def replacement_rate_phs():
    """
    Real Name: b'replacement rate phs'
    Original Eqn: b'if then else(potential fe elec stored phs twh<max potential phs twh,1,0.8)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(potential_fe_elec_stored_phs_twh() < max_potential_phs_twh(), 1, 0.8)


@cache('step')
def energy_scarcity_feedback_shortage_coeff():
    """
    Real Name: b'energy scarcity feedback shortage coeff'
    Original Eqn: b'if then else(activate energy scarcity feedback quest=1, min(1, zidz(real fe consumption by fuel before heat correction[final sources] , required fed by fuel before heat correction[final sources] )), 1)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        activate_energy_scarcity_feedback_quest() == 1,
        np.minimum(
            1,
            zidz(real_fe_consumption_by_fuel_before_heat_correction(),
                           required_fed_by_fuel_before_heat_correction())), 1)


@cache('step')
def real_fe_elec_stored_ev_batteries_twh():
    """
    Real Name: b'real fe elec stored ev batteries twh'
    Original Eqn: b'used ev batteries for elec storage/twe per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return used_ev_batteries_for_elec_storage() / twe_per_twh()


@cache('step')
def share_tot_fei_res_elec_var():
    """
    Real Name: b'share tot fei res elec var'
    Original Eqn: b'total final energy invested res elec var/total dyn fei res'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_final_energy_invested_res_elec_var() / total_dyn_fei_res()


@cache('step')
def cp_ev_batteries_required():
    """
    Real Name: b'cp ev batteries required'
    Original Eqn: b'max(0, demand ev batteries for elec storage/ev batteries tw)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, demand_ev_batteries_for_elec_storage() / ev_batteries_tw())


@cache('step')
def output_ev_bateries_for_storage_over_lifetime():
    """
    Real Name: b'output ev bateries for storage over lifetime'
    Original Eqn: b'cp ev batteries for elec storage*new plus replaced batteries tw*(1/twe per twh)*lifetime ev batteries*ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return cp_ev_batteries_for_elec_storage() * new_plus_replaced_batteries_tw() * (
        1 / twe_per_twh()) * lifetime_ev_batteries() * ej_per_twh()


@cache('step')
def discarded_batteries():
    """
    Real Name: b'discarded batteries'
    Original Eqn: b'max(0 ,zidz(batteries ev plus hib plus x2we , lifetime ev batteries ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, zidz(batteries_ev_plus_hib_plus_x2we(), lifetime_ev_batteries()))


@cache('step')
def esoi_elec_storage():
    """
    Real Name: b'esoi elec storage'
    Original Eqn: b'(esoi phs*installed capacity phs tw+esoi ev batteries*used ev batteries for elec storage)/total capacity elec storage tw'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (esoi_phs() * installed_capacity_phs_tw() + esoi_ev_batteries() *
            used_ev_batteries_for_elec_storage()) / total_capacity_elec_storage_tw()


@cache('step')
def esoi_ev_batteries():
    """
    Real Name: b'esoi ev batteries'
    Original Eqn: b'lifetime ev batteries*cp ev batteries for elec storage*mw in 1 year to mj /(quality of electricity*energy intensity construction ev batteries mj div mw*(1+share energy requirements for decom ev batteries+grid correction factor ev batteries ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return lifetime_ev_batteries() * cp_ev_batteries_for_elec_storage() * mw_in_1_year_to_mj() / (
        quality_of_electricity() * energy_intensity_construction_ev_batteries_mj_div_mw() *
        (1 + share_energy_requirements_for_decom_ev_batteries() +
         grid_correction_factor_ev_batteries()))


@cache('step')
def rt_elec_storage_efficiency():
    """
    Real Name: b'rt elec storage efficiency'
    Original Eqn: b'(rt storage efficiency phs*installed capacity phs tw+rt storage efficiency ev batteries *used ev batteries for elec storage)/total capacity elec storage tw'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (rt_storage_efficiency_phs() * installed_capacity_phs_tw() +
            rt_storage_efficiency_ev_batteries() *
            used_ev_batteries_for_elec_storage()) / total_capacity_elec_storage_tw()


@cache('step')
def abundance_storage():
    """
    Real Name: b'abundance storage'
    Original Eqn: b'1-if then else(demand storage capacity <= total capacity elec storage tw, 1, max(0, 1-(demand storage capacity-total capacity elec storage tw)/total capacity elec storage tw))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 - if_then_else(
        demand_storage_capacity() <= total_capacity_elec_storage_tw(), 1,
        np.maximum(
            0, 1 - (demand_storage_capacity() - total_capacity_elec_storage_tw()) /
            total_capacity_elec_storage_tw()))


@cache('step')
def used_ev_batteries_for_elec_storage():
    """
    Real Name: b'used ev batteries for elec storage'
    Original Eqn: b'ev batteries tw*cp ev batteries for elec storage'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ev_batteries_tw() * cp_ev_batteries_for_elec_storage()


@cache('step')
def max_cp_ev_batteries():
    """
    Real Name: b'max cp ev batteries'
    Original Eqn: b'net stored energy ev battery over lifetime/(min lifetime ev batteries*mw in 1 year to mj *(kw per battery ev/kw per mw))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return net_stored_energy_ev_battery_over_lifetime() / (min_lifetime_ev_batteries() *
                                                           mw_in_1_year_to_mj() *
                                                           (kw_per_battery_ev() / kw_per_mw()))


@cache('step')
def total_capacity_elec_storage_tw():
    """
    Real Name: b'total capacity elec storage tw'
    Original Eqn: b'installed capacity phs tw+used ev batteries for elec storage'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return installed_capacity_phs_tw() + used_ev_batteries_for_elec_storage()


@cache('step')
def demand_ev_batteries_for_elec_storage():
    """
    Real Name: b'demand ev batteries for elec storage'
    Original Eqn: b'max(0, demand storage capacity-installed capacity phs tw)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, demand_storage_capacity() - installed_capacity_phs_tw())


@cache('step')
def ced_per_tw_over_lifetime_phs():
    """
    Real Name: b'ced per tw over lifetime phs'
    Original Eqn: b'zidz((cp phs*lifetime res elec[hydro]*ej per twh/twe per twh) , esoi static phs*quality of electricity 2015 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz((cp_phs() * lifetime_res_elec().loc['hydro'].values * ej_per_twh() / twe_per_twh()),
                          esoi_static_phs() * quality_of_electricity_2015())


@cache('step')
def remaining_potential_constraint_on_new_phs_capacity():
    """
    Real Name: b'remaining potential constraint on new phs capacity'
    Original Eqn: b'if then else(remaining potential phs>threshold remaining potential new capacity ,1,remaining potential phs*(1/threshold remaining potential new capacity ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        remaining_potential_phs() > threshold_remaining_potential_new_capacity(), 1,
        remaining_potential_phs() * (1 / threshold_remaining_potential_new_capacity()))


@cache('step')
def new_required_phs_capacity():
    """
    Real Name: b'new required phs capacity'
    Original Eqn: b'if then else(Time<(2014-total time plan plus constr res elec[hydro]), historic new required capacity phs , installed capacity phs tw *adapt growth phs*remaining potential constraint on new phs capacity)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < (2014 - total_time_plan_plus_constr_res_elec().loc['hydro'].values),
        historic_new_required_capacity_phs(),
        installed_capacity_phs_tw() * adapt_growth_phs() *
        remaining_potential_constraint_on_new_phs_capacity())


@cache('step')
def share_dyn_fei_for_res_vs_tfec():
    """
    Real Name: b'share dyn fei for res vs tfec'
    Original Eqn: b'total dyn fei res/real tfec'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_dyn_fei_res() / real_tfec()


@cache('step')
def fei_ev_batteries():
    """
    Real Name: b'fei ev batteries'
    Original Eqn: b'zidz(output ev bateries for storage over lifetime , esoi ev batteries )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(output_ev_bateries_for_storage_over_lifetime(), esoi_ev_batteries())


@cache('step')
def output_phs_over_lifetime():
    """
    Real Name: b'output phs over lifetime'
    Original Eqn: b'cp phs*phs capacity under construction*(1/twe per twh)*lifetime res elec[ hydro]*ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return cp_phs() * phs_capacity_under_construction() * (
        1 / twe_per_twh()) * lifetime_res_elec().loc['hydro'].values * ej_per_twh()


@cache('step')
def esoi_static_phs():
    """
    Real Name: b'esoi static phs'
    Original Eqn: b'max(5, a lineal regr*installed capacity phs tw+b lineal regr)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(5, a_lineal_regr() * installed_capacity_phs_tw() + b_lineal_regr())


@cache('step')
def total_dyn_fei_res():
    """
    Real Name: b'total dyn fei res'
    Original Eqn: b'total final energy invested res elec var+fei ev batteries+total fei over lifetime res elec dispatch+final energy invested phs'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_final_energy_invested_res_elec_var() + fei_ev_batteries(
    ) + total_fei_over_lifetime_res_elec_dispatch() + final_energy_invested_phs()


@cache('step')
def adapt_growth_res_elec_after_allocation():
    """
    Real Name: b'adapt growth res elec after allocation'
    Original Eqn: b'if then else(activate eroi allocation rule=0, adapt growth res elec[res elec], adapt growth res elec[res elec]*eroi allocation rule per res elec[res elec])*constraint elec storage availability[res elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        activate_eroi_allocation_rule() == 0, adapt_growth_res_elec(),
        adapt_growth_res_elec() *
        eroi_allocation_rule_per_res_elec()) * constraint_elec_storage_availability()


@cache('step')
def esoi_phs():
    """
    Real Name: b'esoi phs'
    Original Eqn: b'zidz(output phs over lifetime , cedtot over lifetime phs*quality of electricity )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(output_phs_over_lifetime(),
                          cedtot_over_lifetime_phs() * quality_of_electricity())


@cache('run')
def p_phs_growth():
    """
    Real Name: b'p phs growth'
    Original Eqn: b'0.023'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.023


@cache('step')
def constraint_elec_storage_availability():
    """
    Real Name: b'constraint elec storage availability'
    Original Eqn: b'if then else(res elec variables quest[res elec]=0,1, if then else(demand storage capacity <= total capacity elec storage tw, 1, max(0, 1-(demand storage capacity-total capacity elec storage tw)/total capacity elec storage tw)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        res_elec_variables_quest() == 0, 1,
        if_then_else(
            demand_storage_capacity() <= total_capacity_elec_storage_tw(), 1,
            np.maximum(
                0, 1 - (demand_storage_capacity() - total_capacity_elec_storage_tw()) /
                total_capacity_elec_storage_tw())))


@cache('step')
def eroist_system():
    """
    Real Name: b'eroist system'
    Original Eqn: b'max(0, (real tfec)/feist system)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, real_tfec() / feist_system())


@cache('run')
def initial_instal_cap_phs():
    """
    Real Name: b'initial instal cap phs'
    Original Eqn: b'0.0916300043623243'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.0916300043623243


@cache('step')
def cedtot_over_lifetime_phs():
    """
    Real Name: b'cedtot over lifetime phs'
    Original Eqn: b'phs capacity under construction*ced per tw over lifetime phs'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return phs_capacity_under_construction() * ced_per_tw_over_lifetime_phs()


@cache('step')
def installed_capacity_phs_tw():
    """
    Real Name: b'installed capacity phs tw'
    Original Eqn: b'integ ( phs capacity under construction-wear phs, initial instal cap phs)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_installed_capacity_phs_tw()


@cache('step')
def phs_capacity_under_construction():
    """
    Real Name: b'phs capacity under construction'
    Original Eqn: b'phs planned capacity/time construction res elec[hydro]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return phs_planned_capacity() / time_construction_res_elec().loc['hydro'].values


@cache('run')
def past_phs_capacity_growth():
    """
    Real Name: b'past phs capacity growth'
    Original Eqn: b'0.023'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.023


@cache('step')
def new_phs_capacity_under_planning():
    """
    Real Name: b'new phs capacity under planning'
    Original Eqn: b'required capacity phs/time planification res elec[hydro]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_capacity_phs() / time_planification_res_elec().loc['hydro'].values


@cache('step')
def wear_phs():
    """
    Real Name: b'wear phs'
    Original Eqn: b'if then else(Time<2015, 0, installed capacity phs tw/lifetime res elec[hydro])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2015, 0,
                                  installed_capacity_phs_tw() / lifetime_res_elec().loc['hydro'].values)


@cache('step')
def replacement_capacity_phs():
    """
    Real Name: b'replacement capacity phs'
    Original Eqn: b'if then else(Time<2015,0,replacement rate phs*wear phs*(1-phs overcapacity))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2015, 0,
                                  replacement_rate_phs() * wear_phs() * (1 - phs_overcapacity()))


@cache('step')
def real_fe_elec_stored_phs_twh():
    """
    Real Name: b'real fe elec stored phs twh'
    Original Eqn: b'min(max potential phs twh, potential fe elec stored phs twh)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(max_potential_phs_twh(), potential_fe_elec_stored_phs_twh())


@cache('step')
def phs_planned_capacity():
    """
    Real Name: b'phs planned capacity'
    Original Eqn: b'integ ( new phs capacity under planning+replacement capacity phs-phs capacity under construction, initial capacity in construction phs)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_phs_planned_capacity()


@cache('step')
def final_energy_invested_phs():
    """
    Real Name: b'final energy invested phs'
    Original Eqn: b'potential fe elec stored phs twh*ej per twh/esoi phs'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return potential_fe_elec_stored_phs_twh() * ej_per_twh() / esoi_phs()


@cache('step')
def remaining_potential_phs():
    """
    Real Name: b'remaining potential phs'
    Original Eqn: b'if then else(max capacity potential phs > installed capacity phs tw, (max capacity potential phs-installed capacity phs tw)/max capacity potential phs, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(max_capacity_potential_phs() > installed_capacity_phs_tw(),
                                  (max_capacity_potential_phs() - installed_capacity_phs_tw()) /
                                  max_capacity_potential_phs(), 0)


@cache('step')
def initial_capacity_in_construction_phs():
    """
    Real Name: b'initial capacity in construction phs'
    Original Eqn: b'initial required capacity phs'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return initial_required_capacity_phs()


@cache('step')
def required_capacity_phs():
    """
    Real Name: b'required capacity phs'
    Original Eqn: b'integ ( new required phs capacity-new phs capacity under planning, initial required capacity phs)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_required_capacity_phs()


@cache('step')
def total_fei_over_lifetime_res_elec_dispatch():
    """
    Real Name: b'total fei over lifetime res elec dispatch'
    Original Eqn: b'sum(fei over lifetime res elec dispatch)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(fei_over_lifetime_res_elec_dispatch())


@cache('run')
def min_lifetime_ev_batteries():
    """
    Real Name: b'min lifetime ev batteries'
    Original Eqn: b'5'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5


@cache('step')
def total_final_energy_invested_res_elec_var():
    """
    Real Name: b'total final energy invested res elec var'
    Original Eqn: b'sum(fei res elec var)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(fei_res_elec_var())


@cache('step')
def materials_required_for_ev_batteries_mt():
    """
    Real Name: b'materials required for ev batteries mt'
    Original Eqn: b'new plus replaced batteries tw*materials per new capacity installed ev batteries[materials]*m per t/kg per mt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return new_plus_replaced_batteries_tw() * materials_per_new_capacity_installed_ev_batteries(
    ) * m_per_t() / kg_per_mt()


@cache('step')
def new_plus_replaced_batteries_tw():
    """
    Real Name: b'new plus replaced batteries tw'
    Original Eqn: b'(new batteries+replacement batteries)*kw per battery ev/kwh per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (new_batteries() + replacement_batteries()) * kw_per_battery_ev() / kwh_per_twh()


@cache('step')
def energy_intensity_construction_ev_batteries_mj_div_mw():
    """
    Real Name: b'energy intensity construction ev batteries mj div mw'
    Original Eqn: b'zidz(total energy required for total material consumption for ev batteries*mj per ej , new plus replaced batteries tw*m per t )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(
        total_energy_required_for_total_material_consumption_for_ev_batteries() * mj_per_ej(),
        new_plus_replaced_batteries_tw() * m_per_t())


@cache('step')
def new_batteries():
    """
    Real Name: b'new batteries'
    Original Eqn: b'required number standard batteries-batteries ev plus hib plus x2we'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_number_standard_batteries() - batteries_ev_plus_hib_plus_x2we()


@cache('step')
def batteries_ev_plus_hib_plus_x2we():
    """
    Real Name: b'batteries ev plus hib plus x2we'
    Original Eqn: b'integ ( new batteries+replacement batteries-discarded batteries, 1)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_batteries_ev_plus_hib_plus_x2we()


@cache('run')
def kw_per_mw():
    """
    Real Name: b'kw per mw'
    Original Eqn: b'1000.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000.0


@cache('run')
def net_stored_energy_ev_battery_over_lifetime():
    """
    Real Name: b'net stored energy ev battery over lifetime'
    Original Eqn: b'138024'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 138024


@cache('run')
def grid_correction_factor_ev_batteries():
    """
    Real Name: b'grid correction factor ev batteries'
    Original Eqn: b'0.1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.1


@cache('run')
def share_energy_requirements_for_decom_ev_batteries():
    """
    Real Name: b'share energy requirements for decom ev batteries'
    Original Eqn: b'0.1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.1


@cache('run')
def working_hours_per_year():
    """
    Real Name: b'working hours per year'
    Original Eqn: b'working hours per day*days per year'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return working_hours_per_day() * days_per_year()


@cache('run')
def days_per_year():
    """
    Real Name: b'days per year'
    Original Eqn: b'365.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 365.0


@cache('step')
def total_energy_required_for_material_consumption_for_res_elec():
    """
    Real Name: b'total energy required for material consumption for res elec'
    Original Eqn: b'sum(sum1(energy required for material consumption per res elec))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(energy_required_for_material_consumption_per_res_elec())


@cache('step')
def total_energy_required_for_material_consumption_per_res_elec():
    """
    Real Name: b'total energy required for material consumption per res elec'
    Original Eqn: b'sum2(energy required for material consumption per res elec)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """

    return sum(dim='materials', data=energy_required_for_material_consumption_per_res_elec())



@cache('run')
def mw_in_1_year_to_mj():
    """
    Real Name: b'mw in 1 year to mj'
    Original Eqn: b'31536000.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 31536000.0


@cache('run')
def working_hours_per_day():
    """
    Real Name: b'working hours per day'
    Original Eqn: b'8'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 8


@cache('step')
def annual_work_hours_for_res():
    """
    Real Name: b'annual work hours for res'
    Original Eqn: b'total jobs res*working hours per year'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_jobs_res() * working_hours_per_year()


@cache('step')
def hours_work_per_gj_res_delivered():
    """
    Real Name: b'hours work per gj res delivered'
    Original Eqn: b'zidz(annual work hours for res , (tfec res ej*gj per ej) )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(annual_work_hours_for_res(), (tfec_res_ej() * gj_per_ej()))


@cache('step')
def total_energy_required_for_total_material_consumption_for_ev_batteries():
    """
    Real Name: b'total energy required for total material consumption for ev batteries'
    Original Eqn: b'sum(energy required for material consumption for ev batteries)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(energy_required_for_material_consumption_for_ev_batteries())


@cache('step')
def tfe_required_for_total_material_consumption_for_alt_techn():
    """
    Real Name: b'tfe required for total material consumption for alt techn'
    Original Eqn: b'total energy required for material consumption for res elec+total energy required for total material consumption for ev batteries'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_energy_required_for_material_consumption_for_res_elec(
    ) + total_energy_required_for_total_material_consumption_for_ev_batteries()


@cache('step')
def energy_required_for_material_consumption_per_res_elec():
    """
    Real Name: b'energy required for material consumption per res elec'
    Original Eqn: b'energy required for material consumption for o and m res elec[res elec,materials]+energy required for material consumption for new res elec[res elec,materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return energy_required_for_material_consumption_for_o_and_m_res_elec(
    ) + energy_required_for_material_consumption_for_new_res_elec()


@cache('step')
def total_energy_required_per_material_for_alt_techn():
    """
    Real Name: b'total energy required per material for alt techn'
    Original Eqn: b'sum1(energy required for material consumption per res elec)+energy required for material consumption for ev batteries[materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(dim='res elec', data=energy_required_for_material_consumption_per_res_elec()
                          ) + energy_required_for_material_consumption_for_ev_batteries()


@cache('step')
def total_jobs_res_elec():
    """
    Real Name: b'total jobs res elec'
    Original Eqn: b'sum(total d plus i jobs res elec per techn)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(total_d_plus_i_jobs_res_elec_per_techn())


@cache('step')
def total_jobs_biofuels():
    """
    Real Name: b'total jobs biofuels'
    Original Eqn: b'employment factor biofuels*fes total biofuels production ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return employment_factor_biofuels() * fes_total_biofuels_production_ej()


@cache('step')
def total_jobs_res():
    """
    Real Name: b'total jobs res'
    Original Eqn: b'total jobs res elec+total jobs res heat+d jobs fuel supply solids bioe+total jobs biofuels'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_jobs_res_elec() + total_jobs_res_heat() + d_jobs_fuel_supply_solids_bioe(
    ) + total_jobs_biofuels()


@cache('step')
def total_d_plus_i_jobs_res_heat_per_techn():
    """
    Real Name: b'total d plus i jobs res heat per techn'
    Original Eqn: b'total d jobs res heat per techn[res heat]*ratio total vs d jobs res heat[res heat]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_d_jobs_res_heat_per_techn() * ratio_total_vs_d_jobs_res_heat()


@cache('step')
def total_jobs_res_heat():
    """
    Real Name: b'total jobs res heat'
    Original Eqn: b'sum(total d plus i jobs res heat per techn)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(total_d_plus_i_jobs_res_heat_per_techn())


@cache('step')
def total_d_plus_i_jobs_res_elec_per_techn():
    """
    Real Name: b'total d plus i jobs res elec per techn'
    Original Eqn: b'total d jobs res elec per techn[res elec]*ratio total vs d jobs res elec[res elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_d_jobs_res_elec_per_techn() * ratio_total_vs_d_jobs_res_elec()


@cache('run')
def ratio_total_vs_d_jobs_res_heat():
    """
    Real Name: b'ratio total vs d jobs res heat'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[1.0,1.9,1.0],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('run')
def ratio_total_vs_d_jobs_res_elec():
    """
    Real Name: b'ratio total vs d jobs res elec'
    Original Eqn: b'2.6'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[2.6,1.9,1.0,1.0,1.25,1.25,1.5,1.7],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('run')
def employment_factor_biofuels():
    """
    Real Name: b'employment factor biofuels'
    Original Eqn: b'740231.8591670244'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 740231.8591670244


@cache('step')
def installed_capacity_res_elec_delayed_1yr():
    """
    Real Name: b'installed capacity res elec delayed 1yr'
    Original Eqn: b'delay fixed ( installed capacity res elec tw[res elec], 1, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    x = [x() for x in _delay_installed_capacity_res_elec_tw_round1__time_step___time_step_0_1__time_step]

    return xr.DataArray(data=x,
                        coords={'res elec': _subscript_dict.get('res elec')},
                        dims=['res elec'])


@cache('step')
def jobs_o_and_m_res_heat_per_techn():
    """
    Real Name: b'jobs o and m res heat per techn'
    Original Eqn: b'(installed capacity res heat com tw[res heat]+installed capacity res heat nc tw[res heat])*employment factors o and m res heat[res heat]*m per t'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (installed_capacity_res_heat_com_tw() + installed_capacity_res_heat_nc_tw()
            ) * employment_factors_o_and_m_res_heat() * m_per_t()


@cache('step')
def d_jobs_new_installed_res_heat_per_techn():
    """
    Real Name: b'd jobs new installed res heat per techn'
    Original Eqn: b'(new res capacity for heat com tw[res heat]+replacement res for heat com tw[res heat]+new res capacity for heat nc tw[res heat]+replacement res for heat nc tw[res heat])*employment factors new res heat[res heat]*m per t'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (new_res_capacity_for_heat_com_tw() + replacement_res_for_heat_com_tw() +
            new_res_capacity_for_heat_nc_tw() +
            replacement_res_for_heat_nc_tw()) * employment_factors_new_res_heat() * m_per_t()


@cache('step')
def d_jobs_fuel_supply_solids_bioe():
    """
    Real Name: b'd jobs fuel supply solids bioe'
    Original Eqn: b'pes solids bioe ej*employment factor fuel supply solids bioe*1000'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_solids_bioe_ej() * employment_factor_fuel_supply_solids_bioe() * 1000


@cache('step')
def new_capacity_installed_growth_rate_res_elec():
    """
    Real Name: b'new capacity installed growth rate res elec'
    Original Eqn: b'-1+zidz(installed capacity res elec tw[res elec] , installed capacity res elec delayed 1yr[res elec] )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return -1 + zidz(installed_capacity_res_elec_tw(),
                               installed_capacity_res_elec_delayed_1yr())


@cache('run')
def employment_factor_fuel_supply_solids_bioe():
    """
    Real Name: b'employment factor fuel supply solids bioe'
    Original Eqn: b'0.029'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.029


@cache('step')
def exogenous_growth_gtl():
    """
    Real Name: b'exogenous growth gtl'
    Original Eqn: b'if then else(Time<2015, hist growth gtl, if then else(crash programme gtl quest=0,p gtl, if then else(crash programme gtl quest=1 :and: abundance liquids>= 1, hist growth gtl, p gtl)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, hist_growth_gtl(),
        if_then_else(
            crash_programme_gtl_quest() == 0, p_gtl(),
            if_then_else(logical_and(crash_programme_gtl_quest() == 1, abundance_liquids() >= 1),
                                   hist_growth_gtl(), p_gtl())))


@cache('step')
def replacement_gtl():
    """
    Real Name: b'replacement gtl'
    Original Eqn: b'if then else(Time<2015,0, if then else(crash programme gtl quest=0,0, if then else(check liquids<-0.0001, constrain liquids exogenous growth quest*wear gtl, wear gtl)))*scarcity conv oil'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, 0,
        if_then_else(
            crash_programme_gtl_quest() == 0, 0,
            if_then_else(check_liquids() < - equality_threshold(),
                                   constrain_liquids_exogenous_growth_quest() * wear_gtl(),
                                   wear_gtl()))) * scarcity_conv_oil()


@cache('run')
def crash_programme_gtl_quest():
    """
    Real Name: b'crash programme gtl quest'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def exogenous_growth_ctl():
    """
    Real Name: b'exogenous growth ctl'
    Original Eqn: b'if then else(Time<2015, hist growth ctl, if then else(crash programme ctl quest=0,p ctl, if then else(crash programme ctl quest=1 :and: abundance liquids>= 1, hist growth ctl, p ctl)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, hist_growth_ctl(),
        if_then_else(
            crash_programme_ctl_quest() == 0, p_ctl(),
            if_then_else(logical_and(crash_programme_ctl_quest() == 1, abundance_liquids() >= 1),
                                   hist_growth_ctl(), p_ctl())))


@cache('step')
def replacement_ctl():
    """
    Real Name: b'replacement ctl'
    Original Eqn: b'if then else(Time<2015,0, if then else(crash programme ctl quest=0,0, if then else(check liquids<-0.0001, constrain liquids exogenous growth quest*wear ctl, wear ctl)))*scarcity conv oil'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, 0,
        if_then_else(
            crash_programme_ctl_quest() == 0, 0,
            if_then_else(check_liquids() < - equality_threshold(),
                                   constrain_liquids_exogenous_growth_quest() * wear_ctl(),
                                   wear_ctl()))) * scarcity_conv_oil()


@cache('step')
def aux12():
    """
    Real Name: b'aux12'
    Original Eqn: b'delay fixed ( rurr coal start year plg, time step, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_rurr_coal_start_year_plg_roundtime_step__time_step___time_step_0_time_step__time_step()


@cache('step')
def coal_to_leave_underground():
    """
    Real Name: b'coal to leave underground'
    Original Eqn: b'if then else(Time<start policy leave in ground coal, 0, share rurr coal to leave underground*rurr coal start year plg)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_coal(), 0,
        share_rurr_coal_to_leave_underground() * rurr_coal_start_year_plg())


@cache('step')
def rurr_coal_start_year_plg():
    """
    Real Name: b'rurr coal start year plg'
    Original Eqn: b'if then else(Time<start policy leave in ground coal, rurr coal , aux12 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < start_policy_leave_in_ground_coal(), rurr_coal(),
                                  aux12())


@cache('step')
def rurr_conv_oil_until_start_year_plg():
    """
    Real Name: b'rurr conv oil until start year plg'
    Original Eqn: b'if then else(Time<start policy leave in ground conv oil, rurr conv oil , aux6)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < start_policy_leave_in_ground_conv_oil(), rurr_conv_oil(), aux6())


@cache('step')
def conv_gas_to_leave_underground():
    """
    Real Name: b'conv gas to leave underground'
    Original Eqn: b'if then else(Time<start policy leave in ground conv gas, 0, rurr conv gas until start year plg*share rurr conv gas to leave underground)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_gas(), 0,
        rurr_conv_gas_until_start_year_plg() * share_rurr_conv_gas_to_leave_underground())


@cache('step')
def conv_oil_to_leave_underground():
    """
    Real Name: b'conv oil to leave underground'
    Original Eqn: b'if then else(Time<start policy leave in ground conv oil,0,rurr conv oil until start year plg*share rurr conv oil to leave underground)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_oil(), 0,
        rurr_conv_oil_until_start_year_plg() * share_rurr_conv_oil_to_leave_underground())


@cache('step')
def rurr_unconv_oil_until_start_year_plg():
    """
    Real Name: b'rurr unconv oil until start year plg'
    Original Eqn: b'if then else(Time<start policy leave in ground unconv oil, rurr unconv oil ej , aux7)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < start_policy_leave_in_ground_unconv_oil(),
                                  rurr_unconv_oil_ej(), aux7())


@cache('step')
def rurr_unconv_gas_until_start_year_plg():
    """
    Real Name: b'rurr unconv gas until start year plg'
    Original Eqn: b'if then else(Time<start policy leave in ground unconv gas, rurr unconv gas , aux10)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < start_policy_leave_in_ground_unconv_gas(),
                                  rurr_unconv_gas(), aux10())


@cache('step')
def unconv_gas_to_leave_underground():
    """
    Real Name: b'unconv gas to leave underground'
    Original Eqn: b'if then else(Time<start policy leave in ground unconv gas, 0, rurr unconv gas until start year plg*share rurr unconv gas to leave underground )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_gas(), 0,
        rurr_unconv_gas_until_start_year_plg() * share_rurr_unconv_gas_to_leave_underground())


@cache('step')
def tot_agg_gas_to_leave_underground():
    """
    Real Name: b'tot agg gas to leave underground'
    Original Eqn: b'if then else(Time<start policy leave in ground tot agg gas, 0, rurr tot gas until start year plg*share rurr tot agg gas to leave underground)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_gas(), 0,
        rurr_tot_gas_until_start_year_plg() * share_rurr_tot_agg_gas_to_leave_underground())


@cache('step')
def unconv_oil_to_leave_underground():
    """
    Real Name: b'unconv oil to leave underground'
    Original Eqn: b'if then else(Time<start policy leave in ground unconv oil,0, rurr unconv oil until start year plg*share rurr unconv oil to leave underground )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_oil(), 0,
        rurr_unconv_oil_until_start_year_plg() * share_rurr_unconv_oil_to_leave_underground())


@cache('step')
def aux11():
    """
    Real Name: b'aux11'
    Original Eqn: b'delay fixed ( rurr tot gas until start year plg, time step, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_rurr_tot_gas_until_start_year_plg_roundtime_step__time_step___time_step_0_time_step__time_step()


@cache('step')
def tot_agg_oil_to_leave_underground():
    """
    Real Name: b'tot agg oil to leave underground'
    Original Eqn: b'if then else(Time<start policy leave in ground tot agg oil, 0, rurr tot oil until start year plg*share rurr tot agg oil to leave underground)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_oil(), 0,
        rurr_tot_oil_until_start_year_plg() * share_rurr_tot_agg_oil_to_leave_underground())


@cache('step')
def aux6():
    """
    Real Name: b'aux6'
    Original Eqn: b'delay fixed ( rurr conv oil until start year plg, time step, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_rurr_conv_oil_until_start_year_plg_roundtime_step__time_step___time_step_0_time_step__time_step()


@cache('step')
def aux7():
    """
    Real Name: b'aux7'
    Original Eqn: b'delay fixed ( rurr unconv oil until start year plg, time step, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_rurr_unconv_oil_until_start_year_plg_roundtime_step__time_step___time_step_0_time_step__time_step()


@cache('step')
def aux8():
    """
    Real Name: b'aux8'
    Original Eqn: b'delay fixed ( rurr tot oil until start year plg, time step, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_rurr_tot_oil_until_start_year_plg_roundtime_step__time_step___time_step_0_time_step__time_step()


@cache('step')
def aux9():
    """
    Real Name: b'aux9'
    Original Eqn: b'delay fixed ( rurr conv gas until start year plg, time step, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_rurr_conv_gas_until_start_year_plg_roundtime_step__time_step___time_step_0_time_step__time_step()


@cache('step')
def rurr_conv_gas_until_start_year_plg():
    """
    Real Name: b'rurr conv gas until start year plg'
    Original Eqn: b'if then else(Time<start policy leave in ground conv gas, rurr conv gas , aux9)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < start_policy_leave_in_ground_conv_gas(), rurr_conv_gas(), aux9())


@cache('step')
def aux10():
    """
    Real Name: b'aux10'
    Original Eqn: b'delay fixed ( rurr unconv gas until start year plg, time step, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_rurr_unconv_gas_until_start_year_plg_roundtime_step__time_step___time_step_0_time_step__time_step()


@cache('step')
def rurr_tot_gas_until_start_year_plg():
    """
    Real Name: b'rurr tot gas until start year plg'
    Original Eqn: b'if then else(Time<start policy leave in ground tot agg gas, rurr tot agg gas , aux11)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < start_policy_leave_in_ground_tot_agg_gas(), rurr_tot_agg_gas(), aux11())


@cache('step')
def rurr_tot_oil_until_start_year_plg():
    """
    Real Name: b'rurr tot oil until start year plg'
    Original Eqn: b'if then else(Time<start policy leave in ground tot agg oil, rurr tot agg oil , aux8)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < start_policy_leave_in_ground_tot_agg_oil(), rurr_tot_agg_oil(), aux8())


@cache('step')
def share_elec_demand_covered_by_res():
    """
    Real Name: b'share elec demand covered by res'
    Original Eqn: b'if then else(total fe elec demand twh>0, min(1, fe tot generation all res elec twh/total fe elec demand twh),0.5)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        total_fe_elec_demand_twh() > 0,
        np.minimum(1, fe_tot_generation_all_res_elec_twh() / total_fe_elec_demand_twh()), 0.5)


@cache('step')
def rurr_conv_gas():
    """
    Real Name: b'rurr conv gas'
    Original Eqn: b'integ ( -extraction conv gas ej-flow conv gas left in ground, urr conv gas-cumulated conv gas extraction to 1995*separate conv and unconv gas quest)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_rurr_conv_gas()


@cache('step')
def rurr_unconv_gas():
    """
    Real Name: b'rurr unconv gas'
    Original Eqn: b'integ ( -extraction unconv gas ej-flow unconv gas left in ground, urr unconv gas-cumulated unconv gas extraction to 1995*separate conv and unconv gas quest)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_rurr_unconv_gas()


@cache('step')
def rurr_conv_oil():
    """
    Real Name: b'rurr conv oil'
    Original Eqn: b'integ ( -extraction conv oil ej-flow conv oil left in ground, urr conv oil-cumulated conv oil extraction to 1995*separate conv and unconv oil quest)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_rurr_conv_oil()


@cache('step')
def variation_share_transm_and_distr_losses_elec():
    """
    Real Name: b'variation share transm and distr losses elec'
    Original Eqn: b'share transm and distr elec losses initial*(0.0115*exp(4.2297*share res electricity generation)-0.00251)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_transm_and_distr_elec_losses_initial() * (
        0.0115 * np.exp(4.2297 * share_res_electricity_generation()) - 0.00251)


@cache('step')
def share_demand_solids_in_transport():
    """
    Real Name: b'share demand solids in transport'
    Original Eqn: b'share demand by fuel in transport[solids]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_demand_by_fuel_in_transport().loc['solids'].values


@cache('step')
def share_demand_gas_in_transport():
    """
    Real Name: b'share demand gas in transport'
    Original Eqn: b'share demand by fuel in transport[gases]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_demand_by_fuel_in_transport().loc['gases'].values


@cache('step')
def share_demand_by_fuel_in_transport():
    """
    Real Name: b'share demand by fuel in transport'
    Original Eqn: b'total transport fed by fuel[final sources]/transport tfed'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_transport_fed_by_fuel() / transport_tfed()


@cache('step')
def share_demand_electricity_in_transport():
    """
    Real Name: b'share demand electricity in transport'
    Original Eqn: b'share demand by fuel in transport[electricity]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_demand_by_fuel_in_transport().loc['electricity'].values


@cache('step')
def share_demand_heat_in_transport():
    """
    Real Name: b'share demand heat in transport'
    Original Eqn: b'share demand by fuel in transport[heat]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_demand_by_fuel_in_transport().loc['heat'].values


@cache('step')
def share_demand_liquids_in_transport():
    """
    Real Name: b'share demand liquids in transport'
    Original Eqn: b'share demand by fuel in transport[liquids]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_demand_by_fuel_in_transport().loc['liquids'].values


@cache('step')
def co2_emissions_per_value_added():
    """
    Real Name: b'co2 emissions per value added'
    Original Eqn: b'zidz(total co2 emissions gtco2 , gdp )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(total_co2_emissions_gtco2(), gdp())


@cache('run')
def liquids_per_x_bus():
    """
    Real Name: b'liquids per x bus'
    Original Eqn: b'energy initial inland transport[bus liq]*adjust energy for transport to inland transport /initial xt inland'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return energy_initial_inland_transport().loc['bus liq'].values * adjust_energy_for_transport_to_inland_transport(
    ) / initial_xt_inland()


@cache('run')
def liquids_per_x_hv():
    """
    Real Name: b'liquids per x hv'
    Original Eqn: b'energy initial inland transport[hv liq]*adjust energy for transport to inland transport /initial xt inland'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return energy_initial_inland_transport().loc['hv liq'].values * adjust_energy_for_transport_to_inland_transport(
    ) / initial_xt_inland()


@cache('run')
def liquids_per_x_lv():
    """
    Real Name: b'liquids per x lv'
    Original Eqn: b'energy initial inland transport[lv liq]*adjust energy for transport to inland transport /initial xt inland'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return energy_initial_inland_transport().loc['lv liq'].values * adjust_energy_for_transport_to_inland_transport(
    ) / initial_xt_inland()


@cache('run')
def energy_per_x_train():
    """
    Real Name: b'energy per x train'
    Original Eqn: b'energy initial inland transport[train liq]*adjust energy for transport to inland transport /initial xt inland'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return energy_initial_inland_transport().loc['train liq'].values * adjust_energy_for_transport_to_inland_transport(
    ) / initial_xt_inland()


@cache('run')
def adjust_energy_for_transport_to_inland_transport():
    """
    Real Name: b'adjust energy for transport to inland transport'
    Original Eqn: b'0.3767'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.3767


@cache('step')
def effects_shortage_elec_on_ev_div_hib():
    """
    Real Name: b'effects shortage elec on ev div hib'
    Original Eqn: b'if then else(abundance electricity>0.8, ((abundance electricity-0.8)*5)^2, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(abundance_electricity() > 0.8, ((abundance_electricity() - 0.8) * 5)**2, 0)


@cache('step')
def hist_var_percent_h():
    """
    Real Name: b'hist var percent h'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,
        if_then_else(time() > 2005,
                               (percent_h_vehicles_initial().loc['hib 4wheels'].values - 0) / (t_hist_h_transp() - 2005), 0),
        if_then_else(time() < 2005, 0,
                               (percent_h_vehicles_initial().loc['elec 4wheels'].values - 0) / (t_hist_h_transp() - 2005)),
        if_then_else(time() < 2005, 0,
                               (percent_h_vehicles_initial().loc['gas 4wheels'].values - 0) / (t_hist_h_transp() - 2005)),0.0,
        if_then_else(time() < 2005, 0,
                               (percent_h_vehicles_initial().loc['elec 2wheels'].values - 0) / (t_hist_h_transp() - 2005))],
        coords={'households vehicles': ['liq 4wheels', 'hib 4wheels', 'elec 4wheels', 'gas 4wheels', 'liq 2wheels', 'elec 2wheels']},
        dims=['households vehicles'])


@cache('step')
def required_number_standard_batteries():
    """
    Real Name: b'required number standard batteries'
    Original Eqn: b'bat number 2w+bat number ev+bat number hib+1'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return bat_number_2w() + bat_number_ev() + bat_number_hib() + 1


@cache('step')
def transport_tfed_energy_intensity():
    """
    Real Name: b'transport tfed energy intensity'
    Original Eqn: b'zidz(transport tfed , gdp )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(transport_tfed(), gdp())


@cache('step')
def total_number_light_vehicles():
    """
    Real Name: b'total number light vehicles'
    Original Eqn: b'number vehicles h[liq 4wheels]+number vehicles h[hib 4wheels]+number vehicles h[elec 4wheels]+number vehicles h[gas 4wheels]+vehicles inlandt[ lv liq]+vehicles inlandt[lv elec]+vehicles inlandt[lv hib]+vehicles inlandt[lv gas]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return number_vehicles_h().loc['liq 4wheels'].values + number_vehicles_h().loc['hib 4wheels'].values + number_vehicles_h().loc['elec 4wheels'].values + number_vehicles_h().loc['gas 4wheels'].values + vehicles_inlandt().loc['lv liq'].values + vehicles_inlandt().loc['lv elec'].values + vehicles_inlandt().loc['lv hib'].values + vehicles_inlandt().loc['lv gas'].values


@cache('step')
def transport_tfed():
    """
    Real Name: b'transport tfed'
    Original Eqn: b'sum(total transport fed by fuel)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(total_transport_fed_by_fuel())


@cache('step')
def real_fe_consumption_liquids_ej():
    """
    Real Name: b'real fe consumption liquids ej'
    Original Eqn: b'(pes liquids ej-other liquids required ej)*share liquids for final energy'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (pes_liquids_ej() - other_liquids_required_ej()) * share_liquids_for_final_energy()


@cache('step')
def co2_emissions_unconv_gas():
    """
    Real Name: b'co2 emissions unconv gas'
    Original Eqn: b'real extraction unconv gas emissions relevant ej*gco2 per mj unconv gas*mj per ej /g per gt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_extraction_unconv_gas_emissions_relevant_ej() * gco2_per_mj_unconv_gas() * mj_per_ej() / g_per_gt()


@cache('run')
def phase_out_oil_for_electricity_quest():
    """
    Real Name: b'phase out oil for electricity quest'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def max_solar_on_land_mha():
    """
    Real Name: b'max solar on land mha'
    Original Eqn: b'100'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 100


@cache('step')
def max_solar_pv_on_land_mha():
    """
    Real Name: b'max solar pv on land mha'
    Original Eqn: b'max solar on land mha-surface csp mha'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_solar_on_land_mha() - surface_csp_mha()


@cache('step')
def max_solar_pv_on_land_twe():
    """
    Real Name: b'max solar pv on land twe'
    Original Eqn: b'max solar pv on land mha*power density solar pv'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_solar_pv_on_land_mha() * power_density_solar_pv()


@cache('step')
def total_ch4_emissions_fossil_fuels():
    """
    Real Name: b'total ch4 emissions fossil fuels'
    Original Eqn: b'ch4 emissions conv gas without gtl+ch4 emissions unconv gas+ch4 emissions coal without ctl+ch4 emissions oil+ch4 emissions ctl+ch4 emissions gtl'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ch4_emissions_conv_gas_without_gtl() + ch4_emissions_unconv_gas(
    ) + ch4_emissions_coal_without_ctl() + ch4_emissions_oil() + ch4_emissions_ctl(
    ) + ch4_emissions_gtl()


@cache('step')
def max_csp_on_land_mha():
    """
    Real Name: b'max csp on land mha'
    Original Eqn: b'max solar on land mha-surface solar pv mha'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_solar_on_land_mha() - surface_solar_pv_mha()


@cache('step')
def max_csp_twe():
    """
    Real Name: b'max csp twe'
    Original Eqn: b'max csp on land mha*power density csp'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_csp_on_land_mha() * power_density_csp()


@cache('run')
def gch4_per_mj_gtl():
    """
    Real Name: b'gch4 per mj gtl'
    Original Eqn: b'0.094'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.094


@cache('step')
def ch4_emissions_gtl():
    """
    Real Name: b'ch4 emissions gtl'
    Original Eqn: b'ped natx gas for gtl ej*gch4 per mj gtl*mj per ej/g per mt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ped_natx_gas_for_gtl_ej() * gch4_per_mj_gtl() * mj_per_ej() / g_per_mt()


@cache('step')
def ch4_emissions_ctl():
    """
    Real Name: b'ch4 emissions ctl'
    Original Eqn: b'extraction coal for ctl ej*gch4 per mj ctl*mj per ej/g per mt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_coal_for_ctl_ej() * gch4_per_mj_ctl() * mj_per_ej() / g_per_mt()


@cache('run')
def phase_out_oil_for_heat_quest():
    """
    Real Name: b'phase out oil for heat quest'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def gch4_per_mj_ctl():
    """
    Real Name: b'gch4 per mj ctl'
    Original Eqn: b'0.094'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.094


@cache('run')
def g_per_gt():
    """
    Real Name: b'g per gt'
    Original Eqn: b'1000000000000000.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000000000000000.0


@cache('step')
def bioe_co2_emissions():
    """
    Real Name: b'bioe co2 emissions'
    Original Eqn: b'gco2 per mj conv gas*(oil liquids saved by biofuels ej+solid biofuels emissions relevant ej+pes tot biogas for heat com)*mj per ej/g per gt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return gco2_per_mj_conv_gas() * (oil_liquids_saved_by_biofuels_ej() +
                                     solid_biofuels_emissions_relevant_ej() +
                                     pes_tot_biogas_for_heat_com()) * mj_per_ej() / g_per_gt()


@cache('run')
def maximum_2w():
    """
    Real Name: b'maximum 2w'
    Original Eqn: b'p share 2 wheelers'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return p_share_2_wheelers()


@cache('run')
def p_h_vehicle():
    """
    Real Name: b'p h vehicle'
    Original Eqn: b'(1-p share 2 wheelers)*(-p elec-p gas-p hyb)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        (1 - p_share_2_wheelers()) * (-p_elec() - p_gas() - p_hyb()),
        p_hyb() * (1 - p_share_2_wheelers()),
        p_elec() * (1 - p_share_2_wheelers()),
        p_gas() * (1 - p_share_2_wheelers()),
        p_share_2_wheelers() * (1 - p_2we()),
        p_share_2_wheelers() * p_2we()],
        coords={'households vehicles': ['liq 4wheels', 'hib 4wheels', 'elec 4wheels', 'gas 4wheels', 'liq 2wheels', 'elec 2wheels']},
        dims=['households vehicles'])


@cache('step')
def solid_biofuels_emissions_relevant_ej():
    """
    Real Name: b'solid biofuels emissions relevant ej'
    Original Eqn: b'pe bioe for elec generation ej+pes res for heat com by techn[solid bioe heat]+pes res for heat nc by techn[solid bioe heat]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_bioe_for_elec_generation_ej() + pes_res_for_heat_com_by_techn().loc['solid bioe heat'].values + pes_res_for_heat_nc_by_techn().loc['solid bioe heat'].values


@cache('step')
def eroist_system_until_2015():
    """
    Real Name: b'eroist system until 2015'
    Original Eqn: b'if then else(Time<2015, eroist system delayed , aux4)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2015, eroist_system_delayed(), aux4())


@cache('step')
def remaining_potential_elec_storage_by_res_techn():
    """
    Real Name: b'remaining potential elec storage by res techn'
    Original Eqn: b'if then else(max capacity elec storage >= demand storage capacity, (max capacity elec storage-demand storage capacity)/max capacity elec storage, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(max_capacity_elec_storage() >= demand_storage_capacity(),
                                  (max_capacity_elec_storage() - demand_storage_capacity()) /
                                  max_capacity_elec_storage(), 0)


@cache('run')
def cp_hydro_2015():
    """
    Real Name: b'cp hydro 2015'
    Original Eqn: b'0.42302360615086493'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.42302360615086493


@cache('run')
def esoi_phs_full_potential():
    """
    Real Name: b'esoi phs full potential'
    Original Eqn: b'eroi ini res elec dispatch[hydro]*(cp phs/cp hydro 2015)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return eroi_ini_res_elec_dispatch().loc['hydro'].values * (cp_phs() / cp_hydro_2015())


@cache('step')
def max_capacity_elec_storage():
    """
    Real Name: b'max capacity elec storage'
    Original Eqn: b'max capacity potential phs+used ev batteries for elec storage'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_capacity_potential_phs() + used_ev_batteries_for_elec_storage()


@cache('step')
def cc_impacts_feedback_shortage_coeff():
    """
    Real Name: b'cc impacts feedback shortage coeff'
    Original Eqn: b'(1-share e losses cc)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (1 - share_e_losses_cc())


@cache('run')
def eol_rr_minerals_alt_techn_res_vsx_total_economy():
    """
    Real Name: b'eol rr minerals alt techn res vsx total economy'
    Original Eqn: b'0.3333333333333333'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.3333333333333333


@cache('run')
def crash_programme_ctl_quest():
    """
    Real Name: b'crash programme ctl quest'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def recycling_rates_minerals_rest():
    """
    Real Name: b'recycling rates minerals rest'
    Original Eqn: b'integ ( improvement recycling rates minerals rest[materials], current recycling rates minerals[materials]*all minerals virgin quest)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_recycling_rates_minerals_rest()


@cache('run')
def p_elec():
    """
    Real Name: b'p elec'
    Original Eqn: b'0.0064'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.0064


@cache('step')
def percents_h_vehicles():
    """
    Real Name: b'percents h vehicles'
    Original Eqn: b'integ ( var percents h vehicles[liq 4wheels], 1-initial 2w percent)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_percents_h_vehicles()


@cache('run')
def t_hist_h_transp():
    """
    Real Name: b't hist h transp'
    Original Eqn: b'2015'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2015


@cache('step')
def bat_number_2w():
    """
    Real Name: b'bat number 2w'
    Original Eqn: b'number vehicles h[elec 2wheels]*bateries ratio 2w e'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return number_vehicles_h().loc['elec 2wheels'].values * bateries_ratio_2w_e()


@cache('run')
def bateries_ratio_2w_e():
    """
    Real Name: b'bateries ratio 2w e'
    Original Eqn: b'0.078'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.078


@cache('step')
def bat_number_ev():
    """
    Real Name: b'bat number ev'
    Original Eqn: b'number vehicles h[elec 4wheels]+vehicles inlandt[lv elec]+vehicles inlandt[bus elec]*bateries ratio bus e'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return number_vehicles_h().loc['elec 4wheels'].values + vehicles_inlandt().loc['lv elec'].values + vehicles_inlandt().loc['bus elec'].values * bateries_ratio_bus_e()


@cache('step')
def bat_number_hib():
    """
    Real Name: b'bat number hib'
    Original Eqn: b'vehicles inlandt[lv hib]*bateries ratio hib lv+vehicles inlandt[hv hib]*bateries ratio hib hv+vehicles inlandt [bus hib]*bateries ratio hib bus+number vehicles h[hib 4wheels]* bateries ratio hib lv'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return vehicles_inlandt().loc['lv hib'].values * bateries_ratio_hib_lv(
    ) + vehicles_inlandt().loc['hv hib'].values * bateries_ratio_hib_hv() + vehicles_inlandt().loc['bus hib'].values * bateries_ratio_hib_bus(
    ) + number_vehicles_h().loc['hib 4wheels'].values * bateries_ratio_hib_lv()


@cache('run')
def bateries_ratio_bus_e():
    """
    Real Name: b'bateries ratio bus e'
    Original Eqn: b'9.801724137931034'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 9.801724137931034


@cache('run')
def bateries_ratio_hib_bus():
    """
    Real Name: b'bateries ratio hib bus'
    Original Eqn: b'0.6573926316519808'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.6573926316519808


@cache('run')
def bateries_ratio_hib_hv():
    """
    Real Name: b'bateries ratio hib hv'
    Original Eqn: b'0.8382058284923753'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.8382058284923753


@cache('run')
def bateries_ratio_hib_lv():
    """
    Real Name: b'bateries ratio hib lv'
    Original Eqn: b'0.10223304298097888'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.10223304298097888


@cache('step')
def total_number_hybrid_light_vehicles():
    """
    Real Name: b'total number hybrid light vehicles'
    Original Eqn: b'number vehicles h[hib 4wheels]+vehicles inlandt[lv hib]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return number_vehicles_h().loc['hib 4wheels'].values + vehicles_inlandt().loc['lv hib'].values


@cache('step')
def total_number_elec_light_vehicles():
    """
    Real Name: b'total number elec light vehicles'
    Original Eqn: b'number vehicles h[elec 4wheels]+vehicles inlandt[lv elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return number_vehicles_h().loc['elec 4wheels'].values + vehicles_inlandt().loc['lv elec'].values


@cache('step')
def total_number_gas_light_vehicles():
    """
    Real Name: b'total number gas light vehicles'
    Original Eqn: b'number vehicles h[gas 4wheels]+vehicles inlandt[lv gas]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return number_vehicles_h().loc['gas 4wheels'].values + vehicles_inlandt().loc['lv gas'].values


@cache('step')
def ev_batteries_tw():
    """
    Real Name: b'ev batteries tw'
    Original Eqn: b'batteries ev plus hib plus x2we*kw per battery ev/kwh per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return batteries_ev_plus_hib_plus_x2we() * kw_per_battery_ev() / kwh_per_twh()


@cache('step')
def var_percent_t_vehicles():
    """
    Real Name: b'var percent t vehicles'
    Original Eqn: b'-adapt var inlandt[hv hib]-adapt var inlandt[hv gas]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        -adapt_var_inlandt().loc['hv hib'].values - adapt_var_inlandt().loc['hv gas'].values,
        adapt_var_inlandt().loc['hv hib'].values,
        adapt_var_inlandt().loc['hv gas'].values,
        -adapt_var_inlandt().loc['lv hib'].values - adapt_var_inlandt().loc['lv elec'].values - adapt_var_inlandt().loc['lv gas'].values,
        adapt_var_inlandt().loc['lv elec'].values,
        adapt_var_inlandt().loc['lv hib'].values,
        adapt_var_inlandt().loc['lv gas'].values,
        -adapt_var_inlandt().loc['bus elec'].values - adapt_var_inlandt().loc['bus hib'].values - adapt_var_inlandt().loc['bus gas'].values,
        adapt_var_inlandt().loc['bus elec'].values,
        adapt_var_inlandt().loc['bus hib'].values,
        adapt_var_inlandt().loc['bus gas'].values,
        -adapt_var_inlandt().loc['train elec'].values,
        adapt_var_inlandt().loc['train elec'].values],
        coords={'vehiclet': ['hv liq', 'hv hib', 'hv gas', 'lv liq', 'lv elec', 'lv hib', 'lv gas', 'bus liq', 'bus elec', 'bus hib', 'bus gas', 'train liq', 'train elec']},
        dims=['vehiclet'])


@cache('run')
def p_train_elec():
    """
    Real Name: b'p train elec'
    Original Eqn: b'0.2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.2


@cache('run')
def p_hv_gas():
    """
    Real Name: b'p hv gas'
    Original Eqn: b'0.00045'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.00045


@cache('run')
def t_ini_inlandt():
    """
    Real Name: b't ini inlandt'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('run')
def p_inlandt():
    """
    Real Name: b'p inlandt'
    Original Eqn: b'-p hv gas-p hv hyb'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        -p_hv_gas() - p_hv_hyb(),
        p_hv_hyb(),
        p_hv_gas(),
        -p_lv_elec() - p_lv_hyb() - p_lv_gas(),
        p_lv_elec(),
        p_lv_hyb(),
        p_lv_gas(),
        -p_bus_hyb() - p_bus_gas() - p_bus_elec(),
        p_bus_elec(),
        p_bus_hyb(),
        p_bus_gas(),
        -p_train_elec(),
        p_train_elec()],
        coords={'vehiclet': ['hv liq', 'hv hib', 'hv gas', 'lv liq', 'lv elec', 'lv hib', 'lv gas', 'bus liq', 'bus elec', 'bus hib', 'bus gas', 'train liq', 'train elec']},
        dims=['vehiclet'])


@cache('run')
def activate_policy_inlandt():
    """
    Real Name: b'activate policy inlandt'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def p_lv_elec():
    """
    Real Name: b'p lv elec'
    Original Eqn: b'0.00074'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.00074


@cache('run')
def p_lv_hyb():
    """
    Real Name: b'p lv hyb'
    Original Eqn: b'0.00036'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.00036


@cache('run')
def p_bus_elec():
    """
    Real Name: b'p bus elec'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def p_bus_gas():
    """
    Real Name: b'p bus gas'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def p_bus_hyb():
    """
    Real Name: b'p bus hyb'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('step')
def percents_bus():
    """
    Real Name: b'percents bus'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0,0.0,0.0,0.0,
        percent_t_vehicles().loc['lv hib'].values,0.0,
        percent_t_vehicles().loc['bus liq'].values,
        percent_t_vehicles().loc['bus elec'].values,
        percent_t_vehicles().loc['bus hib'].values,
        percent_t_vehicles().loc['bus gas'].values,0.0,0.0],
        coords={'vehiclet': ['hv liq', 'hv hib', 'hv gas', 'lv liq', 'lv elec', 'lv hib', 'lv gas', 'bus liq', 'bus elec', 'bus hib', 'bus gas', 'train liq', 'train elec']},
        dims=['vehiclet'])


@cache('step')
def percents_train():
    """
    Real Name: b'percents train'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0,0.0,0.0,0.0,
        percent_t_vehicles().loc['lv hib'].values,0.0,0.0,0.0,0.0,0.0,
        percent_t_vehicles().loc['train liq'].values,
        percent_t_vehicles().loc['train elec'].values],
        coords={'vehiclet': ['hv liq', 'hv hib', 'hv gas', 'lv liq', 'lv elec', 'lv hib', 'lv gas', 'bus liq', 'bus elec', 'bus hib', 'bus gas', 'train liq', 'train elec']},
        dims=['vehiclet'])


@cache('run')
def p_hv_hyb():
    """
    Real Name: b'p hv hyb'
    Original Eqn: b'0.00045'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.00045


@cache('step')
def adapt_var_inlandt():
    """
    Real Name: b'adapt var inlandt'
    Original Eqn: b'aux p inland transp[vehiclet]*efects shortage inlandt[vehiclet]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return aux_p_inland_transp() * efects_shortage_inlandt()


@cache('step')
def percents_lv():
    """
    Real Name: b'percents lv'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0,0.0,
        percent_t_vehicles().loc['lv liq'].values,
        percent_t_vehicles().loc['lv elec'].values,
        percent_t_vehicles().loc['lv hib'].values,
        percent_t_vehicles().loc['lv gas'].values,0.0,0.0,0.0,0.0,0.0,0.0],
        coords={'vehiclet': ['hv liq', 'hv hib', 'hv gas', 'lv liq', 'lv elec', 'lv hib', 'lv gas', 'bus liq', 'bus elec', 'bus hib', 'bus gas', 'train liq', 'train elec']},
        dims=['vehiclet'])


@cache('step')
def var_i_inland_elec():
    """
    Real Name: b'var i inland elec'
    Original Eqn: b'energy per x t[lv elec]*var percent t vehicles[lv elec]+energy per x t[train elec]*var percent t vehicles[train elec]+energy per x t[ bus elec]*var percent t vehicles[bus elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return energy_per_x_t().loc['lv elec'].values * var_percent_t_vehicles().loc['lv elec'].values + energy_per_x_t().loc['train elec'].values * var_percent_t_vehicles().loc['train elec'].values + energy_per_x_t().loc['bus elec'].values * var_percent_t_vehicles().loc['bus elec'].values


@cache('step')
def var_i_inlandt_gas():
    """
    Real Name: b'var i inlandt gas'
    Original Eqn: b'energy per x t[hv gas]*var percent t vehicles[hv gas]+energy per x t[bus gas]*var percent t vehicles[bus gas]+energy per x t[lv gas]*var percent t vehicles[lv gas]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return energy_per_x_t().loc['hv gas'].values * var_percent_t_vehicles().loc['hv gas'].values + energy_per_x_t().loc['bus gas'].values * var_percent_t_vehicles().loc['bus gas'].values + energy_per_x_t().loc['lv gas'].values * var_percent_t_vehicles().loc['lv gas'].values


@cache('step')
def var_i_inlandt_liq():
    """
    Real Name: b'var i inlandt liq'
    Original Eqn: b'energy per x t[hv liq]*var percent t vehicles[hv liq]+energy per x t[lv liq]*var percent t vehicles[lv liq]+energy per x t[bus liq]*var percent t vehicles[bus liq]+energy per x t[hv liq]*var percent t vehicles[hv hib]+energy per x t[lv liq]*var percent t vehicles[lv hib]+energy per x t[bus liq]*var percent t vehicles[bus hib]+ energy per x t[train liq]*var percent t vehicles[train liq]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return energy_per_x_t().loc['hv liq'].values * var_percent_t_vehicles().loc['hv liq'].values + energy_per_x_t().loc['lv liq'].values * var_percent_t_vehicles().loc['lv liq'].values + energy_per_x_t().loc['bus liq'].values * var_percent_t_vehicles().loc['bus liq'].values + energy_per_x_t().loc['hv liq'].values * var_percent_t_vehicles().loc['hv hib'].values + energy_per_x_t().loc['lv liq'].values * var_percent_t_vehicles().loc['lv hib'].values + energy_per_x_t().loc['bus liq'].values * var_percent_t_vehicles().loc['bus hib'].values + energy_per_x_t().loc['train liq'].values * var_percent_t_vehicles().loc['train liq'].values


@cache('step')
def shares_available_t():
    """
    Real Name: b'shares available t'
    Original Eqn: b'1-(percent t vehicles[hv hib]+percent t vehicles[hv gas])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        1 - (percent_t_vehicles().loc['hv hib'].values + percent_t_vehicles().loc['hv gas'].values),
        1 - (percent_t_vehicles().loc['hv hib'].values + percent_t_vehicles().loc['hv gas'].values),
        1 - (percent_t_vehicles().loc['hv hib'].values + percent_t_vehicles().loc['hv gas'].values),
        1 - (percent_t_vehicles().loc['lv elec'].values + percent_t_vehicles().loc['lv hib'].values + percent_t_vehicles().loc['lv gas'].values),
        1 - (percent_t_vehicles().loc['lv elec'].values + percent_t_vehicles().loc['lv hib'].values + percent_t_vehicles().loc['lv gas'].values),
        1 - (percent_t_vehicles().loc['lv elec'].values + percent_t_vehicles().loc['lv hib'].values + percent_t_vehicles().loc['lv gas'].values),
        1 - (percent_t_vehicles().loc['lv elec'].values + percent_t_vehicles().loc['lv hib'].values + percent_t_vehicles().loc['lv gas'].values),
        1 - (percent_t_vehicles().loc['bus elec'].values + percent_t_vehicles().loc['bus hib'].values + percent_t_vehicles().loc['bus gas'].values),
        1 - (percent_t_vehicles().loc['bus elec'].values + percent_t_vehicles().loc['bus hib'].values + percent_t_vehicles().loc['bus gas'].values),
        1 - (percent_t_vehicles().loc['bus elec'].values + percent_t_vehicles().loc['bus hib'].values + percent_t_vehicles().loc['bus gas'].values),
        1 - (percent_t_vehicles().loc['bus elec'].values + percent_t_vehicles().loc['bus hib'].values + percent_t_vehicles().loc['bus gas'].values),
        1 - percent_t_vehicles().loc['train elec'].values,
        1 - percent_t_vehicles().loc['train elec'].values],
        coords={'vehiclet': ['hv liq', 'hv hib', 'hv gas', 'lv liq', 'lv elec', 'lv hib', 'lv gas', 'bus liq', 'bus elec', 'bus hib', 'bus gas', 'train liq', 'train elec']},
        dims=['vehiclet'])


@cache('step')
def vehicles_inlandt():
    """
    Real Name: b'vehicles inlandt'
    Original Eqn: b'percent t vehicles[vehiclet]*real total output inland transport *nx0 vehicles per xinland t[vehiclet]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return percent_t_vehicles() * real_total_output_inland_transport() * nx0_vehicles_per_xinland_t()


@cache('step')
def percent_t_vehicles():
    """
    Real Name: b'percent t vehicles'
    Original Eqn: b'integ ( var percent t vehicles[vehiclet], initial percent t vehicles[vehiclet])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_percent_t_vehicles()


@cache('step')
def efects_shortage_inlandt():
    """
    Real Name: b'efects shortage inlandt'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[1.0,1.0,
        effects_shortage_gas(),1.0,
        effects_shortage_elec_on_ev(),1.0,
        effects_shortage_gas(),1.0,
        effects_shortage_elec_on_ev(),1.0,
        effects_shortage_gas(),1.0,
        effects_shortage_elec_on_ev()],
        coords={'vehiclet': ['hv liq', 'hv hib', 'hv gas', 'lv liq', 'lv elec', 'lv hib', 'lv gas', 'bus liq', 'bus elec', 'bus hib', 'bus gas', 'train liq', 'train elec']},
        dims=['vehiclet'])


@cache('run')
def p_lv_gas():
    """
    Real Name: b'p lv gas'
    Original Eqn: b'0.01597'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.01597


@cache('step')
def percents_hv():
    """
    Real Name: b'percents hv'
    Original Eqn: b'percent t vehicles[hv liq]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        percent_t_vehicles().loc['hv liq'].values,
        percent_t_vehicles().loc['hv hib'].values,
        percent_t_vehicles().loc['hv gas'].values,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
        coords={'vehiclet': ['hv liq', 'hv hib', 'hv gas', 'lv liq', 'lv elec', 'lv hib', 'lv gas', 'bus liq', 'bus elec', 'bus hib', 'bus gas', 'train liq', 'train elec']},
        dims=['vehiclet'])


@cache('run')
def initial_xt_inland():
    """
    Real Name: b'initial xt inland'
    Original Eqn: b'2.221228'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2.221228


@cache('run')
def nx_bus_inlandt():
    """
    Real Name: b'nx bus inlandt'
    Original Eqn: b'(n vehicles inland t 0[bus liq]+n vehicles inland t 0[bus hib]+n vehicles inland t 0[bus gas]+n vehicles inland t 0[bus elec])/initial xt inland'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (n_vehicles_inland_t_0().loc['bus liq'].values + n_vehicles_inland_t_0().loc['bus hib'].values + n_vehicles_inland_t_0().loc['bus gas'].values +
            n_vehicles_inland_t_0().loc['bus elec'].values) / initial_xt_inland()


@cache('run')
def nx_hv_inland_t():
    """
    Real Name: b'nx hv inland t'
    Original Eqn: b'(n vehicles inland t 0[hv liq]+n vehicles inland t 0[hv hib]+n vehicles inland t 0[hv gas])/initial xt inland'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (n_vehicles_inland_t_0().loc['hv liq'].values + n_vehicles_inland_t_0().loc['hv hib'].values +
            n_vehicles_inland_t_0().loc['hv gas'].values) / initial_xt_inland()


@cache('run')
def nx_lv_inland_t():
    """
    Real Name: b'nx lv inland t'
    Original Eqn: b'(n vehicles inland t 0[lv liq]+n vehicles inland t 0[lv elec]+n vehicles inland t 0[ lv hib]+n vehicles inland t 0[lv gas])/initial xt inland'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (n_vehicles_inland_t_0().loc['lv liq'].values + n_vehicles_inland_t_0().loc['lv elec'].values + n_vehicles_inland_t_0().loc['lv hib'].values +
            n_vehicles_inland_t_0().loc['lv gas'].values) / initial_xt_inland()


@cache('run')
def n_vehicles_inland_t_0():
    """
    Real Name: b'n vehicles inland t 0'
    Original Eqn: b'58453889.6747974'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[58453889.6747974,26420.04832386,26420.04832386,209702761.0,159229.97493238,76996.06181609,3406478.98166824,15600000.0,0.0,0.0,0.0,1.0,1.0],
        coords={'vehiclet': ['hv liq', 'hv hib', 'hv gas', 'lv liq', 'lv elec', 'lv hib', 'lv gas', 'bus liq', 'bus elec', 'bus hib', 'bus gas', 'train liq', 'train elec']},
        dims=['vehiclet'])


@cache('run')
def energy_initial_inland_transport():
    """
    Real Name: b'energy initial inland transport'
    Original Eqn: b'22.28147354618678'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[22.28147355,0.0,0.0,8.10305879,0.0,0.0,0.0,2.66129086,0.0,0.0,0.0,1.30366657,0.32591664],
        coords={'vehiclet': ['hv liq', 'hv hib', 'hv gas', 'lv liq', 'lv elec', 'lv hib', 'lv gas', 'bus liq', 'bus elec', 'bus hib', 'bus gas', 'train liq', 'train elec']},
        dims=['vehiclet'])


@cache('run')
def energy_per_x_t():
    """
    Real Name: b'energy per x t'
    Original Eqn: b'liquids per x hv*saving ratios v[hv liq]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        liquids_per_x_hv() * saving_ratios_v().loc['hv liq'].values,
        liquids_per_x_hv() * saving_ratios_v().loc['hv hib'].values,
        liquids_per_x_hv() * saving_ratios_v().loc['hv gas'].values,
        liquids_per_x_lv() * saving_ratios_v().loc['lv liq'].values,
        liquids_per_x_lv() * saving_ratios_v().loc['lv elec'].values,
        liquids_per_x_lv() * saving_ratios_v().loc['lv hib'].values,
        liquids_per_x_lv() * saving_ratios_v().loc['lv gas'].values,
        liquids_per_x_bus() * saving_ratios_v().loc['bus liq'].values,
        liquids_per_x_bus() * saving_ratios_v().loc['bus elec'].values,
        liquids_per_x_bus() * saving_ratios_v().loc['bus hib'].values,
        liquids_per_x_bus() * saving_ratios_v().loc['bus gas'].values,
        energy_per_x_train() * 0.8,
        energy_per_x_train() * 0.2],
        coords={'vehiclet': ['hv liq', 'hv hib', 'hv gas', 'lv liq', 'lv elec', 'lv hib', 'lv gas', 'bus liq', 'bus elec', 'bus hib', 'bus gas', 'train liq', 'train elec']},
        dims=['vehiclet'])


@cache('run')
def nx_train_inland_t():
    """
    Real Name: b'nx train inland t'
    Original Eqn: b'1/initial xt inland'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 / initial_xt_inland()


@cache('run')
def a2_coef_th():
    """
    Real Name: b'a2 coef th'
    Original Eqn: b'electricity 2we/(demand h*percent h vehicles initial[elec 2wheels]*saving ratio 2we)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return electricity_2we() / (demand_h() * percent_h_vehicles_initial().loc['elec 2wheels'].values * saving_ratio_2we())


@cache('step')
def h_gas_adapt_growth():
    """
    Real Name: b'h gas adapt growth'
    Original Eqn: b'h gas initial growth*effects shortage gas h veh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return h_gas_initial_growth() * effects_shortage_gas_h_veh()


@cache('step')
def h_hyb_adapt_growth():
    """
    Real Name: b'h hyb adapt growth'
    Original Eqn: b'h hyb initial growth'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return h_hyb_initial_growth()


@cache('run')
def activate_policy_h_transp():
    """
    Real Name: b'activate policy h transp'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def initial_energy_intensity_of_households_transport_2009():
    """
    Real Name: b'initial energy intensity of households transport 2009'
    Original Eqn: b'1.245'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.00472,0.0,1.245,0.01711,0.0],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def h_ev_adapt_growth():
    """
    Real Name: b'h ev adapt growth'
    Original Eqn: b'h elec initial growth*effects shortage elec on ev'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return h_elec_initial_growth() * effects_shortage_elec_on_ev()


@cache('step')
def var_ih_e2():
    """
    Real Name: b'var ih e2'
    Original Eqn: b'a1 coef th*var percents h vehicles[elec 4wheels]*saving ratios v[lv elec]+ a2 coef th*var percents h vehicles[elec 2wheels]*saving ratio 2we'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return a1_coef_th() * var_percents_h_vehicles().loc['elec 4wheels'].values * saving_ratios_v().loc['lv elec'].values + a2_coef_th(
    ) * var_percents_h_vehicles().loc['elec 2wheels'].values * saving_ratio_2we()


@cache('step')
def var_ih_gas2():
    """
    Real Name: b'var ih gas2'
    Original Eqn: b'a1 coef th*var percents h vehicles[gas 4wheels]*saving ratios v[lv gas]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return a1_coef_th() * var_percents_h_vehicles().loc['gas 4wheels'].values * saving_ratios_v().loc['lv gas'].values


@cache('run')
def a1_coef_th():
    """
    Real Name: b'a1 coef th'
    Original Eqn: b'((liq 4w/demand h)-(a2 coef th*percent 2w liq))/percent 4w liq'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ((liq_4w() / demand_h()) - (a2_coef_th() * percent_2w_liq())) / percent_4w_liq()


@cache('step')
def var_ih_liq2():
    """
    Real Name: b'var ih liq2'
    Original Eqn: b'a1 coef th*var percents h vehicles[liq 4wheels]+a1 coef th*var percents h vehicles[hib 4wheels]+a2 coef th*var percents h vehicles[liq 2wheels]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return a1_coef_th() * var_percents_h_vehicles().loc['liq 4wheels'].values + a1_coef_th() * var_percents_h_vehicles().loc['hib 4wheels'].values + a2_coef_th() * var_percents_h_vehicles().loc['liq 2wheels'].values


@cache('run')
def percent_h_vehicles_initial():
    """
    Real Name: b'percent h vehicles initial'
    Original Eqn: b'0.642852406005333'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.64285241,0.00161276,0.00095159,0.02209406,0.26410155,0.06838764],
        coords={'households vehicles': ['liq 4wheels', 'hib 4wheels', 'elec 4wheels', 'gas 4wheels', 'liq 2wheels', 'elec 2wheels']},
        dims=['households vehicles'])


@cache('step')
def energy_intensity_of_households_transport():
    """
    Real Name: b'energy intensity of households transport'
    Original Eqn: b'integ ( variation energy intensity of households transport[final sources], initial energy intensity of households transport 2009[final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_energy_intensity_of_households_transport()


@cache('step')
def h_2we_adapt_growth():
    """
    Real Name: b'h 2we adapt growth'
    Original Eqn: b'h 2w initial growth'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return h_2w_initial_growth()


@cache('run')
def liq_4w():
    """
    Real Name: b'liq 4w'
    Original Eqn: b'41.97111631434505'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 41.97111631434505


@cache('run')
def percent_2w_liq():
    """
    Real Name: b'percent 2w liq'
    Original Eqn: b'0.2641015512843279'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.2641015512843279


@cache('run')
def percent_4w_liq():
    """
    Real Name: b'percent 4w liq'
    Original Eqn: b'0.642852406005333'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.642852406005333


@cache('run')
def electricity_2we():
    """
    Real Name: b'electricity 2we'
    Original Eqn: b'0.3420237795619384'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.3420237795619384


@cache('run')
def n_vehicles_h():
    """
    Real Name: b'n vehicles h'
    Original Eqn: b'2534633971.758305'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2534633971.758305


@cache('run')
def demand_h():
    """
    Real Name: b'demand h'
    Original Eqn: b'30.3'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 30.3


@cache('run')
def ratio_n_veh_demand_h():
    """
    Real Name: b'ratio n veh demand h'
    Original Eqn: b'n vehicles h/demand h'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return n_vehicles_h() / demand_h()


@cache('step')
def percents_2w_h_vehicles():
    """
    Real Name: b'percents 2w h vehicles'
    Original Eqn: b'percents h vehicles[liq 2wheels]/(percents h vehicles[elec 2wheels]+percents h vehicles[liq 2wheels])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[0.0,0.0,0.0,0.0,
        percents_h_vehicles().loc['liq 2wheels'].values / (percents_h_vehicles().loc['elec 2wheels'].values + percents_h_vehicles().loc['liq 2wheels'].values),
        percents_h_vehicles().loc['elec 2wheels'].values / (percents_h_vehicles().loc['elec 2wheels'].values + percents_h_vehicles().loc['liq 2wheels'].values)],
        coords={'households vehicles': ['liq 4wheels', 'hib 4wheels', 'elec 4wheels', 'gas 4wheels', 'liq 2wheels', 'elec 2wheels']},
        dims=['households vehicles'])


@cache('step')
def percents_4w_h_vehicles():
    """
    Real Name: b'percents 4w h vehicles'
    Original Eqn: b'percents h vehicles[liq 4wheels]/(percents h vehicles[elec 4wheels]+percents h vehicles[hib 4wheels]+percents h vehicles[gas 4wheels]+percents h vehicles[liq 4wheels])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        percents_h_vehicles().loc['liq 4wheels'].values / (percents_h_vehicles().loc['elec 4wheels'].values + percents_h_vehicles().loc['hib 4wheels'].values +
                                 percents_h_vehicles().loc['gas 4wheels'].values + percents_h_vehicles().loc['liq 4wheels'].values),
        percents_h_vehicles().loc['hib 4wheels'].values / (percents_h_vehicles().loc['elec 4wheels'].values + percents_h_vehicles().loc['hib 4wheels'].values +
                                 percents_h_vehicles().loc['gas 4wheels'].values + percents_h_vehicles().loc['liq 4wheels'].values),
        percents_h_vehicles().loc['elec 4wheels'].values / (percents_h_vehicles().loc['elec 4wheels'].values + percents_h_vehicles().loc['hib 4wheels'].values +
                                 percents_h_vehicles().loc['gas 4wheels'].values + percents_h_vehicles().loc['liq 4wheels'].values),
        percents_h_vehicles().loc['gas 4wheels'].values / (percents_h_vehicles().loc['elec 4wheels'].values + percents_h_vehicles().loc['hib 4wheels'].values +
                                 percents_h_vehicles().loc['gas 4wheels'].values + percents_h_vehicles().loc['liq 4wheels'].values),0.0,0.0],
        coords={'households vehicles': ['liq 4wheels', 'hib 4wheels', 'elec 4wheels', 'gas 4wheels', 'liq 2wheels', 'elec 2wheels']},
        dims=['households vehicles'])


@cache('run')
def p_2we():
    """
    Real Name: b'p 2we'
    Original Eqn: b'0.9254'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.9254


@cache('step')
def max_percent_2_wheels():
    """
    Real Name: b'max percent 2 wheels'
    Original Eqn: b'integ ( rate 4w to 2w, initial 2w percent)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_max_percent_2_wheels()


@cache('step')
def max_percent_4_wheels():
    """
    Real Name: b'max percent 4 wheels'
    Original Eqn: b'integ ( -rate 4w to 2w, 1-initial 2w percent)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_max_percent_4_wheels()


@cache('step')
def aux_hist_h():
    """
    Real Name: b'aux hist h'
    Original Eqn: b'-hist var percent h[hib 4wheels]-hist var percent h[elec 4wheels]-hist var percent h[gas 4wheels]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        -hist_var_percent_h().loc['hib 4wheels'].values - hist_var_percent_h().loc['elec 4wheels'].values - hist_var_percent_h().loc['gas 4wheels'].values,
        hist_var_percent_h().loc['hib 4wheels'].values,
        hist_var_percent_h().loc['elec 4wheels'].values,
        hist_var_percent_h().loc['gas 4wheels'].values,
        -hist_var_percent_h().loc['elec 2wheels'].values,
        hist_var_percent_h().loc['elec 2wheels'].values],
        coords={'households vehicles': ['liq 4wheels', 'hib 4wheels', 'elec 4wheels', 'gas 4wheels', 'liq 2wheels', 'elec 2wheels']},
        dims=['households vehicles'])


@cache('run')
def p_gas():
    """
    Real Name: b'p gas'
    Original Eqn: b'0.1489'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.1489


@cache('run')
def p_share_2_wheelers():
    """
    Real Name: b'p share 2 wheelers'
    Original Eqn: b'0.3325'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.3325


@cache('run')
def p_hyb():
    """
    Real Name: b'p hyb'
    Original Eqn: b'0.0108'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.0108


@cache('run')
def initial_2w_percent():
    """
    Real Name: b'initial 2w percent'
    Original Eqn: b'0.33248919227982615'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.33248919227982615


@cache('step')
def share_available_2w():
    """
    Real Name: b'share available 2w'
    Original Eqn: b'(max percent 2 wheels-percents h vehicles[elec 2wheels])/max percent 2 wheels'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (max_percent_2_wheels() - percents_h_vehicles().loc['elec 2wheels'].values) / max_percent_2_wheels()


@cache('step')
def rate_4w_to_2w():
    """
    Real Name: b'rate 4w to 2w'
    Original Eqn: b'policy 2wheels'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return policy_2wheels()


@cache('run')
def share_feh_over_fed_by_final_fuel():
    """
    Real Name: b'share feh over fed by final fuel'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0,
        share_feh_over_fed_oil(),
        share_feh_over_fed_natx_gas(),
        (share_feh_over_fed_coal() + share_feh_over_fed_solid_bioe())],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('run')
def share_feh_over_fed_oil():
    """
    Real Name: b'share feh over fed oil'
    Original Eqn: b'0.24447829398324447'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.24447829398324447


@cache('run')
def share_feh_over_fed_coal():
    """
    Real Name: b'share feh over fed coal'
    Original Eqn: b'0.39271002371738867'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.39271002371738867


@cache('run')
def share_feh_over_fed_natx_gas():
    """
    Real Name: b'share feh over fed natx gas'
    Original Eqn: b'0.768348623853211'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.768348623853211


@cache('step')
def pes_oil_ej_delayed():
    """
    Real Name: b'pes oil ej delayed'
    Original Eqn: b'delay fixed ( pes oil ej, time step, 139.5)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_pes_oil_ej_roundtime_step__time_step___time_step_1395_time_step__time_step()


@cache('step')
def energy_required_for_material_consumption_for_ev_batteries():
    """
    Real Name: b'energy required for material consumption for ev batteries'
    Original Eqn: b'materials required for ev batteries mt[materials]*energy cons per unit of material cons for res elec [materials]*kg per mt/mj per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return materials_required_for_ev_batteries_mt(
    ) * energy_cons_per_unit_of_material_cons_for_res_elec() * kg_per_mt() / mj_per_ej()


@cache('step')
def variation_energy_intensity_of_households_transport():
    """
    Real Name: b'variation energy intensity of households transport'
    Original Eqn: b'if then else(Time<2009,0,var ih liq2)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        if_then_else(time() > 2009, var_ih_e2(), 0),0.0,
        if_then_else(time() < 2009, 0, var_ih_liq2()),
        if_then_else(time() > 2009, var_ih_gas2(), 0),0.0],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def number_vehicles_h():
    """
    Real Name: b'number vehicles h'
    Original Eqn: b'ratio n veh demand h*household demand total*1e-006*percents h vehicles[households vehicles]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ratio_n_veh_demand_h() * household_demand_total() * 1e-006 * percents_h_vehicles()


@cache('step')
def effects_shortage_elec_on_ev():
    """
    Real Name: b'effects shortage elec on ev'
    Original Eqn: b'if then else(abundance electricity>0.8, ((abundance electricity-0.8)*5)^2, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(abundance_electricity() > 0.8,
                                  ((abundance_electricity() - 0.8) * 5)**2, 0)


@cache('step')
def effects_shortage_gas_h_veh():
    """
    Real Name: b'effects shortage gas h veh'
    Original Eqn: b'if then else(abundance gases>0.8, ((abundance gases-0.8)*5)^2, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(abundance_gases() > 0.8, ((abundance_gases() - 0.8) * 5)**2, 0)


@cache('run')
def xax_extraction_projection_minerals():
    """
    Real Name: b'xax extraction projection minerals'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,1006851.44431989,0.0,119.69287194,0.0,0.0,561172.97577378,230741.48718745,0.0,0.0,0.0,0.0,0.0,0.0,10.11098981,0.0,0.0,0.0,12.05290211,80787194.16497986,0.0,0.0,0.0,0.0,804.07748379,0.0,302664.46064236,343350.03530151,0.0,0.0,5023.5108697,0.0,0.0,0.0,40510.95804217,0.0,0.0,0.0,73765.76663225,0.0,0.0,0.0,0.0,0.0,0.0,0.0,257.68585968,0.0,2274.62093105,0.0,0.0,0.0,0.0,102968.10545833,0.0,1274.7444251,0.0,207576.31076445],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('run')
def xbx_extraction_projection_minerals():
    """
    Real Name: b'xbx extraction projection minerals'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,-24747508.84046872,0.0,12862.99276901,0.0,0.0,-13481662.07152069,1147112.83580538,0.0,0.0,0.0,0.0,0.0,0.0,-434.34489379,0.0,0.0,0.0,-286.28398042,-2777690170.0,0.0,0.0,0.0,0.0,-25209.40506256,0.0,-11844018.97356096,-8586601.90070709,0.0,0.0,-107292.91153227,0.0,0.0,0.0,-772331.36137761,0.0,0.0,0.0,-554097.26168084,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4731.27412551,0.0,111474.4915326,0.0,0.0,0.0,0.0,-448351.45343147,0.0,-18947.84206194,0.0,-1819702.6572439],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('step')
def variation_minerals_extraction_rest():
    """
    Real Name: b'variation minerals extraction rest'
    Original Eqn: b'if then else(Time<2015,historical variation minerals extraction rest[materials], if then else(minerals extraction projection rest cte rr[materials]>0.01,(xax extraction projection minerals[materials]*(gdp-gdp delayed 1yr)),0))*mt per tonne'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, historical_variation_minerals_extraction_rest(),
        if_then_else(minerals_extraction_projection_rest_cte_rr() > 0.01,
                               (xax_extraction_projection_minerals() *
                                (gdp() - gdp_delayed_1yr())), 0)) * mt_per_tonne()


@cache('step')
def total_recycled_materials_for_other_mt():
    """
    Real Name: b'total recycled materials for other mt'
    Original Eqn: b'minerals consumption estimation rest cte rr[materials]-minerals extraction projection rest with rr[materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return minerals_consumption_estimation_rest_cte_rr() - minerals_extraction_projection_rest_with_rr()


@cache('step')
def share_minerals_consumption_alt_techn_vs_total_economy():
    """
    Real Name: b'share minerals consumption alt techn vs total economy'
    Original Eqn: b'zidz(total materials required for res elec plus ev batteries mt[materials] , (minerals consumption estimation rest cte rr[materials]+total materials required for res elec plus ev batteries mt[materials]))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(total_materials_required_for_res_elec_plus_ev_batteries_mt(),
                          (minerals_consumption_estimation_rest_cte_rr() +
                           total_materials_required_for_res_elec_plus_ev_batteries_mt()))


@cache('run')
def labor_share_cte_quest():
    """
    Real Name: b'labor share cte quest'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def initial_minerals_extraction_rest():
    """
    Real Name: b'initial minerals extraction rest'
    Original Eqn: b'0.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,19393200.0,0.0,18500.0,0.0,0.0,11999960.0,9992170.0,0.0,0.0,0.0,0.0,0.0,0.0,35.0,0.0,0.0,0.0,239.0,999928230.0,0.0,0.0,0.0,0.0,6300.0,0.0,2640000.0,7579970.0,0.0,0.0,126000.0,0.0,0.0,0.0,1039680.0,0.0,0.0,0.0,2710000.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14600.0,0.0,188970.0,0.0,0.0,0.0,0.0,3814000.0,0.0,33700.0,0.0,7119990.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('step')
def minerals_extraction_projection_rest_cte_rr():
    """
    Real Name: b'minerals extraction projection rest cte rr'
    Original Eqn: b'integ ( variation minerals extraction rest[materials], initial minerals extraction rest[materials]*mt per tonne)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_minerals_extraction_projection_rest_cte_rr()


@cache('step')
def materials_to_extract_rest_mt():
    """
    Real Name: b'materials to extract rest mt'
    Original Eqn: b'minerals extraction projection rest with rr[materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return minerals_extraction_projection_rest_with_rr()


@cache('step')
def minerals_extraction_projection_rest_with_rr():
    """
    Real Name: b'minerals extraction projection rest with rr'
    Original Eqn: b'minerals consumption estimation rest cte rr[materials]*(1-recycling rates minerals rest[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return minerals_consumption_estimation_rest_cte_rr() * (1 - recycling_rates_minerals_rest())


@cache('step')
def minerals_consumption_estimation_rest_cte_rr():
    """
    Real Name: b'minerals consumption estimation rest cte rr'
    Original Eqn: b'minerals extraction projection rest cte rr[materials]/(1-current recycling rates minerals[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return minerals_extraction_projection_rest_cte_rr() / (1 - current_recycling_rates_minerals())


@cache('step')
def total_materials_required_for_res_elec_plus_ev_batteries_mt():
    """
    Real Name: b'total materials required for res elec plus ev batteries mt'
    Original Eqn: b'total materials required for ev batteries[materials]+total materials required for res elec mt[materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_materials_required_for_ev_batteries() + total_materials_required_for_res_elec_mt()


@cache('step')
def variation_non_energy_use():
    """
    Real Name: b'variation non energy use'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0,
        if_then_else(non_energy_use_demand_by_final_fuel_ej().loc['liquids'].values > 0.01,
                               0.461414 * (gdp() - gdp_delayed_1yr()), 0),
        if_then_else(non_energy_use_demand_by_final_fuel_ej().loc['gases'].values > 0.01,
                               0.123925 * (gdp() - gdp_delayed_1yr()), 0),
        if_then_else(non_energy_use_demand_by_final_fuel_ej().loc['solids'].values > 0.01,
                               0.0797511 * (gdp() - gdp_delayed_1yr()), 0)],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def number_2w():
    """
    Real Name: b'number 2w'
    Original Eqn: b'number vehicles h[liq 2wheels]+number vehicles h[elec 2wheels]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return number_vehicles_h().loc['liq 2wheels'].values + number_vehicles_h().loc['elec 2wheels'].values


@cache('step')
def number_4w():
    """
    Real Name: b'number 4w'
    Original Eqn: b'number vehicles h[liq 4wheels]+number vehicles h[hib 4wheels]+number vehicles h[elec 4wheels]+number vehicles h[gas 4wheels]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return number_vehicles_h().loc['liq 4wheels'].values + number_vehicles_h().loc['hib 4wheels'].values + number_vehicles_h().loc['elec 4wheels'].values + number_vehicles_h().loc['gas 4wheels'].values


@cache('step')
def number_all():
    """
    Real Name: b'number all'
    Original Eqn: b'number 2w+number 4w'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return number_2w() + number_4w()


@cache('step')
def sum_4w_shares():
    """
    Real Name: b'sum 4w shares'
    Original Eqn: b'percents h vehicles[hib 4wheels]+percents h vehicles[elec 4wheels]+percents h vehicles[gas 4wheels]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return percents_h_vehicles().loc['hib 4wheels'].values + percents_h_vehicles().loc['elec 4wheels'].values + percents_h_vehicles().loc['gas 4wheels'].values


@cache('step')
def share_available_4w():
    """
    Real Name: b'share available 4w'
    Original Eqn: b'(max percent 4 wheels-sum 4w shares)/max percent 4 wheels'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (max_percent_4_wheels() - sum_4w_shares()) / max_percent_4_wheels()


@cache('step')
def percent_4w():
    """
    Real Name: b'percent 4w'
    Original Eqn: b'percents h vehicles[liq 4wheels]+percents h vehicles[hib 4wheels]+percents h vehicles[elec 4wheels]+percents h vehicles[gas 4wheels]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return percents_h_vehicles().loc['liq 4wheels'].values + percents_h_vehicles().loc['hib 4wheels'].values + percents_h_vehicles().loc['elec 4wheels'].values + percents_h_vehicles().loc['gas 4wheels'].values


@cache('run')
def saving_ratio_2we():
    """
    Real Name: b'saving ratio 2we'
    Original Eqn: b'0.17'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.17


@cache('step')
def percent_all():
    """
    Real Name: b'percent all'
    Original Eqn: b'percent 2w+percent 4w'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return percent_2w() + percent_4w()


@cache('step')
def percent_2w():
    """
    Real Name: b'percent 2w'
    Original Eqn: b'percents h vehicles[liq 2wheels]+percents h vehicles[elec 2wheels]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return percents_h_vehicles().loc['liq 2wheels'].values + percents_h_vehicles().loc['elec 2wheels'].values


@cache('step')
def share_fed_coal_vs_nre_heat_nc():
    """
    Real Name: b'share fed coal vs nre heat nc'
    Original Eqn: b'zidz(fed coal for heat nc , fed nre for heat nc )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(fed_coal_for_heat_nc(), fed_nre_for_heat_nc())


@cache('step')
def share_fed_gas_vs_nre_heat_nc():
    """
    Real Name: b'share fed gas vs nre heat nc'
    Original Eqn: b'zidz(fed natx gas for heat nc , fed nre for heat nc )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(fed_natx_gas_for_heat_nc(), fed_nre_for_heat_nc())


@cache('step')
def fed_nre_for_heat_nc():
    """
    Real Name: b'fed nre for heat nc'
    Original Eqn: b'fed coal for heat nc+fed natx gas for heat nc+fed oil for heat nc'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_coal_for_heat_nc() + fed_natx_gas_for_heat_nc() + fed_oil_for_heat_nc()


@cache('step')
def share_fed_liquids_vs_nre_heat_nc():
    """
    Real Name: b'share fed liquids vs nre heat nc'
    Original Eqn: b'zidz(fed oil for heat nc , fed nre for heat nc )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(fed_oil_for_heat_nc(), fed_nre_for_heat_nc())


@cache('step')
def required_fed_by_fuel():
    """
    Real Name: b'required fed by fuel'
    Original Eqn: b'required fed by fuel before heat correction[electricity]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        required_fed_by_fuel_before_heat_correction().loc['electricity'].values,
        required_fed_by_fuel_before_heat_correction().loc['heat'].values *
        (1 + ratio_fed_for_heat_nc_vs_fed_for_heat_com()),
        required_fed_by_fuel_before_heat_correction().loc['liquids'].values * (1 - share_feh_over_fed_by_final_fuel().loc['liquids'].values),
        required_fed_by_fuel_before_heat_correction().loc['gases'].values * (1 - share_feh_over_fed_by_final_fuel().loc['gases'].values),
        required_fed_by_fuel_before_heat_correction().loc['solids'].values * (1 - share_feh_over_fed_by_final_fuel().loc['solids'].values)],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def bioe_gen_land_marg_available():
    """
    Real Name: b'bioe gen land marg available'
    Original Eqn: b'(max peavail potential biofuels marginal lands-potential peavail biofuels land marg ej)/max peavail potential biofuels marginal lands'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (max_peavail_potential_biofuels_marginal_lands() -
            potential_peavail_biofuels_land_marg_ej()
            ) / max_peavail_potential_biofuels_marginal_lands()


@cache('step')
def potential_peavail_cellulosic_biofuel_ej():
    """
    Real Name: b'potential peavail cellulosic biofuel ej'
    Original Eqn: b'potential pe cellulosic biofuel ej*conv efficiency from npp to biofuels'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return potential_pe_cellulosic_biofuel_ej() * conv_efficiency_from_npp_to_biofuels()


@cache('step')
def potential_peavail_total_biofuels():
    """
    Real Name: b'potential peavail total biofuels'
    Original Eqn: b'potential peavail biofuels 2gen land compet ej+potential peavail biofuels prod 3gen ej+potential peavail biofuels land marg ej+potential peavail cellulosic biofuel ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return potential_peavail_biofuels_2gen_land_compet_ej(
    ) + potential_peavail_biofuels_prod_3gen_ej() + potential_peavail_biofuels_land_marg_ej(
    ) + potential_peavail_cellulosic_biofuel_ej()


@cache('step')
def biofuels_3gen_land_compet_available():
    """
    Real Name: b'biofuels 3gen land compet available'
    Original Eqn: b'(max land compet biofuels 2gen-land compet biofuels 3gen mha)/ max land compet biofuels 2gen'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (max_land_compet_biofuels_2gen() - land_compet_biofuels_3gen_mha()) / max_land_compet_biofuels_2gen()


@cache('step')
def fes_total_biofuels_production_ej():
    """
    Real Name: b'fes total biofuels production ej'
    Original Eqn: b'+peavail biofuels 2gen land compet ej+peavail biofuels 3gen land compet ej+peavail biofuels land marg ej+peavail cellulosic biofuel ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return peavail_biofuels_2gen_land_compet_ej() + peavail_biofuels_3gen_land_compet_ej(
    ) + peavail_biofuels_land_marg_ej() + peavail_cellulosic_biofuel_ej()


@cache('step')
def fes_total_biofuels_production_ej_2():
    """
    Real Name: b'fes total biofuels production ej 2'
    Original Eqn: b'min(ped liquids ej, potential peavail total biofuels)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(ped_liquids_ej(), potential_peavail_total_biofuels())


@cache('step')
def fes_total_biofuels_production_mb_div_d():
    """
    Real Name: b'fes total biofuels production mb div d'
    Original Eqn: b'fes total biofuels production ej*mb div d per ej div year'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fes_total_biofuels_production_ej() * mb_div_d_per_ej_div_year()


@cache('step')
def peavail_biofuels_2gen_land_compet_ej():
    """
    Real Name: b'peavail biofuels 2gen land compet ej'
    Original Eqn: b'potential peavail biofuels 2gen land compet ej*(1-share biofuels overcapacity)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return potential_peavail_biofuels_2gen_land_compet_ej() * (1 - share_biofuels_overcapacity())


@cache('step')
def peavail_biofuels_3gen_land_compet_ej():
    """
    Real Name: b'peavail biofuels 3gen land compet ej'
    Original Eqn: b'potential peavail biofuels prod 3gen ej*(1-share biofuels overcapacity)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return potential_peavail_biofuels_prod_3gen_ej() * (1 - share_biofuels_overcapacity())


@cache('step')
def peavail_biofuels_land_marg_ej():
    """
    Real Name: b'peavail biofuels land marg ej'
    Original Eqn: b'potential peavail biofuels land marg ej*(1-share biofuels overcapacity)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return potential_peavail_biofuels_land_marg_ej() * (1 - share_biofuels_overcapacity())


@cache('step')
def pe_biofuels_land_marg_ej():
    """
    Real Name: b'pe biofuels land marg ej'
    Original Eqn: b'peavail biofuels land marg ej/conv efficiency from npp to biofuels'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return peavail_biofuels_land_marg_ej() / conv_efficiency_from_npp_to_biofuels()


@cache('step')
def pe_biofuels_prod_x2gen_plus_x3gen_ej():
    """
    Real Name: b'pe biofuels prod x2gen plus x3gen ej'
    Original Eqn: b'(peavail biofuels 2gen land compet ej+peavail biofuels 3gen land compet ej)/conv efficiency from npp to biofuels'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (peavail_biofuels_2gen_land_compet_ej() +
            peavail_biofuels_3gen_land_compet_ej()) / conv_efficiency_from_npp_to_biofuels()


@cache('step')
def pe_biomass_for_biofuels_production_ej():
    """
    Real Name: b'pe biomass for biofuels production ej'
    Original Eqn: b'pe biofuels land marg ej+pe cellulosic biofuel ej+pe biofuels prod x2gen plus x3gen ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_biofuels_land_marg_ej() + pe_cellulosic_biofuel_ej(
    ) + pe_biofuels_prod_x2gen_plus_x3gen_ej()


@cache('step')
def pe_cellulosic_biofuel_ej():
    """
    Real Name: b'pe cellulosic biofuel ej'
    Original Eqn: b'potential pe cellulosic biofuel ej*(1-share biofuels overcapacity)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return potential_pe_cellulosic_biofuel_ej() * (1 - share_biofuels_overcapacity())


@cache('step')
def max_peavail_biofuels_potential():
    """
    Real Name: b'max peavail biofuels potential'
    Original Eqn: b'max peavail potential bioe residues for cellulosic biofuels+max peavail potential biofuels 2 x3gen+max peavail potential biofuels marginal lands'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_peavail_potential_bioe_residues_for_cellulosic_biofuels(
    ) + max_peavail_potential_biofuels_2_x3gen() + max_peavail_potential_biofuels_marginal_lands()


@cache('run')
def start_year_biofuels_land_marg():
    """
    Real Name: b'start year biofuels land marg'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('step')
def land_required_biofuels_land_marg():
    """
    Real Name: b'land required biofuels land marg'
    Original Eqn: b'potential peavail biofuels land marg ej*land occupation ratio biofuels marg land /conv efficiency from npp to biofuels'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return potential_peavail_biofuels_land_marg_ej() * land_occupation_ratio_biofuels_marg_land(
    ) / conv_efficiency_from_npp_to_biofuels()


@cache('run')
def max_peavail_potential_biofuels_marginal_lands():
    """
    Real Name: b'max peavail potential biofuels marginal lands'
    Original Eqn: b'bioe potential npp marginal lands*conv efficiency from npp to biofuels'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return bioe_potential_npp_marginal_lands() * conv_efficiency_from_npp_to_biofuels()


@cache('step')
def share_biofuels_overcapacity():
    """
    Real Name: b'share biofuels overcapacity'
    Original Eqn: b'zidz((potential peavail total biofuels-fes total biofuels production ej 2) , potential peavail total biofuels )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(
        (potential_peavail_total_biofuels() - fes_total_biofuels_production_ej_2()),
        potential_peavail_total_biofuels())


@cache('step')
def total_land_requirements_renew_mha():
    """
    Real Name: b'total land requirements renew mha'
    Original Eqn: b'surface solar pv mha+surface csp mha+surface hydro mha+land compet required dedicated crops for biofuels +land required biofuels land marg+surface onshore wind mha*0'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return surface_solar_pv_mha() + surface_csp_mha() + surface_hydro_mha(
    ) + land_compet_required_dedicated_crops_for_biofuels() + land_required_biofuels_land_marg(
    ) + surface_onshore_wind_mha() * 0


@cache('run')
def land_occupation_ratio_biofuels_marg_land():
    """
    Real Name: b'land occupation ratio biofuels marg land'
    Original Eqn: b'14.3'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 14.3


@cache('step')
def peavail_cellulosic_biofuel_ej():
    """
    Real Name: b'peavail cellulosic biofuel ej'
    Original Eqn: b'pe cellulosic biofuel ej*efficiency bioe residues to cellulosic liquids'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_cellulosic_biofuel_ej() * efficiency_bioe_residues_to_cellulosic_liquids()


@cache('step')
def potential_peavail_biofuels_land_marg_ej():
    """
    Real Name: b'potential peavail biofuels land marg ej'
    Original Eqn: b'integ ( new biofuels land marg, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_potential_peavail_biofuels_land_marg_ej()


@cache('run')
def bioe_potential_npp_marginal_lands():
    """
    Real Name: b'bioe potential npp marginal lands'
    Original Eqn: b'27'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 27


@cache('step')
def additional_pe_production_of_bioenergy_for_biofuels():
    """
    Real Name: b'additional pe production of bioenergy for biofuels'
    Original Eqn: b'pe biomass for biofuels production ej-oil liquids saved by biofuels ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_biomass_for_biofuels_production_ej() - oil_liquids_saved_by_biofuels_ej()


@cache('step')
def oil_liquids_saved_by_biofuels_ej():
    """
    Real Name: b'oil liquids saved by biofuels ej'
    Original Eqn: b'fes total biofuels production ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fes_total_biofuels_production_ej()


@cache('run')
def efficiency_bioe_residues_to_cellulosic_liquids():
    """
    Real Name: b'efficiency bioe residues to cellulosic liquids'
    Original Eqn: b'conv efficiency from npp to biofuels'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return conv_efficiency_from_npp_to_biofuels()


@cache('run')
def conv_efficiency_from_npp_to_biofuels():
    """
    Real Name: b'conv efficiency from npp to biofuels'
    Original Eqn: b'0.15'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.15


@cache('step')
def pes_heat_res():
    """
    Real Name: b'pes heat res'
    Original Eqn: b'pes tot biogas for heat com+sum(pes res for heat com by techn)+sum(pes res for heat nc by techn )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_tot_biogas_for_heat_com() + sum(pes_res_for_heat_com_by_techn()) + sum(pes_res_for_heat_nc_by_techn())


@cache('step')
def ped_nre_liquids():
    """
    Real Name: b'ped nre liquids'
    Original Eqn: b'max(0, ped liquids ej-fes total biofuels production ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, ped_liquids_ej() - fes_total_biofuels_production_ej())


@cache('step')
def potential_fes_ctl_plus_gtl_ej():
    """
    Real Name: b'potential fes ctl plus gtl ej'
    Original Eqn: b'ctl potential production+gtl potential production'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ctl_potential_production() + gtl_potential_production()


@cache('step')
def tfec_res_delayed_1yr():
    """
    Real Name: b'tfec res delayed 1yr'
    Original Eqn: b'delay fixed ( tfec res ej, 1, 43)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_tfec_res_ej_round1__time_step___time_step_43_1__time_step()


@cache('step')
def pe_supply_from_res_non_elec_without_trad_bioe_ej():
    """
    Real Name: b'pe supply from res non elec without trad bioe ej'
    Original Eqn: b'pes tot res for heat+fes total biofuels production ej+pes biogas for tfc'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_tot_res_for_heat() + fes_total_biofuels_production_ej() + pes_biogas_for_tfc()


@cache('step')
def pes_gases():
    """
    Real Name: b'pes gases'
    Original Eqn: b'pes natx gas+pes biogas for tfc'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_natx_gas() + pes_biogas_for_tfc()


@cache('step')
def fes_ctl_plus_gtl_ej():
    """
    Real Name: b'fes ctl plus gtl ej'
    Original Eqn: b'min(ped nre liquids, potential fes ctl plus gtl ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(ped_nre_liquids(), potential_fes_ctl_plus_gtl_ej())


@cache('run')
def activate_elf_all_scen_quest():
    """
    Real Name: b'activate elf all scen quest'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def tpes_res_delayed_1yr():
    """
    Real Name: b'tpes res delayed 1yr'
    Original Eqn: b'delay fixed ( tpe from res ej, 1, 48.03)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_tpe_from_res_ej_round1__time_step___time_step_4803_1__time_step()


@cache('step')
def annual_tpes_res_growth_rate():
    """
    Real Name: b'annual tpes res growth rate'
    Original Eqn: b'-1+tpe from res ej/tpes res delayed 1yr'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return -1 + tpe_from_res_ej() / tpes_res_delayed_1yr()


@cache('step')
def ped_natx_gas_ej():
    """
    Real Name: b'ped natx gas ej'
    Original Eqn: b'max(0, ped gases-pes biogas for tfc)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, ped_gases() - pes_biogas_for_tfc())


@cache('step')
def annual_share_res_vs_tfec_growth_rate():
    """
    Real Name: b'annual share res vs tfec growth rate'
    Original Eqn: b'-1+share res vs tfec/share res vs tfec delayed 1yr'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return -1 + share_res_vs_tfec() / share_res_vs_tfec_delayed_1yr()


@cache('step')
def annual_share_res_vs_tpes_growth_rate():
    """
    Real Name: b'annual share res vs tpes growth rate'
    Original Eqn: b'-1+share res vs tpes/share res vs tpes delayed 1yr'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return -1 + share_res_vs_tpes() / share_res_vs_tpes_delayed_1yr()


@cache('step')
def share_res_vs_tpes_delayed_1yr():
    """
    Real Name: b'share res vs tpes delayed 1yr'
    Original Eqn: b'delay fixed ( share res vs tpes, 1, 0.123)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_share_res_vs_tpes_round1__time_step___time_step_0123_1__time_step()


@cache('step')
def gtl_production():
    """
    Real Name: b'gtl production'
    Original Eqn: b'gtl potential production*(1-share ctl plus gtl overcapacity)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return gtl_potential_production() * (1 - share_ctl_plus_gtl_overcapacity())


@cache('step')
def pes_biogas_for_tfc():
    """
    Real Name: b'pes biogas for tfc'
    Original Eqn: b'min(ped gases, potential pes biogas for tfc)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(ped_gases(), potential_pes_biogas_for_tfc())


@cache('step')
def share_ctl_plus_gtl_overcapacity():
    """
    Real Name: b'share ctl plus gtl overcapacity'
    Original Eqn: b'zidz((potential fes ctl plus gtl ej-fes ctl plus gtl ej) , potential fes ctl plus gtl ej )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz((potential_fes_ctl_plus_gtl_ej() - fes_ctl_plus_gtl_ej()), potential_fes_ctl_plus_gtl_ej())


@cache('step')
def share_res_vs_tfec_delayed_1yr():
    """
    Real Name: b'share res vs tfec delayed 1yr'
    Original Eqn: b'delay fixed ( share res vs tfec, 1, 0.1614)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_share_res_vs_tfec_round1__time_step___time_step_01614_1__time_step()


@cache('step')
def share_e_losses_cc():
    """
    Real Name: b'share e losses cc'
    Original Eqn: b'if then else(Time<2015, 0, if then else(activate elf all scen quest=0, 0, if then else(activate elf by scen quest=0, 0, share e losses cc from x2015)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, 0,
        if_then_else(
            activate_elf_all_scen_quest() == 0, 0,
            if_then_else(activate_elf_by_scen_quest() == 0, 0,
                                   share_e_losses_cc_from_x2015())))


@cache('step')
def ped_natx_gas_for_gtl_ej():
    """
    Real Name: b'ped natx gas for gtl ej'
    Original Eqn: b'gtl production/gtl efficiency'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return gtl_production() / gtl_efficiency()


@cache('step')
def ped_coal_for_ctl_ej():
    """
    Real Name: b'ped coal for ctl ej'
    Original Eqn: b'ctl production/ctl efficiency'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ctl_production() / ctl_efficiency()


@cache('step')
def annual_tfec_res_growth_rate():
    """
    Real Name: b'annual tfec res growth rate'
    Original Eqn: b'-1+tfec res ej/tfec res delayed 1yr'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return -1 + tfec_res_ej() / tfec_res_delayed_1yr()


@cache('step')
def ped_total_oil_ej():
    """
    Real Name: b'ped total oil ej'
    Original Eqn: b'max(0,ped nre liquids-fes ctl plus gtl ej-oil refinery gains ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, ped_nre_liquids() - fes_ctl_plus_gtl_ej() - oil_refinery_gains_ej())


@cache('step')
def ctl_production():
    """
    Real Name: b'ctl production'
    Original Eqn: b'ctl potential production*(1-share ctl plus gtl overcapacity)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ctl_potential_production() * (1 - share_ctl_plus_gtl_overcapacity())


@cache('step')
def ch4_emissions_coal_without_ctl():
    """
    Real Name: b'ch4 emissions coal without ctl'
    Original Eqn: b'extraction coal emissions relevant ej*gch4 per mj coal*mj per ej/g per mt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_coal_emissions_relevant_ej() * gch4_per_mj_coal() * mj_per_ej() / g_per_mt()


@cache('step')
def pes_tot_res_for_heat():
    """
    Real Name: b'pes tot res for heat'
    Original Eqn: b'sum(pes res for heat com by techn)+sum(pes res for heat nc by techn)+pes tot biogas for heat com'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(pes_res_for_heat_com_by_techn()) + sum(pes_res_for_heat_nc_by_techn()) + pes_tot_biogas_for_heat_com()


@cache('step')
def total_fe_real_supply_res_for_heat_nc_ej():
    """
    Real Name: b'total fe real supply res for heat nc ej'
    Original Eqn: b'sum(fe real generation res heat nc ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(fe_real_generation_res_heat_nc_ej())


@cache('step')
def real_extraction_conv_oil_emissions_relevant_ej():
    """
    Real Name: b'real extraction conv oil emissions relevant ej'
    Original Eqn: b'max(0, real extraction conv oil ej-(non energy use demand by final fuel ej[liquids])*share conv vs total oil extraction )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        real_extraction_conv_oil_ej() -
        (non_energy_use_demand_by_final_fuel_ej().loc['liquids'].values) * share_conv_vs_total_oil_extraction())


@cache('step')
def co2_emissions_coal_without_ctl():
    """
    Real Name: b'co2 emissions coal without ctl'
    Original Eqn: b'extraction coal emissions relevant ej*gco2 per mj coal*mj per ej/g per gt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_coal_emissions_relevant_ej() * gco2_per_mj_coal() * mj_per_ej() / g_per_gt()


@cache('step')
def real_extraction_conv_gas_emissions_relevant_ej():
    """
    Real Name: b'real extraction conv gas emissions relevant ej'
    Original Eqn: b'max(0, real extraction conv gas ej-(ped natx gas for gtl ej+ non energy use demand by final fuel ej[gases])*share conv vs total gas extraction)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        real_extraction_conv_gas_ej() -
        (ped_natx_gas_for_gtl_ej() + non_energy_use_demand_by_final_fuel_ej().loc['gases'].values) *
        share_conv_vs_total_gas_extraction())


@cache('step')
def pes_res_for_heat_nc_by_techn():
    """
    Real Name: b'pes res for heat nc by techn'
    Original Eqn: b'fe real generation res heat nc ej[geot heat]/efficiency res heat[geot heat]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        fe_real_generation_res_heat_nc_ej().loc['solar heat'].values * efficiency_solar_panels_for_heat() /
        efficiency_res_heat().loc['solar heat'].values,
        fe_real_generation_res_heat_nc_ej().loc['geot heat'].values / efficiency_res_heat().loc['geot heat'].values,
        fe_real_generation_res_heat_nc_ej().loc['solid bioe heat'].values / efficiency_res_heat().loc['solid bioe heat'].values],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('step')
def fes_nre_for_heat():
    """
    Real Name: b'fes nre for heat'
    Original Eqn: b'fes heat com fossil fuels chp plants ej+fes heat from coal+fes heat from natx gas+ fes heat from oil+fes heat com nuclear chp plants ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fes_heat_com_fossil_fuels_chp_plants_ej() + fes_heat_from_coal(
    ) + fes_heat_from_natx_gas() + fes_heat_from_oil() + fes_heat_com_nuclear_chp_plants_ej()


@cache('step')
def installed_capacity_res_heat_nc_tw():
    """
    Real Name: b'installed capacity res heat nc tw'
    Original Eqn: b'integ ( new res capacity for heat nc tw[res heat]+replacement res for heat nc tw[res heat]-wear res capacity for heat nc tw[res heat], initial value res for heat nc[res heat])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_installed_capacity_res_heat_nc_tw()


@cache('step')
def fed_heat_com_plants_fossil_fuels_ej():
    """
    Real Name: b'fed heat com plants fossil fuels ej'
    Original Eqn: b'max(fed heat com nre ej-fes heat com fossil fuels chp plants ej-fes heat com nuclear chp plants ej,0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        fed_heat_com_nre_ej() - fes_heat_com_fossil_fuels_chp_plants_ej() -
        fes_heat_com_nuclear_chp_plants_ej(), 0)


@cache('step')
def real_extraction_unconv_gas_emissions_relevant_ej():
    """
    Real Name: b'real extraction unconv gas emissions relevant ej'
    Original Eqn: b'max(0, real extraction unconv gas ej-(ped natx gas for gtl ej+non energy use demand by final fuel ej[gases])*(1-share conv vs total gas extraction))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        real_extraction_unconv_gas_ej() -
        (ped_natx_gas_for_gtl_ej() + non_energy_use_demand_by_final_fuel_ej().loc['gases'].values) *
        (1 - share_conv_vs_total_gas_extraction()))


@cache('step')
def real_extraction_unconv_oil_emissions_relevant_ej():
    """
    Real Name: b'real extraction unconv oil emissions relevant ej'
    Original Eqn: b'max(0, real extraction unconv oil ej-(non energy use demand by final fuel ej[liquids])*(1-share conv vs total oil extraction))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        real_extraction_unconv_oil_ej() - (non_energy_use_demand_by_final_fuel_ej().loc['liquids'].values) *
        (1 - share_conv_vs_total_oil_extraction()))


@cache('step')
def available_pe_potential_solid_bioe_for_elec_ej():
    """
    Real Name: b'available pe potential solid bioe for elec ej'
    Original Eqn: b'max(0, total pe solid bioe potential heat plus elec ej-pes res for heat com by techn[solid bioe heat]-pes res for heat nc by techn[solid bioe heat])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        total_pe_solid_bioe_potential_heat_plus_elec_ej() - pes_res_for_heat_com_by_techn().loc['solid bioe heat'].values -
        pes_res_for_heat_nc_by_techn().loc['solid bioe heat'].values)


@cache('step')
def remaining_potential_res_for_heat():
    """
    Real Name: b'remaining potential res for heat'
    Original Eqn: b'zidz((max(0, max fe potential res for heat[res heat]-potential fes res for heat com ej[res heat]-potential fes res for heat nc ej[res heat])) , max fe potential res for heat[res heat] )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz((np.maximum(
        0,
        max_fe_potential_res_for_heat() - potential_fes_res_for_heat_com_ej() -
        potential_fes_res_for_heat_nc_ej())), max_fe_potential_res_for_heat())


@cache('step')
def extraction_coal_emissions_relevant_ej():
    """
    Real Name: b'extraction coal emissions relevant ej'
    Original Eqn: b'max(0, extraction coal without ctl ej-non energy use demand by final fuel ej[solids])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0,
                      extraction_coal_without_ctl_ej() - non_energy_use_demand_by_final_fuel_ej().loc['solids'].values)


@cache('step')
def wear_res_capacity_for_heat_nc_tw():
    """
    Real Name: b'wear res capacity for heat nc tw'
    Original Eqn: b'installed capacity res heat nc tw[res heat]/life time res for heat[res heat]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return installed_capacity_res_heat_nc_tw() / life_time_res_for_heat()


@cache('step')
def fe_real_generation_res_heat_nc_ej():
    """
    Real Name: b'fe real generation res heat nc ej'
    Original Eqn: b'potential fes res for heat nc ej[res heat]*(1-res heat nc tot overcapacity)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return potential_fes_res_for_heat_nc_ej() * (1 - res_heat_nc_tot_overcapacity())


@cache('step')
def total_fe_real_supply_res_for_heat_com_ej():
    """
    Real Name: b'total fe real supply res for heat com ej'
    Original Eqn: b'sum(fe real generation res heat com ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(fe_real_generation_res_heat_com_ej())


@cache('run')
def past_res_growth_for_heat_com_x0():
    """
    Real Name: b'past res growth for heat com x0'
    Original Eqn: b'0.27712259634619696'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.2771226,0.03571556,0.06278667],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('run')
def efficiency_conversion_bioe_plants_to_heat_0():
    """
    Real Name: b'efficiency conversion bioe plants to heat 0'
    Original Eqn: b'0.55'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.55


@cache('step')
def fed_heat_com_after_priorities_ej():
    """
    Real Name: b'fed heat com after priorities ej'
    Original Eqn: b'max(0, total fed heat com ej-fes heat com from waste ej-fes heat com from biogas ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        total_fed_heat_com_ej() - fes_heat_com_from_waste_ej() - fes_heat_com_from_biogas_ej())


@cache('step')
def fes_heat_from_biow():
    """
    Real Name: b'fes heat from biow'
    Original Eqn: b'fe real supply res for heat com tot ej+fe real supply res for heat nc tot ej+fes heat com from biogas ej+fes heat com from waste ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fe_real_supply_res_for_heat_com_tot_ej() + fe_real_supply_res_for_heat_nc_tot_ej(
    ) + fes_heat_com_from_biogas_ej() + fes_heat_com_from_waste_ej()


@cache('step')
def abundance_res_heat_nc():
    """
    Real Name: b'abundance res heat nc'
    Original Eqn: b'if then else(total fed heat nc ej=0,0, zidz((total fed heat nc ej-fe real supply res for heat nc tot ej) , total fed heat nc ej ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        total_fed_heat_nc_ej() < equality_threshold(), 0,
        zidz((total_fed_heat_nc_ej() - fe_real_supply_res_for_heat_nc_tot_ej()),
                       total_fed_heat_nc_ej()))


@cache('run')
def efficiency_geothermal_for_heat_0():
    """
    Real Name: b'efficiency geothermal for heat 0'
    Original Eqn: b'0.6960561017716173'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.6960561017716173


@cache('step')
def fes_heat_com_nuclear_chp_plants_ej():
    """
    Real Name: b'fes heat com nuclear chp plants ej'
    Original Eqn: b'min(potential fes heat com nuclear chp plants ej,fed heat com nre ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(potential_fes_heat_com_nuclear_chp_plants_ej(), fed_heat_com_nre_ej())


@cache('step')
def fe_real_supply_res_for_heat_nc_tot_ej():
    """
    Real Name: b'fe real supply res for heat nc tot ej'
    Original Eqn: b'min(max(total fed heat nc ej, 0), potential fes tot res for heat nc ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(np.maximum(total_fed_heat_nc_ej(), 0), potential_fes_tot_res_for_heat_nc_ej())


@cache('run')
def initial_value_res_for_heat_nc():
    """
    Real Name: b'initial value res for heat nc'
    Original Eqn: b'0.03252055114522492'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.03252055,0.01718051,0.37315399],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('run')
def past_res_growth_for_heat_nc():
    """
    Real Name: b'past res growth for heat nc'
    Original Eqn: b'0.14412798177622532'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.14412798,0.077,0.03534992],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('run')
def p_solid_bioe_for_heat_0():
    """
    Real Name: b'p solid bioe for heat 0'
    Original Eqn: b'0.115'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.115


@cache('step')
def fed_heat_fossil_fuels_chp_plants_ej():
    """
    Real Name: b'fed heat fossil fuels chp plants ej'
    Original Eqn: b'max(fed heat com by nre chp plants ej-fes heat com nuclear chp plants ej,0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(fed_heat_com_by_nre_chp_plants_ej() - fes_heat_com_nuclear_chp_plants_ej(), 0)


@cache('run')
def replacement_res_for_heat_nc():
    """
    Real Name: b'replacement res for heat nc'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[1.0,1.0,1.0],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('run')
def efficiency_solar_panels_for_heat_0():
    """
    Real Name: b'efficiency solar panels for heat 0'
    Original Eqn: b'0.095'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.095


@cache('run')
def p_res_for_heat_0():
    """
    Real Name: b'p res for heat 0'
    Original Eqn: b'p solar for heat 0'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        p_solar_for_heat_0(),
        p_geothermal_for_heat_0(),
        p_solid_bioe_for_heat_0()],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('run')
def p_solar_for_heat_0():
    """
    Real Name: b'p solar for heat 0'
    Original Eqn: b'0.127'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.127


@cache('step')
def abundance_res_heat_com():
    """
    Real Name: b'abundance res heat com'
    Original Eqn: b'if then else(fed heat com after priorities ej=0,0, zidz((fed heat com after priorities ej-fe real supply res for heat com tot ej) , fed heat com after priorities ej ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        fed_heat_com_after_priorities_ej() < equality_threshold(), 0,
        zidz(
            (fed_heat_com_after_priorities_ej() - fe_real_supply_res_for_heat_com_tot_ej()),
            fed_heat_com_after_priorities_ej()))


@cache('step')
def abundance_res_heat_nc2():
    """
    Real Name: b'abundance res heat nc2'
    Original Eqn: b'sqrt (abundance res heat nc)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.sqrt(abundance_res_heat_nc())


@cache('step')
def potential_fes_tot_res_for_heat_nc_ej():
    """
    Real Name: b'potential fes tot res for heat nc ej'
    Original Eqn: b'sum(potential fes res for heat nc ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(potential_fes_res_for_heat_nc_ej())


@cache('run')
def life_time_res_for_heat_0():
    """
    Real Name: b'life time res for heat 0'
    Original Eqn: b'25'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[25.0,25.0,30.0],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('run')
def efficiency_res_heat_0():
    """
    Real Name: b'efficiency res heat 0'
    Original Eqn: b'efficiency solar panels for heat 0*losses solar for heat 0'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        efficiency_solar_panels_for_heat_0() * losses_solar_for_heat_0(),
        efficiency_geothermal_for_heat_0(),
        efficiency_conversion_bioe_plants_to_heat_0()],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('run')
def replacement_res_for_heat_0():
    """
    Real Name: b'replacement res for heat 0'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[1.0,1.0,1.0],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('run')
def p_geothermal_for_heat_0():
    """
    Real Name: b'p geothermal for heat 0'
    Original Eqn: b'0.076'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.076


@cache('step')
def fes_res_for_heat_ej():
    """
    Real Name: b'fes res for heat ej'
    Original Eqn: b'fe real supply res for heat com tot ej+fe real supply res for heat nc tot ej+fes heat com from biogas ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fe_real_supply_res_for_heat_com_tot_ej() + fe_real_supply_res_for_heat_nc_tot_ej() + fes_heat_com_from_biogas_ej()


@cache('step')
def fe_real_supply_res_for_heat_com_tot_ej():
    """
    Real Name: b'fe real supply res for heat com tot ej'
    Original Eqn: b'min(max(fed heat com after priorities ej, 0), potential fes tot res for heat com ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(
        np.maximum(fed_heat_com_after_priorities_ej(), 0), potential_fes_tot_res_for_heat_com_ej())


@cache('run')
def losses_solar_for_heat_0():
    """
    Real Name: b'losses solar for heat 0'
    Original Eqn: b'0.37'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.37


@cache('step')
def res_heat_nc_tot_overcapacity():
    """
    Real Name: b'res heat nc tot overcapacity'
    Original Eqn: b'if then else(potential fes tot res for heat nc ej=0,0, (potential fes tot res for heat nc ej-fe real supply res for heat nc tot ej)/potential fes tot res for heat nc ej )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        potential_fes_tot_res_for_heat_nc_ej() < equality_threshold(), 0,
        (potential_fes_tot_res_for_heat_nc_ej() - fe_real_supply_res_for_heat_nc_tot_ej()) /
        potential_fes_tot_res_for_heat_nc_ej())


@cache('step')
def potential_fes_res_for_heat_nc_ej():
    """
    Real Name: b'potential fes res for heat nc ej'
    Original Eqn: b'potential fes res for heat nc twh[res heat]*ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return potential_fes_res_for_heat_nc_twh() * ej_per_twh()


@cache('step')
def other_solids_required():
    """
    Real Name: b'other solids required'
    Original Eqn: b'transformation ff losses ej[solids]+energy distr losses ff ej[solids]+non energy use demand by final fuel ej[solids]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return transformation_ff_losses_ej().loc['solids'].values + energy_distr_losses_ff_ej().loc['solids'].values + non_energy_use_demand_by_final_fuel_ej().loc['solids'].values


@cache('step')
def other_gases_required():
    """
    Real Name: b'other gases required'
    Original Eqn: b'+transformation ff losses ej[gases]+energy distr losses ff ej[gases]+non energy use demand by final fuel ej[gases]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return transformation_ff_losses_ej().loc['gases'].values + energy_distr_losses_ff_ej().loc['gases'].values + non_energy_use_demand_by_final_fuel_ej().loc['gases'].values


@cache('step')
def transformation_ff_losses_ej():
    """
    Real Name: b'transformation ff losses ej'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    tff_solids = pes_fossil_fuel_extraction_delayed().loc['solids'].values * historic_share_of_transformation_losses_vs_extraction_subsolids(time())

    return xr.DataArray(data=[0.0,0.0,
        pes_fossil_fuel_extraction_delayed().loc['liquids'].values * historic_share_of_transformation_losses_vs_extraction_subliquids(time()),
        tff_solids * ratio_gain_gas_vs_lose_solids_in_tranf_processes(time()),
        tff_solids],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def fes_elec_fossil_fuel_chp_plants_ej():
    """
    Real Name: b'fes elec fossil fuel chp plants ej'
    Original Eqn: b'min(potential fe gen elec fossil fuel chp plants ej, demand elec nre twh*ej per twh)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(potential_fe_gen_elec_fossil_fuel_chp_plants_ej(),
                      demand_elec_nre_twh() * ej_per_twh())


@cache('step')
def total_fe_elec_demand_after_priorities_twh():
    """
    Real Name: b'total fe elec demand after priorities twh'
    Original Eqn: b'max(total fe elec demand twh-fes elec from res with priority twh-fes elec from waste twh,0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        total_fe_elec_demand_twh() - fes_elec_from_res_with_priority_twh() -
        fes_elec_from_waste_twh(), 0)


@cache('step')
def demand_elec_nre_twh():
    """
    Real Name: b'demand elec nre twh'
    Original Eqn: b'max(0, total fe elec demand twh-fe tot generation all res elec twh-fes elec from waste twh)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        total_fe_elec_demand_twh() - fe_tot_generation_all_res_elec_twh() -
        fes_elec_from_waste_twh())


@cache('step')
def non_energy_use_demand_by_final_fuel_ej():
    """
    Real Name: b'non energy use demand by final fuel ej'
    Original Eqn: b'integ ( annual variation non energy use[final sources], initial non energy use[final sources])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_non_energy_use_demand_by_final_fuel_ej()


@cache('step')
def share_solids_for_final_energy():
    """
    Real Name: b'share solids for final energy'
    Original Eqn: b'zidz(required fed solids , (ped solids-ped coal for ctl ej-other solids required) )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(required_fed_solids(),
                          (ped_solids() - ped_coal_for_ctl_ej() - other_solids_required()))


@cache('step')
def real_fe_consumption_gases_ej():
    """
    Real Name: b'real fe consumption gases ej'
    Original Eqn: b'(pes gases-ped natx gas for gtl ej-other gases required)*share gases for final energy'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (pes_gases() - ped_natx_gas_for_gtl_ej() - other_gases_required()) * share_gases_for_final_energy()


@cache('step')
def total_real_non_energy_use_consumption_ej():
    """
    Real Name: b'total real non energy use consumption ej'
    Original Eqn: b'sum(non energy use demand by final fuel ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(non_energy_use_demand_by_final_fuel_ej())


@cache('step')
def share_gases_for_final_energy():
    """
    Real Name: b'share gases for final energy'
    Original Eqn: b'zidz(required fed by gas , (ped gases-ped natx gas for gtl ej-other gases required) )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(required_fed_by_gas(),
                          (ped_gases() - ped_natx_gas_for_gtl_ej() - other_gases_required()))


@cache('step')
def ratio_fed_for_heat_nc_vs_fed_for_heat_com():
    """
    Real Name: b'ratio fed for heat nc vs fed for heat com'
    Original Eqn: b'sum(fed by fuel for heat nc)*zidz(1 , required fed by fuel before heat correction[heat] )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(fed_by_fuel_for_heat_nc()) * zidz(1, required_fed_by_fuel_before_heat_correction().loc['heat'].values)


@cache('step')
def real_fe_consumption_by_fuel_before_heat_correction():
    """
    Real Name: b'real fe consumption by fuel before heat correction'
    Original Eqn: b'real fe consumption by fuel[electricity]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        real_fe_consumption_by_fuel().loc['electricity'].values,
        real_fe_consumption_by_fuel().loc['heat'].values / (1 + ratio_fed_for_heat_nc_vs_fed_for_heat_com()),
        real_fe_consumption_by_fuel().loc['liquids'].values / (1 - share_feh_over_fed_by_final_fuel().loc['liquids'].values),
        real_fe_consumption_by_fuel().loc['gases'].values / (1 - share_feh_over_fed_by_final_fuel().loc['gases'].values),
        real_fe_consumption_by_fuel().loc['solids'].values / (1 - share_feh_over_fed_by_final_fuel().loc['solids'].values)],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def required_tfed_before_heat_dem_corr():
    """
    Real Name: b'required tfed before heat dem corr'
    Original Eqn: b'sum(required fed by fuel before heat correction)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(required_fed_by_fuel_before_heat_correction())


@cache('step')
def cum_materials_to_extract_for_ev_batteries():
    """
    Real Name: b'cum materials to extract for ev batteries'
    Original Eqn: b'integ ( total materials to extract for ev batteries mt[materials], initial cumulated material requirements for ev batteries 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cum_materials_to_extract_for_ev_batteries()


@cache('step')
def share_cum_dem_materials_to_extract_alt_techn_vs_total():
    """
    Real Name: b'share cum dem materials to extract alt techn vs total'
    Original Eqn: b'if then else(total cumulative demand materials to extract from 2015[materials]<=0,0,(cum materials to extract for alt techn from 2015[materials])/total cumulative demand materials to extract from 2015[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(total_cumulative_demand_materials_to_extract_from_2015() <= 0, 0,
                                  zidz(cum_materials_to_extract_for_alt_techn_from_2015(),
                                  total_cumulative_demand_materials_to_extract_from_2015()))


@cache('step')
def total_recycled_materials_for_ev_batteries_mt():
    """
    Real Name: b'total recycled materials for ev batteries mt'
    Original Eqn: b'total materials required for ev batteries[materials]-total materials to extract for ev batteries mt[materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_materials_required_for_ev_batteries(
    ) - total_materials_to_extract_for_ev_batteries_mt()


@cache('step')
def share_res_vs_tfec():
    """
    Real Name: b'share res vs tfec'
    Original Eqn: b'zidz(tfec res ej , real tfec )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(tfec_res_ej(), real_tfec())


@cache('step')
def cum_materials_to_extract_for_alt_techn_from_2015():
    """
    Real Name: b'cum materials to extract for alt techn from 2015'
    Original Eqn: b'cum materials to extract for ev batteries from 2015[materials]+cum materials to extract for res elec from 2015[materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return cum_materials_to_extract_for_ev_batteries_from_2015() + cum_materials_to_extract_for_res_elec_from_2015()


@cache('step')
def total_materials_to_extract_for_ev_batteries_from_2015_mt():
    """
    Real Name: b'total materials to extract for ev batteries from 2015 mt'
    Original Eqn: b'if then else(Time<2015,0,total materials to extract for ev batteries mt[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2015, 0, total_materials_to_extract_for_ev_batteries_mt())


@cache('run')
def materials_per_new_capacity_installed_ev_batteries():
    """
    Real Name: b'materials per new capacity installed ev batteries'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """

    return xr.DataArray(data=[0.0,500.0,0.0,0.0,0.0,0.0,0.0,289.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,34.4,0.0,0.0,1631.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,125.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])



@cache('step')
def total_materials_to_extract_for_ev_batteries_mt():
    """
    Real Name: b'total materials to extract for ev batteries mt'
    Original Eqn: b'total materials required for ev batteries[materials]*(1-recycling rates minerals alt techn[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_materials_required_for_ev_batteries() * (1 - recycling_rates_minerals_alt_techn())


@cache('step')
def total_materials_to_extract_mt():
    """
    Real Name: b'total materials to extract mt'
    Original Eqn: b'materials to extract rest mt[materials]+total materials to extract for res elec mt[materials]+total materials to extract for ev batteries mt[materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return materials_to_extract_rest_mt() + total_materials_to_extract_for_res_elec_mt() + total_materials_to_extract_for_ev_batteries_mt()


@cache('step')
def cum_materials_requirements_for_ev_batteries():
    """
    Real Name: b'cum materials requirements for ev batteries'
    Original Eqn: b'integ ( total materials required for ev batteries[materials], initial cumulated material requirements for ev batteries 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cum_materials_requirements_for_ev_batteries()


@cache('step')
def xstaticx_eroigrid_res_elec():
    """
    Real Name: b'xstaticx eroigrid res elec'
    Original Eqn: b'if then else(xstaticx eroi res elec[res elec]<=0,0,(1-share res elec generation curtailed and stored[res elec]+share res elec generation curtailed and stored[res elec]*rt elec storage efficiency)/(1/xstaticx eroi res elec[res elec]+share res elec generation curtailed and stored[res elec]*rt elec storage efficiency/esoi elec storage))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        xstaticx_eroi_res_elec() <= 0, 0,
        (1 - share_res_elec_generation_curtailed_and_stored() +
         share_res_elec_generation_curtailed_and_stored() * rt_elec_storage_efficiency()) /
        (1 / xstaticx_eroi_res_elec() + share_res_elec_generation_curtailed_and_stored() *
         rt_elec_storage_efficiency() / esoi_elec_storage()))


@cache('run')
def t_per_x():
    """
    Real Name: b't per x'
    Original Eqn: b'1000000000000.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000000000000.0


@cache('step')
def total_materials_required_for_ev_batteries():
    """
    Real Name: b'total materials required for ev batteries'
    Original Eqn: b'materials required for ev batteries mt[materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return materials_required_for_ev_batteries_mt()


@cache('step')
def tfec_from_res_per_capita():
    """
    Real Name: b'tfec from res per capita'
    Original Eqn: b'zidz(tfec res ej*gj per ej , population )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(tfec_res_ej() * gj_per_ej(), population())


@cache('step')
def share_materials_cum_demand_to_extract_vs_reserves_for_res_elec():
    """
    Real Name: b'share materials cum demand to extract vs reserves for res elec'
    Original Eqn: b'if then else(current mineral reserves mt[materials]=0,0,cum materials to extract for alt techn from 2015[materials]/current mineral reserves mt[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        current_mineral_reserves_mt() < equality_threshold(), 0,
        cum_materials_to_extract_for_alt_techn_from_2015() / current_mineral_reserves_mt())


@cache('run')
def rt_storage_efficiency_ev_batteries():
    """
    Real Name: b'rt storage efficiency ev batteries'
    Original Eqn: b'0.9'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.9


@cache('step')
def cum_materials_to_extract_for_ev_batteries_from_2015():
    """
    Real Name: b'cum materials to extract for ev batteries from 2015'
    Original Eqn: b'integ ( total materials to extract for ev batteries from 2015 mt[materials], initial cumulated material requirements for ev batteries 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cum_materials_to_extract_for_ev_batteries_from_2015()


@cache('step')
def total_cumulative_demand_materials_to_extract_from_2015():
    """
    Real Name: b'total cumulative demand materials to extract from 2015'
    Original Eqn: b'cum materials to extract for alt techn from 2015[materials]+cum materials to extract rest from 2015[materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return cum_materials_to_extract_for_alt_techn_from_2015() + cum_materials_to_extract_rest_from_2015()


@cache('run')
def initial_cumulated_material_requirements_for_ev_batteries_1995():
    """
    Real Name: b'initial cumulated material requirements for ev batteries 1995'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0]*58,
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('step')
def share_materials_cum_demand_to_extract_vs_resources_for_res_elec():
    """
    Real Name: b'share materials cum demand to extract vs resources for res elec'
    Original Eqn: b'if then else(current mineral resources mt[materials]=0,0,cum materials to extract for alt techn from 2015[materials]/current mineral resources mt[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        current_mineral_resources_mt() < equality_threshold(), 0,
        cum_materials_to_extract_for_alt_techn_from_2015() / current_mineral_resources_mt())


@cache('step')
def fe_tot_generation_all_res_elec_ej():
    """
    Real Name: b'fe tot generation all res elec ej'
    Original Eqn: b'fe tot generation all res elec twh*ej per twh*(1-share transm and distr elec losses)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fe_tot_generation_all_res_elec_twh() * ej_per_twh() * (1 - share_transm_and_distr_elec_losses())


@cache('step')
def carbon_footprint_tonnesc_div_person():
    """
    Real Name: b'carbon footprint tonnesc div person'
    Original Eqn: b'carbon footprint tco2x div person*c per co2'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return carbon_footprint_tco2x_div_person() * c_per_co2()


@cache('step')
def potential_max_hdi():
    """
    Real Name: b'potential max hdi'
    Original Eqn: b'if then else(net tfec per capita<=0, 0, min(1, 0.1395*ln(net tfec per capita)+0.1508))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(net_tfec_per_capita() <= 0, 0,
                                  np.minimum(1, 0.1395 * np.log(net_tfec_per_capita()) + 0.1508))


@cache('run')
def kw_per_battery_ev():
    """
    Real Name: b'kw per battery ev'
    Original Eqn: b'80'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 80


@cache('step')
def pes_fossil_fuel_extraction_delayed():
    """
    Real Name: b'pes fossil fuel extraction delayed'
    Original Eqn: b'delay fixed ( pes fossil fuel extraction[liquids], time step, 139)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[0.0,0.0,
        _delay_pes_fossil_fuel_extraction_roundtime_step__time_step___time_step_139_time_step__time_step(),
        _delay_pes_fossil_fuel_extraction_roundtime_step__time_step___time_step_79_time_step__time_step(),
        _delay_pes_fossil_fuel_extraction_roundtime_step__time_step___time_step_101_time_step__time_step()],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def energy_distr_losses_ff_ej():
    """
    Real Name: b'energy distr losses ff ej'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0,
        pes_fossil_fuel_extraction_delayed().loc['liquids'].values *
        historic_share_of_losses_vs_extraction_subliquids(time()),
        pes_fossil_fuel_extraction_delayed().loc['gases'].values *
        historic_share_of_losses_vs_extraction_subgases(time()),
        pes_fossil_fuel_extraction_delayed().loc['solids'].values *
        historic_share_of_losses_vs_extraction_subsolids(time())],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def pes_fossil_fuel_extraction():
    """
    Real Name: b'pes fossil fuel extraction'
    Original Eqn: b'pes oil ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[0.0,0.0,
        pes_oil_ej(),
        pes_natx_gas(),
        extraction_coal_ej()],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def share_conv_vs_total_oil_extraction():
    """
    Real Name: b'share conv vs total oil extraction'
    Original Eqn: b'zidz(real extraction conv oil ej , (real extraction conv oil ej+real extraction unconv oil ej) )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(real_extraction_conv_oil_ej(),
                          (real_extraction_conv_oil_ej() + real_extraction_unconv_oil_ej()))


@cache('step')
def pes_natx_gas_without_gtl():
    """
    Real Name: b'pes natx gas without gtl'
    Original Eqn: b'pes natx gas-ped natx gas for gtl ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_natx_gas() - ped_natx_gas_for_gtl_ej()


@cache('step')
def co2_emissions_conv_gas_without_gtl():
    """
    Real Name: b'co2 emissions conv gas without gtl'
    Original Eqn: b'real extraction conv gas emissions relevant ej*gco2 per mj conv gas*mj per ej /g per gt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_extraction_conv_gas_emissions_relevant_ej() * gco2_per_mj_conv_gas() * mj_per_ej() / g_per_gt()


@cache('step')
def co2_emissions_conv_oil():
    """
    Real Name: b'co2 emissions conv oil'
    Original Eqn: b'real extraction conv oil emissions relevant ej*gco2 per mj conv oil*mj per ej /g per gt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_extraction_conv_oil_emissions_relevant_ej() * gco2_per_mj_conv_oil() * mj_per_ej() / g_per_gt()


@cache('step')
def co2_emissions_gtl():
    """
    Real Name: b'co2 emissions gtl'
    Original Eqn: b'ped natx gas for gtl ej*gco2 per mj gtl*mj per ej/g per gt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ped_natx_gas_for_gtl_ej() * gco2_per_mj_gtl() * mj_per_ej() / g_per_gt()


@cache('step')
def ch4_emissions_conv_gas_without_gtl():
    """
    Real Name: b'ch4 emissions conv gas without gtl'
    Original Eqn: b'(real extraction conv gas ej-ped natx gas for gtl ej*share conv vs total gas extraction)*gch4 per mj conv gas*mj per ej/g per mt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (real_extraction_conv_gas_ej() -
            ped_natx_gas_for_gtl_ej() * share_conv_vs_total_gas_extraction()
            ) * gch4_per_mj_conv_gas() * mj_per_ej() / g_per_mt()


@cache('step')
def co2_emissions_unconv_oil():
    """
    Real Name: b'co2 emissions unconv oil'
    Original Eqn: b'(real extraction unconv oil emissions relevant ej*(gco2 per mj unconv oil +(gco2 per mj shale oil-gco2 per mj unconv oil )*adapt emissions shale oil))*mj per ej/g per gt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (real_extraction_unconv_oil_emissions_relevant_ej() *
            (gco2_per_mj_unconv_oil() +
             (gco2_per_mj_shale_oil() - gco2_per_mj_unconv_oil()) * adapt_emissions_shale_oil())
            ) * mj_per_ej() / g_per_gt()


@cache('step')
def share_conv_vs_total_gas_extraction():
    """
    Real Name: b'share conv vs total gas extraction'
    Original Eqn: b'zidz(real extraction conv gas ej , (real extraction conv gas ej+real extraction unconv gas ej) )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(real_extraction_conv_gas_ej(),
                          (real_extraction_conv_gas_ej() + real_extraction_unconv_gas_ej()))


@cache('step')
def ch4_emissions_unconv_gas():
    """
    Real Name: b'ch4 emissions unconv gas'
    Original Eqn: b'(real extraction unconv gas ej-ped natx gas for gtl ej*(1-share conv vs total gas extraction))*gch4 per mj unconv gas*mj per ej/g per mt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (real_extraction_unconv_gas_ej() - ped_natx_gas_for_gtl_ej() *
            (1 - share_conv_vs_total_gas_extraction())
            ) * gch4_per_mj_unconv_gas() * mj_per_ej() / g_per_mt()


@cache('step')
def fe_heat_demand_consum():
    """
    Real Name: b'fe heat demand consum'
    Original Eqn: b'required fed by fuel[heat]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_fed_by_fuel().loc['heat'].values


@cache('step')
def share_electricity_vs_tfes():
    """
    Real Name: b'share electricity vs tfes'
    Original Eqn: b'real fe consumption by fuel[electricity]/sum(real fe consumption by fuel)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_fe_consumption_by_fuel().loc['electricity'].values / real_tfec()


@cache('step')
def co2_emissions_peat():
    """
    Real Name: b'co2 emissions peat'
    Original Eqn: b'pes peat ej*gco2 per mj shale oil*mj per ej/g per gt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_peat_ej() * gco2_per_mj_shale_oil() * mj_per_ej() / g_per_gt()


@cache('step')
def required_fed_by_gas():
    """
    Real Name: b'required fed by gas'
    Original Eqn: b'required fed by fuel[gases]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_fed_by_fuel().loc['gases'].values


@cache('step')
def required_tfed():
    """
    Real Name: b'required tfed'
    Original Eqn: b'sum(required fed by fuel)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(required_fed_by_fuel())


@cache('step')
def total_fe_elec_consumption_ej():
    """
    Real Name: b'total fe elec consumption ej'
    Original Eqn: b'total fe elec consumption twh*ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_fe_elec_consumption_twh() * ej_per_twh()


@cache('step')
def total_fe_elec_consumption_twh():
    """
    Real Name: b'total fe elec consumption twh'
    Original Eqn: b'total fe elec generation twh/(1+share transm and distr elec losses)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_fe_elec_generation_twh() / (1 + share_transm_and_distr_elec_losses())


@cache('step')
def ped_gases():
    """
    Real Name: b'ped gases'
    Original Eqn: b'max(0, required fed by gas+ped natx gas for gtl ej+pe demand gas elec plants ej+ped gases for heat plants ej+ped gas for chp plants ej+ped gas heat nc+other gases required)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        required_fed_by_gas() + ped_natx_gas_for_gtl_ej() + pe_demand_gas_elec_plants_ej() +
        ped_gases_for_heat_plants_ej() + ped_gas_for_chp_plants_ej() + ped_gas_heat_nc() +
        other_gases_required())


@cache('step')
def total_fe_heat_consumption_ej():
    """
    Real Name: b'total fe heat consumption ej'
    Original Eqn: b'total fe heat generation ej/(1+share heat distribution losses)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_fe_heat_generation_ej() / (1 + share_heat_distribution_losses())


@cache('step')
def share_solids_vs_tfes():
    """
    Real Name: b'share solids vs tfes'
    Original Eqn: b'real fe consumption by fuel[solids]/sum(real fe consumption by fuel)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_fe_consumption_by_fuel().loc['solids'].values / real_tfec()


@cache('step')
def share_gases_vs_tfes():
    """
    Real Name: b'share gases vs tfes'
    Original Eqn: b'real fe consumption by fuel[gases]/sum(real fe consumption by fuel)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_fe_consumption_by_fuel().loc['gases'].values / real_tfec()


@cache('step')
def required_fed_solids():
    """
    Real Name: b'required fed solids'
    Original Eqn: b'required fed by fuel[solids]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_fed_by_fuel().loc['solids'].values


@cache('step')
def share_heat_vs_tfes():
    """
    Real Name: b'share heat vs tfes'
    Original Eqn: b'real fe consumption by fuel[heat]/sum(real fe consumption by fuel)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_fe_consumption_by_fuel().loc['heat'].values / real_tfec()


@cache('step')
def ped_solids():
    """
    Real Name: b'ped solids'
    Original Eqn: b'max(0, required fed solids+ped coal for ctl ej+pe demand coal elec plants ej+ped coal for heat plants ej +ped coal for chp plants ej+ped coal heat nc+other solids required)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        required_fed_solids() + ped_coal_for_ctl_ej() + pe_demand_coal_elec_plants_ej() +
        ped_coal_for_heat_plants_ej() + ped_coal_for_chp_plants_ej() + ped_coal_heat_nc() +
        other_solids_required())


@cache('step')
def scarcity_conv_oil():
    """
    Real Name: b'scarcity conv oil'
    Original Eqn: b'if then else(max extraction conv oil ej=0,0, if then else(max extraction conv oil ej>=extraction conv oil ej, 1-((max extraction conv oil ej-extraction conv oil ej)/max extraction conv oil ej)^exponent availability conv oil ,0))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        max_extraction_conv_oil_ej() < equality_threshold(), 0,
        if_then_else(
            max_extraction_conv_oil_ej() >= extraction_conv_oil_ej(),
            1 - ((max_extraction_conv_oil_ej() - extraction_conv_oil_ej()) /
                 max_extraction_conv_oil_ej())**exponent_availability_conv_oil(), 0))


@cache('step')
def share_liquids_vs_tfes():
    """
    Real Name: b'share liquids vs tfes'
    Original Eqn: b'real fe consumption by fuel[liquids]/sum(real fe consumption by fuel)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_fe_consumption_by_fuel().loc['liquids'].values / real_tfec()


@cache('step')
def gfcf_not_covered():
    """
    Real Name: b'gfcf not covered'
    Original Eqn: b'if then else(Time<2009,0,gross fixed capital formation[sectors]-real gfcf[ sectors])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2009, 0, gross_fixed_capital_formation() - real_gfcf())


@cache('step')
def lc_not_covered():
    """
    Real Name: b'lc not covered'
    Original Eqn: b'demand not covered total fd*labour share'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return demand_not_covered_total_fd() * labour_share()


@cache('step')
def cc_total_not_covered():
    """
    Real Name: b'cc total not covered'
    Original Eqn: b'demand not covered total fd*capital share'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return demand_not_covered_total_fd() * capital_share()


@cache('step')
def household_demand_not_covered():
    """
    Real Name: b'household demand not covered'
    Original Eqn: b'if then else(Time<2009,0,household demand[sectors]-real household demand[sectors])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2009, 0, household_demand() - real_household_demand())


@cache('step')
def real_total_output_inland_transport():
    """
    Real Name: b'real total output inland transport'
    Original Eqn: b'real total output by sector[inland transport]/1e+006'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_total_output_by_sector().loc['inland transport'].values / 1e+006


@cache('step')
def tfes_intensity_ej_tdollar():
    """
    Real Name: b'tfes intensity ej tdollar'
    Original Eqn: b'zidz(real tfec , gdp )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(real_tfec(), gdp())


@cache('step')
def tfes_intensity_ej_tdollar_delayed_1yr():
    """
    Real Name: b'tfes intensity ej tdollar delayed 1yr'
    Original Eqn: b'delay fixed ( tfes intensity ej tdollar, 1, 8.827)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_tfes_intensity_ej_tdollar_round1__time_step___time_step_8827_1__time_step()


@cache('step')
def tpes_intensity_ej_tdollar_delayed_1yr():
    """
    Real Name: b'tpes intensity ej tdollar delayed 1yr'
    Original Eqn: b'delay fixed ( tpes intensity ej tdollar, 1, 13.14)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_tpes_intensity_ej_tdollar_round1__time_step___time_step_1314_1__time_step()


@cache('step')
def annual_tpes_intensity_growth_rate():
    """
    Real Name: b'annual tpes intensity growth rate'
    Original Eqn: b'-1+zidz(tpes intensity ej tdollar , tpes intensity ej tdollar delayed 1yr )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return -1 + zidz(tpes_intensity_ej_tdollar(), tpes_intensity_ej_tdollar_delayed_1yr())


@cache('step')
def annual_tfes_intensity_growth_rate():
    """
    Real Name: b'annual tfes intensity growth rate'
    Original Eqn: b'-1+zidz(tfes intensity ej tdollar , tfes intensity ej tdollar delayed 1yr )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return -1 + zidz(tfes_intensity_ej_tdollar(), tfes_intensity_ej_tdollar_delayed_1yr())


@cache('step')
def total_d_jobs_res_elec_per_techn():
    """
    Real Name: b'total d jobs res elec per techn'
    Original Eqn: b'd jobs new installed res elec per techn[res elec]+jobs o and m res elec per techn[res elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return d_jobs_new_installed_res_elec_per_techn() + jobs_o_and_m_res_elec_per_techn()


@cache('step')
def total_d_jobs_res_heat_per_techn():
    """
    Real Name: b'total d jobs res heat per techn'
    Original Eqn: b'd jobs new installed res heat per techn[res heat]+jobs o and m res heat per techn[res heat]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return d_jobs_new_installed_res_heat_per_techn() + jobs_o_and_m_res_heat_per_techn()


@cache('run')
def employment_factors_new_res_elec():
    """
    Real Name: b'employment factors new res elec'
    Original Eqn: b'10.9'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[10.9,16.6,16.9,20.4,7.9,23.6,19.7,9.3],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('run')
def employment_factors_new_res_heat():
    """
    Real Name: b'employment factors new res heat'
    Original Eqn: b'8.4'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[8.4,6.9,16.9],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('run')
def employment_factors_o_and_m_res_elec():
    """
    Real Name: b'employment factors o and m res elec'
    Original Eqn: b'0.2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.2,0.4,1.5,0.6,0.3,0.2,0.7,0.6],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('run')
def employment_factors_o_and_m_res_heat():
    """
    Real Name: b'employment factors o and m res heat'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0,1.5],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('step')
def d_jobs_new_installed_res_elec_per_techn():
    """
    Real Name: b'd jobs new installed res elec per techn'
    Original Eqn: b'res elec capacity under construction tw[res elec]*employment factors new res elec[res elec]*m per t'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return res_elec_capacity_under_construction_tw() * employment_factors_new_res_elec() * m_per_t()


@cache('step')
def jobs_o_and_m_res_elec_per_techn():
    """
    Real Name: b'jobs o and m res elec per techn'
    Original Eqn: b'installed capacity res elec tw[res elec]*employment factors o and m res elec[res elec]*m per t'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return installed_capacity_res_elec_tw() * employment_factors_o_and_m_res_elec() * m_per_t()


@cache('run')
def nx0_vehicles_per_xinland_t():
    """
    Real Name: b'nx0 vehicles per xinland t'
    Original Eqn: b'nx hv inland t'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        nx_hv_inland_t(),
        nx_hv_inland_t(),
        nx_hv_inland_t(),
        nx_lv_inland_t(),
        nx_lv_inland_t(),
        nx_lv_inland_t(),
        nx_lv_inland_t(),
        nx_bus_inlandt(),
        nx_bus_inlandt(),
        nx_bus_inlandt(),
        nx_bus_inlandt(),
        nx_train_inland_t(),
        nx_train_inland_t()],
        coords={'vehiclet': ['hv liq', 'hv hib', 'hv gas', 'lv liq', 'lv elec', 'lv hib', 'lv gas', 'bus liq', 'bus elec', 'bus hib', 'bus gas', 'train liq', 'train elec']},
        dims=['vehiclet'])


@cache('run')
def initial_percent_t_vehicles():
    """
    Real Name: b'initial percent t vehicles'
    Original Eqn: b'0.9990968543814678'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.99909685,0.00045157,0.00045157,0.98292579,0.00074635,0.0003609,0.01596696,1.0,0.0,0.0,0.0,0.8,0.2],
        coords={'vehiclet': ['hv liq', 'hv hib', 'hv gas', 'lv liq', 'lv elec', 'lv hib', 'lv gas', 'bus liq', 'bus elec', 'bus hib', 'bus gas', 'train liq', 'train elec']},
        dims=['vehiclet'])


@cache('run')
def saving_ratios_v():
    """
    Real Name: b'saving ratios v'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[1.0,0.66,1.0,1.0,0.33,0.66,1.0,1.0,0.5,1.0,1.0,1.0,0.6],
        coords={'vehiclet': ['hv liq', 'hv hib', 'hv gas', 'lv liq', 'lv elec', 'lv hib', 'lv gas', 'bus liq', 'bus elec', 'bus hib', 'bus gas', 'train liq', 'train elec']},
        dims=['vehiclet'])


@cache('step')
def share_gases_dem_for_heat_nc():
    """
    Real Name: b'share gases dem for heat nc'
    Original Eqn: b'zidz(ped gas heat nc, (pes gases-ped natx gas for gtl ej))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(ped_gas_heat_nc(), (pes_gases() - ped_natx_gas_for_gtl_ej()))


@cache('step')
def increase_scarcity_conv_gas():
    """
    Real Name: b'increase scarcity conv gas'
    Original Eqn: b'scarcity conv gas stock*zidz((scarcity conv gas-scarcity conv gas delayed 1yr) , scarcity conv gas )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return scarcity_conv_gas_stock() * zidz(
        (scarcity_conv_gas() - scarcity_conv_gas_delayed_1yr()), scarcity_conv_gas())


@cache('step')
def scarcity_conv_gas_stock():
    """
    Real Name: b'scarcity conv gas stock'
    Original Eqn: b'integ ( increase scarcity conv gas, 0.2502)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_scarcity_conv_gas_stock()


@cache('step')
def pes_natx_gas_for_heat_nc_plants():
    """
    Real Name: b'pes natx gas for heat nc plants'
    Original Eqn: b'(pes gases-ped natx gas for gtl ej)*share gases dem for heat nc'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (pes_gases() - ped_natx_gas_for_gtl_ej()) * share_gases_dem_for_heat_nc()


@cache('step')
def real_growth_ctl():
    """
    Real Name: b'real growth ctl'
    Original Eqn: b'if then else(abundance coal>=abundance liquids, if then else(abundance coal=1, exogenous growth ctl,0 ),0)*abundance liquids ctl*scarcity conv oil'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        abundance_coal() >= abundance_liquids(),
        if_then_else(abundance_coal() - 1 < equality_threshold(), exogenous_growth_ctl(), 0),
        0) * abundance_liquids_ctl() * scarcity_conv_oil()


@cache('step')
def ctl_potential_production():
    """
    Real Name: b'ctl potential production'
    Original Eqn: b'integ ( replacement ctl+variation ctl-wear ctl, initial ctl production)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_ctl_potential_production()


@cache('step')
def abundance_liquids_gtl():
    """
    Real Name: b'abundance liquids gtl'
    Original Eqn: b'sqrt(abs((ped liquids ej-gtl potential production)/ped liquids ej))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.sqrt(abs((ped_liquids_ej() - gtl_potential_production()) / ped_liquids_ej()))


@cache('step')
def gtl_potential_production():
    """
    Real Name: b'gtl potential production'
    Original Eqn: b'integ ( replacement gtl+variation gtl-wear gtl, initial gtl production)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_gtl_potential_production()


@cache('step')
def abundance_liquids_ctl():
    """
    Real Name: b'abundance liquids ctl'
    Original Eqn: b'sqrt(abs((ped liquids ej-ctl potential production)/ped liquids ej))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.sqrt(abs((ped_liquids_ej() - ctl_potential_production()) / ped_liquids_ej()))


@cache('step')
def wear_gtl():
    """
    Real Name: b'wear gtl'
    Original Eqn: b'if then else(Time<2015, 0, gtl potential production/lifetime gtl)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2015, 0, gtl_potential_production() / lifetime_gtl())


@cache('run')
def lifetime_gtl():
    """
    Real Name: b'lifetime gtl'
    Original Eqn: b'40.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 40.0


@cache('run')
def lifetime_ctl():
    """
    Real Name: b'lifetime ctl'
    Original Eqn: b'40.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 40.0


@cache('step')
def wear_ctl():
    """
    Real Name: b'wear ctl'
    Original Eqn: b'if then else(Time<2015, 0, ctl potential production/lifetime ctl)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2015, 0, ctl_potential_production() / lifetime_ctl())


@cache('step')
def abundance_unconv_oil_stock():
    """
    Real Name: b'abundance unconv oil stock'
    Original Eqn: b'integ ( increase abundance unconv oil, 1)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_abundance_unconv_oil_stock()


@cache('step')
def increase_abundance_unconv_oil():
    """
    Real Name: b'increase abundance unconv oil'
    Original Eqn: b'abundance unconv oil-abundance unconv oil delayed 1yr'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return abundance_unconv_oil() - abundance_unconv_oil_delayed_1yr()


@cache('step')
def abundance_unconv_oil():
    """
    Real Name: b'abundance unconv oil'
    Original Eqn: b'if then else(ped total oil ej=0,0, if then else(ped total oil ej > real extraction unconv oil ej, (ped total oil ej-real extraction unconv oil ej)/ped total oil ej, 0))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        ped_total_oil_ej() < equality_threshold(), 0,
        if_then_else(ped_total_oil_ej() > real_extraction_unconv_oil_ej(),
                               (ped_total_oil_ej() - real_extraction_unconv_oil_ej()) /
                               ped_total_oil_ej(), 0))


@cache('step')
def abundance_unconv_oil_delayed_1yr():
    """
    Real Name: b'abundance unconv oil delayed 1yr'
    Original Eqn: b'delay fixed ( abundance unconv oil, 1, 1)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_abundance_unconv_oil_round1__time_step___time_step_1_1__time_step()


@cache('step')
def abundance_unconv_oil2():
    """
    Real Name: b'abundance unconv oil2'
    Original Eqn: b'abundance unconv oil stock'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return abundance_unconv_oil_stock()


@cache('step')
def real_extraction_unconv_oil_ej():
    """
    Real Name: b'real extraction unconv oil ej'
    Original Eqn: b'if then else(separate conv and unconv oil quest=1, extraction unconv oil ej, extraction unconv oil tot agg )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(separate_conv_and_unconv_oil_quest() == 1,
                                  extraction_unconv_oil_ej(), extraction_unconv_oil_tot_agg())


@cache('step')
def scarcity_conv_oil_stock():
    """
    Real Name: b'scarcity conv oil stock'
    Original Eqn: b'integ ( increase scarcity conv oil, 0.3989)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_scarcity_conv_oil_stock()


@cache('step')
def share_variable_res_elec_generation_vs_total_gen():
    """
    Real Name: b'share variable res elec generation vs total gen'
    Original Eqn: b'integ ( increase variable res share elec vs total generation, initial share variable res elec gen vs total)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_share_variable_res_elec_generation_vs_total_gen()


@cache('step')
def extra_monet_invest_to_cope_with_variable_elec_res():
    """
    Real Name: b'extra monet invest to cope with variable elec res'
    Original Eqn: b'(fe elec generation from onshore wind twh+fe elec generation from offshore wind twh)*balancing costs +grid reinforcement costs tdollar'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (fe_elec_generation_from_onshore_wind_twh() + fe_elec_generation_from_offshore_wind_twh(
    )) * balancing_costs() + grid_reinforcement_costs_tdollar()


@cache('step')
def increase_scarcity_conv_oil():
    """
    Real Name: b'increase scarcity conv oil'
    Original Eqn: b'scarcity conv oil-scarcity conv oil delayed 1yr'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return scarcity_conv_oil() - scarcity_conv_oil_delayed_1yr()


@cache('step')
def share_extra_monet_invest_to_cope_with_variable_elec_res():
    """
    Real Name: b'share extra monet invest to cope with variable elec res'
    Original Eqn: b'extra monet invest to cope with variable elec res/total monet invest res for elec tdolar'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extra_monet_invest_to_cope_with_variable_elec_res() / total_monet_invest_res_for_elec_tdolar()


@cache('run')
def initial_share_variable_res_elec_gen_vs_total():
    """
    Real Name: b'initial share variable res elec gen vs total'
    Original Eqn: b'0.0071'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.0071


@cache('step')
def pes_oil_for_heat_nc_plants():
    """
    Real Name: b'pes oil for heat nc plants'
    Original Eqn: b'pes liquids ej*share liquids dem for heat nc'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_liquids_ej() * share_liquids_dem_for_heat_nc()


@cache('step')
def cumulated_invest_e_grid():
    """
    Real Name: b'cumulated invest e grid'
    Original Eqn: b'integ ( extra monet invest to cope with variable elec res, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cumulated_invest_e_grid()


@cache('step')
def total_monet_invest_res_for_elec_tdolar():
    """
    Real Name: b'total monet invest res for elec tdolar'
    Original Eqn: b'invest res for elec+extra monet invest to cope with variable elec res'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return invest_res_for_elec() + extra_monet_invest_to_cope_with_variable_elec_res()


@cache('run')
def activate_exogenous_res_elec_cp_reduction_quest():

    """
    If this variable is equal to 1, the cp of variable RES for electricity is decreased empirically.
    If it is set to 0, then the intermittency of RES for elec do not have any impact on their capacity factors
    """

    return 1


@cache('step')
def cp_exogenous_res_elec_var_reduction():
    """
    Real Name: b'cp exogenous res elec var reduction'
    Original Eqn: b'1/(1+0.0001*exp(9.85*share variable res elec generation vs total gen))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(activate_exogenous_res_elec_cp_reduction_quest() == 1, 1 / (1 + 0.0001 * np.exp(9.85 * share_variable_res_elec_generation_vs_total_gen())), 1)


@cache('step')
def cp_exogenous_res_elec_dispatch_reduction():
    """
    Real Name: b'cp exogenous res elec dispatch reduction'
    Original Eqn: b'min(1, -0.6209*(share variable res elec generation vs total gen)^2 - 0.3998 *(share variable res elec generation vs total gen) + 1.0222)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(
        1, -0.6209 * (share_variable_res_elec_generation_vs_total_gen())**2 - 0.3998 *
        (share_variable_res_elec_generation_vs_total_gen()) + 1.0222)


@cache('step')
def increase_variable_res_share_elec_vs_total_generation():
    """
    Real Name: b'increase variable res share elec vs total generation'
    Original Eqn: b'share variable res elec generation vs total-share variable res elec vs total generation delayed 1yr'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_variable_res_elec_generation_vs_total(
    ) - share_variable_res_elec_vs_total_generation_delayed_1yr()


@cache('step')
def pes_nre_heat_nc():
    """
    Real Name: b'pes nre heat nc'
    Original Eqn: b'pes coal for heat nc plants+pes natx gas for heat nc plants+pes oil for heat nc plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_coal_for_heat_nc_plants() + pes_natx_gas_for_heat_nc_plants() + pes_oil_for_heat_nc_plants()


@cache('step')
def tpes_heat():
    """
    Real Name: b'tpes heat'
    Original Eqn: b'pes nre heat+pes heat res+pes tot waste for heat com'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_nre_heat() + pes_heat_res() + pes_tot_waste_for_heat_com()


@cache('step')
def pes_nre_heat():
    """
    Real Name: b'pes nre heat'
    Original Eqn: b'pes nre heat com+pes nre heat nc'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_nre_heat_com() + pes_nre_heat_nc()


@cache('step')
def share_liquids_dem_for_heat_nc():
    """
    Real Name: b'share liquids dem for heat nc'
    Original Eqn: b'zidz(ped liquids heat nc, pes liquids ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(ped_liquids_heat_nc(), pes_liquids_ej())


@cache('step')
def pes_nre_heat_com():
    """
    Real Name: b'pes nre heat com'
    Original Eqn: b'pes coal for heat com plants+pes natx gas for heat com plants+pes oil for heat com plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_coal_for_heat_com_plants() + pes_natx_gas_for_heat_com_plants() + pes_oil_for_heat_com_plants()


@cache('step')
def check_tpe():
    """
    Real Name: b'check tpe'
    Original Eqn: b'(tped by fuel-tpes ej)*100/tpes ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (tped_by_fuel() - tpes_ej()) * 100 / tpes_ej()


@cache('step')
def fed_by_fuel_for_heat_nc():
    """
    Real Name: b'fed by fuel for heat nc'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0,
        fed_oil_for_heat_nc(),
        fed_natx_gas_for_heat_nc(),
        fed_coal_for_heat_nc() + fed_solid_bioe_for_heat_nc()],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def share_fed_heat_com_vs_total_heat():
    """
    Real Name: b'share fed heat com vs total heat'
    Original Eqn: b'total fed heat com ej/(total fed heat ej+total fed heat com ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_fed_heat_com_ej() / (total_fed_heat_ej() + total_fed_heat_com_ej())


@cache('step')
def average_elec_consumption_per_capita():
    """
    Real Name: b'average elec consumption per capita'
    Original Eqn: b'total fe elec consumption twh*kwh per twh/population'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_fe_elec_consumption_twh() * kwh_per_twh() / population()


@cache('step')
def fed_solid_bioe_for_heat_nc():
    """
    Real Name: b'fed solid bioe for heat nc'
    Original Eqn: b'required fed by fuel before heat correction[solids]*share feh over fed solid bioe *efficiency conversion bioe plants to heat/(1+share heat distribution losses)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_fed_by_fuel_before_heat_correction().loc['solids'].values * share_feh_over_fed_solid_bioe(
    ) * efficiency_conversion_bioe_plants_to_heat() / (1 + share_heat_distribution_losses())


@cache('step')
def total_fed_heat_ej():
    """
    Real Name: b'total fed heat ej'
    Original Eqn: b'total fed heat com ej+total fed heat nc ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_fed_heat_com_ej() + total_fed_heat_nc_ej()


@cache('step')
def heat_nc_distribution_losses():
    """
    Real Name: b'heat nc distribution losses'
    Original Eqn: b'total fed heat nc ej-fed heat nc ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_fed_heat_nc_ej() - fed_heat_nc_ej()


@cache('step')
def total_fed_heat_nc_ej():
    """
    Real Name: b'total fed heat nc ej'
    Original Eqn: b'fed heat nc ej*(1+share heat distribution losses)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_nc_ej() * (1 + share_heat_distribution_losses())


@cache('step')
def total_fed_nre_heat_nc():
    """
    Real Name: b'total fed nre heat nc'
    Original Eqn: b'max(0,(total fed heat nc ej-total fe real supply res for heat nc ej))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, (total_fed_heat_nc_ej() - total_fe_real_supply_res_for_heat_nc_ej()))


@cache('run')
def deactivate_heat_dem_correction_quest():
    """
    Real Name: b'deactivate heat dem correction quest'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def share_feh_over_fed_solid_bioe():
    """
    Real Name: b'share feh over fed solid bioe'
    Original Eqn: b'0.13480214704780927'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.13480214704780927


@cache('step')
def abundance_heat():
    """
    Real Name: b'abundance heat'
    Original Eqn: b'if then else(total fe heat generation ej>total fed heat ej, 1, 1-zidz(total fed heat ej-total fe heat generation ej , total fed heat ej ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        total_fe_heat_generation_ej() > total_fed_heat_ej(), 1, 1 -
        zidz(total_fed_heat_ej() - total_fe_heat_generation_ej(), total_fed_heat_ej()))


@cache('step')
def pes_coal_for_heat_nc_plants():
    """
    Real Name: b'pes coal for heat nc plants'
    Original Eqn: b'extraction coal ej*share coal dem for heat nc'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_coal_ej() * share_coal_dem_for_heat_nc()


@cache('step')
def required_fed_sectors_by_fuel():
    """
    Real Name: b'required fed sectors by fuel'
    Original Eqn: b'sum2(required final energy by sector and fuel)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(dim='sectors', data=required_final_energy_by_sector_and_fuel())


@cache('run')
def share_trad_biomass_vs_solids_in_households():
    """
    Real Name: b'share trad biomass vs solids in households'
    Original Eqn: b'0.9'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.9


@cache('step')
def share_global_pop_dependent_on_trad_biomass():
    """
    Real Name: b'share global pop dependent on trad biomass'
    Original Eqn: b'population dependent on trad biomass/population'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return population_dependent_on_trad_biomass() / population()


@cache('step')
def pes_oil_for_heat_com_plants():
    """
    Real Name: b'pes oil for heat com plants'
    Original Eqn: b'pes oil ej*share oil dem for heat com'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_oil_ej() * share_oil_dem_for_heat_com()


@cache('step')
def share_coal_dem_for_heat_nc():
    """
    Real Name: b'share coal dem for heat nc'
    Original Eqn: b'zidz(ped coal heat nc, ped coal ej )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(ped_coal_heat_nc(), ped_coal_ej())


@cache('step')
def res_heat_com_tot_overcapacity():
    """
    Real Name: b'res heat com tot overcapacity'
    Original Eqn: b'if then else(potential fes tot res for heat com ej=0,0, (potential fes tot res for heat com ej-fe real supply res for heat com tot ej)/potential fes tot res for heat com ej )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        potential_fes_tot_res_for_heat_com_ej() < equality_threshold(), 0,
        (potential_fes_tot_res_for_heat_com_ej() - fe_real_supply_res_for_heat_com_tot_ej()) /
        potential_fes_tot_res_for_heat_com_ej())


@cache('step')
def pes_natx_gas_for_heat_com_plants():
    """
    Real Name: b'pes natx gas for heat com plants'
    Original Eqn: b'pes natx gas*share natx gas dem for heat com'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_natx_gas() * share_natx_gas_dem_for_heat_com()


@cache('step')
def pes_coal_for_heat_com_plants():
    """
    Real Name: b'pes coal for heat com plants'
    Original Eqn: b'extraction coal ej*share coal dem for heat com'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_coal_ej() * share_coal_dem_for_heat_com()


@cache('step')
def required_heat_com():
    """
    Real Name: b'required heat com'
    Original Eqn: b'required fed by fuel before heat correction[heat]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_fed_by_fuel_before_heat_correction().loc['heat'].values


@cache('step')
def variation_labour_share():
    """
    Real Name: b'variation labour share'
    Original Eqn: b'growth labour share*labour share'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return growth_labour_share() * labour_share()


@cache('step')
def variation_household_demand():
    """
    Real Name: b'variation household demand'
    Original Eqn: b'if then else(Time<2009,variation historic demand[sectors],exp(bet 0 lab)*exp (beta 1 lab[sectors])*((lc next step)^beta 2 lab-(lc)^beta 2 lab ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2009, variation_historic_demand(),
        np.exp(bet_0_lab()) * np.exp(beta_1_lab()) * ((lc_next_step())**beta_2_lab() -
                                                      (lc())**beta_2_lab()))


@cache('step')
def labour_share():
    """
    Real Name: b'labour share'
    Original Eqn: b'integ ( variation labour share, 0.6374)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_labour_share()


@cache('step')
def capital_share():
    """
    Real Name: b'capital share'
    Original Eqn: b'1-labour share'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 - labour_share()


@cache('step')
def growth_capital_share():
    """
    Real Name: b'growth capital share'
    Original Eqn: b'-growth labour share*labour share/(1-labour share)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return -growth_labour_share() * labour_share() / (1 - labour_share())


@cache('run')
def include_materials_for_overgrids_quest():
    """
    Real Name: b'include materials for overgrids quest'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def all_minerals_virgin_quest():
    """
    Real Name: b'all minerals virgin quest'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def materials_for_new_res_elec_per_capacity_installed():
    """
    Real Name: b'materials for new res elec per capacity installed'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
        materials_per_new_capacity_installed_wind_onshore() +
        (materials_per_new_res_elec_capacity_installed_hvdcs() +
         materials_per_new_res_elec_capacity_installed_material_overgrid_high_power()) *
        include_materials_for_overgrids_quest(),
        materials_per_new_capacity_installed_wind_offshore() +
        (materials_per_new_res_elec_capacity_installed_hvdcs() +
         materials_per_new_res_elec_capacity_installed_material_overgrid_high_power()) *
        include_materials_for_overgrids_quest(),
        materials_per_new_capacity_installed_pv() +
        (materials_per_new_res_elec_capacity_installed_hvdcs() +
         materials_per_new_res_elec_capacity_installed_material_overgrid_high_power()) *
        include_materials_for_overgrids_quest(),
        materials_per_new_capacity_installed_csp() +
        (materials_per_new_res_elec_capacity_installed_hvdcs() +
         materials_per_new_res_elec_capacity_installed_material_overgrid_high_power()) *
        include_materials_for_overgrids_quest()],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp'], 'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['res elec', 'materials'])


@cache('step')
def cedtot_per_material_res_elec_var():
    """
    Real Name: b'cedtot per material res elec var'
    Original Eqn: b'ced new cap per material res elec var[res elec,materials]+ced o and m over lifetime per material res elec var[res elec,materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ced_new_cap_per_material_res_elec_var() + \
           ced_o_and_m_over_lifetime_per_material_res_elec_var()


@cache('step')
def cedtot_per_tw_res_elec_var():
    """
    Real Name: b'cedtot per tw res elec var'
    Original Eqn: b'sum2(cedtot per tw per material res elec var)*1e+006'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(dim='materials', data=cedtot_per_tw_per_material_res_elec_var()) * 1e+006


@cache('step')
def cedtot_per_tw_per_material_res_elec_var():
    """
    Real Name: b'cedtot per tw per material res elec var'
    Original Eqn: b'zidz(cedtot per material res elec var[res elec,materials] , res elec capacity under construction tw[res elec] )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(cedtot_per_material_res_elec_var(),
                          res_elec_capacity_under_construction_tw())


@cache('step')
def demand_by_sector_fd():
    """
    Real Name: b'demand by sector fd'
    Original Eqn: b'integ ( variation demand flow fd[sectors]-demand not covered by sector fd[sectors], initial demand by sectot[sectors])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_demand_by_sector_fd()


@cache('step')
def sum_variation():
    """
    Real Name: b'sum variation'
    Original Eqn: b'sum(variation demand flow fd)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(variation_demand_flow_fd())


@cache('step')
def cc_sectoral_next_step():
    """
    Real Name: b'cc sectoral next step'
    Original Eqn: b'cc sectoral[sectors]+variation cc sectoral[sectors]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return cc_sectoral() + variation_cc_sectoral()


@cache('step')
def gross_fixed_capital_formation():
    """
    Real Name: b'gross fixed capital formation'
    Original Eqn: b'integ ( variation gfcf[sectors]-gfcf not covered[sectors], initial gfcf[sectors])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_gross_fixed_capital_formation()


@cache('step')
def pct_gfcf_vs_gfcf_plus_hd():
    """
    Real Name: b'pct gfcf vs gfcf plus hd'
    Original Eqn: b'gross fixed capital formation[sectors]/(gross fixed capital formation[sectors]+household demand[sectors])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return gross_fixed_capital_formation() / (gross_fixed_capital_formation() + household_demand())


@cache('step')
def household_demand():
    """
    Real Name: b'household demand'
    Original Eqn: b'integ (variation household demand[sectors]-household demand not covered[sectors], initial household demand[sectors])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_household_demand()


@cache('step')
def lc_next_step():
    """
    Real Name: b'lc next step'
    Original Eqn: b'lc+variation lc'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return lc() + variation_lc()


@cache('step')
def household_demand_total():
    """
    Real Name: b'household demand total'
    Original Eqn: b'sum(household demand)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(household_demand())


@cache('step')
def cedtot_per_tw_over_lifetime_res_elec_dispatch():
    """
    Real Name: b'cedtot per tw over lifetime res elec dispatch'
    Original Eqn: b'zidz((1-res elec variables quest[res elec])*(cp ini res elec[res elec]*lifetime res elec[res elec]*ej per twh/twe per twh) , eroi ini res elec dispatch[res elec]*quality of electricity 2015 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz((1 - res_elec_variables_quest()) *
                          (cp_ini_res_elec() * lifetime_res_elec() * ej_per_twh() / twe_per_twh()),
                          eroi_ini_res_elec_dispatch() * quality_of_electricity_2015())


@cache('step')
def quality_of_electricity_2015():
    """
    Real Name: b'quality of electricity 2015'
    Original Eqn: b'if then else(Time<2015, dynamic quality of electricity , aux3)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2015, dynamic_quality_of_electricity(), aux3())


@cache('step')
def dynamic_quality_of_electricity():
    """
    Real Name: b'dynamic quality of electricity'
    Original Eqn: b'real tfec/(tpes ej-total real non energy use consumption ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_tfec() / (tpes_ej() - total_real_non_energy_use_consumption_ej())


@cache('step')
def quality_of_electricity():
    """
    Real Name: b'quality of electricity'
    Original Eqn: b'if then else(static div dynamic quality of electricity quest=1,quality of electricity 2015,dynamic quality of electricity)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(static_div_dynamic_quality_of_electricity_quest() == 1,
                                  quality_of_electricity_2015(), dynamic_quality_of_electricity())


@cache('step')
def cp_exogenous_res_elec_reduction():
    """
    Real Name: b'cp exogenous res elec reduction'
    Original Eqn: b'cp exogenous res elec dispatch reduction'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        cp_exogenous_res_elec_dispatch_reduction(),
        cp_exogenous_res_elec_dispatch_reduction(),
        cp_exogenous_res_elec_dispatch_reduction(),
        cp_exogenous_res_elec_dispatch_reduction(),
        cp_exogenous_res_elec_var_reduction(),
        cp_exogenous_res_elec_var_reduction(),
        cp_exogenous_res_elec_var_reduction(),
        cp_exogenous_res_elec_var_reduction()],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('run')
def res_elec_variables_quest():
    """
    Real Name: b'res elec variables quest'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('step')
def aux3():
    """
    Real Name: b'aux3'
    Original Eqn: b'delay fixed ( quality of electricity 2015, 0.03125 , 0.75)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_quality_of_electricity_2015_round003125__time_step___time_step_075_003125__time_step()


@cache('step')
def fei_res_elec_var():
    """
    Real Name: b'fei res elec var'
    Original Eqn: b'(cedtot new cap res elec var[res elec]*(1+grid correction factor res elec[ res elec])+ced decom res elec capacity [res elec]+cedtot o and m res elec var[res elec])*quality of electricity+real generation res elec ej[res elec]*self electricity consumption res elec[res elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (cedtot_new_cap_res_elec_var() *
            (1 + grid_correction_factor_res_elec()) + ced_decom_res_elec_capacity() +
            cedtot_o_and_m_res_elec_var()) * quality_of_electricity(
            ) + real_generation_res_elec_ej() * self_electricity_consumption_res_elec()


@cache('step')
def xstaticx_eroi_res_elec():
    """
    Real Name: b'xstaticx eroi res elec'
    Original Eqn: b'if then else(fei over lifetime res elec dispatch[hydro]=0,0,output elec over lifetime res elec[hydro]/(fei over lifetime res elec dispatch[hydro]*quality of electricity))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        if_then_else(
            fei_over_lifetime_res_elec_dispatch().loc['hydro'].values == 0, 0,
            output_elec_over_lifetime_res_elec().loc['hydro'].values /
            (fei_over_lifetime_res_elec_dispatch().loc['hydro'].values * quality_of_electricity())),
        if_then_else(
            fei_over_lifetime_res_elec_dispatch().loc['geot elec'].values == 0, 0,
            output_elec_over_lifetime_res_elec().loc['geot elec'].values /
            (fei_over_lifetime_res_elec_dispatch().loc['geot elec'].values * quality_of_electricity())),
        if_then_else(
            fei_over_lifetime_res_elec_dispatch().loc['solid bioe elec'].values == 0, 0,
            output_elec_over_lifetime_res_elec().loc['solid bioe elec'].values /
            (fei_over_lifetime_res_elec_dispatch().loc['solid bioe elec'].values * quality_of_electricity())),
        if_then_else(
            fei_over_lifetime_res_elec_dispatch().loc['oceanic'].values == 0, 0,
            output_elec_over_lifetime_res_elec().loc['oceanic'].values /
            (fei_over_lifetime_res_elec_dispatch().loc['oceanic'].values * quality_of_electricity())),
        if_then_else(
            fei_over_lifetime_res_elec_var().loc['wind onshore'].values == 0, 0,
            output_elec_over_lifetime_res_elec().loc['wind onshore'].values / fei_over_lifetime_res_elec_var().loc['wind onshore'].values),
        if_then_else(
            fei_over_lifetime_res_elec_var().loc['wind offshore'].values == 0, 0,
            output_elec_over_lifetime_res_elec().loc['wind offshore'].values / fei_over_lifetime_res_elec_var().loc['wind offshore'].values),
        if_then_else(
            fei_over_lifetime_res_elec_var().loc['solar pv'].values == 0, 0,
            output_elec_over_lifetime_res_elec().loc['solar pv'].values / fei_over_lifetime_res_elec_var().loc['solar pv'].values),
        if_then_else(
            fei_over_lifetime_res_elec_var().loc['csp'].values == 0, 0,
            output_elec_over_lifetime_res_elec().loc['csp'].values / fei_over_lifetime_res_elec_var().loc['csp'].values)],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('step')
def materials_required_for_new_res_elec_mt():
    """
    Real Name: b'materials required for new res elec mt'
    Original Eqn: b'res elec capacity under construction tw[res elec]*materials for new res elec per capacity installed[res elec,materials]*m per t/kg per mt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return res_elec_capacity_under_construction_tw(
    ) * materials_for_new_res_elec_per_capacity_installed() * m_per_t() / kg_per_mt()



@cache('step')
def fei_over_lifetime_res_elec_var():
    """
    Real Name: b'fei over lifetime res elec var'
    Original Eqn: b'(cedtot new cap res elec var[res elec]*(1+share energy requirements for decom res elec[res elec]+grid correction factor res elec [res elec])+ced o and m over lifetime res elec var[res elec])*quality of electricity+output elec over lifetime res elec[res elec]*self electricity consumption res elec[res elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (
        cedtot_new_cap_res_elec_var() *
        (1 + share_energy_requirements_for_decom_res_elec() + grid_correction_factor_res_elec()) +
        ced_o_and_m_over_lifetime_res_elec_var()) * quality_of_electricity(
        ) + output_elec_over_lifetime_res_elec() * self_electricity_consumption_res_elec()


@cache('step')
def ced_decom_res_elec_capacity():
    """
    Real Name: b'ced decom res elec capacity'
    Original Eqn: b'zidz(share energy requirements for decom res elec[res elec]*cedtot new cap res elec var[res elec]*wear res elec[res elec], res elec capacity under construction tw[res elec])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(
        share_energy_requirements_for_decom_res_elec() * cedtot_new_cap_res_elec_var() *
        wear_res_elec(), res_elec_capacity_under_construction_tw())


@cache('step')
def ced_o_and_m_per_material_res_elec_var():
    """
    Real Name: b'ced o and m per material res elec var'
    Original Eqn: b'materials required for o and m res elec mt[res elec,materials]*energy cons per unit of material cons for res elec[materials]*kg per mt/mj per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return materials_required_for_o_and_m_res_elec_mt(
    ) * energy_cons_per_unit_of_material_cons_for_res_elec() * kg_per_mt() / mj_per_ej()


@cache('step')
def cedtot_new_cap_res_elec_var():
    """
    Real Name: b'cedtot new cap res elec var'
    Original Eqn: b'sum2(ced new cap per material res elec var)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(dim='materials', data=ced_new_cap_per_material_res_elec_var())


@cache('step')
def cedtot_o_and_m_res_elec_var():
    """
    Real Name: b'cedtot o and m res elec var'
    Original Eqn: b'sum2(ced o and m per material res elec var)+total energy requirements o and m for water consumption res elec[res elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(dim='materials', data=ced_o_and_m_per_material_res_elec_var()
                          ) + total_energy_requirements_o_and_m_for_water_consumption_res_elec()


@cache('step')
def aux1():
    """
    Real Name: b'aux1'
    Original Eqn: b'delay fixed ( share e losses cc until x2015, time step , 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_share_e_losses_cc_until_x2015_roundtime_step__time_step___time_step_0_time_step__time_step()


@cache('run')
def b_lineal_regr():
    """
    Real Name: b'b lineal regr'
    Original Eqn: b'esoi phs depleted potential-a lineal regr*max capacity potential phs'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return esoi_phs_depleted_potential() - a_lineal_regr() * max_capacity_potential_phs()


@cache('run')
def a_lineal_regr():
    """
    Real Name: b'a lineal regr'
    Original Eqn: b'(esoi phs full potential-esoi phs depleted potential)/(0-max capacity potential phs)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (esoi_phs_full_potential() -
            esoi_phs_depleted_potential()) / (0 - max_capacity_potential_phs())


@cache('run')
def esoi_phs_depleted_potential():
    """
    Real Name: b'esoi phs depleted potential'
    Original Eqn: b'5'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5


@cache('step')
def cc_total():
    """
    Real Name: b'cc total'
    Original Eqn: b'integ (variation cc-cc total not covered, initial cc total)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cc_total()


@cache('run')
def initial_household_demand():
    """
    Real Name: b'initial household demand'
    Original Eqn: b'748525.1845440001,41789.6873,1723750.213929,470469.2814293,97413.51078294,27311.3812115,218308.785156,217859.5983007,329088.21596,91494.368471,50849.690296099994,98211.1859259,169551.78439,269085.07894000004,559770.13765,222979.92935460003,425936.77411,43757.5723889,329630.413413,953189.751819,1442744.514577,1113431.49591,512283.1868,44308.95214,137453.87786,138435.92747,324538.48329999996,992982.57458,2441020.9793999996,314984.6207,376202.178,340722.53,1143478.152,959930.0830000001,47919.81617847812'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[
            748525.184544, 41789.6873, 1723750.213929, 470469.2814293, 97413.51078294,
            27311.3812115, 218308.785156, 217859.5983007, 329088.21596, 91494.368471,
            50849.6902961, 98211.1859259, 169551.78439, 269085.07894, 559770.13765, 222979.9293546,
            425936.77411, 43757.5723889, 329630.413413, 953189.751819, 1442744.514577,
            1113431.49591, 512283.1868, 44308.95214, 137453.87786, 138435.92747, 324538.4833,
            992982.57458, 2441020.9794, 314984.6207, 376202.178, 340722.53, 1143478.152,
            959930.083, 47919.81617848
        ],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors'])


@cache('step')
def total_demand():
    """
    Real Name: b'total demand'
    Original Eqn: b'sum(demand by sector fd)/1e+006'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(demand_by_sector_fd()) / 1e+006


@cache('step')
def demand_not_covered_by_sector_fd():
    """
    Real Name: b'demand not covered by sector fd'
    Original Eqn: b'if then else(Time>2009,demand by sector fd[sectors]-real demand by sector[ sectors],0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() > 2009,
                                  demand_by_sector_fd() - real_demand_by_sector(), 0)


@cache('run')
def initial_demand_by_sectot():
    """
    Real Name: b'initial demand by sectot'
    Original Eqn: b'821277.3516440002,106956.558,1761460.089629,500387.93122930004,102249.58580294,58713.0731415,261905.83585600002,224714.8110007,401281.55396000005,113840.58768099999,64807.204056099996,259983.9362259,777405.4233899999,895155.41074,1109416.0565499999,323158.75545460003,440415.90923,3373315.0363289,352813.949813,1263743.815819,1598464.786877,1135913.8165600002,579016.9834,49225.027030000005,143095.69405000002,165486.95716999998,336812.13262999995,1035860.0685400001,2560435.9584529996,715097.6881200001,3163684.928,1176056.855178,2116985.945408,1121312.875,48106.64623337812'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[
            821277.351644, 106956.558, 1761460.089629, 500387.9312293, 102249.58580294,
            58713.0731415, 261905.835856, 224714.8110007, 401281.55396, 113840.587681,
            64807.2040561, 259983.9362259, 777405.42339, 895155.41074, 1109416.05655,
            323158.7554546, 440415.90923, 3373315.0363289, 352813.949813, 1263743.815819,
            1598464.786877, 1135913.81656, 579016.9834, 49225.02703, 143095.69405, 165486.95717,
            336812.13263, 1035860.06854, 2560435.958453, 715097.68812, 3163684.928, 1176056.855178,
            2116985.945408, 1121312.875, 48106.64623338
        ],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors'])


@cache('run')
def beta_1_lab():
    """
    Real Name: b'beta 1 lab'
    Original Eqn: b'0,-3.041303,0.8496438,-0.4561882,-2.064467,-3.356857,-1.226881,-1.186757,-0.712791,-2.035976,-2.704609,-2.061479,-1.488448,-0.675253,-0.1846172,-1.18592,-0.5334909,-2.756193,-0.7490777,0.3986385,0.7057005,0.4404486,-0.3547073,-2.553138,-1.624648,-1.630129,-0.3472749,0.4875999,1.229081,-0.7056298,-0.7456611,-0.7185996,0.5389905,0.3212347,-2.770384'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[
            0., -3.041303, 0.8496438, -0.4561882, -2.064467, -3.356857, -1.226881, -1.186757,
            -0.712791, -2.035976, -2.704609, -2.061479, -1.488448, -0.675253, -0.1846172, -1.18592,
            -0.5334909, -2.756193, -0.7490777, 0.3986385, 0.7057005, 0.4404486, -0.3547073,
            -2.553138, -1.624648, -1.630129, -0.3472749, 0.4875999, 1.229081, -0.7056298,
            -0.7456611, -0.7185996, 0.5389905, 0.3212347, -2.770384
        ],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors'])


@cache('run')
def initial_lc_total():
    """
    Real Name: b'initial lc total'
    Original Eqn: b'1.85847e+007'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1.85847e+007


@cache('run')
def initial_gfcf():
    """
    Real Name: b'initial gfcf'
    Original Eqn: b'35732.832,49168.223,3153.3279,9805.4414,654.27881,26489.537,36798.738,1328.0853,10869.645,12706.039,5833.2832,151450.72,591070.69,592198.44,525742.88,85966.852,9163.3457,3315735.5,20114.217,272784.38,134780.13,6338.0215,49677.738,2462.5908,4389.7974,7163.0146,9400.0742,3753.4692,105648.82,322190.16,16466.713,877.41577,2020.5743,19066.77,133.84763'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[
            3.5732832e+04, 4.9168223e+04, 3.1533279e+03, 9.8054414e+03, 6.5427881e+02,
            2.6489537e+04, 3.6798738e+04, 1.3280853e+03, 1.0869645e+04, 1.2706039e+04,
            5.8332832e+03, 1.5145072e+05, 5.9107069e+05, 5.9219844e+05, 5.2574288e+05,
            8.5966852e+04, 9.1633457e+03, 3.3157355e+06, 2.0114217e+04, 2.7278438e+05,
            1.3478013e+05, 6.3380215e+03, 4.9677738e+04, 2.4625908e+03, 4.3897974e+03,
            7.1630146e+03, 9.4000742e+03, 3.7534692e+03, 1.0564882e+05, 3.2219016e+05,
            1.6466713e+04, 8.7741577e+02, 2.0205743e+03, 1.9066770e+04, 1.3384763e+02
        ],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors'])


@cache('run')
def beta_0_cap():
    """
    Real Name: b'beta 0 cap'
    Original Eqn: b'5.09048'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5.09048


@cache('run')
def initial_cc_total():
    """
    Real Name: b'initial cc total'
    Original Eqn: b'1.05739e+007'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1.05739e+007


@cache('run')
def beta_2_cap():
    """
    Real Name: b'beta 2 cap'
    Original Eqn: b'0.434675'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.434675


@cache('step')
def demand_not_covered_total_fd():
    """
    Real Name: b'demand not covered total fd'
    Original Eqn: b'sum(demand not covered by sector fd)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(demand_not_covered_by_sector_fd())


@cache('run')
def beta_1_cap():
    """
    Real Name: b'beta 1 cap'
    Original Eqn: b'0,0.6549913,-2.409549,-0.7288079,-2.802861,0.2653398,0.3796384,-3.044304,-1.282831,-0.5025426,-1.428307,1.431519,3.098772,2.975706,2.985555,1.702436,-1.410645,4.458449,0.0193238,1.628343,1.206609,-2.001936,0.4501797,-1.538287,-1.335444,-1.169046,-0.8956122,-2.335751,0.3825687,2.065982,-1.44898,-2.976849,-2.671927,-0.4900947,-3.099085'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(
        data=[
            0., 0.6549913, -2.409549, -0.7288079, -2.802861, 0.2653398, 0.3796384, -3.044304,
            -1.282831, -0.5025426, -1.428307, 1.431519, 3.098772, 2.975706, 2.985555, 1.702436,
            -1.410645, 4.458449, 0.0193238, 1.628343, 1.206609, -2.001936, 0.4501797, -1.538287,
            -1.335444, -1.169046, -0.8956122, -2.335751, 0.3825687, 2.065982, -1.44898, -2.976849,
            -2.671927, -0.4900947, -3.099085
        ],
        coords={
            'sectors': [
                'agriculture hunting forestry and fishing', 'mining and quarrying',
                'food beverages and tobacco', 'textiles and textile products',
                'leather leather and footwear', 'wood and products of wood and cork',
                'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel',
                'chemicals and chemical products', 'rubber and plastics',
                'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec',
                'electrical and optical equipment', 'transport equipment',
                'manufacturing nec recycling', 'electricity gas and water supply', 'construction',
                'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel',
                'wholesale trade and commissions trade except of motor vehicles and motorcycles',
                'retail trade except of motor vehicles and motorcycles repair of household goods',
                'hotels and restaurants', 'inland transport', 'water transport', 'air transport',
                'other supporting and auxiliary transport activities activities of travel agencies',
                'post and telecommunications', 'financial intermediation', 'real estate activities',
                'renting od meq and other business activities',
                'public admin and defence compulsory social security', 'education',
                'health and social work', 'other community social and persona services',
                'private households with employed persons'
            ]
        },
        dims=['sectors'])


@cache('step')
def lc():
    """
    Real Name: b'lc'
    Original Eqn: b'integ (variation lc-lc not covered, initial lc total)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_lc()


@cache('run')
def bet_0_lab():
    """
    Real Name: b'bet 0 lab'
    Original Eqn: b'-5.52042'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return -5.52042


@cache('step')
def tped_by_fuel():
    """
    Real Name: b'tped by fuel'
    Original Eqn: b'extraction uranium ej+pe supply res non elec ej+pe elec generation from res ej+ped total oil ej +ped coal ej+ped natx gas ej+pes waste ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_uranium_ej() + pe_supply_res_non_elec_ej() + pe_elec_generation_from_res_ej(
    ) + ped_total_oil_ej() + ped_coal_ej() + ped_natx_gas_ej() + pes_waste_ej()


@cache('step')
def abundance_tpe():
    """
    Real Name: b'abundance tpe'
    Original Eqn: b'if then else(tpes ej>tped by fuel, 1, 1-((tped by fuel-tpes ej)/tped by fuel))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(tpes_ej() > tped_by_fuel(), 1,
                                  1 - ((tped_by_fuel() - tpes_ej()) / tped_by_fuel()))


@cache('run')
def beta_2_lab():
    """
    Real Name: b'beta 2 lab'
    Original Eqn: b'1.13545'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1.13545


@cache('step')
def available_pe_potential_solid_bioe_for_heat_ej():
    """
    Real Name: b'available pe potential solid bioe for heat ej'
    Original Eqn: b'max(0, total pe solid bioe potential heat plus elec ej-pe bioe for elec generation ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        total_pe_solid_bioe_potential_heat_plus_elec_ej() - pe_bioe_for_elec_generation_ej())


@cache('step')
def max_pe_potential_res_for_heat():
    """
    Real Name: b'max pe potential res for heat'
    Original Eqn: b'fe solar potential for heat'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        fe_solar_potential_for_heat(),
        geot_pe_potential_for_heat_ej(),
        available_pe_potential_solid_bioe_for_heat_ej()],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('step')
def pes_res_for_heat_com_by_techn():
    """
    Real Name: b'pes res for heat com by techn'
    Original Eqn: b'fe real generation res heat com ej[geot heat]/efficiency res heat[geot heat]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        fe_real_generation_res_heat_com_ej().loc['solar heat'].values * efficiency_solar_panels_for_heat() /
        efficiency_res_heat().loc['solar heat'].values,
        fe_real_generation_res_heat_com_ej().loc['geot heat'].values / efficiency_res_heat().loc['geot heat'].values,
        fe_real_generation_res_heat_com_ej().loc['solid bioe heat'].values / efficiency_res_heat().loc['solid bioe heat'].values],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('run')
def p_res_for_heat():
    """
    Real Name: b'p res for heat'
    Original Eqn: b'p solar for heat'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        p_solar_for_heat(),
        p_geothermal_for_heat(),
        p_solid_bioe_for_heat()],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('step')
def fe_real_generation_res_heat_com_ej():
    """
    Real Name: b'fe real generation res heat com ej'
    Original Eqn: b'potential fes res for heat com ej[res heat]*(1-res heat com tot overcapacity)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return potential_fes_res_for_heat_com_ej() * (1 - res_heat_com_tot_overcapacity())


@cache('step')
def potential_fes_tot_res_for_heat_com_ej():
    """
    Real Name: b'potential fes tot res for heat com ej'
    Original Eqn: b'sum(potential fes res for heat com ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(potential_fes_res_for_heat_com_ej())


@cache('step')
def available_potential_fe_solid_bioe_for_elec_ej():
    """
    Real Name: b'available potential fe solid bioe for elec ej'
    Original Eqn: b'available pe potential solid bioe for elec ej*efficiency conversion bioe to elec'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return available_pe_potential_solid_bioe_for_elec_ej() * efficiency_conversion_bioe_to_elec()


@cache('step')
def max_bioe_twe():
    """
    Real Name: b'max bioe twe'
    Original Eqn: b'available potential fe solid bioe for elec ej*twe per twh/ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return available_potential_fe_solid_bioe_for_elec_ej() * twe_per_twh() / ej_per_twh()


@cache('step')
def remaining_potential_tot_res_heat():
    """
    Real Name: b'remaining potential tot res heat'
    Original Eqn: b'if then else(max pe potential tot res heat ej > pes tot res for heat, zidz(max pe potential tot res heat ej-pes tot res for heat , max pe potential tot res heat ej ), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        max_pe_potential_tot_res_heat_ej() > pes_tot_res_for_heat(),
        zidz(max_pe_potential_tot_res_heat_ej() - pes_tot_res_for_heat(),
                       max_pe_potential_tot_res_heat_ej()), 0)


@cache('step')
def potential_fes_heat_com_nuclear_chp_plants_ej():
    """
    Real Name: b'potential fes heat com nuclear chp plants ej'
    Original Eqn: b'fe nuclear elec generation twh*share of heat production in chp plants vs total nucelar elec generation'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fe_nuclear_elec_generation_twh(
    ) * share_of_heat_production_in_chp_plants_vs_total_nucelar_elec_generation()


@cache('run')
def share_of_heat_production_in_chp_plants_vs_total_nucelar_elec_generation():
    """
    Real Name: b'share of heat production in chp plants vs total nucelar elec generation'
    Original Eqn: b'9.150844475380217e-06'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 9.150844475380217e-06


@cache('step')
def pes_waste_for_elec_plants():
    """
    Real Name: b'pes waste for elec plants'
    Original Eqn: b'pes waste ej*share pes waste for elec plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_waste_ej() * share_pes_waste_for_elec_plants()


@cache('step')
def losses_chp_biogas():
    """
    Real Name: b'losses chp biogas'
    Original Eqn: b'pes biogas for chp-fes heat com from biogas in chp plants-fes elec from biogas in chp plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_biogas_for_chp() - fes_heat_com_from_biogas_in_chp_plants(
    ) - fes_elec_from_biogas_in_chp_plants()


@cache('step')
def losses_chp_waste():
    """
    Real Name: b'losses chp waste'
    Original Eqn: b'pes waste for chp plants-fes elec from waste in chp plants-fes heat com from waste in chp plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_waste_for_chp_plants() - fes_elec_from_waste_in_chp_plants() - fes_heat_com_from_waste_in_chp_plants()


@cache('step')
def share_pes_biogas_for_heat():
    """
    Real Name: b'share pes biogas for heat'
    Original Eqn: b'pes tot biogas for heat com/pes biogas ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_tot_biogas_for_heat_com() / pes_biogas_ej()


@cache('step')
def pe_losses_res_for_elec():
    """
    Real Name: b'pe losses res for elec'
    Original Eqn: b'pe losses bioe for elec ej+pe losses biogas for elec+pe losses waste for elec'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_losses_bioe_for_elec_ej() + pe_losses_biogas_for_elec() + pe_losses_waste_for_elec()


@cache('step')
def pes_tot_waste_for_elec():
    """
    Real Name: b'pes tot waste for elec'
    Original Eqn: b'pes waste for elec plants+fes elec from waste in chp plants+losses chp waste*share efficiency waste for elec in chp plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_waste_for_elec_plants() + fes_elec_from_waste_in_chp_plants(
    ) + losses_chp_waste() * share_efficiency_waste_for_elec_in_chp_plants()


@cache('step')
def pes_tot_waste_for_heat_com():
    """
    Real Name: b'pes tot waste for heat com'
    Original Eqn: b'pes waste for heat com plants+fes heat com from waste in chp plants+losses chp waste*(1-share efficiency waste for elec in chp plants )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_waste_for_heat_com_plants() + fes_heat_com_from_waste_in_chp_plants(
    ) + losses_chp_waste() * (1 - share_efficiency_waste_for_elec_in_chp_plants())


@cache('step')
def abundance_res_heat_com2():
    """
    Real Name: b'abundance res heat com2'
    Original Eqn: b'sqrt (abundance res heat com)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.sqrt(abundance_res_heat_com())


@cache('step')
def max_pe_potential_biogas_for_heat():
    """
    Real Name: b'max pe potential biogas for heat'
    Original Eqn: b'max biogas ej*share pes biogas for heat'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_biogas_ej() * share_pes_biogas_for_heat()


@cache('run')
def share_efficiency_biogas_for_elec_in_chp_plants():
    """
    Real Name: b'share efficiency biogas for elec in chp plants'
    Original Eqn: b'efficiency biogas for elec chp plants/(efficiency biogas for elec chp plants+efficiency biogas for heat chp plants )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return efficiency_biogas_for_elec_chp_plants() / (efficiency_biogas_for_elec_chp_plants() +
                                                      efficiency_biogas_for_heat_chp_plants())


@cache('run')
def share_efficiency_waste_for_elec_in_chp_plants():
    """
    Real Name: b'share efficiency waste for elec in chp plants'
    Original Eqn: b'efficiency waste for elec chp plants/(efficiency waste for elec chp plants+efficiency waste for heat chp plants )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return efficiency_waste_for_elec_chp_plants() / (efficiency_waste_for_elec_chp_plants() +
                                                     efficiency_waste_for_heat_chp_plants())


@cache('step')
def max_potential_pe_non_electric_res():
    """
    Real Name: b'max potential pe non electric res'
    Original Eqn: b'max pe potential tot res heat ej+max peavail biofuels potential'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_pe_potential_tot_res_heat_ej() + max_peavail_biofuels_potential()


@cache('step')
def pes_tot_biogas_for_elec():
    """
    Real Name: b'pes tot biogas for elec'
    Original Eqn: b'pes biogas for elec plants+fes elec from biogas in chp plants+ losses chp biogas*share efficiency biogas for elec in chp plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_biogas_for_elec_plants() + fes_elec_from_biogas_in_chp_plants(
    ) + losses_chp_biogas() * share_efficiency_biogas_for_elec_in_chp_plants()


@cache('step')
def pes_tot_biogas_for_heat_com():
    """
    Real Name: b'pes tot biogas for heat com'
    Original Eqn: b'pes biogas for heat com plants+fes heat com from biogas in chp plants+losses chp biogas*(1-share efficiency biogas for elec in chp plants )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_biogas_for_heat_com_plants() + fes_heat_com_from_biogas_in_chp_plants(
    ) + losses_chp_biogas() * (1 - share_efficiency_biogas_for_elec_in_chp_plants())


@cache('step')
def pe_losses_nre_elec_generation():
    """
    Real Name: b'pe losses nre elec generation'
    Original Eqn: b'pe losses coal for elec ej+pe losses conv gas for elec ej+pe losses oil for elec ej+pe losses uncon gas for elec ej+pe losses uranium for elec ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_losses_coal_for_elec_ej() + pe_losses_conv_gas_for_elec_ej(
    ) + pe_losses_oil_for_elec_ej() + pe_losses_uncon_gas_for_elec_ej(
    ) + pe_losses_uranium_for_elec_ej()


@cache('step')
def elec_gen_related_losses_ej():
    """
    Real Name: b'elec gen related losses ej'
    Original Eqn: b'pe losses nre elec generation+pe losses res for elec'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_losses_nre_elec_generation() + pe_losses_res_for_elec()


@cache('step')
def pe_losses_biogas_for_elec():
    """
    Real Name: b'pe losses biogas for elec'
    Original Eqn: b'pes tot biogas for elec-fes elec from biogas ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_tot_biogas_for_elec() - fes_elec_from_biogas_ej()


@cache('step')
def pe_losses_waste_for_elec():
    """
    Real Name: b'pe losses waste for elec'
    Original Eqn: b'pes tot waste for elec-fes elec from waste ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_tot_waste_for_elec() - fes_elec_from_waste_ej()


@cache('step')
def max_pe_potential_tot_res_heat_ej():
    """
    Real Name: b'max pe potential tot res heat ej'
    Original Eqn: b'max pe potential biogas for heat+sum(max pe potential res for heat)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_pe_potential_biogas_for_heat() + sum(max_pe_potential_res_for_heat())


@cache('step')
def share_pes_biogas_for_elec():
    """
    Real Name: b'share pes biogas for elec'
    Original Eqn: b'pes tot biogas for elec/pes biogas ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_tot_biogas_for_elec() / pes_biogas_ej()


@cache('run')
def p_hydro_growth():
    """
    Real Name: b'p hydro growth'
    Original Eqn: b'0.028'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.028


@cache('step')
def fe_real_tot_generation_res_elec_twh():
    """
    Real Name: b'fe real tot generation res elec twh'
    Original Eqn: b'min(max(total fe elec demand after priorities twh, 0), potential tot generation res elec twh)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(np.maximum(total_fe_elec_demand_after_priorities_twh(), 0),
                      potential_tot_generation_res_elec_twh())


@cache('run')
def p_solar_pv_growth():
    """
    Real Name: b'p solar pv growth'
    Original Eqn: b'0.35'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.35


@cache('step')
def remaining_potential_constraint_on_new_res_heat_capacity():
    """
    Real Name: b'remaining potential constraint on new res heat capacity'
    Original Eqn: b'if then else(remaining potential res for heat[res heat]>threshold remaining potential new capacity ,1,remaining potential res for heat[res heat]*(1/threshold remaining potential new capacity ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        remaining_potential_res_for_heat() > threshold_remaining_potential_new_capacity(), 1,
        remaining_potential_res_for_heat() * (1 / threshold_remaining_potential_new_capacity()))


@cache('step')
def total_fe_elec_generation_twh():
    """
    Real Name: b'total fe elec generation twh'
    Original Eqn: b'fe elec generation from nre twh+fe tot generation all res elec twh+fes elec from waste twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fe_elec_generation_from_nre_twh() + fe_tot_generation_all_res_elec_twh(
    ) + fes_elec_from_waste_twh()


@cache('step')
def fe_tot_generation_all_res_elec_twh():
    """
    Real Name: b'fe tot generation all res elec twh'
    Original Eqn: b'fe real tot generation res elec twh+fes elec from res with priority twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fe_real_tot_generation_res_elec_twh() + fes_elec_from_res_with_priority_twh()


@cache('run')
def p_oceanic_growth():
    """
    Real Name: b'p oceanic growth'
    Original Eqn: b'0.048'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.048


@cache('step')
def pe_elec_generation_from_res_ej():
    """
    Real Name: b'pe elec generation from res ej'
    Original Eqn: b'pe bioe for elec generation ej+pe geot elec for elec generation ej+pe hydro for elec generation ej +pe oceanic for elec generation ej+pe solar pv for elec generation ej+pe csp for elec generation ej +pe onshore wind for elec generation ej+pe offshore wind for elec generation ej+pes tot biogas for elec'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_bioe_for_elec_generation_ej() + pe_geot_elec_for_elec_generation_ej(
    ) + pe_hydro_for_elec_generation_ej() + pe_oceanic_for_elec_generation_ej(
    ) + pe_solar_pv_for_elec_generation_ej() + pe_csp_for_elec_generation_ej(
    ) + pe_onshore_wind_for_elec_generation_ej() + pe_offshore_wind_for_elec_generation_ej(
    ) + pes_tot_biogas_for_elec()


@cache('run')
def p_res_elec_growth():
    """
    Real Name: b'p res elec growth'
    Original Eqn: b'p hydro growth'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        p_hydro_growth(),
        p_geot_growth(),
        p_solid_bioe_elec_growth(),
        p_oceanic_growth(),
        p_wind_onshore_growth(),
        p_wind_offshore_growth(),
        p_solar_pv_growth(),
        p_csp_growth()],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('step')
def share_res_electricity_generation():
    """
    Real Name: b'share res electricity generation'
    Original Eqn: b'fe tot generation all res elec twh/total fe elec generation twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fe_tot_generation_all_res_elec_twh() / total_fe_elec_generation_twh()


@cache('run')
def p_solid_bioe_elec_growth():
    """
    Real Name: b'p solid bioe elec growth'
    Original Eqn: b'0.072'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.072


@cache('run')
def p_csp_growth():
    """
    Real Name: b'p csp growth'
    Original Eqn: b'0.295'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.295


@cache('step')
def remaining_potential_tot_res_elec():
    """
    Real Name: b'remaining potential tot res elec'
    Original Eqn: b'if then else(max potential tot res elec twh > fe tot generation all res elec twh, (max potential tot res elec twh-fe tot generation all res elec twh)/max potential tot res elec twh, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        max_potential_tot_res_elec_twh() > fe_tot_generation_all_res_elec_twh(),
        (max_potential_tot_res_elec_twh() - fe_tot_generation_all_res_elec_twh()) /
        max_potential_tot_res_elec_twh(), 0)


@cache('run')
def p_wind_offshore_growth():
    """
    Real Name: b'p wind offshore growth'
    Original Eqn: b'0.41'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.41


@cache('run')
def p_wind_onshore_growth():
    """
    Real Name: b'p wind onshore growth'
    Original Eqn: b'0.251'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.251


@cache('step')
def elec_generation_dispatch_from_res_twh():
    """
    Real Name: b'elec generation dispatch from res twh'
    Original Eqn: b'fe elec generation from bioe twh+fe elec generation from geot elec twh+fe elec generation from hydro twh +fe elec generation from oceanic twh+fes elec from biogas twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fe_elec_generation_from_bioe_twh() + fe_elec_generation_from_geot_elec_twh(
    ) + fe_elec_generation_from_hydro_twh() + fe_elec_generation_from_oceanic_twh(
    ) + fes_elec_from_biogas_twh()


@cache('step')
def fes_elec_from_res_with_priority_twh():
    """
    Real Name: b'fes elec from res with priority twh'
    Original Eqn: b'fes elec from biogas twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fes_elec_from_biogas_twh()


@cache('step')
def abundance_res_elec():
    """
    Real Name: b'abundance res elec'
    Original Eqn: b'if then else(total fe elec demand after priorities twh=0,0, if then else(total fe elec demand after priorities twh > fe real tot generation res elec twh, (total fe elec demand after priorities twh-fe real tot generation res elec twh)/total fe elec demand after priorities twh, 0))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        total_fe_elec_demand_after_priorities_twh() < equality_threshold(), 0,
        if_then_else(
            total_fe_elec_demand_after_priorities_twh() > fe_real_tot_generation_res_elec_twh(),
            (total_fe_elec_demand_after_priorities_twh() - fe_real_tot_generation_res_elec_twh()) /
            total_fe_elec_demand_after_priorities_twh(), 0))


@cache('step')
def fes_elec_from_biow():
    """
    Real Name: b'fes elec from biow'
    Original Eqn: b'real generation res elec twh[solid bioe elec]+fes elec from biogas twh+fes elec from waste twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_generation_res_elec_twh().loc['solid bioe elec'].values + fes_elec_from_biogas_twh() + fes_elec_from_waste_twh()


@cache('run')
def p_geot_growth():
    """
    Real Name: b'p geot growth'
    Original Eqn: b'0.024'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.024


@cache('step')
def max_potential_tot_res_elec_twh():
    """
    Real Name: b'max potential tot res elec twh'
    Original Eqn: b'sum(max potential res elec twh)+max potential phs twe/twe per twh+max biogas ej*share pes biogas for elec/ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(max_potential_res_elec_twh()) + max_potential_phs_twe() / twe_per_twh(
    ) + max_biogas_ej() * share_pes_biogas_for_elec() / ej_per_twh()


@cache('run')
def p_solid_bioe_for_heat():
    """
    Real Name: b'p solid bioe for heat'
    Original Eqn: b'0.115'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.115


@cache('step')
def pe_real_generation_res_elec():
    """
    Real Name: b'pe real generation res elec'
    Original Eqn: b'real generation res elec twh[hydro]*ej per twh*res to fossil accounting'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        real_generation_res_elec_twh().loc['hydro'].values * ej_per_twh() * res_to_fossil_accounting(),
        real_generation_res_elec_twh().loc['geot elec'].values * ej_per_twh() * res_to_fossil_accounting(),
        (real_generation_res_elec_twh().loc['solid bioe elec'].values / efficiency_conversion_bioe_to_elec()) * ej_per_twh(),
        real_generation_res_elec_twh().loc['oceanic'].values * ej_per_twh() * res_to_fossil_accounting(),
        real_generation_res_elec_twh().loc['wind onshore'].values * ej_per_twh() * res_to_fossil_accounting(),
        real_generation_res_elec_twh().loc['wind offshore'].values * ej_per_twh() * res_to_fossil_accounting(),
        real_generation_res_elec_twh().loc['solar pv'].values * ej_per_twh() * res_to_fossil_accounting(),
        real_generation_res_elec_twh().loc['csp'].values * ej_per_twh() * res_to_fossil_accounting()],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('run')
def efficiency_res_heat():
    """
    Real Name: b'efficiency res heat'
    Original Eqn: b'efficiency solar panels for heat*losses solar for heat'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        efficiency_solar_panels_for_heat() * losses_solar_for_heat(),
        efficiency_geothermal_for_heat(),
        efficiency_conversion_bioe_plants_to_heat()],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('step')
def share_oil_dem_for_heat_com():
    """
    Real Name: b'share oil dem for heat com'
    Original Eqn: b'if then else(ped total oil ej>0, ped oil for heat plants ej/ped total oil ej,0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(ped_total_oil_ej() > 0,
                                  ped_oil_for_heat_plants_ej() / ped_total_oil_ej(), 0)


@cache('step')
def fe_elec_generation_from_total_oil_twh():
    """
    Real Name: b'fe elec generation from total oil twh'
    Original Eqn: b'pes oil ej*share oil dem for elec*efficiency liquids for electricity /ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_oil_ej() * share_oil_dem_for_elec() * efficiency_liquids_for_electricity() / ej_per_twh()


@cache('step')
def total_fe_heat_generation_ej():
    """
    Real Name: b'total fe heat generation ej'
    Original Eqn: b'fes res for heat ej+fes heat com from waste ej+fes nre for heat'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fes_res_for_heat_ej() + fes_heat_com_from_waste_ej() + fes_nre_for_heat()


@cache('step')
def share_coal_dem_for_elec():
    """
    Real Name: b'share coal dem for elec'
    Original Eqn: b'if then else(ped coal ej>0, pe demand coal elec plants ej/ped coal ej, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(ped_coal_ej() > 0,
                                  pe_demand_coal_elec_plants_ej() / ped_coal_ej(), 0)


@cache('step')
def pe_losses_oil_for_elec_ej():
    """
    Real Name: b'pe losses oil for elec ej'
    Original Eqn: b'pes oil ej*share oil dem for elec*(1-efficiency liquids for electricity )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_oil_ej() * share_oil_dem_for_elec() * (1 - efficiency_liquids_for_electricity())


@cache('step')
def share_oil_dem_for_elec():
    """
    Real Name: b'share oil dem for elec'
    Original Eqn: b'if then else(ped total oil ej>0, pe demand oil elec plants ej/ ped total oil ej, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(ped_total_oil_ej() > 0,
                                  pe_demand_oil_elec_plants_ej() / ped_total_oil_ej(), 0)


@cache('step')
def share_coal_dem_for_heat_com():
    """
    Real Name: b'share coal dem for heat com'
    Original Eqn: b'if then else(ped coal ej>0, ped coal for heat plants ej/ped coal ej, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(ped_coal_ej() > 0,
                                  ped_coal_for_heat_plants_ej() / ped_coal_ej(), 0)


@cache('step')
def fe_elec_generation_from_conv_gas_twh():
    """
    Real Name: b'fe elec generation from conv gas twh'
    Original Eqn: b'real extraction conv gas ej*share natx gas dem for elec*efficiency gas for electricity /ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_extraction_conv_gas_ej() * share_natx_gas_dem_for_elec(
    ) * efficiency_gas_for_electricity() / ej_per_twh()


@cache('step')
def share_res_heat_generation():
    """
    Real Name: b'share res heat generation'
    Original Eqn: b'fes res for heat ej/total fe heat generation ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fes_res_for_heat_ej() / total_fe_heat_generation_ej()


@cache('step')
def share_natx_gas_dem_for_elec():
    """
    Real Name: b'share natx gas dem for elec'
    Original Eqn: b'if then else(ped natx gas ej>0, pe demand gas elec plants ej /ped natx gas ej, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(ped_natx_gas_ej() > 0,
                                  pe_demand_gas_elec_plants_ej() / ped_natx_gas_ej(), 0)


@cache('step')
def pe_losses_conv_gas_for_elec_ej():
    """
    Real Name: b'pe losses conv gas for elec ej'
    Original Eqn: b'real extraction conv gas ej*share natx gas dem for elec*(1-efficiency gas for electricity )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_extraction_conv_gas_ej() * share_natx_gas_dem_for_elec() * (
        1 - efficiency_gas_for_electricity())


@cache('step')
def pe_losses_coal_for_elec_ej():
    """
    Real Name: b'pe losses coal for elec ej'
    Original Eqn: b'extraction coal ej*share coal dem for elec*(1-efficiency coal for electricity )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_coal_ej() * share_coal_dem_for_elec() * (1 -
                                                               efficiency_coal_for_electricity())


@cache('step')
def fe_elec_generation_from_coal_twh():
    """
    Real Name: b'fe elec generation from coal twh'
    Original Eqn: b'extraction coal ej*efficiency coal for electricity*share coal dem for elec/ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_coal_ej() * efficiency_coal_for_electricity() * share_coal_dem_for_elec(
    ) / ej_per_twh()


@cache('step')
def share_natx_gas_dem_for_heat_com():
    """
    Real Name: b'share natx gas dem for heat com'
    Original Eqn: b'if then else(ped natx gas ej>0, ped gases for heat plants ej /ped natx gas ej, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(ped_natx_gas_ej() > 0,
                                  ped_gases_for_heat_plants_ej() / ped_natx_gas_ej(), 0)


@cache('step')
def year_scarcity_heat():
    """
    Real Name: b'year scarcity heat'
    Original Eqn: b'if then else(abundance heat>0.95, 0, Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(abundance_heat() > 0.95, 0, time())


@cache('step')
def fes_heat_com_from_biogas_in_chp_plants():
    """
    Real Name: b'fes heat com from biogas in chp plants'
    Original Eqn: b'pes biogas for chp*efficiency biogas for heat chp plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_biogas_for_chp() * efficiency_biogas_for_heat_chp_plants()


@cache('run')
def efficiency_biogas_for_heat_plants():
    """
    Real Name: b'efficiency biogas for heat plants'
    Original Eqn: b'0.7357016523145766'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.7357016523145766


@cache('step')
def fes_elec_from_biogas_in_chp_plants():
    """
    Real Name: b'fes elec from biogas in chp plants'
    Original Eqn: b'pes biogas for chp*efficiency biogas for elec chp plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_biogas_for_chp() * efficiency_biogas_for_elec_chp_plants()


@cache('step')
def fes_elec_from_biogas_ej():
    """
    Real Name: b'fes elec from biogas ej'
    Original Eqn: b'fes elec from biogas in chp plants+fes elec from biogas in elec plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fes_elec_from_biogas_in_chp_plants() + fes_elec_from_biogas_in_elec_plants()


@cache('step')
def pes_biogas_for_heat_com_plants():
    """
    Real Name: b'pes biogas for heat com plants'
    Original Eqn: b'pes biogas ej*share pes biogas for heat com plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_biogas_ej() * share_pes_biogas_for_heat_com_plants()


@cache('step')
def fes_elec_from_biogas_in_elec_plants():
    """
    Real Name: b'fes elec from biogas in elec plants'
    Original Eqn: b'pes biogas for elec plants*efficiency biogas for elec plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_biogas_for_elec_plants() * efficiency_biogas_for_elec_plants()


@cache('run')
def efficiency_biogas_for_elec_plants():
    """
    Real Name: b'efficiency biogas for elec plants'
    Original Eqn: b'0.29585066538416954'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.29585066538416954


@cache('step')
def fes_biogas_for_heat_com_plants():
    """
    Real Name: b'fes biogas for heat com plants'
    Original Eqn: b'pes biogas for heat com plants*efficiency biogas for heat plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_biogas_for_heat_com_plants() * efficiency_biogas_for_heat_plants()


@cache('step')
def pes_biogas_for_elec_plants():
    """
    Real Name: b'pes biogas for elec plants'
    Original Eqn: b'pes biogas ej*share pes biogas for elec plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_biogas_ej() * share_pes_biogas_for_elec_plants()


@cache('run')
def share_pes_biogas_tfc():
    """
    Real Name: b'share pes biogas tfc'
    Original Eqn: b'0.4098230262379001'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.4098230262379001


@cache('step')
def potential_pes_biogas_for_tfc():
    """
    Real Name: b'potential pes biogas for tfc'
    Original Eqn: b'pes biogas ej*share pes biogas tfc'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_biogas_ej() * share_pes_biogas_tfc()


@cache('step')
def fes_elec_from_biogas_twh():
    """
    Real Name: b'fes elec from biogas twh'
    Original Eqn: b'fes elec from biogas ej/ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fes_elec_from_biogas_ej() / ej_per_twh()


@cache('step')
def pes_biogas_for_chp():
    """
    Real Name: b'pes biogas for chp'
    Original Eqn: b'pes biogas ej*share pes biogas for chp'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_biogas_ej() * share_pes_biogas_for_chp()


@cache('run')
def share_pes_biogas_for_heat_com_plants():
    """
    Real Name: b'share pes biogas for heat com plants'
    Original Eqn: b'0.007384519814561412'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.007384519814561412


@cache('run')
def efficiency_biogas_for_elec_chp_plants():
    """
    Real Name: b'efficiency biogas for elec chp plants'
    Original Eqn: b'0.3901372793044364'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.3901372793044364


@cache('step')
def fes_heat_com_from_biogas_ej():
    """
    Real Name: b'fes heat com from biogas ej'
    Original Eqn: b'fes biogas for heat com plants+fes heat com from biogas in chp plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fes_biogas_for_heat_com_plants() + fes_heat_com_from_biogas_in_chp_plants()


@cache('run')
def efficiency_biogas_for_heat_chp_plants():
    """
    Real Name: b'efficiency biogas for heat chp plants'
    Original Eqn: b'0.07955076327527948'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.07955076327527948


@cache('run')
def share_pes_biogas_for_elec_plants():
    """
    Real Name: b'share pes biogas for elec plants'
    Original Eqn: b'0.34932337340295677'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.34932337340295677


@cache('run')
def share_pes_biogas_for_chp():
    """
    Real Name: b'share pes biogas for chp'
    Original Eqn: b'0.23346908054458176'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.23346908054458176


@cache('step')
def demand_elec_plants_fossil_fuels_twh():
    """
    Real Name: b'demand elec plants fossil fuels twh'
    Original Eqn: b'max(demand elec nre twh-fe nuclear elec generation twh-fes elec fossil fuel chp plants twh, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        demand_elec_nre_twh() - fe_nuclear_elec_generation_twh() -
        fes_elec_fossil_fuel_chp_plants_twh(), 0)


@cache('step')
def total_extraction_nre_ej():
    """
    Real Name: b'total extraction nre ej'
    Original Eqn: b'extraction coal ej+real extraction conv gas ej+real extraction conv oil ej +real extraction unconv gas ej+real extraction unconv oil ej+extraction uranium ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_coal_ej() + real_extraction_conv_gas_ej() + real_extraction_conv_oil_ej(
    ) + real_extraction_unconv_gas_ej() + real_extraction_unconv_oil_ej() + extraction_uranium_ej(
    )


@cache('step')
def constrain_rr_improv_for_alt_techn_per_mineral():
    """
    Real Name: b'constrain rr improv for alt techn per mineral'
    Original Eqn: b'if then else(recycling rates minerals alt techn[materials]<max recycling rates minerals ,1,0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        recycling_rates_minerals_alt_techn() < max_recycling_rates_minerals(), 1, 0)


@cache('step')
def constrain_rr_improv_for_rest_per_mineral():
    """
    Real Name: b'constrain rr improv for rest per mineral'
    Original Eqn: b'if then else(recycling rates minerals rest[materials]<max recycling rates minerals ,1,0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(recycling_rates_minerals_rest() < max_recycling_rates_minerals(),
                                  1, 0)


@cache('step')
def ced_o_and_m_over_lifetime_per_material_res_elec_var():
    """
    Real Name: b'ced o and m over lifetime per material res elec var'
    Original Eqn: b'res elec capacity under construction tw[res elec]*materials for o and m per capacity installed res elec[res elec,materials]*energy cons per unit of material cons for res elec[materials]*lifetime res elec[res elec]*(m per t/kg per mt)*(kg per mt/mj per ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    ret = res_elec_capacity_under_construction_tw(
    ) * materials_for_o_and_m_per_capacity_installed_res_elec(
    ) * energy_cons_per_unit_of_material_cons_for_res_elec() * lifetime_res_elec() * (
        m_per_t() / kg_per_mt()) * (kg_per_mt() / mj_per_ej())

    return align_by_dims(ret, ('res elec', 'materials'))



@cache('step')
def energy_cons_per_unit_of_material_cons_for_res_elec():
    """
    Real Name: b'energy cons per unit of material cons for res elec'
    Original Eqn: b'recycling rates minerals alt techn[materials]*initial energy cons per unit of material cons xrecycledx[materials]+(1-recycling rates minerals alt techn[materials])*initial energy cons per unit of material cons xvirginx[materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return recycling_rates_minerals_alt_techn(
    ) * initial_energy_cons_per_unit_of_material_cons_xrecycledx() + (
        1 - recycling_rates_minerals_alt_techn()
    ) * initial_energy_cons_per_unit_of_material_cons_xvirginx()


@cache('step')
def ced_new_cap_per_material_res_elec_var():
    """
    Real Name: b'ced new cap per material res elec var'
    Original Eqn: b'materials required for new res elec mt[res elec,materials]*energy cons per unit of material cons for res elec[materials]*kg per mt/mj per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return materials_required_for_new_res_elec_mt(
    ) * energy_cons_per_unit_of_material_cons_for_res_elec() * kg_per_mt() / mj_per_ej()


@cache('step')
def energy_required_for_material_consumption_for_new_res_elec():
    """
    Real Name: b'energy required for material consumption for new res elec'
    Original Eqn: b'materials required for new res elec mt[res elec,materials]*energy cons per unit of material cons for res elec[materials]*kg per mt/mj per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return materials_required_for_new_res_elec_mt(
    ) * energy_cons_per_unit_of_material_cons_for_res_elec() * kg_per_mt() / mj_per_ej()


@cache('step')
def energy_required_for_material_consumption_for_o_and_m_res_elec():
    """
    Real Name: b'energy required for material consumption for o and m res elec'
    Original Eqn: b'materials required for o and m res elec mt[res elec,materials]*energy cons per unit of material cons for res elec[materials]*kg per mt/mj per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return materials_required_for_o_and_m_res_elec_mt(
    ) * energy_cons_per_unit_of_material_cons_for_res_elec() * kg_per_mt() / mj_per_ej()



@cache('step')
def share_other_cumulative_demand_to_extract_vs_resources_materials():
    """
    Real Name: b'share other cumulative demand to extract vs resources materials'
    Original Eqn: b'if then else(current mineral resources mt[materials]<=0,0,cum materials to extract rest from 2015[materials]/current mineral resources mt[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        current_mineral_resources_mt() <= 0, 0,
        cum_materials_to_extract_rest_from_2015() / current_mineral_resources_mt())


@cache('step')
def materials_to_extract_rest_from_2015_mt():
    """
    Real Name: b'materials to extract rest from 2015 mt'
    Original Eqn: b'if then else(Time<2015,0,materials to extract rest mt[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2015, 0, materials_to_extract_rest_mt())


@cache('step')
def total_recycled_materials_for_res_elec_mt():
    """
    Real Name: b'total recycled materials for res elec mt'
    Original Eqn: b'total materials required for res elec mt[materials]-total materials to extract for res elec mt[materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_materials_required_for_res_elec_mt() - total_materials_to_extract_for_res_elec_mt()


@cache('step')
def cum_materials_to_extract_rest():
    """
    Real Name: b'cum materials to extract rest'
    Original Eqn: b'integ ( materials to extract rest mt[materials], initial cumulated material requirements for rest 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cum_materials_to_extract_rest()


@cache('step')
def cum_materials_to_extract_rest_from_2015():
    """
    Real Name: b'cum materials to extract rest from 2015'
    Original Eqn: b'integ ( materials to extract rest from 2015 mt[materials], initial cumulated material requirements for rest 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cum_materials_to_extract_rest_from_2015()


@cache('step')
def share_other_cumulative_demand_to_extract_vs_reserves_materials():
    """
    Real Name: b'share other cumulative demand to extract vs reserves materials'
    Original Eqn: b'if then else(current mineral reserves mt[materials]<=0,0,cum materials to extract rest from 2015[materials]/current mineral reserves mt[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        current_mineral_reserves_mt() <= 0, 0,
        cum_materials_to_extract_rest_from_2015() / current_mineral_reserves_mt())


@cache('step')
def materials_availability_xannual_extractionx():
    """
    Real Name: b'materials availability xannual extractionx'
    Original Eqn: b'if then else(total materials to extract mt[materials]<maximum annual extraction materials[materials], 1, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        total_materials_to_extract_mt() < maximum_annual_extraction_materials(), 1, 0)


@cache('run')
def mt_per_tonne():
    """
    Real Name: b'mt per tonne'
    Original Eqn: b'1e-06'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1e-06


@cache('run')
def initial_cumulated_material_requirements_for_rest_1995():
    """
    Real Name: b'initial cumulated material requirements for rest 1995'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0]*58,
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('run')
def p_common_rr_minerals_variation_rest():
    """
    Real Name: b'p common rr minerals variation rest'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('step')
def cum_materials_to_extract_for_res_elec_from_2015():
    """
    Real Name: b'cum materials to extract for res elec from 2015'
    Original Eqn: b'integ ( total materials to extract for res elec from 2015 mt[materials], initial cumulated material requirements for res elec 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cum_materials_to_extract_for_res_elec_from_2015()


@cache('step')
def total_materials_to_extract_for_res_elec_mt():
    """
    Real Name: b'total materials to extract for res elec mt'
    Original Eqn: b'total materials required for res elec mt[materials]*(1-recycling rates minerals alt techn[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_materials_required_for_res_elec_mt() * (1 - recycling_rates_minerals_alt_techn())


@cache('step')
def cum_materials_to_extract_for_res_elec():
    """
    Real Name: b'cum materials to extract for res elec'
    Original Eqn: b'integ ( total materials to extract for res elec mt[materials], initial cumulated material requirements for res elec 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cum_materials_to_extract_for_res_elec()


@cache('step')
def total_materials_to_extract_for_res_elec_from_2015_mt():
    """
    Real Name: b'total materials to extract for res elec from 2015 mt'
    Original Eqn: b'if then else(Time<2015,0,total materials to extract for res elec mt[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2015, 0, total_materials_to_extract_for_res_elec_mt())


@cache('run')
def max_recycling_rates_minerals():
    """
    Real Name: b'max recycling rates minerals'
    Original Eqn: b'0.95'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.95


@cache('run')
def p_common_rr_minerals_variation_alt_techn():
    """
    Real Name: b'p common rr minerals variation alt techn'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def current_recycling_rates_minerals():
    """
    Real Name: b'current recycling rates minerals'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.56,0.0,0.15,0.0,0.0,0.9,0.48,0.0,0.0,0.0,0.0,0.0,0.0,0.005,0.0,0.0,0.0,0.005,0.71,0.0,0.0,0.0,0.0,0.005,0.0,0.39,0.53,0.0,0.0,0.3,0.0,0.0,0.0,0.6,0.0,0.0,0.0,0.735,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.635,0.0,0.75,0.0,0.0,0.0,0.005,0.91,0.0,0.005,0.0,0.395],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('run')
def historic_improvement_recycling_rates_minerals():
    """
    Real Name: b'historic improvement recycling rates minerals'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.
    ],
                        coords={
                            'materials': [
                                'adhesive', 'aluminium', 'aluminium mirrors', 'cadmium',
                                'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy',
                                'electric div electronic components', 'evacuation lines',
                                'fiberglass', 'foam glass', 'galium', 'glass',
                                'glass reinforcing plastic', 'gravel', 'indium', 'iron',
                                'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium',
                                'lubricant', 'magnesium', 'manganese', 'heavy equipment',
                                'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic',
                                'neodymium', 'nickel', 'over grid 15 percentx',
                                'over grid 5 percentx', 'paint', 'lead', 'plastics',
                                'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand',
                                'silicon wafer modules', 'silver', 'site preparation', 'tin',
                                'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium',
                                'titanium dioxide', 'vanadium', 'wires', 'zinc'
                            ]
                        },
                        dims=['materials'])


@cache('run')
def initial_energy_cons_per_unit_of_material_cons_xrecycledx():
    """
    Real Name: b'initial energy cons per unit of material cons xrecycledx'
    Original Eqn: b'if then else(initial energy cons per unit of material cons xrecycledx data[materials]=0,initial energy cons per unit of material cons xvirginx[materials], initial energy cons per unit of material cons xrecycledx data[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        initial_energy_cons_per_unit_of_material_cons_xrecycledx_data() < equality_threshold(),
        initial_energy_cons_per_unit_of_material_cons_xvirginx(),
        initial_energy_cons_per_unit_of_material_cons_xrecycledx_data())


@cache('step')
def materials_required_for_o_and_m_res_elec_mt():
    """
    Real Name: b'materials required for o and m res elec mt'
    Original Eqn: b'installed capacity res elec tw[res elec]*materials for o and m per capacity installed res elec[res elec,materials]*m per t/kg per mt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return installed_capacity_res_elec_tw(
    ) * materials_for_o_and_m_per_capacity_installed_res_elec() * m_per_t() / kg_per_mt()


@cache('step')
def share_tot_cum_dem_vs_reserves_materials():
    """
    Real Name: b'share tot cum dem vs reserves materials'
    Original Eqn: b'if then else(current mineral reserves mt[materials]<=0,0,total cumulative demand materials to extract from 2015[materials]/current mineral reserves mt[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        current_mineral_reserves_mt() <= 0, 0,
        total_cumulative_demand_materials_to_extract_from_2015() / current_mineral_reserves_mt())


@cache('step')
def share_tot_cum_dem_vs_resources_materials():
    """
    Real Name: b'share tot cum dem vs resources materials'
    Original Eqn: b'if then else(current mineral resources mt[materials]<=0,0,total cumulative demand materials to extract from 2015[materials]/current mineral resources mt[materials])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        current_mineral_resources_mt() <= 0, 0,
        total_cumulative_demand_materials_to_extract_from_2015() / current_mineral_resources_mt())


@cache('run')
def maximum_annual_extraction_materials():
    """
    Real Name: b'maximum annual extraction materials'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('step')
def materials_availability_xresourcesx():
    """
    Real Name: b'materials availability xresourcesx'
    Original Eqn: b'if then else(share tot cum dem vs resources materials[materials]<1,1,0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(share_tot_cum_dem_vs_resources_materials() < 1, 1, 0)


@cache('step')
def materials_availability_xreservesx():
    """
    Real Name: b'materials availability xreservesx'
    Original Eqn: b'if then else(share tot cum dem vs reserves materials[materials]<1,1,0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(share_tot_cum_dem_vs_reserves_materials() < 1, 1, 0)


@cache('step')
def tpes_ej():
    """
    Real Name: b'tpes ej'
    Original Eqn: b'total extraction nre ej+tpe from res ej+pes waste ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_extraction_nre_ej() + tpe_from_res_ej() + pes_waste_ej()


@cache('step')
def fes_heat_com_from_waste_ej():
    """
    Real Name: b'fes heat com from waste ej'
    Original Eqn: b'fes waste for heat com plants+fes heat com from waste in chp plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fes_waste_for_heat_com_plants() + fes_heat_com_from_waste_in_chp_plants()


@cache('step')
def fes_waste_for_heat_com_plants():
    """
    Real Name: b'fes waste for heat com plants'
    Original Eqn: b'pes waste for heat com plants*efficiency waste for heat plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_waste_for_heat_com_plants() * efficiency_waste_for_heat_plants()


@cache('step')
def fes_elec_from_waste_in_chp_plants():
    """
    Real Name: b'fes elec from waste in chp plants'
    Original Eqn: b'pes waste for chp plants*efficiency waste for elec chp plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_waste_for_chp_plants() * efficiency_waste_for_elec_chp_plants()


@cache('step')
def fes_elec_from_waste_in_elec_plants():
    """
    Real Name: b'fes elec from waste in elec plants'
    Original Eqn: b'pes waste for elec plants*efficiency waste for elec plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_waste_for_elec_plants() * efficiency_waste_for_elec_plants()


@cache('step')
def fes_heat_com_from_waste_in_chp_plants():
    """
    Real Name: b'fes heat com from waste in chp plants'
    Original Eqn: b'pes waste for chp plants*efficiency waste for heat chp plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_waste_for_chp_plants() * efficiency_waste_for_heat_chp_plants()


@cache('step')
def pes_waste_for_heat_com_plants():
    """
    Real Name: b'pes waste for heat com plants'
    Original Eqn: b'pes waste ej*share pes waste for heat com plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_waste_ej() * share_pes_waste_for_heat_com_plants()


@cache('run')
def share_pes_waste_for_heat_com_plants():
    """
    Real Name: b'share pes waste for heat com plants'
    Original Eqn: b'0.09050587321058197'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.09050587321058197


@cache('run')
def share_pes_waste_tfc():
    """
    Real Name: b'share pes waste tfc'
    Original Eqn: b'0.19153003642106164'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.19153003642106164


@cache('run')
def share_pes_waste_for_chp():
    """
    Real Name: b'share pes waste for chp'
    Original Eqn: b'0.31858724855960674'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.31858724855960674


@cache('run')
def share_pes_waste_for_elec_plants():
    """
    Real Name: b'share pes waste for elec plants'
    Original Eqn: b'0.39937684180874966'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.39937684180874966


@cache('step')
def waste_change():
    """
    Real Name: b'waste change'
    Original Eqn: b'if then else(annual gdp growth rate<0, annual gdp growth rate, p waste change)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(annual_gdp_growth_rate() < 0, annual_gdp_growth_rate(),
                                  p_waste_change())


@cache('step')
def fes_elec_from_waste_ej():
    """
    Real Name: b'fes elec from waste ej'
    Original Eqn: b'fes elec from waste in chp plants+fes elec from waste in elec plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fes_elec_from_waste_in_chp_plants() + fes_elec_from_waste_in_elec_plants()


@cache('step')
def fes_elec_from_waste_twh():
    """
    Real Name: b'fes elec from waste twh'
    Original Eqn: b'fes elec from waste ej/ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fes_elec_from_waste_ej() / ej_per_twh()


@cache('run')
def efficiency_waste_for_elec_plants():
    """
    Real Name: b'efficiency waste for elec plants'
    Original Eqn: b'0.24469672999410882'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.24469672999410882


@cache('step')
def pes_waste_ej():
    """
    Real Name: b'pes waste ej'
    Original Eqn: b'integ ( new waste supply ej, initial pes waste)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_pes_waste_ej()


@cache('step')
def pes_waste_for_chp_plants():
    """
    Real Name: b'pes waste for chp plants'
    Original Eqn: b'pes waste ej*share pes waste for chp'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_waste_ej() * share_pes_waste_for_chp()


@cache('run')
def efficiency_waste_for_elec_chp_plants():
    """
    Real Name: b'efficiency waste for elec chp plants'
    Original Eqn: b'0.17149829235093653'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.17149829235093653


@cache('run')
def initial_pes_waste():
    """
    Real Name: b'initial pes waste'
    Original Eqn: b'0.94403359'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.94403359


@cache('step')
def pes_waste_for_tfc():
    """
    Real Name: b'pes waste for tfc'
    Original Eqn: b'pes waste ej*share pes waste tfc'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_waste_ej() * share_pes_waste_tfc()


@cache('run')
def efficiency_waste_for_heat_chp_plants():
    """
    Real Name: b'efficiency waste for heat chp plants'
    Original Eqn: b'0.33592792668422766'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.33592792668422766


@cache('run')
def p_waste_change():
    """
    Real Name: b'p waste change'
    Original Eqn: b'0.04436'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.04436


@cache('run')
def efficiency_waste_for_heat_plants():
    """
    Real Name: b'efficiency waste for heat plants'
    Original Eqn: b'0.7066660881268088'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.7066660881268088


@cache('run')
def max_waste():
    """
    Real Name: b'max waste'
    Original Eqn: b'4'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 4


@cache('step')
def pes_solids_bioe_and_waste_ej():
    """
    Real Name: b'pes solids bioe and waste ej'
    Original Eqn: b'pes solids bioe ej-pes waste ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_solids_bioe_ej() - pes_waste_ej()


@cache('run')
def past_waste_growth():
    """
    Real Name: b'past waste growth'
    Original Eqn: b'0.0443634053842744'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.0443634053842744


@cache('step')
def ch4_emissions_oil():
    """
    Real Name: b'ch4 emissions oil'
    Original Eqn: b'pes oil ej*gch4 per mj oil*mj per ej/g per mt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_oil_ej() * gch4_per_mj_oil() * mj_per_ej() / g_per_mt()


@cache('run')
def gch4_per_mj_coal():
    """
    Real Name: b'gch4 per mj coal'
    Original Eqn: b'0.094'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.094


@cache('run')
def gch4_per_mj_oil():
    """
    Real Name: b'gch4 per mj oil'
    Original Eqn: b'0.094'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.094


@cache('step')
def fe_elec_generation_from_fossil_fuels_twh():
    """
    Real Name: b'fe elec generation from fossil fuels twh'
    Original Eqn: b'fe elec generation from coal twh+fe elec generation from conv gas twh+fe elec generation from unconv gas twh +fe elec generation from total oil twh+fes elec fossil fuel chp plants twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fe_elec_generation_from_coal_twh() + fe_elec_generation_from_conv_gas_twh(
    ) + fe_elec_generation_from_unconv_gas_twh() + fe_elec_generation_from_total_oil_twh(
    ) + fes_elec_fossil_fuel_chp_plants_twh()


@cache('step')
def pe_demand_uranium_ej():
    """
    Real Name: b'pe demand uranium ej'
    Original Eqn: b'potential generation nuclear elec twh*ej per twh/efficiency uranium for electricity'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return potential_generation_nuclear_elec_twh() * ej_per_twh(
    ) / efficiency_uranium_for_electricity()


@cache('step')
def fes_elec_fossil_fuel_chp_plants_twh():
    """
    Real Name: b'fes elec fossil fuel chp plants twh'
    Original Eqn: b'fes elec fossil fuel chp plants ej/ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fes_elec_fossil_fuel_chp_plants_ej() / ej_per_twh()


@cache('step')
def fes_heat_com_fossil_fuels_chp_plants_ej():
    """
    Real Name: b'fes heat com fossil fuels chp plants ej'
    Original Eqn: b'fed heat fossil fuels chp plants ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_fossil_fuels_chp_plants_ej()


@cache('step')
def potential_generation_nuclear_elec_twh():
    """
    Real Name: b'potential generation nuclear elec twh'
    Original Eqn: b'min(installed capacity nuclear tw*cp nuclear/twe per twh, demand elec nre twh)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(installed_capacity_nuclear_tw() * cp_nuclear() / twe_per_twh(),
                      demand_elec_nre_twh())


@cache('run')
def threshold_remaining_potential_new_capacity():
    """
    Real Name: b'threshold remaining potential new capacity'
    Original Eqn: b'0.5'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.5


@cache('step')
def installed_capacity_res_elec_tw():
    """
    Real Name: b'installed capacity res elec tw'
    Original Eqn: b'integ ( res elec capacity under construction tw[res elec]-wear res elec[res elec], initial instal cap res elec[res elec])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_installed_capacity_res_elec_tw()


@cache('run')
def total_time_plan_plus_constr_res_elec():
    """
    Real Name: b'total time plan plus constr res elec'
    Original Eqn: b'max(time construction res elec[res elec],time step)+max(time planification res elec[ res elec],time step)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(time_construction_res_elec(), time_step()) + np.maximum(
        time_planification_res_elec(), time_step())


@cache('step')
def new_required_capacity_res_elec():
    """
    Real Name: b'new required capacity res elec'
    Original Eqn: b'if then else(Time<(2014-total time plan plus constr res elec[res elec]), historic new required capacity res elec[res elec],installed capacity res elec tw[res elec]*adapt growth res elec after allocation[res elec]*remaining potential constraint on new res elec capacity [res elec]*abundance res elec2)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < (2014 - total_time_plan_plus_constr_res_elec()),
        historic_new_required_capacity_res_elec(),
        installed_capacity_res_elec_tw() * adapt_growth_res_elec_after_allocation() *
        remaining_potential_constraint_on_new_res_elec_capacity() * abundance_res_elec2())


@cache('step')
def initial_capacity_in_construction_res_elec():
    """
    Real Name: b'initial capacity in construction res elec'
    Original Eqn: b'initial required capacity res elec[res elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return initial_required_capacity_res_elec()


@cache('step')
def remaining_potential_constraint_on_new_res_elec_capacity():
    """
    Real Name: b'remaining potential constraint on new res elec capacity'
    Original Eqn: b'if then else(remaining potential res elec after intermitt[res elec]>threshold remaining potential new capacity ,1,remaining potential res elec after intermitt [res elec]*(1/threshold remaining potential new capacity))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        remaining_potential_res_elec_after_intermitt() >
        threshold_remaining_potential_new_capacity(), 1,
        remaining_potential_res_elec_after_intermitt() *
        (1 / threshold_remaining_potential_new_capacity()))


@cache('step')
def required_capacity_res_elec_tw():
    """
    Real Name: b'required capacity res elec tw'
    Original Eqn: b'integ ( new required capacity res elec[res elec]-new res elec capacity under planning[res elec], initial required capacity res elec[res elec])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_required_capacity_res_elec_tw()


@cache('step')
def res_elec_planned_capacity_tw():
    """
    Real Name: b'res elec planned capacity tw'
    Original Eqn: b'integ ( new res elec capacity under planning[res elec]+replacement capacity res elec[res elec]-res elec capacity under construction tw[res elec], initial capacity in construction res elec[res elec])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_res_elec_planned_capacity_tw()


@cache('run')
def initial_energy_cons_per_unit_of_material_cons_xrecycledx_data():
    """
    Real Name: b'initial energy cons per unit of material cons xrecycledx data'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """

    return xr.DataArray(data=[0.0,29.0,0.0,0.0,0.0,0.0,0.0,16.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.4,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,10.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,258.0,60.0,3710.0,36.0,72.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])



@cache('run')
def cp_phs():
    """
    Real Name: b'cp phs'
    Original Eqn: b'0.1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.1


@cache('run')
def max_potential_phs_twe():
    """
    Real Name: b'max potential phs twe'
    Original Eqn: b'0.25'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.25


@cache('run')
def max_capacity_potential_phs():
    """
    Real Name: b'max capacity potential phs'
    Original Eqn: b'max potential phs twe/cp phs'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_potential_phs_twe() / cp_phs()


@cache('run')
def materials_per_new_res_elec_capacity_installed_hvdcs():
    """
    Real Name: b'materials per new res elec capacity installed hvdcs'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """

    return xr.DataArray(data=[0.0,100.0,0.0,0.0,0.0,0.0,0.0,125.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,435.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1160.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,112.0,0.0,15.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,200.0,7.0,0.0,0.0,0.0,0.0,0.0,0.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])



@cache('run')
def materials_per_new_res_elec_capacity_installed_material_overgrid_high_power():
    """
    Real Name: b'materials per new res elec capacity installed material overgrid high power'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """

    return xr.DataArray(data=[0.0,7362.0,0.0,0.0,0.0,48.0,0.0,2044.0,6200.0,0.0,0.0,0.0,1140.0,0.0,0.0,562.0,0.0,0.0,0.0,29683.0,0.0,7500.0,0.0,0.0,0.0,0.0,0.0,0.0,40.0,130000.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,11.0,1390.0,970.0,190.0,0.0,0.0,160000.0,0.0,0.0,0.0,0.0,64.0,0.0,2651.0,2544.0,0.0,0.0,0.0,0.0,0.0,200.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])



@cache('step')
def real_growth_gtl():
    """
    Real Name: b'real growth gtl'
    Original Eqn: b'if then else(abundance gases>=abundance liquids, if then else(abundance gases=1, exogenous growth gtl,0 ),0)*abundance liquids gtl*scarcity conv oil'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        abundance_gases() >= abundance_liquids(),
        if_then_else(abundance_gases() - 1 < equality_threshold(), exogenous_growth_gtl(), 0),
        0) * abundance_liquids_gtl() * scarcity_conv_oil()


@cache('step')
def scarcity_conv_gas_delayed_1yr():
    """
    Real Name: b'scarcity conv gas delayed 1yr'
    Original Eqn: b'delay fixed ( scarcity conv gas, 1, 0.2502)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_scarcity_conv_gas_round1__time_step___time_step_02502_1__time_step()


@cache('step')
def scarcity_conv_oil_delayed_1yr():
    """
    Real Name: b'scarcity conv oil delayed 1yr'
    Original Eqn: b'delay fixed ( scarcity conv oil, 1, 0.3989)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_scarcity_conv_oil_round1__time_step___time_step_03989_1__time_step()


@cache('step')
def pes_natx_gas():
    """
    Real Name: b'pes natx gas'
    Original Eqn: b'real extraction conv gas ej+real extraction unconv gas ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_extraction_conv_gas_ej() + real_extraction_unconv_gas_ej()


@cache('step')
def fe_elec_generation_from_unconv_gas_twh():
    """
    Real Name: b'fe elec generation from unconv gas twh'
    Original Eqn: b'real extraction unconv gas ej*share natx gas dem for elec*efficiency gas for electricity /ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_extraction_unconv_gas_ej() * share_natx_gas_dem_for_elec(
    ) * efficiency_gas_for_electricity() / ej_per_twh()


@cache('run')
def exponent_availability_conv_oil():
    """
    Real Name: b'exponent availability conv oil'
    Original Eqn: b'1/4'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1 / 4


@cache('step')
def pe_losses_uncon_gas_for_elec_ej():
    """
    Real Name: b'pe losses uncon gas for elec ej'
    Original Eqn: b'real extraction unconv gas ej*share natx gas dem for elec*(1 -efficiency gas for electricity)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_extraction_unconv_gas_ej() * share_natx_gas_dem_for_elec() * (1 - efficiency_gas_for_electricity())


@cache('step')
def abundance_total_natx_gas():
    """
    Real Name: b'abundance total natx gas'
    Original Eqn: b'if then else(ped natx gas ej<pes natx gas, 1, 1-zidz((ped natx gas ej-pes natx gas), ped natx gas ej))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        ped_natx_gas_ej() < pes_natx_gas(), 1, 1 - zidz(
            (ped_natx_gas_ej() - pes_natx_gas()), ped_natx_gas_ej()))


@cache('run')
def exponent_availability_conv_gas():
    """
    Real Name: b'exponent availability conv gas'
    Original Eqn: b'1/4'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1 / 4


@cache('step')
def scarcity_conv_gas():
    """
    Real Name: b'scarcity conv gas'
    Original Eqn: b'if then else(max extraction conv gas ej=0,0, if then else(max extraction conv gas ej>=extraction conv gas ej, 1-((max extraction conv gas ej-extraction conv gas ej)/max extraction conv gas ej)^exponent availability conv gas,0))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        max_extraction_conv_gas_ej() < equality_threshold(), 0,
        if_then_else(
            max_extraction_conv_gas_ej() >= extraction_conv_gas_ej(),
            1 - ((max_extraction_conv_gas_ej() - extraction_conv_gas_ej()) /
                 max_extraction_conv_gas_ej())**exponent_availability_conv_gas(), 0))


@cache('step')
def year_scarcity_total_natx_gas():
    """
    Real Name: b'year scarcity total natx gas'
    Original Eqn: b'if then else(abundance total natx gas>0.95, 0, Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(abundance_total_natx_gas() > 0.95, 0, time())


@cache('run')
def share_unconv_gas_vs_tot_agg_in_2050():
    """
    Real Name: b'share unconv gas vs tot agg in 2050'
    Original Eqn: b'if then else(choose extraction tot agg gas curve=1, share unconv gas vs tot agg in 2050 laherrere2010 , if then else(choose extraction tot agg gas curve=2, share unconv gas vs tot agg in 2050 mohr12 bg , share unconv gas vs tot agg in 2050 user defined))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        choose_extraction_tot_agg_gas_curve() == 1,
        share_unconv_gas_vs_tot_agg_in_2050_laherrere2010(),
        if_then_else(choose_extraction_tot_agg_gas_curve() == 2,
                               share_unconv_gas_vs_tot_agg_in_2050_mohr12_bg(),
                               share_unconv_gas_vs_tot_agg_in_2050_user_defined()))


@cache('run')
def share_unconv_gas_vs_tot_agg_in_2050_laherrere2010():
    """
    Real Name: b'share unconv gas vs tot agg in 2050 laherrere2010'
    Original Eqn: b'0.25'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.25


@cache('run')
def share_unconv_gas_vs_tot_agg_in_2050_mohr12_bg():
    """
    Real Name: b'share unconv gas vs tot agg in 2050 mohr12 bg'
    Original Eqn: b'0.26666666666666666'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.26666666666666666


@cache('run')
def share_unconv_gas_vs_tot_agg_in_2050_user_defined():
    """
    Real Name: b'share unconv gas vs tot agg in 2050 user defined'
    Original Eqn: b'0.5'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.5


@cache('run')
def cumulated_tot_agg_gas_extraction_to_1995():
    """
    Real Name: b'cumulated tot agg gas extraction to 1995'
    Original Eqn: b'cumulated conv gas extraction to 1995+cumulated unconv gas extraction to 1995'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return cumulated_conv_gas_extraction_to_1995() + cumulated_unconv_gas_extraction_to_1995()


@cache('step')
def share_conv_gas_vs_tot_agg():
    """
    Real Name: b'share conv gas vs tot agg'
    Original Eqn: b'1-share unconv gas vs tot agg'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 - share_unconv_gas_vs_tot_agg()


@cache('run')
def share_rurr_tot_agg_gas_to_leave_underground():
    """
    Real Name: b'share rurr tot agg gas to leave underground'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('step')
def rurr_tot_agg_gas():
    """
    Real Name: b'rurr tot agg gas'
    Original Eqn: b'integ ( -extraction tot agg gas ej-flow tot agg gas left in ground, if then else(separate conv and unconv gas quest=0,urr tot agg gas-cumulated tot agg gas extraction to 1995,0))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_rurr_tot_agg_gas()


@cache('step')
def flow_tot_agg_gas_left_in_ground():
    """
    Real Name: b'flow tot agg gas left in ground'
    Original Eqn: b'if then else(Time<start policy leave in ground tot agg gas,0, if then else(Time>=start policy leave in ground tot agg gas+1,0, tot agg gas to leave underground))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_gas(), 0,
        if_then_else(time() >= start_policy_leave_in_ground_tot_agg_gas() + 1, 0,
                               tot_agg_gas_to_leave_underground()))


@cache('step')
def tot_rurr_tot_agg_gas():
    """
    Real Name: b'tot rurr tot agg gas'
    Original Eqn: b'rurr tot agg gas+total agg gas left in ground'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return rurr_tot_agg_gas() + total_agg_gas_left_in_ground()


@cache('run')
def urr_total_agg_gas_unlimited():
    """
    Real Name: b'urr total agg gas unlimited'
    Original Eqn: b'urr total gas mohr12 bg*10000'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return urr_total_gas_mohr12_bg() * 10000


@cache('run')
def start_policy_leave_in_ground_tot_agg_gas():
    """
    Real Name: b'start policy leave in ground tot agg gas'
    Original Eqn: b'2015'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2015


@cache('step')
def extraction_unconv_gas_tot_agg():
    """
    Real Name: b'extraction unconv gas tot agg'
    Original Eqn: b'extraction tot agg gas ej*share unconv gas vs tot agg'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_tot_agg_gas_ej() * share_unconv_gas_vs_tot_agg()


@cache('step')
def total_agg_gas_left_in_ground():
    """
    Real Name: b'total agg gas left in ground'
    Original Eqn: b'integ ( flow tot agg gas left in ground, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_total_agg_gas_left_in_ground()


@cache('step')
def evolution_share_unconv_gas_vs_tot_agg():
    """
    Real Name: b'evolution share unconv gas vs tot agg'
    Original Eqn: b'(share unconv gas vs tot agg in 2050-0.1268)/(2050-2012)*Time+(share unconv gas vs tot agg in 2050-((share unconv gas vs tot agg in 2050-0.1268)/(2050-2012))*2050 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (share_unconv_gas_vs_tot_agg_in_2050() - 0.1268) / (2050 - 2012) * time() + (
        share_unconv_gas_vs_tot_agg_in_2050() - ((share_unconv_gas_vs_tot_agg_in_2050() - 0.1268) /
                                                 (2050 - 2012)) * 2050)


@cache('step')
def real_extraction_conv_gas_ej():
    """
    Real Name: b'real extraction conv gas ej'
    Original Eqn: b'if then else(separate conv and unconv gas quest=1, extraction conv gas ej, extraction conv gas tot agg )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(separate_conv_and_unconv_gas_quest() == 1,
                                  extraction_conv_gas_ej(), extraction_conv_gas_tot_agg())


@cache('run')
def urr_tot_agg_gas():
    """
    Real Name: b'urr tot agg gas'
    Original Eqn: b'if then else(separate conv and unconv gas quest=1,0, if then else(unlimited nre quest=1,urr total agg gas unlimited, if then else(unlimited gas quest=1,urr total agg gas unlimited, if then else(choose extraction tot agg gas curve=1, urr total gas laherrere10 , if then else(choose extraction tot agg gas curve=2, urr total gas mohr12 bg , urr total gas user defined)))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        separate_conv_and_unconv_gas_quest() == 1, 0,
        if_then_else(
            unlimited_nre_quest() == 1, urr_total_agg_gas_unlimited(),
            if_then_else(
                unlimited_gas_quest() == 1, urr_total_agg_gas_unlimited(),
                if_then_else(
                    choose_extraction_tot_agg_gas_curve() == 1, urr_total_gas_laherrere10(),
                    if_then_else(choose_extraction_tot_agg_gas_curve() == 2,
                                           urr_total_gas_mohr12_bg(),
                                           urr_total_gas_user_defined())))))


@cache('step')
def cumulated_tot_agg_gas_extraction():
    """
    Real Name: b'cumulated tot agg gas extraction'
    Original Eqn: b'integ ( extraction tot agg gas ej, cumulated tot agg gas extraction to 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cumulated_tot_agg_gas_extraction()


@cache('step')
def extraction_conv_gas_tot_agg():
    """
    Real Name: b'extraction conv gas tot agg'
    Original Eqn: b'extraction tot agg gas ej*share conv gas vs tot agg'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_tot_agg_gas_ej() * share_conv_gas_vs_tot_agg()


@cache('step')
def real_extraction_unconv_gas_ej():
    """
    Real Name: b'real extraction unconv gas ej'
    Original Eqn: b'if then else(separate conv and unconv gas quest=1, extraction unconv gas ej, extraction unconv gas tot agg)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(separate_conv_and_unconv_gas_quest() == 1,
                                  extraction_unconv_gas_ej(), extraction_unconv_gas_tot_agg())


@cache('step')
def extraction_tot_agg_gas_ej():
    """
    Real Name: b'extraction tot agg gas ej'
    Original Eqn: b'if then else(rurr tot agg gas<0,0, if then else(unlimited nre quest=1,ped natx gas ej, if then else(unlimited gas quest=1, ped natx gas ej, min(ped natx gas ej, max extraction tot agg gas ej))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        rurr_tot_agg_gas() < 0, 0,
        if_then_else(
            unlimited_nre_quest() == 1, ped_natx_gas_ej(),
            if_then_else(unlimited_gas_quest() == 1, ped_natx_gas_ej(),
                                   np.minimum(ped_natx_gas_ej(),
                                              max_extraction_tot_agg_gas_ej()))))


@cache('step')
def real_extraction_conv_oil_mb_div_d():
    """
    Real Name: b'real extraction conv oil mb div d'
    Original Eqn: b'real extraction conv oil ej*mb div d per ej div year'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_extraction_conv_oil_ej() * mb_div_d_per_ej_div_year()


@cache('step')
def evolution_share_unconv_oil_vs_tot_agg():
    """
    Real Name: b'evolution share unconv oil vs tot agg'
    Original Eqn: b'(share unconv oil vs tot agg in 2050-0.059)/(2050-2012)*Time+(share unconv oil vs tot agg in 2050-((share unconv oil vs tot agg in 2050-0.059)/(2050-2012))*2050 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (share_unconv_oil_vs_tot_agg_in_2050() - 0.059) / (2050 - 2012) * time() + (
        share_unconv_oil_vs_tot_agg_in_2050() - ((share_unconv_oil_vs_tot_agg_in_2050() - 0.059) /
                                                 (2050 - 2012)) * 2050)


@cache('run')
def share_unconv_oil_vs_tot_agg_in_2050():
    """
    Real Name: b'share unconv oil vs tot agg in 2050'
    Original Eqn: b'if then else(choose extraction curve tot agg oil=1, share unconv oil vs tot agg in 2050 laherrere2006 , share unconv oil vs tot agg in 2050 user defined)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(choose_extraction_curve_tot_agg_oil() == 1,
                                  share_unconv_oil_vs_tot_agg_in_2050_laherrere2006(),
                                  share_unconv_oil_vs_tot_agg_in_2050_user_defined())


@cache('run')
def share_unconv_oil_vs_tot_agg_in_2050_laherrere2006():
    """
    Real Name: b'share unconv oil vs tot agg in 2050 laherrere2006'
    Original Eqn: b'0.5'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.5


@cache('run')
def share_unconv_oil_vs_tot_agg_in_2050_user_defined():
    """
    Real Name: b'share unconv oil vs tot agg in 2050 user defined'
    Original Eqn: b'0.5'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.5


@cache('step')
def extraction_conv_oil_tot_agg():
    """
    Real Name: b'extraction conv oil tot agg'
    Original Eqn: b'extraction tot agg oil ej*share conv oil vs tot agg'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_tot_agg_oil_ej() * share_conv_oil_vs_tot_agg()


@cache('step')
def extraction_unconv_oil_tot_agg():
    """
    Real Name: b'extraction unconv oil tot agg'
    Original Eqn: b'extraction tot agg oil ej*share unconv oil vs tot agg'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_tot_agg_oil_ej() * share_unconv_oil_vs_tot_agg()


@cache('step')
def share_conv_oil_vs_tot_agg():
    """
    Real Name: b'share conv oil vs tot agg'
    Original Eqn: b'1-share unconv oil vs tot agg'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 - share_unconv_oil_vs_tot_agg()


@cache('step')
def rurr_tot_agg_oil():
    """
    Real Name: b'rurr tot agg oil'
    Original Eqn: b'integ ( -extraction tot agg oil ej-flow tot agg oil left in ground, if then else(separate conv and unconv oil quest=0,urr tot agg oil-cumulated tot agg extraction to 1995,0))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_rurr_tot_agg_oil()


@cache('step')
def pes_oil_ej():
    """
    Real Name: b'pes oil ej'
    Original Eqn: b'real extraction conv oil ej+real extraction unconv oil ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_extraction_conv_oil_ej() + real_extraction_unconv_oil_ej()


@cache('step')
def extraction_tot_agg_oil_ej():
    """
    Real Name: b'extraction tot agg oil ej'
    Original Eqn: b'if then else(rurr tot agg oil<0,0, if then else(unlimited nre quest=1, ped total oil ej, if then else(unlimited oil quest=1, ped total oil ej, min(ped total oil ej, max extraction tot agg oil ej))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        rurr_tot_agg_oil() < 0, 0,
        if_then_else(
            unlimited_nre_quest() == 1, ped_total_oil_ej(),
            if_then_else(unlimited_oil_quest() == 1, ped_total_oil_ej(),
                                   np.minimum(ped_total_oil_ej(),
                                              max_extraction_tot_agg_oil_ej()))))


@cache('step')
def real_extraction_conv_oil_ej():
    """
    Real Name: b'real extraction conv oil ej'
    Original Eqn: b'if then else(separate conv and unconv oil quest=1, extraction conv oil ej, extraction conv oil tot agg)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(separate_conv_and_unconv_oil_quest() == 1,
                                  extraction_conv_oil_ej(), extraction_conv_oil_tot_agg())


@cache('run')
def gch4_per_mj_conv_gas():
    """
    Real Name: b'gch4 per mj conv gas'
    Original Eqn: b'0.78'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.78


@cache('step')
def total_agg_oil_left_in_ground():
    """
    Real Name: b'total agg oil left in ground'
    Original Eqn: b'integ ( flow tot agg oil left in ground, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_total_agg_oil_left_in_ground()


@cache('step')
def cumulated_tot_agg_oil_extraction():
    """
    Real Name: b'cumulated tot agg oil extraction'
    Original Eqn: b'integ ( extraction tot agg oil ej, cumulated tot agg extraction to 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cumulated_tot_agg_oil_extraction()


@cache('run')
def cumulated_tot_agg_extraction_to_1995():
    """
    Real Name: b'cumulated tot agg extraction to 1995'
    Original Eqn: b'cumulated conv oil extraction to 1995+cumulated unconv oil extraction to 1995'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return cumulated_conv_oil_extraction_to_1995() + cumulated_unconv_oil_extraction_to_1995()


@cache('run')
def urr_tot_agg_oil():
    """
    Real Name: b'urr tot agg oil'
    Original Eqn: b'if then else(separate conv and unconv oil quest=1, 0, if then else(unlimited oil quest=1,urr tot agg oil unlimited, if then else(unlimited nre quest=1,urr tot agg oil unlimited, if then else(choose extraction curve tot agg oil=1, urr tot agg oil laherrere 2006 , urr tot agg oil user defined))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        separate_conv_and_unconv_oil_quest() == 1, 0,
        if_then_else(
            unlimited_oil_quest() == 1, urr_tot_agg_oil_unlimited(),
            if_then_else(
                unlimited_nre_quest() == 1, urr_tot_agg_oil_unlimited(),
                if_then_else(choose_extraction_curve_tot_agg_oil() == 1,
                                       urr_tot_agg_oil_laherrere_2006(),
                                       urr_tot_agg_oil_user_defined()))))


@cache('run')
def urr_tot_agg_oil_unlimited():
    """
    Real Name: b'urr tot agg oil unlimited'
    Original Eqn: b'urr tot agg oil laherrere 2006*10000'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return urr_tot_agg_oil_laherrere_2006() * 10000


@cache('step')
def tot_rurr_tot_agg_oil():
    """
    Real Name: b'tot rurr tot agg oil'
    Original Eqn: b'rurr tot agg oil+total agg oil left in ground'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return rurr_tot_agg_oil() + total_agg_oil_left_in_ground()


@cache('run')
def start_policy_leave_in_ground_tot_agg_oil():
    """
    Real Name: b'start policy leave in ground tot agg oil'
    Original Eqn: b'2015'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2015


@cache('step')
def flow_tot_agg_oil_left_in_ground():
    """
    Real Name: b'flow tot agg oil left in ground'
    Original Eqn: b'if then else(Time<start policy leave in ground tot agg oil,0, if then else(Time>=start policy leave in ground tot agg oil+1,0, tot agg oil to leave underground))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_oil(), 0,
        if_then_else(time() >= start_policy_leave_in_ground_tot_agg_oil() + 1, 0,
                               tot_agg_oil_to_leave_underground()))


@cache('run')
def g_per_mt():
    """
    Real Name: b'g per mt'
    Original Eqn: b'1000000000000.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000000000000.0


@cache('run')
def share_rurr_tot_agg_oil_to_leave_underground():
    """
    Real Name: b'share rurr tot agg oil to leave underground'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def gch4_per_mj_unconv_gas():
    """
    Real Name: b'gch4 per mj unconv gas'
    Original Eqn: b'2.48'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2.48


@cache('step')
def tot_rurr_unconv_gas():
    """
    Real Name: b'tot rurr unconv gas'
    Original Eqn: b'rurr unconv gas+total unconv gas left in ground'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return rurr_unconv_gas() + total_unconv_gas_left_in_ground()


@cache('run')
def start_policy_leave_in_ground_coal():
    """
    Real Name: b'start policy leave in ground coal'
    Original Eqn: b'2015'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2015


@cache('step')
def total_unconv_gas_left_in_ground():
    """
    Real Name: b'total unconv gas left in ground'
    Original Eqn: b'integ ( flow unconv gas left in ground, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_total_unconv_gas_left_in_ground()


@cache('step')
def flow_coal_left_in_ground():
    """
    Real Name: b'flow coal left in ground'
    Original Eqn: b'if then else(Time<start policy leave in ground coal,0, if then else(Time>=start policy leave in ground coal+1,0, coal to leave underground))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_coal(), 0,
        if_then_else(time() >= start_policy_leave_in_ground_coal() + 1, 0,
                               coal_to_leave_underground()))


@cache('step')
def flow_conv_gas_left_in_ground():
    """
    Real Name: b'flow conv gas left in ground'
    Original Eqn: b'if then else(Time<start policy leave in ground conv gas,0, if then else(Time>=start policy leave in ground conv gas+1,0, conv gas to leave underground))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_gas(), 0,
        if_then_else(time() >= start_policy_leave_in_ground_conv_gas() + 1, 0,
                               conv_gas_to_leave_underground()))


@cache('step')
def flow_conv_oil_left_in_ground():
    """
    Real Name: b'flow conv oil left in ground'
    Original Eqn: b'if then else(Time<start policy leave in ground conv oil,0, if then else(Time>=start policy leave in ground conv oil+1,0, conv oil to leave underground))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_oil(), 0,
        if_then_else(time() >= start_policy_leave_in_ground_conv_oil() + 1, 0,
                               conv_oil_to_leave_underground()))


@cache('step')
def flow_unconv_oil_left_in_ground():
    """
    Real Name: b'flow unconv oil left in ground'
    Original Eqn: b'if then else(Time<start policy leave in ground unconv oil,0, if then else(Time>=start policy leave in ground unconv oil+1,0, unconv oil to leave underground))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_oil(), 0,
        if_then_else(time() >= start_policy_leave_in_ground_unconv_oil() + 1, 0,
                               unconv_oil_to_leave_underground()))


@cache('run')
def share_rurr_unconv_gas_to_leave_underground():
    """
    Real Name: b'share rurr unconv gas to leave underground'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def share_rurr_unconv_oil_to_leave_underground():
    """
    Real Name: b'share rurr unconv oil to leave underground'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('step')
def tot_rurr_coal():
    """
    Real Name: b'tot rurr coal'
    Original Eqn: b'rurr coal+total coal left in ground'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return rurr_coal() + total_coal_left_in_ground()


@cache('step')
def tot_rurr_conv_gas():
    """
    Real Name: b'tot rurr conv gas'
    Original Eqn: b'rurr conv gas+total conv gas left in ground'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return rurr_conv_gas() + total_conv_gas_left_in_ground()


@cache('step')
def tot_rurr_conv_oil():
    """
    Real Name: b'tot rurr conv oil'
    Original Eqn: b'rurr conv oil+total conv oil left in ground'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return rurr_conv_oil() + total_conv_oil_left_in_ground()


@cache('run')
def share_rurr_conv_oil_to_leave_underground():
    """
    Real Name: b'share rurr conv oil to leave underground'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('step')
def tot_rurr_unconv_oil():
    """
    Real Name: b'tot rurr unconv oil'
    Original Eqn: b'rurr unconv oil ej+total unconv oil left in ground'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return rurr_unconv_oil_ej() + total_unconv_oil_left_in_ground()


@cache('step')
def total_unconv_oil_left_in_ground():
    """
    Real Name: b'total unconv oil left in ground'
    Original Eqn: b'integ ( flow unconv oil left in ground, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_total_unconv_oil_left_in_ground()


@cache('step')
def total_coal_left_in_ground():
    """
    Real Name: b'total coal left in ground'
    Original Eqn: b'integ ( flow coal left in ground, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_total_coal_left_in_ground()


@cache('step')
def total_conv_gas_left_in_ground():
    """
    Real Name: b'total conv gas left in ground'
    Original Eqn: b'integ ( flow conv gas left in ground, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_total_conv_gas_left_in_ground()


@cache('step')
def total_conv_oil_left_in_ground():
    """
    Real Name: b'total conv oil left in ground'
    Original Eqn: b'integ ( flow conv oil left in ground, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_total_conv_oil_left_in_ground()


@cache('step')
def extraction_conv_oil_ej():
    """
    Real Name: b'extraction conv oil ej'
    Original Eqn: b'if then else(rurr conv oil<0,0, if then else(unlimited nre quest=1, demand conv oil ej, if then else(unlimited oil quest=1, demand conv oil ej, min(demand conv oil ej, max extraction conv oil ej))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        rurr_conv_oil() < 0, 0,
        if_then_else(
            unlimited_nre_quest() == 1, demand_conv_oil_ej(),
            if_then_else(unlimited_oil_quest() == 1, demand_conv_oil_ej(),
                                   np.minimum(demand_conv_oil_ej(),
                                              max_extraction_conv_oil_ej()))))


@cache('step')
def extraction_coal_ej():
    """
    Real Name: b'extraction coal ej'
    Original Eqn: b'if then else(rurr coal<0,0, if then else(unlimited nre quest=1, ped coal ej, if then else(unlimited coal quest=1, ped coal ej,min(ped coal ej, max extraction coal ej))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        rurr_coal() < 0, 0,
        if_then_else(
            unlimited_nre_quest() == 1, ped_coal_ej(),
            if_then_else(unlimited_coal_quest() == 1, ped_coal_ej(),
                                   np.minimum(ped_coal_ej(), max_extraction_coal_ej()))))


@cache('step')
def rurr_coal():
    """
    Real Name: b'rurr coal'
    Original Eqn: b'integ ( -extraction coal ej-flow coal left in ground, urr coal-cumulated coal extraction to 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_rurr_coal()


@cache('run')
def start_policy_leave_in_ground_unconv_gas():
    """
    Real Name: b'start policy leave in ground unconv gas'
    Original Eqn: b'2015'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2015


@cache('step')
def flow_unconv_gas_left_in_ground():
    """
    Real Name: b'flow unconv gas left in ground'
    Original Eqn: b'if then else(Time<start policy leave in ground unconv gas,0, if then else(Time>=start policy leave in ground unconv gas+1,0, unconv gas to leave underground))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_gas(), 0,
        if_then_else(time() >= start_policy_leave_in_ground_unconv_gas() + 1, 0,
                               unconv_gas_to_leave_underground()))


@cache('run')
def start_policy_leave_in_ground_unconv_oil():
    """
    Real Name: b'start policy leave in ground unconv oil'
    Original Eqn: b'2015'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2015


@cache('run')
def start_policy_leave_in_ground_conv_oil():
    """
    Real Name: b'start policy leave in ground conv oil'
    Original Eqn: b'2015'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2015


@cache('run')
def share_rurr_coal_to_leave_underground():
    """
    Real Name: b'share rurr coal to leave underground'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('step')
def pes_oil_mb_div_d():
    """
    Real Name: b'pes oil mb div d'
    Original Eqn: b'pes oil ej*mb div d per ej div year'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_oil_ej() * mb_div_d_per_ej_div_year()


@cache('run')
def current_mineral_reserves_mt():
    """
    Real Name: b'current mineral reserves mt'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,28000.0,0.0,0.5,0.0,0.0,480.0,720.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0052,0.0,0.0,0.0,0.011,160000.0,0.0,0.0,0.0,0.0,13.5,0.0,2400.0,570.0,0.0,0.0,11.0,0.0,0.0,0.0,81.0,0.0,0.0,0.0,87.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.53,0.0,4.8,0.0,0.0,0.0,0.01108,794.0,0.0,15.0,0.0,230.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('run')
def share_rurr_conv_gas_to_leave_underground():
    """
    Real Name: b'share rurr conv gas to leave underground'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def start_policy_leave_in_ground_conv_gas():
    """
    Real Name: b'start policy leave in ground conv gas'
    Original Eqn: b'2015'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2015


@cache('step')
def extraction_conv_gas_ej():
    """
    Real Name: b'extraction conv gas ej'
    Original Eqn: b'if then else(rurr conv gas<0,0, if then else(unlimited nre quest=1,demand conv gas, if then else(unlimited gas quest=1, demand conv gas, min(demand conv gas, max extraction conv gas ej))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        rurr_conv_gas() < 0, 0,
        if_then_else(
            unlimited_nre_quest() == 1, demand_conv_gas(),
            if_then_else(unlimited_gas_quest() == 1, demand_conv_gas(),
                                   np.minimum(demand_conv_gas(), max_extraction_conv_gas_ej()))))


@cache('step')
def check_gases():
    """
    Real Name: b'check gases'
    Original Eqn: b'zidz(ped gases-pes gases , pes gases )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(ped_gases() - pes_gases(), pes_gases())


@cache('step')
def abundance_gases():
    """
    Real Name: b'abundance gases'
    Original Eqn: b'if then else(ped gases<pes gases, 1, 1-zidz(ped gases-pes gases , ped gases ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(ped_gases() < pes_gases(), 1,
                                  1 - zidz(ped_gases() - pes_gases(), ped_gases()))


@cache('step')
def demand_conv_gas():
    """
    Real Name: b'demand conv gas'
    Original Eqn: b'max(ped natx gas ej-extraction unconv gas ej, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(ped_natx_gas_ej() - extraction_unconv_gas_ej(), 0)


@cache('step')
def ped_natx_gas_without_gtl():
    """
    Real Name: b'ped natx gas without gtl'
    Original Eqn: b'max(0, ped natx gas ej-ped natx gas for gtl ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, ped_natx_gas_ej() - ped_natx_gas_for_gtl_ej())


@cache('step')
def abundance_solids():
    """
    Real Name: b'abundance solids'
    Original Eqn: b'if then else(pes solids>ped solids, 1, 1 - zidz(ped solids-pes solids , ped solids ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(pes_solids() > ped_solids(), 1,
                                  1 - zidz(ped_solids() - pes_solids(), ped_solids()))


@cache('step')
def gdp():
    """
    Real Name: b'gdp'
    Original Eqn: b'real demand/1e+006'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_demand() / 1e+006


@cache('step')
def fe_demand_coal_elec_plants_twh():
    """
    Real Name: b'fe demand coal elec plants twh'
    Original Eqn: b'share coal for elec*demand elec gas and coal twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_coal_for_elec() * demand_elec_gas_and_coal_twh()


@cache('step')
def fe_demand_gas_elec_plants_twh():
    """
    Real Name: b'fe demand gas elec plants twh'
    Original Eqn: b'share gas div xcoal plus gasx for elec*demand elec gas and coal twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_gas_div_xcoal_plus_gasx_for_elec() * demand_elec_gas_and_coal_twh()


@cache('step')
def fed_heat_gas_plus_coal_ej():
    """
    Real Name: b'fed heat gas plus coal ej'
    Original Eqn: b'fed heat com plants fossil fuels ej-fed heat liquids plants ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_com_plants_fossil_fuels_ej() - fed_heat_liquids_plants_ej()


@cache('step')
def pe_demand_oil_elec_plants_ej():
    """
    Real Name: b'pe demand oil elec plants ej'
    Original Eqn: b'(fe demand oil elec plants twh/efficiency liquids for electricity)*ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (fe_demand_oil_elec_plants_twh() / efficiency_liquids_for_electricity()) * ej_per_twh()


@cache('step')
def fe_demand_oil_elec_plants_twh():
    """
    Real Name: b'fe demand oil elec plants twh'
    Original Eqn: b'share oil for elec*total fe elec demand twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_oil_for_elec() * total_fe_elec_demand_twh()


@cache('step')
def share_coal_for_elec():
    """
    Real Name: b'share coal for elec'
    Original Eqn: b'1-share gas div xcoal plus gasx for elec'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 - share_gas_div_xcoal_plus_gasx_for_elec()


@cache('run')
def current_mineral_resources_mt():
    """
    Real Name: b'current mineral resources mt'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,75000.0,0.0,6.0,0.0,0.0,12000.0,2100.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0471,800000.0,0.0,0.0,0.0,0.0,39.5,0.0,12000.0,1030.0,0.0,0.0,14.0,0.0,0.0,0.0,130.0,0.0,0.0,0.0,2000.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.308,0.0,76.2,0.0,0.0,0.0,0.025,2000.0,0.0,63.0,0.0,1900.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('step')
def share_coalxcoal_plus_gasx_for_heat_plants():
    """
    Real Name: b'share coalxcoal plus gasx for heat plants'
    Original Eqn: b'1-share gas div xcoal plus gasx for heat plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 - share_gas_div_xcoal_plus_gasx_for_heat_plants()


@cache('step')
def output_elec_over_lifetime_res_elec_for_allocation2():
    """
    Real Name: b'output elec over lifetime res elec for allocation2'
    Original Eqn: b'xstaticx eroigrid res elec[res elec]*fei over lifetime res elec for allocation[res elec]*quality of electricity'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xstaticx_eroigrid_res_elec() * fei_over_lifetime_res_elec_for_allocation() * quality_of_electricity()


@cache('step')
def demand_storage_capacity():
    """
    Real Name: b'demand storage capacity'
    Original Eqn: b'share capacity storage div res elec var*total installed capacity res elec var'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_capacity_storage_div_res_elec_var() * total_installed_capacity_res_elec_var()


@cache('step')
def share_capacity_storage_div_res_elec_var():
    """
    Real Name: b'share capacity storage div res elec var'
    Original Eqn: b'0.099+0.1132*share elec demand covered by res'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 0.099 + 0.1132 * share_elec_demand_covered_by_res()


@cache('run')
def static_div_dynamic_quality_of_electricity_quest():
    """
    Real Name: b'static div dynamic quality of electricity quest'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('step')
def xstaticx_eroigrid_tot_effective_for_allocation_res_elec():
    """
    Real Name: b'xstaticx eroigrid tot effective for allocation res elec'
    Original Eqn: b'zidz(sum(output elec over lifetime res elec for allocation2) , sum(fei over lifetime res elec for allocation) )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(sum(output_elec_over_lifetime_res_elec_for_allocation2()),
                          sum(fei_over_lifetime_res_elec_for_allocation()))


@cache('step')
def ratio_eroigrid_vs_eroi_xstaticx():
    """
    Real Name: b'ratio eroigrid vs eroi xstaticx'
    Original Eqn: b'if then else(xstaticx eroi res elec[res elec]<=0,0,xstaticx eroigrid res elec[res elec]/xstaticx eroi res elec[res elec])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(xstaticx_eroi_res_elec() <= 0, 0,
                                  xstaticx_eroigrid_res_elec() / xstaticx_eroi_res_elec())


@cache('step')
def ratio_eroi_per_techn_vs_eroitot_xstaticx():
    """
    Real Name: b'ratio eroi per techn vs eroitot xstaticx'
    Original Eqn: b'xidz(xstaticx eroigrid res elec[res elec] , xstaticx eroigrid tot effective for allocation res elec , 0 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xidz(xstaticx_eroigrid_res_elec(),
                          xstaticx_eroigrid_tot_effective_for_allocation_res_elec(), 0)


@cache('step')
def total_installed_capacity_res_elec_var():
    """
    Real Name: b'total installed capacity res elec var'
    Original Eqn: b'installed capacity res elec tw[wind onshore]+installed capacity res elec tw[wind offshore]+installed capacity res elec tw[solar pv]+installed capacity res elec tw[csp]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return installed_capacity_res_elec_tw().loc['wind onshore'].values + installed_capacity_res_elec_tw().loc['wind offshore'].values + installed_capacity_res_elec_tw().loc['solar pv'].values + installed_capacity_res_elec_tw().loc['csp'].values


@cache('run')
def share_res_elec_generation_curtailed_and_stored():
    """
    Real Name: b'share res elec generation curtailed and stored'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0,0.0,0.0,0.2,0.2,0.2,0.2],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('run')
def rt_storage_efficiency_phs():
    """
    Real Name: b'rt storage efficiency phs'
    Original Eqn: b'0.75'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.75


@cache('step')
def cp_baseload_reduction():
    """
    Real Name: b'cp baseload reduction'
    Original Eqn: b'cp res elec[res elec]/cp ini res elec[res elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return cp_res_elec() / cp_ini_res_elec()


@cache('run')
def ratio_equal_x1():
    """
    Real Name: b'ratio equal x1'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def fei_over_lifetime_res_elec():
    """
    Real Name: b'fei over lifetime res elec'
    Original Eqn: b'fei over lifetime res elec dispatch[hydro]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        fei_over_lifetime_res_elec_dispatch().loc['hydro'].values,
        fei_over_lifetime_res_elec_dispatch().loc['geot elec'].values,
        fei_over_lifetime_res_elec_dispatch().loc['solid bioe elec'].values,
        fei_over_lifetime_res_elec_dispatch().loc['oceanic'].values,
        fei_over_lifetime_res_elec_var().loc['wind onshore'].values,
        fei_over_lifetime_res_elec_var().loc['wind offshore'].values,
        fei_over_lifetime_res_elec_var().loc['solar pv'].values,
        fei_over_lifetime_res_elec_var().loc['csp'].values],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('step')
def real_cp_res_elec():
    """
    Real Name: b'real cp res elec'
    Original Eqn: b'if then else(Time<2015,cp res elec[res elec], if then else(installed capacity res elec tw[res elec]=0,0, real generation res elec twh[res elec]*twe per twh/installed capacity res elec tw[res elec] ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, cp_res_elec(),
        if_then_else(
            installed_capacity_res_elec_tw() < equality_threshold(), 0,
            real_generation_res_elec_twh() * twe_per_twh() / installed_capacity_res_elec_tw()))


@cache('step')
def fei_over_lifetime_res_elec_for_allocation():
    """
    Real Name: b'fei over lifetime res elec for allocation'
    Original Eqn: b'fei over lifetime res elec[res elec]*remaining potential res elec switch[res elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fei_over_lifetime_res_elec() * remaining_potential_res_elec_switch()


@cache('step')
def remaining_potential_res_elec_after_intermitt():
    """
    Real Name: b'remaining potential res elec after intermitt'
    Original Eqn: b'if then else(potential res elec after intermitt twh[res elec] > potential generation res elec twh[res elec], zidz(potential res elec after intermitt twh[res elec]-potential generation res elec twh[res elec] , potential res elec after intermitt twh[res elec] ), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        potential_res_elec_after_intermitt_twh() > potential_generation_res_elec_twh(),
        zidz(
            potential_res_elec_after_intermitt_twh() - potential_generation_res_elec_twh(),
            potential_res_elec_after_intermitt_twh()), 0)


@cache('step')
def remaining_potential_res_elec_switch():
    """
    Real Name: b'remaining potential res elec switch'
    Original Eqn: b'if then else(remaining potential res elec after intermitt[res elec]<0.025, 0,1)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(remaining_potential_res_elec_after_intermitt() < 0.025, 0, 1)


@cache('step')
def output_elec_over_lifetime_res_elec_for_allocation():
    """
    Real Name: b'output elec over lifetime res elec for allocation'
    Original Eqn: b'output elec over lifetime res elec[res elec]*remaining potential res elec switch[res elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return output_elec_over_lifetime_res_elec() * remaining_potential_res_elec_switch()


@cache('step')
def potential_res_elec_after_intermitt_twh():
    """
    Real Name: b'potential res elec after intermitt twh'
    Original Eqn: b'max potential res elec twe[res elec]*cp baseload reduction[res elec]/twe per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_potential_res_elec_twe() * cp_baseload_reduction() / twe_per_twh()


@cache('step')
def replacement_rate_res_elec():
    """
    Real Name: b'replacement rate res elec'
    Original Eqn: b'if then else(potential generation res elec twh[res elec]<potential res elec after intermitt twh[res elec],1,0.9)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        potential_generation_res_elec_twh() < potential_res_elec_after_intermitt_twh(), 1, 0.9)


@cache('step')
def xstaticx_eroitot_res_elec():
    """
    Real Name: b'xstaticx eroitot res elec'
    Original Eqn: b'if then else(sum(fei over lifetime res elec)<0, 0, sum(output elec over lifetime res elec )/(sum(fei over lifetime res elec)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        sum(fei_over_lifetime_res_elec()) < 0, 0,
        sum(output_elec_over_lifetime_res_elec()) /
        (sum(fei_over_lifetime_res_elec())))


@cache('step')
def xstaticx_eroitot_effective_for_allocation_res_elec():
    """
    Real Name: b'xstaticx eroitot effective for allocation res elec'
    Original Eqn: b'zidz(sum(output elec over lifetime res elec for allocation) , sum(fei over lifetime res elec for allocation) )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(sum(output_elec_over_lifetime_res_elec_for_allocation()),
                          sum(fei_over_lifetime_res_elec_for_allocation()))


@cache('step')
def new_capacity_installed_onshore_wind_tw():
    """
    Real Name: b'new capacity installed onshore wind tw'
    Original Eqn: b'new res elec capacity under planning[wind onshore]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return new_res_elec_capacity_under_planning().loc['wind onshore'].values


@cache('step')
def ced_o_and_m_over_lifetime_per_water_res_elec_var():
    """
    Real Name: b'ced o and m over lifetime per water res elec var'
    Original Eqn: b'res elec capacity under construction tw[res elec]*water for o and m res elec[res elec,water0]* energy requirements per unit of water consumption[water0]*lifetime res elec[res elec]*(m per t/kg per mt)*(kg per mt/mj per ej )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return res_elec_capacity_under_construction_tw() * water_for_o_and_m_res_elec(
    ) * energy_requirements_per_unit_of_water_consumption() * lifetime_res_elec() * (
        m_per_t() / kg_per_mt()) * (kg_per_mt() / mj_per_ej())


@cache('run')
def self_electricity_consumption_res_elec():
    """
    Real Name: b'self electricity consumption res elec'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0,0.0,0.0,0.02,0.02,0.005,0.0],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('run')
def share_energy_requirements_for_decom_res_elec():
    """
    Real Name: b'share energy requirements for decom res elec'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0,0.0,0.0,0.1,0.1,0.1,0.1],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('step')
def ced_o_and_m_over_lifetime_res_elec_var():
    """
    Real Name: b'ced o and m over lifetime res elec var'
    Original Eqn: b'(sum2(ced o and m over lifetime per material res elec var)+sum2(ced o and m over lifetime per water res elec var ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (sum(dim='materials', data=ced_o_and_m_over_lifetime_per_material_res_elec_var()) +
            sum(dim='water0', data=ced_o_and_m_over_lifetime_per_water_res_elec_var()))


@cache('run')
def grid_correction_factor_res_elec():
    """
    Real Name: b'grid correction factor res elec'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0,0.0,0.0,0.06,0.06,0.06,0.075],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('run')
def materials_for_o_and_m_per_capacity_installed_csp():
    """
    Real Name: b'materials for o and m per capacity installed csp'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """

    return xr.DataArray(data=[0.0,0.78,0.0,0.0,0.0,0.0,0.0,0.0,3450.0,0.0,0.0,0.0,0.0,0.0,0.0,140.0,0.0,0.0,0.0,0.0,0.0,0.0,11.0,0.0,0.0,0.0,3.2,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,98.0,0.0,0.014,0.0,0.0,0.0,0.0,2000.0,0.0,0.0,0.0,0.0,0.0,0.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])



@cache('step')
def total_water_for_o_and_m_required_by_res_elec_per_techn():
    """
    Real Name: b'total water for o and m required by res elec per techn'
    Original Eqn: b'sum2(water for o and m required for res elec)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(dim='water0', data=water_for_o_and_m_required_for_res_elec())


@cache('step')
def water_for_o_and_m_required_for_res_elec():
    """
    Real Name: b'water for o and m required for res elec'
    Original Eqn: b'installed capacity res elec tw[hydro]*water for o and m res elec[hydro,water0]*m per t/kg per mt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        installed_capacity_res_elec_tw().loc['hydro'].values * water_for_o_and_m_res_elec().loc['hydro',:].drop('res elec') * m_per_t() / kg_per_mt(),
        installed_capacity_res_elec_tw().loc['geot elec'].values * water_for_o_and_m_res_elec().loc['geot elec',:].drop('res elec') * m_per_t() / kg_per_mt(),
        installed_capacity_res_elec_tw().loc['solid bioe elec'].values * water_for_o_and_m_res_elec().loc['solid bioe elec',:].drop('res elec') * m_per_t() / kg_per_mt(),
        installed_capacity_res_elec_tw().loc['oceanic'].values * water_for_o_and_m_res_elec().loc['oceanic',:].drop('res elec') * m_per_t() / kg_per_mt(),
        installed_capacity_res_elec_tw().loc['wind onshore'].values * water_for_o_and_m_res_elec().loc['wind onshore',:].drop('res elec') * m_per_t() / kg_per_mt(),
        installed_capacity_res_elec_tw().loc['wind offshore'].values * water_for_o_and_m_res_elec().loc['wind offshore',:].drop('res elec') * m_per_t() / kg_per_mt(),
        installed_capacity_res_elec_tw().loc['solar pv'].values * water_for_o_and_m_res_elec().loc['solar pv',:].drop('res elec') * m_per_t() / kg_per_mt(),
        installed_capacity_res_elec_tw().loc['csp'].values * water_for_o_and_m_res_elec().loc['csp',:].drop('res elec') * m_per_t() / kg_per_mt()],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp'], 'water0': ['cleanwith pumped water', 'distilledwith deionized water']},
        dims=['res elec', 'water0'])


@cache('run')
def materials_for_o_and_m_per_capacity_installed_res_elec():
    """
    Real Name: b'materials for o and m per capacity installed res elec'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
        materials_for_o_and_m_per_capacity_installed_wind_onshore(),
        materials_for_o_and_m_per_capacity_installed_wind_offshore(),
        materials_for_o_and_m_per_capacity_installed_pv(),
        materials_for_o_and_m_per_capacity_installed_csp()],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp'], 'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['res elec', 'materials'])



@cache('step')
def total_energy_requirements_o_and_m_for_water_consumption_res_elec():
    """
    Real Name: b'total energy requirements o and m for water consumption res elec'
    Original Eqn: b'sum2(energy requirements for o and m for water consumption res elec)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(dim='water0', data=energy_requirements_for_o_and_m_for_water_consumption_res_elec())


@cache('step')
def energy_requirements_for_o_and_m_for_water_consumption_res_elec():
    """
    Real Name: b'energy requirements for o and m for water consumption res elec'
    Original Eqn: b'energy requirements per unit of water consumption[water0]*water for o and m required for res elec[res elec,water0]*kg per mt /mj per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    ret = energy_requirements_per_unit_of_water_consumption(
    ) * water_for_o_and_m_required_for_res_elec() * kg_per_mt() / mj_per_ej()
    return align_by_dims(ret, ('res elec', 'water0'))

@cache('run')
def water_for_o_and_m_res_elec():
    """
    Real Name: b'water for o and m res elec'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],
                             water_for_o_and_m_wind_onshore(),
                             water_for_o_and_m_wind_offshore(),
                             water_for_o_and_m_pv(),
                             water_for_o_and_m_csp()],
                        coords = {'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp'], 'water0': ['cleanwith pumped water', 'distilledwith deionized water']},
                        dims = ['res elec', 'water0'])



@cache('run')
def energy_requirements_per_unit_of_water_consumption():
    """
    Real Name: b'energy requirements per unit of water consumption'
    Original Eqn: b'0.0025'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0025,0.025],
        coords={'water0': ['cleanwith pumped water', 'distilledwith deionized water']},
        dims=['water0'])


@cache('run')
def unlimited_nre_quest():
    """
    Real Name: b'unlimited nre quest'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('step')
def extraction_uranium_ej():
    """
    Real Name: b'extraction uranium ej'
    Original Eqn: b'if then else(unlimited nre quest=1, pe demand uranium ej, if then else(unlimited uranium quest=1, pe demand uranium ej, min(pe demand uranium ej, max extraction uranium ej)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        unlimited_nre_quest() == 1, pe_demand_uranium_ej(),
        if_then_else(unlimited_uranium_quest() == 1, pe_demand_uranium_ej(),
                               np.minimum(pe_demand_uranium_ej(), max_extraction_uranium_ej())))


@cache('run')
def urr_uranium():
    """
    Real Name: b'urr uranium'
    Original Eqn: b'if then else(unlimited nre quest=1, urr uranium unlimited, if then else(unlimited uranium quest=1, urr uranium unlimited, if then else(choose extraction uranium curve=1, urr uranium ewg13, if then else(choose extraction uranium curve=2, urr uranium zittel12, urr uranium user defined ))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        unlimited_nre_quest() == 1, urr_uranium_unlimited(),
        if_then_else(
            unlimited_uranium_quest() == 1, urr_uranium_unlimited(),
            if_then_else(
                choose_extraction_uranium_curve() == 1, urr_uranium_ewg13(),
                if_then_else(choose_extraction_uranium_curve() == 2,
                                       urr_uranium_zittel12(), urr_uranium_user_defined()))))


@cache('run')
def urr_conv_oil():
    """
    Real Name: b'urr conv oil'
    Original Eqn: b'if then else(separate conv and unconv oil quest=1, if then else(unlimited nre quest=1,urr conv oil unlimited, if then else(unlimited oil quest=1,urr conv oil unlimited, if then else(choose extraction curve conv oil=1, urr conv oil maggio12 middle , if then else(choose extraction curve conv oil=2, urr conv oil maggio12 high , if then else(choose extraction curve conv oil=3, urr conv oil maggio12 low , urr conv oil user defined))))) , 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        separate_conv_and_unconv_oil_quest() == 1,
        if_then_else(
            unlimited_nre_quest() == 1, urr_conv_oil_unlimited(),
            if_then_else(
                unlimited_oil_quest() == 1, urr_conv_oil_unlimited(),
                if_then_else(
                    choose_extraction_curve_conv_oil() == 1, urr_conv_oil_maggio12_middle(),
                    if_then_else(
                        choose_extraction_curve_conv_oil() == 2, urr_conv_oil_maggio12_high(),
                        if_then_else(choose_extraction_curve_conv_oil() == 3,
                                               urr_conv_oil_maggio12_low(),
                                               urr_conv_oil_user_defined()))))), 0)


@cache('run')
def growth_biogas():
    """
    Real Name: b'growth biogas'
    Original Eqn: b'biogas evol*past biogas growth'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return biogas_evol() * past_biogas_growth()


@cache('run')
def past_biogas_growth():
    """
    Real Name: b'past biogas growth'
    Original Eqn: b'0.13194015127346587'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.13194015127346587


@cache('step')
def pes_biogas_ej():
    """
    Real Name: b'pes biogas ej'
    Original Eqn: b'integ ( new pes biogas, 0.13135)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_pes_biogas_ej()


@cache('run')
def biogas_evol():
    """
    Real Name: b'biogas evol'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def max_biogas_ej():
    """
    Real Name: b'max biogas ej'
    Original Eqn: b'5'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5


@cache('step')
def fei_over_lifetime_res_elec_dispatch():
    """
    Real Name: b'fei over lifetime res elec dispatch'
    Original Eqn: b'cedtot per tw over lifetime res elec dispatch[res elec]*res elec capacity under construction tw[res elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return cedtot_per_tw_over_lifetime_res_elec_dispatch() * res_elec_capacity_under_construction_tw()


@cache('run')
def activate_eroi_allocation_rule():
    """
    Real Name: b'activate eroi allocation rule'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def eroi_allocation_rule_per_res_elec():
    """
    Real Name: b'eroi allocation rule per res elec'
    Original Eqn: b'if then else(Time<2015, 1, if then else(ratio eroi per techn vs eroitot xstaticx[res elec]=0,0, if then else(ratio eroi per techn vs eroitot xstaticx[res elec]<0.1,0, 0.434294 *ln(ratio eroi per techn vs eroitot xstaticx[res elec])+1)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, 1,
        if_then_else(
            ratio_eroi_per_techn_vs_eroitot_xstaticx() < equality_threshold(), 0,
            if_then_else(
                ratio_eroi_per_techn_vs_eroitot_xstaticx() < 0.1, 0,
                0.434294 * np.log(ratio_eroi_per_techn_vs_eroitot_xstaticx()) + 1)))


@cache('step')
def xdynamicx_eroi_res_elec_var():
    """
    Real Name: b'xdynamicx eroi res elec var'
    Original Eqn: b'if then else(fei res elec var[res elec]=0, 0, real generation res elec ej[ res elec]/fei res elec var [res elec])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(fei_res_elec_var() < equality_threshold(), 0,
                                  real_generation_res_elec_ej() / fei_res_elec_var())


@cache('run')
def eroi_ini_res_elec_dispatch():
    """
    Real Name: b'eroi ini res elec dispatch'
    Original Eqn: b'50'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[50.0,7.0,1.5,3.25,0.0,0.0,0.0,0.0],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('step')
def res_elec_capacity_under_construction_tw():
    """
    Real Name: b'res elec capacity under construction tw'
    Original Eqn: b'res elec planned capacity tw[res elec]/time construction res elec[res elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return res_elec_planned_capacity_tw() / time_construction_res_elec()


@cache('step')
def real_generation_solar_pv_ej():
    """
    Real Name: b'real generation solar pv ej'
    Original Eqn: b'real generation res elec ej[solar pv]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_generation_res_elec_ej().loc['solar pv'].values


@cache('step')
def materials_required_for_new_csp_mt():
    """
    Real Name: b'materials required for new csp mt'
    Original Eqn: b'materials required for new res elec mt[csp,materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return materials_required_for_new_res_elec_mt().loc['csp',:].drop('res elec')


@cache('step')
def materials_required_for_new_pv_mt():
    """
    Real Name: b'materials required for new pv mt'
    Original Eqn: b'materials required for new res elec mt[solar pv,materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return materials_required_for_new_res_elec_mt().loc['solar pv',:].drop('res elec')


@cache('step')
def materials_required_for_new_wind_offshore_mt():
    """
    Real Name: b'materials required for new wind offshore mt'
    Original Eqn: b'materials required for new res elec mt[wind offshore,materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return materials_required_for_new_res_elec_mt().loc['wind offshore',:].drop('res elec')


@cache('step')
def materials_required_for_new_wind_onshore_mt():
    """
    Real Name: b'materials required for new wind onshore mt'
    Original Eqn: b'materials required for new res elec mt[wind onshore,materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return materials_required_for_new_res_elec_mt().loc['wind onshore',:].drop('res elec')


@cache('step')
def materials_required_for_o_and_m_csp_mt():
    """
    Real Name: b'materials required for o and m csp mt'
    Original Eqn: b'materials required for o and m res elec mt[csp,materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return materials_required_for_o_and_m_res_elec_mt().loc['csp',:].drop('res elec')


@cache('step')
def materials_required_for_o_and_m_pv_mt():
    """
    Real Name: b'materials required for o and m pv mt'
    Original Eqn: b'materials required for o and m res elec mt[solar pv,materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return materials_required_for_o_and_m_res_elec_mt().loc['solar pv',:].drop('res elec')


@cache('step')
def materials_required_for_o_and_m_wind_offshore_mt():
    """
    Real Name: b'materials required for o and m wind offshore mt'
    Original Eqn: b'materials required for o and m res elec mt[wind offshore,materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return materials_required_for_o_and_m_res_elec_mt().loc['wind offshore',:].drop('res elec')


@cache('step')
def materials_required_for_o_and_m_wind_onshore_mt():
    """
    Real Name: b'materials required for o and m wind onshore mt'
    Original Eqn: b'materials required for o and m res elec mt[wind onshore,materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return materials_required_for_o_and_m_res_elec_mt().loc['wind onshore',:].drop('res elec')


@cache('step')
def real_generation_res_elec_ej():
    """
    Real Name: b'real generation res elec ej'
    Original Eqn: b'real generation res elec twh[res elec]*ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_generation_res_elec_twh() * ej_per_twh()


@cache('step')
def cedtot_solar_pv():
    """
    Real Name: b'cedtot solar pv'
    Original Eqn: b'fei res elec var[solar pv]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fei_res_elec_var().loc['solar pv'].values


@cache('step')
def total_materials_required_for_new_res_elec_mt():
    """
    Real Name: b'total materials required for new res elec mt'
    Original Eqn: b'sum1(materials required for new res elec mt)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(dim='res elec', data=materials_required_for_new_res_elec_mt())


@cache('step')
def total_materials_required_for_o_and_m_res_elec_mt():
    """
    Real Name: b'total materials required for o and m res elec mt'
    Original Eqn: b'sum1(materials required for o and m res elec mt)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(dim='res elec', data=materials_required_for_o_and_m_res_elec_mt())


@cache('run')
def eroi_equal_x1():
    """
    Real Name: b'eroi equal x1'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def electrical_distribution_losses_twh():
    """
    Real Name: b'electrical distribution losses twh'
    Original Eqn: b'total fe elec demand twh*share transm and distr elec losses'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_fe_elec_demand_twh() * share_transm_and_distr_elec_losses()


@cache('run')
def max_share_transm_and_distr_elec_losses():
    """
    Real Name: b'max share transm and distr elec losses'
    Original Eqn: b'share transm and distr elec losses initial*(1+0.0115*exp(4.2297*1)-0.00251)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_transm_and_distr_elec_losses_initial() * (1 + 0.0115 * np.exp(4.2297 * 1) -
                                                           0.00251)


@cache('step')
def heat_com_distribution_losses():
    """
    Real Name: b'heat com distribution losses'
    Original Eqn: b'fed heat com ej*share heat distribution losses'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_com_ej() * share_heat_distribution_losses()


@cache('step')
def potential_generation_res_elec_twh():
    """
    Real Name: b'potential generation res elec twh'
    Original Eqn: b'installed capacity res elec tw[res elec]*cp res elec[res elec]/twe per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return installed_capacity_res_elec_tw() * cp_res_elec() / twe_per_twh()


@cache('step')
def output_elec_over_lifetime_res_elec():
    """
    Real Name: b'output elec over lifetime res elec'
    Original Eqn: b'real cp res elec[res elec]*res elec capacity under construction tw[res elec]*(1/twe per twh)*lifetime res elec[res elec]*ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_cp_res_elec() * res_elec_capacity_under_construction_tw() * (
        1 / twe_per_twh()) * lifetime_res_elec() * ej_per_twh()


@cache('step')
def variation_share_transm_and_distr_elec_losses():
    """
    Real Name: b'variation share transm and distr elec losses'
    Original Eqn: b'if then else(Time<2015, 0, variation share transm and distr losses elec*remaining share transm and distr elec losses)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, 0,
        variation_share_transm_and_distr_losses_elec() *
        remaining_share_transm_and_distr_elec_losses())


@cache('step')
def remaining_share_transm_and_distr_elec_losses():
    """
    Real Name: b'remaining share transm and distr elec losses'
    Original Eqn: b'(max share transm and distr elec losses-share transm and distr elec losses)/max share transm and distr elec losses'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (max_share_transm_and_distr_elec_losses() -
            share_transm_and_distr_elec_losses()) / max_share_transm_and_distr_elec_losses()


@cache('step')
def share_transm_and_distr_elec_losses():
    """
    Real Name: b'share transm and distr elec losses'
    Original Eqn: b'integ ( variation share transm and distr elec losses, share transm and distr elec losses initial)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_share_transm_and_distr_elec_losses()


@cache('step')
def total_gen_losses_demand_for_elec_plants_ej():
    """
    Real Name: b'total gen losses demand for elec plants ej'
    Original Eqn: b'pe demand gas elec plants ej*(1-efficiency gas for electricity)+pe demand coal elec plants ej*(1-efficiency coal for electricity)+pe demand oil elec plants ej*(1-efficiency liquids for electricity)+pe losses uranium for elec ej+pe losses bioe for elec ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_demand_gas_elec_plants_ej() * (
        1 - efficiency_gas_for_electricity()) + pe_demand_coal_elec_plants_ej() * (
            1 - efficiency_coal_for_electricity()) + pe_demand_oil_elec_plants_ej() * (
                1 - efficiency_liquids_for_electricity()) + pe_losses_uranium_for_elec_ej(
                ) + pe_losses_bioe_for_elec_ej()


@cache('step')
def pe_losses_bioe_for_elec_ej():
    """
    Real Name: b'pe losses bioe for elec ej'
    Original Eqn: b'pe real generation res elec[solid bioe elec]-fe elec generation from bioe twh*ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_real_generation_res_elec().loc['solid bioe elec'].values - fe_elec_generation_from_bioe_twh() * ej_per_twh()


@cache('run')
def water_for_o_and_m_wind_offshore():
    """
    Real Name: b'water for o and m wind offshore'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0,0.0],
        coords={'water0': ['cleanwith pumped water', 'distilledwith deionized water']},
        dims=['water0'])


@cache('step')
def total_materials_required_for_res_elec_mt():
    """
    Real Name: b'total materials required for res elec mt'
    Original Eqn: b'total materials required for new res elec mt[materials]+total materials required for o and m res elec mt[materials]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_materials_required_for_new_res_elec_mt() + total_materials_required_for_o_and_m_res_elec_mt()


@cache('step')
def share_energy_for_material_consumption_for_alt_techn_vs_tfec():
    """
    Real Name: b'share energy for material consumption for alt techn vs tfec'
    Original Eqn: b'tfe required for total material consumption for alt techn/real tfec'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return tfe_required_for_total_material_consumption_for_alt_techn() / real_tfec()


@cache('run')
def water_for_o_and_m_pv():
    """
    Real Name: b'water for o and m pv'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0, 20000.0],
                        coords={'water0': ['cleanwith pumped water', 'distilledwith deionized water']},
                        dims=['water0'])


@cache('run')
def water_for_o_and_m_wind_onshore():
    """
    Real Name: b'water for o and m wind onshore'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0., 0.],
                        coords={'water0': ['cleanwith pumped water', 'distilledwith deionized water']},
                        dims=['water0'])

@cache('run')
def materials_for_o_and_m_per_capacity_installed_wind_offshore():
    """
    Real Name: b'materials for o and m per capacity installed wind offshore'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """

    return xr.DataArray(data=[0.0,10.8,0.0,0.0,59.6,0.0,0.0,5.8,356.0,0.0,0.0,0.0,122.0,0.0,0.0,0.0,19.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,25.6,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.2,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])



@cache('run')
def materials_for_o_and_m_per_capacity_installed_wind_onshore():
    """
    Real Name: b'materials for o and m per capacity installed wind onshore'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """

    return xr.DataArray(data=[0.0,10.8,0.0,0.0,29.8,0.0,0.0,5.8,65.0,0.0,0.0,0.0,122.0,0.0,0.0,0.0,19.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,25.6,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.2,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])



@cache('run')
def materials_for_o_and_m_per_capacity_installed_pv():
    """
    Real Name: b'materials for o and m per capacity installed pv'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """

    return xr.DataArray(data=[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1294.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.56,0.04,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('run')
def water_for_o_and_m_csp():
    """
    Real Name: b'water for o and m csp'
    Original Eqn: b'12000000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[12000000.0,500000.0],
                     coords={'water0': ['cleanwith pumped water', 'distilledwith deionized water']},
                     dims=['water0'])


@cache('run')
def materials_per_capacity_installed_pv_x0():
    """
    Real Name: b'materials per capacity installed pv x0'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """

    return xr.DataArray(data=[0.0,16000.0,0.0,6.1,0.0,75000.0,550.0,2200.0,15600.0,0.0,0.0,150.0,0.0,0.0,0.3,640000.0,0.0,500000.0,4.5,162500.0,0.0,0.0,0.0,0.0,0.0,0.0,53.5,500.0,100.0,0.0,50.0,0.0,0.0,0.0,235.0,0.0,0.0,0.0,21.2,5760.0,0.0,0.0,0.0,0.0,0.0,3200.0,46.7,6000000.0,463.0,0.0,2000.0,0.0,4.7,6.25,0.0,0.475,0.0,162.5],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])



@cache('step')
def cum_materials_requirements_for_res_elec():
    """
    Real Name: b'cum materials requirements for res elec'
    Original Eqn: b'integ ( total materials required for res elec mt[materials], initial cumulated material requirements for res elec 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cum_materials_requirements_for_res_elec()


@cache('run')
def mj_per_ej():
    """
    Real Name: b'mj per ej'
    Original Eqn: b'1000000000000.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000000000000.0


@cache('run')
def initial_energy_cons_per_unit_of_material_cons_xvirginx():
    """
    Real Name: b'initial energy cons per unit of material cons xvirginx'
    Original Eqn: b'100'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[100.0,218.0,0.0,264.0,200.0,4.5,83.0,57.0,38.5,384.2,2000.0,120.0,28.0,28.0,218.0,23.5,100.0,0.083,3320.0,25.0,21.5,3.0,5.3,0.85,853.0,100.0,220.0,57.6,2000.0,0.95,378.0,21.5,0.0,384.2,164.0,0.0,0.0,70.0,49.0,80.5,95.4,1.0,16.6,0.081,0.1,2000.0,1580.0,0.45,250.0,0.0,56.7,207.0,57.0,400.0,60.0,3710.0,36.0,72.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('run')
def materials_per_new_capacity_installed_csp():
    """
    Real Name: b'materials per new capacity installed csp'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """

    return xr.DataArray(data=[0.0,740.0,3280.0,0.0,0.0,250000.0,2200.0,3200.0,15600.0,0.0,0.0,150.0,310.0,2500.0,0.0,130000.0,0.0,500000.0,0.0,650000.0,220000.0,0.0,11000.0,170000.0,0.0,0.0,3000.0,2000.0,100.0,0.0,200.0,340000.0,340000.0,0.0,940.0,0.0,0.0,0.0,0.0,0.0,500.0,1300000.0,4700.0,1900.0,92000.0,0.0,13.0,18000000.0,0.0,18000.0,240000.0,44000.0,0.0,25.0,11.5,1.9,0.0,650.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])



@cache('run')
def materials_per_new_capacity_installed_wind_offshore():
    """
    Real Name: b'materials per new capacity installed wind offshore'
    Original Eqn: b'0.74'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """

    return xr.DataArray(data=[0.74,9400.0,0.0,0.0,3800.0,24000.0,0.0,22200.0,18080.88818398,14.58,450.0,0.0,3800.0,0.0,0.0,0.0,950.0,900000.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,640.0,0.0,0.0,115.90312938,0.0,0.0,0.0,0.0,183.0,111.0,0.0,0.0,670.0,0.0,9200.0,0.0,0.0,0.0,16560.0,0.0,0.0,0.0,12000000.0,0.0,0.0,400000.0,0.0,0.0,0.0,0.0,0.0,640.0,0.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])



@cache('run')
def materials_per_new_capacity_installed_wind_onshore():
    """
    Real Name: b'materials per new capacity installed wind onshore'
    Original Eqn: b'0.74'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """

    return xr.DataArray(data=[0.74,2030.0,0.0,0.0,1500.0,561600.0,0.0,2700.0,5700.0,4.86,450.0,0.0,6090.0,0.0,0.0,0.0,950.0,11900.0,0.0,22000.0,0.0,0.0,0.0,0.0,0.0,640.0,0.0,0.0,36.53846154,0.0,0.0,0.0,0.0,61.0,111.0,0.0,0.0,670.0,0.0,1940.0,0.0,0.0,0.0,16560.0,0.0,0.0,0.0,1500000.0,0.0,0.0,126100.0,0.0,0.0,0.0,0.0,0.0,640.0,0.0],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('run')
def initial_cumulated_material_requirements_for_res_elec_1995():
    """
    Real Name: b'initial cumulated material requirements for res elec 1995'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.0]*58,
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('run')
def materials_per_new_capacity_installed_pv():
    """
    Real Name: b'materials per new capacity installed pv'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """

    return xr.DataArray(data=[0.0,16000.0,0.0,6.1,0.0,75000.0,550.0,2200.0,15600.0,0.0,0.0,150.0,0.0,0.0,0.3,66075.0,0.0,500000.0,4.5,162500.0,0.0,0.0,0.0,0.0,0.0,0.0,53.5,500.0,100.0,0.0,50.0,0.0,0.0,0.0,235.0,0.0,0.0,0.0,21.2,5760.0,0.0,0.0,0.0,0.0,0.0,3200.0,46.7,6000000.0,463.0,0.0,2000.0,0.0,4.7,6.25,0.0,0.475,0.0,162.5],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('run')
def kg_per_mt():
    """
    Real Name: b'kg per mt'
    Original Eqn: b'1000000000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000000000


@cache('run')
def m_per_t():
    """
    Real Name: b'm per t'
    Original Eqn: b'1000000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000000


@cache('step')
def elec_generation_variable_from_res_twh():
    """
    Real Name: b'elec generation variable from res twh'
    Original Eqn: b'fe elec generation from solar pv twh+fe elec generation from csp twh+fe elec generation from onshore wind twh+fe elec generation from offshore wind twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fe_elec_generation_from_solar_pv_twh() + fe_elec_generation_from_csp_twh(
    ) + fe_elec_generation_from_onshore_wind_twh() + fe_elec_generation_from_offshore_wind_twh()


@cache('step')
def new_required_capacity_nuclear():
    """
    Real Name: b'new required capacity nuclear'
    Original Eqn: b'max(0, if then else(Time<2014, 0, if then else(demand elec nre twh=0, 0, installed capacity nuclear tw*p nuclear elec gen )))*effects shortage uranium*cp limit nuclear'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        if_then_else(
            time() < 2014, 0,
            if_then_else(
                demand_elec_nre_twh() < equality_threshold(), 0,
                installed_capacity_nuclear_tw() *
                p_nuclear_elec_gen()))) * effects_shortage_uranium() * cp_limit_nuclear()


@cache('run')
def replacement_res_for_heat_com():
    """
    Real Name: b'replacement res for heat com'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[1.0,1.0,1.0],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('run')
def losses_solar_for_heat():
    """
    Real Name: b'losses solar for heat'
    Original Eqn: b'0.37'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.37


@cache('run')
def cp_ini_res_for_heat():
    """
    Real Name: b'cp ini res for heat'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[1.0,0.265,0.5],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('run')
def efficiency_geothermal_for_heat():
    """
    Real Name: b'efficiency geothermal for heat'
    Original Eqn: b'0.6960561017716173'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.6960561017716173


@cache('run')
def efficiency_solar_panels_for_heat():
    """
    Real Name: b'efficiency solar panels for heat'
    Original Eqn: b'0.095'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.095


@cache('step')
def max_fe_potential_res_for_heat():
    """
    Real Name: b'max fe potential res for heat'
    Original Eqn: b'max pe potential res for heat[solar heat]+efficiency res heat[solar heat]*0'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        max_pe_potential_res_for_heat().loc['solar heat'].values + efficiency_res_heat().loc['solar heat'].values * 0,
        max_pe_potential_res_for_heat().loc['geot heat'].values * efficiency_res_heat().loc['geot heat'].values,
        max_pe_potential_res_for_heat().loc['solid bioe heat'].values * efficiency_res_heat().loc['solid bioe heat'].values],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('run')
def p_geothermal_for_heat():
    """
    Real Name: b'p geothermal for heat'
    Original Eqn: b'0.076'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.076


@cache('run')
def past_res_growth_for_heat_com():
    """
    Real Name: b'past res growth for heat com'
    Original Eqn: b'0.27712259634619696'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.2771226,0.03571556,0.06278667],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('step')
def installed_capacity_res_heat_com_tw():
    """
    Real Name: b'installed capacity res heat com tw'
    Original Eqn: b'integ ( new res capacity for heat com tw[res heat]+replacement res for heat com tw[res heat]-wear res capacity for heat com tw[res heat], initial value res for heat com[res heat])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_installed_capacity_res_heat_com_tw()


@cache('run')
def initial_value_res_for_heat_com():
    """
    Real Name: b'initial value res for heat com'
    Original Eqn: b'2.0303326826418786e-06'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[2.03033268e-06,0.00199927,0.01167364],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('run')
def p_solar_for_heat():
    """
    Real Name: b'p solar for heat'
    Original Eqn: b'0.127'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.127


@cache('run')
def life_time_res_for_heat():
    """
    Real Name: b'life time res for heat'
    Original Eqn: b'25'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[25.0,25.0,30.0],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('step')
def wear_res_capacity_for_heat_com_tw():
    """
    Real Name: b'wear res capacity for heat com tw'
    Original Eqn: b'installed capacity res heat com tw[res heat]/life time res for heat[res heat]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return installed_capacity_res_heat_com_tw() / life_time_res_for_heat()


@cache('step')
def potential_fe_gen_elec_fossil_fuel_chp_plants_ej():
    """
    Real Name: b'potential fe gen elec fossil fuel chp plants ej'
    Original Eqn: b'(potential fe gen elec coal chp plants ej+potential fe gen elec gas chp plants ej+potential fe gen elec liquids chp plants ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (potential_fe_gen_elec_coal_chp_plants_ej() +
            potential_fe_gen_elec_gas_chp_plants_ej() +
            potential_fe_gen_elec_liquids_chp_plants_ej())


@cache('step')
def fed_heat_liquids_chp_plants_ej():
    """
    Real Name: b'fed heat liquids chp plants ej'
    Original Eqn: b'fed heat fossil fuels chp plants ej*share chp plants oil'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_fossil_fuels_chp_plants_ej() * share_chp_plants_oil()


@cache('step')
def fed_heat_coal_chp_plants_ej():
    """
    Real Name: b'fed heat coal chp plants ej'
    Original Eqn: b'fed heat fossil fuels chp plants ej*share chp plants coal'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_fossil_fuels_chp_plants_ej() * share_chp_plants_coal()


@cache('step')
def remaining_potential_csp():
    """
    Real Name: b'remaining potential csp'
    Original Eqn: b'if then else(max potential res elec twh[csp] > real generation res elec twh[csp], (max potential res elec twh[csp]-real generation res elec twh[csp])/max potential res elec twh[csp], 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(max_potential_res_elec_twh().loc['csp'].values > real_generation_res_elec_twh().loc['csp'].values,
                                  (max_potential_res_elec_twh().loc['csp'].values - real_generation_res_elec_twh().loc['csp'].values) /
                                  max_potential_res_elec_twh().loc['csp'].values, 0)


@cache('step')
def pe_csp_for_elec_generation_ej():
    """
    Real Name: b'pe csp for elec generation ej'
    Original Eqn: b'pe real generation res elec[csp]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_real_generation_res_elec().loc['csp'].values


@cache('step')
def invest_res_for_elec():
    """
    Real Name: b'invest res for elec'
    Original Eqn: b'max(invest biow tdolar+invest geot elec tdolar+invest hydro tdolar+invest oceanic tdolar+invest solar tdolar+invest onshore wind tdolar+invest offshore wind tdolar+invest csp tdolar, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        invest_biow_tdolar() + invest_geot_elec_tdolar() + invest_hydro_tdolar() +
        invest_oceanic_tdolar() + invest_solar_tdolar() + invest_onshore_wind_tdolar() +
        invest_offshore_wind_tdolar() + invest_csp_tdolar(), 0)


@cache('run')
def power_density_csp():
    """
    Real Name: b'power density csp'
    Original Eqn: b'power density res elec twe div mha[csp]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return power_density_res_elec_twe_div_mha().loc['csp'].values


@cache('step')
def max_potential_res_elec_twe():
    """
    Real Name: b'max potential res elec twe'
    Original Eqn: b'max hydro twe'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        max_hydro_twe(),
        max_geot_elec_twe(),
        max_bioe_twe(),
        max_oceanic_twe(),
        max_onshore_wind_twe(),
        max_offshore_wind_twe(),
        max_solar_pv_on_land_twe(),
        max_csp_twe()],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('step')
def surface_csp_mha():
    """
    Real Name: b'surface csp mha'
    Original Eqn: b'surface res elec[csp]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return surface_res_elec().loc['csp'].values


@cache('step')
def fe_elec_generation_from_csp_twh():
    """
    Real Name: b'fe elec generation from csp twh'
    Original Eqn: b'real generation res elec twh[csp]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_generation_res_elec_twh().loc['csp'].values


@cache('step')
def invest_csp_tdolar():
    """
    Real Name: b'invest csp tdolar'
    Original Eqn: b'invest res elec tdolar[csp]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return invest_res_elec_tdolar().loc['csp'].values


@cache('step')
def cp_limit_nuclear():
    """
    Real Name: b'cp limit nuclear'
    Original Eqn: b'if then else(cp nuclear>min cp nuclear, 1, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(cp_nuclear() > min_cp_nuclear(), 1, 0)


@cache('step')
def cp_nuclear():
    """
    Real Name: b'cp nuclear'
    Original Eqn: b'cp nuclear initial*cp exogenous res elec dispatch reduction'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return cp_nuclear_initial() * cp_exogenous_res_elec_dispatch_reduction()


@cache('step')
def installed_capacity_nuclear_tw():
    """
    Real Name: b'installed capacity nuclear tw'
    Original Eqn: b'integ ( nuclear capacity under construction-nuclear capacity phase out-wear nuclear, initial capacity installed nuclear)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_installed_capacity_nuclear_tw()


@cache('step')
def nuclear_capacity_phase_out():
    """
    Real Name: b'nuclear capacity phase out'
    Original Eqn: b'if then else(selection of nuclear scenario=4, if then else(Time<start year nuclear growth scen3x x4, 0 , p nuclear scen3x x4*installed capacity nuclear tw), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        selection_of_nuclear_scenario() == 4,
        if_then_else(time() < start_year_nuclear_growth_scen3x_x4(), 0,
                               p_nuclear_scen3x_x4() * installed_capacity_nuclear_tw()), 0)


@cache('run')
def min_cp_nuclear():
    """
    Real Name: b'min cp nuclear'
    Original Eqn: b'0.6'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.6


@cache('step')
def replacement_nuclear_capacity():
    """
    Real Name: b'replacement nuclear capacity'
    Original Eqn: b'if then else(Time<2013,nuclear capacity under construction, if then else(selection of nuclear scenario=2, 0, if then else(selection of nuclear scenario=4, 0, replacement rate nuclear *wear nuclear*(1-nuclear overcapacity))))*cp limit nuclear'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2013, nuclear_capacity_under_construction(),
        if_then_else(
            selection_of_nuclear_scenario() == 2, 0,
            if_then_else(
                selection_of_nuclear_scenario() == 4, 0,
                replacement_rate_nuclear() * wear_nuclear() *
                (1 - nuclear_overcapacity())))) * cp_limit_nuclear()


@cache('run')
def min_cp_baseload_res():
    """
    Real Name: b'min cp baseload res'
    Original Eqn: b'0.15'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.15,0.15,0.15,0.15,0.0525,0.07875,0.0375,0.0625],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('step')
def abundance_uranium():
    """
    Real Name: b'abundance uranium'
    Original Eqn: b'if then else(pe demand uranium ej=0, 1, if then else(extraction uranium ej>pe demand uranium ej , 1, 1-((pe demand uranium ej-extraction uranium ej )/pe demand uranium ej)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        pe_demand_uranium_ej() < equality_threshold(), 1,
        if_then_else(
            extraction_uranium_ej() > pe_demand_uranium_ej(), 1,
            1 - ((pe_demand_uranium_ej() - extraction_uranium_ej()) / pe_demand_uranium_ej())))


@cache('step')
def nuclear_overcapacity():
    """
    Real Name: b'nuclear overcapacity'
    Original Eqn: b'if then else(potential generation nuclear elec twh=0,0, (potential generation nuclear elec twh-fe nuclear elec generation twh)/potential generation nuclear elec twh)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        potential_generation_nuclear_elec_twh() < equality_threshold(), 0,
        (potential_generation_nuclear_elec_twh() - fe_nuclear_elec_generation_twh()) /
        potential_generation_nuclear_elec_twh())


@cache('run')
def p_nuclear_scen3x_x4():
    """
    Real Name: b'p nuclear scen3x x4'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def start_year_nuclear_growth_scen3x_x4():
    """
    Real Name: b'start year nuclear growth scen3x x4'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('step')
def p_nuclear_elec_gen():
    """
    Real Name: b'p nuclear elec gen'
    Original Eqn: b'if then else(selection of nuclear scenario=1, 0, if then else(selection of nuclear scenario=2,0, if then else(selection of nuclear scenario=4,0, if then else(selection of nuclear scenario=3, if then else(Time<start year nuclear growth scen3x x4, 0 , p nuclear scen3x x4) ,0))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        selection_of_nuclear_scenario() == 1, 0,
        if_then_else(
            selection_of_nuclear_scenario() == 2, 0,
            if_then_else(
                selection_of_nuclear_scenario() == 4, 0,
                if_then_else(
                    selection_of_nuclear_scenario() == 3,
                    if_then_else(time() < start_year_nuclear_growth_scen3x_x4(), 0,
                                           p_nuclear_scen3x_x4()), 0))))


@cache('step')
def required_capacity_nuclear_tw():
    """
    Real Name: b'required capacity nuclear tw'
    Original Eqn: b'integ ( new required capacity nuclear-new nuclear capacity under planning, initial required capacity nuclear)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_required_capacity_nuclear_tw()


@cache('run')
def time_planification_nuclear():
    """
    Real Name: b'time planification nuclear'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def time_construction_nuclear():
    """
    Real Name: b'time construction nuclear'
    Original Eqn: b'8'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 8


@cache('run')
def initial_capacity_installed_nuclear():
    """
    Real Name: b'initial capacity installed nuclear'
    Original Eqn: b'initial gen nuclear*twe per twh/cp nuclear initial'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return initial_gen_nuclear() * twe_per_twh() / cp_nuclear_initial()


@cache('step')
def new_nuclear_capacity_under_planning():
    """
    Real Name: b'new nuclear capacity under planning'
    Original Eqn: b'max(0,required capacity nuclear tw/time planification nuclear)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, required_capacity_nuclear_tw() / time_planification_nuclear())


@cache('run')
def selection_of_nuclear_scenario():
    """
    Real Name: b'selection of nuclear scenario'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def initial_gen_nuclear():
    """
    Real Name: b'initial gen nuclear'
    Original Eqn: b'2210.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2210.0


@cache('run')
def initial_capacity_in_construction_nuclear():
    """
    Real Name: b'initial capacity in construction nuclear'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def initial_required_capacity_nuclear():
    """
    Real Name: b'initial required capacity nuclear'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('step')
def planned_nuclear_capacity_tw():
    """
    Real Name: b'planned nuclear capacity tw'
    Original Eqn: b'integ ( new nuclear capacity under planning+replacement nuclear capacity-nuclear capacity under construction , initial capacity in construction nuclear)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_planned_nuclear_capacity_tw()


@cache('step')
def wear_nuclear():
    """
    Real Name: b'wear nuclear'
    Original Eqn: b'if then else(Time<2012, 0, installed capacity nuclear tw/life time nuclear )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2012, 0,
                                  installed_capacity_nuclear_tw() / life_time_nuclear())


@cache('step')
def effects_shortage_uranium():
    """
    Real Name: b'effects shortage uranium'
    Original Eqn: b'if then else(extraction uranium ej=0, 0, if then else(abundance uranium>0.8, ((abundance uranium-0.8)*5 )^2, 0))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        extraction_uranium_ej() < equality_threshold(), 0,
        if_then_else(abundance_uranium() > 0.8, ((abundance_uranium() - 0.8) * 5)**2, 0))


@cache('step')
def tpes_intensity_ej_tdollar():
    """
    Real Name: b'tpes intensity ej tdollar'
    Original Eqn: b'zidz(tpes ej , gdp )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(tpes_ej(), gdp())


@cache('step')
def real_ped_intensity_of_electricity():
    """
    Real Name: b'real ped intensity of electricity'
    Original Eqn: b'zidz((total fe elec demand ej+elec gen related losses ej) , gdp )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz((total_fe_elec_demand_ej() + elec_gen_related_losses_ej()), gdp())


@cache('step')
def annual_gdp_growth_rate():
    """
    Real Name: b'annual gdp growth rate'
    Original Eqn: b'-1+zidz(gdp , gdp delayed 1yr )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return -1 + zidz(gdp(), gdp_delayed_1yr())


@cache('step')
def gdp_delayed_1yr():
    """
    Real Name: b'gdp delayed 1yr'
    Original Eqn: b'delay fixed ( gdp, 1, 29.16)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_gdp_round1__time_step___time_step_2916_1__time_step()


@cache('step')
def share_tot_monet_invest_elec_res_vs_gdp():
    """
    Real Name: b'share tot monet invest elec res vs gdp'
    Original Eqn: b'zidz(total monet invest res for elec tdolar , gdp )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(total_monet_invest_res_for_elec_tdolar(), gdp())


@cache('step')
def gdppc():
    """
    Real Name: b'gdppc'
    Original Eqn: b'gdp*dollars to tdollars/population'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return gdp() * dollars_to_tdollars() / population()


@cache('run')
def unlimited_coal_quest():
    """
    Real Name: b'unlimited coal quest'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('step')
def real_tfec():
    """
    Real Name: b'real tfec'
    Original Eqn: b'sum(real fe consumption by fuel)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(real_fe_consumption_by_fuel())


@cache('run')
def unlimited_uranium_quest():
    """
    Real Name: b'unlimited uranium quest'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def urr_coal_unlimited():
    """
    Real Name: b'urr coal unlimited'
    Original Eqn: b'urr coal high15*10000'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return urr_coal_high15() * 10000


@cache('run')
def urr_uranium_unlimited():
    """
    Real Name: b'urr uranium unlimited'
    Original Eqn: b'urr uranium ewg13*10000'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return urr_uranium_ewg13() * 10000


@cache('run')
def urr_conv_gas_unlimited():
    """
    Real Name: b'urr conv gas unlimited'
    Original Eqn: b'urr conv gas high mohr15*10000'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return urr_conv_gas_high_mohr15() * 10000


@cache('run')
def unlimited_gas_quest():
    """
    Real Name: b'unlimited gas quest'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def unlimited_oil_quest():
    """
    Real Name: b'unlimited oil quest'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def urr_conv_oil_unlimited():
    """
    Real Name: b'urr conv oil unlimited'
    Original Eqn: b'urr conv oil maggio12 high*10000'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return urr_conv_oil_maggio12_high() * 10000


@cache('run')
def b_logistic():
    """
    Real Name: b'b logistic'
    Original Eqn: b'50'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 50


@cache('run')
def a_logistic():
    """
    Real Name: b'a logistic'
    Original Eqn: b'750'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 750


@cache('run')
def activate_elf_by_scen_quest():
    """
    Real Name: b'activate elf by scen quest'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def total_demand_liquids_mb_div_d():
    """
    Real Name: b'total demand liquids mb div d'
    Original Eqn: b'ped liquids ej*mb div d per ej div year'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ped_liquids_ej() * mb_div_d_per_ej_div_year()


@cache('step')
def ped_coal_without_ctl():
    """
    Real Name: b'ped coal without ctl'
    Original Eqn: b'ped coal ej-ped coal for ctl ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ped_coal_ej() - ped_coal_for_ctl_ej()


@cache('step')
def surface_hydro_mha():
    """
    Real Name: b'surface hydro mha'
    Original Eqn: b'surface res elec[hydro]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return surface_res_elec().loc['hydro'].values


@cache('step')
def remaining_potential_hydro():
    """
    Real Name: b'remaining potential hydro'
    Original Eqn: b'if then else(max potential res elec twh[hydro] > real generation res elec twh[hydro], (max potential res elec twh[hydro]-real generation res elec twh[hydro])/max potential res elec twh[hydro], 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(max_potential_res_elec_twh().loc['hydro'].values > real_generation_res_elec_twh().loc['hydro'].values,
                                  (max_potential_res_elec_twh().loc['hydro'].values - real_generation_res_elec_twh().loc['hydro'].values) /
                                  max_potential_res_elec_twh().loc['hydro'].values, 0)


@cache('step')
def grid_reinforcement_costs_tdollar():
    """
    Real Name: b'grid reinforcement costs tdollar'
    Original Eqn: b'grid reinforcement costs*new capacity installed onshore wind tw/g per t'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return grid_reinforcement_costs() * new_capacity_installed_onshore_wind_tw() / g_per_t()


@cache('step')
def remaining_potential_onshore_wind():
    """
    Real Name: b'remaining potential onshore wind'
    Original Eqn: b'if then else(max potential res elec twh[wind onshore] > real generation res elec twh[wind onshore], (max potential res elec twh[wind onshore]-real generation res elec twh[wind onshore])/max potential res elec twh[wind onshore], 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(max_potential_res_elec_twh().loc['wind onshore'].values > real_generation_res_elec_twh().loc['wind onshore'].values,
                                  (max_potential_res_elec_twh().loc['wind onshore'].values - real_generation_res_elec_twh().loc['wind onshore'].values) /
                                  max_potential_res_elec_twh().loc['wind onshore'].values, 0)


@cache('step')
def remaining_potential_offshore_wind():
    """
    Real Name: b'remaining potential offshore wind'
    Original Eqn: b'if then else(max potential res elec twh[wind offshore] > real generation res elec twh[wind offshore], (max potential res elec twh[wind offshore]-real generation res elec twh[wind offshore])/max potential res elec twh[wind offshore], 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(max_potential_res_elec_twh().loc['wind offshore'].values > real_generation_res_elec_twh().loc['wind offshore'].values,
                                  (max_potential_res_elec_twh().loc['wind offshore'].values - real_generation_res_elec_twh().loc['wind offshore'].values) /
                                  max_potential_res_elec_twh().loc['wind offshore'].values, 0)


@cache('step')
def remaining_potential_bioe():
    """
    Real Name: b'remaining potential bioe'
    Original Eqn: b'if then else(max potential res elec twh[solid bioe elec] > real generation res elec twh[solid bioe elec], (max potential res elec twh[solid bioe elec]-real generation res elec twh[solid bioe elec])/max potential res elec twh[solid bioe elec], 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(max_potential_res_elec_twh().loc['solid bioe elec'].values > real_generation_res_elec_twh().loc['solid bioe elec'].values,
                                  (max_potential_res_elec_twh().loc['solid bioe elec'].values - real_generation_res_elec_twh().loc['solid bioe elec'].values) /
                                  max_potential_res_elec_twh().loc['solid bioe elec'].values, 0)


@cache('step')
def remaining_potential_oceanic():
    """
    Real Name: b'remaining potential oceanic'
    Original Eqn: b'if then else(max potential res elec twh[oceanic] > real generation res elec twh[oceanic], (max potential res elec twh[oceanic]-real generation res elec twh[oceanic])/max potential res elec twh[oceanic], 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(max_potential_res_elec_twh().loc['oceanic'].values > real_generation_res_elec_twh().loc['oceanic'].values,
                                  (max_potential_res_elec_twh().loc['oceanic'].values - real_generation_res_elec_twh().loc['oceanic'].values) /
                                  max_potential_res_elec_twh().loc['oceanic'].values, 0)


@cache('step')
def remaining_potential_geot_elec():
    """
    Real Name: b'remaining potential geot elec'
    Original Eqn: b'if then else(max potential res elec twh[geot elec] > real generation res elec twh[geot elec], (max potential res elec twh[geot elec]-real generation res elec twh[geot elec])/max potential res elec twh[geot elec], 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(max_potential_res_elec_twh().loc['geot elec'].values > real_generation_res_elec_twh().loc['geot elec'].values,
                                  (max_potential_res_elec_twh().loc['geot elec'].values - real_generation_res_elec_twh().loc['geot elec'].values) /
                                  max_potential_res_elec_twh().loc['geot elec'].values, 0)


@cache('step')
def remaining_potential_solar_elec_pv():
    """
    Real Name: b'remaining potential solar elec pv'
    Original Eqn: b'if then else(max potential res elec twh[solar pv] > real generation res elec twh[solar pv], (max potential res elec twh[solar pv]-real generation res elec twh[solar pv])/max potential res elec twh[solar pv], 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(max_potential_res_elec_twh().loc['solar pv'].values > real_generation_res_elec_twh().loc['solar pv'].values,
                                  (max_potential_res_elec_twh().loc['solar pv'].values - real_generation_res_elec_twh().loc['solar pv'].values) /
                                  max_potential_res_elec_twh().loc['solar pv'].values, 0)


@cache('run')
def initial_non_energy_use():
    """
    Real Name: b'initial non energy use'
    Original Eqn: b'0.86732782'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.001995,0.001995,17.86474451,3.74572862,0.86732782],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def real_total_output():
    """
    Real Name: b'real total output'
    Original Eqn: b'sum(real total output by sector)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(real_total_output_by_sector())


@cache('step')
def real_demand():
    """
    Real Name: b'real demand'
    Original Eqn: b'sum(real demand by sector)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(real_demand_by_sector())


@cache('run')
def max_potential_res_elec_twh():
    """
    Real Name: b'max potential res elec twh'
    Original Eqn: b'max potential res elec twe[res elec]/twe per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_potential_res_elec_twe() / twe_per_twh()


@cache('step')
def pe_onshore_wind_for_elec_generation_ej():
    """
    Real Name: b'pe onshore wind for elec generation ej'
    Original Eqn: b'pe real generation res elec[wind onshore]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_real_generation_res_elec().loc['wind onshore'].values


@cache('step')
def fe_elec_generation_from_solar_pv_twh():
    """
    Real Name: b'fe elec generation from solar pv twh'
    Original Eqn: b'real generation res elec twh[solar pv]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_generation_res_elec_twh().loc['solar pv'].values


@cache('run')
def power_density_solar_pv():
    """
    Real Name: b'power density solar pv'
    Original Eqn: b'power density res elec twe div mha[solar pv]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return power_density_res_elec_twe_div_mha().loc['solar pv'].values


@cache('step')
def pe_hydro_for_elec_generation_ej():
    """
    Real Name: b'pe hydro for elec generation ej'
    Original Eqn: b'pe real generation res elec[hydro]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_real_generation_res_elec().loc['hydro'].values


@cache('step')
def invest_biow_tdolar():
    """
    Real Name: b'invest biow tdolar'
    Original Eqn: b'invest res elec tdolar[solid bioe elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return invest_res_elec_tdolar().loc['solid bioe elec'].values


@cache('step')
def fe_elec_generation_from_hydro_twh():
    """
    Real Name: b'fe elec generation from hydro twh'
    Original Eqn: b'real generation res elec twh[hydro]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_generation_res_elec_twh().loc['hydro'].values


@cache('step')
def invest_geot_elec_tdolar():
    """
    Real Name: b'invest geot elec tdolar'
    Original Eqn: b'invest res elec tdolar[geot elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return invest_res_elec_tdolar().loc['geot elec'].values


@cache('step')
def invest_hydro_tdolar():
    """
    Real Name: b'invest hydro tdolar'
    Original Eqn: b'invest res elec tdolar[hydro]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return invest_res_elec_tdolar().loc['hydro'].values


@cache('step')
def fe_elec_generation_from_onshore_wind_twh():
    """
    Real Name: b'fe elec generation from onshore wind twh'
    Original Eqn: b'real generation res elec twh[wind onshore]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_generation_res_elec_twh().loc['wind onshore'].values


@cache('step')
def invest_oceanic_tdolar():
    """
    Real Name: b'invest oceanic tdolar'
    Original Eqn: b'invest res elec tdolar[oceanic]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return invest_res_elec_tdolar().loc['oceanic'].values


@cache('step')
def invest_onshore_wind_tdolar():
    """
    Real Name: b'invest onshore wind tdolar'
    Original Eqn: b'invest res elec tdolar[wind onshore]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return invest_res_elec_tdolar().loc['wind onshore'].values


@cache('step')
def invest_offshore_wind_tdolar():
    """
    Real Name: b'invest offshore wind tdolar'
    Original Eqn: b'invest res elec tdolar[wind offshore]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return invest_res_elec_tdolar().loc['wind offshore'].values


@cache('step')
def fe_elec_generation_from_geot_elec_twh():
    """
    Real Name: b'fe elec generation from geot elec twh'
    Original Eqn: b'real generation res elec twh[geot elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_generation_res_elec_twh().loc['geot elec'].values


@cache('step')
def pe_geot_elec_for_elec_generation_ej():
    """
    Real Name: b'pe geot elec for elec generation ej'
    Original Eqn: b'pe real generation res elec[geot elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_real_generation_res_elec().loc['geot elec'].values


@cache('step')
def pe_solar_pv_for_elec_generation_ej():
    """
    Real Name: b'pe solar pv for elec generation ej'
    Original Eqn: b'pe real generation res elec[solar pv]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_real_generation_res_elec().loc['solar pv'].values


@cache('step')
def fe_elec_generation_from_bioe_twh():
    """
    Real Name: b'fe elec generation from bioe twh'
    Original Eqn: b'real generation res elec twh[solid bioe elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_generation_res_elec_twh().loc['solid bioe elec'].values


@cache('step')
def pe_oceanic_for_elec_generation_ej():
    """
    Real Name: b'pe oceanic for elec generation ej'
    Original Eqn: b'pe real generation res elec[oceanic]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_real_generation_res_elec().loc['oceanic'].values


@cache('step')
def pe_bioe_for_elec_generation_ej():
    """
    Real Name: b'pe bioe for elec generation ej'
    Original Eqn: b'pe real generation res elec[solid bioe elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_real_generation_res_elec().loc['solid bioe elec'].values


@cache('step')
def fe_elec_generation_from_offshore_wind_twh():
    """
    Real Name: b'fe elec generation from offshore wind twh'
    Original Eqn: b'real generation res elec twh[wind offshore]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_generation_res_elec_twh().loc['wind offshore'].values


@cache('step')
def fe_elec_generation_from_oceanic_twh():
    """
    Real Name: b'fe elec generation from oceanic twh'
    Original Eqn: b'real generation res elec twh[oceanic]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_generation_res_elec_twh().loc['oceanic'].values


@cache('step')
def pe_offshore_wind_for_elec_generation_ej():
    """
    Real Name: b'pe offshore wind for elec generation ej'
    Original Eqn: b'pe real generation res elec[wind offshore]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_real_generation_res_elec().loc['wind offshore'].values


@cache('step')
def invest_solar_tdolar():
    """
    Real Name: b'invest solar tdolar'
    Original Eqn: b'invest res elec tdolar[solar pv]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return invest_res_elec_tdolar().loc['solar pv'].values


@cache('run')
def initial_value_land_compet_biofuels_2gen_mha():
    """
    Real Name: b'initial value land compet biofuels 2gen mha'
    Original Eqn: b'initial value land compet biofuels 2gen ktoe*ej per ktoe'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return initial_value_land_compet_biofuels_2gen_ktoe() * ej_per_ktoe()


@cache('run')
def initial_value_land_compet_biofuels_2gen_ktoe():
    """
    Real Name: b'initial value land compet biofuels 2gen ktoe'
    Original Eqn: b'9052.844108405054'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 9052.844108405054


@cache('step')
def abundance_coal():
    """
    Real Name: b'abundance coal'
    Original Eqn: b'if then else(extraction coal ej>ped coal ej, 1, 1-zidz((ped coal ej-extraction coal ej), ped coal ej))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        extraction_coal_ej() > ped_coal_ej(), 1, 1 - zidz(
            (ped_coal_ej() - extraction_coal_ej()), ped_coal_ej()))


@cache('step')
def abundance_liquids():
    """
    Real Name: b'abundance liquids'
    Original Eqn: b'if then else(ped liquids ej<pes liquids ej, 1, 1- zidz(ped liquids ej-pes liquids ej , ped liquids ej))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        ped_liquids_ej() < pes_liquids_ej(), 1,
        1 - zidz(ped_liquids_ej() - pes_liquids_ej(), ped_liquids_ej()))


@cache('step')
def check_liquids():
    """
    Real Name: b'check liquids'
    Original Eqn: b'zidz((ped liquids ej-pes liquids ej) , pes liquids ej )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz((ped_liquids_ej() - pes_liquids_ej()), pes_liquids_ej())


@cache('run')
def share_heat_distribution_losses():
    """
    Real Name: b'share heat distribution losses'
    Original Eqn: b'0.0615'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.0615


@cache('step')
def potential_tot_res_elec_after_intermitt():
    """
    Real Name: b'potential tot res elec after intermitt'
    Original Eqn: b'sum(potential res elec after intermitt twh)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(potential_res_elec_after_intermitt_twh())


@cache('step')
def pe_biow_for_elec_generation_mtoe():
    """
    Real Name: b'pe biow for elec generation mtoe'
    Original Eqn: b'pe real generation res elec[solid bioe elec]*mtoe per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_real_generation_res_elec().loc['solid bioe elec'].values * mtoe_per_ej()


@cache('step')
def remaining_potential_tot_res_elec_after_intermitt():
    """
    Real Name: b'remaining potential tot res elec after intermitt'
    Original Eqn: b'if then else(potential tot res elec after intermitt > fe real tot generation res elec twh, (potential tot res elec after intermitt-fe real tot generation res elec twh)/potential tot res elec after intermitt, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        potential_tot_res_elec_after_intermitt() > fe_real_tot_generation_res_elec_twh(),
        (potential_tot_res_elec_after_intermitt() - fe_real_tot_generation_res_elec_twh()) /
        potential_tot_res_elec_after_intermitt(), 0)


@cache('run')
def power_density_res_elec_twe_div_mha():
    """
    Real Name: b'power density res elec twe div mha'
    Original Eqn: b'0.04'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.04,0.5,0.0,0.0,0.025,0.01,0.033,0.033],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('run')
def power_density_res_elec_tw_div_mha():
    """
    Real Name: b'power density res elec tw div mha'
    Original Eqn: b'power density res elec twe div mha[res elec]/cp ini res elec[res elec]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return power_density_res_elec_twe_div_mha() / cp_ini_res_elec()


@cache('step')
def time_95pc_ts_potential_res_elec():
    """
    Real Name: b'time 95pc ts potential res elec'
    Original Eqn: b'if then else(remaining potential res elec after intermitt[res elec]>0.05, 0, Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(remaining_potential_res_elec_after_intermitt() > 0.05, 0, time())


@cache('step')
def surface_res_elec():
    """
    Real Name: b'surface res elec'
    Original Eqn: b'if then else(power density res elec tw div mha[res elec]=0, 0, installed capacity res elec tw[res elec]/power density res elec tw div mha[res elec])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        power_density_res_elec_tw_div_mha() < equality_threshold(), 0,
        installed_capacity_res_elec_tw() / power_density_res_elec_tw_div_mha())


@cache('run')
def max_geot_elec_twe():
    """
    Real Name: b'max geot elec twe'
    Original Eqn: b'max pe geot elec twth*efficiency conversion geot pe to elec'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_pe_geot_elec_twth() * efficiency_conversion_geot_pe_to_elec()


@cache('run')
def max_pe_geot_elec_twth():
    """
    Real Name: b'max pe geot elec twth'
    Original Eqn: b'0.3'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.3


@cache('run')
def efficiency_conversion_geot_pe_to_elec():
    """
    Real Name: b'efficiency conversion geot pe to elec'
    Original Eqn: b'0.3333333333333333'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.3333333333333333


@cache('run')
def geot_pe_potential_for_heat_ej():
    """
    Real Name: b'geot pe potential for heat ej'
    Original Eqn: b'geot pe potential for heat twth*ej per twh/twe per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return geot_pe_potential_for_heat_twth() * ej_per_twh() / twe_per_twh()


@cache('run')
def initial_instal_cap_res_elec():
    """
    Real Name: b'initial instal cap res elec'
    Original Eqn: b'0.624490030142469'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.62449003,0.00738462,0.02075556,0.00020761,0.00455706,4.7771042e-06,3.92104377e-05,0.0003538],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('step')
def abundance_res_elec2():
    """
    Real Name: b'abundance res elec2'
    Original Eqn: b'sqrt (abundance res elec)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.sqrt(abundance_res_elec())


@cache('step')
def potential_tot_generation_res_elec_twh():
    """
    Real Name: b'potential tot generation res elec twh'
    Original Eqn: b'sum(potential generation res elec twh)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return sum(potential_generation_res_elec_twh())


@cache('step')
def res_elec_tot_overcapacity():
    """
    Real Name: b'res elec tot overcapacity'
    Original Eqn: b'if then else(potential tot generation res elec twh=0,0, (potential tot generation res elec twh-fe real tot generation res elec twh)/potential tot generation res elec twh)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        potential_tot_generation_res_elec_twh() < equality_threshold(), 0,
        (potential_tot_generation_res_elec_twh() - fe_real_tot_generation_res_elec_twh()) /
        potential_tot_generation_res_elec_twh())


@cache('step')
def wear_res_elec():
    """
    Real Name: b'wear res elec'
    Original Eqn: b'if then else(Time<2015, 0, installed capacity res elec tw[res elec]/lifetime res elec[res elec])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2015, 0,
                                  installed_capacity_res_elec_tw() / lifetime_res_elec())


def cp_ini_res_elec_sub_hydro(x):

    """This is the only cp-ini defined as a lookup, for the rest of RES elec it is defined as a constant value"""

    return lookup(x, [1995, 2007, 2015, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100],
                     [0.42, 0.42, 0.42, 0.42, 0.36, 0.33, 0.33, 0.33, 0.33, 0.33, 0.33, 0.33])


@cache('step')
def cp_ini_res_elec():
    """
    Real Name: b'cp ini res elec'
    Original Eqn: b'0.42302360615086493'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[cp_ini_res_elec_sub_hydro(time()),0.65,0.5,0.2,0.21,0.315,0.15,0.25],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('run')
def g_per_t():
    """
    Real Name: b'g per t'
    Original Eqn: b'1000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000


@cache('run')
def time_construction_res_elec():
    """
    Real Name: b'time construction res elec'
    Original Eqn: b'2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[2.0,2.0,2.0,2.0,2.0,4.0,1.0,2.0],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('run')
def time_planification_res_elec():
    """
    Real Name: b'time planification res elec'
    Original Eqn: b'2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[2.0,3.5,0.5,0.5,1.0,0.5,0.5,0.5],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('step')
def new_res_elec_capacity_under_planning():
    """
    Real Name: b'new res elec capacity under planning'
    Original Eqn: b'max(0, required capacity res elec tw[res elec]/time planification res elec[res elec])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(0, required_capacity_res_elec_tw() / time_planification_res_elec())


@cache('run')
def lifetime_res_elec():
    """
    Real Name: b'lifetime res elec'
    Original Eqn: b'80'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[80.0,30.0,30.0,40.0,20.0,20.0,25.0,25.0],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('run')
def past_res_elec_capacity_growth():
    """
    Real Name: b'past res elec capacity growth'
    Original Eqn: b'0.028160563794549454'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0.02816056,0.02391914,0.07241524,0.04771433,0.25131581,0.41031785,0.45342377,0.295],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('run')
def mt_per_gt():
    """
    Real Name: b'mt per gt'
    Original Eqn: b'1000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000


@cache('run')
def gtl_efficiency():
    """
    Real Name: b'gtl efficiency'
    Original Eqn: b'0.52'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.52


@cache('run')
def ctl_efficiency():
    """
    Real Name: b'ctl efficiency'
    Original Eqn: b'0.31'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.31


@cache('step')
def ctl_plus_gtl_gb():
    """
    Real Name: b'ctl plus gtl gb'
    Original Eqn: b'fes ctl plus gtl ej/gboe per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fes_ctl_plus_gtl_ej() / gboe_per_ej()


@cache('run')
def mb_div_d_per_ej_div_year():
    """
    Real Name: b'mb div d per ej div year'
    Original Eqn: b'0.479726'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.479726


@cache('run')
def hist_growth_ctl():
    """
    Real Name: b'hist growth ctl'
    Original Eqn: b'0.021'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.021


@cache('run')
def gboe_per_ej():
    """
    Real Name: b'gboe per ej'
    Original Eqn: b'5.582'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5.582


@cache('run')
def hist_growth_gtl():
    """
    Real Name: b'hist growth gtl'
    Original Eqn: b'0.163'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.163


@cache('run')
def urr_uranium_user_defined():
    """
    Real Name: b'urr uranium user defined'
    Original Eqn: b'14500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 14500


@cache('run')
def replacement_rate_nuclear():
    """
    Real Name: b'replacement rate nuclear'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def demand_gas_for_oil_refinery_gains():
    """
    Real Name: b'demand gas for oil refinery gains'
    Original Eqn: b'oil refinery gains ej*efficiency gas for oil refinery gains'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return oil_refinery_gains_ej() * efficiency_gas_for_oil_refinery_gains()


@cache('step')
def share_res_vs_tpes():
    """
    Real Name: b'share res vs tpes'
    Original Eqn: b'tpe from res ej/tpes ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return tpe_from_res_ej() / tpes_ej()


@cache('step')
def tpes_mtoe():
    """
    Real Name: b'tpes mtoe'
    Original Eqn: b'tpes ej*mtoe per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return tpes_ej() * mtoe_per_ej()


@cache('step')
def fe_elec_generation_from_nre_twh():
    """
    Real Name: b'fe elec generation from nre twh'
    Original Eqn: b'fe elec generation from fossil fuels twh+fe nuclear elec generation twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fe_elec_generation_from_fossil_fuels_twh() + fe_nuclear_elec_generation_twh()


@cache('run')
def pepc_consumption_people_depending_on_trad_biomass():
    """
    Real Name: b'pepc consumption people depending on trad biomass'
    Original Eqn: b'pe consumption trad biomass ref/people relying trad biomass ref'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_consumption_trad_biomass_ref() / people_relying_trad_biomass_ref()


@cache('step')
def share_gas_for_oil_refinery_gains():
    """
    Real Name: b'share gas for oil refinery gains'
    Original Eqn: b'if then else(ped natx gas without gtl>0, demand gas for oil refinery gains/ped natx gas without gtl, 0.5)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(ped_natx_gas_without_gtl() > 0,
                                  demand_gas_for_oil_refinery_gains() / ped_natx_gas_without_gtl(),
                                  0.5)


@cache('run')
def people_relying_trad_biomass_ref():
    """
    Real Name: b'people relying trad biomass ref'
    Original Eqn: b'2500000000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2500000000


@cache('run')
def pe_consumption_trad_biomass_ref():
    """
    Real Name: b'pe consumption trad biomass ref'
    Original Eqn: b'39.626'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 39.626


@cache('run')
def tpefpc_threshold_high_development():
    """
    Real Name: b'tpefpc threshold high development'
    Original Eqn: b'106'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 106


@cache('run')
def tped_acceptable_standard_living():
    """
    Real Name: b'tped acceptable standard living'
    Original Eqn: b'40'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 40


@cache('step')
def pop_not_dependent_on_trad_biomass():
    """
    Real Name: b'pop not dependent on trad biomass'
    Original Eqn: b'population-population dependent on trad biomass'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return population() - population_dependent_on_trad_biomass()


@cache('step')
def carbon_footprint_tco2x_div_person():
    """
    Real Name: b'carbon footprint tco2x div person'
    Original Eqn: b'total co2 emissions gtco2*t per gt/population'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_co2_emissions_gtco2() * t_per_gt() / population()


@cache('step')
def average_tpespc_xwithout_trad_biomassx():
    """
    Real Name: b'average tpespc xwithout trad biomassx'
    Original Eqn: b'tpes xwithout trad biomassx*gj per ej/pop not dependent on trad biomass'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return tpes_xwithout_trad_biomassx() * gj_per_ej() / pop_not_dependent_on_trad_biomass()


@cache('step')
def tpes_xwithout_trad_biomassx():
    """
    Real Name: b'tpes xwithout trad biomassx'
    Original Eqn: b'tpes ej-pe traditional biomass ej delayed 1yr'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return tpes_ej() - pe_traditional_biomass_ej_delayed_1yr()


@cache('run')
def max_npp_potential_bioe_residues_for_heat_and_elec():
    """
    Real Name: b'max npp potential bioe residues for heat and elec'
    Original Eqn: b'max npp potential bioe residues*(1-share cellulosic biofuels vs bioe residues)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_npp_potential_bioe_residues() * (1 - share_cellulosic_biofuels_vs_bioe_residues())


@cache('run')
def max_npp_potential_bioe_residues_for_cellulosic_biofuels():
    """
    Real Name: b'max npp potential bioe residues for cellulosic biofuels'
    Original Eqn: b'max npp potential bioe residues*share cellulosic biofuels vs bioe residues'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_npp_potential_bioe_residues() * share_cellulosic_biofuels_vs_bioe_residues()


@cache('step')
def total_cumulative_emissions_gtco2():
    """
    Real Name: b'total cumulative emissions gtco2'
    Original Eqn: b'total cumulative emissions gtc/c per co2'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_cumulative_emissions_gtc() / c_per_co2()


@cache('step')
def carbon_emissions_gtc():
    """
    Real Name: b'carbon emissions gtc'
    Original Eqn: b'total co2 emissions gtco2*c per co2'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_co2_emissions_gtco2() * c_per_co2()


@cache('run')
def gco2_per_mj_unconv_gas():
    """
    Real Name: b'gco2 per mj unconv gas'
    Original Eqn: b'56.1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 56.1


@cache('run')
def gco2_per_mj_unconv_oil():
    """
    Real Name: b'gco2 per mj unconv oil'
    Original Eqn: b'91.4'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 91.4


@cache('step')
def co2_emissions_ctl():
    """
    Real Name: b'co2 emissions ctl'
    Original Eqn: b'gco2 per mj ctl*extraction coal for ctl ej*mj per ej/g per gt'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return gco2_per_mj_ctl() * extraction_coal_for_ctl_ej() * mj_per_ej() / g_per_gt()


@cache('run')
def gco2_per_mj_conv_gas():
    """
    Real Name: b'gco2 per mj conv gas'
    Original Eqn: b'56.1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 56.1


@cache('run')
def gco2_per_mj_ctl():
    """
    Real Name: b'gco2 per mj ctl'
    Original Eqn: b'165.2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 165.2


@cache('run')
def gco2_per_mj_gtl():
    """
    Real Name: b'gco2 per mj gtl'
    Original Eqn: b'103.3'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 103.3


@cache('run')
def gco2_per_mj_coal():
    """
    Real Name: b'gco2 per mj coal'
    Original Eqn: b'94.6'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 94.6


@cache('run')
def gco2_per_mj_conv_oil():
    """
    Real Name: b'gco2 per mj conv oil'
    Original Eqn: b'73.3'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 73.3


@cache('run')
def gco2_per_mj_shale_oil():
    """
    Real Name: b'gco2 per mj shale oil'
    Original Eqn: b'146.1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 146.1


@cache('run')
def dollars_to_tdollars():
    """
    Real Name: b'dollars to tdollars'
    Original Eqn: b'1000000000000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000000000000


@cache('step')
def land_compet_2gen_vs_total_land_compet():
    """
    Real Name: b'land compet 2gen vs total land compet'
    Original Eqn: b'land compet biofuels 2gen mha/land compet required dedicated crops for biofuels'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return land_compet_biofuels_2gen_mha() / land_compet_required_dedicated_crops_for_biofuels()


@cache('run')
def gj_per_ej():
    """
    Real Name: b'gj per ej'
    Original Eqn: b'1000000000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000000000


@cache('step')
def land_shifted_to_biofuels_3gen():
    """
    Real Name: b'land shifted to biofuels 3gen'
    Original Eqn: b'if then else(Time<start year 3gen,0, if then else(Time<(start year 3gen+5), annual shift from 2gen to 3gen*land compet biofuels 2gen mha*biofuels 3gen land compet available*land compet 2gen vs total land compet, p biofuels 3gen*land compet biofuels 3gen mha*biofuels 3gen land compet available*land compet 2gen vs total land compet))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_year_3gen(), 0,
        if_then_else(
            time() < (start_year_3gen() + 5),
            annual_shift_from_2gen_to_3gen() * land_compet_biofuels_2gen_mha() *
            biofuels_3gen_land_compet_available() * land_compet_2gen_vs_total_land_compet(),
            p_biofuels_3gen() * land_compet_biofuels_3gen_mha() *
            biofuels_3gen_land_compet_available() * land_compet_2gen_vs_total_land_compet()))


@cache('step')
def average_tpes_per_capita():
    """
    Real Name: b'average tpes per capita'
    Original Eqn: b'tpes ej*gj per ej/population'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return tpes_ej() * gj_per_ej() / population()


@cache('run')
def geot_pe_potential_for_heat_twth():
    """
    Real Name: b'geot pe potential for heat twth'
    Original Eqn: b'0.3'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.3


@cache('step')
def pe_losses_uranium_for_elec_ej():
    """
    Real Name: b'pe losses uranium for elec ej'
    Original Eqn: b'extraction uranium ej*(1-efficiency uranium for electricity)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_uranium_ej() * (1 - efficiency_uranium_for_electricity())


@cache('step')
def share_res_for_elec_vs_tpe_res():
    """
    Real Name: b'share res for elec vs tpe res'
    Original Eqn: b'pe elec generation from res ej/(pe supply res non elec ej+pe elec generation from res ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_elec_generation_from_res_ej() / (pe_supply_res_non_elec_ej() +
                                               pe_elec_generation_from_res_ej())


@cache('step')
def extraction_coal_mtoe():
    """
    Real Name: b'extraction coal mtoe'
    Original Eqn: b'extraction coal ej*mtoe per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_coal_ej() * mtoe_per_ej()


@cache('step')
def max_extraction_coal_mtoe():
    """
    Real Name: b'max extraction coal mtoe'
    Original Eqn: b'max extraction coal ej*mtoe per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_extraction_coal_ej() * mtoe_per_ej()


@cache('step')
def tpe_from_res_ej():
    """
    Real Name: b'tpe from res ej'
    Original Eqn: b'pe elec generation from res ej+pe supply res non elec ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_elec_generation_from_res_ej() + pe_supply_res_non_elec_ej()


@cache('step')
def tpe_from_res_mtoe():
    """
    Real Name: b'tpe from res mtoe'
    Original Eqn: b'tpe from res ej*mtoe per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return tpe_from_res_ej() * mtoe_per_ej()


@cache('step')
def electrical_distribution_losses_ej():
    """
    Real Name: b'electrical distribution losses ej'
    Original Eqn: b'electrical distribution losses twh*ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return electrical_distribution_losses_twh() * ej_per_twh()


@cache('run')
def efficiency_conversion_bioe_plants_to_heat():
    """
    Real Name: b'efficiency conversion bioe plants to heat'
    Original Eqn: b'0.55'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.55


@cache('run')
def efficiency_improvement_biofuels_3gen():
    """
    Real Name: b'efficiency improvement biofuels 3gen'
    Original Eqn: b'0.15'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.15


@cache('step')
def potential_peavail_biofuels_2gen_land_compet_ej():
    """
    Real Name: b'potential peavail biofuels 2gen land compet ej'
    Original Eqn: b'land compet biofuels 2gen mha*land productivity biofuels 2gen ej mha'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return land_compet_biofuels_2gen_mha() * land_productivity_biofuels_2gen_ej_mha()


@cache('step')
def annual_additional_historic_land_use_biofuels_2gen():
    """
    Real Name: b'annual additional historic land use biofuels 2gen'
    Original Eqn: b'annual additional historic product biofuels 2gen*ej per ktoe/land productivity biofuels 2gen ej mha'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return annual_additional_historic_product_biofuels_2gen() * ej_per_ktoe(
    ) / land_productivity_biofuels_2gen_ej_mha()


@cache('run')
def max_npp_potential_bioe_residues():
    """
    Real Name: b'max npp potential bioe residues'
    Original Eqn: b'25'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 25


@cache('run')
def grid_reinforcement_costs():
    """
    Real Name: b'grid reinforcement costs'
    Original Eqn: b'238.32929015926584'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 238.32929015926584


@cache('run')
def historic_land_compet_available_for_biofuels_2gen():
    """
    Real Name: b'historic land compet available for biofuels 2gen'
    Original Eqn: b'74847.7*ej per ktoe/land productivity biofuels 2gen ej mha'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 74847.7 * ej_per_ktoe() / land_productivity_biofuels_2gen_ej_mha()


@cache('run')
def land_productivity_biofuels_2gen_ej_mha():
    """
    Real Name: b'land productivity biofuels 2gen ej mha'
    Original Eqn: b'0.049'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.049


@cache('step')
def max_peavail_potential_biofuels_2_x3gen():
    """
    Real Name: b'max peavail potential biofuels 2 x3gen'
    Original Eqn: b'if then else(Time<start year 3gen, max land compet biofuels 2gen*land productivity biofuels 2gen ej mha, max land compet biofuels 2gen* land productivity biofuels 2gen ej mha*(1+efficiency improvement biofuels 3gen))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_year_3gen(),
        max_land_compet_biofuels_2gen() * land_productivity_biofuels_2gen_ej_mha(),
        max_land_compet_biofuels_2gen() * land_productivity_biofuels_2gen_ej_mha() *
        (1 + efficiency_improvement_biofuels_3gen()))


@cache('step')
def land_compet_biofuels_2gen_mha():
    """
    Real Name: b'land compet biofuels 2gen mha'
    Original Eqn: b'integ ( new biofuels 2gen land compet-land shifted to biofuels 3gen, initial value land compet biofuels 2gen mha*land productivity biofuels 2gen ej mha)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_land_compet_biofuels_2gen_mha()


@cache('run')
def efficiency_conversion_bioe_to_elec():
    """
    Real Name: b'efficiency conversion bioe to elec'
    Original Eqn: b'0.35'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.35


@cache('step')
def potential_peavail_biofuels_prod_3gen_ej():
    """
    Real Name: b'potential peavail biofuels prod 3gen ej'
    Original Eqn: b'land compet biofuels 3gen mha*land productivity biofuels 2gen ej mha*(1+efficiency improvement biofuels 3gen )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return land_compet_biofuels_3gen_mha() * land_productivity_biofuels_2gen_ej_mha() * (
        1 + efficiency_improvement_biofuels_3gen())


@cache('run')
def max_peavail_potential_bioe_residues_for_cellulosic_biofuels():
    """
    Real Name: b'max peavail potential bioe residues for cellulosic biofuels'
    Original Eqn: b'max npp potential bioe residues for cellulosic biofuels*efficiency bioe residues to cellulosic liquids'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return max_npp_potential_bioe_residues_for_cellulosic_biofuels() * efficiency_bioe_residues_to_cellulosic_liquids()


@cache('run')
def p_biofuels_3gen():
    """
    Real Name: b'p biofuels 3gen'
    Original Eqn: b'0.05'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.05


@cache('step')
def constrain_gas_exogenous_growth_quest_delayed_x1yr():
    """
    Real Name: b'constrain gas exogenous growth quest delayed x1yr'
    Original Eqn: b'delay fixed ( constrain gas exogenous growth quest, 1, 1)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_constrain_gas_exogenous_growth_quest_round1__time_step___time_step_1_1__time_step()


@cache('step')
def constrain_gas_exogenous_growth_quest():
    """
    Real Name: b'constrain gas exogenous growth quest'
    Original Eqn: b'if then else(check gases>-0.01 ,1 ,check gases)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(check_gases() > - equality_threshold(), 1, check_gases())


@cache('step')
def constrain_liquids_exogenous_growth_quest_delayed_x1yr():
    """
    Real Name: b'constrain liquids exogenous growth quest delayed x1yr'
    Original Eqn: b'delay fixed ( constrain liquids exogenous growth quest, 1, 1)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_constrain_liquids_exogenous_growth_quest_round1__time_step___time_step_1_1__time_step()


@cache('step')
def check_liquids_delayed_1yr():
    """
    Real Name: b'check liquids delayed 1yr'
    Original Eqn: b'delay fixed ( check liquids, 1, 1)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_check_liquids_round1__time_step___time_step_1_1__time_step()


@cache('step')
def check_gas_delayed_1yr():
    """
    Real Name: b'check gas delayed 1yr'
    Original Eqn: b'delay fixed ( check gases, 1, 1)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_check_gases_round1__time_step___time_step_1_1__time_step()


@cache('step')
def constrain_liquids_exogenous_growth_quest():
    """
    Real Name: b'constrain liquids exogenous growth quest'
    Original Eqn: b'if then else(check liquids>-0.0001 ,1 ,check liquids)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(check_liquids() > equality_threshold(), 1, check_liquids())


@cache('step')
def share_variable_res_elec_vs_total_generation_delayed_1yr():
    """
    Real Name: b'share variable res elec vs total generation delayed 1yr'
    Original Eqn: b'delay fixed ( share variable res elec generation vs total, 1, 0.0071)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_share_variable_res_elec_generation_vs_total_round1__time_step___time_step_00071_1__time_step()


@cache('step')
def overcapacity_vsx_intermittent_res_penetration_x0():
    """
    Real Name: b'overcapacity vsx intermittent res penetration x0'
    Original Eqn: b'max(1, 0.9599*exp(0.8938*share variable res elec vs total generation delayed 1yr))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        1, 0.9599 * np.exp(0.8938 * share_variable_res_elec_vs_total_generation_delayed_1yr()))


@cache('step')
def total_electrical_losses_ej():
    """
    Real Name: b'total electrical losses ej'
    Original Eqn: b'elec gen related losses ej+electrical distribution losses ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return elec_gen_related_losses_ej() + electrical_distribution_losses_ej()


@cache('step')
def gen_losses_vs_pe_for_elec():
    """
    Real Name: b'gen losses vs pe for elec'
    Original Eqn: b'elec gen related losses ej/total pe for electricity consumption ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return elec_gen_related_losses_ej() / total_pe_for_electricity_consumption_ej()


@cache('run')
def initial_gtl_production():
    """
    Real Name: b'initial gtl production'
    Original Eqn: b'0.064206'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.064206


@cache('run')
def initial_ctl_production():
    """
    Real Name: b'initial ctl production'
    Original Eqn: b'0.26293196'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.26293196


@cache('step')
def pe_demand_gas_elec_plants_ej():
    """
    Real Name: b'pe demand gas elec plants ej'
    Original Eqn: b'(fe demand gas elec plants twh/efficiency gas for electricity)*ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (fe_demand_gas_elec_plants_twh() / efficiency_gas_for_electricity()) * ej_per_twh()


@cache('step')
def pe_demand_coal_elec_plants_ej():
    """
    Real Name: b'pe demand coal elec plants ej'
    Original Eqn: b'(fe demand coal elec plants twh/efficiency coal for electricity)*ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (fe_demand_coal_elec_plants_twh() / efficiency_coal_for_electricity()) * ej_per_twh()


@cache('run')
def max_efficiency_gas_power_plants():
    """
    Real Name: b'max efficiency gas power plants'
    Original Eqn: b'0.6'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.6


@cache('step')
def total_pe_for_electricity_consumption_ej():
    """
    Real Name: b'total pe for electricity consumption ej'
    Original Eqn: b'total fe elec demand ej+elec gen related losses ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_fe_elec_demand_ej() + elec_gen_related_losses_ej()


@cache('run')
def initial_efficiency_gas_for_electricity():
    """
    Real Name: b'initial efficiency gas for electricity'
    Original Eqn: b'37.813'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 37.813


@cache('step')
def remaining_efficiency_improv_gas_for_electricity():
    """
    Real Name: b'remaining efficiency improv gas for electricity'
    Original Eqn: b'(max efficiency gas power plants-efficiency gas for electricity)/max efficiency gas power plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (max_efficiency_gas_power_plants() -
            efficiency_gas_for_electricity()) / max_efficiency_gas_power_plants()


@cache('run')
def efficiency_improv_gas_for_electricity():
    """
    Real Name: b'efficiency improv gas for electricity'
    Original Eqn: b'0.05'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.05


@cache('step')
def efficiency_gas_for_electricity():
    """
    Real Name: b'efficiency gas for electricity'
    Original Eqn: b'integ ( improvement efficiency gas for electricity, initial efficiency gas for electricity*percent to share)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_efficiency_gas_for_electricity()


@cache('run')
def percent_to_share():
    """
    Real Name: b'percent to share'
    Original Eqn: b'0.01'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.01


@cache('step')
def additional_pe_production_of_ctl_plus_gtl_for_liquids():
    """
    Real Name: b'additional pe production of ctl plus gtl for liquids'
    Original Eqn: b'ped coal for ctl ej+ped natx gas for gtl ej-fes ctl plus gtl ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ped_coal_for_ctl_ej() + ped_natx_gas_for_gtl_ej() - fes_ctl_plus_gtl_ej()


@cache('run')
def carbon_budget():
    """
    Real Name: b'carbon budget'
    Original Eqn: b'1000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000


@cache('run')
def cumulative_emissions_to_1995():
    """
    Real Name: b'cumulative emissions to 1995'
    Original Eqn: b'378.66'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 378.66


@cache('run')
def fe_solar_potential_for_heat():
    """
    Real Name: b'fe solar potential for heat'
    Original Eqn: b'22'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 22


@cache('run')
def start_year_bioe_residues_for_heat_plus_elec():
    """
    Real Name: b'start year bioe residues for heat plus elec'
    Original Eqn: b'2020'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2020


@cache('step')
def co2_fossil_fuel_emissions():
    """
    Real Name: b'co2 fossil fuel emissions'
    Original Eqn: b'co2 emissions conv gas without gtl+co2 emissions unconv gas+co2 emissions gtl+co2 emissions conv oil+co2 emissions unconv oil+co2 emissions coal without ctl+co2 emissions ctl'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return co2_emissions_conv_gas_without_gtl() + co2_emissions_unconv_gas() + co2_emissions_gtl(
    ) + co2_emissions_conv_oil() + co2_emissions_unconv_oil() + co2_emissions_coal_without_ctl(
    ) + co2_emissions_ctl()


@cache('run')
def t_per_gt():
    """
    Real Name: b't per gt'
    Original Eqn: b'1000000000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000000000


@cache('step')
def share_land_compet_biofuels():
    """
    Real Name: b'share land compet biofuels'
    Original Eqn: b'land compet required dedicated crops for biofuels/global arable land'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return land_compet_required_dedicated_crops_for_biofuels() / global_arable_land()


@cache('step')
def share_land_total_res_vs_arable():
    """
    Real Name: b'share land total res vs arable'
    Original Eqn: b'total land requirements renew mha/global arable land'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_land_requirements_renew_mha() / global_arable_land()


@cache('step')
def share_land_res_land_compet_vs_arable():
    """
    Real Name: b'share land res land compet vs arable'
    Original Eqn: b'(land compet required dedicated crops for biofuels+surface solar pv mha)/global arable land'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (land_compet_required_dedicated_crops_for_biofuels() +
            surface_solar_pv_mha()) / global_arable_land()


@cache('step')
def year_scarcity_oil():
    """
    Real Name: b'year scarcity oil'
    Original Eqn: b'if then else(abundance total oil>0.95, 0, Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(abundance_total_oil() > 0.95, 0, time())


@cache('step')
def cumulated_conv_gas_extraction():
    """
    Real Name: b'cumulated conv gas extraction'
    Original Eqn: b'integ ( extraction conv gas ej, cumulated conv gas extraction to 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cumulated_conv_gas_extraction()


@cache('run')
def cumulated_conv_gas_extraction_to_1995():
    """
    Real Name: b'cumulated conv gas extraction to 1995'
    Original Eqn: b'2001.4020668330372'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2001.4020668330372


@cache('step')
def cumulated_unconv_gas_extraction():
    """
    Real Name: b'cumulated unconv gas extraction'
    Original Eqn: b'integ ( extraction unconv gas ej, cumulated unconv gas extraction to 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cumulated_unconv_gas_extraction()


@cache('run')
def cumulated_unconv_gas_extraction_to_1995():
    """
    Real Name: b'cumulated unconv gas extraction to 1995'
    Original Eqn: b'6.6975559326811815'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 6.6975559326811815


@cache('step')
def rurr_uranium():
    """
    Real Name: b'rurr uranium'
    Original Eqn: b'integ ( -extraction uranium ej, urr uranium-cumulated uranium extraction to 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_rurr_uranium()


@cache('run')
def cumulated_uranium_extraction_to_1995():
    """
    Real Name: b'cumulated uranium extraction to 1995'
    Original Eqn: b'814'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 814


@cache('step')
def cumulated_conv_oil_extraction():
    """
    Real Name: b'cumulated conv oil extraction'
    Original Eqn: b'integ ( extraction conv oil ej, cumulated conv oil extraction to 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cumulated_conv_oil_extraction()


@cache('run')
def cumulated_conv_oil_extraction_to_1995():
    """
    Real Name: b'cumulated conv oil extraction to 1995'
    Original Eqn: b'4636'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 4636


@cache('step')
def cumulated_unconv_oil_extraction():
    """
    Real Name: b'cumulated unconv oil extraction'
    Original Eqn: b'integ ( extraction unconv oil ej, cumulated unconv oil extraction to 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cumulated_unconv_oil_extraction()


@cache('step')
def cumulated_coal_extraction():
    """
    Real Name: b'cumulated coal extraction'
    Original Eqn: b'integ ( extraction coal ej, cumulated coal extraction to 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cumulated_coal_extraction()


@cache('run')
def cumulated_coal_extraction_to_1995():
    """
    Real Name: b'cumulated coal extraction to 1995'
    Original Eqn: b'5018'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5018


@cache('run')
def cumulated_unconv_oil_extraction_to_1995():
    """
    Real Name: b'cumulated unconv oil extraction to 1995'
    Original Eqn: b'13.5'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 13.5


@cache('step')
def cumulated_uranium_extraction():
    """
    Real Name: b'cumulated uranium extraction'
    Original Eqn: b'integ ( extraction uranium ej, cumulated uranium extraction to 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cumulated_uranium_extraction()


@cache('step')
def oil_refinery_gains_ej():
    """
    Real Name: b'oil refinery gains ej'
    Original Eqn: b'oil refinery gains share*pes oil ej delayed'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return oil_refinery_gains_share() * pes_oil_ej_delayed()


@cache('run')
def oil_refinery_gains_share():
    """
    Real Name: b'oil refinery gains share'
    Original Eqn: b'0.027'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.027


@cache('run')
def efficiency_gas_for_oil_refinery_gains():
    """
    Real Name: b'efficiency gas for oil refinery gains'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def pes_liquids_ej():
    """
    Real Name: b'pes liquids ej'
    Original Eqn: b'pes oil ej+other liquids supply ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pes_oil_ej() + other_liquids_supply_ej()


@cache('run')
def one_year():
    """
    Real Name: b'one year'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def land_compet_required_dedicated_crops_for_biofuels():
    """
    Real Name: b'land compet required dedicated crops for biofuels'
    Original Eqn: b'land compet biofuels 2gen mha+land compet biofuels 3gen mha'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return land_compet_biofuels_2gen_mha() + land_compet_biofuels_3gen_mha()


@cache('step')
def new_biofuels_2gen_land_compet():
    """
    Real Name: b'new biofuels 2gen land compet'
    Original Eqn: b'if then else(check liquids<-0.0001, constrain liquids exogenous growth quest*land compet biofuels 2gen mha, max(annual additional historic land use biofuels 2gen+adapt growth biofuels 2gen *land compet biofuels 2gen mha*biofuels land compet available, 0))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        check_liquids() < - equality_threshold(),
        constrain_liquids_exogenous_growth_quest() * land_compet_biofuels_2gen_mha(),
        np.maximum(
            annual_additional_historic_land_use_biofuels_2gen() + adapt_growth_biofuels_2gen() *
            land_compet_biofuels_2gen_mha() * biofuels_land_compet_available(), 0))


@cache('run')
def annual_shift_from_2gen_to_3gen():
    """
    Real Name: b'annual shift from 2gen to 3gen'
    Original Eqn: b'0.1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.1


@cache('step')
def land_compet_biofuels_3gen_mha():
    """
    Real Name: b'land compet biofuels 3gen mha'
    Original Eqn: b'integ ( land shifted to biofuels 3gen, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_land_compet_biofuels_3gen_mha()


@cache('run')
def p_bioe_residues_for_heat_plus_elec():
    """
    Real Name: b'p bioe residues for heat plus elec'
    Original Eqn: b'0.05'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.05


@cache('step')
def potential_pe_cellulosic_biofuel_ej():
    """
    Real Name: b'potential pe cellulosic biofuel ej'
    Original Eqn: b'integ ( new cellulosic biofuels, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_potential_pe_cellulosic_biofuel_ej()


@cache('step')
def cellulosic_biofuels_available():
    """
    Real Name: b'cellulosic biofuels available'
    Original Eqn: b'zidz((max npp potential bioe residues for cellulosic biofuels-potential pe cellulosic biofuel ej), max npp potential bioe residues for cellulosic biofuels)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz((max_npp_potential_bioe_residues_for_cellulosic_biofuels() -
                           potential_pe_cellulosic_biofuel_ej()),
                          max_npp_potential_bioe_residues_for_cellulosic_biofuels())


@cache('step')
def bioe_residues_for_heat_plus_elec_available():
    """
    Real Name: b'bioe residues for heat plus elec available'
    Original Eqn: b'(max npp potential bioe residues for heat and elec-pe bioe residues for heat plus elec ej)/max npp potential bioe residues for heat and elec'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (max_npp_potential_bioe_residues_for_heat_and_elec() -
            pe_bioe_residues_for_heat_plus_elec_ej()
            ) / max_npp_potential_bioe_residues_for_heat_and_elec()


@cache('step')
def pe_bioe_residues_for_heat_plus_elec_ej():
    """
    Real Name: b'pe bioe residues for heat plus elec ej'
    Original Eqn: b'integ ( new bioe residues for heat plus elec, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_pe_bioe_residues_for_heat_plus_elec_ej()


@cache('run')
def p_cellulosic_biofuels():
    """
    Real Name: b'p cellulosic biofuels'
    Original Eqn: b'0.08'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.08


@cache('run')
def share_cellulosic_biofuels_vs_bioe_residues():
    """
    Real Name: b'share cellulosic biofuels vs bioe residues'
    Original Eqn: b'0.25'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.25


@cache('run')
def start_year_cellulosic_biofuels():
    """
    Real Name: b'start year cellulosic biofuels'
    Original Eqn: b'2025'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2025


@cache('step')
def share_land_total_res_vs_urban_surface():
    """
    Real Name: b'share land total res vs urban surface'
    Original Eqn: b'total land requirements renew mha/urban surface 2008'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_land_requirements_renew_mha() / urban_surface_2008()


@cache('run')
def max_land_compet_biofuels_2gen():
    """
    Real Name: b'max land compet biofuels 2gen'
    Original Eqn: b'additional land compet available for biofuels+historic land compet available for biofuels 2gen'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return additional_land_compet_available_for_biofuels() + historic_land_compet_available_for_biofuels_2gen()


@cache('run')
def p_biofuels_2gen():
    """
    Real Name: b'p biofuels 2gen'
    Original Eqn: b'0.05'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.05


@cache('run')
def past_biofuels_2gen():
    """
    Real Name: b'past biofuels 2gen'
    Original Eqn: b'0.11139790590538201'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.11139790590538201


@cache('run')
def ej_per_ktoe():
    """
    Real Name: b'ej per ktoe'
    Original Eqn: b'4.1868e-05'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 4.1868e-05


@cache('step')
def abundance_total_oil():
    """
    Real Name: b'abundance total oil'
    Original Eqn: b'if then else(ped total oil ej<pes oil ej, 1, 1-zidz((ped total oil ej-pes oil ej) , ped total oil ej ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        ped_total_oil_ej() < pes_oil_ej(), 1, 1 - zidz(
            (ped_total_oil_ej() - pes_oil_ej()), ped_total_oil_ej()))


@cache('run')
def cp_nuclear_initial():
    """
    Real Name: b'cp nuclear initial'
    Original Eqn: b'0.7652'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.7652


@cache('step')
def extraction_coal_without_ctl_ej():
    """
    Real Name: b'extraction coal without ctl ej'
    Original Eqn: b'max(extraction coal ej-extraction coal for ctl ej, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(extraction_coal_ej() - extraction_coal_for_ctl_ej(), 0)


@cache('step')
def extraction_coal_for_ctl_ej():
    """
    Real Name: b'extraction coal for ctl ej'
    Original Eqn: b'ped coal for ctl ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ped_coal_for_ctl_ej()


@cache('step')
def other_liquids_supply_ej():
    """
    Real Name: b'other liquids supply ej'
    Original Eqn: b'oil refinery gains ej+fes ctl plus gtl ej+fes total biofuels production ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return oil_refinery_gains_ej() + fes_ctl_plus_gtl_ej() + fes_total_biofuels_production_ej()


@cache('run')
def max_offshore_wind_twe():
    """
    Real Name: b'max offshore wind twe'
    Original Eqn: b'0.25'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.25


@cache('run')
def urr_unconv_oil_high_mohr15():
    """
    Real Name: b'urr unconv oil high mohr15'
    Original Eqn: b'22000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 22000


@cache('run')
def urr_unconv_oil_low_mohr15():
    """
    Real Name: b'urr unconv oil low mohr15'
    Original Eqn: b'6000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 6000


@cache('run')
def urr_unconv_oil_user_defined():
    """
    Real Name: b'urr unconv oil user defined'
    Original Eqn: b'14500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 14500


@cache('run')
def urr_uranium_zittel12():
    """
    Real Name: b'urr uranium zittel12'
    Original Eqn: b'3700'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 3700


@cache('run')
def urr_conv_oil_maggio12_high():
    """
    Real Name: b'urr conv oil maggio12 high'
    Original Eqn: b'16700'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 16700


@cache('run')
def urr_conv_oil_maggio12_low():
    """
    Real Name: b'urr conv oil maggio12 low'
    Original Eqn: b'12500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 12500


@cache('run')
def separate_conv_and_unconv_gas_quest():
    """
    Real Name: b'separate conv and unconv gas quest'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def urr_tot_agg_oil_laherrere_2006():
    """
    Real Name: b'urr tot agg oil laherrere 2006'
    Original Eqn: b'16800'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 16800


@cache('run')
def urr_tot_agg_oil_user_defined():
    """
    Real Name: b'urr tot agg oil user defined'
    Original Eqn: b'14500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 14500


@cache('run')
def choose_extraction_curve_tot_agg_oil():
    """
    Real Name: b'choose extraction curve tot agg oil'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def urr_conv_oil_maggio12_middle():
    """
    Real Name: b'urr conv oil maggio12 middle'
    Original Eqn: b'14500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 14500


@cache('run')
def urr_conv_oil_user_defined():
    """
    Real Name: b'urr conv oil user defined'
    Original Eqn: b'14500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 14500


@cache('run')
def choose_extraction_tot_agg_gas_curve():
    """
    Real Name: b'choose extraction tot agg gas curve'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def urr_unconv_oil_bg_mohr15():
    """
    Real Name: b'urr unconv oil bg mohr15'
    Original Eqn: b'10500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 10500


@cache('run')
def separate_conv_and_unconv_oil_quest():
    """
    Real Name: b'separate conv and unconv oil quest'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def urr_uranium_ewg13():
    """
    Real Name: b'urr uranium ewg13'
    Original Eqn: b'4000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 4000


@cache('run')
def kt_uranium_per_ej():
    """
    Real Name: b'kt uranium per ej'
    Original Eqn: b'2.386634845'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2.386634845


@cache('run')
def life_time_nuclear():
    """
    Real Name: b'life time nuclear'
    Original Eqn: b'40'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 40


@cache('step')
def surface_solar_pv_mha():
    """
    Real Name: b'surface solar pv mha'
    Original Eqn: b'surface res elec[solar pv]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return surface_res_elec().loc['solar pv'].values


@cache('step')
def cumulated_uranium_extraction_kt():
    """
    Real Name: b'cumulated uranium extraction kt'
    Original Eqn: b'cumulated uranium extraction*kt uranium per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return cumulated_uranium_extraction() * kt_uranium_per_ej()


@cache('step')
def extraction_uranium_kt():
    """
    Real Name: b'extraction uranium kt'
    Original Eqn: b'extraction uranium ej*kt uranium per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_uranium_ej() * kt_uranium_per_ej()


@cache('run')
def efficiency_uranium_for_electricity():
    """
    Real Name: b'efficiency uranium for electricity'
    Original Eqn: b'0.3333333333'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.3333333333


@cache('step')
def fe_nuclear_elec_generation_twh():
    """
    Real Name: b'fe nuclear elec generation twh'
    Original Eqn: b'extraction uranium ej*efficiency uranium for electricity/ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_uranium_ej() * efficiency_uranium_for_electricity() / ej_per_twh()


@cache('run')
def kwh_per_twh():
    """
    Real Name: b'kwh per twh'
    Original Eqn: b'1000000000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1000000000


@cache('step')
def total_fe_elec_demand_ej():
    """
    Real Name: b'total fe elec demand ej'
    Original Eqn: b'total fe elec demand twh*ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_fe_elec_demand_twh() * ej_per_twh()


@cache('run')
def gco2e_per_kwh_biomass():
    """
    Real Name: b'gco2e per kwh biomass'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def mtoe_per_ej():
    """
    Real Name: b'mtoe per ej'
    Original Eqn: b'23.88459'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 23.88459


@cache('run')
def share_transm_and_distr_elec_losses_initial():
    """
    Real Name: b'share transm and distr elec losses initial'
    Original Eqn: b'0.095'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.095


@cache('run')
def ej_per_twh():
    """
    Real Name: b'ej per twh'
    Original Eqn: b'0.0036'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.0036


@cache('step')
def surface_onshore_wind_mha():
    """
    Real Name: b'surface onshore wind mha'
    Original Eqn: b'surface res elec[wind onshore]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return surface_res_elec().loc['wind onshore'].values


@cache('run')
def twe_per_twh():
    """
    Real Name: b'twe per twh'
    Original Eqn: b'0.0001141552511'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.0001141552511


@cache('run')
def initial_population():
    """
    Real Name: b'initial population'
    Original Eqn: b'5709757338.0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 5709757338.0


@cache('step')
def population():
    """
    Real Name: b'population'
    Original Eqn: b'integ ( pop variation, initial population)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_population()


@cache('run')
def ve_objetive_ue2020_extrap():
    """
    Real Name: b've objetive ue2020 extrap'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def ve_objetive_ue2020():
    """
    Real Name: b've objetive ue2020'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def choose_extraction_uranium_curve():
    """
    Real Name: b'choose extraction uranium curve'
    Original Eqn: b'2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2


@cache('step')
def year_scarcity_tpe():
    """
    Real Name: b'year scarcity tpe'
    Original Eqn: b'if then else(abundance tpe>0.95, 0, Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(abundance_tpe() > 0.95, 0, time())


@cache('step')
def year_scarcity_uranium():
    """
    Real Name: b'year scarcity uranium'
    Original Eqn: b'if then else(abundance uranium>0.95, 0, Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(abundance_uranium() > 0.95, 0, time())


@cache('step')
def year_scarcity_coal():
    """
    Real Name: b'year scarcity coal'
    Original Eqn: b'if then else(abundance coal>0.95, 0, Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(abundance_coal() > 0.95, 0, time())


@cache('step')
def year_scarcity_liquids():
    """
    Real Name: b'year scarcity liquids'
    Original Eqn: b'if then else(abundance liquids>0.95, 0, Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(abundance_liquids() > 0.95, 0, time())


@cache('step')
def effects_shortage_gas():
    """
    Real Name: b'effects shortage gas'
    Original Eqn: b'if then else(abundance gases>0.8, ((abundance gases-0.8)*5)^2, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(abundance_gases() > 0.8, ((abundance_gases() - 0.8) * 5)**2, 0)


@cache('step')
def year_scarcity_gases():
    """
    Real Name: b'year scarcity gases'
    Original Eqn: b'if then else(abundance gases>0.95, 0, Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(abundance_gases() > 0.95, 0, time())


@cache('run')
def max_percent_of_change():
    """
    Real Name: b'max percent of change'
    Original Eqn: b'0.448'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.448


@cache('run')
def choose_extraction_coal_curve():
    """
    Real Name: b'choose extraction coal curve'
    Original Eqn: b'3'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 3


@cache('run')
def selection_constraint_extraction_unconv_gas():
    """
    Real Name: b'selection constraint extraction unconv gas'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def year_scarcity_elec():
    """
    Real Name: b'year scarcity elec'
    Original Eqn: b'if then else(abundance electricity>0.95, 0, Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(abundance_electricity() > 0.95, 0, time())


@cache('step')
def extraction_unconv_gas_delayed():
    """
    Real Name: b'extraction unconv gas delayed'
    Original Eqn: b'delay fixed ( extraction unconv gas ej, time step, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_extraction_unconv_gas_ej_roundtime_step__time_step___time_step_0_time_step__time_step()


@cache('step')
def max_unconv_gas_growth_extraction_ej():
    """
    Real Name: b'max unconv gas growth extraction ej'
    Original Eqn: b'if then else(check gas delayed 1yr<-0.01, (1+constrain gas exogenous growth quest delayed x1yr)*extraction unconv gas delayed, extraction unconv gas delayed*max unconv gas growth extraction )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        check_gas_delayed_1yr() < - equality_threshold(),
        (1 + constrain_gas_exogenous_growth_quest_delayed_x1yr()) *
        extraction_unconv_gas_delayed(),
        extraction_unconv_gas_delayed() * max_unconv_gas_growth_extraction())


@cache('run')
def p_constraint_growth_extraction_unconv_gas():
    """
    Real Name: b'p constraint growth extraction unconv gas'
    Original Eqn: b'0.08'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.08


@cache('run')
def choose_extraction_curve_unconv_gas():
    """
    Real Name: b'choose extraction curve unconv gas'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def choose_extraction_curve_unconv_oil():
    """
    Real Name: b'choose extraction curve unconv oil'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def biofuels_land_compet_available():
    """
    Real Name: b'biofuels land compet available'
    Original Eqn: b'(max land compet biofuels 2gen-land compet biofuels 2gen mha-land compet biofuels 3gen mha)/max land compet biofuels 2gen'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (max_land_compet_biofuels_2gen() - land_compet_biofuels_2gen_mha() -
            land_compet_biofuels_3gen_mha()) / max_land_compet_biofuels_2gen()


@cache('run')
def urr_oil_aspo():
    """
    Real Name: b'urr oil aspo'
    Original Eqn: b'12800'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 12800


@cache('run')
def urr_gas_mohr_high2013():
    """
    Real Name: b'urr gas mohr high2013'
    Original Eqn: b'28500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 28500


@cache('run')
def urr_gas_leherrere2010():
    """
    Real Name: b'urr gas leherrere2010'
    Original Eqn: b'13600'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 13600


@cache('run')
def urr_gas_mohr_bg2012():
    """
    Real Name: b'urr gas mohr bg2012'
    Original Eqn: b'19900'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 19900


@cache('run')
def res_to_fossil_accounting():
    """
    Real Name: b'res to fossil accounting'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def new_c_gtc():
    """
    Real Name: b'new c gtc'
    Original Eqn: b'carbon emissions gtc'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return carbon_emissions_gtc()


@cache('run')
def year_adjust():
    """
    Real Name: b'year adjust'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def urban_surface_2008():
    """
    Real Name: b'urban surface 2008'
    Original Eqn: b'300'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 300


@cache('run')
def c_per_co2():
    """
    Real Name: b'c per co2'
    Original Eqn: b'0.272727272'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.272727272


@cache('run')
def activate_affores_program():
    """
    Real Name: b'activate affores program'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def global_arable_land():
    """
    Real Name: b'global arable land'
    Original Eqn: b'1526'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1526


@cache('run')
def choose_extraction_curve_conv_oil():
    """
    Real Name: b'choose extraction curve conv oil'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def choose_extraction_conv_gas_curve():
    """
    Real Name: b'choose extraction conv gas curve'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def cumulated_total_monet_invest_res_for_elec():
    """
    Real Name: b'cumulated total monet invest res for elec'
    Original Eqn: b'integ ( total monet invest res for elec tdolar, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_cumulated_total_monet_invest_res_for_elec()


@cache('run')
def efficiency_coal_for_electricity():
    """
    Real Name: b'efficiency coal for electricity'
    Original Eqn: b'0.353'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.353


@cache('run')
def efficiency_liquids_for_electricity():
    """
    Real Name: b'efficiency liquids for electricity'
    Original Eqn: b'0.361'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.361


@cache('run')
def additional_land_compet_available_for_biofuels():
    """
    Real Name: b'additional land compet available for biofuels'
    Original Eqn: b'100'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 100


@cache('run')
def max_hydro_twe():
    """
    Real Name: b'max hydro twe'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def max_oceanic_twe():
    """
    Real Name: b'max oceanic twe'
    Original Eqn: b'0.05'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.05


@cache('run')
def max_onshore_wind_twe():
    """
    Real Name: b'max onshore wind twe'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def p_ctl():
    """
    Real Name: b'p ctl'
    Original Eqn: b'0.15'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.15


@cache('run')
def p_gtl():
    """
    Real Name: b'p gtl'
    Original Eqn: b'0.2'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.2


@cache('run')
def start_year_3gen():
    """
    Real Name: b'start year 3gen'
    Original Eqn: b'2025'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2025


@cache('step')
def share_variable_res_elec_generation_vs_total():
    """
    Real Name: b'share variable res elec generation vs total'
    Original Eqn: b'if then else((fe elec generation from nre twh+elec generation variable from res twh+elec generation dispatch from res twh)>0, elec generation variable from res twh/(fe elec generation from nre twh+elec generation variable from res twh+elec generation dispatch from res twh), 0.5)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        (fe_elec_generation_from_nre_twh() + elec_generation_variable_from_res_twh() +
         elec_generation_dispatch_from_res_twh()) > 0,
        elec_generation_variable_from_res_twh() /
        (fe_elec_generation_from_nre_twh() + elec_generation_variable_from_res_twh() +
         elec_generation_dispatch_from_res_twh()), 0.5)


@cache('step')
def total_cumulative_emissions_gtc():
    """
    Real Name: b'total cumulative emissions gtc'
    Original Eqn: b'integ ( new c gtc, cumulative emissions to 1995)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_total_cumulative_emissions_gtc()


@cache('run')
def p_nuclear_scen_1():
    """
    Real Name: b'p nuclear scen 1'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0


@cache('run')
def p_nuclear_2_x3():
    """
    Real Name: b'p nuclear 2 x3'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('run')
def gco2e_per_gtco2e_4():
    """
    Real Name: b'gco2e per gtco2e 4'
    Original Eqn: b'1/1000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1 / 1000


@cache('run')
def gco2e_per_gtco2e_3():
    """
    Real Name: b'gco2e per gtco2e 3'
    Original Eqn: b'1/1000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1 / 1000


@cache('run')
def gco2e_per_gtco2e_0():
    """
    Real Name: b'gco2e per gtco2e 0'
    Original Eqn: b'1/1000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1 / 1000


@cache('run')
def gco2e_per_gtco2e_1():
    """
    Real Name: b'gco2e per gtco2e 1'
    Original Eqn: b'1/1000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1 / 1000


@cache('run')
def twh_per_gco2e_0():
    """
    Real Name: b'twh per gco2e 0'
    Original Eqn: b'0.02'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.02


@cache('step')
def fed_heat_coal_plants_ej():
    """
    Real Name: b'fed heat coal plants ej'
    Original Eqn: b'fed heat gas plus coal ej*share coalxcoal plus gasx for heat plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_gas_plus_coal_ej() * share_coalxcoal_plus_gasx_for_heat_plants()


@cache('step')
def fed_heat_com_ej():
    """
    Real Name: b'fed heat com ej'
    Original Eqn: b'required heat com'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_heat_com()


@cache('step')
def total_fe_elec_demand_twh():
    """
    Real Name: b'total fe elec demand twh'
    Original Eqn: b'(fe demand elec consum twh)*(1+share transm and distr elec losses )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (fe_demand_elec_consum_twh()) * (1 + share_transm_and_distr_elec_losses())


@cache('step')
def real_demand_by_sector():
    """
    Real Name: b'real demand by sector'
    Original Eqn: b'max(0,ia matrix[sectors,agriculture hunting forestry and fishing]*real total output by sector[agriculture hunting forestry and fishing] + ia matrix[sectors,mining and quarrying]*real total output by sector[mining and quarrying]+ ia matrix[ sectors , food beverages and tobacco]*real total output by sector[food beverages and tobacco]+ia matrix[sectors,textiles and textile products]*real total output by sector[textiles and textile products]+ ia matrix[sectors,leather leather and footwear]*real total output by sector[leather leather and footwear] + ia matrix[sectors,wood and products of wood and cork]*real total output by sector[wood and products of wood and cork] + ia matrix[sectors,pulp paper printing and publishing]*real total output by sector[pulp paper printing and publishing]+ ia matrix[sectors,coke refined petroleum and nuclear fuel]*real total output by sector[coke refined petroleum and nuclear fuel]+ ia matrix[sectors,chemicals and chemical products]*real total output by sector[ chemicals and chemical products ]+ ia matrix[sectors,rubber and plastics]*real total output by sector[rubber and plastics]+ ia matrix[sectors,other non metalic mineral]*real total output by sector[other non metalic mineral]+ ia matrix [sectors,basic metals and fabricated metal]*real total output by sector[basic metals and fabricated metal]+ ia matrix [sectors,machinery nec]*real total output by sector[machinery nec]+ ia matrix[sectors,electrical and optical equipment]*real total output by sector[electrical and optical equipment]+ ia matrix[sectors,transport equipment]*real total output by sector [transport equipment]+ ia matrix[sectors,manufacturing nec recycling]*real total output by sector[manufacturing nec recycling] + ia matrix[sectors,electricity gas and water supply] *real total output by sector[electricity gas and water supply] + ia matrix[sectors,construction]*real total output by sector[construction]+ ia matrix[sectors,sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel]*real total output by sector[sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel]+ ia matrix [sectors,wholesale trade and commissions trade except of motor vehicles and motorcycles]*real total output by sector[ wholesale trade and commissions trade except of motor vehicles and motorcycles ] + ia matrix[sectors,retail trade except of motor vehicles and motorcycles repair of household goods]*real total output by sector [retail trade except of motor vehicles and motorcycles repair of household goods]+ ia matrix[sectors,hotels and restaurants]*real total output by sector[hotels and restaurants]+ ia matrix[sectors,inland transport]*real total output by sector [inland transport]+ ia matrix[sectors,water transport]*real total output by sector[water transport]+ ia matrix [sectors,air transport]*real total output by sector[air transport]+ ia matrix[sectors,other supporting and auxiliary transport activities activities of travel agencies]*real total output by sector[other supporting and auxiliary transport activities activities of travel agencies]+ ia matrix [sectors,post and telecommunications]*real total output by sector[post and telecommunications]+ ia matrix[sectors,financial intermediation]*real total output by sector[financial intermediation]+ ia matrix[sectors,real estate activities]*real total output by sector[real estate activities]+ia matrix[sectors,renting od meq and other business activities]*real total output by sector[renting od meq and other business activities]+ ia matrix[sectors,public admin and defence compulsory social security]*real total output by sector[public admin and defence compulsory social security]+ ia matrix[sectors,education] *real total output by sector[education]+ ia matrix[sectors,health and social work]*real total output by sector [health and social work] + ia matrix[sectors,other community social and persona services]*real total output by sector [other community social and persona services] + ia matrix[sectors,private households with employed persons] * real total output by sector[private households with employed persons])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        ia_matrix().loc[:,'agriculture hunting forestry and fishing'].drop('sectors1') * real_total_output_by_sector().loc['agriculture hunting forestry and fishing'].values + ia_matrix().loc[:,'mining and quarrying'].drop('sectors1') * real_total_output_by_sector().loc['mining and quarrying'].values +
        ia_matrix().loc[:,'food beverages and tobacco'].drop('sectors1') * real_total_output_by_sector().loc['food beverages and tobacco'].values + ia_matrix().loc[:,'textiles and textile products'].drop('sectors1') * real_total_output_by_sector().loc['textiles and textile products'].values +
        ia_matrix().loc[:,'leather leather and footwear'].drop('sectors1') * real_total_output_by_sector().loc['leather leather and footwear'].values + ia_matrix().loc[:,'wood and products of wood and cork'].drop('sectors1') * real_total_output_by_sector().loc['wood and products of wood and cork'].values +
        ia_matrix().loc[:,'pulp paper printing and publishing'].drop('sectors1') * real_total_output_by_sector().loc['pulp paper printing and publishing'].values + ia_matrix().loc[:,'coke refined petroleum and nuclear fuel'].drop('sectors1') * real_total_output_by_sector().loc['coke refined petroleum and nuclear fuel'].values +
        ia_matrix().loc[:,'chemicals and chemical products'].drop('sectors1') * real_total_output_by_sector().loc['chemicals and chemical products'].values + ia_matrix().loc[:,'rubber and plastics'].drop('sectors1') * real_total_output_by_sector().loc['rubber and plastics'].values +
        ia_matrix().loc[:,'other non metalic mineral'].drop('sectors1') * real_total_output_by_sector().loc['other non metalic mineral'].values + ia_matrix().loc[:,'basic metals and fabricated metal'].drop('sectors1') * real_total_output_by_sector().loc['basic metals and fabricated metal'].values +
        ia_matrix().loc[:,'machinery nec'].drop('sectors1') * real_total_output_by_sector().loc['machinery nec'].values + ia_matrix().loc[:,'electrical and optical equipment'].drop('sectors1') * real_total_output_by_sector().loc['electrical and optical equipment'].values +
        ia_matrix().loc[:,'transport equipment'].drop('sectors1') * real_total_output_by_sector().loc['transport equipment'].values + ia_matrix().loc[:,'manufacturing nec recycling'].drop('sectors1') * real_total_output_by_sector().loc['manufacturing nec recycling'].values +
        ia_matrix().loc[:,'electricity gas and water supply'].drop('sectors1') * real_total_output_by_sector().loc['electricity gas and water supply'].values + ia_matrix().loc[:,'construction'].drop('sectors1') * real_total_output_by_sector().loc['construction'].values +
        ia_matrix().loc[:,'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'].drop('sectors1') * real_total_output_by_sector().loc['sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'].values + ia_matrix().loc[:,'wholesale trade and commissions trade except of motor vehicles and motorcycles'].drop('sectors1') * real_total_output_by_sector().loc['wholesale trade and commissions trade except of motor vehicles and motorcycles'].values +
        ia_matrix().loc[:,'retail trade except of motor vehicles and motorcycles repair of household goods'].drop('sectors1') * real_total_output_by_sector().loc['retail trade except of motor vehicles and motorcycles repair of household goods'].values + ia_matrix().loc[:,'hotels and restaurants'].drop('sectors1') * real_total_output_by_sector().loc['hotels and restaurants'].values +
        ia_matrix().loc[:,'inland transport'].drop('sectors1') * real_total_output_by_sector().loc['inland transport'].values + ia_matrix().loc[:,'water transport'].drop('sectors1') * real_total_output_by_sector().loc['water transport'].values +
        ia_matrix().loc[:,'air transport'].drop('sectors1') * real_total_output_by_sector().loc['air transport'].values + ia_matrix().loc[:,'other supporting and auxiliary transport activities activities of travel agencies'].drop('sectors1') * real_total_output_by_sector().loc['other supporting and auxiliary transport activities activities of travel agencies'].values +
        ia_matrix().loc[:,'post and telecommunications'].drop('sectors1') * real_total_output_by_sector().loc['post and telecommunications'].values + ia_matrix().loc[:,'financial intermediation'].drop('sectors1') * real_total_output_by_sector().loc['financial intermediation'].values +
        ia_matrix().loc[:,'real estate activities'].drop('sectors1') * real_total_output_by_sector().loc['real estate activities'].values + ia_matrix().loc[:,'renting od meq and other business activities'].drop('sectors1') * real_total_output_by_sector().loc['renting od meq and other business activities'].values +
        ia_matrix().loc[:,'public admin and defence compulsory social security'].drop('sectors1') * real_total_output_by_sector().loc['public admin and defence compulsory social security'].values + ia_matrix().loc[:,'education'].drop('sectors1') * real_total_output_by_sector().loc['education'].values +
        ia_matrix().loc[:,'health and social work'].drop('sectors1') * real_total_output_by_sector().loc['health and social work'].values + ia_matrix().loc[:,'other community social and persona services'].drop('sectors1') * real_total_output_by_sector().loc['other community social and persona services'].values +
        ia_matrix().loc[:,'private households with employed persons'].drop('sectors1') * real_total_output_by_sector().loc['private households with employed persons'].values)


@cache('step')
def required_total_output_by_sector():
    """
    Real Name: b'required total output by sector'
    Original Eqn: b'leontief matrix[sectors,agriculture hunting forestry and fishing]*demand by sector[ agriculture hunting forestry and fishing ]+ leontief matrix[sectors,mining and quarrying]*demand by sector[mining and quarrying]+ leontief matrix[ sectors , food beverages and tobacco]*demand by sector[food beverages and tobacco] +leontief matrix[sectors,textiles and textile products]*demand by sector[textiles and textile products]+ leontief matrix[sectors,leather leather and footwear]*demand by sector [leather leather and footwear]+ leontief matrix[sectors,wood and products of wood and cork]*demand by sector [wood and products of wood and cork]+ leontief matrix[sectors,pulp paper printing and publishing]*demand by sector [pulp paper printing and publishing]+ leontief matrix[sectors,coke refined petroleum and nuclear fuel]*demand by sector [coke refined petroleum and nuclear fuel]+ leontief matrix[sectors,chemicals and chemical products]*demand by sector [chemicals and chemical products]+ leontief matrix[sectors,rubber and plastics]*demand by sector[rubber and plastics] + leontief matrix[sectors,other non metalic mineral]*demand by sector[other non metalic mineral]+ leontief matrix [sectors,basic metals and fabricated metal]*demand by sector[basic metals and fabricated metal]+ leontief matrix [sectors,machinery nec]*demand by sector[machinery nec]+ leontief matrix[sectors,electrical and optical equipment]*demand by sector[electrical and optical equipment]+ leontief matrix[sectors,transport equipment]*demand by sector [transport equipment]+ leontief matrix[sectors,manufacturing nec recycling]*demand by sector[manufacturing nec recycling] + leontief matrix[sectors,electricity gas and water supply]*demand by sector[electricity gas and water supply] + leontief matrix[sectors,construction]*demand by sector[construction] + leontief matrix[sectors,sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel]*demand by sector[sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel]+ leontief matrix [sectors,wholesale trade and commissions trade except of motor vehicles and motorcycles]*demand by sector[wholesale trade and commissions trade except of motor vehicles and motorcycles]+ leontief matrix[sectors,retail trade except of motor vehicles and motorcycles repair of household goods]*demand by sector [retail trade except of motor vehicles and motorcycles repair of household goods]+ leontief matrix[sectors,hotels and restaurants]*demand by sector[hotels and restaurants]+ leontief matrix[sectors,inland transport]*demand by sector[inland transport]+ leontief matrix[sectors,water transport]*demand by sector[water transport]+ leontief matrix [sectors,air transport]*demand by sector[air transport]+ leontief matrix[sectors,other supporting and auxiliary transport activities activities of travel agencies]*demand by sector[other supporting and auxiliary transport activities activities of travel agencies]+ leontief matrix [sectors,post and telecommunications]*demand by sector[post and telecommunications]+ leontief matrix[sectors,financial intermediation]*demand by sector[financial intermediation]+ leontief matrix[sectors,real estate activities]*demand by sector[real estate activities]+leontief matrix[sectors,renting od meq and other business activities]*demand by sector[renting od meq and other business activities]+ leontief matrix[sectors,public admin and defence compulsory social security]*demand by sector[public admin and defence compulsory social security]+ leontief matrix[sectors,education] *demand by sector[education]+ leontief matrix[sectors,health and social work]*demand by sector[health and social work] + leontief matrix[sectors,other community social and persona services]*demand by sector[other community social and persona services]+ leontief matrix[sectors,private households with employed persons]*demand by sector[private households with employed persons]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return leontief_matrix().loc[:,'agriculture hunting forestry and fishing'].drop('sectors1') * demand_by_sector().loc['agriculture hunting forestry and fishing'].values + leontief_matrix().loc[:,'mining and quarrying'].drop('sectors1') * demand_by_sector().loc['mining and quarrying'].values + leontief_matrix().loc[:,'food beverages and tobacco'].drop('sectors1') * demand_by_sector().loc['food beverages and tobacco'].values + leontief_matrix().loc[:,'textiles and textile products'].drop('sectors1') * demand_by_sector().loc['textiles and textile products'].values + leontief_matrix().loc[:,'leather leather and footwear'].drop('sectors1') * demand_by_sector().loc['leather leather and footwear'].values + leontief_matrix().loc[:,'wood and products of wood and cork'].drop('sectors1') * demand_by_sector().loc['wood and products of wood and cork'].values + leontief_matrix().loc[:,'pulp paper printing and publishing'].drop('sectors1') * demand_by_sector().loc['pulp paper printing and publishing'].values + leontief_matrix().loc[:,'coke refined petroleum and nuclear fuel'].drop('sectors1') * demand_by_sector().loc['coke refined petroleum and nuclear fuel'].values + leontief_matrix().loc[:,'chemicals and chemical products'].drop('sectors1') * demand_by_sector().loc['chemicals and chemical products'].values + leontief_matrix().loc[:,'rubber and plastics'].drop('sectors1') * demand_by_sector().loc['rubber and plastics'].values + leontief_matrix().loc[:,'other non metalic mineral'].drop('sectors1') * demand_by_sector().loc['other non metalic mineral'].values + leontief_matrix().loc[:,'basic metals and fabricated metal'].drop('sectors1') * demand_by_sector().loc['basic metals and fabricated metal'].values + leontief_matrix().loc[:,'machinery nec'].drop('sectors1') * demand_by_sector().loc['machinery nec'].values + leontief_matrix().loc[:,'electrical and optical equipment'].drop('sectors1') * demand_by_sector().loc['electrical and optical equipment'].values + leontief_matrix().loc[:,'transport equipment'].drop('sectors1') * demand_by_sector().loc['transport equipment'].values + leontief_matrix().loc[:,'manufacturing nec recycling'].drop('sectors1') * demand_by_sector().loc['manufacturing nec recycling'].values + leontief_matrix().loc[:,'electricity gas and water supply'].drop('sectors1') * demand_by_sector().loc['electricity gas and water supply'].values + leontief_matrix().loc[:,'construction'].drop('sectors1') * demand_by_sector().loc['construction'].values + leontief_matrix().loc[:,'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'].drop('sectors1') * demand_by_sector().loc['sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'].values + leontief_matrix().loc[:,'wholesale trade and commissions trade except of motor vehicles and motorcycles'].drop('sectors1') * demand_by_sector().loc['wholesale trade and commissions trade except of motor vehicles and motorcycles'].values + leontief_matrix().loc[:,'retail trade except of motor vehicles and motorcycles repair of household goods'].drop('sectors1') * demand_by_sector().loc['retail trade except of motor vehicles and motorcycles repair of household goods'].values + leontief_matrix().loc[:,'hotels and restaurants'].drop('sectors1') * demand_by_sector().loc['hotels and restaurants'].values + leontief_matrix().loc[:,'inland transport'].drop('sectors1') * demand_by_sector().loc['inland transport'].values + leontief_matrix().loc[:,'water transport'].drop('sectors1') * demand_by_sector().loc['water transport'].values + leontief_matrix().loc[:,'air transport'].drop('sectors1') * demand_by_sector().loc['air transport'].values + leontief_matrix().loc[:,'other supporting and auxiliary transport activities activities of travel agencies'].drop('sectors1') * demand_by_sector().loc['other supporting and auxiliary transport activities activities of travel agencies'].values + leontief_matrix().loc[:,'post and telecommunications'].drop('sectors1') * demand_by_sector().loc['post and telecommunications'].values + leontief_matrix().loc[:,'financial intermediation'].drop('sectors1') * demand_by_sector().loc['financial intermediation'].values + leontief_matrix().loc[:,'real estate activities'].drop('sectors1') * demand_by_sector().loc['real estate activities'].values + leontief_matrix().loc[:,'renting od meq and other business activities'].drop('sectors1') * demand_by_sector().loc['renting od meq and other business activities'].values + leontief_matrix().loc[:,'public admin and defence compulsory social security'].drop('sectors1') * demand_by_sector().loc['public admin and defence compulsory social security'].values + leontief_matrix().loc[:,'education'].drop('sectors1') * demand_by_sector().loc['education'].values + leontief_matrix().loc[:,'health and social work'].drop('sectors1') * demand_by_sector().loc['health and social work'].values + leontief_matrix().loc[:,'other community social and persona services'].drop('sectors1') * demand_by_sector().loc['other community social and persona services'].values + leontief_matrix().loc[:,'private households with employed persons'].drop('sectors1') * demand_by_sector().loc['private households with employed persons'].values


@cache('step')
def rurr_unconv_oil_ej():
    """
    Real Name: b'rurr unconv oil ej'
    Original Eqn: b'integ ( -extraction unconv oil ej-flow unconv oil left in ground, urr unconv oil-cumulated unconv oil extraction to 1995*separate conv and unconv oil quest)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _integ_rurr_unconv_oil_ej()


@cache('step')
def share_liquids_for_final_energy():
    """
    Real Name: b'share liquids for final energy'
    Original Eqn: b'zidz(required fed by liquids ej , (ped liquids ej-other liquids required ej) )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return zidz(required_fed_by_liquids_ej(),
                          (ped_liquids_ej() - other_liquids_required_ej()))


@cache('step')
def ped_liquids_ej():
    """
    Real Name: b'ped liquids ej'
    Original Eqn: b'max(0,required fed by liquids ej+other liquids required ej+pe demand oil elec plants ej+ped oil for heat plants ej+ped oil for chp plants ej+ped liquids heat nc)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        required_fed_by_liquids_ej() + other_liquids_required_ej() +
        pe_demand_oil_elec_plants_ej() + ped_oil_for_heat_plants_ej() +
        ped_oil_for_chp_plants_ej() + ped_liquids_heat_nc())


@cache('step')
def fed_heat_liquids_plants_ej():
    """
    Real Name: b'fed heat liquids plants ej'
    Original Eqn: b'fed heat com plants fossil fuels ej*share liquids fot heat plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_com_plants_fossil_fuels_ej() * share_liquids_fot_heat_plants()


@cache('step')
def real_final_energy_by_sector_and_fuel():
    """
    Real Name: b'real final energy by sector and fuel'
    Original Eqn: b'required final energy by sector and fuel[final sources,sectors]*energy scarcity feedback shortage coeff[final sources]*cc impacts feedback shortage coeff'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_final_energy_by_sector_and_fuel() * energy_scarcity_feedback_shortage_coeff(
    ) * cc_impacts_feedback_shortage_coeff()


@cache('run')
def hist_var_inlandt():
    """
    Real Name: b'hist var inlandt'
    Original Eqn: b'0'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        coords={
                            'vehiclet': [
                                'hv liq', 'hv hib', 'hv gas', 'lv liq', 'lv elec', 'lv hib',
                                'lv gas', 'bus liq', 'bus elec', 'bus hib', 'bus gas', 'train liq',
                                'train elec'
                            ]
                        },
                        dims=['vehiclet'])


@cache('step')
def inland_transport_variation_intensity():
    """
    Real Name: b'inland transport variation intensity'
    Original Eqn: b'var i inland elec'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        var_i_inland_elec(),0.0,
        var_i_inlandt_liq(),
        var_i_inlandt_gas(),0.0],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def fed_heat_com_nre_ej():
    """
    Real Name: b'fed heat com nre ej'
    Original Eqn: b'max(fed heat com after priorities ej-total fe real supply res for heat com ej,0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        fed_heat_com_after_priorities_ej() - total_fe_real_supply_res_for_heat_com_ej(), 0)


@cache('step')
def real_fe_consumption_by_fuel():
    """
    Real Name: b'real fe consumption by fuel'
    Original Eqn: b'total fe elec consumption ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        total_fe_elec_consumption_ej(),
        total_fe_heat_consumption_ej(),
        real_fe_consumption_liquids_ej(),
        real_fe_consumption_gases_ej(),
        real_fe_consumption_solids_ej()],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def other_liquids_required_ej():
    """
    Real Name: b'other liquids required ej'
    Original Eqn: b'energy distr losses ff ej[liquids]+transformation ff losses ej[liquids]+non energy use demand by final fuel ej[liquids]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return energy_distr_losses_ff_ej().loc['liquids'].values + transformation_ff_losses_ej().loc['liquids'].values + non_energy_use_demand_by_final_fuel_ej().loc['liquids'].values


@cache('step')
def fe_elec_demand_consum_ej():
    """
    Real Name: b'fe elec demand consum ej'
    Original Eqn: b'required fed by fuel[electricity]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_fed_by_fuel().loc['electricity'].values


@cache('step')
def required_fed_by_liquids_ej():
    """
    Real Name: b'required fed by liquids ej'
    Original Eqn: b'required fed by fuel[liquids]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_fed_by_fuel().loc['liquids'].values


@cache('step')
def real_gfcf():
    """
    Real Name: b'real gfcf'
    Original Eqn: b'real demand by sector[sectors]*(1-share consum goverment and inventories[sectors])*pct gfcf vs gfcf plus hd[sectors]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_demand_by_sector() * (
        1 - share_consum_goverment_and_inventories()) * pct_gfcf_vs_gfcf_plus_hd()


@cache('step')
def real_household_demand():
    """
    Real Name: b'real household demand'
    Original Eqn: b'real demand by sector[sectors]*(1-share consum goverment and inventories[sectors])*(1-pct gfcf vs gfcf plus hd[sectors])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return real_demand_by_sector() * (1 - share_consum_goverment_and_inventories()) * (
        1 - pct_gfcf_vs_gfcf_plus_hd())


@cache('step')
def demand_conv_oil_ej():
    """
    Real Name: b'demand conv oil ej'
    Original Eqn: b'max(ped total oil ej-extraction unconv oil ej, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(ped_total_oil_ej() - extraction_unconv_oil_ej(), 0)


@cache('step')
def max_unconv_oil_growth_extraction_ej():
    """
    Real Name: b'max unconv oil growth extraction ej'
    Original Eqn: b'if then else(check liquids delayed 1yr<-0.0001, (1+constrain liquids exogenous growth quest delayed x1yr)*extraction unconv oil delayed,extraction unconv oil delayed *max unconv oil growth extraction)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        check_liquids_delayed_1yr() < - equality_threshold(),
        (1 + constrain_liquids_exogenous_growth_quest_delayed_x1yr()) *
        extraction_unconv_oil_delayed(),
        extraction_unconv_oil_delayed() * max_unconv_oil_growth_extraction())


@cache('step')
def fe_demand_elec_consum_twh():
    """
    Real Name: b'fe demand elec consum twh'
    Original Eqn: b'fe elec demand consum ej/ej per twh'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fe_elec_demand_consum_ej() / ej_per_twh()


@cache('step')
def total_fed_heat_com_ej():
    """
    Real Name: b'total fed heat com ej'
    Original Eqn: b'fed heat com ej*(1+share heat distribution losses)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_com_ej() * (1 + share_heat_distribution_losses())


@cache('step')
def real_total_output_by_fuel_and_sector():
    """
    Real Name: b'real total output by fuel and sector'
    Original Eqn: b'xidz(real final energy by sector and fuel[final sources,sectors], final energy intensity by sector and fuel[final sources,sectors], required total output by sector[sectors]/1e+006)*1e+006'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xidz(real_final_energy_by_sector_and_fuel(),
                          final_energy_intensity_by_sector_and_fuel(),
                          required_total_output_by_sector() / 1e+006) * 1e+006


@cache('step')
def required_final_energy_by_sector_and_fuel():
    """
    Real Name: b'required final energy by sector and fuel'
    Original Eqn: b'required total output by sector[sectors]*final energy intensity by sector and fuel[final sources,sectors]/1e+006'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    ret = required_total_output_by_sector() * final_energy_intensity_by_sector_and_fuel() / 1e+006

    return align_by_dims(ret, ('final sources', 'sectors'))


@cache('run')
def urr_unconv_oil():
    """
    Real Name: b'urr unconv oil'
    Original Eqn: b'if then else(separate conv and unconv oil quest=1, if then else(choose extraction curve unconv oil=1, urr unconv oil bg mohr15 , if then else(choose extraction curve unconv oil=2, urr unconv oil low mohr15 , if then else(choose extraction curve unconv oil=3, urr unconv oil high mohr15 , urr unconv oil user defined))), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        separate_conv_and_unconv_oil_quest() == 1,
        if_then_else(
            choose_extraction_curve_unconv_oil() == 1, urr_unconv_oil_bg_mohr15(),
            if_then_else(
                choose_extraction_curve_unconv_oil() == 2, urr_unconv_oil_low_mohr15(),
                if_then_else(choose_extraction_curve_unconv_oil() == 3,
                                       urr_unconv_oil_high_mohr15(),
                                       urr_unconv_oil_user_defined()))), 0)


@cache('step')
def fed_heat_gas_plants_ej():
    """
    Real Name: b'fed heat gas plants ej'
    Original Eqn: b'fed heat gas plus coal ej*share gas div xcoal plus gasx for heat plants'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_gas_plus_coal_ej() * share_gas_div_xcoal_plus_gasx_for_heat_plants()


@cache('run')
def urr_coal():
    """
    Real Name: b'urr coal'
    Original Eqn: b'if then else(unlimited nre quest=1,urr coal unlimited, if then else(unlimited coal quest=1,urr coal unlimited, if then else(choose extraction coal curve=1, urr coal mohr2012 ej, if then else(choose extraction coal curve=2, urr coal low mohr15, if then else(choose extraction coal curve=3, urr coal bg mohr15, if then else(choose extraction coal curve=4, urr coal high15, urr coal user defined ej ))))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        unlimited_nre_quest() == 1, urr_coal_unlimited(),
        if_then_else(
            unlimited_coal_quest() == 1, urr_coal_unlimited(),
            if_then_else(
                choose_extraction_coal_curve() == 1, urr_coal_mohr2012_ej(),
                if_then_else(
                    choose_extraction_coal_curve() == 2, urr_coal_low_mohr15(),
                    if_then_else(
                        choose_extraction_coal_curve() == 3, urr_coal_bg_mohr15(),
                        if_then_else(choose_extraction_coal_curve() == 4,
                                               urr_coal_high15(), urr_coal_user_defined_ej()))))))


@cache('run')
def urr_conv_gas():
    """
    Real Name: b'urr conv gas'
    Original Eqn: b'if then else(separate conv and unconv gas quest=1, if then else(unlimited nre quest=1,urr conv gas unlimited, if then else(unlimited gas quest=1,urr conv gas unlimited, if then else(choose extraction conv gas curve=1, urr conv gas bg mohr15, if then else(choose extraction conv gas curve=2, urr conv gas low mohr15, if then else(choose extraction conv gas curve=3, urr conv gas high mohr15 , urr conv gas user defined))))) , 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        separate_conv_and_unconv_gas_quest() == 1,
        if_then_else(
            unlimited_nre_quest() == 1, urr_conv_gas_unlimited(),
            if_then_else(
                unlimited_gas_quest() == 1, urr_conv_gas_unlimited(),
                if_then_else(
                    choose_extraction_conv_gas_curve() == 1, urr_conv_gas_bg_mohr15(),
                    if_then_else(
                        choose_extraction_conv_gas_curve() == 2, urr_conv_gas_low_mohr15(),
                        if_then_else(choose_extraction_conv_gas_curve() == 3,
                                               urr_conv_gas_high_mohr15(),
                                               urr_conv_gas_user_defined()))))), 0)


@cache('step')
def real_demand_by_sector_delayed():
    """
    Real Name: b'real demand by sector delayed'
    Original Eqn: b'delay fixed(real demand by sector[sectors], 1, 10)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """

    x = [x() for x in _delay_real_demand_by_sector_round1__time_step___time_step_10_1__time_step]
    return xr.DataArray(data=x,
                        dims=['sectors'],
                        coords={'sectors': _subscript_dict.get('sectors')})


@cache('step')
def required_final_energy_other_transport():
    """
    Real Name: b'required final energy other transport'
    Original Eqn: b'required final energy by sector and fuel[final sources,other supporting and auxiliary transport activities activities of travel agencies]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_final_energy_by_sector_and_fuel().loc[:,'other supporting and auxiliary transport activities activities of travel agencies'].drop('sectors')


@cache('step')
def real_total_output_by_sector():
    """
    Real Name: b'real total output by sector'
    Original Eqn: b'min(real total output by fuel and sector[electricity,sectors], min(real total output by fuel and sector[heat,sectors], min(real total output by fuel and sector[liquids,sectors], min(real total output by fuel and sector[gases,sectors], real total output by fuel and sector[solids,sectors]))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(
        real_total_output_by_fuel_and_sector().loc['electricity', :].drop('final sources'),
        np.minimum(
            real_total_output_by_fuel_and_sector().loc['heat', :].drop('final sources'),
            np.minimum(
                real_total_output_by_fuel_and_sector().loc['liquids', :].drop('final sources'),
                np.minimum(real_total_output_by_fuel_and_sector().loc['gases', :].drop('final sources'),
                           real_total_output_by_fuel_and_sector().loc['solids', :].drop('final sources')))))


@cache('step')
def required_final_energy_air_transport():
    """
    Real Name: b'required final energy air transport'
    Original Eqn: b'required final energy by sector and fuel[final sources,air transport]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_final_energy_by_sector_and_fuel().loc[:, 'air transport'].drop('sectors')


@cache('step')
def required_final_energy_inland_transport():
    """
    Real Name: b'required final energy inland transport'
    Original Eqn: b'required final energy by sector and fuel[final sources,inland transport]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_final_energy_by_sector_and_fuel().loc[:, 'inland transport'].drop('sectors')


@cache('step')
def required_final_energy_water_transport():
    """
    Real Name: b'required final energy water transport'
    Original Eqn: b'required final energy by sector and fuel[final sources,water transport]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_final_energy_by_sector_and_fuel().loc[:, 'water transport'].drop('sectors')


@cache('run')
def urr_coal_bg_mohr15():
    """
    Real Name: b'urr coal bg mohr15'
    Original Eqn: b'22500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 22500


@cache('run')
def urr_coal_user_defined_ej():
    """
    Real Name: b'urr coal user defined ej'
    Original Eqn: b'14500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 14500


@cache('run')
def urr_conv_gas_bg_mohr15():
    """
    Real Name: b'urr conv gas bg mohr15'
    Original Eqn: b'13200'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 13200


@cache('run')
def urr_conv_gas_high_mohr15():
    """
    Real Name: b'urr conv gas high mohr15'
    Original Eqn: b'22500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 22500


@cache('run')
def urr_conv_gas_low_mohr15():
    """
    Real Name: b'urr conv gas low mohr15'
    Original Eqn: b'11000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 11000


@cache('run')
def urr_conv_gas_user_defined():
    """
    Real Name: b'urr conv gas user defined'
    Original Eqn: b'14500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 14500


@cache('run')
def urr_total_gas_laherrere10():
    """
    Real Name: b'urr total gas laherrere10'
    Original Eqn: b'13000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 13000


@cache('run')
def urr_total_gas_mohr12_bg():
    """
    Real Name: b'urr total gas mohr12 bg'
    Original Eqn: b'20000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 20000


@cache('run')
def urr_total_gas_user_defined():
    """
    Real Name: b'urr total gas user defined'
    Original Eqn: b'14500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 14500


@cache('run')
def urr_unconv_gas():
    """
    Real Name: b'urr unconv gas'
    Original Eqn: b'if then else(separate conv and unconv gas quest=1, if then else(choose extraction curve unconv gas=1, urr unconv gas bg mohr15 , if then else(choose extraction curve unconv gas=2, urr unconv gas low mohr15 , if then else(choose extraction curve unconv gas=3, urr unconv gas high mohr15 , urr unconv gas user defined) )), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        separate_conv_and_unconv_gas_quest() == 1,
        if_then_else(
            choose_extraction_curve_unconv_gas() == 1, urr_unconv_gas_bg_mohr15(),
            if_then_else(
                choose_extraction_curve_unconv_gas() == 2, urr_unconv_gas_low_mohr15(),
                if_then_else(choose_extraction_curve_unconv_gas() == 3,
                                       urr_unconv_gas_high_mohr15(),
                                       urr_unconv_gas_user_defined()))), 0)


@cache('run')
def urr_unconv_gas_bg_mohr15():
    """
    Real Name: b'urr unconv gas bg mohr15'
    Original Eqn: b'14500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 14500


@cache('run')
def urr_unconv_gas_low_mohr15():
    """
    Real Name: b'urr unconv gas low mohr15'
    Original Eqn: b'2800'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2800


@cache('run')
def urr_coal_high15():
    """
    Real Name: b'urr coal high15'
    Original Eqn: b'31500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 31500


@cache('run')
def urr_coal_low_mohr15():
    """
    Real Name: b'urr coal low mohr15'
    Original Eqn: b'14500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 14500


@cache('run')
def urr_unconv_gas_high_mohr15():
    """
    Real Name: b'urr unconv gas high mohr15'
    Original Eqn: b'24000'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 24000


@cache('run')
def urr_unconv_gas_user_defined():
    """
    Real Name: b'urr unconv gas user defined'
    Original Eqn: b'14500'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 14500


@cache('run')
def urr_coal_mohr2012_ej():
    """
    Real Name: b'urr coal mohr2012 ej'
    Original Eqn: b'27800'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 27800


@cache('run')
def selection_constraint_extraction_unconv_oil():
    """
    Real Name: b'selection constraint extraction unconv oil'
    Original Eqn: b'1'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1


@cache('step')
def abundance_electricity():
    """
    Real Name: b'abundance electricity'
    Original Eqn: b'if then else(total fe elec generation twh>total fe elec demand twh, 1, 1-zidz(total fe elec demand twh-total fe elec generation twh , total fe elec demand twh ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        total_fe_elec_generation_twh() > total_fe_elec_demand_twh(), 1,
        1 - zidz(total_fe_elec_demand_twh() - total_fe_elec_generation_twh(),
                           total_fe_elec_demand_twh()))


@cache('run')
def p_constraint_growth_extraction_unconv_oil():
    """
    Real Name: b'p constraint growth extraction unconv oil'
    Original Eqn: b'0.045'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.045


@cache('step')
def extraction_unconv_oil_delayed():
    """
    Real Name: b'extraction unconv oil delayed'
    Original Eqn: b'delay fixed ( extraction unconv oil ej, time step, 1.09)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return _delay_extraction_unconv_oil_ej_roundtime_step__time_step___time_step_109_time_step__time_step()


@cache('run')
def final_time():
    """
    Real Name: b'final time'
    Original Eqn: b'2060'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 2050


@cache('run')
def initial_time():
    """
    Real Name: b'initial time'
    Original Eqn: b'1995'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 1995


@cache('run')
def saveper():
    """
    Real Name: b'saveper'
    Original Eqn: b'time step'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return time_step()


@cache('run')
def time_step():
    """
    Real Name: b'time step'
    Original Eqn: b'0.03125'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return 0.03125


@cache('step')
def historic_share_e_industry_own_use_vs_tfec():
    """
    Real Name: b'historic share e industry own use vs tfec'
    Original Eqn: b'if then else(Time<2016, historic energy industry own use(Time)/(real tfec-fe tot generation all res elec ej), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2016,
        historic_energy_industry_own_use(time()) /
        (real_tfec() - fe_tot_generation_all_res_elec_ej()), 0)


@cache('step')
def historic_rate_final_energy_intensity():
    """
    Real Name: b'historic rate final energy intensity'
    Original Eqn: b'historic final energy intensity by sector and fuel subelectricity subagriculture hunting forestry and fishing(integer(Time +1))-historic final energy intensity by sector and fuel subelectricity subagriculture hunting forestry and fishing(integer (Time))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subagriculture_hunting_forestry_and_fishing(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subagriculture_hunting_forestry_and_fishing(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subagriculture_hunting_forestry_and_fishing(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subagriculture_hunting_forestry_and_fishing(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subagriculture_hunting_forestry_and_fishing(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subagriculture_hunting_forestry_and_fishing(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subagriculture_hunting_forestry_and_fishing(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subagriculture_hunting_forestry_and_fishing(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subagriculture_hunting_forestry_and_fishing(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subagriculture_hunting_forestry_and_fishing(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_submining_and_quarrying(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_submining_and_quarrying(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_submining_and_quarrying(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_submining_and_quarrying(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_submining_and_quarrying(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_submining_and_quarrying(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_submining_and_quarrying(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_submining_and_quarrying(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_submining_and_quarrying(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_submining_and_quarrying(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subfood_beverages_and_tobacco(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subfood_beverages_and_tobacco(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subfood_beverages_and_tobacco(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subfood_beverages_and_tobacco(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subfood_beverages_and_tobacco(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subfood_beverages_and_tobacco(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subfood_beverages_and_tobacco(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subfood_beverages_and_tobacco(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subfood_beverages_and_tobacco(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subfood_beverages_and_tobacco(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subtextiles_and_textile_products(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subtextiles_and_textile_products(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subtextiles_and_textile_products(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subtextiles_and_textile_products(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subtextiles_and_textile_products(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subtextiles_and_textile_products(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subtextiles_and_textile_products(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subtextiles_and_textile_products(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subtextiles_and_textile_products(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subtextiles_and_textile_products(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subleather_leather_and_footwear(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subleather_leather_and_footwear(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subleather_leather_and_footwear(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subleather_leather_and_footwear(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subleather_leather_and_footwear(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subleather_leather_and_footwear(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subleather_leather_and_footwear(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subleather_leather_and_footwear(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subleather_leather_and_footwear(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subleather_leather_and_footwear(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subwood_and_products_of_wood_and_cork(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subwood_and_products_of_wood_and_cork(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subwood_and_products_of_wood_and_cork(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subwood_and_products_of_wood_and_cork(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subwood_and_products_of_wood_and_cork(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subwood_and_products_of_wood_and_cork(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subwood_and_products_of_wood_and_cork(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subwood_and_products_of_wood_and_cork(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subwood_and_products_of_wood_and_cork(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subwood_and_products_of_wood_and_cork(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subpulp_paper_printing_and_publishing(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subpulp_paper_printing_and_publishing(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subpulp_paper_printing_and_publishing(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subpulp_paper_printing_and_publishing(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subpulp_paper_printing_and_publishing(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subpulp_paper_printing_and_publishing(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subpulp_paper_printing_and_publishing(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subpulp_paper_printing_and_publishing(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subpulp_paper_printing_and_publishing(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subpulp_paper_printing_and_publishing(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subcoke_refined_petroleum_and_nuclear_fuel(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subcoke_refined_petroleum_and_nuclear_fuel(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subcoke_refined_petroleum_and_nuclear_fuel(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subcoke_refined_petroleum_and_nuclear_fuel(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subcoke_refined_petroleum_and_nuclear_fuel(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subcoke_refined_petroleum_and_nuclear_fuel(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subcoke_refined_petroleum_and_nuclear_fuel(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subcoke_refined_petroleum_and_nuclear_fuel(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subcoke_refined_petroleum_and_nuclear_fuel(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subcoke_refined_petroleum_and_nuclear_fuel(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subchemicals_and_chemical_products(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subchemicals_and_chemical_products(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subchemicals_and_chemical_products(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subchemicals_and_chemical_products(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subchemicals_and_chemical_products(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subchemicals_and_chemical_products(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subchemicals_and_chemical_products(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subchemicals_and_chemical_products(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subchemicals_and_chemical_products(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subchemicals_and_chemical_products(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subrubber_and_plastics(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subrubber_and_plastics(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subrubber_and_plastics(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subrubber_and_plastics(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subrubber_and_plastics(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subrubber_and_plastics(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subrubber_and_plastics(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subrubber_and_plastics(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subrubber_and_plastics(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subrubber_and_plastics(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subother_non_metalic_mineral(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subother_non_metalic_mineral(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subother_non_metalic_mineral(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subother_non_metalic_mineral(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subother_non_metalic_mineral(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subother_non_metalic_mineral(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subother_non_metalic_mineral(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subother_non_metalic_mineral(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subother_non_metalic_mineral(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subother_non_metalic_mineral(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subbasic_metals_and_fabricated_metal(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subbasic_metals_and_fabricated_metal(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subbasic_metals_and_fabricated_metal(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subbasic_metals_and_fabricated_metal(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subbasic_metals_and_fabricated_metal(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subbasic_metals_and_fabricated_metal(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subbasic_metals_and_fabricated_metal(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subbasic_metals_and_fabricated_metal(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subbasic_metals_and_fabricated_metal(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subbasic_metals_and_fabricated_metal(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_submachinery_nec(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_submachinery_nec(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_submachinery_nec(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_submachinery_nec(int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_submachinery_nec(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_submachinery_nec(int(
            time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_submachinery_nec(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_submachinery_nec(int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_submachinery_nec(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_submachinery_nec(int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subelectrical_and_optical_equipment(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subelectrical_and_optical_equipment(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subelectrical_and_optical_equipment(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subelectrical_and_optical_equipment(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subelectrical_and_optical_equipment(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subelectrical_and_optical_equipment(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subelectrical_and_optical_equipment(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subelectrical_and_optical_equipment(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subelectrical_and_optical_equipment(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subelectrical_and_optical_equipment(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subtransport_equipment(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subtransport_equipment(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subtransport_equipment(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subtransport_equipment(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subtransport_equipment(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subtransport_equipment(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subtransport_equipment(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subtransport_equipment(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subtransport_equipment(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subtransport_equipment(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_submanufacturing_nec_recycling(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_submanufacturing_nec_recycling(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_submanufacturing_nec_recycling(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_submanufacturing_nec_recycling(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_submanufacturing_nec_recycling(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_submanufacturing_nec_recycling(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_submanufacturing_nec_recycling(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_submanufacturing_nec_recycling(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_submanufacturing_nec_recycling(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_submanufacturing_nec_recycling(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subelectricity_gas_and_water_supply(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subelectricity_gas_and_water_supply(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subelectricity_gas_and_water_supply(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subelectricity_gas_and_water_supply(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subelectricity_gas_and_water_supply(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subelectricity_gas_and_water_supply(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subelectricity_gas_and_water_supply(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subelectricity_gas_and_water_supply(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subelectricity_gas_and_water_supply(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subelectricity_gas_and_water_supply(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subconstruction(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subconstruction(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subconstruction(int(time() + 1))
        - historic_final_energy_intensity_by_sector_and_fuel_subheat_subconstruction(int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subconstruction(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subconstruction(int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subconstruction(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subconstruction(int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subconstruction(
            int(time() +
                1)) - historic_final_energy_intensity_by_sector_and_fuel_subsolids_subconstruction(
                    int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subhotels_and_restaurants(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subhotels_and_restaurants(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subhotels_and_restaurants(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subhotels_and_restaurants(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subhotels_and_restaurants(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subhotels_and_restaurants(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subhotels_and_restaurants(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subhotels_and_restaurants(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subhotels_and_restaurants(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subhotels_and_restaurants(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subinland_transport(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subinland_transport(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subinland_transport(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subinland_transport(int(
            time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subinland_transport(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subinland_transport(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subinland_transport(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subinland_transport(int(
            time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subinland_transport(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subinland_transport(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subwater_transport(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subwater_transport(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subwater_transport(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subwater_transport(int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subwater_transport(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subwater_transport(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subwater_transport(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subwater_transport(int(
            time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subwater_transport(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subwater_transport(int(
            time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subair_transport(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subair_transport(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subair_transport(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subair_transport(int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subair_transport(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subair_transport(int(
            time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subair_transport(
            int(time() +
                1)) - historic_final_energy_intensity_by_sector_and_fuel_subgases_subair_transport(
                    int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subair_transport(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subair_transport(int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subpost_and_telecommunications(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subpost_and_telecommunications(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subpost_and_telecommunications(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subpost_and_telecommunications(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subpost_and_telecommunications(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subpost_and_telecommunications(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subpost_and_telecommunications(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subpost_and_telecommunications(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subpost_and_telecommunications(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subpost_and_telecommunications(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subfinancial_intermediation(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subfinancial_intermediation(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subfinancial_intermediation(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subfinancial_intermediation(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subfinancial_intermediation(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subfinancial_intermediation(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subfinancial_intermediation(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subfinancial_intermediation(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subfinancial_intermediation(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subfinancial_intermediation(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subreal_estate_activities(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subreal_estate_activities(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subreal_estate_activities(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subreal_estate_activities(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subreal_estate_activities(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subreal_estate_activities(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subreal_estate_activities(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subreal_estate_activities(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subreal_estate_activities(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subreal_estate_activities(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subrenting_od_meq_and_other_business_activities(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subrenting_od_meq_and_other_business_activities(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subrenting_od_meq_and_other_business_activities(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subrenting_od_meq_and_other_business_activities(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subrenting_od_meq_and_other_business_activities(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subrenting_od_meq_and_other_business_activities(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subrenting_od_meq_and_other_business_activities(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subrenting_od_meq_and_other_business_activities(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subrenting_od_meq_and_other_business_activities(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subrenting_od_meq_and_other_business_activities(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subpublic_admin_and_defence_compulsory_social_security(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subpublic_admin_and_defence_compulsory_social_security(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subpublic_admin_and_defence_compulsory_social_security(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subpublic_admin_and_defence_compulsory_social_security(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subpublic_admin_and_defence_compulsory_social_security(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subpublic_admin_and_defence_compulsory_social_security(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subpublic_admin_and_defence_compulsory_social_security(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subpublic_admin_and_defence_compulsory_social_security(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subpublic_admin_and_defence_compulsory_social_security(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subpublic_admin_and_defence_compulsory_social_security(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subeducation(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subeducation(int(
            time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subeducation(int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subeducation(int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subeducation(int(time() + 1))
        - historic_final_energy_intensity_by_sector_and_fuel_subliquids_subeducation(int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subeducation(int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subeducation(int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subeducation(
            int(time() +
                1)) - historic_final_energy_intensity_by_sector_and_fuel_subsolids_subeducation(
                    int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subhealth_and_social_work(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subhealth_and_social_work(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subhealth_and_social_work(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subhealth_and_social_work(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subhealth_and_social_work(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subhealth_and_social_work(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subhealth_and_social_work(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subhealth_and_social_work(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subhealth_and_social_work(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subhealth_and_social_work(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subother_community_social_and_persona_services(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subother_community_social_and_persona_services(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subother_community_social_and_persona_services(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subother_community_social_and_persona_services(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subother_community_social_and_persona_services(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subother_community_social_and_persona_services(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subother_community_social_and_persona_services(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subother_community_social_and_persona_services(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subother_community_social_and_persona_services(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subother_community_social_and_persona_services(
            int(time()))],[
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subprivate_households_with_employed_persons(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subelectricity_subprivate_households_with_employed_persons(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subprivate_households_with_employed_persons(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subheat_subprivate_households_with_employed_persons(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subprivate_households_with_employed_persons(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subliquids_subprivate_households_with_employed_persons(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subprivate_households_with_employed_persons(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subgases_subprivate_households_with_employed_persons(
            int(time())),
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subprivate_households_with_employed_persons(
            int(time() + 1)) -
        historic_final_energy_intensity_by_sector_and_fuel_subsolids_subprivate_households_with_employed_persons(
            int(time()))]],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons'], 'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['sectors', 'final sources'])


@cache('step')
def historic_rate_final_energy_intensity_h():
    """
    Real Name: b'historic rate final energy intensity h'
    Original Eqn: b'historic final energy intensity h subelectricity(integer(Time+1))-historic final energy intensity h subelectricity(integer(Time))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        historic_final_energy_intensity_h_subelectricity(int(time() + 1)) -
        historic_final_energy_intensity_h_subelectricity(int(time())),
        historic_final_energy_intensity_h_subheat(int(time() + 1)) -
        historic_final_energy_intensity_h_subheat(int(time())),
        historic_final_energy_intensity_h_subliquids(int(time() + 1)) -
        historic_final_energy_intensity_h_subliquids(int(time())),
        historic_final_energy_intensity_h_subgases(int(time() + 1)) -
        historic_final_energy_intensity_h_subgases(int(time())),
        historic_final_energy_intensity_h_subsolids(int(time() + 1)) -
        historic_final_energy_intensity_h_subsolids(int(time()))],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def share_gas_div_xcoal_plus_gasx_for_heat_plants():
    """
    Real Name: b'share gas div xcoal plus gasx for heat plants'
    Original Eqn: b'historic share gas div xcoal plus gasx for heat plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return historic_share_gas_div_xcoal_plus_gasx_for_heat_plants(time())


@cache('step')
def share_liquids_fot_heat_plants():
    """
    Real Name: b'share liquids fot heat plants'
    Original Eqn: b'if then else(Time<2014, historic share liquids for heat plants(Time), if then else(phase out oil for heat quest=0, historic share liquids for heat plants(Time) , if then else(Time<start year policy phase out oil for heat, historic share liquids for heat plants(Time) , p share oil for heat)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2014, historic_share_liquids_for_heat_plants(time()),
        if_then_else(
            phase_out_oil_for_heat_quest() == 0, historic_share_liquids_for_heat_plants(time()),
            if_then_else(time() < start_year_policy_phase_out_oil_for_heat(),
                                   historic_share_liquids_for_heat_plants(time()),
                                   p_share_oil_for_heat())))


@cache('step')
def share_gas_div_xcoal_plus_gasx_for_elec():
    """
    Real Name: b'share gas div xcoal plus gasx for elec'
    Original Eqn: b'if then else(switch scarcity ps elec substit=0, hist share gas div xcoal plus gasx elec(Time), if then else(Time>2014, future share gas div xcoal plus gasx for elec,hist share gas div xcoal plus gasx elec(Time)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        switch_scarcity_ps_elec_substit() == 0, hist_share_gas_div_xcoal_plus_gasx_elec(time()),
        if_then_else(time() > 2014, future_share_gas_div_xcoal_plus_gasx_for_elec(),
                               hist_share_gas_div_xcoal_plus_gasx_elec(time())))


@cache('step')
def demand_elec_gas_and_coal_twh():
    """
    Real Name: b'demand elec gas and coal twh'
    Original Eqn: b'if then else(switch scarcity ps elec substit=0, demand elec plants fossil fuels twh*(1-hist share oil div ff elec(Time)), if then else(Time<2016, demand elec plants fossil fuels twh*(1-hist share oil div ff elec(Time)), demand elec plants fossil fuels twh *future share gas plus coal div ff for elec))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        switch_scarcity_ps_elec_substit() == 0,
        demand_elec_plants_fossil_fuels_twh() * (1 - hist_share_oil_div_ff_elec(time())),
        if_then_else(
            time() < 2016,
            demand_elec_plants_fossil_fuels_twh() * (1 - hist_share_oil_div_ff_elec(time())),
            demand_elec_plants_fossil_fuels_twh() * future_share_gas_plus_coal_div_ff_for_elec()))


@cache('step')
def share_oil_for_elec():
    """
    Real Name: b'share oil for elec'
    Original Eqn: b'if then else(switch scarcity ps elec substit=0, hist share oil div ff elec(Time), if then else(Time<2016, hist share oil div ff elec(Time), if then else(phase out oil for electricity quest=0, future share oil div ff for elec, if then else(Time<start year policy phase out oil for elec, hist share oil div ff elec(Time) , p share oil for elec ))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        switch_scarcity_ps_elec_substit() == 0, hist_share_oil_div_ff_elec(time()),
        if_then_else(
            time() < 2016, hist_share_oil_div_ff_elec(time()),
            if_then_else(
                phase_out_oil_for_electricity_quest() == 0, future_share_oil_div_ff_for_elec(),
                if_then_else(time() < start_year_policy_phase_out_oil_for_elec(),
                                       hist_share_oil_div_ff_elec(time()),
                                       p_share_oil_for_elec()))))


@cache('step')
def new_cellulosic_biofuels():
    """
    Real Name: b'new cellulosic biofuels'
    Original Eqn: b'if then else(Time<start year cellulosic biofuels, 0, if then else(Time<start year cellulosic biofuels+5, start production biofuels(Time-start year cellulosic biofuels )*ej per ktoe, if then else(check liquids<-0.0001, constrain liquids exogenous growth quest*potential pe cellulosic biofuel ej , p cellulosic biofuels*potential pe cellulosic biofuel ej*cellulosic biofuels available)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_year_cellulosic_biofuels(), 0,
        if_then_else(
            time() < start_year_cellulosic_biofuels() + 5,
            start_production_biofuels(time() - start_year_cellulosic_biofuels()) * ej_per_ktoe(),
            if_then_else(
                check_liquids() < - equality_threshold(),
                constrain_liquids_exogenous_growth_quest() * potential_pe_cellulosic_biofuel_ej(),
                p_cellulosic_biofuels() * potential_pe_cellulosic_biofuel_ej() *
                cellulosic_biofuels_available())))


@cache('step')
def new_bioe_residues_for_heat_plus_elec():
    """
    Real Name: b'new bioe residues for heat plus elec'
    Original Eqn: b'if then else(Time<start year bioe residues for heat plus elec, 0, if then else(Time<start year bioe residues for heat plus elec+5, start production biofuels(Time-start year bioe residues for heat plus elec)*ej per ktoe, p bioe residues for heat plus elec*pe bioe residues for heat plus elec ej*bioe residues for heat plus elec available))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_year_bioe_residues_for_heat_plus_elec(), 0,
        if_then_else(
            time() < start_year_bioe_residues_for_heat_plus_elec() + 5,
            start_production_biofuels(time() - start_year_bioe_residues_for_heat_plus_elec()) *
            ej_per_ktoe(),
            p_bioe_residues_for_heat_plus_elec() * pe_bioe_residues_for_heat_plus_elec_ej() *
            bioe_residues_for_heat_plus_elec_available()))


@cache('step')
def new_biofuels_land_marg():
    """
    Real Name: b'new biofuels land marg'
    Original Eqn: b'if then else(Time<start year biofuels land marg, 0, if then else(Time<start year biofuels land marg+5, start production biofuels(Time-start year biofuels land marg )*ej per ktoe/ratio land productivity 2gen vs marg, if then else(check liquids<-0.0001, constrain liquids exogenous growth quest*potential peavail biofuels land marg ej ,adapt growth biofuels 2gen*bioe gen land marg available*potential peavail biofuels land marg ej)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < start_year_biofuels_land_marg(), 0,
        if_then_else(
            time() < start_year_biofuels_land_marg() + 5,
            start_production_biofuels(time() - start_year_biofuels_land_marg()) * ej_per_ktoe() /
            ratio_land_productivity_2gen_vs_marg(),
            if_then_else(
                check_liquids() < - equality_threshold(),
                constrain_liquids_exogenous_growth_quest() *
                potential_peavail_biofuels_land_marg_ej(),
                adapt_growth_biofuels_2gen() * bioe_gen_land_marg_available() *
                potential_peavail_biofuels_land_marg_ej())))


@cache('step')
def a_lineal_regr_phase_out_oil_for_heat():
    """
    Real Name: b'a lineal regr phase out oil for heat'
    Original Eqn: b'(share in target year oil for heat-historic share liquids for heat plants(Time))/(target year policy phase out oil for heat -start year policy phase out oil for heat)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (share_in_target_year_oil_for_heat() - historic_share_liquids_for_heat_plants(
        time())) / (target_year_policy_phase_out_oil_for_heat() -
                    start_year_policy_phase_out_oil_for_heat())


@cache('step')
def a_lineal_regr_phase_out_oil_for_elec():
    """
    Real Name: b'a lineal regr phase out oil for elec'
    Original Eqn: b'(share in target year oil for elec-hist share oil div ff elec(Time))/(target year policy phase out oil for elec-start year policy phase out oil for elec)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (share_in_target_year_oil_for_elec() - hist_share_oil_div_ff_elec(time())) / (
        target_year_policy_phase_out_oil_for_elec() - start_year_policy_phase_out_oil_for_elec())


@cache('step')
def co2x_soil_and_luc_emissions():
    """
    Real Name: b'co2x soil and luc emissions'
    Original Eqn: b'co2x land use change emissions exogenous(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return co2x_land_use_change_emissions_exogenous(time())


@cache('step')
def other_forcings_rcp():
    """
    Real Name: b'other forcings rcp'
    Original Eqn: b'if then else(choose rcp=1, other forcings rcp scenario subrcp26(Time), if then else(choose rcp=2, other forcings rcp scenario subrcp45(Time), if then else(choose rcp=3, other forcings rcp scenario subrcp60(Time), other forcings rcp scenario subrcp85(Time))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        choose_rcp() == 1, other_forcings_rcp_scenario_subrcp26(time()),
        if_then_else(
            choose_rcp() == 2, other_forcings_rcp_scenario_subrcp45(time()),
            if_then_else(choose_rcp() == 3, other_forcings_rcp_scenario_subrcp60(time()),
                                   other_forcings_rcp_scenario_subrcp85(time()))))


@cache('step')
def halocarbon_rf():
    """
    Real Name: b'halocarbon rf'
    Original Eqn: b'rf from f gases+mp rf total(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return rf_from_f_gases() + mp_rf_total(time())


@cache('step')
def other_forcings():
    """
    Real Name: b'other forcings'
    Original Eqn: b'if then else(Time<=last historical rf year, other forcings history(Time), other forcings rcp)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() <= last_historical_rf_year(),
                                  other_forcings_history(time()), other_forcings_rcp())


@cache('step')
def global_ch4_anthro_emissions():
    """
    Real Name: b'global ch4 anthro emissions'
    Original Eqn: b'total ch4 emissions fossil fuels+if then else(choose rcp=1, global ch4 anthro emissions rcp subrcp26(Time), if then else(choose rcp=2, global ch4 anthro emissions rcp subrcp45(Time), if then else(choose rcp=3, global ch4 anthro emissions rcp subrcp60(Time), global ch4 anthro emissions rcp subrcp85(Time))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_ch4_emissions_fossil_fuels() + if_then_else(
        choose_rcp() == 1, global_ch4_anthro_emissions_rcp_subrcp26(time()),
        if_then_else(
            choose_rcp() == 2, global_ch4_anthro_emissions_rcp_subrcp45(time()),
            if_then_else(choose_rcp() == 3,
                                   global_ch4_anthro_emissions_rcp_subrcp60(time()),
                                   global_ch4_anthro_emissions_rcp_subrcp85(time()))))


@cache('step')
def global_hfc_emissions():
    """
    Real Name: b'global hfc emissions'
    Original Eqn: b'if then else(choose rcp=1, global hfc emissions rcp 26 subhfc134a(Time), if then else(choose rcp=2, global hfc emissions rcp 45 subhfc134a(Time), if then else(choose rcp=3, global hfc emissions rcp 60 subhfc134a(Time), global hfc emissions rcp 85 subhfc134a(Time))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        if_then_else(
            choose_rcp() == 1, global_hfc_emissions_rcp_26_subhfc134a(time()),
            if_then_else(
                choose_rcp() == 2, global_hfc_emissions_rcp_45_subhfc134a(time()),
                if_then_else(choose_rcp() == 3,
                                       global_hfc_emissions_rcp_60_subhfc134a(time()),
                                       global_hfc_emissions_rcp_85_subhfc134a(time())))),
        if_then_else(
            choose_rcp() == 1, global_hfc_emissions_rcp_26_subhfc23(time()),
            if_then_else(
                choose_rcp() == 2, global_hfc_emissions_rcp_45_subhfc23(time()),
                if_then_else(choose_rcp() == 3,
                                       global_hfc_emissions_rcp_60_subhfc23(time()),
                                       global_hfc_emissions_rcp_85_subhfc23(time())))),
        if_then_else(
            choose_rcp() == 1, global_hfc_emissions_rcp_26_subhfc32(time()),
            if_then_else(
                choose_rcp() == 2, global_hfc_emissions_rcp_45_subhfc32(time()),
                if_then_else(choose_rcp() == 3,
                                       global_hfc_emissions_rcp_60_subhfc32(time()),
                                       global_hfc_emissions_rcp_85_subhfc32(time())))),
        if_then_else(
            choose_rcp() == 1, global_hfc_emissions_rcp_26_subhfc125(time()),
            if_then_else(
                choose_rcp() == 2, global_hfc_emissions_rcp_45_subhfc125(time()),
                if_then_else(choose_rcp() == 3,
                                       global_hfc_emissions_rcp_60_subhfc125(time()),
                                       global_hfc_emissions_rcp_85_subhfc125(time())))),
        if_then_else(
            choose_rcp() == 1, global_hfc_emissions_rcp_26_subhfc143a(time()),
            if_then_else(
                choose_rcp() == 2, global_hfc_emissions_rcp_45_subhfc143a(time()),
                if_then_else(choose_rcp() == 3,
                                       global_hfc_emissions_rcp_60_subhfc143a(time()),
                                       global_hfc_emissions_rcp_85_subhfc143a(time())))),
        if_then_else(
            choose_rcp() == 1, global_hfc_emissions_rcp_26_subhfc152a(time()),
            if_then_else(
                choose_rcp() == 2, global_hfc_emissions_rcp_45_subhfc152a(time()),
                if_then_else(choose_rcp() == 3,
                                       global_hfc_emissions_rcp_60_subhfc152a(time()),
                                       global_hfc_emissions_rcp_85_subhfc152a(time())))),
        if_then_else(
            choose_rcp() == 1, global_hfc_emissions_rcp_26_subhfc227ea(time()),
            if_then_else(
                choose_rcp() == 2, global_hfc_emissions_rcp_45_subhfc227ea(time()),
                if_then_else(choose_rcp() == 3,
                                       global_hfc_emissions_rcp_60_subhfc227ea(time()),
                                       global_hfc_emissions_rcp_85_subhfc227ea(time())))),
        if_then_else(
            choose_rcp() == 1, global_hfc_emissions_rcp_26_subhfc245ca(time()),
            if_then_else(
                choose_rcp() == 2, global_hfc_emissions_rcp_45_subhfc245ca(time()),
                if_then_else(choose_rcp() == 3,
                                       global_hfc_emissions_rcp_60_subhfc245ca(time()),
                                       global_hfc_emissions_rcp_85_subhfc245ca(time())))),
        if_then_else(
            choose_rcp() == 1, global_hfc_emissions_rcp_26_subhfc4310mee(time()),
            if_then_else(
                choose_rcp() == 2, global_hfc_emissions_rcp_45_subhfc4310mee(time()),
                if_then_else(choose_rcp() == 3,
                                       global_hfc_emissions_rcp_60_subhfc4310mee(time()),
                                       global_hfc_emissions_rcp_85_subhfc4310mee(time()))))],
        coords={'hfc type': ['hfc134a', 'hfc23', 'hfc32', 'hfc125', 'hfc143a', 'hfc152a', 'hfc227ea', 'hfc245ca', 'hfc4310mee']},
        dims=['hfc type'])


@cache('step')
def global_pfc_emissions():
    """
    Real Name: b'global pfc emissions'
    Original Eqn: b'if then else(choose rcp=1, global pfc emissions rcp subrcp26(Time), if then else(choose rcp=2, global pfc emissions rcp subrcp45(Time), if then else(choose rcp=3,global pfc emissions rcp subrcp60(Time), global pfc emissions rcp subrcp85(Time))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        choose_rcp() == 1, global_pfc_emissions_rcp_subrcp26(time()),
        if_then_else(
            choose_rcp() == 2, global_pfc_emissions_rcp_subrcp45(time()),
            if_then_else(choose_rcp() == 3, global_pfc_emissions_rcp_subrcp60(time()),
                                   global_pfc_emissions_rcp_subrcp85(time()))))


@cache('step')
def global_sf6_emissions():
    """
    Real Name: b'global sf6 emissions'
    Original Eqn: b'if then else(choose rcp=1, global sf6 emissions rcp subrcp26(Time), if then else(choose rcp=2, global sf6 emissions rcp subrcp45(Time), if then else(choose rcp=3, global sf6 emissions rcp subrcp60(Time), global sf6 emissions rcp subrcp85(Time))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        choose_rcp() == 1, global_sf6_emissions_rcp_subrcp26(time()),
        if_then_else(
            choose_rcp() == 2, global_sf6_emissions_rcp_subrcp45(time()),
            if_then_else(choose_rcp() == 3, global_sf6_emissions_rcp_subrcp60(time()),
                                   global_sf6_emissions_rcp_subrcp85(time()))))


@cache('step')
def global_n2o_anthro_emissions():
    """
    Real Name: b'global n2o anthro emissions'
    Original Eqn: b'if then else(choose rcp=1, global n2o anthro emissions rcp subrcp26(Time), if then else(choose rcp=2, global n2o anthro emissions rcp subrcp45(Time), if then else(choose rcp=3, global n2o anthro emissions rcp subrcp60(Time), global n2o anthro emissions rcp subrcp85(Time))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        choose_rcp() == 1, global_n2o_anthro_emissions_rcp_subrcp26(time()),
        if_then_else(
            choose_rcp() == 2, global_n2o_anthro_emissions_rcp_subrcp45(time()),
            if_then_else(choose_rcp() == 3,
                                   global_n2o_anthro_emissions_rcp_subrcp60(time()),
                                   global_n2o_anthro_emissions_rcp_subrcp85(time()))))


@cache('step')
def historic_water_by_type_intensities_by_sector():
    """
    Real Name: b'historic water by type intensities by sector'
    Original Eqn: b'if then else(Time<2009, historic water use by type sectors subagriculture hunting forestry and fishing subblue water(Time)/real total output by sector[agriculture hunting forestry and fishing], 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subagriculture_hunting_forestry_and_fishing_subblue_water(
                time()) / real_total_output_by_sector().loc['agriculture hunting forestry and fishing'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subagriculture_hunting_forestry_and_fishing_subgreen_water(
                time()) / real_total_output_by_sector().loc['agriculture hunting forestry and fishing'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subagriculture_hunting_forestry_and_fishing_subgray_water(
                time()) / real_total_output_by_sector().loc['agriculture hunting forestry and fishing'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_submining_and_quarrying_subblue_water(time()) /
            real_total_output_by_sector().loc['mining and quarrying'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_submining_and_quarrying_subgreen_water(time()) /
            real_total_output_by_sector().loc['mining and quarrying'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_submining_and_quarrying_subgray_water(time()) /
            real_total_output_by_sector().loc['mining and quarrying'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subfood_beverages_and_tobacco_subblue_water(time())
            / real_total_output_by_sector().loc['food beverages and tobacco'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subfood_beverages_and_tobacco_subgreen_water(time())
            / real_total_output_by_sector().loc['food beverages and tobacco'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subfood_beverages_and_tobacco_subgray_water(time())
            / real_total_output_by_sector().loc['food beverages and tobacco'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subtextiles_and_textile_products_subblue_water(
                time()) / real_total_output_by_sector().loc['textiles and textile products'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subtextiles_and_textile_products_subgreen_water(
                time()) / real_total_output_by_sector().loc['textiles and textile products'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subtextiles_and_textile_products_subgray_water(
                time()) / real_total_output_by_sector().loc['textiles and textile products'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subleather_leather_and_footwear_subblue_water(
                time()) / real_total_output_by_sector().loc['leather leather and footwear'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subleather_leather_and_footwear_subgreen_water(
                time()) / real_total_output_by_sector().loc['leather leather and footwear'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subleather_leather_and_footwear_subgray_water(
                time()) / real_total_output_by_sector().loc['leather leather and footwear'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subwood_and_products_of_wood_and_cork_subblue_water(
                time()) / real_total_output_by_sector().loc['wood and products of wood and cork'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subwood_and_products_of_wood_and_cork_subgreen_water(
                time()) / real_total_output_by_sector().loc['wood and products of wood and cork'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subwood_and_products_of_wood_and_cork_subgray_water(
                time()) / real_total_output_by_sector().loc['wood and products of wood and cork'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subpulp_paper_printing_and_publishing_subblue_water(
                time()) / real_total_output_by_sector().loc['pulp paper printing and publishing'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subpulp_paper_printing_and_publishing_subgreen_water(
                time()) / real_total_output_by_sector().loc['pulp paper printing and publishing'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subpulp_paper_printing_and_publishing_subgray_water(
                time()) / real_total_output_by_sector().loc['pulp paper printing and publishing'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subcoke_refined_petroleum_and_nuclear_fuel_subblue_water(
                time()) / real_total_output_by_sector().loc['coke refined petroleum and nuclear fuel'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subcoke_refined_petroleum_and_nuclear_fuel_subgreen_water(
                time()) / real_total_output_by_sector().loc['coke refined petroleum and nuclear fuel'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subcoke_refined_petroleum_and_nuclear_fuel_subgray_water(
                time()) / real_total_output_by_sector().loc['coke refined petroleum and nuclear fuel'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subchemicals_and_chemical_products_subblue_water(
                time()) / real_total_output_by_sector().loc['chemicals and chemical products'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subchemicals_and_chemical_products_subgreen_water(
                time()) / real_total_output_by_sector().loc['chemicals and chemical products'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subchemicals_and_chemical_products_subgray_water(
                time()) / real_total_output_by_sector().loc['chemicals and chemical products'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subrubber_and_plastics_subblue_water(time()) /
            real_total_output_by_sector().loc['rubber and plastics'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subrubber_and_plastics_subgreen_water(time()) /
            real_total_output_by_sector().loc['rubber and plastics'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subrubber_and_plastics_subgray_water(time()) /
            real_total_output_by_sector().loc['rubber and plastics'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subother_non_metalic_mineral_subblue_water(time()) /
            real_total_output_by_sector().loc['other non metalic mineral'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subother_non_metalic_mineral_subgreen_water(time())
            / real_total_output_by_sector().loc['other non metalic mineral'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subother_non_metalic_mineral_subgray_water(time()) /
            real_total_output_by_sector().loc['other non metalic mineral'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subbasic_metals_and_fabricated_metal_subblue_water(
                time()) / real_total_output_by_sector().loc['basic metals and fabricated metal'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subbasic_metals_and_fabricated_metal_subgreen_water(
                time()) / real_total_output_by_sector().loc['basic metals and fabricated metal'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subbasic_metals_and_fabricated_metal_subgray_water(
                time()) / real_total_output_by_sector().loc['basic metals and fabricated metal'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_submachinery_nec_subblue_water(time()) /
            real_total_output_by_sector().loc['machinery nec'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_submachinery_nec_subgreen_water(time()) /
            real_total_output_by_sector().loc['machinery nec'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_submachinery_nec_subgray_water(time()) /
            real_total_output_by_sector().loc['machinery nec'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subelectrical_and_optical_equipment_subblue_water(
                time()) / real_total_output_by_sector().loc['electrical and optical equipment'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subelectrical_and_optical_equipment_subgreen_water(
                time()) / real_total_output_by_sector().loc['electrical and optical equipment'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subelectrical_and_optical_equipment_subgray_water(
                time()) / real_total_output_by_sector().loc['electrical and optical equipment'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subtransport_equipment_subblue_water(time()) /
            real_total_output_by_sector().loc['transport equipment'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subtransport_equipment_subgreen_water(time()) /
            real_total_output_by_sector().loc['transport equipment'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subtransport_equipment_subgray_water(time()) /
            real_total_output_by_sector().loc['transport equipment'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_submanufacturing_nec_recycling_subblue_water(time())
            / real_total_output_by_sector().loc['manufacturing nec recycling'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_submanufacturing_nec_recycling_subgreen_water(
                time()) / real_total_output_by_sector().loc['manufacturing nec recycling'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_submanufacturing_nec_recycling_subgray_water(time())
            / real_total_output_by_sector().loc['manufacturing nec recycling'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subelectricity_gas_and_water_supply_subblue_water(
                time()) / real_total_output_by_sector().loc['electricity gas and water supply'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subelectricity_gas_and_water_supply_subgreen_water(
                time()) / real_total_output_by_sector().loc['electricity gas and water supply'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subelectricity_gas_and_water_supply_subgray_water(
                time()) / real_total_output_by_sector().loc['electricity gas and water supply'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subconstruction_subblue_water(time()) /
            real_total_output_by_sector().loc['construction'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subconstruction_subgreen_water(time()) /
            real_total_output_by_sector().loc['construction'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subconstruction_subgray_water(time()) /
            real_total_output_by_sector().loc['construction'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel_subblue_water(
                time()) / real_total_output_by_sector().loc['sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel_subgreen_water(
                time()) / real_total_output_by_sector().loc['sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel_subgray_water(
                time()) / real_total_output_by_sector().loc['sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles_subblue_water(
                time()) / real_total_output_by_sector().loc['wholesale trade and commissions trade except of motor vehicles and motorcycles'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles_subgreen_water(
                time()) / real_total_output_by_sector().loc['wholesale trade and commissions trade except of motor vehicles and motorcycles'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles_subgray_water(
                time()) / real_total_output_by_sector().loc['wholesale trade and commissions trade except of motor vehicles and motorcycles'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods_subblue_water(
                time()) / real_total_output_by_sector().loc['retail trade except of motor vehicles and motorcycles repair of household goods'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods_subgreen_water(
                time()) / real_total_output_by_sector().loc['retail trade except of motor vehicles and motorcycles repair of household goods'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods_subgray_water(
                time()) / real_total_output_by_sector().loc['retail trade except of motor vehicles and motorcycles repair of household goods'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subhotels_and_restaurants_subblue_water(time()) /
            real_total_output_by_sector().loc['hotels and restaurants'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subhotels_and_restaurants_subgreen_water(time()) /
            real_total_output_by_sector().loc['hotels and restaurants'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subhotels_and_restaurants_subgray_water(time()) /
            real_total_output_by_sector().loc['hotels and restaurants'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subinland_transport_subblue_water(time()) /
            real_total_output_by_sector().loc['inland transport'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subinland_transport_subgreen_water(time()) /
            real_total_output_by_sector().loc['inland transport'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subinland_transport_subgray_water(time()) /
            real_total_output_by_sector().loc['inland transport'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subwater_transport_subblue_water(time()) /
            real_total_output_by_sector().loc['water transport'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subwater_transport_subgreen_water(time()) /
            real_total_output_by_sector().loc['water transport'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subwater_transport_subgray_water(time()) /
            real_total_output_by_sector().loc['water transport'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subair_transport_subblue_water(time()) /
            real_total_output_by_sector().loc['air transport'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subair_transport_subgreen_water(time()) /
            real_total_output_by_sector().loc['air transport'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subair_transport_subgray_water(time()) /
            real_total_output_by_sector().loc['air transport'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies_subblue_water(
                time()) / real_total_output_by_sector().loc['other supporting and auxiliary transport activities activities of travel agencies'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies_subgreen_water(
                time()) / real_total_output_by_sector().loc['other supporting and auxiliary transport activities activities of travel agencies'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies_subgray_water(
                time()) / real_total_output_by_sector().loc['other supporting and auxiliary transport activities activities of travel agencies'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subpost_and_telecommunications_subblue_water(time())
            / real_total_output_by_sector().loc['post and telecommunications'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subpost_and_telecommunications_subgreen_water(
                time()) / real_total_output_by_sector().loc['post and telecommunications'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subpost_and_telecommunications_subgray_water(time())
            / real_total_output_by_sector().loc['post and telecommunications'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subfinancial_intermediation_subblue_water(time()) /
            real_total_output_by_sector().loc['financial intermediation'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subfinancial_intermediation_subgreen_water(time()) /
            real_total_output_by_sector().loc['financial intermediation'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subfinancial_intermediation_subgray_water(time()) /
            real_total_output_by_sector().loc['financial intermediation'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subreal_estate_activities_subblue_water(time()) /
            real_total_output_by_sector().loc['real estate activities'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subreal_estate_activities_subgreen_water(time()) /
            real_total_output_by_sector().loc['real estate activities'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subreal_estate_activities_subgray_water(time()) /
            real_total_output_by_sector().loc['real estate activities'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subrenting_od_meq_and_other_business_activities_subblue_water(
                time()) / real_total_output_by_sector().loc['renting od meq and other business activities'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subrenting_od_meq_and_other_business_activities_subgreen_water(
                time()) / real_total_output_by_sector().loc['renting od meq and other business activities'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subrenting_od_meq_and_other_business_activities_subgray_water(
                time()) / real_total_output_by_sector().loc['renting od meq and other business activities'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subpublic_admin_and_defence_compulsory_social_security_subblue_water(
                time()) / real_total_output_by_sector().loc['public admin and defence compulsory social security'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subpublic_admin_and_defence_compulsory_social_security_subgreen_water(
                time()) / real_total_output_by_sector().loc['public admin and defence compulsory social security'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subpublic_admin_and_defence_compulsory_social_security_subgray_water(
                time()) / real_total_output_by_sector().loc['public admin and defence compulsory social security'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subeducation_subblue_water(time()) /
            real_total_output_by_sector().loc['education'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subeducation_subgreen_water(time()) /
            real_total_output_by_sector().loc['education'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subeducation_subgray_water(time()) /
            real_total_output_by_sector().loc['education'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subhealth_and_social_work_subblue_water(time()) /
            real_total_output_by_sector().loc['health and social work'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subhealth_and_social_work_subgreen_water(time()) /
            real_total_output_by_sector().loc['health and social work'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subhealth_and_social_work_subgray_water(time()) /
            real_total_output_by_sector().loc['health and social work'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subother_community_social_and_persona_services_subblue_water(
                time()) / real_total_output_by_sector().loc['other community social and persona services'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subother_community_social_and_persona_services_subgreen_water(
                time()) / real_total_output_by_sector().loc['other community social and persona services'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subother_community_social_and_persona_services_subgray_water(
                time()) / real_total_output_by_sector().loc['other community social and persona services'].values, 0)],[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subprivate_households_with_employed_persons_subblue_water(
                time()) / real_total_output_by_sector().loc['private households with employed persons'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subprivate_households_with_employed_persons_subgreen_water(
                time()) / real_total_output_by_sector().loc['private households with employed persons'].values, 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_sectors_subprivate_households_with_employed_persons_subgray_water(
                time()) / real_total_output_by_sector().loc['private households with employed persons'].values, 0)]],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons'], 'water color': ['blue water', 'green water', 'gray water']},
        dims=['sectors', 'water color'])



@cache('step')
def historic_water_by_type_intensities_for_households():
    """
    Real Name: b'historic water by type intensities for households'
    Original Eqn: b'if then else(Time<2009, historic water use by type for households subblue water(Time)/household demand total, 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_for_households_subblue_water(time()) / household_demand_total(), 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_for_households_subgreen_water(time()) / household_demand_total(), 0),
        if_then_else(
            time() < 2009,
            historic_water_use_by_type_for_households_subgray_water(time()) / household_demand_total(), 0)],
        coords={'water color': ['blue water', 'green water', 'gray water']},
        dims=['water color'])


@cache('step')
def total_co2_emissions_gtco2():
    """
    Real Name: b'total co2 emissions gtco2'
    Original Eqn: b'co2 fossil fuel emissions+co2x soil and luc emissions+bioe co2 emissions+co2 emissions peat-afforestation program 2020 gtco2'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return co2_fossil_fuel_emissions() + co2x_soil_and_luc_emissions() + bioe_co2_emissions(
    ) + co2_emissions_peat() - afforestation_program_2020_gtco2()


@cache('step')
def adapt_growth_res_for_heat_0():
    """
    Real Name: b'adapt growth res for heat 0'
    Original Eqn: b'if then else(Time<2014, past res growth for heat com x0[res heat], if then else(Time <2019, past res growth for heat com x0[res heat]+ (p res for heat 0[res heat]-past res growth for heat com x0[res heat])*(time dmnl(Time)-2014)/5, p res for heat 0[res heat]))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2014, past_res_growth_for_heat_com_x0(),
        if_then_else(
            time() < 2019,
            past_res_growth_for_heat_com_x0() +
            (p_res_for_heat_0() - past_res_growth_for_heat_com_x0()) *
            (time_dmnl(time()) - 2014) / 5, p_res_for_heat_0()))


@cache('step')
def adapt_growth_res_for_heat_com():
    """
    Real Name: b'adapt growth res for heat com'
    Original Eqn: b'if then else(Time<2014, past res growth for heat com[res heat], if then else(Time< start year p growth res heat, past res growth for heat com [res heat]+ (p res for heat[res heat]-past res growth for heat com[res heat])*(time dmnl(Time)-2014)/(start year p growth res heat-2014), p res for heat [res heat]))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2014, past_res_growth_for_heat_com(),
        if_then_else(
            time() < start_year_p_growth_res_heat(),
            past_res_growth_for_heat_com() + (p_res_for_heat() - past_res_growth_for_heat_com()) *
            (time_dmnl(time()) - 2014) / (start_year_p_growth_res_heat() - 2014),
            p_res_for_heat()))


@cache('step')
def adapt_growth_res_for_heat_nc():
    """
    Real Name: b'adapt growth res for heat nc'
    Original Eqn: b'if then else(Time<2014, past res growth for heat nc[res heat], if then else(Time<start year p growth res heat, past res growth for heat nc [res heat]+(p res for heat[res heat]-past res growth for heat nc[res heat])*(time dmnl(Time)-2014 )/(start year p growth res heat-2014), p res for heat[res heat] ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2014, past_res_growth_for_heat_nc(),
        if_then_else(
            time() < start_year_p_growth_res_heat(),
            past_res_growth_for_heat_nc() + (p_res_for_heat() - past_res_growth_for_heat_nc()) *
            (time_dmnl(time()) - 2014) / (start_year_p_growth_res_heat() - 2014),
            p_res_for_heat()))


@cache('step')
def adapt_growth_waste():
    """
    Real Name: b'adapt growth waste'
    Original Eqn: b'if then else(Time<2015, past waste growth, if then else(Time<2020, past waste growth +(waste change-past waste growth)*(time dmnl(Time)-2015)/5, waste change))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, past_waste_growth(),
        if_then_else(
            time() < 2020,
            past_waste_growth() + (waste_change() - past_waste_growth()) *
            (time_dmnl(time()) - 2015) / 5, waste_change()))


@cache('step')
def adapt_growth_biogas():
    """
    Real Name: b'adapt growth biogas'
    Original Eqn: b'if then else(Time<2015, past biogas growth, if then else(Time<2020, past biogas growth +(growth biogas-past biogas growth)*(time dmnl(Time)-2015)/5, growth biogas))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, past_biogas_growth(),
        if_then_else(
            time() < 2020,
            past_biogas_growth() + (growth_biogas() - past_biogas_growth()) *
            (time_dmnl(time()) - 2015) / 5, growth_biogas()))


@cache('step')
def adapt_growth_phs():
    """
    Real Name: b'adapt growth phs'
    Original Eqn: b'if then else(Time<2015, past phs capacity growth, if then else(Time<2020, past phs capacity growth+(p phs growth-past phs capacity growth )*(time dmnl(Time)-2015)/5, p phs growth)*(1+abundance storage))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, past_phs_capacity_growth(),
        if_then_else(
            time() < 2020,
            past_phs_capacity_growth() + (p_phs_growth() - past_phs_capacity_growth()) *
            (time_dmnl(time()) - 2015) / 5, p_phs_growth()) * (1 + abundance_storage()))


@cache('step')
def adapt_growth_res_elec():
    """
    Real Name: b'adapt growth res elec'
    Original Eqn: b'if then else(Time<2015, past res elec capacity growth[hydro], if then else(Time<start year p growth res elec, past res elec capacity growth[hydro]+(p res elec growth[hydro]-past res elec capacity growth[hydro])*(time dmnl(Time)-2015)/ (start year p growth res elec-2015), p res elec growth[hydro]))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        if_then_else(
            time() < 2015, past_res_elec_capacity_growth().loc['hydro'].values,
            if_then_else(
                time() < start_year_p_growth_res_elec(),
                past_res_elec_capacity_growth().loc['hydro'].values +
                (p_res_elec_growth().loc['hydro'].values - past_res_elec_capacity_growth().loc['hydro'].values) *
                (time_dmnl(time()) - 2015) / (start_year_p_growth_res_elec() - 2015),
                p_res_elec_growth().loc['hydro'].values)),
        if_then_else(
            time() < 2013, past_res_elec_capacity_growth().loc['geot elec'].values,
            if_then_else(
                time() < start_year_p_growth_res_elec(),
                past_res_elec_capacity_growth().loc['geot elec'].values +
                (p_res_elec_growth().loc['geot elec'].values - past_res_elec_capacity_growth().loc['geot elec'].values) *
                (time_dmnl(time()) - 2013) / (start_year_p_growth_res_elec() - 2013),
                p_res_elec_growth().loc['geot elec'].values)),
        if_then_else(
            time() < 2013, past_res_elec_capacity_growth().loc['solid bioe elec'].values,
            if_then_else(
                time() < start_year_p_growth_res_elec(),
                past_res_elec_capacity_growth().loc['solid bioe elec'].values +
                (p_res_elec_growth().loc['solid bioe elec'].values - past_res_elec_capacity_growth().loc['solid bioe elec'].values) *
                (time_dmnl(time()) - 2013) / (start_year_p_growth_res_elec() - 2013),
                p_res_elec_growth().loc['solid bioe elec'].values)),
        if_then_else(
            time() < 2014, past_res_elec_capacity_growth().loc['oceanic'].values,
            if_then_else(
                time() < start_year_p_growth_res_elec(),
                past_res_elec_capacity_growth().loc['oceanic'].values +
                (p_res_elec_growth().loc['oceanic'].values - past_res_elec_capacity_growth().loc['oceanic'].values) *
                (time_dmnl(time()) - 2014) / (start_year_p_growth_res_elec() - 2014),
                p_res_elec_growth().loc['oceanic'].values)),
        if_then_else(
            time() < 2015, past_res_elec_capacity_growth().loc['wind onshore'].values,
            if_then_else(
                time() < start_year_p_growth_res_elec(),
                past_res_elec_capacity_growth().loc['wind onshore'].values +
                (p_res_elec_growth().loc['wind onshore'].values - past_res_elec_capacity_growth().loc['wind onshore'].values) *
                (time_dmnl(time()) - 2015) / (start_year_p_growth_res_elec() - 2015),
                p_res_elec_growth().loc['wind onshore'].values)),
        if_then_else(
            time() < 2014, past_res_elec_capacity_growth().loc['wind offshore'].values,
            if_then_else(
                time() < start_year_p_growth_res_elec(),
                past_res_elec_capacity_growth().loc['wind offshore'].values +
                (p_res_elec_growth().loc['wind offshore'].values - past_res_elec_capacity_growth().loc['wind offshore'].values) *
                (time_dmnl(time()) - 2014) / (start_year_p_growth_res_elec() - 2014),
                p_res_elec_growth().loc['wind offshore'].values)),
        if_then_else(
            time() < 2014, past_res_elec_capacity_growth().loc['solar pv'].values,
            if_then_else(
                time() < start_year_p_growth_res_elec(),
                past_res_elec_capacity_growth().loc['solar pv'].values +
                (p_res_elec_growth().loc['solar pv'].values - past_res_elec_capacity_growth().loc['solar pv'].values) *
                (time_dmnl(time()) - 2014) / (start_year_p_growth_res_elec() - 2014),
                p_res_elec_growth().loc['solar pv'].values)),
        if_then_else(
            time() < 2014, past_res_elec_capacity_growth().loc['csp'].values,
            if_then_else(
                time() < start_year_p_growth_res_elec(),
                past_res_elec_capacity_growth().loc['csp'].values +
                (p_res_elec_growth().loc['csp'].values - past_res_elec_capacity_growth().loc['csp'].values) *
                (time_dmnl(time()) - 2014) / (start_year_p_growth_res_elec() - 2014),
                p_res_elec_growth().loc['csp'].values))],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('step')
def adapt_co2_emissions_unconv_gas():
    """
    Real Name: b'adapt co2 emissions unconv gas'
    Original Eqn: b'if then else(Time<2050, 0.01+(0.22-0.01)*(time dmnl(Time)-2000)/50, if then else (Time<2100, 0.22+(0.6-0.22)*(time dmnl(Time)-2050)/50, 0.6))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2050, 0.01 + (0.22 - 0.01) * (time_dmnl(time()) - 2000) / 50,
        if_then_else(time() < 2100,
                               0.22 + (0.6 - 0.22) * (time_dmnl(time()) - 2050) / 50, 0.6))


@cache('step')
def adapt_emissions_shale_oil():
    """
    Real Name: b'adapt emissions shale oil'
    Original Eqn: b'if then else(Time<2050, 0.001+(0.15-0.001)*(time dmnl(Time)-2000)/50, if then else (Time<2100, 0.15+(0.72-0.15)*(time dmnl(Time)-2050)/50, 0.72))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2050, 0.001 + (0.15 - 0.001) * (time_dmnl(time()) - 2000) / 50,
        if_then_else(time() < 2100,
                               0.15 + (0.72 - 0.15) * (time_dmnl(time()) - 2050) / 50, 0.72))


@cache('step')
def adapt_growth_biofuels_2gen():
    """
    Real Name: b'adapt growth biofuels 2gen'
    Original Eqn: b'if then else(Time<2015, 0, if then else(Time<2020, past biofuels 2gen+(p biofuels 2gen-past biofuels 2gen)*(time dmnl(Time)-2015)/5, p biofuels 2gen))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015, 0,
        if_then_else(
            time() < 2020,
            past_biofuels_2gen() + (p_biofuels_2gen() - past_biofuels_2gen()) *
            (time_dmnl(time()) - 2015) / 5, p_biofuels_2gen()))


@cache('step')
def annual_gdppc_growth_rate():
    """
    Real Name: b'annual gdppc growth rate'
    Original Eqn: b'if then else(select gdppc evolution input=0, gdppc annual growth ssp2(Time ), if then else(select gdppc evolution input=1, p timeseries gdppc growth rate(Time), if then else (Time<p customized year gdppc evolution, p timeseries gdppc growth rate(Time), p customized cte gdppc variation )))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        select_gdppc_evolution_input() == 0, gdppc_annual_growth_ssp2(time()),
        if_then_else(
            select_gdppc_evolution_input() == 1, p_timeseries_gdppc_growth_rate(time()),
            if_then_else(time() < p_customized_year_gdppc_evolution(),
                                   p_timeseries_gdppc_growth_rate(time()),
                                   p_customized_cte_gdppc_variation())))


@cache('step')
def variation_pop_ssp4():
    """
    Real Name: b'variation pop ssp4'
    Original Eqn: b'if then else(Time<2010, 0, -1+pop ssp4(Time+1)/pop ssp4(Time))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2010, 0, -1 + pop_ssp4(time() + 1) / pop_ssp4(time()))


@cache('step')
def variation_pop_ssp5():
    """
    Real Name: b'variation pop ssp5'
    Original Eqn: b'if then else(Time<2010, 0, -1+pop ssp5(Time+1)/pop ssp5(Time))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2010, 0, -1 + pop_ssp5(time() + 1) / pop_ssp5(time()))


@cache('step')
def variation_pop_ssp1():
    """
    Real Name: b'variation pop ssp1'
    Original Eqn: b'if then else(Time<2010, 0, -1+pop ssp1(Time+1)/pop ssp1(Time))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2010, 0, -1 + pop_ssp1(time() + 1) / pop_ssp1(time()))


@cache('step')
def variation_pop_ssp2():
    """
    Real Name: b'variation pop ssp2'
    Original Eqn: b'if then else(Time<2010, 0, -1+pop ssp2(Time+1)/pop ssp2(Time))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2010, 0, -1 + pop_ssp2(time() + 1) / pop_ssp2(time()))


@cache('step')
def variation_pop_ssp3():
    """
    Real Name: b'variation pop ssp3'
    Original Eqn: b'if then else(Time<2010, 0, -1+pop ssp3(Time+1)/pop ssp3(Time))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2010, 0, -1 + pop_ssp3(time() + 1) / pop_ssp3(time()))


@cache('step')
def annual_population_growth_rate():
    """
    Real Name: b'annual population growth rate'
    Original Eqn: b'if then else(select population evolution input=0, variation pop ssps, if then else(select population evolution input=1, p timeseries pop growth rate(Time), if then else (Time<p customized year pop evolution, p timeseries pop growth rate(Time), p customized cte pop variation )))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        select_population_evolution_input() == 0, variation_pop_ssps(),
        if_then_else(
            select_population_evolution_input() == 1, p_timeseries_pop_growth_rate(time()),
            if_then_else(time() < p_customized_year_pop_evolution(),
                                   p_timeseries_pop_growth_rate(time()),
                                   p_customized_cte_pop_variation())))


@cache('step')
def variation_pop_ssps():
    """
    Real Name: b'variation pop ssps'
    Original Eqn: b'if then else(select pop ssps=1, variation pop ssp1, if then else(select pop ssps=2, variation pop ssp2, if then else(select pop ssps=3, variation pop ssp3, if then else(select pop ssps=4, variation pop ssp4, variation pop ssp5))) )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        select_pop_ssps() == 1, variation_pop_ssp1(),
        if_then_else(
            select_pop_ssps() == 2, variation_pop_ssp2(),
            if_then_else(
                select_pop_ssps() == 3, variation_pop_ssp3(),
                if_then_else(select_pop_ssps() == 4, variation_pop_ssp4(),
                                       variation_pop_ssp5()))))


@cache('step')
def desired_variation_gdppc():
    """
    Real Name: b'desired variation gdppc'
    Original Eqn: b'if then else(Time<2015, variation historic gdppc, desired gdppc*annual gdppc growth rate)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2015, variation_historic_gdppc(),
                                  desired_gdppc() * annual_gdppc_growth_rate())


@cache('step')
def pop_variation():
    """
    Real Name: b'pop variation'
    Original Eqn: b'if then else(Time<2014, variation historic pop, population*annual population growth rate)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2014, variation_historic_pop(),
                                  population() * annual_population_growth_rate())


@cache('step')
def variation_historic_gdppc():
    """
    Real Name: b'variation historic gdppc'
    Original Eqn: b'if then else(Time<2015, historic gdppc(Time+1)-historic gdppc(Time), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2015,
                                  historic_gdppc(time() + 1) - historic_gdppc(time()), 0)


@cache('step')
def growth_labour_share():
    """
    Real Name: b'growth labour share'
    Original Eqn: b'if then else(Time>2014,if then else(Time>2050,0,labour share growth*labor share cte quest ),historic labour share(Time))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() > 2014,
        if_then_else(time() > 2050, 0,
                               labour_share_growth() * labor_share_cte_quest()),
        historic_labour_share(time()))


@cache('step')
def historic_new_required_capacity_phs():
    """
    Real Name: b'historic new required capacity phs'
    Original Eqn: b'table hist capacity phs(Time+total time plan plus constr res elec[hydro]+1)-table hist capacity phs(Time+total time plan plus constr res elec[hydro])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return table_hist_capacity_phs(time() + total_time_plan_plus_constr_res_elec().loc['hydro'].values +
                                   1) - table_hist_capacity_phs(
                                       time() + total_time_plan_plus_constr_res_elec().loc['hydro'].values)


@cache('run')
def initial_required_capacity_phs():
    """
    Real Name: b'initial required capacity phs'
    Original Eqn: b'table hist capacity phs(1996)-table hist capacity phs(1995)'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return table_hist_capacity_phs(1996) - table_hist_capacity_phs(1995)


@cache('step')
def fed_coal_for_heat_nc():
    """
    Real Name: b'fed coal for heat nc'
    Original Eqn: b'required fed by fuel before heat correction[solids]*(share feh over fed by final fuel[solids]-share feh over fed solid bioe)*efficiency coal for heat plants(Time)/(1+share heat distribution losses)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_fed_by_fuel_before_heat_correction().loc['solids'].values * (
        share_feh_over_fed_by_final_fuel().loc['solids'].values - share_feh_over_fed_solid_bioe()
    ) * efficiency_coal_for_heat_plants(time()) / (1 + share_heat_distribution_losses())


@cache('step')
def historical_variation_minerals_extraction_rest():
    """
    Real Name: b'historical variation minerals extraction rest'
    Original Eqn: b'historical extraction minerals rest subadhesive(Time+1)-historical extraction minerals rest subadhesive(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        historical_extraction_minerals_rest_subadhesive(time() + 1) -
        historical_extraction_minerals_rest_subadhesive(time()),
        historical_extraction_minerals_rest_subaluminium(time() + 1) -
        historical_extraction_minerals_rest_subaluminium(time()),
        historical_extraction_minerals_rest_subaluminium_mirrors(time() + 1) -
        historical_extraction_minerals_rest_subaluminium_mirrors(time()),
        historical_extraction_minerals_rest_subcadmium(time() + 1) -
        historical_extraction_minerals_rest_subcadmium(time()),
        historical_extraction_minerals_rest_subcarbon_fiber(time() + 1) -
        historical_extraction_minerals_rest_subcarbon_fiber(time()),
        historical_extraction_minerals_rest_subcement(time() + 1) -
        historical_extraction_minerals_rest_subcement(time()),
        historical_extraction_minerals_rest_subchromium(time() + 1) -
        historical_extraction_minerals_rest_subchromium(time()),
        historical_extraction_minerals_rest_subcopper(time() + 1) -
        historical_extraction_minerals_rest_subcopper(time()),
        historical_extraction_minerals_rest_subdiesel(time() + 1) -
        historical_extraction_minerals_rest_subdiesel(time()),
        historical_extraction_minerals_rest_subdy(time() + 1) -
        historical_extraction_minerals_rest_subdy(time()),
        historical_extraction_minerals_rest_subelectric_div_electronic_components(time() + 1) -
        historical_extraction_minerals_rest_subelectric_div_electronic_components(time()),
        historical_extraction_minerals_rest_subevacuation_lines(time() + 1) -
        historical_extraction_minerals_rest_subevacuation_lines(time()),
        historical_extraction_minerals_rest_subfiberglass(time() + 1) -
        historical_extraction_minerals_rest_subfiberglass(time()),
        historical_extraction_minerals_rest_subfoam_glass(time() + 1) -
        historical_extraction_minerals_rest_subfoam_glass(time()),
        historical_extraction_minerals_rest_subgalium(time() + 1) -
        historical_extraction_minerals_rest_subgalium(time()),
        historical_extraction_minerals_rest_subglass(time() + 1) -
        historical_extraction_minerals_rest_subglass(time()),
        historical_extraction_minerals_rest_subglass_reinforcing_plastic(time() + 1) -
        historical_extraction_minerals_rest_subglass_reinforcing_plastic(time()),
        historical_extraction_minerals_rest_subgravel(time() + 1) -
        historical_extraction_minerals_rest_subgravel(time()),
        historical_extraction_minerals_rest_subindium(time() + 1) -
        historical_extraction_minerals_rest_subindium(time()),
        historical_extraction_minerals_rest_subiron(time() + 1) -
        historical_extraction_minerals_rest_subiron(time()),
        historical_extraction_minerals_rest_subkno3_mined(time() + 1) -
        historical_extraction_minerals_rest_subkno3_mined(time()),
        historical_extraction_minerals_rest_subasphalt(time() + 1) -
        historical_extraction_minerals_rest_subasphalt(time()),
        historical_extraction_minerals_rest_sublime(time() + 1) -
        historical_extraction_minerals_rest_sublime(time()),
        historical_extraction_minerals_rest_sublimestone(time() + 1) -
        historical_extraction_minerals_rest_sublimestone(time()),
        historical_extraction_minerals_rest_sublithium(time() + 1) -
        historical_extraction_minerals_rest_sublithium(time()),
        historical_extraction_minerals_rest_sublubricant(time() + 1) -
        historical_extraction_minerals_rest_sublubricant(time()),
        historical_extraction_minerals_rest_submagnesium(time() + 1) -
        historical_extraction_minerals_rest_submagnesium(time()),
        historical_extraction_minerals_rest_submanganese(time() + 1) -
        historical_extraction_minerals_rest_submanganese(time()),
        historical_extraction_minerals_rest_subheavy_equipment(time() + 1) -
        historical_extraction_minerals_rest_subheavy_equipment(time()),
        historical_extraction_minerals_rest_subconcrete(time() + 1) -
        historical_extraction_minerals_rest_subconcrete(time()),
        historical_extraction_minerals_rest_submolybdenum(time() + 1) -
        historical_extraction_minerals_rest_submolybdenum(time()),
        historical_extraction_minerals_rest_subnano3_mined(time() + 1) -
        historical_extraction_minerals_rest_subnano3_mined(time()),
        historical_extraction_minerals_rest_subnano3_synthetic(time() + 1) -
        historical_extraction_minerals_rest_subnano3_synthetic(time()),
        historical_extraction_minerals_rest_subneodymium(time() + 1) -
        historical_extraction_minerals_rest_subneodymium(time()),
        historical_extraction_minerals_rest_subnickel(time() + 1) -
        historical_extraction_minerals_rest_subnickel(time()),
        historical_extraction_minerals_rest_subover_grid_15_percentx(time() + 1) -
        historical_extraction_minerals_rest_subover_grid_15_percentx(time()),
        historical_extraction_minerals_rest_subover_grid_5_percentx(time() + 1) -
        historical_extraction_minerals_rest_subover_grid_5_percentx(time()),
        historical_extraction_minerals_rest_subpaint(time() + 1) -
        historical_extraction_minerals_rest_subpaint(time()),
        historical_extraction_minerals_rest_sublead(time() + 1) -
        historical_extraction_minerals_rest_sublead(time()),
        historical_extraction_minerals_rest_subplastics(time() + 1) -
        historical_extraction_minerals_rest_subplastics(time()),
        historical_extraction_minerals_rest_subpolypropylene(time() + 1) -
        historical_extraction_minerals_rest_subpolypropylene(time()),
        historical_extraction_minerals_rest_subrock(time() + 1) -
        historical_extraction_minerals_rest_subrock(time()),
        historical_extraction_minerals_rest_subrock_wool(time() + 1) -
        historical_extraction_minerals_rest_subrock_wool(time()),
        historical_extraction_minerals_rest_subsand(time() + 1) -
        historical_extraction_minerals_rest_subsand(time()),
        historical_extraction_minerals_rest_subsilicon_sand(time() + 1) -
        historical_extraction_minerals_rest_subsilicon_sand(time()),
        historical_extraction_minerals_rest_subsilicon_wafer_modules(time() + 1) -
        historical_extraction_minerals_rest_subsilicon_wafer_modules(time()),
        historical_extraction_minerals_rest_subsilver(time() + 1) -
        historical_extraction_minerals_rest_subsilver(time()),
        historical_extraction_minerals_rest_subsite_preparation(time() + 1) -
        historical_extraction_minerals_rest_subsite_preparation(time()),
        historical_extraction_minerals_rest_subtin(time() + 1) -
        historical_extraction_minerals_rest_subtin(time()),
        historical_extraction_minerals_rest_subsoda_ash(time() + 1) -
        historical_extraction_minerals_rest_subsoda_ash(time()),
        historical_extraction_minerals_rest_substeel(time() + 1) -
        historical_extraction_minerals_rest_substeel(time()),
        historical_extraction_minerals_rest_subsynthetic_oil(time() + 1) -
        historical_extraction_minerals_rest_subsynthetic_oil(time()),
        historical_extraction_minerals_rest_subtellurium(time() + 1) -
        historical_extraction_minerals_rest_subtellurium(time()),
        historical_extraction_minerals_rest_subtitanium(time() + 1) -
        historical_extraction_minerals_rest_subtitanium(time()),
        historical_extraction_minerals_rest_subtitanium_dioxide(time() + 1) -
        historical_extraction_minerals_rest_subtitanium_dioxide(time()),
        historical_extraction_minerals_rest_subvanadium(time() + 1) -
        historical_extraction_minerals_rest_subvanadium(time()),
        historical_extraction_minerals_rest_subwires(time() + 1) -
        historical_extraction_minerals_rest_subwires(time()),
        historical_extraction_minerals_rest_subzinc(time() + 1) -
        historical_extraction_minerals_rest_subzinc(time())],
        coords={'materials': ['adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement', 'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components', 'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass', 'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt', 'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese', 'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic', 'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx', 'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand', 'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin', 'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide', 'vanadium', 'wires', 'zinc']},
        dims=['materials'])


@cache('step')
def max_unconv_gas_growth_extraction():
    """
    Real Name: b'max unconv gas growth extraction'
    Original Eqn: b'max(0, 1+if then else(selection constraint extraction unconv gas=1, (p constraint growth extraction unconv gas)*time step*scarcity conv gas stock,(user defined extraction growth unconv gas(Time))*time step))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0, 1 +
        if_then_else(selection_constraint_extraction_unconv_gas() == 1,
                               (p_constraint_growth_extraction_unconv_gas()) * time_step() *
                               scarcity_conv_gas_stock(),
                               (user_defined_extraction_growth_unconv_gas(time())) * time_step()))


@cache('step')
def new_res_capacity_for_heat_nc_tw():
    """
    Real Name: b'new res capacity for heat nc tw'
    Original Eqn: b'if then else(Time<2013, historic res capacity for heat nc subsolar heat(Time+1)-historic res capacity for heat nc subsolar heat(Time), adapt growth res for heat nc[solar heat]*installed capacity res heat nc tw[solar heat]*remaining potential constraint on new res heat capacity[solar heat])*abundance res heat nc2'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        if_then_else(
            time() < 2013,
            historic_res_capacity_for_heat_nc_subsolar_heat(time() + 1) -
            historic_res_capacity_for_heat_nc_subsolar_heat(time()),
            adapt_growth_res_for_heat_nc().loc['solar heat'].values * installed_capacity_res_heat_nc_tw().loc['solar heat'].values *
            remaining_potential_constraint_on_new_res_heat_capacity().loc['solar heat'].values) * abundance_res_heat_nc2(),
        if_then_else(
            time() < 2013,
            historic_res_capacity_for_heat_nc_subgeot_heat(time() + 1) -
            historic_res_capacity_for_heat_nc_subgeot_heat(time()),
            adapt_growth_res_for_heat_nc().loc['geot heat'].values * installed_capacity_res_heat_nc_tw().loc['geot heat'].values *
            remaining_potential_constraint_on_new_res_heat_capacity().loc['geot heat'].values) * abundance_res_heat_nc2(),
        if_then_else(
            time() < 2013,
            historic_res_capacity_for_heat_nc_subsolid_bioe_heat(time() + 1) -
            historic_res_capacity_for_heat_nc_subsolid_bioe_heat(time()),
            adapt_growth_res_for_heat_nc().loc['solid bioe heat'].values * installed_capacity_res_heat_nc_tw().loc['solid bioe heat'].values *
            remaining_potential_constraint_on_new_res_heat_capacity().loc['solid bioe heat'].values) * abundance_res_heat_nc2()],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('step')
def annual_variation_non_energy_use():
    """
    Real Name: b'annual variation non energy use'
    Original Eqn: b'if then else(Time>2009, variation non energy use[electricity], historic non energy use subelectricity(Time+1)-historic non energy use subelectricity(Time))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        if_then_else(
            time() > 2009, variation_non_energy_use().loc['electricity'].values,
            historic_non_energy_use_subelectricity(time() + 1) -
            historic_non_energy_use_subelectricity(time())),
        if_then_else(
            time() > 2009, variation_non_energy_use().loc['heat'].values,
            historic_non_energy_use_subheat(time() + 1) - historic_non_energy_use_subheat(time())),
        if_then_else(
            time() > 2009, variation_non_energy_use().loc['liquids'].values,
            historic_non_energy_use_subliquids(time() + 1) -
            historic_non_energy_use_subliquids(time())),
        if_then_else(
            time() > 2009, variation_non_energy_use().loc['gases'].values,
            historic_non_energy_use_subgases(time() + 1) -
            historic_non_energy_use_subgases(time())),
        if_then_else(
            time() > 2009, variation_non_energy_use().loc['solids'].values,
            historic_non_energy_use_subsolids(time() + 1) -
            historic_non_energy_use_subsolids(time()))],
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def pes_solids_bioe_ej():
    """
    Real Name: b'pes solids bioe ej'
    Original Eqn: b'losses in charcoal plants ej(Time)+pe bioe for elec generation ej+pe traditional biomass ej delayed 1yr +pes res for heat com by techn[solid bioe heat]+pes res for heat nc by techn[solid bioe heat]'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return losses_in_charcoal_plants_ej(
        time()) + pe_bioe_for_elec_generation_ej() + pe_traditional_biomass_ej_delayed_1yr(
        ) + pes_res_for_heat_com_by_techn().loc['solid bioe heat'].values + pes_res_for_heat_nc_by_techn().loc['solid bioe heat'].values


@cache('step')
def real_fe_consumption_solids_ej():
    """
    Real Name: b'real fe consumption solids ej'
    Original Eqn: b'(extraction coal ej+(pe traditional biomass ej delayed 1yr+pes waste for tfc+pes peat ej+losses in charcoal plants ej(Time))-ped coal for ctl ej-other solids required)*share solids for final energy'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (extraction_coal_ej() + (pe_traditional_biomass_ej_delayed_1yr() + pes_waste_for_tfc() +
                                    pes_peat_ej() + losses_in_charcoal_plants_ej(time())) -
            ped_coal_for_ctl_ej() - other_solids_required()) * share_solids_for_final_energy()


@cache('step')
def variation_demand_flow_fd():
    """
    Real Name: b'variation demand flow fd'
    Original Eqn: b'if then else(Time<2009 ,historic variation demand[sectors],(gross fixed capital formation[sectors]* (1-((1-share consum goverments and inventories next step[sectors])/(1-share consum goverment and inventories[sectors]))) +household demand[sectors]*(1-((1-share consum goverments and inventories next step[sectors])/(1-share consum goverment and inventories [sectors])))+variation gfcf[sectors]+variation household demand[sectors])/(1-share consum goverments and inventories next step [sectors]))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2009, historic_variation_demand(),
        (gross_fixed_capital_formation() *
         (1 - ((1 - share_consum_goverments_and_inventories_next_step()) /
               (1 - share_consum_goverment_and_inventories()))) + household_demand() *
         (1 - ((1 - share_consum_goverments_and_inventories_next_step()) /
               (1 - share_consum_goverment_and_inventories()))) + variation_gfcf() +
         variation_household_demand()) / (1 - share_consum_goverments_and_inventories_next_step()))


@cache('step')
def historic_variation_demand():
    """
    Real Name: b'historic variation demand'
    Original Eqn: b'historic demand by sector subagriculture hunting forestry and fishing(Time+1)-historic demand by sector subagriculture hunting forestry and fishing(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        historic_demand_by_sector_subagriculture_hunting_forestry_and_fishing(time() + 1) -
        historic_demand_by_sector_subagriculture_hunting_forestry_and_fishing(time()),
        historic_demand_by_sector_submining_and_quarrying(time() + 1) -
        historic_demand_by_sector_submining_and_quarrying(time()),
        historic_demand_by_sector_subfood_beverages_and_tobacco(time() + 1) -
        historic_demand_by_sector_subfood_beverages_and_tobacco(time()),
        historic_demand_by_sector_subtextiles_and_textile_products(time() + 1) -
        historic_demand_by_sector_subtextiles_and_textile_products(time()),
        historic_demand_by_sector_subleather_leather_and_footwear(time() + 1) -
        historic_demand_by_sector_subleather_leather_and_footwear(time()),
        historic_demand_by_sector_subwood_and_products_of_wood_and_cork(time() + 1) -
        historic_demand_by_sector_subwood_and_products_of_wood_and_cork(time()),
        historic_demand_by_sector_subpulp_paper_printing_and_publishing(time() + 1) -
        historic_demand_by_sector_subpulp_paper_printing_and_publishing(time()),
        historic_demand_by_sector_subcoke_refined_petroleum_and_nuclear_fuel(time() + 1) -
        historic_demand_by_sector_subcoke_refined_petroleum_and_nuclear_fuel(time()),
        historic_demand_by_sector_subchemicals_and_chemical_products(time() + 1) -
        historic_demand_by_sector_subchemicals_and_chemical_products(time()),
        historic_demand_by_sector_subrubber_and_plastics(time() + 1) -
        historic_demand_by_sector_subrubber_and_plastics(time()),
        historic_demand_by_sector_subother_non_metalic_mineral(time() + 1) -
        historic_demand_by_sector_subother_non_metalic_mineral(time()),
        historic_demand_by_sector_subbasic_metals_and_fabricated_metal(time() + 1) -
        historic_demand_by_sector_subbasic_metals_and_fabricated_metal(time()),
        historic_demand_by_sector_submachinery_nec(time() + 1) -
        historic_demand_by_sector_submachinery_nec(time()),
        historic_demand_by_sector_subelectrical_and_optical_equipment(time() + 1) -
        historic_demand_by_sector_subelectrical_and_optical_equipment(time()),
        historic_demand_by_sector_subtransport_equipment(time() + 1) -
        historic_demand_by_sector_subtransport_equipment(time()),
        historic_demand_by_sector_submanufacturing_nec_recycling(time() + 1) -
        historic_demand_by_sector_submanufacturing_nec_recycling(time()),
        historic_demand_by_sector_subelectricity_gas_and_water_supply(time() + 1) -
        historic_demand_by_sector_subelectricity_gas_and_water_supply(time()),
        historic_demand_by_sector_subconstruction(time() + 1) -
        historic_demand_by_sector_subconstruction(time()),
        historic_demand_by_sector_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            time() + 1) -
        historic_demand_by_sector_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            time()),
        historic_demand_by_sector_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            time() + 1) -
        historic_demand_by_sector_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            time()),
        historic_demand_by_sector_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            time() + 1) -
        historic_demand_by_sector_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            time()),
        historic_demand_by_sector_subhotels_and_restaurants(time() + 1) -
        historic_demand_by_sector_subhotels_and_restaurants(time()),
        historic_demand_by_sector_subinland_transport(time() + 1) -
        historic_demand_by_sector_subinland_transport(time()),
        historic_demand_by_sector_subwater_transport(time() + 1) -
        historic_demand_by_sector_subwater_transport(time()),
        historic_demand_by_sector_subair_transport(time() + 1) -
        historic_demand_by_sector_subair_transport(time()),
        historic_demand_by_sector_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            time() + 1) -
        historic_demand_by_sector_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            time()),
        historic_demand_by_sector_subpost_and_telecommunications(time() + 1) -
        historic_demand_by_sector_subpost_and_telecommunications(time()),
        historic_demand_by_sector_subfinancial_intermediation(time() + 1) -
        historic_demand_by_sector_subfinancial_intermediation(time()),
        historic_demand_by_sector_subreal_estate_activities(time() + 1) -
        historic_demand_by_sector_subreal_estate_activities(time()),
        historic_demand_by_sector_subrenting_od_meq_and_other_business_activities(time() + 1) -
        historic_demand_by_sector_subrenting_od_meq_and_other_business_activities(time()),
        historic_demand_by_sector_subpublic_admin_and_defence_compulsory_social_security(time() +
                                                                                         1) -
        historic_demand_by_sector_subpublic_admin_and_defence_compulsory_social_security(time()),
        historic_demand_by_sector_subeducation(time() + 1) -
        historic_demand_by_sector_subeducation(time()),
        historic_demand_by_sector_subhealth_and_social_work(time() + 1) -
        historic_demand_by_sector_subhealth_and_social_work(time()),
        historic_demand_by_sector_subother_community_social_and_persona_services(time() + 1) -
        historic_demand_by_sector_subother_community_social_and_persona_services(time()),
        historic_demand_by_sector_subprivate_households_with_employed_persons(time() + 1) -
        historic_demand_by_sector_subprivate_households_with_employed_persons(time())],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons']},
        dims=['sectors'])


@cache('step')
def fed_natx_gas_for_heat_nc():
    """
    Real Name: b'fed natx gas for heat nc'
    Original Eqn: b'required fed by fuel before heat correction[gases]*share feh over fed by final fuel[gases]*efficiency gases for heat plants(Time)/(1+share heat distribution losses )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_fed_by_fuel_before_heat_correction().loc['gases'].values * share_feh_over_fed_by_final_fuel().loc['gases'].values * efficiency_gases_for_heat_plants(time()) / (1 + share_heat_distribution_losses())


@cache('step')
def fed_oil_for_heat_nc():
    """
    Real Name: b'fed oil for heat nc'
    Original Eqn: b'required fed by fuel before heat correction[liquids]*share feh over fed by final fuel[liquids]*efficiency liquids for heat plants(Time)/(1+share heat distribution losses )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return required_fed_by_fuel_before_heat_correction().loc['liquids'].values * share_feh_over_fed_by_final_fuel().loc['liquids'].values * efficiency_liquids_for_heat_plants(time()) / (1 + share_heat_distribution_losses())


@cache('step')
def pes_solids():
    """
    Real Name: b'pes solids'
    Original Eqn: b'extraction coal ej+pe traditional biomass ej delayed 1yr+pes peat ej +pes waste for tfc+losses in charcoal plants ej(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return extraction_coal_ej() + pe_traditional_biomass_ej_delayed_1yr() + pes_peat_ej(
    ) + pes_waste_for_tfc() + losses_in_charcoal_plants_ej(time())


@cache('step')
def ped_gas_heat_nc():
    """
    Real Name: b'ped gas heat nc'
    Original Eqn: b'total fed nre heat nc*share fed gas vs nre heat nc/efficiency gases for heat plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_fed_nre_heat_nc() * share_fed_gas_vs_nre_heat_nc() / efficiency_gases_for_heat_plants(time())


@cache('step')
def ped_coal_heat_nc():
    """
    Real Name: b'ped coal heat nc'
    Original Eqn: b'total fed nre heat nc*share fed coal vs nre heat nc/efficiency coal for heat plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_fed_nre_heat_nc() * share_fed_coal_vs_nre_heat_nc(
    ) / efficiency_coal_for_heat_plants(time())


@cache('step')
def ped_liquids_heat_nc():
    """
    Real Name: b'ped liquids heat nc'
    Original Eqn: b'total fed nre heat nc*share fed liquids vs nre heat nc/efficiency liquids for heat plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return total_fed_nre_heat_nc() * share_fed_liquids_vs_nre_heat_nc(
    ) / efficiency_liquids_for_heat_plants(time())


@cache('step')
def ped_coal_ej():
    """
    Real Name: b'ped coal ej'
    Original Eqn: b'max(0, ped solids-(pe traditional biomass ej delayed 1yr+pes peat ej +pes waste for tfc+losses in charcoal plants ej(Time)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        ped_solids() - (pe_traditional_biomass_ej_delayed_1yr() + pes_peat_ej() +
                        pes_waste_for_tfc() + losses_in_charcoal_plants_ej(time())))


@cache('step')
def fes_heat_from_coal():
    """
    Real Name: b'fes heat from coal'
    Original Eqn: b'(pes coal for heat com plants+pes coal for heat nc plants) *efficiency coal for heat plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (pes_coal_for_heat_com_plants() +
            pes_coal_for_heat_nc_plants()) * efficiency_coal_for_heat_plants(time())


@cache('step')
def fes_heat_from_natx_gas():
    """
    Real Name: b'fes heat from natx gas'
    Original Eqn: b'(pes natx gas for heat com plants+pes natx gas for heat nc plants)*efficiency gases for heat plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (pes_natx_gas_for_heat_com_plants() +
            pes_natx_gas_for_heat_nc_plants()) * efficiency_gases_for_heat_plants(time())


@cache('step')
def fes_heat_from_oil():
    """
    Real Name: b'fes heat from oil'
    Original Eqn: b'(pes oil for heat com plants+pes oil for heat nc plants)*efficiency liquids for heat plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (pes_oil_for_heat_com_plants() +
            pes_oil_for_heat_nc_plants()) * efficiency_liquids_for_heat_plants(time())


@cache('step')
def new_res_capacity_for_heat_com_tw():
    """
    Real Name: b'new res capacity for heat com tw'
    Original Eqn: b'if then else(Time<2013, historic res capacity for heat com subsolar heat(Time+1)-historic res capacity for heat com subsolar heat(Time), adapt growth res for heat com[solar heat]*installed capacity res heat com tw[solar heat]*remaining potential constraint on new res heat capacity [solar heat])*abundance res heat com2'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        if_then_else(
            time() < 2013,
            historic_res_capacity_for_heat_com_subsolar_heat(time() + 1) -
            historic_res_capacity_for_heat_com_subsolar_heat(time()),
            adapt_growth_res_for_heat_com().loc['solar heat'].values * installed_capacity_res_heat_com_tw().loc['solar heat'].values *
            remaining_potential_constraint_on_new_res_heat_capacity().loc['solar heat'].values) * abundance_res_heat_com2(),
        if_then_else(
            time() < 2013,
            historic_res_capacity_for_heat_com_subgeot_heat(time() + 1) -
            historic_res_capacity_for_heat_com_subgeot_heat(time()),
            adapt_growth_res_for_heat_com().loc['geot heat'].values * installed_capacity_res_heat_com_tw().loc['geot heat'].values *
            remaining_potential_constraint_on_new_res_heat_capacity().loc['geot heat'].values) * abundance_res_heat_com2(),
        if_then_else(
            time() < 2013,
            historic_res_capacity_for_heat_com_subsolid_bioe_heat(time() + 1) -
            historic_res_capacity_for_heat_com_subsolid_bioe_heat(time()),
            adapt_growth_res_for_heat_com().loc['solid bioe heat'].values * installed_capacity_res_heat_com_tw().loc['solid bioe heat'].values *
            remaining_potential_constraint_on_new_res_heat_capacity().loc['solid bioe heat'].values) * abundance_res_heat_com2()],
        coords={'res heat': ['solar heat', 'geot heat', 'solid bioe heat']},
        dims=['res heat'])


@cache('step')
def variation_historic_demand():
    """
    Real Name: b'variation historic demand'
    Original Eqn: b'historic hd subagriculture hunting forestry and fishing(Time+1)-historic hd subagriculture hunting forestry and fishing(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        historic_hd_subagriculture_hunting_forestry_and_fishing(time() + 1) -
        historic_hd_subagriculture_hunting_forestry_and_fishing(time()),
        historic_hd_submining_and_quarrying(time() + 1) -
        historic_hd_submining_and_quarrying(time()),
        historic_hd_subfood_beverages_and_tobacco(time() + 1) -
        historic_hd_subfood_beverages_and_tobacco(time()),
        historic_hd_subtextiles_and_textile_products(time() + 1) -
        historic_hd_subtextiles_and_textile_products(time()),
        historic_hd_subleather_leather_and_footwear(time() + 1) -
        historic_hd_subleather_leather_and_footwear(time()),
        historic_hd_subwood_and_products_of_wood_and_cork(time() + 1) -
        historic_hd_subwood_and_products_of_wood_and_cork(time()),
        historic_hd_subpulp_paper_printing_and_publishing(time() + 1) -
        historic_hd_subpulp_paper_printing_and_publishing(time()),
        historic_hd_subcoke_refined_petroleum_and_nuclear_fuel(time() + 1) -
        historic_hd_subcoke_refined_petroleum_and_nuclear_fuel(time()),
        historic_hd_subchemicals_and_chemical_products(time() + 1) -
        historic_hd_subchemicals_and_chemical_products(time()),
        historic_hd_subrubber_and_plastics(time() + 1) -
        historic_hd_subrubber_and_plastics(time()),
        historic_hd_subother_non_metalic_mineral(time() + 1) -
        historic_hd_subother_non_metalic_mineral(time()),
        historic_hd_subbasic_metals_and_fabricated_metal(time() + 1) -
        historic_hd_subbasic_metals_and_fabricated_metal(time()),
        historic_hd_submachinery_nec(time() + 1) - historic_hd_submachinery_nec(time()),
        historic_hd_subelectrical_and_optical_equipment(time() + 1) -
        historic_hd_subelectrical_and_optical_equipment(time()),
        historic_hd_subtransport_equipment(time() + 1) -
        historic_hd_subtransport_equipment(time()),
        historic_hd_submanufacturing_nec_recycling(time() + 1) -
        historic_hd_submanufacturing_nec_recycling(time()),
        historic_hd_subelectricity_gas_and_water_supply(time() + 1) -
        historic_hd_subelectricity_gas_and_water_supply(time()),
        historic_hd_subconstruction(time() + 1) - historic_hd_subconstruction(time()),
        historic_hd_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            time() + 1) -
        historic_hd_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            time()),
        historic_hd_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            time() + 1) -
        historic_hd_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            time()),
        historic_hd_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            time() + 1) -
        historic_hd_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            time()),
        historic_hd_subhotels_and_restaurants(time() + 1) -
        historic_hd_subhotels_and_restaurants(time()),
        historic_hd_subinland_transport(time() + 1) - historic_hd_subinland_transport(time()),
        historic_hd_subwater_transport(time() + 1) - historic_hd_subwater_transport(time()),
        historic_hd_subair_transport(time() + 1) - historic_hd_subair_transport(time()),
        historic_hd_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            time() + 1) -
        historic_hd_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            time()),
        historic_hd_subpost_and_telecommunications(time() + 1) -
        historic_hd_subpost_and_telecommunications(time()),
        historic_hd_subfinancial_intermediation(time() + 1) -
        historic_hd_subfinancial_intermediation(time()),
        historic_hd_subreal_estate_activities(time() + 1) -
        historic_hd_subreal_estate_activities(time()),
        historic_hd_subrenting_od_meq_and_other_business_activities(time() + 1) -
        historic_hd_subrenting_od_meq_and_other_business_activities(time()),
        historic_hd_subpublic_admin_and_defence_compulsory_social_security(time() + 1) -
        historic_hd_subpublic_admin_and_defence_compulsory_social_security(time()),
        historic_hd_subeducation(time() + 1) - historic_hd_subeducation(time()),
        historic_hd_subhealth_and_social_work(time() + 1) -
        historic_hd_subhealth_and_social_work(time()),
        historic_hd_subother_community_social_and_persona_services(time() + 1) -
        historic_hd_subother_community_social_and_persona_services(time()),
        historic_hd_subprivate_households_with_employed_persons(time() + 1) -
        historic_hd_subprivate_households_with_employed_persons(time())],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons']},
        dims=['sectors'])


@cache('step')
def variation_gfcf():
    """
    Real Name: b'variation gfcf'
    Original Eqn: b'if then else(Time<2009, variation historic gfcf[sectors],exp(beta 0 cap)*exp (beta 1 cap[sectors])*((cc sectoral next step[sectors])^beta 2 cap-(cc sectoral[sectors])^beta 2 cap))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2009, variation_historic_gfcf(),
        np.exp(beta_0_cap()) * np.exp(beta_1_cap()) * ((cc_sectoral_next_step())**beta_2_cap() -
                                                       (cc_sectoral())**beta_2_cap()))


@cache('step')
def variation_historic_gfcf():
    """
    Real Name: b'variation historic gfcf'
    Original Eqn: b'historic gfcf subagriculture hunting forestry and fishing(Time+1)-historic gfcf subagriculture hunting forestry and fishing(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        historic_gfcf_subagriculture_hunting_forestry_and_fishing(time() + 1) -
        historic_gfcf_subagriculture_hunting_forestry_and_fishing(time()),
        historic_gfcf_submining_and_quarrying(time() + 1) -
        historic_gfcf_submining_and_quarrying(time()),
        historic_gfcf_subfood_beverages_and_tobacco(time() + 1) -
        historic_gfcf_subfood_beverages_and_tobacco(time()),
        historic_gfcf_subtextiles_and_textile_products(time() + 1) -
        historic_gfcf_subtextiles_and_textile_products(time()),
        historic_gfcf_subleather_leather_and_footwear(time() + 1) -
        historic_gfcf_subleather_leather_and_footwear(time()),
        historic_gfcf_subwood_and_products_of_wood_and_cork(time() + 1) -
        historic_gfcf_subwood_and_products_of_wood_and_cork(time()),
        historic_gfcf_subpulp_paper_printing_and_publishing(time() + 1) -
        historic_gfcf_subpulp_paper_printing_and_publishing(time()),
        historic_gfcf_subcoke_refined_petroleum_and_nuclear_fuel(time() + 1) -
        historic_gfcf_subcoke_refined_petroleum_and_nuclear_fuel(time()),
        historic_gfcf_subchemicals_and_chemical_products(time() + 1) -
        historic_gfcf_subchemicals_and_chemical_products(time()),
        historic_gfcf_subrubber_and_plastics(time() + 1) -
        historic_gfcf_subrubber_and_plastics(time()),
        historic_gfcf_subother_non_metalic_mineral(time() + 1) -
        historic_gfcf_subother_non_metalic_mineral(time()),
        historic_gfcf_subbasic_metals_and_fabricated_metal(time() + 1) -
        historic_gfcf_subbasic_metals_and_fabricated_metal(time()),
        historic_gfcf_submachinery_nec(time() + 1) - historic_gfcf_submachinery_nec(time()),
        historic_gfcf_subelectrical_and_optical_equipment(time() + 1) -
        historic_gfcf_subelectrical_and_optical_equipment(time()),
        historic_gfcf_subtransport_equipment(time() + 1) -
        historic_gfcf_subtransport_equipment(time()),
        historic_gfcf_submanufacturing_nec_recycling(time() + 1) -
        historic_gfcf_submanufacturing_nec_recycling(time()),
        historic_gfcf_subelectricity_gas_and_water_supply(time() + 1) -
        historic_gfcf_subelectricity_gas_and_water_supply(time()),
        historic_gfcf_subconstruction(time() + 1) - historic_gfcf_subconstruction(time()),
        historic_gfcf_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            time() + 1) -
        historic_gfcf_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            time()),
        historic_gfcf_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            time() + 1) -
        historic_gfcf_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            time()),
        historic_gfcf_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            time() + 1) -
        historic_gfcf_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            time()),
        historic_gfcf_subhotels_and_restaurants(time() + 1) -
        historic_gfcf_subhotels_and_restaurants(time()),
        historic_gfcf_subinland_transport(time() + 1) - historic_gfcf_subinland_transport(time()),
        historic_gfcf_subwater_transport(time() + 1) - historic_gfcf_subwater_transport(time()),
        historic_gfcf_subair_transport(time() + 1) - historic_gfcf_subair_transport(time()),
        historic_gfcf_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            time() + 1) -
        historic_gfcf_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            time()),
        historic_gfcf_subpost_and_telecommunications(time() + 1) -
        historic_gfcf_subpost_and_telecommunications(time()),
        historic_gfcf_subfinancial_intermediation(time() + 1) -
        historic_gfcf_subfinancial_intermediation(time()),
        historic_gfcf_subreal_estate_activities(time() + 1) -
        historic_gfcf_subreal_estate_activities(time()),
        historic_gfcf_subrenting_od_meq_and_other_business_activities(time() + 1) -
        historic_gfcf_subrenting_od_meq_and_other_business_activities(time()),
        historic_gfcf_subpublic_admin_and_defence_compulsory_social_security(time() + 1) -
        historic_gfcf_subpublic_admin_and_defence_compulsory_social_security(time()),
        historic_gfcf_subeducation(time() + 1) - historic_gfcf_subeducation(time()),
        historic_gfcf_subhealth_and_social_work(time() + 1) -
        historic_gfcf_subhealth_and_social_work(time()),
        historic_gfcf_subother_community_social_and_persona_services(time() + 1) -
        historic_gfcf_subother_community_social_and_persona_services(time()),
        historic_gfcf_subprivate_households_with_employed_persons(time() + 1) -
        historic_gfcf_subprivate_households_with_employed_persons(time())],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons']},
        dims=['sectors'])


@cache('step')
def share_consum_goverment_and_inventories():
    """
    Real Name: b'share consum goverment and inventories'
    Original Eqn: b'share inventories subagriculture hunting forestry and fishing(Time)+share consum goverments subagriculture hunting forestry and fishing(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        share_inventories_subagriculture_hunting_forestry_and_fishing(time()) +
        share_consum_goverments_subagriculture_hunting_forestry_and_fishing(time()),
        share_inventories_submining_and_quarrying(time()) +
        share_consum_goverments_submining_and_quarrying(time()),
        share_inventories_subfood_beverages_and_tobacco(time()) +
        share_consum_goverments_subfood_beverages_and_tobacco(time()),
        share_inventories_subtextiles_and_textile_products(time()) +
        share_consum_goverments_subtextiles_and_textile_products(time()),
        share_inventories_subleather_leather_and_footwear(time()) +
        share_consum_goverments_subleather_leather_and_footwear(time()),
        share_inventories_subwood_and_products_of_wood_and_cork(time()) +
        share_consum_goverments_subwood_and_products_of_wood_and_cork(time()),
        share_inventories_subpulp_paper_printing_and_publishing(time()) +
        share_consum_goverments_subpulp_paper_printing_and_publishing(time()),
        share_inventories_subcoke_refined_petroleum_and_nuclear_fuel(time()) +
        share_consum_goverments_subcoke_refined_petroleum_and_nuclear_fuel(time()),
        share_inventories_subchemicals_and_chemical_products(time()) +
        share_consum_goverments_subchemicals_and_chemical_products(time()),
        share_inventories_subrubber_and_plastics(time()) +
        share_consum_goverments_subrubber_and_plastics(time()),
        share_inventories_subother_non_metalic_mineral(time()) +
        share_consum_goverments_subother_non_metalic_mineral(time()),
        share_inventories_subbasic_metals_and_fabricated_metal(time()) +
        share_consum_goverments_subbasic_metals_and_fabricated_metal(time()),
        share_inventories_submachinery_nec(time()) +
        share_consum_goverments_submachinery_nec(time()),
        share_inventories_subelectrical_and_optical_equipment(time()) +
        share_consum_goverments_subelectrical_and_optical_equipment(time()),
        share_inventories_subtransport_equipment(time()) +
        share_consum_goverments_subtransport_equipment(time()),
        share_inventories_submanufacturing_nec_recycling(time()) +
        share_consum_goverments_submanufacturing_nec_recycling(time()),
        share_inventories_subelectricity_gas_and_water_supply(time()) +
        share_consum_goverments_subelectricity_gas_and_water_supply(time()),
        share_inventories_subconstruction(time()) +
        share_consum_goverments_subconstruction(time()),
        share_inventories_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            time()) +
        share_consum_goverments_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            time()),
        share_inventories_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            time()) +
        share_consum_goverments_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            time()),
        share_inventories_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            time()) +
        share_consum_goverments_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            time()),
        share_inventories_subhotels_and_restaurants(time()) +
        share_consum_goverments_subhotels_and_restaurants(time()),
        share_inventories_subinland_transport(time()) +
        share_consum_goverments_subinland_transport(time()),
        share_inventories_subwater_transport(time()) +
        share_consum_goverments_subwater_transport(time()),
        share_inventories_subair_transport(time()) +
        share_consum_goverments_subair_transport(time()),
        share_inventories_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            time()) +
        share_consum_goverments_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            time()),
        share_inventories_subpost_and_telecommunications(time()) +
        share_consum_goverments_subpost_and_telecommunications(time()),
        share_inventories_subfinancial_intermediation(time()) +
        share_consum_goverments_subfinancial_intermediation(time()),
        share_inventories_subreal_estate_activities(time()) +
        share_consum_goverments_subreal_estate_activities(time()),
        share_inventories_subrenting_od_meq_and_other_business_activities(time()) +
        share_consum_goverments_subrenting_od_meq_and_other_business_activities(time()),
        share_inventories_subpublic_admin_and_defence_compulsory_social_security(time()) +
        share_consum_goverments_subpublic_admin_and_defence_compulsory_social_security(time()),
        share_inventories_subeducation(time()) + share_consum_goverments_subeducation(time()),
        share_inventories_subhealth_and_social_work(time()) +
        share_consum_goverments_subhealth_and_social_work(time()),
        share_inventories_subother_community_social_and_persona_services(time()) +
        share_consum_goverments_subother_community_social_and_persona_services(time()),
        share_inventories_subprivate_households_with_employed_persons(time()) +
        share_consum_goverments_subprivate_households_with_employed_persons(time())],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons']},
        dims=['sectors'])


@cache('step')
def share_consum_goverments_and_inventories_next_step():
    """
    Real Name: b'share consum goverments and inventories next step'
    Original Eqn: b'share consum goverments next step subagriculture hunting forestry and fishing(Time)+share inventories next step subagriculture hunting forestry and fishing(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        share_consum_goverments_next_step_subagriculture_hunting_forestry_and_fishing(time()) +
        share_inventories_next_step_subagriculture_hunting_forestry_and_fishing(time()),
        share_consum_goverments_next_step_submining_and_quarrying(time()) +
        share_inventories_next_step_submining_and_quarrying(time()),
        share_consum_goverments_next_step_subfood_beverages_and_tobacco(time()) +
        share_inventories_next_step_subfood_beverages_and_tobacco(time()),
        share_consum_goverments_next_step_subtextiles_and_textile_products(time()) +
        share_inventories_next_step_subtextiles_and_textile_products(time()),
        share_consum_goverments_next_step_subleather_leather_and_footwear(time()) +
        share_inventories_next_step_subleather_leather_and_footwear(time()),
        share_consum_goverments_next_step_subwood_and_products_of_wood_and_cork(time()) +
        share_inventories_next_step_subwood_and_products_of_wood_and_cork(time()),
        share_consum_goverments_next_step_subpulp_paper_printing_and_publishing(time()) +
        share_inventories_next_step_subpulp_paper_printing_and_publishing(time()),
        share_consum_goverments_next_step_subcoke_refined_petroleum_and_nuclear_fuel(time()) +
        share_inventories_next_step_subcoke_refined_petroleum_and_nuclear_fuel(time()),
        share_consum_goverments_next_step_subchemicals_and_chemical_products(time()) +
        share_inventories_next_step_subchemicals_and_chemical_products(time()),
        share_consum_goverments_next_step_subrubber_and_plastics(time()) +
        share_inventories_next_step_subrubber_and_plastics(time()),
        share_consum_goverments_next_step_subother_non_metalic_mineral(time()) +
        share_inventories_next_step_subother_non_metalic_mineral(time()),
        share_consum_goverments_next_step_subbasic_metals_and_fabricated_metal(time()) +
        share_inventories_next_step_subbasic_metals_and_fabricated_metal(time()),
        share_consum_goverments_next_step_submachinery_nec(time()) +
        share_inventories_next_step_submachinery_nec(time()),
        share_consum_goverments_next_step_subelectrical_and_optical_equipment(time()) +
        share_inventories_next_step_subelectrical_and_optical_equipment(time()),
        share_consum_goverments_next_step_subtransport_equipment(time()) +
        share_inventories_next_step_subtransport_equipment(time()),
        share_consum_goverments_next_step_submanufacturing_nec_recycling(time()) +
        share_inventories_next_step_submanufacturing_nec_recycling(time()),
        share_consum_goverments_next_step_subelectricity_gas_and_water_supply(time()) +
        share_inventories_next_step_subelectricity_gas_and_water_supply(time()),
        share_consum_goverments_next_step_subconstruction(time()) +
        share_inventories_next_step_subconstruction(time()),
        share_consum_goverments_next_step_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            time()) +
        share_inventories_next_step_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            time()),
        share_consum_goverments_next_step_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            time()) +
        share_inventories_next_step_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            time()),
        share_consum_goverments_next_step_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            time()) +
        share_inventories_next_step_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            time()),
        share_consum_goverments_next_step_subhotels_and_restaurants(time()) +
        share_inventories_next_step_subhotels_and_restaurants(time()),
        share_consum_goverments_next_step_subinland_transport(time()) +
        share_inventories_next_step_subinland_transport(time()),
        share_consum_goverments_next_step_subwater_transport(time()) +
        share_inventories_next_step_subwater_transport(time()),
        share_consum_goverments_next_step_subair_transport(time()) +
        share_inventories_next_step_subair_transport(time()),
        share_consum_goverments_next_step_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            time()) +
        share_inventories_next_step_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            time()),
        share_consum_goverments_next_step_subpost_and_telecommunications(time()) +
        share_inventories_next_step_subpost_and_telecommunications(time()),
        share_consum_goverments_next_step_subfinancial_intermediation(time()) +
        share_inventories_next_step_subfinancial_intermediation(time()),
        share_consum_goverments_next_step_subreal_estate_activities(time()) +
        share_inventories_next_step_subreal_estate_activities(time()),
        share_consum_goverments_next_step_subrenting_od_meq_and_other_business_activities(time()) +
        share_inventories_next_step_subrenting_od_meq_and_other_business_activities(time()),
        share_consum_goverments_next_step_subpublic_admin_and_defence_compulsory_social_security(
            time()) +
        share_inventories_next_step_subpublic_admin_and_defence_compulsory_social_security(time()),
        share_consum_goverments_next_step_subeducation(time()) +
        share_inventories_next_step_subeducation(time()),
        share_consum_goverments_next_step_subhealth_and_social_work(time()) +
        share_inventories_next_step_subhealth_and_social_work(time()),
        share_consum_goverments_next_step_subother_community_social_and_persona_services(time()) +
        share_inventories_next_step_subother_community_social_and_persona_services(time()),
        share_consum_goverments_next_step_subprivate_households_with_employed_persons(time()) +
        share_inventories_next_step_subprivate_households_with_employed_persons(time())],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons']},
        dims=['sectors'])


@cache('step')
def cc_sectoral():
    """
    Real Name: b'cc sectoral'
    Original Eqn: b'cc total*share cc sectoral subagriculture hunting forestry and fishing(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        cc_total() * share_cc_sectoral_subagriculture_hunting_forestry_and_fishing(time()),
        cc_total() * share_cc_sectoral_submining_and_quarrying(time()),
        cc_total() * share_cc_sectoral_subfood_beverages_and_tobacco(time()),
        cc_total() * share_cc_sectoral_subtextiles_and_textile_products(time()),
        cc_total() * share_cc_sectoral_subleather_leather_and_footwear(time()),
        cc_total() * share_cc_sectoral_subwood_and_products_of_wood_and_cork(time()),
        cc_total() * share_cc_sectoral_subpulp_paper_printing_and_publishing(time()),
        cc_total() * share_cc_sectoral_subcoke_refined_petroleum_and_nuclear_fuel(time()),
        cc_total() * share_cc_sectoral_subchemicals_and_chemical_products(time()),
        cc_total() * share_cc_sectoral_subrubber_and_plastics(time()),
        cc_total() * share_cc_sectoral_subother_non_metalic_mineral(time()),
        cc_total() * share_cc_sectoral_subbasic_metals_and_fabricated_metal(time()),
        cc_total() * share_cc_sectoral_submachinery_nec(time()),
        cc_total() * share_cc_sectoral_subelectrical_and_optical_equipment(time()),
        cc_total() * share_cc_sectoral_subtransport_equipment(time()),
        cc_total() * share_cc_sectoral_submanufacturing_nec_recycling(time()),
        cc_total() * share_cc_sectoral_subelectricity_gas_and_water_supply(time()),
        cc_total() * share_cc_sectoral_subconstruction(time()),
        cc_total() *
        share_cc_sectoral_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
            time()),
        cc_total() *
        share_cc_sectoral_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
            time()),
        cc_total() *
        share_cc_sectoral_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
            time()),
        cc_total() * share_cc_sectoral_subhotels_and_restaurants(time()),
        cc_total() * share_cc_sectoral_subinland_transport(time()),
        cc_total() * share_cc_sectoral_subwater_transport(time()),
        cc_total() * share_cc_sectoral_subair_transport(time()),
        cc_total() *
        share_cc_sectoral_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
            time()),
        cc_total() * share_cc_sectoral_subpost_and_telecommunications(time()),
        cc_total() * share_cc_sectoral_subfinancial_intermediation(time()),
        cc_total() * share_cc_sectoral_subreal_estate_activities(time()),
        cc_total() * share_cc_sectoral_subrenting_od_meq_and_other_business_activities(time()),
        cc_total() *
        share_cc_sectoral_subpublic_admin_and_defence_compulsory_social_security(time()),
        cc_total() * share_cc_sectoral_subeducation(time()),
        cc_total() * share_cc_sectoral_subhealth_and_social_work(time()),
        cc_total() * share_cc_sectoral_subother_community_social_and_persona_services(time()),
        cc_total() * share_cc_sectoral_subprivate_households_with_employed_persons(time())],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons']},
        dims=['sectors'])


@cache('step')
def variation_cc_sectoral():
    """
    Real Name: b'variation cc sectoral'
    Original Eqn: b'((cc total+variation cc)*share cc next step subagriculture hunting forestry and fishing(Time))-(cc total*share cc sectoral subagriculture hunting forestry and fishing(Time))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subagriculture_hunting_forestry_and_fishing(time())) -
        (cc_total() * share_cc_sectoral_subagriculture_hunting_forestry_and_fishing(time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_submining_and_quarrying(time())) -
        (cc_total() * share_cc_sectoral_submining_and_quarrying(time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_subfood_beverages_and_tobacco(time()))
        - (cc_total() * share_cc_sectoral_subfood_beverages_and_tobacco(time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subtextiles_and_textile_products(time())) -
        (cc_total() * share_cc_sectoral_subtextiles_and_textile_products(time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subleather_leather_and_footwear(time())) -
        (cc_total() * share_cc_sectoral_subleather_leather_and_footwear(time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subwood_and_products_of_wood_and_cork(time())) -
        (cc_total() * share_cc_sectoral_subwood_and_products_of_wood_and_cork(time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subpulp_paper_printing_and_publishing(time())) -
        (cc_total() * share_cc_sectoral_subpulp_paper_printing_and_publishing(time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subcoke_refined_petroleum_and_nuclear_fuel(time())) -
        (cc_total() * share_cc_sectoral_subcoke_refined_petroleum_and_nuclear_fuel(time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subchemicals_and_chemical_products(time())) -
        (cc_total() * share_cc_sectoral_subchemicals_and_chemical_products(time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_subrubber_and_plastics(time())) -
        (cc_total() * share_cc_sectoral_subrubber_and_plastics(time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_subother_non_metalic_mineral(time())) -
        (cc_total() * share_cc_sectoral_subother_non_metalic_mineral(time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subbasic_metals_and_fabricated_metal(time())) -
        (cc_total() * share_cc_sectoral_subbasic_metals_and_fabricated_metal(time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_submachinery_nec(time())) -
        (cc_total() * share_cc_sectoral_submachinery_nec(time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subelectrical_and_optical_equipment(time())) -
        (cc_total() * share_cc_sectoral_subelectrical_and_optical_equipment(time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_subtransport_equipment(time())) -
        (cc_total() * share_cc_sectoral_subtransport_equipment(time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_submanufacturing_nec_recycling(time()))
        - (cc_total() * share_cc_sectoral_submanufacturing_nec_recycling(time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subelectricity_gas_and_water_supply(time())) -
        (cc_total() * share_cc_sectoral_subelectricity_gas_and_water_supply(time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_subconstruction(time())) -
        (cc_total() * share_cc_sectoral_subconstruction(time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
             time())) -
        (cc_total() *
         share_cc_sectoral_subsale_maintenance_and_repair_of_motor_vehicles_anda_motorcycles_retail_sale_of_fuel(
             time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
             time())) -
        (cc_total() *
         share_cc_sectoral_subwholesale_trade_and_commissions_trade_except_of_motor_vehicles_and_motorcycles(
             time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
             time())) -
        (cc_total() *
         share_cc_sectoral_subretail_trade_except_of_motor_vehicles_and_motorcycles_repair_of_household_goods(
             time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_subhotels_and_restaurants(time())) -
        (cc_total() * share_cc_sectoral_subhotels_and_restaurants(time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_subinland_transport(time())) -
        (cc_total() * share_cc_sectoral_subinland_transport(time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_subwater_transport(time())) -
        (cc_total() * share_cc_sectoral_subwater_transport(time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_subair_transport(time())) -
        (cc_total() * share_cc_sectoral_subair_transport(time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
             time())) -
        (cc_total() *
         share_cc_sectoral_subother_supporting_and_auxiliary_transport_activities_activities_of_travel_agencies(
             time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_subpost_and_telecommunications(time()))
        - (cc_total() * share_cc_sectoral_subpost_and_telecommunications(time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_subfinancial_intermediation(time())) -
        (cc_total() * share_cc_sectoral_subfinancial_intermediation(time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_subreal_estate_activities(time())) -
        (cc_total() * share_cc_sectoral_subreal_estate_activities(time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subrenting_od_meq_and_other_business_activities(time())) -
        (cc_total() * share_cc_sectoral_subrenting_od_meq_and_other_business_activities(time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subpublic_admin_and_defence_compulsory_social_security(time())) -
        (cc_total() *
         share_cc_sectoral_subpublic_admin_and_defence_compulsory_social_security(time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_subeducation(time())) -
        (cc_total() * share_cc_sectoral_subeducation(time())),
        ((cc_total() + variation_cc()) * share_cc_next_step_subhealth_and_social_work(time())) -
        (cc_total() * share_cc_sectoral_subhealth_and_social_work(time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subother_community_social_and_persona_services(time())) -
        (cc_total() * share_cc_sectoral_subother_community_social_and_persona_services(time())),
        ((cc_total() + variation_cc()) *
         share_cc_next_step_subprivate_households_with_employed_persons(time())) -
        (cc_total() * share_cc_sectoral_subprivate_households_with_employed_persons(time()))],
        coords={'sectors': ['agriculture hunting forestry and fishing', 'mining and quarrying', 'food beverages and tobacco', 'textiles and textile products', 'leather leather and footwear', 'wood and products of wood and cork', 'pulp paper printing and publishing', 'coke refined petroleum and nuclear fuel', 'chemicals and chemical products', 'rubber and plastics', 'other non metalic mineral', 'basic metals and fabricated metal', 'machinery nec', 'electrical and optical equipment', 'transport equipment', 'manufacturing nec recycling', 'electricity gas and water supply', 'construction', 'sale maintenance and repair of motor vehicles anda motorcycles retail sale of fuel', 'wholesale trade and commissions trade except of motor vehicles and motorcycles', 'retail trade except of motor vehicles and motorcycles repair of household goods', 'hotels and restaurants', 'inland transport', 'water transport', 'air transport', 'other supporting and auxiliary transport activities activities of travel agencies', 'post and telecommunications', 'financial intermediation', 'real estate activities', 'renting od meq and other business activities', 'public admin and defence compulsory social security', 'education', 'health and social work', 'other community social and persona services', 'private households with employed persons']},
        dims=['sectors'])


@cache('step')
def fed_heat_com_by_nre_chp_plants_ej():
    """
    Real Name: b'fed heat com by nre chp plants ej'
    Original Eqn: b'share heat com chp plants nre vs nre tot heat com generation(Time)*fed heat com nre ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return share_heat_com_chp_plants_nre_vs_nre_tot_heat_com_generation(time()) * fed_heat_com_nre_ej()


@cache('step')
def pe_supply_res_non_elec_ej():
    """
    Real Name: b'pe supply res non elec ej'
    Original Eqn: b'pe supply from res non elec without trad bioe ej+pe traditional biomass ej delayed 1yr+losses in charcoal plants ej(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return pe_supply_from_res_non_elec_without_trad_bioe_ej(
    ) + pe_traditional_biomass_ej_delayed_1yr() + losses_in_charcoal_plants_ej(time())


@cache('step')
def new_pes_biogas():
    """
    Real Name: b'new pes biogas'
    Original Eqn: b'if then else(Time<2014, (historic biogas pes(Time+1)-historic biogas pes(Time)), ((max biogas ej-pes biogas ej)/max biogas ej)*adapt growth biogas*pes biogas ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2014,
                                  (historic_biogas_pes(time() + 1) - historic_biogas_pes(time())),
                                  ((max_biogas_ej() - pes_biogas_ej()) / max_biogas_ej()) *
                                  adapt_growth_biogas() * pes_biogas_ej())


@cache('step')
def new_waste_supply_ej():
    """
    Real Name: b'new waste supply ej'
    Original Eqn: b'if then else(Time<2014, (historic pes waste ej(Time+1)-historic pes waste ej(Time)), if then else(max waste=0,pes waste ej*p waste change, ((max waste-pes waste ej)/max waste)*adapt growth waste*pes waste ej))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2014, (historic_pes_waste_ej(time() + 1) - historic_pes_waste_ej(time())),
        if_then_else(max_waste() < equality_threshold(),
                               pes_waste_ej() * p_waste_change(),
                               ((max_waste() - pes_waste_ej()) / max_waste()) *
                               adapt_growth_waste() * pes_waste_ej()))


@cache('step')
def historic_new_required_capacity_res_elec():
    """
    Real Name: b'historic new required capacity res elec'
    Original Eqn: b'table hist capacity res elec subhydro(Time+total time plan plus constr res elec[hydro]+1)-table hist capacity res elec subhydro(Time+total time plan plus constr res elec[ hydro])'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        table_hist_capacity_res_elec_subhydro(time() + total_time_plan_plus_constr_res_elec().loc['hydro'].values + 1)
        - table_hist_capacity_res_elec_subhydro(time() + total_time_plan_plus_constr_res_elec().loc['hydro'].values),
        table_hist_capacity_res_elec_subgeot_elec(time() + total_time_plan_plus_constr_res_elec().loc['geot elec'].values +
                                                  1) -
        table_hist_capacity_res_elec_subgeot_elec(time() + total_time_plan_plus_constr_res_elec().loc['geot elec'].values),
        table_hist_capacity_res_elec_subsolid_bioe_elec(time() +
                                                        total_time_plan_plus_constr_res_elec().loc['solid bioe elec'].values + 1)
        - table_hist_capacity_res_elec_subsolid_bioe_elec(time() +
                                                          total_time_plan_plus_constr_res_elec().loc['solid bioe elec'].values),
        table_hist_capacity_res_elec_suboceanic(time() + total_time_plan_plus_constr_res_elec().loc['oceanic'].values +
                                                1) -
        table_hist_capacity_res_elec_suboceanic(time() + total_time_plan_plus_constr_res_elec().loc['oceanic'].values),
        table_hist_capacity_res_elec_subwind_onshore(time() +
                                                     total_time_plan_plus_constr_res_elec().loc['wind onshore'].values + 1) -
        table_hist_capacity_res_elec_subwind_onshore(time() +
                                                     total_time_plan_plus_constr_res_elec().loc['wind onshore'].values),
        table_hist_capacity_res_elec_subwind_offshore(time() +
                                                      total_time_plan_plus_constr_res_elec().loc['wind offshore'].values + 1) -
        table_hist_capacity_res_elec_subwind_offshore(time() +
                                                      total_time_plan_plus_constr_res_elec().loc['wind offshore'].values),
        table_hist_capacity_res_elec_subsolar_pv(time() + total_time_plan_plus_constr_res_elec().loc['solar pv'].values +
                                                 1) -
        table_hist_capacity_res_elec_subsolar_pv(time() + total_time_plan_plus_constr_res_elec().loc['solar pv'].values),
        table_hist_capacity_res_elec_subcsp(time() + total_time_plan_plus_constr_res_elec().loc['csp'].values + 1) -
        table_hist_capacity_res_elec_subcsp(time() + total_time_plan_plus_constr_res_elec().loc['csp'].values)],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('step')
def share_unconv_gas_vs_tot_agg():
    """
    Real Name: b'share unconv gas vs tot agg'
    Original Eqn: b'if then else(Time>2012, min(evolution share unconv gas vs tot agg, 1), historic unconv gas(Time)/ped natx gas ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() > 2012,
                                  np.minimum(evolution_share_unconv_gas_vs_tot_agg(), 1),
                                  historic_unconv_gas(time()) / ped_natx_gas_ej())


@cache('step')
def max_extraction_tot_agg_gas_ej():
    """
    Real Name: b'max extraction tot agg gas ej'
    Original Eqn: b'if then else(separate conv and unconv gas quest=0, if then else(choose extraction tot agg gas curve=1, table max extraction total gas laherrere10(tot rurr tot agg gas), if then else(choose extraction tot agg gas curve=2, table max extraction total gas bg mohr12(tot rurr tot agg gas ), table max extraction total gas user defined(tot rurr tot agg gas))),0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        separate_conv_and_unconv_gas_quest() == 0,
        if_then_else(
            choose_extraction_tot_agg_gas_curve() == 1,
            table_max_extraction_total_gas_laherrere10(tot_rurr_tot_agg_gas()),
            if_then_else(
                choose_extraction_tot_agg_gas_curve() == 2,
                table_max_extraction_total_gas_bg_mohr12(tot_rurr_tot_agg_gas()),
                table_max_extraction_total_gas_user_defined(tot_rurr_tot_agg_gas()))), 0)


@cache('step')
def share_unconv_oil_vs_tot_agg():
    """
    Real Name: b'share unconv oil vs tot agg'
    Original Eqn: b'if then else(Time>2012, min(evolution share unconv oil vs tot agg, 1), historic unconv oil(Time)/ped total oil ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() > 2012,
                                  np.minimum(evolution_share_unconv_oil_vs_tot_agg(), 1),
                                  historic_unconv_oil(time()) / ped_total_oil_ej())


@cache('step')
def max_extraction_tot_agg_oil_ej():
    """
    Real Name: b'max extraction tot agg oil ej'
    Original Eqn: b'if then else(separate conv and unconv oil quest=0, if then else(choose extraction curve tot agg oil=1, table max extraction tot agg oil laherrere 2006(tot rurr tot agg oil), table max extraction tot agg oil user defined(tot rurr tot agg oil)), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        separate_conv_and_unconv_oil_quest() == 0,
        if_then_else(
            choose_extraction_curve_tot_agg_oil() == 1,
            table_max_extraction_tot_agg_oil_laherrere_2006(tot_rurr_tot_agg_oil()),
            table_max_extraction_tot_agg_oil_user_defined(tot_rurr_tot_agg_oil())), 0)


@cache('step')
def extraction_unconv_gas_ej():
    """
    Real Name: b'extraction unconv gas ej'
    Original Eqn: b'if then else(rurr unconv gas<0,0, if then else(Time<2013, historic unconv gas(Time), if then else(separate conv and unconv gas quest=1, min(max extraction unconv gas ,max unconv gas growth extraction ej), 0)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        rurr_unconv_gas() < 0, 0,
        if_then_else(
            time() < 2013, historic_unconv_gas(time()),
            if_then_else(
                separate_conv_and_unconv_gas_quest() == 1,
                np.minimum(max_extraction_unconv_gas(), max_unconv_gas_growth_extraction_ej()),
                0)))


@cache('step')
def max_extraction_conv_oil_ej():
    """
    Real Name: b'max extraction conv oil ej'
    Original Eqn: b'if then else(separate conv and unconv oil quest=1, if then else(choose extraction curve conv oil=1, table max extraction maggio12middle conv oil ej(tot rurr conv oil), if then else(choose extraction curve conv oil=2, table max extraction maggio12 high conv oil ej(tot rurr conv oil), if then else(choose extraction curve conv oil=3, table max extraction maggio12 low con oil ej(tot rurr conv oil), table max conv oil extraction user defined(tot rurr conv oil)))), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        separate_conv_and_unconv_oil_quest() == 1,
        if_then_else(
            choose_extraction_curve_conv_oil() == 1,
            table_max_extraction_maggio12middle_conv_oil_ej(tot_rurr_conv_oil()),
            if_then_else(
                choose_extraction_curve_conv_oil() == 2,
                table_max_extraction_maggio12_high_conv_oil_ej(tot_rurr_conv_oil()),
                if_then_else(
                    choose_extraction_curve_conv_oil() == 3,
                    table_max_extraction_maggio12_low_con_oil_ej(tot_rurr_conv_oil()),
                    table_max_conv_oil_extraction_user_defined(tot_rurr_conv_oil())))), 0)


@cache('step')
def share_chp_plants_oil():
    """
    Real Name: b'share chp plants oil'
    Original Eqn: b'max(if then else(Time>2014, -0.002985*(Time)+6.04554, historic share chp plants oil(Time)) ,0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        if_then_else(time() > 2014, -0.002985 * (time()) + 6.04554, historic_share_chp_plants_oil(time())), 0)


@cache('step')
def share_chp_plants_coal():
    """
    Real Name: b'share chp plants coal'
    Original Eqn: b'1-historic share chp plants gas(Time)-share chp plants oil'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return 1 - historic_share_chp_plants_gas(time()) - share_chp_plants_oil()


@cache('step')
def pes_peat_ej():
    """
    Real Name: b'pes peat ej'
    Original Eqn: b'max(if then else(Time>2014, -0.0125*(Time)+25.3125, historic pes peat ej(Time)),0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(if_then_else(time() > 2014, -0.0125 * (time()) + 25.3125, historic_pes_peat_ej(time())), 0)


@cache('step')
def total_gen_losses_demand_for_heat_plants_ej():
    """
    Real Name: b'total gen losses demand for heat plants ej'
    Original Eqn: b'ped gases for heat plants ej*(1-efficiency gases for heat plants(Time))+ped oil for heat plants ej*(1-efficiency liquids for heat plants(Time))+ped coal for heat plants ej*(1-efficiency coal for heat plants(Time))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ped_gases_for_heat_plants_ej() * (1 - efficiency_gases_for_heat_plants(
        time())) + ped_oil_for_heat_plants_ej() * (1 - efficiency_liquids_for_heat_plants(time(
        ))) + ped_coal_for_heat_plants_ej() * (1 - efficiency_coal_for_heat_plants(time()))


@cache('step')
def total_gen_losses_demand_for_chp_plants_ej():
    """
    Real Name: b'total gen losses demand for chp plants ej'
    Original Eqn: b'ped gas for chp plants ej*(1-efficiency elec gas chp plants(Time)-efficiency heat gas chp plants(Time))+ped oil for chp plants ej*(1-efficiency elec oil chp plants(Time)-efficiency heat oil chp plants(Time))+ped coal for chp plants ej*(1-efficiency heat coal chp plants(Time)-efficiency elec coal chp plants(Time))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ped_gas_for_chp_plants_ej() * (1 - efficiency_elec_gas_chp_plants(
        time()) - efficiency_heat_gas_chp_plants(time())) + ped_oil_for_chp_plants_ej() * (
            1 - efficiency_elec_oil_chp_plants(time()) - efficiency_heat_oil_chp_plants(time())
        ) + ped_coal_for_chp_plants_ej() * (1 - efficiency_heat_coal_chp_plants(time()) -
                                            efficiency_elec_coal_chp_plants(time()))


@cache('step')
def potential_fe_gen_elec_liquids_chp_plants_ej():
    """
    Real Name: b'potential fe gen elec liquids chp plants ej'
    Original Eqn: b'ped oil for chp plants ej*efficiency elec oil chp plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ped_oil_for_chp_plants_ej() * efficiency_elec_oil_chp_plants(time())


@cache('step')
def potential_fe_gen_elec_coal_chp_plants_ej():
    """
    Real Name: b'potential fe gen elec coal chp plants ej'
    Original Eqn: b'ped coal for chp plants ej*efficiency elec coal chp plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ped_coal_for_chp_plants_ej() * efficiency_elec_coal_chp_plants(time())


@cache('step')
def potential_fe_gen_elec_gas_chp_plants_ej():
    """
    Real Name: b'potential fe gen elec gas chp plants ej'
    Original Eqn: b'ped gas for chp plants ej*efficiency elec gas chp plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return ped_gas_for_chp_plants_ej() * efficiency_elec_gas_chp_plants(time())


@cache('step')
def fed_heat_gas_chp_plants_ej():
    """
    Real Name: b'fed heat gas chp plants ej'
    Original Eqn: b'fed heat fossil fuels chp plants ej*historic share chp plants gas(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_fossil_fuels_chp_plants_ej() * historic_share_chp_plants_gas(time())


@cache('step')
def ped_oil_for_chp_plants_ej():
    """
    Real Name: b'ped oil for chp plants ej'
    Original Eqn: b'fed heat liquids chp plants ej/efficiency heat oil chp plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_liquids_chp_plants_ej() / efficiency_heat_oil_chp_plants(time())


@cache('step')
def ped_gas_for_chp_plants_ej():
    """
    Real Name: b'ped gas for chp plants ej'
    Original Eqn: b'fed heat gas chp plants ej/efficiency heat gas chp plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_gas_chp_plants_ej() / efficiency_heat_gas_chp_plants(time())


@cache('step')
def ped_coal_for_chp_plants_ej():
    """
    Real Name: b'ped coal for chp plants ej'
    Original Eqn: b'fed heat coal chp plants ej/efficiency heat coal chp plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_coal_chp_plants_ej() / efficiency_heat_coal_chp_plants(time())


@cache('step')
def invest_nuclear_tdolar():
    """
    Real Name: b'invest nuclear tdolar'
    Original Eqn: b'max(0, if then else(nuclear capacity under construction<0,0,(nuclear capacity under construction+replacement nuclear capacity)*invest cost nuclear(Time)/1000))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0,
        if_then_else(
            nuclear_capacity_under_construction() < 0, 0,
            (nuclear_capacity_under_construction() + replacement_nuclear_capacity()) *
            invest_cost_nuclear(time()) / 1000))


@cache('step')
def nuclear_capacity_under_construction():
    """
    Real Name: b'nuclear capacity under construction'
    Original Eqn: b'if then else(Time<2013, (historic nuclear generation twh(Time+1)-historic nuclear generation twh(Time)) *twe per twh/cp nuclear, planned nuclear capacity tw/time construction nuclear )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2013,
        (historic_nuclear_generation_twh(time() + 1) - historic_nuclear_generation_twh(time())) *
        twe_per_twh() / cp_nuclear(),
        planned_nuclear_capacity_tw() / time_construction_nuclear())


@cache('step')
def invest_res_elec_tdolar():
    """
    Real Name: b'invest res elec tdolar'
    Original Eqn: b'max(0, res elec capacity under construction tw[hydro]*invest cost res elec subhydro(Time))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return xr.DataArray(data=[
        np.maximum(
            0,
            res_elec_capacity_under_construction_tw().loc['hydro'].values * invest_cost_res_elec_subhydro(time())),
        np.maximum(
            0,
            res_elec_capacity_under_construction_tw().loc['geot elec'].values * invest_cost_res_elec_subgeot_elec(time())),
        np.maximum(
            0,
            res_elec_capacity_under_construction_tw().loc['solid bioe elec'].values *
            invest_cost_res_elec_subsolid_bioe_elec(time())),
        np.maximum(
            0,
            res_elec_capacity_under_construction_tw().loc['oceanic'].values * invest_cost_res_elec_suboceanic(time())),
        np.maximum(
            0,
            res_elec_capacity_under_construction_tw().loc['wind onshore'].values *
            invest_cost_res_elec_subwind_onshore(time())),
        np.maximum(
            0,
            res_elec_capacity_under_construction_tw().loc['wind offshore'].values *
            invest_cost_res_elec_subwind_offshore(time())),
        np.maximum(
            0,
            res_elec_capacity_under_construction_tw().loc['solar pv'].values * invest_cost_res_elec_subsolar_pv(time())),
        np.maximum(0,
                   res_elec_capacity_under_construction_tw().loc['csp'].values *
                   invest_cost_res_elec_subcsp(time()))],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('run')
def initial_required_capacity_res_elec():
    """
    Real Name: b'initial required capacity res elec'
    Original Eqn: b'table hist capacity res elec subhydro(1996)-table hist capacity res elec subhydro(1995)'
    Units: b''
    Limits: (None, None)
    Type: constant

    b''
    """
    return xr.DataArray(data=[
        table_hist_capacity_res_elec_subhydro(1996) - table_hist_capacity_res_elec_subhydro(1995),
        table_hist_capacity_res_elec_subgeot_elec(1996) -
        table_hist_capacity_res_elec_subgeot_elec(1995),
        table_hist_capacity_res_elec_subsolid_bioe_elec(1996) -
        table_hist_capacity_res_elec_subsolid_bioe_elec(1995),
        table_hist_capacity_res_elec_suboceanic(1996) -
        table_hist_capacity_res_elec_suboceanic(1995),
        table_hist_capacity_res_elec_subwind_onshore(1996) -
        table_hist_capacity_res_elec_subwind_onshore(1995),
        table_hist_capacity_res_elec_subwind_offshore(1996) -
        table_hist_capacity_res_elec_subwind_offshore(1995),
        table_hist_capacity_res_elec_subsolar_pv(1996) -
        table_hist_capacity_res_elec_subsolar_pv(1995),
        table_hist_capacity_res_elec_subcsp(1996) - table_hist_capacity_res_elec_subcsp(1995)],
        coords={'res elec': ['hydro', 'geot elec', 'solid bioe elec', 'oceanic', 'wind onshore', 'wind offshore', 'solar pv', 'csp']},
        dims=['res elec'])


@cache('step')
def afforestation_program_2020_gtco2():
    """
    Real Name: b'afforestation program 2020 gtco2'
    Original Eqn: b'afforestation program 2020(Time)*activate affores program/(c per co2*mt per gt)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return afforestation_program_2020(time()) * activate_affores_program() / (c_per_co2() * mt_per_gt())


@cache('step')
def max_extraction_uranium_ej():
    """
    Real Name: b'max extraction uranium ej'
    Original Eqn: b'if then else(choose extraction uranium curve=1, table max extraction uranium ewg13 ej(rurr uranium), if then else(choose extraction uranium curve=2, table max extraction uranium zittel12(rurr uranium), table max extraction uranium user defined(rurr uranium)))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        choose_extraction_uranium_curve() == 1,
        table_max_extraction_uranium_ewg13_ej(rurr_uranium()),
        if_then_else(choose_extraction_uranium_curve() == 2,
                               table_max_extraction_uranium_zittel12(rurr_uranium()),
                               table_max_extraction_uranium_user_defined(rurr_uranium())))


@cache('step')
def gtco2_historic_emissions_rcps():
    """
    Real Name: b'gtco2 historic emissions rcps'
    Original Eqn: b'gtc historic emissions rcps(Time)/c per co2'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return gtc_historic_emissions_rcps(time()) / c_per_co2()


@cache('step')
def variation_historic_pop():
    """
    Real Name: b'variation historic pop'
    Original Eqn: b'if then else(Time<2014, historic pop(Time+1)-historic pop(Time), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(time() < 2014, historic_pop(time() + 1) - historic_pop(time()), 0)


@cache('step')
def tpes_de_castro_phd_scen_xmadcoalx_ej():
    """
    Real Name: b'tpes de castro phd scen xmadcoalx ej'
    Original Eqn: b'tpes de castro phd scen xmadcoalx(Time)/mtoe per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return tpes_de_castro_phd_scen_xmadcoalx(time()) / mtoe_per_ej()


@cache('step')
def tpes_de_castro_phd_scen_ii_ej():
    """
    Real Name: b'tpes de castro phd scen ii ej'
    Original Eqn: b'tpes de castro phd scen ii(Time)/mtoe per ej'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return tpes_de_castro_phd_scen_ii(time()) / mtoe_per_ej()


@cache('step')
def balancing_costs():
    """
    Real Name: b'balancing costs'
    Original Eqn: b'(balancing costs ref(share variable res elec generation vs total))/m per t'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return (balancing_costs_ref(share_variable_res_elec_generation_vs_total())) / m_per_t()


@cache('step')
def variation_ctl():
    """
    Real Name: b'variation ctl'
    Original Eqn: b'if then else(Time<2013, historic ctl production(Time+1)-historic ctl production(Time ), if then else(check liquids<-0.0001, constrain liquids exogenous growth quest*ctl potential production, ctl potential production*real growth ctl))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2013,
        historic_ctl_production(time() + 1) - historic_ctl_production(time()),
        if_then_else(
            check_liquids() < - equality_threshold(),
            constrain_liquids_exogenous_growth_quest() * ctl_potential_production(),
            ctl_potential_production() * real_growth_ctl()))


@cache('step')
def variation_gtl():
    """
    Real Name: b'variation gtl'
    Original Eqn: b'if then else(Time<2013, historic gtl production(Time+1)-historic gtl production(Time ), if then else(check liquids<-0.0001, constrain liquids exogenous growth quest*gtl potential production, gtl potential production*real growth gtl))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2013,
        historic_gtl_production(time() + 1) - historic_gtl_production(time()),
        if_then_else(
            check_liquids() < - equality_threshold(),
            constrain_liquids_exogenous_growth_quest() * gtl_potential_production(),
            gtl_potential_production() * real_growth_gtl()))


@cache('step')
def improvement_efficiency_gas_for_electricity():
    """
    Real Name: b'improvement efficiency gas for electricity'
    Original Eqn: b'if then else(Time<2013, (historic efficiency gas for electricity(Time+1)-historic efficiency gas for electricity(Time))*percent to share, efficiency gas for electricity*remaining efficiency improv gas for electricity *efficiency improv gas for electricity)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2013, (historic_efficiency_gas_for_electricity(time() + 1) -
                        historic_efficiency_gas_for_electricity(time())) * percent_to_share(),
        efficiency_gas_for_electricity() * remaining_efficiency_improv_gas_for_electricity() *
        efficiency_improv_gas_for_electricity())


@cache('step')
def annual_additional_historic_product_biofuels_2gen():
    """
    Real Name: b'annual additional historic product biofuels 2gen'
    Original Eqn: b'if then else(Time<2015, historic produc biofuels 2gen(Time+1)-historic produc biofuels 2gen(Time), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        time() < 2015,
        historic_produc_biofuels_2gen(time() + 1) - historic_produc_biofuels_2gen(time()), 0)


@cache('step')
def ped_oil_for_heat_plants_ej():
    """
    Real Name: b'ped oil for heat plants ej'
    Original Eqn: b'fed heat liquids plants ej/efficiency liquids for heat plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_liquids_plants_ej() / efficiency_liquids_for_heat_plants(time())


@cache('step')
def max_unconv_oil_growth_extraction():
    """
    Real Name: b'max unconv oil growth extraction'
    Original Eqn: b'max(0, 1+(if then else(selection constraint extraction unconv oil=1,(p constraint growth extraction unconv oil)*time step*scarcity conv oil stock,(user defined extraction growth unconv oil(Time)*time step)))*abundance unconv oil2 )'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.maximum(
        0, 1 +
        (if_then_else(selection_constraint_extraction_unconv_oil() == 1,
                                (p_constraint_growth_extraction_unconv_oil()) * time_step() *
                                scarcity_conv_oil_stock(),
                                (user_defined_extraction_growth_unconv_oil(time()) * time_step())))
        * abundance_unconv_oil2())


@cache('step')
def extraction_unconv_oil_ej():
    """
    Real Name: b'extraction unconv oil ej'
    Original Eqn: b'min(if then else(rurr unconv oil ej<0,0, if then else(Time>2012, if then else(separate conv and unconv oil quest=1, min(max extraction unconv oil, max unconv oil growth extraction ej ),0), historic unconv oil(Time))),ped total oil ej)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return np.minimum(
        if_then_else(
            rurr_unconv_oil_ej() < 0, 0,
            if_then_else(
                time() > 2012,
                if_then_else(
                    separate_conv_and_unconv_oil_quest() == 1,
                    np.minimum(max_extraction_unconv_oil(), max_unconv_oil_growth_extraction_ej()),
                    0), historic_unconv_oil(time()))), ped_total_oil_ej())


@cache('step')
def max_extraction_unconv_gas():
    """
    Real Name: b'max extraction unconv gas'
    Original Eqn: b'if then else(choose extraction curve unconv gas=1, table max extraction unconv gas bg mohr15(tot rurr unconv gas), if then else(choose extraction curve unconv gas=2, table max extraction unconv gas low mohr15(tot rurr unconv gas), if then else(choose extraction curve unconv gas=3, table max extraction unconv gas high mohr15(tot rurr unconv gas), table max extraction unconv gas user defined(tot rurr unconv gas))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        choose_extraction_curve_unconv_gas() == 1,
        table_max_extraction_unconv_gas_bg_mohr15(tot_rurr_unconv_gas()),
        if_then_else(
            choose_extraction_curve_unconv_gas() == 2,
            table_max_extraction_unconv_gas_low_mohr15(tot_rurr_unconv_gas()),
            if_then_else(
                choose_extraction_curve_unconv_gas() == 3,
                table_max_extraction_unconv_gas_high_mohr15(tot_rurr_unconv_gas()),
                table_max_extraction_unconv_gas_user_defined(tot_rurr_unconv_gas()))))


@cache('step')
def max_extraction_unconv_oil():
    """
    Real Name: b'max extraction unconv oil'
    Original Eqn: b'if then else(choose extraction curve unconv oil=1, table max extraction unconv oil bg mohr15(tot rurr unconv oil), if then else(choose extraction curve unconv oil=2, table max extraction unconv oil low mohr15(tot rurr unconv oil), if then else(choose extraction curve unconv oil=3, table max extraction unconv oil high mohr15(tot rurr unconv oil), table max extraction unconv oil user defined(tot rurr unconv oil)) ))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        choose_extraction_curve_unconv_oil() == 1,
        table_max_extraction_unconv_oil_bg_mohr15(tot_rurr_unconv_oil()),
        if_then_else(
            choose_extraction_curve_unconv_oil() == 2,
            table_max_extraction_unconv_oil_low_mohr15(tot_rurr_unconv_oil()),
            if_then_else(
                choose_extraction_curve_unconv_oil() == 3,
                table_max_extraction_unconv_oil_high_mohr15(tot_rurr_unconv_oil()),
                table_max_extraction_unconv_oil_user_defined(tot_rurr_unconv_oil()))))


@cache('step')
def max_extraction_coal_ej():
    """
    Real Name: b'max extraction coal ej'
    Original Eqn: b'if then else(choose extraction coal curve=1, table max extraction coal mohr2012 ej(tot rurr coal), if then else(choose extraction coal curve=2, table max extraction coal low mohr15(tot rurr coal), if then else(choose extraction coal curve=3, table max extraction coal bg mohr15(tot rurr coal), if then else(choose extraction coal curve=4, table max extraction coal high mohr15(tot rurr coal), table max extraction coal user defined(tot rurr coal)))))'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        choose_extraction_coal_curve() == 1,
        table_max_extraction_coal_mohr2012_ej(tot_rurr_coal()),
        if_then_else(
            choose_extraction_coal_curve() == 2,
            table_max_extraction_coal_low_mohr15(tot_rurr_coal()),
            if_then_else(
                choose_extraction_coal_curve() == 3,
                table_max_extraction_coal_bg_mohr15(tot_rurr_coal()),
                if_then_else(choose_extraction_coal_curve() == 4,
                                       table_max_extraction_coal_high_mohr15(tot_rurr_coal()),
                                       table_max_extraction_coal_user_defined(tot_rurr_coal())))))


@cache('step')
def max_extraction_conv_gas_ej():
    """
    Real Name: b'max extraction conv gas ej'
    Original Eqn: b'if then else(separate conv and unconv gas quest=1, if then else(choose extraction conv gas curve=1, table max extraction conv gas bg mohr15(tot rurr conv gas), if then else(choose extraction conv gas curve=2, table max extraction conv gas low mohr15(tot rurr conv gas), if then else(choose extraction conv gas curve=3, table max extraction conv gas high mohr15(tot rurr conv gas), table max extraction conv gas user defined(tot rurr conv gas)))), 0)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return if_then_else(
        separate_conv_and_unconv_gas_quest() == 1,
        if_then_else(
            choose_extraction_conv_gas_curve() == 1,
            table_max_extraction_conv_gas_bg_mohr15(tot_rurr_conv_gas()),
            if_then_else(
                choose_extraction_conv_gas_curve() == 2,
                table_max_extraction_conv_gas_low_mohr15(tot_rurr_conv_gas()),
                if_then_else(
                    choose_extraction_conv_gas_curve() == 3,
                    table_max_extraction_conv_gas_high_mohr15(tot_rurr_conv_gas()),
                    table_max_extraction_conv_gas_user_defined(tot_rurr_conv_gas())))), 0)


@cache('step')
def ped_gases_for_heat_plants_ej():
    """
    Real Name: b'ped gases for heat plants ej'
    Original Eqn: b'fed heat gas plants ej/efficiency gases for heat plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_gas_plants_ej() / efficiency_gases_for_heat_plants(time())


@cache('step')
def ped_coal_for_heat_plants_ej():
    """
    Real Name: b'ped coal for heat plants ej'
    Original Eqn: b'fed heat coal plants ej/efficiency coal for heat plants(Time)'
    Units: b''
    Limits: (None, None)
    Type: component

    b''
    """
    return fed_heat_coal_plants_ej() / efficiency_coal_for_heat_plants(time())


_delay_share_e_industry_own_use_vs_tfec_in_x2015_roundtime_step__time_step___time_step_0_time_step__time_step = Delay(
    lambda: share_e_industry_own_use_vs_tfec_in_x2015(),
    lambda: round(time_step() / time_step()) * time_step(), lambda: 0,
    lambda: time_step() / time_step(), id = 1)


def _init_perception_in_primary_sources_scarcity():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for perception_in_primary_sources_scarcity'
    Limits: None
    Type: setup

    b'Provides initial conditions for perception_in_primary_sources_scarcity function'
    """
    return xr.DataArray(data=[0.0] * 4,
                        coords={'primary sources': ['coal', 'oil', 'natural gas', 'others']},
                        dims=['primary sources'])


@cache('step')
def _dperception_in_primary_sources_scarcity_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for perception_in_primary_sources_scarcity'
    Limits: None
    Type: component

    b'Provides derivative for perception_in_primary_sources_scarcity function'
    """
    return increase_in_perception_ps_scarcity() - reduction_in_perception_ps_scarcity()


_integ_perception_in_primary_sources_scarcity = Integ(
    lambda: _dperception_in_primary_sources_scarcity_dt(),
    lambda: _init_perception_in_primary_sources_scarcity(), id = 1)


def _init_perception_of_final_energy_scarcity():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for perception_of_final_energy_scarcity'
    Limits: None
    Type: setup

    b'Provides initial conditions for perception_of_final_energy_scarcity function'
    """
    return xr.DataArray(
        data=[0.0]  * 5,
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def _dperception_of_final_energy_scarcity_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for perception_of_final_energy_scarcity'
    Limits: None
    Type: component

    b'Provides derivative for perception_of_final_energy_scarcity function'
    """
    return increase_in_perception_fe_scarcity() - reduction_in_perception_fe_scarcity()


_integ_perception_of_final_energy_scarcity = Integ(
    lambda: _dperception_of_final_energy_scarcity_dt(),
    lambda: _init_perception_of_final_energy_scarcity(), id = 2)


def _init_perception_of_final_energy_scarcity_h():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for perception_of_final_energy_scarcity_h'
    Limits: None
    Type: setup

    b'Provides initial conditions for perception_of_final_energy_scarcity_h function'
    """
    return xr.DataArray(
        data=[0.0]  * 5,
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def _dperception_of_final_energy_scarcity_h_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for perception_of_final_energy_scarcity_h'
    Limits: None
    Type: component

    b'Provides derivative for perception_of_final_energy_scarcity_h function'
    """
    return increase_in_perception_fe_scarcity_h() - reduction_in_perception_fe_scarcity_h()


_integ_perception_of_final_energy_scarcity_h = Integ(
    lambda: _dperception_of_final_energy_scarcity_h_dt(),
    lambda: _init_perception_of_final_energy_scarcity_h(), id = 3)


def _init_evol_final_energy_intensity_by_sector_and_fuel():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for evol_final_energy_intensity_by_sector_and_fuel'
    Limits: None
    Type: setup

    b'Provides initial conditions for evol_final_energy_intensity_by_sector_and_fuel function'
    """
    return initial_energy_intensity_by_fuel_and_sector_1995()


@cache('step')
def _devol_final_energy_intensity_by_sector_and_fuel_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for evol_final_energy_intensity_by_sector_and_fuel'
    Limits: None
    Type: component

    b'Provides derivative for evol_final_energy_intensity_by_sector_and_fuel function'
    """
    return increase_of_intensity_due_to_energy_a_technology_change_top_down(
    ) + inertial_rate_energy_intensity_top_down() + rate_change_intensity_bottom_up(
    ) - decrease_of_intensity_due_to_energy_a_technology_change_top_down()


_integ_evol_final_energy_intensity_by_sector_and_fuel = Integ(
    lambda: _devol_final_energy_intensity_by_sector_and_fuel_dt(),
    lambda: _init_evol_final_energy_intensity_by_sector_and_fuel(), id = 4)

_delay_final_energy_intensity_2020_roundtime_step__time_step___time_step_0_time_step__time_step = [Delay(
    lambda src=sources, sec=sectors: final_energy_intensity_2020().loc[src, sec].values,
    lambda: round(time_step() / time_step()) * time_step(),
    lambda: 0,
    lambda: time_step() / time_step(), id = 2)
    for sources in _subscript_dict.get('final sources') for sectors in _subscript_dict.get('sectors')]


def _init_evol_final_energy_intensity_h():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for evol_final_energy_intensity_h'
    Limits: None
    Type: setup

    b'Provides initial conditions for evol_final_energy_intensity_h function'
    """
    return initial_energy_intensity_1995_h()


@cache('step')
def _devol_final_energy_intensity_h_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for evol_final_energy_intensity_h'
    Limits: None
    Type: component

    b'Provides derivative for evol_final_energy_intensity_h function'
    """
    return increase_of_intensity_due_to_change_energy_technology_h_top_down(
    ) + inertial_rate_energy_intensity_h_top_down(
    ) - decrease_of_intensity_due_to_change_energy_technology_h_top_down()


_integ_evol_final_energy_intensity_h = Integ(
    lambda: _devol_final_energy_intensity_h_dt(), lambda: _init_evol_final_energy_intensity_h(), id = 5)

_delay_final_energy_intensity_2020_h_roundtime_step__time_step___time_step_0_time_step__time_step = [Delay(
    lambda src=sources: final_energy_intensity_2020_h().loc[src].values,
    lambda: round(time_step() / time_step()) * time_step(), lambda: 0,
    lambda: time_step() / time_step(), id = 3) for sources in _subscript_dict.get('final sources')]

_integ_future_share_gas_div_xcoal_plus_gasx_for_elec = Integ(
    lambda: increase_share_gas_for_elec() - decrease_share_gas_for_elec(),
    lambda: share_gas_div_xcoal_plus_gasx_for_elec_in_x2014(), id = 6)

_integ_future_share_oil_div_ff_for_elec = Integ(
    lambda: increase_share_oil_for_elec() - decrease_share_oil_for_elec(),
    lambda: share_oil_div_ff_for_elec_in_x2015(), id = 7)

_integ_cumulative_co2e_ghg_emissions = Integ(lambda: total_ce_all_ghg(), lambda: 0, id = 8)


def _init_scarcity_resources_counter():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for scarcity_resources_counter'
    Limits: None
    Type: setup

    b'Provides initial conditions for scarcity_resources_counter function'
    """
    return xr.DataArray(
        data=[0] * 58,
        coords={
            'materials': [
                'adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement',
                'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components',
                'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass',
                'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt',
                'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese',
                'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic',
                'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx',
                'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand',
                'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin',
                'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide',
                'vanadium', 'wires', 'zinc'
            ]
        },
        dims=['materials'])


@cache('step')
def _dscarcity_resources_counter_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for scarcity_resources_counter'
    Limits: None
    Type: component

    b'Provides derivative for scarcity_resources_counter function'
    """
    return if_then_else(materials_availability_xresourcesx() < equality_threshold(), 1, 0)


_integ_scarcity_resources_counter = Integ(lambda: _dscarcity_resources_counter_dt(),
                                                    lambda: _init_scarcity_resources_counter(), id = 9)


def _init_year_init_scarcity_final_fuels():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for year_init_scarcity_final_fuels'
    Limits: None
    Type: setup

    b'Provides initial conditions for year_init_scarcity_final_fuels function'
    """
    return xr.DataArray(
        data=[0.0]  * 5,
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def _dyear_init_scarcity_final_fuels_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for year_init_scarcity_final_fuels'
    Limits: None
    Type: component

    b'Provides derivative for year_init_scarcity_final_fuels function'
    """
    return if_then_else(scarcity_final_fuels_flags() - 1 < equality_threshold(),
                                  (if_then_else(scarcity_final_fuels_counter() - 1 < equality_threshold(),
                                                          (time() * 1 / time_step()) - 20, 0)), 0)


_integ_year_init_scarcity_final_fuels = Integ(
    lambda: _dyear_init_scarcity_final_fuels_dt(), lambda: _init_year_init_scarcity_final_fuels(), id = 10)


def _init_year_init_scarcity_reserves():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for year_init_scarcity_reserves'
    Limits: None
    Type: setup

    b'Provides initial conditions for year_init_scarcity_reserves function'
    """
    return xr.DataArray(
        data=[0.0]  * 58,
        coords={
            'materials': [
                'adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement',
                'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components',
                'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass',
                'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt',
                'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese',
                'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic',
                'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx',
                'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand',
                'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin',
                'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide',
                'vanadium', 'wires', 'zinc'
            ]
        },
        dims=['materials'])


@cache('step')
def _dyear_init_scarcity_reserves_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for year_init_scarcity_reserves'
    Limits: None
    Type: component

    b'Provides derivative for year_init_scarcity_reserves function'
    """
    return if_then_else(materials_availability_xreservesx() < equality_threshold(),
                                  (if_then_else(scarcity_reserves_counter() - 1 < equality_threshold(),
                                                          (time() * 1 / time_step()), 0)), 0)


_integ_year_init_scarcity_reserves = Integ(lambda: _dyear_init_scarcity_reserves_dt(),
                                                     lambda: _init_year_init_scarcity_reserves(), id = 11)


def _init_scarcity_final_fuels_counter():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for scarcity_final_fuels_counter'
    Limits: None
    Type: setup

    b'Provides initial conditions for scarcity_final_fuels_counter function'
    """
    return xr.DataArray(
        data= [0] * 5,
        coords={'final sources': ['electricity', 'heat', 'liquids', 'gases', 'solids']},
        dims=['final sources'])


@cache('step')
def _dscarcity_final_fuels_counter_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for scarcity_final_fuels_counter'
    Limits: None
    Type: component

    b'Provides derivative for scarcity_final_fuels_counter function'
    """
    return if_then_else(scarcity_final_fuels_flags() - 1 < equality_threshold(), 1, 0)


_integ_scarcity_final_fuels_counter = Integ(lambda: _dscarcity_final_fuels_counter_dt(),
                                                      lambda: _init_scarcity_final_fuels_counter(), id = 12)


def _init_scarcity_reserves_counter():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for scarcity_reserves_counter'
    Limits: None
    Type: setup

    b'Provides initial conditions for scarcity_reserves_counter function'
    """
    return xr.DataArray(
        data=[0] * 58,
        coords={
            'materials': [
                'adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement',
                'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components',
                'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass',
                'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt',
                'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese',
                'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic',
                'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx',
                'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand',
                'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin',
                'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide',
                'vanadium', 'wires', 'zinc'
            ]
        },
        dims=['materials'])


@cache('step')
def _dscarcity_reserves_counter_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for scarcity_reserves_counter'
    Limits: None
    Type: component

    b'Provides derivative for scarcity_reserves_counter function'
    """
    return if_then_else(materials_availability_xreservesx() < equality_threshold(), 1, 0)


_integ_scarcity_reserves_counter = Integ(lambda: _dscarcity_reserves_counter_dt(),
                                                   lambda: _init_scarcity_reserves_counter(), id = 13)


def _init_year_init_scarcity_resources():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for year_init_scarcity_resources'
    Limits: None
    Type: setup

    b'Provides initial conditions for year_init_scarcity_resources function'
    """
    return xr.DataArray(
        data=[0] * 58,
        coords={
            'materials': [
                'adhesive', 'aluminium', 'aluminium mirrors', 'cadmium', 'carbon fiber', 'cement',
                'chromium', 'copper', 'diesel', 'dy', 'electric div electronic components',
                'evacuation lines', 'fiberglass', 'foam glass', 'galium', 'glass',
                'glass reinforcing plastic', 'gravel', 'indium', 'iron', 'kno3 mined', 'asphalt',
                'lime', 'limestone', 'lithium', 'lubricant', 'magnesium', 'manganese',
                'heavy equipment', 'concrete', 'molybdenum', 'nano3 mined', 'nano3 synthetic',
                'neodymium', 'nickel', 'over grid 15 percentx', 'over grid 5 percentx',
                'paint', 'lead', 'plastics', 'polypropylene', 'rock', 'rock wool', 'sand',
                'silicon sand', 'silicon wafer modules', 'silver', 'site preparation', 'tin',
                'soda ash', 'steel', 'synthetic oil', 'tellurium', 'titanium', 'titanium dioxide',
                'vanadium', 'wires', 'zinc'
            ]
        },
        dims=['materials'])


@cache('step')
def _dyear_init_scarcity_resources_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for year_init_scarcity_resources'
    Limits: None
    Type: component

    b'Provides derivative for year_init_scarcity_resources function'
    """
    return if_then_else(materials_availability_xresourcesx() < equality_threshold(),
                                  (if_then_else(scarcity_resources_counter() - 1 < equality_threshold(),
                                                          (time() * 1 / time_step()), 0)), 0)


_integ_year_init_scarcity_resources = Integ(lambda: _dyear_init_scarcity_resources_dt(),
                                                      lambda: _init_year_init_scarcity_resources(), id = 14)

_delay_by_mineral_rr_rest_round1__time_step___time_step_current_recycling_rates_minerals_alt_techn_1__time_step = [Delay(
    lambda mat=materials: by_mineral_rr_rest().loc[mat].values, lambda: round(1 / time_step()) * time_step(),
    lambda mat=materials: current_recycling_rates_minerals_alt_techn().loc[mat].values, lambda: 1 / time_step(), id = 4)
    for materials in _subscript_dict.get('materials')]

_delay_by_mineral_rr_alt_techn_round1__time_step___time_step_current_recycling_rates_minerals_alt_techn_1__time_step = [Delay(
    lambda mat=materials: by_mineral_rr_alt_techn().loc[mat].values, lambda: round(1 / time_step()) * time_step(),
    lambda mat=materials: current_recycling_rates_minerals_alt_techn().loc[mat].values, lambda: 1 / time_step(), id = 5)
    for materials in _subscript_dict.get('materials')]


def _init_recycling_rates_minerals_alt_techn():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for recycling_rates_minerals_alt_techn'
    Limits: None
    Type: setup

    b'Provides initial conditions for recycling_rates_minerals_alt_techn function'
    """
    return current_recycling_rates_minerals_alt_techn() * all_minerals_virgin_quest()


@cache('step')
def _drecycling_rates_minerals_alt_techn_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for recycling_rates_minerals_alt_techn'
    Limits: None
    Type: component

    b'Provides derivative for recycling_rates_minerals_alt_techn function'
    """
    return improvement_recycling_rates_minerals_alt_techn()


_integ_recycling_rates_minerals_alt_techn = Integ(
    lambda: _drecycling_rates_minerals_alt_techn_dt(),
    lambda: _init_recycling_rates_minerals_alt_techn(), id = 15)

_initial_days_per_yearsec_per_day = Initial(lambda: days_per_year() * sec_per_day())

_initial_area1land_area_fractionlayer_depth = Initial(
    lambda: area() * (1 - land_area_fraction()) * layer_depth())

_initial_mass_heat_capwatt_per_j_ssec_per_yrdensity = Initial(
    lambda: mass_heat_cap() * watt_per_j_s() / sec_per_yr() * density())

_initial_co2_rad_forcenplog2 = Initial(lambda: co2_rad_force() * np.log(2))

_initial_2_co2x_forcingclimate_sensitivity_to_2x_co2 = Initial(
    lambda: twox_co2x_forcing() / climate_sensitivity_to_2x_co2())

_initial_heat_transfer_ratemean_depth_of_adjacent_layersheat_diffusion_covareddy_diff_coeffeddy_diff_mean1heat_diffusion_covar = Initial(
    lambda: (heat_transfer_rate() * mean_depth_of_adjacent_layers().loc['layer1'].values) * (heat_diffusion_covar() * (
        eddy_diff_coeff() / eddy_diff_mean()) + (1 - heat_diffusion_covar())))

_initial_eddy_diff_coeff_indexeddy_diff_mean = Initial(lambda: eddy_diff_coeff_index() * eddy_diff_mean())

_initial_arealand_area_fractionland_thickness1land_area_fractionmixed_depth = Initial(
    lambda: area() * (land_area_fraction() * land_thickness() +
                      (1 - land_area_fraction()) * mixed_depth()))


def _init_heat_in_deep_ocean():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for heat_in_deep_ocean'
    Limits: None
    Type: setup

    b'Provides initial conditions for heat_in_deep_ocean function'
    """
    return xr.DataArray(data=[
        init_deep_ocean_temp().loc['layer1'].values * deep_ocean_heat_cap().loc['layer1'].values,
        init_deep_ocean_temp().loc['layer2'].values * deep_ocean_heat_cap().loc['layer2'].values,
        init_deep_ocean_temp().loc['layer3'].values * deep_ocean_heat_cap().loc['layer3'].values,
        init_deep_ocean_temp().loc['layer4'].values * deep_ocean_heat_cap().loc['layer4'].values],
        coords={'layers': ['layer1', 'layer2', 'layer3', 'layer4']},
        dims=['layers'])


@cache('step')
def _dheat_in_deep_ocean_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for heat_in_deep_ocean'
    Limits: None
    Type: component

    b'Provides derivative for heat_in_deep_ocean function'
    """
    return xr.DataArray(data=[
        heat_transfer().loc['layer1'].values - heat_transfer().loc['layer2'].values,
        heat_transfer().loc['layer2'].values - heat_transfer().loc['layer3'].values,
        heat_transfer().loc['layer3'].values - heat_transfer().loc['layer4'].values,
        heat_transfer().loc['layer4'].values],
        coords={'layers': ['layer1', 'layer2', 'layer3', 'layer4']},
        dims=['layers'])


_integ_heat_in_deep_ocean = Integ(lambda: _dheat_in_deep_ocean_dt(), lambda: _init_heat_in_deep_ocean(), id = 16)

_initial_upper_layer_volume_vuvolumetric_heat_capacityarea = Initial(
    lambda: upper_layer_volume_vu() * volumetric_heat_capacity() / area())

_initial_lower_layer_volume_vuvolumetric_heat_capacityarea = Initial(
    lambda: lower_layer_volume_vu() * volumetric_heat_capacity() / area())

_integ_heat_in_atmosphere_and_upper_ocean = Integ(
    lambda: effective_radiative_forcing() - feedback_cooling() - heat_transfer().loc['layer1'].values,
    lambda: init_atmos_uocean_temp() * atm_and_upper_ocean_heat_cap(), id = 17)

_delay_total_radiative_forcing_roundtime_step__time_step___time_step_total_radiative_forcing_time_step__time_step = Delay(
    lambda: total_radiative_forcing(), lambda: round(time_step() / time_step()) * time_step(),
    lambda: total_radiative_forcing(), lambda: time_step() / time_step(), id = 6)

_integ_sf6 = Integ(lambda: global_sf6_emissions() - sf6_uptake(), lambda: initial_sf6(), id = 18)

_initial_initial_ch4_concppb_ch4_per_mton_ch4 = Initial(
    lambda: initial_ch4_conc() / ppb_ch4_per_mton_ch4())


def _init_hfc_in_atm():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for hfc_in_atm'
    Limits: None
    Type: setup

    b'Provides initial conditions for hfc_in_atm function'
    """
    return initial_hfc()


@cache('step')
def _dhfc_in_atm_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for hfc_in_atm'
    Limits: None
    Type: component

    b'Provides derivative for hfc_in_atm function'
    """
    return global_hfc_emissions() - hfc_uptake()


_integ_hfc_in_atm = Integ(lambda: _dhfc_in_atm_dt(), lambda: _init_hfc_in_atm(), id = 19)

_integ_total_c_from_permafrost = Integ(
    lambda: flux_c_from_permafrost_release() + ch4_emissions_from_permafrost_and_clathrate() /
    ch4_per_c() / mtons_per_gtons(), lambda: 0, id = 20)

_integ_total_ch4_released = Integ(
    lambda: ch4_emissions_from_permafrost_and_clathrate() / ch4_per_c() / mtons_per_gtons(),
    lambda: 0, id = 21)

_initial_ppt_per_molch4_molar_massg_per_tonton_per_mtonppt_per_ppb = Initial(
    lambda: ppt_per_mol() / ch4_molar_mass() * g_per_ton() * ton_per_mton() / ppt_per_ppb())

_initial_ppt_per_moln2o_n_molar_massg_per_tonton_per_mtonppt_per_ppb = Initial(
    lambda: ppt_per_mol() / n2o_n_molar_mass() * g_per_ton() * ton_per_mton() / ppt_per_ppb())

_initial_ppt_per_molhfc_molar_massg_per_ton = Initial(
    lambda: ppt_per_mol() / hfc_molar_mass() * g_per_ton())

_initial_ppt_per_molcf4_molar_massg_per_ton = Initial(
    lambda: ppt_per_mol() / cf4_molar_mass() * g_per_ton())

_integ_pfc_in_atm = Integ(lambda: global_total_pfc_emissions() - pfc_uptake(),
                                    lambda: init_pfc_in_atm(), id = 22)

_integ_n2o_in_atm = Integ(lambda: global_n2o_emissions() - n2o_uptake(),
                                    lambda: initial_n2o(), id = 23)

_initial_inital_hfc_conppt_hfc_per_tons_hfc = Initial(
    lambda: inital_hfc_con() / ppt_hfc_per_tons_hfc())

_initial_preindustrial_pfc_concppt_pfc_per_tons_pfc = Initial(
    lambda: preindustrial_pfc_conc() / ppt_pfc_per_tons_pfc())

_initial_ppt_per_molsf6_molar_massg_per_ton = Initial(
    lambda: ppt_per_mol() / sf6_molar_mass() * g_per_ton())

_initial_initial_n2o_concppb_n2o_per_mtonn = Initial(
    lambda: initial_n2o_conc() / ppb_n2o_per_mtonn())

_integ_ch4_in_atm = Integ(
    lambda: ch4_emissions_from_permafrost_and_clathrate() + global_anthropogenic_ch4_emissions() +
    natural_ch4_emissions() - ch4_uptake(), lambda: initial_ch4(), id = 24)

_initial_sensitivity_of_c_uptake_to_temperaturesensitivity_of_pco2_dic_to_temperature_mean = Initial(
    lambda: sensitivity_of_c_uptake_to_temperature() * sensitivity_of_pco2_dic_to_temperature_mean(
    ))

_initial_mixed_depthlayer_depth2 = Initial(lambda: (mixed_depth() + layer_depth().loc['layer1'].values) / 2)

_initial_biostim_coeff_indexbiostim_coeff_mean = Initial(
    lambda: biostim_coeff_index() * biostim_coeff_mean())

_integ_c_in_humus = Integ(
    lambda: flux_biomass_to_humus() - flux_humus_to_atmosphere() - flux_humus_to_ch4(),
    lambda: init_c_in_humus(), id = 25)

_integ_c_in_mixed_layer = Integ(
    lambda: flux_atm_to_ocean() - diffusion_flux().loc['layer1'].values,
    lambda: init_c_in_mixed_ocean_per_meter() * mixed_depth(), id = 26)

_integ_c_in_atmosphere = Integ(
    lambda: c_from_ch4_oxidation() + flux_biomass_to_atmosphere() + flux_humus_to_atmosphere(
    ) + total_c_anthro_emissions() - flux_atm_to_biomass() - flux_atm_to_ocean() +
    flux_c_from_permafrost_release(), lambda: init_c_in_atmos(), id = 27)

_initial_sensitivity_of_c_uptake_to_temperaturestrength_of_temp_effect_on_land_c_flux_mean = Initial(
    lambda: sensitivity_of_c_uptake_to_temperature() * strength_of_temp_effect_on_land_c_flux_mean(
    ))

_initial_preind_ocean_c_per_metermixed_depth = Initial(
    lambda: preind_ocean_c_per_meter() * mixed_depth())

_integ_c_in_biomass = Integ(
    lambda: flux_atm_to_biomass() - flux_biomass_to_atmosphere() - flux_biomass_to_ch4() -
    flux_biomass_to_humus(), lambda: init_c_in_biomass(), id = 28)


def _init_c_in_deep_ocean():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for c_in_deep_ocean'
    Limits: None
    Type: setup

    b'Provides initial conditions for c_in_deep_ocean function'
    """
    return xr.DataArray(data=[
        init_c_in_deep_ocean_per_meter().loc['layer1'].values * layer_depth().loc['layer1'].values,
        init_c_in_deep_ocean_per_meter().loc['layer2'].values * layer_depth().loc['layer2'].values,
        init_c_in_deep_ocean_per_meter().loc['layer3'].values * layer_depth().loc['layer3'].values,
        init_c_in_deep_ocean_per_meter().loc['layer4'].values * layer_depth().loc['layer4'].values],
        coords={'layers': ['layer1', 'layer2', 'layer3', 'layer4']},
        dims=['layers'])


@cache('step')
def _dc_in_deep_ocean_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for c_in_deep_ocean'
    Limits: None
    Type: component

    b'Provides derivative for c_in_deep_ocean function'
    """
    return xr.DataArray(data=[
        diffusion_flux().loc['layer1'].values - diffusion_flux().loc['layer2'].values,
        diffusion_flux().loc['layer2'].values - diffusion_flux().loc['layer3'].values,
        diffusion_flux().loc['layer3'].values - diffusion_flux().loc['layer4'].values,
        diffusion_flux().loc['layer4'].values],
        coords={'layers': ['layer1', 'layer2', 'layer3', 'layer4']},
        dims=['layers'])


_integ_c_in_deep_ocean = Integ(lambda: _dc_in_deep_ocean_dt(),
                                         lambda: _init_c_in_deep_ocean(), id = 29)

_initial_layer_deptheddy_diff_coeffmean_depth_of_adjacent_layers = [Initial(
    lambda lyr=layer: layer_depth().loc[lyr].values / (eddy_diff_coeff() / mean_depth_of_adjacent_layers().loc[lyr].values))
    for layer in _subscript_dict.get('layers')]

_delay_historic_water_by_type_intensities_by_sector_round1__time_step___time_step_initial_water_intensity_by_sector_1__time_step = [Delay(
    lambda sec=sector, col=color: historic_water_by_type_intensities_by_sector().loc[sec, col].values,
    lambda: round(1 / time_step()) * time_step(), lambda sec=sector, col=color: initial_water_intensity_by_sector().loc[sec, col].values,
    lambda: 1 / time_step(), id = 7) for sector in _subscript_dict.get('sectors') for color in _subscript_dict.get('water color')]


_delay_historic_water_by_type_intensities_for_households_round1__time_step___time_step_initial_water_intensity_for_households_1__time_step = [Delay(
    lambda wat=water: historic_water_by_type_intensities_for_households().loc[wat].values,
    lambda: round(1 / time_step()) * time_step(), lambda wat=water: initial_water_intensity_for_households().loc[wat].values,
    lambda: 1 / time_step(), id = 8) for water in _subscript_dict.get('water color')]


def _init_water_intensity_for_households():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for water_intensity_for_households'
    Limits: None
    Type: setup

    b'Provides initial conditions for water_intensity_for_households function'
    """
    return initial_water_intensity_for_households()


@cache('step')
def _dwater_intensity_for_households_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for water_intensity_for_households'
    Limits: None
    Type: component

    b'Provides derivative for water_intensity_for_households function'
    """
    return variation_water_intensity_households()


_integ_water_intensity_for_households = Integ(
    lambda: _dwater_intensity_for_households_dt(), lambda: _init_water_intensity_for_households(), id = 30)


def _init_water_intensity_by_sector():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for water_intensity_by_sector'
    Limits: None
    Type: setup

    b'Provides initial conditions for water_intensity_by_sector function'
    """
    return initial_water_intensity_by_sector()


@cache('step')
def _dwater_intensity_by_sector_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for water_intensity_by_sector'
    Limits: None
    Type: component

    b'Provides derivative for water_intensity_by_sector function'
    """
    return variation_water_intensity_by_sector()


_integ_water_intensity_by_sector = Integ(lambda: _dwater_intensity_by_sector_dt(),
                                                   lambda: _init_water_intensity_by_sector(), id = 31)

_delay_pe_traditional_biomass_consum_ej_round1__time_step___time_step_30_1__time_step = Delay(
    lambda: pe_traditional_biomass_consum_ej(), lambda: round(1 / time_step()) * time_step(),
    lambda: 30, lambda: 1 / time_step(), id = 9)

_delay_eroist_system_until_2015_roundtime_step__time_step___time_step_0_time_step__time_step = Delay(
    lambda: eroist_system_until_2015(), lambda: round(time_step() / time_step()) * time_step(),
    lambda: 0, lambda: time_step() / time_step(), id = 10)

_delay_eroist_system_roundtime_step__time_step___time_step_0_time_step__time_step = Delay(
    lambda: eroist_system(), lambda: round(time_step() / time_step()) * time_step(), lambda: 0,
    lambda: time_step() / time_step(), id = 11)

_delay_eroist_system_round1__time_step___time_step_0_1__time_step = Delay(
    lambda: eroist_system(), lambda: round(1 / time_step()) * time_step(), lambda: 0,
    lambda: 1 / time_step(), id = 12)

_delay_tfec_intensity_until_2009_roundtime_step__time_step___time_step_0_time_step__time_step = Delay(
    lambda: tfec_intensity_until_2009(), lambda: round(time_step() / time_step()) * time_step(),
    lambda: 0, lambda: time_step() / time_step(), id = 13)

_delay_fe_tot_generation_all_res_elec_twh_round1__time_step___time_step_2463_1__time_step = Delay(
    lambda: fe_tot_generation_all_res_elec_twh(), lambda: round(1 / time_step()) * time_step(),
    lambda: 2463, lambda: 1 / time_step(), id = 14)

_delay_fes_res_for_heat_ej_round1__time_step___time_step_3488_1__time_step = Delay(
    lambda: fes_res_for_heat_ej(), lambda: round(1 / time_step()) * time_step(), lambda: 3.488,
    lambda: 1 / time_step(), id = 15)

_delay_desired_gdp_round1__time_step___time_step_2916_1__time_step = Delay(
    lambda: desired_gdp(), lambda: round(1 / time_step()) * time_step(), lambda: 29.16,
    lambda: 1 / time_step(), id = 16)

_integ_desired_gdppc = Integ(lambda: desired_variation_gdppc(),
                                       lambda: gdppc_initial_year(), id = 32)

_delay_tfec_intensity_until_2009_without_eroi_roundtime_step__time_step___time_step_0_time_step__time_step = Delay(
    lambda: tfec_intensity_until_2009_without_eroi(),
    lambda: round(time_step() / time_step()) * time_step(), lambda: 0,
    lambda: time_step() / time_step(), id = 17)

_delay_tpes_intensity_until_2009_roundtime_step__time_step___time_step_0_time_step__time_step = Delay(
    lambda: tpes_intensity_until_2009(), lambda: round(time_step() / time_step()) * time_step(),
    lambda: 0, lambda: time_step() / time_step(), id = 18)

_delay_tfes_intensity_ej_tdollar_without_eroi_round1__time_step___time_step_8827_1__time_step = Delay(
    lambda: tfes_intensity_ej_tdollar_without_eroi(), lambda: round(1 / time_step()) * time_step(),
    lambda: 8.827, lambda: 1 / time_step(), id = 19)

_integ_installed_capacity_phs_tw = Integ(
    lambda: phs_capacity_under_construction() - wear_phs(), lambda: initial_instal_cap_phs(), id = 33)

_integ_phs_planned_capacity = Integ(
    lambda: new_phs_capacity_under_planning() + replacement_capacity_phs() -
    phs_capacity_under_construction(), lambda: initial_capacity_in_construction_phs(), id = 34)

_integ_required_capacity_phs = Integ(
    lambda: new_required_phs_capacity() - new_phs_capacity_under_planning(),
    lambda: initial_required_capacity_phs(), id = 35)

_integ_batteries_ev_plus_hib_plus_x2we = Integ(
    lambda: new_batteries() + replacement_batteries() - discarded_batteries(), lambda: 1, id = 36)

_delay_installed_capacity_res_elec_tw_round1__time_step___time_step_0_1__time_step = [Delay(
    lambda res=res_elec: installed_capacity_res_elec_tw().loc[res].values, lambda: round(1 / time_step()) * time_step(),
    lambda: 0, lambda: 1 / time_step(), id = 20) for res_elec in _subscript_dict.get('res elec')]

_delay_rurr_coal_start_year_plg_roundtime_step__time_step___time_step_0_time_step__time_step = Delay(
    lambda: rurr_coal_start_year_plg(), lambda: round(time_step() / time_step()) * time_step(),
    lambda: 0, lambda: time_step() / time_step(), id = 21)

_delay_rurr_tot_gas_until_start_year_plg_roundtime_step__time_step___time_step_0_time_step__time_step = Delay(
    lambda: rurr_tot_gas_until_start_year_plg(),
    lambda: round(time_step() / time_step()) * time_step(), lambda: 0,
    lambda: time_step() / time_step(), id = 22)

_delay_rurr_conv_oil_until_start_year_plg_roundtime_step__time_step___time_step_0_time_step__time_step = Delay(
    lambda: rurr_conv_oil_until_start_year_plg(),
    lambda: round(time_step() / time_step()) * time_step(), lambda: 0,
    lambda: time_step() / time_step(), id = 23)

_delay_rurr_unconv_oil_until_start_year_plg_roundtime_step__time_step___time_step_0_time_step__time_step = Delay(
    lambda: rurr_unconv_oil_until_start_year_plg(),
    lambda: round(time_step() / time_step()) * time_step(), lambda: 0,
    lambda: time_step() / time_step(), id = 24)

_delay_rurr_tot_oil_until_start_year_plg_roundtime_step__time_step___time_step_0_time_step__time_step = Delay(
    lambda: rurr_tot_oil_until_start_year_plg(),
    lambda: round(time_step() / time_step()) * time_step(), lambda: 0,
    lambda: time_step() / time_step(), id = 25)

_delay_rurr_conv_gas_until_start_year_plg_roundtime_step__time_step___time_step_0_time_step__time_step = Delay(
    lambda: rurr_conv_gas_until_start_year_plg(),
    lambda: round(time_step() / time_step()) * time_step(), lambda: 0,
    lambda: time_step() / time_step(), id = 26)

_delay_rurr_unconv_gas_until_start_year_plg_roundtime_step__time_step___time_step_0_time_step__time_step = Delay(
    lambda: rurr_unconv_gas_until_start_year_plg(),
    lambda: round(time_step() / time_step()) * time_step(), lambda: 0,
    lambda: time_step() / time_step(), id = 27)

_integ_rurr_conv_gas = Integ(
    lambda: -extraction_conv_gas_ej() - flow_conv_gas_left_in_ground(), lambda: urr_conv_gas() -
    cumulated_conv_gas_extraction_to_1995() * separate_conv_and_unconv_gas_quest(), id = 37)

_integ_rurr_unconv_gas = Integ(
    lambda: -extraction_unconv_gas_ej() - flow_unconv_gas_left_in_ground(), lambda: urr_unconv_gas(
    ) - cumulated_unconv_gas_extraction_to_1995() * separate_conv_and_unconv_gas_quest(), id = 38)

_integ_rurr_conv_oil = Integ(
    lambda: -extraction_conv_oil_ej() - flow_conv_oil_left_in_ground(), lambda: urr_conv_oil() -
    cumulated_conv_oil_extraction_to_1995() * separate_conv_and_unconv_oil_quest(), id = 39)


def _init_recycling_rates_minerals_rest():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for recycling_rates_minerals_rest'
    Limits: None
    Type: setup

    b'Provides initial conditions for recycling_rates_minerals_rest function'
    """
    return current_recycling_rates_minerals() * all_minerals_virgin_quest()


@cache('step')
def _drecycling_rates_minerals_rest_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for recycling_rates_minerals_rest'
    Limits: None
    Type: component

    b'Provides derivative for recycling_rates_minerals_rest function'
    """
    return improvement_recycling_rates_minerals_rest()


_integ_recycling_rates_minerals_rest = Integ(
    lambda: _drecycling_rates_minerals_rest_dt(), lambda: _init_recycling_rates_minerals_rest(), id = 40)


def _init_percents_h_vehicles():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for percents_h_vehicles'
    Limits: None
    Type: setup

    b'Provides initial conditions for percents_h_vehicles function'
    """
    return xr.DataArray(data=[1 - initial_2w_percent(), 0. , 0., 0., initial_2w_percent(), 0.],
        coords={'households vehicles': ['liq 4wheels', 'hib 4wheels', 'elec 4wheels', 'gas 4wheels', 'liq 2wheels', 'elec 2wheels']},
        dims=['households vehicles'])


@cache('step')
def _dpercents_h_vehicles_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for percents_h_vehicles'
    Limits: None
    Type: component

    b'Provides derivative for percents_h_vehicles function'
    """
    return var_percents_h_vehicles()


_integ_percents_h_vehicles = Integ(lambda: _dpercents_h_vehicles_dt(),
                                             lambda: _init_percents_h_vehicles(), id = 41)


def _init_percent_t_vehicles():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for percent_t_vehicles'
    Limits: None
    Type: setup

    b'Provides initial conditions for percent_t_vehicles function'
    """
    return initial_percent_t_vehicles()


@cache('step')
def _dpercent_t_vehicles_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for percent_t_vehicles'
    Limits: None
    Type: component

    b'Provides derivative for percent_t_vehicles function'
    """
    return var_percent_t_vehicles()


_integ_percent_t_vehicles = Integ(lambda: _dpercent_t_vehicles_dt(),
                                            lambda: _init_percent_t_vehicles(), id = 42)


def _init_energy_intensity_of_households_transport():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for energy_intensity_of_households_transport'
    Limits: None
    Type: setup

    b'Provides initial conditions for energy_intensity_of_households_transport function'
    """
    return initial_energy_intensity_of_households_transport_2009()


@cache('step')
def _denergy_intensity_of_households_transport_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for energy_intensity_of_households_transport'
    Limits: None
    Type: component

    b'Provides derivative for energy_intensity_of_households_transport function'
    """
    return variation_energy_intensity_of_households_transport()


_integ_energy_intensity_of_households_transport = Integ(
    lambda: _denergy_intensity_of_households_transport_dt(),
    lambda: _init_energy_intensity_of_households_transport(), id = 43)

_integ_max_percent_2_wheels = Integ(lambda: rate_4w_to_2w(),
                                              lambda: initial_2w_percent(), id = 44)

_integ_max_percent_4_wheels = Integ(lambda: -rate_4w_to_2w(),
                                              lambda: 1 - initial_2w_percent(), id = 45)

_delay_pes_oil_ej_roundtime_step__time_step___time_step_1395_time_step__time_step = Delay(
    lambda: pes_oil_ej(), lambda: round(time_step() / time_step()) * time_step(), lambda: 139.5,
    lambda: time_step() / time_step(), id = 28)


def _init_minerals_extraction_projection_rest_cte_rr():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for minerals_extraction_projection_rest_cte_rr'
    Limits: None
    Type: setup

    b'Provides initial conditions for minerals_extraction_projection_rest_cte_rr function'
    """
    return initial_minerals_extraction_rest() * mt_per_tonne()


@cache('step')
def _dminerals_extraction_projection_rest_cte_rr_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for minerals_extraction_projection_rest_cte_rr'
    Limits: None
    Type: component

    b'Provides derivative for minerals_extraction_projection_rest_cte_rr function'
    """
    return variation_minerals_extraction_rest()


_integ_minerals_extraction_projection_rest_cte_rr = Integ(
    lambda: _dminerals_extraction_projection_rest_cte_rr_dt(),
    lambda: _init_minerals_extraction_projection_rest_cte_rr(), id = 46)

_integ_potential_peavail_biofuels_land_marg_ej = Integ(lambda: new_biofuels_land_marg(),
                                                                 lambda: 0, id = 47)

_delay_tfec_res_ej_round1__time_step___time_step_43_1__time_step = Delay(
    lambda: tfec_res_ej(), lambda: round(1 / time_step()) * time_step(), lambda: 43,
    lambda: 1 / time_step(), id = 29)

_delay_tpe_from_res_ej_round1__time_step___time_step_4803_1__time_step = Delay(
    lambda: tpe_from_res_ej(), lambda: round(1 / time_step()) * time_step(), lambda: 48.03,
    lambda: 1 / time_step(), id = 30)

_delay_share_res_vs_tpes_round1__time_step___time_step_0123_1__time_step = Delay(
    lambda: share_res_vs_tpes(), lambda: round(1 / time_step()) * time_step(), lambda: 0.123,
    lambda: 1 / time_step(), id = 31)

_delay_share_res_vs_tfec_round1__time_step___time_step_01614_1__time_step = Delay(
    lambda: share_res_vs_tfec(), lambda: round(1 / time_step()) * time_step(), lambda: 0.1614,
    lambda: 1 / time_step(), id = 32)


def _init_installed_capacity_res_heat_nc_tw():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for installed_capacity_res_heat_nc_tw'
    Limits: None
    Type: setup

    b'Provides initial conditions for installed_capacity_res_heat_nc_tw function'
    """
    return initial_value_res_for_heat_nc()


@cache('step')
def _dinstalled_capacity_res_heat_nc_tw_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for installed_capacity_res_heat_nc_tw'
    Limits: None
    Type: component

    b'Provides derivative for installed_capacity_res_heat_nc_tw function'
    """
    return new_res_capacity_for_heat_nc_tw() + replacement_res_for_heat_nc_tw(
    ) - wear_res_capacity_for_heat_nc_tw()


_integ_installed_capacity_res_heat_nc_tw = Integ(
    lambda: _dinstalled_capacity_res_heat_nc_tw_dt(),
    lambda: _init_installed_capacity_res_heat_nc_tw(), id = 48)


def _init_non_energy_use_demand_by_final_fuel_ej():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for non_energy_use_demand_by_final_fuel_ej'
    Limits: None
    Type: setup

    b'Provides initial conditions for non_energy_use_demand_by_final_fuel_ej function'
    """
    return initial_non_energy_use()


@cache('step')
def _dnon_energy_use_demand_by_final_fuel_ej_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for non_energy_use_demand_by_final_fuel_ej'
    Limits: None
    Type: component

    b'Provides derivative for non_energy_use_demand_by_final_fuel_ej function'
    """
    return annual_variation_non_energy_use()


_integ_non_energy_use_demand_by_final_fuel_ej = Integ(
    lambda: _dnon_energy_use_demand_by_final_fuel_ej_dt(),
    lambda: _init_non_energy_use_demand_by_final_fuel_ej(), id = 49)


def _init_cum_materials_to_extract_for_ev_batteries():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_to_extract_for_ev_batteries'
    Limits: None
    Type: setup

    b'Provides initial conditions for cum_materials_to_extract_for_ev_batteries function'
    """
    return initial_cumulated_material_requirements_for_ev_batteries_1995()


@cache('step')
def _dcum_materials_to_extract_for_ev_batteries_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_to_extract_for_ev_batteries'
    Limits: None
    Type: component

    b'Provides derivative for cum_materials_to_extract_for_ev_batteries function'
    """
    return total_materials_to_extract_for_ev_batteries_mt()


_integ_cum_materials_to_extract_for_ev_batteries = Integ(
    lambda: _dcum_materials_to_extract_for_ev_batteries_dt(),
    lambda: _init_cum_materials_to_extract_for_ev_batteries(), id = 50)


def _init_cum_materials_requirements_for_ev_batteries():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_requirements_for_ev_batteries'
    Limits: None
    Type: setup

    b'Provides initial conditions for cum_materials_requirements_for_ev_batteries function'
    """
    return initial_cumulated_material_requirements_for_ev_batteries_1995()


@cache('step')
def _dcum_materials_requirements_for_ev_batteries_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_requirements_for_ev_batteries'
    Limits: None
    Type: component

    b'Provides derivative for cum_materials_requirements_for_ev_batteries function'
    """
    return total_materials_required_for_ev_batteries()


_integ_cum_materials_requirements_for_ev_batteries = Integ(
    lambda: _dcum_materials_requirements_for_ev_batteries_dt(),
    lambda: _init_cum_materials_requirements_for_ev_batteries(), id = 51)


def _init_cum_materials_to_extract_for_ev_batteries_from_2015():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_to_extract_for_ev_batteries_from_2015'
    Limits: None
    Type: setup

    b'Provides initial conditions for cum_materials_to_extract_for_ev_batteries_from_2015 function'
    """
    return initial_cumulated_material_requirements_for_ev_batteries_1995()


@cache('step')
def _dcum_materials_to_extract_for_ev_batteries_from_2015_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_to_extract_for_ev_batteries_from_2015'
    Limits: None
    Type: component

    b'Provides derivative for cum_materials_to_extract_for_ev_batteries_from_2015 function'
    """
    return total_materials_to_extract_for_ev_batteries_from_2015_mt()


_integ_cum_materials_to_extract_for_ev_batteries_from_2015 = Integ(
    lambda: _dcum_materials_to_extract_for_ev_batteries_from_2015_dt(),
    lambda: _init_cum_materials_to_extract_for_ev_batteries_from_2015(), id = 52)

_delay_pes_fossil_fuel_extraction_roundtime_step__time_step___time_step_139_time_step__time_step = Delay(
    lambda: pes_fossil_fuel_extraction().loc['liquids'].values, lambda: round(time_step() / time_step()) * time_step(),
    lambda: 139, lambda: time_step() / time_step(), id = 33)

_delay_pes_fossil_fuel_extraction_roundtime_step__time_step___time_step_101_time_step__time_step = Delay(
    lambda: pes_fossil_fuel_extraction().loc['solids'].values, lambda: round(time_step() / time_step()) * time_step(),
    lambda: 101, lambda: time_step() / time_step(), id = 34)

_delay_pes_fossil_fuel_extraction_roundtime_step__time_step___time_step_79_time_step__time_step = Delay(
    lambda: pes_fossil_fuel_extraction().loc['gases'].values, lambda: round(time_step() / time_step()) * time_step(),
    lambda: 79, lambda: time_step() / time_step(), id = 35)

_delay_tfes_intensity_ej_tdollar_round1__time_step___time_step_8827_1__time_step = Delay(
    lambda: tfes_intensity_ej_tdollar(), lambda: round(1 / time_step()) * time_step(),
    lambda: 8.827, lambda: 1 / time_step(), id = 36)

_delay_tpes_intensity_ej_tdollar_round1__time_step___time_step_1314_1__time_step = Delay(
    lambda: tpes_intensity_ej_tdollar(), lambda: round(1 / time_step()) * time_step(),
    lambda: 13.14, lambda: 1 / time_step(), id = 37)

_integ_scarcity_conv_gas_stock = Integ(lambda: increase_scarcity_conv_gas(),
                                                 lambda: 0.2502, id = 53)

_integ_ctl_potential_production = Integ(
    lambda: replacement_ctl() + variation_ctl() - wear_ctl(), lambda: initial_ctl_production(), id = 54)

_integ_gtl_potential_production = Integ(
    lambda: replacement_gtl() + variation_gtl() - wear_gtl(), lambda: initial_gtl_production(), id = 55)

_integ_abundance_unconv_oil_stock = Integ(lambda: increase_abundance_unconv_oil(),
                                                    lambda: 1, id = 56)

_delay_abundance_unconv_oil_round1__time_step___time_step_1_1__time_step = Delay(
    lambda: abundance_unconv_oil(), lambda: round(1 / time_step()) * time_step(), lambda: 1,
    lambda: 1 / time_step(), id = 38)

_integ_scarcity_conv_oil_stock = Integ(lambda: increase_scarcity_conv_oil(),
                                                 lambda: 0.3989, id = 57)

_integ_share_variable_res_elec_generation_vs_total_gen = Integ(
    lambda: increase_variable_res_share_elec_vs_total_generation(),
    lambda: initial_share_variable_res_elec_gen_vs_total(), id = 58)

_integ_cumulated_invest_e_grid = Integ(
    lambda: extra_monet_invest_to_cope_with_variable_elec_res(), lambda: 0, id = 59)

_integ_labour_share = Integ(lambda: variation_labour_share(), lambda: 0.6374, id = 60)


def _init_demand_by_sector_fd():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for demand_by_sector_fd'
    Limits: None
    Type: setup

    b'Provides initial conditions for demand_by_sector_fd function'
    """
    return initial_demand_by_sectot()


@cache('step')
def _ddemand_by_sector_fd_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for demand_by_sector_fd'
    Limits: None
    Type: component

    b'Provides derivative for demand_by_sector_fd function'
    """
    return variation_demand_flow_fd() - demand_not_covered_by_sector_fd()


_integ_demand_by_sector_fd = Integ(lambda: _ddemand_by_sector_fd_dt(),
                                             lambda: _init_demand_by_sector_fd(), id = 61)


def _init_gross_fixed_capital_formation():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for gross_fixed_capital_formation'
    Limits: None
    Type: setup

    b'Provides initial conditions for gross_fixed_capital_formation function'
    """
    return initial_gfcf()


@cache('step')
def _dgross_fixed_capital_formation_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for gross_fixed_capital_formation'
    Limits: None
    Type: component

    b'Provides derivative for gross_fixed_capital_formation function'
    """
    return variation_gfcf() - gfcf_not_covered()


_integ_gross_fixed_capital_formation = Integ(
    lambda: _dgross_fixed_capital_formation_dt(), lambda: _init_gross_fixed_capital_formation(), id = 62)


def _init_household_demand():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for household_demand'
    Limits: None
    Type: setup

    b'Provides initial conditions for household_demand function'
    """
    return initial_household_demand()


@cache('step')
def _dhousehold_demand_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for household_demand'
    Limits: None
    Type: component

    b'Provides derivative for household_demand function'
    """
    return variation_household_demand() - household_demand_not_covered()


_integ_household_demand = Integ(lambda: _dhousehold_demand_dt(),
                                          lambda: _init_household_demand(), id = 63)

_delay_quality_of_electricity_2015_round003125__time_step___time_step_075_003125__time_step = Delay(
    lambda: quality_of_electricity_2015(), lambda: round(0.03125 / time_step()) * time_step(),
    lambda: 0.75, lambda: 0.03125 / time_step(), id = 39)

_delay_share_e_losses_cc_until_x2015_roundtime_step__time_step___time_step_0_time_step__time_step = Delay(
    lambda: share_e_losses_cc_until_x2015(),
    lambda: round(time_step() / time_step()) * time_step(), lambda: 0,
    lambda: time_step() / time_step(), id = 40)

_integ_cc_total = Integ(lambda: variation_cc() - cc_total_not_covered(),
                                  lambda: initial_cc_total(), id = 64)

_integ_lc = Integ(lambda: variation_lc() - lc_not_covered(), lambda: initial_lc_total(), id = 65)


def _init_cum_materials_to_extract_rest():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_to_extract_rest'
    Limits: None
    Type: setup

    b'Provides initial conditions for cum_materials_to_extract_rest function'
    """
    return initial_cumulated_material_requirements_for_rest_1995()


@cache('step')
def _dcum_materials_to_extract_rest_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_to_extract_rest'
    Limits: None
    Type: component

    b'Provides derivative for cum_materials_to_extract_rest function'
    """
    return materials_to_extract_rest_mt()


_integ_cum_materials_to_extract_rest = Integ(
    lambda: _dcum_materials_to_extract_rest_dt(), lambda: _init_cum_materials_to_extract_rest(), id = 66)


def _init_cum_materials_to_extract_rest_from_2015():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_to_extract_rest_from_2015'
    Limits: None
    Type: setup

    b'Provides initial conditions for cum_materials_to_extract_rest_from_2015 function'
    """
    return initial_cumulated_material_requirements_for_rest_1995()


@cache('step')
def _dcum_materials_to_extract_rest_from_2015_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_to_extract_rest_from_2015'
    Limits: None
    Type: component

    b'Provides derivative for cum_materials_to_extract_rest_from_2015 function'
    """
    return materials_to_extract_rest_from_2015_mt()


_integ_cum_materials_to_extract_rest_from_2015 = Integ(
    lambda: _dcum_materials_to_extract_rest_from_2015_dt(),
    lambda: _init_cum_materials_to_extract_rest_from_2015(), id = 67)


def _init_cum_materials_to_extract_for_res_elec_from_2015():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_to_extract_for_res_elec_from_2015'
    Limits: None
    Type: setup

    b'Provides initial conditions for cum_materials_to_extract_for_res_elec_from_2015 function'
    """
    return initial_cumulated_material_requirements_for_res_elec_1995()


@cache('step')
def _dcum_materials_to_extract_for_res_elec_from_2015_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_to_extract_for_res_elec_from_2015'
    Limits: None
    Type: component

    b'Provides derivative for cum_materials_to_extract_for_res_elec_from_2015 function'
    """
    return total_materials_to_extract_for_res_elec_from_2015_mt()


_integ_cum_materials_to_extract_for_res_elec_from_2015 = Integ(
    lambda: _dcum_materials_to_extract_for_res_elec_from_2015_dt(),
    lambda: _init_cum_materials_to_extract_for_res_elec_from_2015(), id = 68)


def _init_cum_materials_to_extract_for_res_elec():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_to_extract_for_res_elec'
    Limits: None
    Type: setup

    b'Provides initial conditions for cum_materials_to_extract_for_res_elec function'
    """
    return initial_cumulated_material_requirements_for_res_elec_1995()


@cache('step')
def _dcum_materials_to_extract_for_res_elec_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_to_extract_for_res_elec'
    Limits: None
    Type: component

    b'Provides derivative for cum_materials_to_extract_for_res_elec function'
    """
    return total_materials_to_extract_for_res_elec_mt()


_integ_cum_materials_to_extract_for_res_elec = Integ(
    lambda: _dcum_materials_to_extract_for_res_elec_dt(),
    lambda: _init_cum_materials_to_extract_for_res_elec(), id = 69)

_integ_pes_waste_ej = Integ(lambda: new_waste_supply_ej(), lambda: initial_pes_waste(), id = 70)


def _init_installed_capacity_res_elec_tw():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for installed_capacity_res_elec_tw'
    Limits: None
    Type: setup

    b'Provides initial conditions for installed_capacity_res_elec_tw function'
    """
    return initial_instal_cap_res_elec()


@cache('step')
def _dinstalled_capacity_res_elec_tw_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for installed_capacity_res_elec_tw'
    Limits: None
    Type: component

    b'Provides derivative for installed_capacity_res_elec_tw function'
    """
    return res_elec_capacity_under_construction_tw() - wear_res_elec()


_integ_installed_capacity_res_elec_tw = Integ(
    lambda: _dinstalled_capacity_res_elec_tw_dt(), lambda: _init_installed_capacity_res_elec_tw(), id = 71)


def _init_required_capacity_res_elec_tw():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for required_capacity_res_elec_tw'
    Limits: None
    Type: setup

    b'Provides initial conditions for required_capacity_res_elec_tw function'
    """
    return initial_required_capacity_res_elec()


@cache('step')
def _drequired_capacity_res_elec_tw_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for required_capacity_res_elec_tw'
    Limits: None
    Type: component

    b'Provides derivative for required_capacity_res_elec_tw function'
    """
    return new_required_capacity_res_elec() - new_res_elec_capacity_under_planning()


_integ_required_capacity_res_elec_tw = Integ(
    lambda: _drequired_capacity_res_elec_tw_dt(), lambda: _init_required_capacity_res_elec_tw(), id = 72)


def _init_res_elec_planned_capacity_tw():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for res_elec_planned_capacity_tw'
    Limits: None
    Type: setup

    b'Provides initial conditions for res_elec_planned_capacity_tw function'
    """
    return initial_capacity_in_construction_res_elec()


@cache('step')
def _dres_elec_planned_capacity_tw_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for res_elec_planned_capacity_tw'
    Limits: None
    Type: component

    b'Provides derivative for res_elec_planned_capacity_tw function'
    """
    return new_res_elec_capacity_under_planning() + replacement_capacity_res_elec() - res_elec_capacity_under_construction_tw()


_integ_res_elec_planned_capacity_tw = Integ(lambda: _dres_elec_planned_capacity_tw_dt(),
                                                      lambda: _init_res_elec_planned_capacity_tw(), id = 73)

_delay_scarcity_conv_gas_round1__time_step___time_step_02502_1__time_step = Delay(
    lambda: scarcity_conv_gas(), lambda: round(1 / time_step()) * time_step(), lambda: 0.2502,
    lambda: 1 / time_step(), id = 41)

_delay_scarcity_conv_oil_round1__time_step___time_step_03989_1__time_step = Delay(
    lambda: scarcity_conv_oil(), lambda: round(1 / time_step()) * time_step(), lambda: 0.3989,
    lambda: 1 / time_step(), id = 42)

_integ_rurr_tot_agg_gas = Integ(
    lambda: -extraction_tot_agg_gas_ej() - flow_tot_agg_gas_left_in_ground(), lambda: 
    if_then_else(separate_conv_and_unconv_gas_quest() == 0,
                 urr_tot_agg_gas() - cumulated_tot_agg_gas_extraction_to_1995(), 0), id = 74)

_integ_total_agg_gas_left_in_ground = Integ(lambda: flow_tot_agg_gas_left_in_ground(),
                                                      lambda: 0, id = 75)

_integ_cumulated_tot_agg_gas_extraction = Integ(
    lambda: extraction_tot_agg_gas_ej(), lambda: cumulated_tot_agg_gas_extraction_to_1995(), id = 76)

_integ_rurr_tot_agg_oil = Integ(
    lambda: -extraction_tot_agg_oil_ej() - flow_tot_agg_oil_left_in_ground(),
    lambda: if_then_else(separate_conv_and_unconv_oil_quest() == 0,
                                   urr_tot_agg_oil() - cumulated_tot_agg_extraction_to_1995(), 0), id = 77)

_integ_total_agg_oil_left_in_ground = Integ(lambda: flow_tot_agg_oil_left_in_ground(),
                                                      lambda: 0, id = 78)

_integ_cumulated_tot_agg_oil_extraction = Integ(
    lambda: extraction_tot_agg_oil_ej(), lambda: cumulated_tot_agg_extraction_to_1995(), id = 79)

_integ_total_unconv_gas_left_in_ground = Integ(lambda: flow_unconv_gas_left_in_ground(),
                                                         lambda: 0, id = 80)

_integ_total_unconv_oil_left_in_ground = Integ(lambda: flow_unconv_oil_left_in_ground(),
                                                         lambda: 0, id = 81)

_integ_total_coal_left_in_ground = Integ(lambda: flow_coal_left_in_ground(), lambda: 0, id = 82)

_integ_total_conv_gas_left_in_ground = Integ(lambda: flow_conv_gas_left_in_ground(),
                                                       lambda: 0, id = 83)

_integ_total_conv_oil_left_in_ground = Integ(lambda: flow_conv_oil_left_in_ground(),
                                                       lambda: 0, id = 84)

_integ_rurr_coal = Integ(lambda: -extraction_coal_ej() - flow_coal_left_in_ground(),
                                   lambda: urr_coal() - cumulated_coal_extraction_to_1995(), id = 85)

_integ_pes_biogas_ej = Integ(lambda: new_pes_biogas(), lambda: 0.13135, id = 86)

_integ_share_transm_and_distr_elec_losses = Integ(
    lambda: variation_share_transm_and_distr_elec_losses(),
    lambda: share_transm_and_distr_elec_losses_initial(), id = 87)


def _init_cum_materials_requirements_for_res_elec():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_requirements_for_res_elec'
    Limits: None
    Type: setup

    b'Provides initial conditions for cum_materials_requirements_for_res_elec function'
    """
    return initial_cumulated_material_requirements_for_res_elec_1995()


@cache('step')
def _dcum_materials_requirements_for_res_elec_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for cum_materials_requirements_for_res_elec'
    Limits: None
    Type: component

    b'Provides derivative for cum_materials_requirements_for_res_elec function'
    """
    return total_materials_required_for_res_elec_mt()


_integ_cum_materials_requirements_for_res_elec = Integ(
    lambda: _dcum_materials_requirements_for_res_elec_dt(),
    lambda: _init_cum_materials_requirements_for_res_elec(), id = 88)


def _init_installed_capacity_res_heat_com_tw():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for installed_capacity_res_heat_com_tw'
    Limits: None
    Type: setup

    b'Provides initial conditions for installed_capacity_res_heat_com_tw function'
    """
    return initial_value_res_for_heat_com()


@cache('step')
def _dinstalled_capacity_res_heat_com_tw_dt():
    """
    Real Name: b'Implicit'
    Original Eqn: b'None'
    Units: b'See docs for installed_capacity_res_heat_com_tw'
    Limits: None
    Type: component

    b'Provides derivative for installed_capacity_res_heat_com_tw function'
    """
    return new_res_capacity_for_heat_com_tw() + replacement_res_for_heat_com_tw() - wear_res_capacity_for_heat_com_tw()


_integ_installed_capacity_res_heat_com_tw = Integ(
    lambda: _dinstalled_capacity_res_heat_com_tw_dt(),
    lambda: _init_installed_capacity_res_heat_com_tw(), id = 89)

_integ_installed_capacity_nuclear_tw = Integ(
    lambda: nuclear_capacity_under_construction() - nuclear_capacity_phase_out() - wear_nuclear(),
    lambda: initial_capacity_installed_nuclear(), id = 90)

_integ_required_capacity_nuclear_tw = Integ(
    lambda: new_required_capacity_nuclear() - new_nuclear_capacity_under_planning(),
    lambda: initial_required_capacity_nuclear(), id = 91)

_integ_planned_nuclear_capacity_tw = Integ(
    lambda: new_nuclear_capacity_under_planning() + replacement_nuclear_capacity() -
    nuclear_capacity_under_construction(), lambda: initial_capacity_in_construction_nuclear(), id = 92)

_delay_gdp_round1__time_step___time_step_2916_1__time_step = Delay(
    lambda: gdp(), lambda: round(1 / time_step()) * time_step(), lambda: 29.16,
    lambda: 1 / time_step(), id = 43)

_integ_land_compet_biofuels_2gen_mha = Integ(
    lambda: new_biofuels_2gen_land_compet() - land_shifted_to_biofuels_3gen(),
    lambda: initial_value_land_compet_biofuels_2gen_mha() * land_productivity_biofuels_2gen_ej_mha(
    ), id = 93)

_delay_constrain_gas_exogenous_growth_quest_round1__time_step___time_step_1_1__time_step = Delay(
    lambda: constrain_gas_exogenous_growth_quest(), lambda: round(1 / time_step()) * time_step(),
    lambda: 1, lambda: 1 / time_step(), id = 44)

_delay_constrain_liquids_exogenous_growth_quest_round1__time_step___time_step_1_1__time_step = Delay(
    lambda: constrain_liquids_exogenous_growth_quest(),
    lambda: round(1 / time_step()) * time_step(), lambda: 1, lambda: 1 / time_step(), id = 45)

_delay_check_liquids_round1__time_step___time_step_1_1__time_step = Delay(
    lambda: check_liquids(), lambda: round(1 / time_step()) * time_step(), lambda: 1,
    lambda: 1 / time_step(), id = 46)

_delay_check_gases_round1__time_step___time_step_1_1__time_step = Delay(
    lambda: check_gases(), lambda: round(1 / time_step()) * time_step(), lambda: 1,
    lambda: 1 / time_step(), id = 47)

_delay_share_variable_res_elec_generation_vs_total_round1__time_step___time_step_00071_1__time_step = Delay(
    lambda: share_variable_res_elec_generation_vs_total(),
    lambda: round(1 / time_step()) * time_step(), lambda: 0.0071, lambda: 1 / time_step(), id = 48)

_integ_efficiency_gas_for_electricity = Integ(
    lambda: improvement_efficiency_gas_for_electricity(),
    lambda: initial_efficiency_gas_for_electricity() * percent_to_share(), id = 94)

_integ_cumulated_conv_gas_extraction = Integ(
    lambda: extraction_conv_gas_ej(), lambda: cumulated_conv_gas_extraction_to_1995(), id = 95)

_integ_cumulated_unconv_gas_extraction = Integ(
    lambda: extraction_unconv_gas_ej(), lambda: cumulated_unconv_gas_extraction_to_1995(), id = 96)

_integ_rurr_uranium = Integ(
    lambda: -extraction_uranium_ej(),
    lambda: urr_uranium() - cumulated_uranium_extraction_to_1995(), id = 97)

_integ_cumulated_conv_oil_extraction = Integ(
    lambda: extraction_conv_oil_ej(), lambda: cumulated_conv_oil_extraction_to_1995(), id = 98)

_integ_cumulated_unconv_oil_extraction = Integ(
    lambda: extraction_unconv_oil_ej(), lambda: cumulated_unconv_oil_extraction_to_1995(), id = 99)

_integ_cumulated_coal_extraction = Integ(lambda: extraction_coal_ej(),
                                                   lambda: cumulated_coal_extraction_to_1995(), id = 100)

_integ_cumulated_uranium_extraction = Integ(
    lambda: extraction_uranium_ej(), lambda: cumulated_uranium_extraction_to_1995(), id = 101)

_integ_land_compet_biofuels_3gen_mha = Integ(lambda: land_shifted_to_biofuels_3gen(),
                                                       lambda: 0, id = 102)

_integ_potential_pe_cellulosic_biofuel_ej = Integ(lambda: new_cellulosic_biofuels(),
                                                            lambda: 0, id = 103)

_integ_pe_bioe_residues_for_heat_plus_elec_ej = Integ(
    lambda: new_bioe_residues_for_heat_plus_elec(), lambda: 0, id = 104)

_integ_population = Integ(lambda: pop_variation(), lambda: initial_population(), id = 105)

_delay_extraction_unconv_gas_ej_roundtime_step__time_step___time_step_0_time_step__time_step = Delay(
    lambda: extraction_unconv_gas_ej(), lambda: round(time_step() / time_step()) * time_step(),
    lambda: 0, lambda: time_step() / time_step(), id = 49)

_integ_cumulated_total_monet_invest_res_for_elec = Integ(
    lambda: total_monet_invest_res_for_elec_tdolar(), lambda: 0, id = 106)

_integ_total_cumulative_emissions_gtc = Integ(lambda: new_c_gtc(),
                                                        lambda: cumulative_emissions_to_1995(), id = 107)

_integ_rurr_unconv_oil_ej = Integ(
    lambda: -extraction_unconv_oil_ej() - flow_unconv_oil_left_in_ground(), lambda: urr_unconv_oil(
    ) - cumulated_unconv_oil_extraction_to_1995() * separate_conv_and_unconv_oil_quest(), id = 108)

_delay_real_demand_by_sector_round1__time_step___time_step_10_1__time_step = [Delay(
    lambda sec=sectors: real_demand_by_sector().loc[sec].values, lambda: round(1 / time_step()) * time_step(), lambda: 10,
    lambda: 1 / time_step(), id = 50) for sectors in _subscript_dict.get('sectors')]

_delay_extraction_unconv_oil_ej_roundtime_step__time_step___time_step_109_time_step__time_step = Delay(
    lambda: extraction_unconv_oil_ej(), lambda: round(time_step() / time_step()) * time_step(),
    lambda: 1.09, lambda: time_step() / time_step(), id = 51)
